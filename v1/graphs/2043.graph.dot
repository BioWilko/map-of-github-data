digraph G {
"tstanislawek/awesome-document-understanding" -> "shabie/docformer"
"tstanislawek/awesome-document-understanding" -> "wenwenyu/PICK-pytorch"
"tstanislawek/awesome-document-understanding" -> "jpWang/LiLT"
"tstanislawek/awesome-document-understanding" -> "clovaai/donut"
"tstanislawek/awesome-document-understanding" -> "hikopensource/DAVAR-Lab-OCR"
"tstanislawek/awesome-document-understanding" -> "doc-analysis/DocBank"
"tstanislawek/awesome-document-understanding" -> "cv-small-snails/Awesome-Table-Recognition"
"tstanislawek/awesome-document-understanding" -> "microsoft/table-transformer"
"tstanislawek/awesome-document-understanding" -> "BobLd/DocumentLayoutAnalysis"
"tstanislawek/awesome-document-understanding" -> "bikash/DocumentUnderstanding"
"tstanislawek/awesome-document-understanding" -> "mindee/doctr"
"tstanislawek/awesome-document-understanding" -> "PaddlePaddle/VIMER"
"tstanislawek/awesome-document-understanding" -> "applicaai/lambert"
"tstanislawek/awesome-document-understanding" -> "ibm-aur-nlp/PubLayNet"
"tstanislawek/awesome-document-understanding" -> "Layout-Parser/layout-parser"
"DanBloomberg/leptonica" -> "mzucker/page_dewarp"
"DanBloomberg/leptonica" -> "tmbdev/ocropy"
"DanBloomberg/leptonica" -> "tesseract-ocr/tessdata_best"
"DanBloomberg/leptonica" -> "agl/jbig2enc"
"DanBloomberg/leptonica" -> "tesseract-ocr/tessdata_fast"
"DanBloomberg/leptonica" -> "wanghaisheng/awesome-ocr"
"DanBloomberg/leptonica" -> "scantailor/scantailor"
"DanBloomberg/leptonica" -> "kba/awesome-ocr"
"DanBloomberg/leptonica" -> "sirfz/tesserocr"
"DanBloomberg/leptonica" -> "manisandro/gImageReader"
"DanBloomberg/leptonica" -> "tesseract-ocr/tessdata"
"DanBloomberg/leptonica" -> "uclouvain/openjpeg" ["e"=1]
"DanBloomberg/leptonica" -> "tesseract-ocr/tesseract" ["e"=1]
"DanBloomberg/leptonica" -> "tmbdev/clstm"
"DanBloomberg/leptonica" -> "charlesw/tesseract" ["e"=1]
"eragonruan/text-detection-ctpn" -> "YCG09/chinese_ocr"
"eragonruan/text-detection-ctpn" -> "xiaofengShi/CHINESE-OCR"
"eragonruan/text-detection-ctpn" -> "tianzhi0549/CTPN"
"eragonruan/text-detection-ctpn" -> "argman/EAST"
"eragonruan/text-detection-ctpn" -> "bear63/sceneReco"
"eragonruan/text-detection-ctpn" -> "bgshih/crnn"
"eragonruan/text-detection-ctpn" -> "chineseocr/chineseocr"
"eragonruan/text-detection-ctpn" -> "meijieru/crnn.pytorch"
"eragonruan/text-detection-ctpn" -> "huoyijie/AdvancedEAST"
"eragonruan/text-detection-ctpn" -> "ankush-me/SynthText"
"eragonruan/text-detection-ctpn" -> "Belval/TextRecognitionDataGenerator"
"eragonruan/text-detection-ctpn" -> "JarveeLee/SynthText_Chinese_version"
"eragonruan/text-detection-ctpn" -> "senlinuc/caffe_ocr"
"eragonruan/text-detection-ctpn" -> "Sierkinhane/crnn_chinese_characters_rec"
"eragonruan/text-detection-ctpn" -> "Sanster/text_renderer"
"chineseocr/table-detect" -> "chineseocr/table-ocr"
"chineseocr/table-detect" -> "tommyMessi/tableImageParser_tx"
"chineseocr/table-detect" -> "CharlesWu123/SPLERGE"
"chineseocr/table-detect" -> "ibm-aur-nlp/PubTabNet"
"chineseocr/table-detect" -> "Rid7/Table-OCR"
"chineseocr/table-detect" -> "hikopensource/DAVAR-Lab-OCR"
"chineseocr/table-detect" -> "tommyMessi/remove-stamp"
"chineseocr/table-detect" -> "tommyMessi/crnn_ctc-centerloss"
"chineseocr/table-detect" -> "tommyMessi/PST-table"
"chineseocr/table-detect" -> "hassan-mahmood/TIES_DataGeneration"
"chineseocr/table-detect" -> "shahrukhqasim/TIES-2.0"
"chineseocr/table-detect" -> "JiaquanYe/TableMASTER-mmocr"
"chineseocr/table-detect" -> "chibohe/text_recognition_toolbox"
"eihli/image-table-ocr" -> "cseas/ocr-table"
"eihli/image-table-ocr" -> "ExtractTable/ExtractTable-py"
"eihli/image-table-ocr" -> "jainammm/TableNet"
"eihli/image-table-ocr" -> "tomassosorio/OCR_tablenet"
"eihli/image-table-ocr" -> "sbrunner/deskew"
"eihli/image-table-ocr" -> "Psarpei/Multi-Type-TD-TSR"
"eihli/image-table-ocr" -> "Sargunan/Table-Detection-using-Deep-learning"
"eihli/image-table-ocr" -> "sachinraja13/TabStructNet"
"eihli/image-table-ocr" -> "mdv3101/CDeCNet"
"eihli/image-table-ocr" -> "Rid7/Table-OCR"
"eihli/image-table-ocr" -> "MrZilinXiao/Hyper-Table-OCR"
"eihli/image-table-ocr" -> "DevashishPrasad/CascadeTabNet"
"eihli/image-table-ocr" -> "qurator-spk/eynollah"
"tomassosorio/OCR_tablenet" -> "jainammm/TableNet"
"tomassosorio/OCR_tablenet" -> "asagar60/TableNet-pytorch"
"tomassosorio/OCR_tablenet" -> "mdv3101/CDeCNet"
"tomassosorio/OCR_tablenet" -> "cndplab-founder/ICDAR2019_cTDaR"
"wangwen-whu/WTW-Dataset" -> "WenmuZhou/TableGeneration"
"wangwen-whu/WTW-Dataset" -> "IBM/SynthTabNet"
"GoogleChromeLabs/picture-in-picture-chrome-extension" -> "ugetdm/uget-windows-installer"
"jevakallio/vscode-hacker-typer" -> "oscommunityafrica/oscommunityafrica.github.io"
"bitdata/ocrtable" -> "chineseocr/table-ocr"
"bitdata/ocrtable" -> "Rid7/Table-OCR"
"bitdata/ocrtable" -> "cseas/ocr-table"
"bitdata/ocrtable" -> "chineseocr/table-detect"
"BADBADBADBOY/pytorchOCR" -> "WenmuZhou/PytorchOCR"
"BADBADBADBOY/pytorchOCR" -> "WenmuZhou/OCR_DataSet"
"BADBADBADBOY/pytorchOCR" -> "WenmuZhou/DBNet.pytorch"
"BADBADBADBOY/pytorchOCR" -> "tommyMessi/crnn_ctc-centerloss"
"BADBADBADBOY/pytorchOCR" -> "BADBADBADBOY/DBnet-lite.pytorch"
"BADBADBADBOY/pytorchOCR" -> "frotms/PaddleOCR2Pytorch"
"BADBADBADBOY/pytorchOCR" -> "whai362/pan_pp.pytorch"
"BADBADBADBOY/pytorchOCR" -> "MhLiao/MaskTextSpotterV3"
"BADBADBADBOY/pytorchOCR" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"BADBADBADBOY/pytorchOCR" -> "MhLiao/DB"
"BADBADBADBOY/pytorchOCR" -> "Sanster/text_renderer"
"BADBADBADBOY/pytorchOCR" -> "WenmuZhou/PAN.pytorch"
"BADBADBADBOY/pytorchOCR" -> "Wang-Tianwei/Decoupled-attention-network"
"BADBADBADBOY/pytorchOCR" -> "yizt/crnn.pytorch"
"BADBADBADBOY/pytorchOCR" -> "Canjie-Luo/Text-Image-Augmentation"
"bear63/sceneReco" -> "tianzhi0549/CTPN"
"bear63/sceneReco" -> "bgshih/crnn"
"bear63/sceneReco" -> "eragonruan/text-detection-ctpn"
"bear63/sceneReco" -> "JarveeLee/SynthText_Chinese_version"
"bear63/sceneReco" -> "senlinuc/caffe_ocr"
"bear63/sceneReco" -> "meijieru/crnn.pytorch"
"bear63/sceneReco" -> "xiaomaxiao/keras_ocr"
"bear63/sceneReco" -> "Sierkinhane/crnn_chinese_characters_rec"
"bear63/sceneReco" -> "ankush-me/SynthText"
"bear63/sceneReco" -> "YCG09/chinese_ocr"
"bear63/sceneReco" -> "MaybeShewill-CV/CRNN_Tensorflow"
"bear63/sceneReco" -> "chineseocr/chinese-ocr"
"bear63/sceneReco" -> "huoyijie/AdvancedEAST"
"bear63/sceneReco" -> "JinpengLI/deep_ocr"
"bear63/sceneReco" -> "xiaofengShi/CHINESE-OCR"
"bgshih/crnn" -> "meijieru/crnn.pytorch"
"bgshih/crnn" -> "tianzhi0549/CTPN"
"bgshih/crnn" -> "bear63/sceneReco"
"bgshih/crnn" -> "eragonruan/text-detection-ctpn"
"bgshih/crnn" -> "ankush-me/SynthText"
"bgshih/crnn" -> "argman/EAST"
"bgshih/crnn" -> "MhLiao/TextBoxes_plusplus"
"bgshih/crnn" -> "MaybeShewill-CV/CRNN_Tensorflow"
"bgshih/crnn" -> "da03/Attention-OCR"
"bgshih/crnn" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"bgshih/crnn" -> "MhLiao/TextBoxes"
"bgshih/crnn" -> "JarveeLee/SynthText_Chinese_version"
"bgshih/crnn" -> "senlinuc/caffe_ocr"
"bgshih/crnn" -> "bgshih/aster"
"bgshih/crnn" -> "Sierkinhane/crnn_chinese_characters_rec"
"ouyanghuiyu/chineseocr_lite" -> "chineseocr/chineseocr"
"ouyanghuiyu/chineseocr_lite" -> "xiaofengShi/CHINESE-OCR"
"ouyanghuiyu/chineseocr_lite" -> "YCG09/chinese_ocr"
"ouyanghuiyu/chineseocr_lite" -> "MhLiao/DB"
"ouyanghuiyu/chineseocr_lite" -> "chineseocr/darknet-ocr"
"ouyanghuiyu/chineseocr_lite" -> "Sanster/text_renderer"
"ouyanghuiyu/chineseocr_lite" -> "eragonruan/text-detection-ctpn"
"ouyanghuiyu/chineseocr_lite" -> "Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB" ["e"=1]
"ouyanghuiyu/chineseocr_lite" -> "whai362/PSENet"
"ouyanghuiyu/chineseocr_lite" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"ouyanghuiyu/chineseocr_lite" -> "clovaai/deep-text-recognition-benchmark"
"ouyanghuiyu/chineseocr_lite" -> "PaddlePaddle/PaddleOCR" ["e"=1]
"ouyanghuiyu/chineseocr_lite" -> "breezedeus/cnocr"
"ouyanghuiyu/chineseocr_lite" -> "meijieru/crnn.pytorch"
"ouyanghuiyu/chineseocr_lite" -> "Belval/TextRecognitionDataGenerator"
"ushelp/EasyOCR" -> "nguyenq/tess4j"
"ushelp/EasyOCR" -> "yinchuandong/JavaVerify"
"ushelp/EasyOCR" -> "HighCWu/EasyOCR"
"ushelp/EasyOCR" -> "ctripcorp/C-OCR" ["e"=1]
"ushelp/EasyOCR" -> "tesseract4java/tesseract4java"
"ushelp/EasyOCR" -> "wangtaoT/AndroidOCR"
"ushelp/EasyOCR" -> "isee15/captcha-ocr"
"scantailor/scantailor" -> "4lex4/scantailor-advanced"
"scantailor/scantailor" -> "Flameeyes/unpaper"
"scantailor/scantailor" -> "Tulon/scantailor"
"scantailor/scantailor" -> "mzucker/page_dewarp"
"scantailor/scantailor" -> "manisandro/gImageReader"
"scantailor/scantailor" -> "yb85/scantailor-advanced-osx"
"scantailor/scantailor" -> "DanBloomberg/leptonica"
"scantailor/scantailor" -> "trufanov-nok/scantailor"
"scantailor/scantailor" -> "tmbdev/ocropy"
"scantailor/scantailor" -> "jbarlow83/OCRmyPDF" ["e"=1]
"scantailor/scantailor" -> "DIYBookScanner/spreads"
"scantailor/scantailor" -> "Tenrec-Builders/pi-scan"
"scantailor/scantailor" -> "trufanov-nok/scantailor-universal"
"scantailor/scantailor" -> "ad-si/awesome-scanning"
"scantailor/scantailor" -> "phulin/rebook"
"beacandler/EATEN" -> "HCIILAB/EPHOIE"
"beacandler/EATEN" -> "wenwenyu/PICK-pytorch"
"beacandler/EATEN" -> "clovaai/cord"
"beacandler/EATEN" -> "cndplab-founder/ICDAR2019_cTDaR"
"Pay20Y/SEED" -> "chenjun2hao/SRN.pytorch"
"Pay20Y/SEED" -> "Wang-Tianwei/Decoupled-attention-network"
"Pay20Y/SEED" -> "RubanSeven/Text-Image-Augmentation-python"
"Pay20Y/SEED" -> "AutoML-4Paradigm/AutoSTR"
"Pay20Y/SEED" -> "Canjie-Luo/Text-Image-Augmentation"
"Pay20Y/SEED" -> "opconty/Transformer_STR"
"Pay20Y/SEED" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Pay20Y/SEED" -> "JasonBoy1/TextZoom"
"Pay20Y/SEED" -> "clovaai/SATRN"
"Pay20Y/SEED" -> "Chuhanxx/FontAdaptor"
"Pay20Y/SEED" -> "Media-Smart/vedastr"
"Pay20Y/SEED" -> "wangyuxin87/ContourNet"
"Pay20Y/SEED" -> "ku21fan/STR-Fewer-Labels"
"Pay20Y/SEED" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Pay20Y/SEED" -> "ayumiymk/aster.pytorch"
"MichalBusta/E2E-MLT" -> "MichalBusta/DeepTextSpotter"
"MichalBusta/E2E-MLT" -> "Megvii-CSG/MegReader"
"MichalBusta/E2E-MLT" -> "fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes"
"MichalBusta/E2E-MLT" -> "Canjie-Luo/MORAN_v2"
"MichalBusta/E2E-MLT" -> "jiangxiluning/FOTS.PyTorch"
"MichalBusta/E2E-MLT" -> "summerlvsong/Aggregation-Cross-Entropy"
"MichalBusta/E2E-MLT" -> "cs-chan/Total-Text-Dataset"
"MichalBusta/E2E-MLT" -> "MalongTech/research-charnet"
"MichalBusta/E2E-MLT" -> "backtime92/CRAFT-Reimplementation"
"MichalBusta/E2E-MLT" -> "MhLiao/MaskTextSpotter"
"MichalBusta/E2E-MLT" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"MichalBusta/E2E-MLT" -> "princewang1994/TextSnake.pytorch"
"MichalBusta/E2E-MLT" -> "bgshih/aster"
"MichalBusta/E2E-MLT" -> "STVIR/PMTD"
"MichalBusta/E2E-MLT" -> "JarveeLee/SynthText_Chinese_version"
"ankush-me/SynthText" -> "JarveeLee/SynthText_Chinese_version"
"ankush-me/SynthText" -> "Belval/TextRecognitionDataGenerator"
"ankush-me/SynthText" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"ankush-me/SynthText" -> "Sanster/text_renderer"
"ankush-me/SynthText" -> "argman/EAST"
"ankush-me/SynthText" -> "bgshih/crnn"
"ankush-me/SynthText" -> "clovaai/deep-text-recognition-benchmark"
"ankush-me/SynthText" -> "MhLiao/DB"
"ankush-me/SynthText" -> "whai362/PSENet"
"ankush-me/SynthText" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"ankush-me/SynthText" -> "huoyijie/AdvancedEAST"
"ankush-me/SynthText" -> "tianzhi0549/CTPN"
"ankush-me/SynthText" -> "eragonruan/text-detection-ctpn"
"ankush-me/SynthText" -> "clovaai/CRAFT-pytorch"
"ankush-me/SynthText" -> "cs-chan/Total-Text-Dataset"
"chineseocr/chineseocr" -> "xiaofengShi/CHINESE-OCR"
"chineseocr/chineseocr" -> "YCG09/chinese_ocr"
"chineseocr/chineseocr" -> "eragonruan/text-detection-ctpn"
"chineseocr/chineseocr" -> "chineseocr/darknet-ocr"
"chineseocr/chineseocr" -> "ouyanghuiyu/chineseocr_lite"
"chineseocr/chineseocr" -> "meijieru/crnn.pytorch"
"chineseocr/chineseocr" -> "Sanster/text_renderer"
"chineseocr/chineseocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"chineseocr/chineseocr" -> "Belval/TextRecognitionDataGenerator"
"chineseocr/chineseocr" -> "MhLiao/DB"
"chineseocr/chineseocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"chineseocr/chineseocr" -> "huoyijie/AdvancedEAST"
"chineseocr/chineseocr" -> "whai362/PSENet"
"chineseocr/chineseocr" -> "senlinuc/caffe_ocr"
"chineseocr/chineseocr" -> "clovaai/deep-text-recognition-benchmark"
"airob0t/idcardgenerator" -> "Ice-Hazymoon/idcard_generator"
"airob0t/idcardgenerator" -> "WenmuZhou/OCR_DataSet"
"airob0t/idcardgenerator" -> "Sanster/text_renderer"
"airob0t/idcardgenerator" -> "TianzhongSong/awesome-SynthText"
"airob0t/idcardgenerator" -> "bzsome/idcard_generator" ["e"=1]
"airob0t/idcardgenerator" -> "mritd/idgen"
"airob0t/idcardgenerator" -> "whai362/PSENet"
"airob0t/idcardgenerator" -> "jayknoxqu/id-number-util" ["e"=1]
"airob0t/idcardgenerator" -> "ankush-me/SynthText"
"airob0t/idcardgenerator" -> "zhang0jhon/AttentionOCR"
"airob0t/idcardgenerator" -> "JarveeLee/SynthText_Chinese_version"
"airob0t/idcardgenerator" -> "wang-tf/Chinese_OCR_synthetic_data"
"airob0t/idcardgenerator" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"airob0t/idcardgenerator" -> "oh-my-ocr/text_renderer"
"airob0t/idcardgenerator" -> "WenmuZhou/PAN.pytorch"
"opconty/pytorch_ctpn" -> "BADBADBADBOY/pytorch.ctpn"
"opconty/pytorch_ctpn" -> "courao/ocr.pytorch"
"opconty/pytorch_ctpn" -> "jiangxiluning/FOTS.PyTorch"
"opconty/pytorch_ctpn" -> "hsddlz/faster-CTPN"
"opconty/pytorch_ctpn" -> "AstarLight/Lets_OCR"
"opconty/pytorch_ctpn" -> "chenjun2hao/Attention_ocr.pytorch"
"opconty/pytorch_ctpn" -> "WenmuZhou/PSENet.pytorch"
"opconty/pytorch_ctpn" -> "Sanster/text_renderer"
"opconty/pytorch_ctpn" -> "songdejia/EAST"
"opconty/pytorch_ctpn" -> "xiaomaxiao/keras_ocr"
"opconty/pytorch_ctpn" -> "ayumiymk/aster.pytorch"
"opconty/pytorch_ctpn" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"opconty/pytorch_ctpn" -> "Holmeyoung/crnn-pytorch"
"opconty/pytorch_ctpn" -> "meijieru/crnn.pytorch"
"opconty/pytorch_ctpn" -> "Sierkinhane/crnn_chinese_characters_rec"
"Layout-Parser/layout-parser" -> "DevashishPrasad/CascadeTabNet"
"Layout-Parser/layout-parser" -> "ibm-aur-nlp/PubLayNet"
"Layout-Parser/layout-parser" -> "mindee/doctr"
"Layout-Parser/layout-parser" -> "open-mmlab/mmocr"
"Layout-Parser/layout-parser" -> "tstanislawek/awesome-document-understanding"
"Layout-Parser/layout-parser" -> "microsoft/unilm" ["e"=1]
"Layout-Parser/layout-parser" -> "BobLd/DocumentLayoutAnalysis"
"Layout-Parser/layout-parser" -> "doc-analysis/DocBank"
"Layout-Parser/layout-parser" -> "clovaai/donut"
"Layout-Parser/layout-parser" -> "jsvine/pdfplumber" ["e"=1]
"Layout-Parser/layout-parser" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"Layout-Parser/layout-parser" -> "paulgp/applied-methods-phd" ["e"=1]
"Layout-Parser/layout-parser" -> "axa-group/Parsr" ["e"=1]
"Layout-Parser/layout-parser" -> "heartexlabs/label-studio" ["e"=1]
"Layout-Parser/layout-parser" -> "doc-analysis/TableBank"
"DayBreak-u/chineseocr_lite" -> "alisen39/TrWebOCR"
"DayBreak-u/chineseocr_lite" -> "chineseocr/chineseocr"
"DayBreak-u/chineseocr_lite" -> "PaddlePaddle/PaddleOCR" ["e"=1]
"DayBreak-u/chineseocr_lite" -> "RapidAI/RapidOCR"
"DayBreak-u/chineseocr_lite" -> "hiroi-sora/Umi-OCR" ["e"=1]
"DayBreak-u/chineseocr_lite" -> "WenmuZhou/PytorchOCR"
"DayBreak-u/chineseocr_lite" -> "xiaofengShi/CHINESE-OCR"
"DayBreak-u/chineseocr_lite" -> "myhub/tr"
"DayBreak-u/chineseocr_lite" -> "JaidedAI/EasyOCR" ["e"=1]
"DayBreak-u/chineseocr_lite" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"DayBreak-u/chineseocr_lite" -> "Tencent/TNN" ["e"=1]
"DayBreak-u/chineseocr_lite" -> "guanshuicheng/invoice"
"DayBreak-u/chineseocr_lite" -> "YCG09/chinese_ocr"
"DayBreak-u/chineseocr_lite" -> "DefTruth/lite.ai.toolkit" ["e"=1]
"DayBreak-u/chineseocr_lite" -> "breezedeus/cnocr"
"danvk/oldnyc" -> "danvk/localturk"
"danvk/oldnyc" -> "aperrau/DetectText"
"guanshuicheng/invoice" -> "chineseocr/chineseocr"
"guanshuicheng/invoice" -> "xuwenxue000/PJ_PREDICT_IMG"
"guanshuicheng/invoice" -> "chineseocr/table-ocr"
"guanshuicheng/invoice" -> "huanglu20124/invoice"
"guanshuicheng/invoice" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"guanshuicheng/invoice" -> "chineseocr/darknet-ocr"
"guanshuicheng/invoice" -> "xiaofengShi/CHINESE-OCR"
"guanshuicheng/invoice" -> "Sanster/text_renderer"
"guanshuicheng/invoice" -> "whai362/PSENet"
"guanshuicheng/invoice" -> "Rid7/Table-OCR"
"guanshuicheng/invoice" -> "tommyMessi/tableImageParser_tx"
"guanshuicheng/invoice" -> "DayBreak-u/chineseocr_lite"
"guanshuicheng/invoice" -> "chineseocr/table-detect"
"guanshuicheng/invoice" -> "WenmuZhou/PSENet.pytorch"
"guanshuicheng/invoice" -> "lvpengyuan/corner"
"MhLiao/TextBoxes_plusplus" -> "MhLiao/TextBoxes"
"MhLiao/TextBoxes_plusplus" -> "ZJULearning/pixel_link"
"MhLiao/TextBoxes_plusplus" -> "bgshih/aster"
"MhLiao/TextBoxes_plusplus" -> "whai362/PSENet"
"MhLiao/TextBoxes_plusplus" -> "bgshih/crnn"
"MhLiao/TextBoxes_plusplus" -> "tonghe90/textspotter"
"MhLiao/TextBoxes_plusplus" -> "argman/EAST"
"MhLiao/TextBoxes_plusplus" -> "JarveeLee/SynthText_Chinese_version"
"MhLiao/TextBoxes_plusplus" -> "ankush-me/SynthText"
"MhLiao/TextBoxes_plusplus" -> "jiangxiluning/FOTS.PyTorch"
"MhLiao/TextBoxes_plusplus" -> "huoyijie/AdvancedEAST"
"MhLiao/TextBoxes_plusplus" -> "Bartzi/see"
"MhLiao/TextBoxes_plusplus" -> "tianzhi0549/CTPN"
"MhLiao/TextBoxes_plusplus" -> "lvpengyuan/masktextspotter.caffe2"
"MhLiao/TextBoxes_plusplus" -> "whitelok/image-text-localization-recognition"
"prasunroy/stefann" -> "youdao-ai/SRNet"
"prasunroy/stefann" -> "Niwhskal/SRNet"
"prasunroy/stefann" -> "Chuhanxx/FontAdaptor"
"prasunroy/stefann" -> "HCIILAB/Scene-Text-Removal"
"prasunroy/stefann" -> "wangyuxin87/R-Net"
"prasunroy/stefann" -> "Jyouhou/UnrealText"
"prasunroy/stefann" -> "Wang-Tianwei/Decoupled-attention-network"
"prasunroy/stefann" -> "Pay20Y/SEED"
"prasunroy/stefann" -> "AutoML-4Paradigm/AutoSTR"
"prasunroy/stefann" -> "qqqyd/MOSTEL"
"UB-Mannheim/tesseract" -> "tesseract-ocr/tessdata"
"UB-Mannheim/tesseract" -> "tesseract-ocr/tessdoc"
"UB-Mannheim/tesseract" -> "tesseract-ocr/tesseract" ["e"=1]
"UB-Mannheim/tesseract" -> "tesseract-ocr/tessdata_best"
"UB-Mannheim/tesseract" -> "madmaze/pytesseract"
"UB-Mannheim/tesseract" -> "UB-Mannheim/zotero-ocr" ["e"=1]
"UB-Mannheim/tesseract" -> "sirfz/tesserocr"
"UB-Mannheim/tesseract" -> "manisandro/gImageReader"
"UB-Mannheim/tesseract" -> "charlesw/tesseract" ["e"=1]
"UB-Mannheim/tesseract" -> "oschwartz10612/poppler-windows" ["e"=1]
"UB-Mannheim/tesseract" -> "DanBloomberg/leptonica"
"UB-Mannheim/tesseract" -> "mhammond/pywin32" ["e"=1]
"UB-Mannheim/tesseract" -> "ianzhao05/textshot" ["e"=1]
"UB-Mannheim/tesseract" -> "JaidedAI/EasyOCR" ["e"=1]
"UB-Mannheim/tesseract" -> "PaddlePaddle/PaddleOCR" ["e"=1]
"shannanyinxiang/PageNet" -> "Yuliang-Liu/SPTSv2"
"shannanyinxiang/PageNet" -> "ZZZHANG-jx/Marior"
"Belval/TextRecognitionDataGenerator" -> "Sanster/text_renderer"
"Belval/TextRecognitionDataGenerator" -> "clovaai/deep-text-recognition-benchmark"
"Belval/TextRecognitionDataGenerator" -> "ankush-me/SynthText"
"Belval/TextRecognitionDataGenerator" -> "JarveeLee/SynthText_Chinese_version"
"Belval/TextRecognitionDataGenerator" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"Belval/TextRecognitionDataGenerator" -> "YCG09/chinese_ocr"
"Belval/TextRecognitionDataGenerator" -> "MhLiao/DB"
"Belval/TextRecognitionDataGenerator" -> "clovaai/CRAFT-pytorch"
"Belval/TextRecognitionDataGenerator" -> "eragonruan/text-detection-ctpn"
"Belval/TextRecognitionDataGenerator" -> "meijieru/crnn.pytorch"
"Belval/TextRecognitionDataGenerator" -> "xiaofengShi/CHINESE-OCR"
"Belval/TextRecognitionDataGenerator" -> "huoyijie/AdvancedEAST"
"Belval/TextRecognitionDataGenerator" -> "whai362/PSENet"
"Belval/TextRecognitionDataGenerator" -> "argman/EAST"
"Belval/TextRecognitionDataGenerator" -> "bgshih/crnn"
"JarveeLee/SynthText_Chinese_version" -> "ankush-me/SynthText"
"JarveeLee/SynthText_Chinese_version" -> "Sanster/text_renderer"
"JarveeLee/SynthText_Chinese_version" -> "senlinuc/caffe_ocr"
"JarveeLee/SynthText_Chinese_version" -> "whai362/PSENet"
"JarveeLee/SynthText_Chinese_version" -> "Belval/TextRecognitionDataGenerator"
"JarveeLee/SynthText_Chinese_version" -> "YCG09/chinese_ocr"
"JarveeLee/SynthText_Chinese_version" -> "wang-tf/Chinese_OCR_synthetic_data"
"JarveeLee/SynthText_Chinese_version" -> "bear63/sceneReco"
"JarveeLee/SynthText_Chinese_version" -> "bgshih/aster"
"JarveeLee/SynthText_Chinese_version" -> "huoyijie/AdvancedEAST"
"JarveeLee/SynthText_Chinese_version" -> "tianzhi0549/CTPN"
"JarveeLee/SynthText_Chinese_version" -> "Sierkinhane/crnn_chinese_characters_rec"
"JarveeLee/SynthText_Chinese_version" -> "ZJULearning/pixel_link"
"JarveeLee/SynthText_Chinese_version" -> "MhLiao/TextBoxes_plusplus"
"JarveeLee/SynthText_Chinese_version" -> "eragonruan/text-detection-ctpn"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "Li-Ming-Fan/OCR-CRNN-CTC"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "hsddlz/faster-CTPN"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "ilovin/lstm_ctc_ocr"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "wushilian/CRNN_Attention_OCR_Chinese"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "oyxhust/CNN-LSTM-CTC-text-recognition"
"Li-Ming-Fan/OCR-DETECTION-CTPN" -> "xiaomaxiao/keras_ocr"
"Sanster/text_renderer" -> "JarveeLee/SynthText_Chinese_version"
"Sanster/text_renderer" -> "oh-my-ocr/text_renderer"
"Sanster/text_renderer" -> "Belval/TextRecognitionDataGenerator"
"Sanster/text_renderer" -> "YCG09/chinese_ocr"
"Sanster/text_renderer" -> "ankush-me/SynthText"
"Sanster/text_renderer" -> "MhLiao/DB"
"Sanster/text_renderer" -> "whai362/PSENet"
"Sanster/text_renderer" -> "WenmuZhou/DBNet.pytorch"
"Sanster/text_renderer" -> "senlinuc/caffe_ocr"
"Sanster/text_renderer" -> "Sierkinhane/crnn_chinese_characters_rec"
"Sanster/text_renderer" -> "bgshih/aster"
"Sanster/text_renderer" -> "WenmuZhou/OCR_DataSet"
"Sanster/text_renderer" -> "ayumiymk/aster.pytorch"
"Sanster/text_renderer" -> "huoyijie/AdvancedEAST"
"Sanster/text_renderer" -> "xiaofengShi/CHINESE-OCR"
"YCG09/chinese_ocr" -> "xiaofengShi/CHINESE-OCR"
"YCG09/chinese_ocr" -> "eragonruan/text-detection-ctpn"
"YCG09/chinese_ocr" -> "chineseocr/chineseocr"
"YCG09/chinese_ocr" -> "Sanster/text_renderer"
"YCG09/chinese_ocr" -> "senlinuc/caffe_ocr"
"YCG09/chinese_ocr" -> "JarveeLee/SynthText_Chinese_version"
"YCG09/chinese_ocr" -> "xiaomaxiao/keras_ocr"
"YCG09/chinese_ocr" -> "Belval/TextRecognitionDataGenerator"
"YCG09/chinese_ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"YCG09/chinese_ocr" -> "huoyijie/AdvancedEAST"
"YCG09/chinese_ocr" -> "meijieru/crnn.pytorch"
"YCG09/chinese_ocr" -> "AstarLight/CPS-OCR-Engine"
"YCG09/chinese_ocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"YCG09/chinese_ocr" -> "argman/EAST"
"YCG09/chinese_ocr" -> "MhLiao/DB"
"jimmyleaf/ocr_tensorflow_cnn" -> "synckey/tensorflow_lstm_ctc_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "ilovin/lstm_ctc_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "watsonyanghx/CNN_LSTM_CTC_Tensorflow"
"jimmyleaf/ocr_tensorflow_cnn" -> "isee15/Card-Ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "senlinuc/caffe_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "bear63/sceneReco"
"jimmyleaf/ocr_tensorflow_cnn" -> "weinman/cnn_lstm_ctc_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "xiaomaxiao/keras_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "tongpi/basicOCR"
"jimmyleaf/ocr_tensorflow_cnn" -> "Raymondhhh90/idcardocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "YCG09/chinese_ocr"
"jimmyleaf/ocr_tensorflow_cnn" -> "yinchangchang/ocr_densenet"
"jimmyleaf/ocr_tensorflow_cnn" -> "JarveeLee/SynthText_Chinese_version"
"jimmyleaf/ocr_tensorflow_cnn" -> "bai-shang/OCR_TF_CRNN_CTC"
"jimmyleaf/ocr_tensorflow_cnn" -> "jiangxiluning/chinese-ocr"
"meijieru/crnn.pytorch" -> "bgshih/crnn"
"meijieru/crnn.pytorch" -> "eragonruan/text-detection-ctpn"
"meijieru/crnn.pytorch" -> "SeanNaren/warp-ctc"
"meijieru/crnn.pytorch" -> "MhLiao/DB"
"meijieru/crnn.pytorch" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"meijieru/crnn.pytorch" -> "xiaofengShi/CHINESE-OCR"
"meijieru/crnn.pytorch" -> "ankush-me/SynthText"
"meijieru/crnn.pytorch" -> "YCG09/chinese_ocr"
"meijieru/crnn.pytorch" -> "Sierkinhane/crnn_chinese_characters_rec"
"meijieru/crnn.pytorch" -> "whai362/PSENet"
"meijieru/crnn.pytorch" -> "clovaai/deep-text-recognition-benchmark"
"meijieru/crnn.pytorch" -> "tianzhi0549/CTPN"
"meijieru/crnn.pytorch" -> "Belval/TextRecognitionDataGenerator"
"meijieru/crnn.pytorch" -> "bear63/sceneReco"
"meijieru/crnn.pytorch" -> "argman/EAST"
"wanghaisheng/awesome-ocr" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"wanghaisheng/awesome-ocr" -> "JarveeLee/SynthText_Chinese_version"
"wanghaisheng/awesome-ocr" -> "tianzhi0549/CTPN"
"wanghaisheng/awesome-ocr" -> "da03/Attention-OCR"
"wanghaisheng/awesome-ocr" -> "whitelok/image-text-localization-recognition"
"wanghaisheng/awesome-ocr" -> "Sanster/text_renderer"
"wanghaisheng/awesome-ocr" -> "bgshih/crnn"
"wanghaisheng/awesome-ocr" -> "ankush-me/SynthText"
"wanghaisheng/awesome-ocr" -> "senlinuc/caffe_ocr"
"wanghaisheng/awesome-ocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"wanghaisheng/awesome-ocr" -> "eragonruan/text-detection-ctpn"
"wanghaisheng/awesome-ocr" -> "huoyijie/AdvancedEAST"
"wanghaisheng/awesome-ocr" -> "YCG09/chinese_ocr"
"wanghaisheng/awesome-ocr" -> "kba/awesome-ocr"
"wanghaisheng/awesome-ocr" -> "whai362/PSENet"
"xiaofengShi/CHINESE-OCR" -> "YCG09/chinese_ocr"
"xiaofengShi/CHINESE-OCR" -> "chineseocr/chineseocr"
"xiaofengShi/CHINESE-OCR" -> "eragonruan/text-detection-ctpn"
"xiaofengShi/CHINESE-OCR" -> "Sierkinhane/crnn_chinese_characters_rec"
"xiaofengShi/CHINESE-OCR" -> "meijieru/crnn.pytorch"
"xiaofengShi/CHINESE-OCR" -> "Sanster/text_renderer"
"xiaofengShi/CHINESE-OCR" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"xiaofengShi/CHINESE-OCR" -> "senlinuc/caffe_ocr"
"xiaofengShi/CHINESE-OCR" -> "Belval/TextRecognitionDataGenerator"
"xiaofengShi/CHINESE-OCR" -> "huoyijie/AdvancedEAST"
"xiaofengShi/CHINESE-OCR" -> "JarveeLee/SynthText_Chinese_version"
"xiaofengShi/CHINESE-OCR" -> "MhLiao/DB"
"xiaofengShi/CHINESE-OCR" -> "AstarLight/CPS-OCR-Engine"
"xiaofengShi/CHINESE-OCR" -> "AstarLight/Lets_OCR"
"xiaofengShi/CHINESE-OCR" -> "xiaomaxiao/keras_ocr"
"Roujack/mathAI" -> "LinXueyuanStdio/LaTeX_OCR_PRO" ["e"=1]
"Roujack/mathAI" -> "LinXueyuanStdio/LaTeX_OCR" ["e"=1]
"Roujack/mathAI" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"Roujack/mathAI" -> "whywhs/Pytorch-Handwritten-Mathematical-Expression-Recognition" ["e"=1]
"Roujack/mathAI" -> "xiaofengShi/CHINESE-OCR"
"Roujack/mathAI" -> "huoyijie/AdvancedEAST"
"Roujack/mathAI" -> "whai362/PSENet"
"Roujack/mathAI" -> "JarveeLee/SynthText_Chinese_version"
"Roujack/mathAI" -> "YCG09/chinese_ocr"
"Roujack/mathAI" -> "Sanster/text_renderer"
"Roujack/mathAI" -> "chineseocr/chineseocr"
"Roujack/mathAI" -> "harvardnlp/im2markup" ["e"=1]
"Roujack/mathAI" -> "ouyanghuiyu/chineseocr_lite"
"Roujack/mathAI" -> "guillaumegenthial/im2latex" ["e"=1]
"Roujack/mathAI" -> "taosir/cnn_handwritten_chinese_recognition"
"manisandro/gImageReader" -> "dynobo/normcap"
"manisandro/gImageReader" -> "4lex4/scantailor-advanced"
"manisandro/gImageReader" -> "A9T9/Free-Ocr-Windows-Desktop"
"manisandro/gImageReader" -> "tesseract4java/tesseract4java"
"manisandro/gImageReader" -> "scantailor/scantailor"
"manisandro/gImageReader" -> "DanBloomberg/leptonica"
"manisandro/gImageReader" -> "tmbdev/ocropy"
"manisandro/gImageReader" -> "danpla/dpscreenocr"
"manisandro/gImageReader" -> "jurplel/qView" ["e"=1]
"manisandro/gImageReader" -> "torakiki/pdfsam" ["e"=1]
"manisandro/gImageReader" -> "Calamari-OCR/calamari"
"manisandro/gImageReader" -> "tmbdev/clstm"
"manisandro/gImageReader" -> "ugetdm/uget-integrator"
"manisandro/gImageReader" -> "martinrotter/rssguard" ["e"=1]
"manisandro/gImageReader" -> "pdfarranger/pdfarranger" ["e"=1]
"Layout-Generation/layout-generation" -> "kampta/DeepLayout"
"Layout-Generation/layout-generation" -> "ktrk115/const_layout"
"Layout-Generation/layout-generation" -> "JiananLi2016/LayoutGAN-Tensorflow"
"Layout-Generation/layout-generation" -> "billzhonggz/LayoutGAN"
"kampta/DeepLayout" -> "Layout-Generation/layout-generation"
"kampta/DeepLayout" -> "ktrk115/const_layout"
"kampta/DeepLayout" -> "CyberAgentAILab/canvas-vae"
"MaybeShewill-CV/CRNN_Tensorflow" -> "Sierkinhane/crnn_chinese_characters_rec"
"MaybeShewill-CV/CRNN_Tensorflow" -> "bgshih/crnn"
"MaybeShewill-CV/CRNN_Tensorflow" -> "bgshih/aster"
"MaybeShewill-CV/CRNN_Tensorflow" -> "eragonruan/text-detection-ctpn"
"MaybeShewill-CV/CRNN_Tensorflow" -> "huoyijie/AdvancedEAST"
"MaybeShewill-CV/CRNN_Tensorflow" -> "Belval/CRNN"
"MaybeShewill-CV/CRNN_Tensorflow" -> "meijieru/crnn.pytorch"
"MaybeShewill-CV/CRNN_Tensorflow" -> "Sanster/text_renderer"
"MaybeShewill-CV/CRNN_Tensorflow" -> "JarveeLee/SynthText_Chinese_version"
"MaybeShewill-CV/CRNN_Tensorflow" -> "argman/EAST"
"MaybeShewill-CV/CRNN_Tensorflow" -> "YCG09/chinese_ocr"
"MaybeShewill-CV/CRNN_Tensorflow" -> "bear63/sceneReco"
"MaybeShewill-CV/CRNN_Tensorflow" -> "solivr/tf-crnn"
"MaybeShewill-CV/CRNN_Tensorflow" -> "whai362/PSENet"
"MaybeShewill-CV/CRNN_Tensorflow" -> "MhLiao/TextBoxes_plusplus"
"A-bone1/Attention-ocr-Chinese-Version" -> "wushilian/CRNN_Attention_OCR_Chinese"
"A-bone1/Attention-ocr-Chinese-Version" -> "A-bone1/FSNS-tfrecord-generate"
"A-bone1/Attention-ocr-Chinese-Version" -> "Sierkinhane/crnn_chinese_characters_rec"
"A-bone1/Attention-ocr-Chinese-Version" -> "da03/Attention-OCR"
"A-bone1/Attention-ocr-Chinese-Version" -> "bgshih/aster"
"A-bone1/Attention-ocr-Chinese-Version" -> "chenjun2hao/Attention_ocr.pytorch"
"A-bone1/Attention-ocr-Chinese-Version" -> "Canjie-Luo/MORAN_v2"
"A-bone1/Attention-ocr-Chinese-Version" -> "MaybeShewill-CV/CRNN_Tensorflow"
"A-bone1/Attention-ocr-Chinese-Version" -> "JarveeLee/SynthText_Chinese_version"
"A-bone1/Attention-ocr-Chinese-Version" -> "whai362/PSENet"
"A-bone1/Attention-ocr-Chinese-Version" -> "weinman/cnn_lstm_ctc_ocr"
"A-bone1/Attention-ocr-Chinese-Version" -> "senlinuc/caffe_ocr"
"A-bone1/Attention-ocr-Chinese-Version" -> "ilovin/lstm_ctc_ocr"
"A-bone1/Attention-ocr-Chinese-Version" -> "Yuliang-Liu/Curve-Text-Detector"
"A-bone1/Attention-ocr-Chinese-Version" -> "emedvedev/attention-ocr"
"MhLiao/TextBoxes" -> "MhLiao/TextBoxes_plusplus"
"MhLiao/TextBoxes" -> "tianzhi0549/CTPN"
"MhLiao/TextBoxes" -> "bgshih/crnn"
"MhLiao/TextBoxes" -> "ankush-me/SynthText"
"MhLiao/TextBoxes" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"MhLiao/TextBoxes" -> "JarveeLee/SynthText_Chinese_version"
"MhLiao/TextBoxes" -> "bgshih/seglink"
"MhLiao/TextBoxes" -> "MichalBusta/DeepTextSpotter"
"MhLiao/TextBoxes" -> "lluisgomez/TextProposals"
"MhLiao/TextBoxes" -> "dengdan/seglink"
"MhLiao/TextBoxes" -> "Bartzi/stn-ocr"
"MhLiao/TextBoxes" -> "BestSonny/SSTD"
"MhLiao/TextBoxes" -> "jugg1024/Text-Detection-with-FRCN"
"MhLiao/TextBoxes" -> "tonghe90/textspotter"
"MhLiao/TextBoxes" -> "argman/EAST"
"WenmuZhou/DBNet.pytorch" -> "MhLiao/DB"
"WenmuZhou/DBNet.pytorch" -> "WenmuZhou/PAN.pytorch"
"WenmuZhou/DBNet.pytorch" -> "WenmuZhou/OCR_DataSet"
"WenmuZhou/DBNet.pytorch" -> "whai362/PSENet"
"WenmuZhou/DBNet.pytorch" -> "Sanster/text_renderer"
"WenmuZhou/DBNet.pytorch" -> "WenmuZhou/PytorchOCR"
"WenmuZhou/DBNet.pytorch" -> "WenmuZhou/PSENet.pytorch"
"WenmuZhou/DBNet.pytorch" -> "whai362/pan_pp.pytorch"
"WenmuZhou/DBNet.pytorch" -> "BADBADBADBOY/pytorchOCR"
"WenmuZhou/DBNet.pytorch" -> "ayumiymk/aster.pytorch"
"WenmuZhou/DBNet.pytorch" -> "MhLiao/MaskTextSpotterV3"
"WenmuZhou/DBNet.pytorch" -> "backtime92/CRAFT-Reimplementation"
"WenmuZhou/DBNet.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"WenmuZhou/DBNet.pytorch" -> "HCIILAB/Scene-Text-Recognition"
"WenmuZhou/DBNet.pytorch" -> "hikopensource/DAVAR-Lab-OCR"
"Yuliang-Liu/bezier_curve_text_spotting" -> "Wang-Tianwei/Decoupled-attention-network"
"Yuliang-Liu/bezier_curve_text_spotting" -> "MhLiao/MaskTextSpotterV3"
"Yuliang-Liu/bezier_curve_text_spotting" -> "Yuliang-Liu/Box_Discretization_Network"
"Yuliang-Liu/bezier_curve_text_spotting" -> "MhLiao/MaskTextSpotter"
"Yuliang-Liu/bezier_curve_text_spotting" -> "chenjun2hao/SRN.pytorch"
"Yuliang-Liu/bezier_curve_text_spotting" -> "MalongTech/research-charnet"
"Yuliang-Liu/bezier_curve_text_spotting" -> "GXYM/DRRG"
"Yuliang-Liu/bezier_curve_text_spotting" -> "whai362/pan_pp.pytorch"
"Yuliang-Liu/bezier_curve_text_spotting" -> "WenmuZhou/PAN.pytorch"
"Yuliang-Liu/bezier_curve_text_spotting" -> "zhang0jhon/AttentionOCR"
"Yuliang-Liu/bezier_curve_text_spotting" -> "wangyuxin87/ContourNet"
"Yuliang-Liu/bezier_curve_text_spotting" -> "ayumiymk/aster.pytorch"
"Yuliang-Liu/bezier_curve_text_spotting" -> "Megvii-CSG/MegReader"
"Yuliang-Liu/bezier_curve_text_spotting" -> "HCIILAB/Scene-Text-Recognition"
"Yuliang-Liu/bezier_curve_text_spotting" -> "Canjie-Luo/Text-Image-Augmentation"
"argman/EAST" -> "huoyijie/AdvancedEAST"
"argman/EAST" -> "eragonruan/text-detection-ctpn"
"argman/EAST" -> "ankush-me/SynthText"
"argman/EAST" -> "bgshih/crnn"
"argman/EAST" -> "ZJULearning/pixel_link"
"argman/EAST" -> "MhLiao/TextBoxes_plusplus"
"argman/EAST" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"argman/EAST" -> "whai362/PSENet"
"argman/EAST" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"argman/EAST" -> "meijieru/crnn.pytorch"
"argman/EAST" -> "tianzhi0549/CTPN"
"argman/EAST" -> "clovaai/CRAFT-pytorch"
"argman/EAST" -> "MhLiao/DB"
"argman/EAST" -> "YCG09/chinese_ocr"
"argman/EAST" -> "dengdan/seglink"
"burness/tensorflow-101" -> "soloice/Chinese-Character-Recognition"
"burness/tensorflow-101" -> "JinpengLI/deep_ocr"
"burness/tensorflow-101" -> "chineseocr/chinese-ocr"
"burness/tensorflow-101" -> "tianzhi0549/CTPN"
"burness/tensorflow-101" -> "bear63/sceneReco"
"burness/tensorflow-101" -> "eragonruan/text-detection-ctpn"
"burness/tensorflow-101" -> "taosir/cnn_handwritten_chinese_recognition"
"burness/tensorflow-101" -> "tobegit3hub/deep_recommend_system" ["e"=1]
"burness/tensorflow-101" -> "igul222/improved_wgan_training" ["e"=1]
"burness/tensorflow-101" -> "AmemiyaYuko/HandwrittenChineseCharacterRecognition"
"burness/tensorflow-101" -> "buriburisuri/ac-gan" ["e"=1]
"burness/tensorflow-101" -> "ahangchen/GDLnotes" ["e"=1]
"burness/tensorflow-101" -> "shekkizh/WassersteinGAN.tensorflow" ["e"=1]
"burness/tensorflow-101" -> "rockingdingo/deepnlp" ["e"=1]
"burness/tensorflow-101" -> "koth/kcws" ["e"=1]
"chenjun2hao/SRN.pytorch" -> "Pay20Y/SEED"
"chenjun2hao/SRN.pytorch" -> "Wang-Tianwei/Decoupled-attention-network"
"chenjun2hao/SRN.pytorch" -> "FangShancheng/ABINet"
"chenjun2hao/SRN.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"chenjun2hao/SRN.pytorch" -> "Canjie-Luo/Text-Image-Augmentation"
"chenjun2hao/SRN.pytorch" -> "chenjun2hao/Bert_OCR.pytorch"
"chenjun2hao/SRN.pytorch" -> "Media-Smart/vedastr"
"chenjun2hao/SRN.pytorch" -> "RuijieJ/pren"
"chenjun2hao/SRN.pytorch" -> "clovaai/SATRN"
"chenjun2hao/SRN.pytorch" -> "opconty/Transformer_STR"
"chenjun2hao/SRN.pytorch" -> "RubanSeven/Text-Image-Augmentation-python"
"chenjun2hao/SRN.pytorch" -> "ku21fan/STR-Fewer-Labels"
"chenjun2hao/SRN.pytorch" -> "GXYM/DRRG"
"chenjun2hao/SRN.pytorch" -> "MhLiao/MaskTextSpotterV3"
"chenjun2hao/SRN.pytorch" -> "wangyuxin87/ContourNet"
"clovaai/CRAFT-pytorch" -> "clovaai/deep-text-recognition-benchmark"
"clovaai/CRAFT-pytorch" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"clovaai/CRAFT-pytorch" -> "MhLiao/DB"
"clovaai/CRAFT-pytorch" -> "backtime92/CRAFT-Reimplementation"
"clovaai/CRAFT-pytorch" -> "whai362/PSENet"
"clovaai/CRAFT-pytorch" -> "Belval/TextRecognitionDataGenerator"
"clovaai/CRAFT-pytorch" -> "ankush-me/SynthText"
"clovaai/CRAFT-pytorch" -> "jiangxiluning/FOTS.PyTorch"
"clovaai/CRAFT-pytorch" -> "argman/EAST"
"clovaai/CRAFT-pytorch" -> "meijieru/crnn.pytorch"
"clovaai/CRAFT-pytorch" -> "Sanster/text_renderer"
"clovaai/CRAFT-pytorch" -> "huoyijie/AdvancedEAST"
"clovaai/CRAFT-pytorch" -> "eragonruan/text-detection-ctpn"
"clovaai/CRAFT-pytorch" -> "WenmuZhou/DBNet.pytorch"
"clovaai/CRAFT-pytorch" -> "ayumiymk/aster.pytorch"
"clovaai/deep-text-recognition-benchmark" -> "clovaai/CRAFT-pytorch"
"clovaai/deep-text-recognition-benchmark" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"clovaai/deep-text-recognition-benchmark" -> "Belval/TextRecognitionDataGenerator"
"clovaai/deep-text-recognition-benchmark" -> "MhLiao/DB"
"clovaai/deep-text-recognition-benchmark" -> "ankush-me/SynthText"
"clovaai/deep-text-recognition-benchmark" -> "whai362/PSENet"
"clovaai/deep-text-recognition-benchmark" -> "Sanster/text_renderer"
"clovaai/deep-text-recognition-benchmark" -> "meijieru/crnn.pytorch"
"clovaai/deep-text-recognition-benchmark" -> "ayumiymk/aster.pytorch"
"clovaai/deep-text-recognition-benchmark" -> "HCIILAB/Scene-Text-Recognition"
"clovaai/deep-text-recognition-benchmark" -> "open-mmlab/mmocr"
"clovaai/deep-text-recognition-benchmark" -> "backtime92/CRAFT-Reimplementation"
"clovaai/deep-text-recognition-benchmark" -> "argman/EAST"
"clovaai/deep-text-recognition-benchmark" -> "Jyouhou/SceneTextPapers"
"clovaai/deep-text-recognition-benchmark" -> "WenmuZhou/DBNet.pytorch"
"da03/Attention-OCR" -> "emedvedev/attention-ocr"
"da03/Attention-OCR" -> "bgshih/crnn"
"da03/Attention-OCR" -> "bgshih/aster"
"da03/Attention-OCR" -> "pannous/tensorflow-ocr"
"da03/Attention-OCR" -> "Bartzi/stn-ocr"
"da03/Attention-OCR" -> "ankush-me/SynthText"
"da03/Attention-OCR" -> "wanghaisheng/awesome-ocr"
"da03/Attention-OCR" -> "A-bone1/Attention-ocr-Chinese-Version"
"da03/Attention-OCR" -> "Bartzi/see"
"da03/Attention-OCR" -> "tianzhi0549/CTPN"
"da03/Attention-OCR" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"da03/Attention-OCR" -> "weinman/cnn_lstm_ctc_ocr"
"da03/Attention-OCR" -> "argman/EAST"
"da03/Attention-OCR" -> "chenjun2hao/Attention_ocr.pytorch"
"da03/Attention-OCR" -> "dengdan/seglink"
"ilovin/lstm_ctc_ocr" -> "watsonyanghx/CNN_LSTM_CTC_Tensorflow"
"ilovin/lstm_ctc_ocr" -> "synckey/tensorflow_lstm_ctc_ocr"
"ilovin/lstm_ctc_ocr" -> "weinman/cnn_lstm_ctc_ocr"
"ilovin/lstm_ctc_ocr" -> "jimmyleaf/ocr_tensorflow_cnn"
"ilovin/lstm_ctc_ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"ilovin/lstm_ctc_ocr" -> "AimeeKing/crnn-tensorflow"
"ilovin/lstm_ctc_ocr" -> "JarveeLee/SynthText_Chinese_version"
"ilovin/lstm_ctc_ocr" -> "da03/Attention-OCR"
"ilovin/lstm_ctc_ocr" -> "Belval/CRNN"
"ilovin/lstm_ctc_ocr" -> "bear63/sceneReco"
"ilovin/lstm_ctc_ocr" -> "dengdan/seglink"
"ilovin/lstm_ctc_ocr" -> "pannous/tensorflow-ocr"
"ilovin/lstm_ctc_ocr" -> "xiaomaxiao/keras_ocr"
"ilovin/lstm_ctc_ocr" -> "tianzhi0549/CTPN"
"ilovin/lstm_ctc_ocr" -> "BestSonny/SSTD"
"senlinuc/caffe_ocr" -> "JarveeLee/SynthText_Chinese_version"
"senlinuc/caffe_ocr" -> "YCG09/chinese_ocr"
"senlinuc/caffe_ocr" -> "Sanster/text_renderer"
"senlinuc/caffe_ocr" -> "bear63/sceneReco"
"senlinuc/caffe_ocr" -> "xiaomaxiao/keras_ocr"
"senlinuc/caffe_ocr" -> "eragonruan/text-detection-ctpn"
"senlinuc/caffe_ocr" -> "tianzhi0549/CTPN"
"senlinuc/caffe_ocr" -> "bgshih/crnn"
"senlinuc/caffe_ocr" -> "xiaofengShi/CHINESE-OCR"
"senlinuc/caffe_ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"senlinuc/caffe_ocr" -> "huoyijie/AdvancedEAST"
"senlinuc/caffe_ocr" -> "ankush-me/SynthText"
"senlinuc/caffe_ocr" -> "meijieru/crnn.pytorch"
"senlinuc/caffe_ocr" -> "dlunion/CaffeLSTM-OCR" ["e"=1]
"senlinuc/caffe_ocr" -> "wanghaisheng/awesome-ocr"
"summerlvsong/Aggregation-Cross-Entropy" -> "Wang-Tianwei/Decoupled-attention-network"
"summerlvsong/Aggregation-Cross-Entropy" -> "Canjie-Luo/MORAN_v2"
"summerlvsong/Aggregation-Cross-Entropy" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"summerlvsong/Aggregation-Cross-Entropy" -> "Megvii-CSG/MegReader"
"summerlvsong/Aggregation-Cross-Entropy" -> "Yuliang-Liu/Box_Discretization_Network"
"summerlvsong/Aggregation-Cross-Entropy" -> "ayumiymk/aster.pytorch"
"summerlvsong/Aggregation-Cross-Entropy" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"summerlvsong/Aggregation-Cross-Entropy" -> "bgshih/aster"
"summerlvsong/Aggregation-Cross-Entropy" -> "Canjie-Luo/Text-Image-Augmentation"
"summerlvsong/Aggregation-Cross-Entropy" -> "RubanSeven/Text-Image-Augmentation-python"
"summerlvsong/Aggregation-Cross-Entropy" -> "MalongTech/research-charnet"
"summerlvsong/Aggregation-Cross-Entropy" -> "princewang1994/TextSnake.pytorch"
"summerlvsong/Aggregation-Cross-Entropy" -> "HCIILAB/Scene-Text-End2end"
"summerlvsong/Aggregation-Cross-Entropy" -> "liuhu-bigeye/enctc.crnn"
"summerlvsong/Aggregation-Cross-Entropy" -> "Jyouhou/SceneTextPapers"
"tianzhi0549/CTPN" -> "bear63/sceneReco"
"tianzhi0549/CTPN" -> "bgshih/crnn"
"tianzhi0549/CTPN" -> "eragonruan/text-detection-ctpn"
"tianzhi0549/CTPN" -> "ankush-me/SynthText"
"tianzhi0549/CTPN" -> "MhLiao/TextBoxes"
"tianzhi0549/CTPN" -> "JarveeLee/SynthText_Chinese_version"
"tianzhi0549/CTPN" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"tianzhi0549/CTPN" -> "meijieru/crnn.pytorch"
"tianzhi0549/CTPN" -> "senlinuc/caffe_ocr"
"tianzhi0549/CTPN" -> "MhLiao/TextBoxes_plusplus"
"tianzhi0549/CTPN" -> "argman/EAST"
"tianzhi0549/CTPN" -> "wanghaisheng/awesome-ocr"
"tianzhi0549/CTPN" -> "dengdan/seglink"
"tianzhi0549/CTPN" -> "da03/Attention-OCR"
"tianzhi0549/CTPN" -> "huoyijie/AdvancedEAST"
"Sierkinhane/crnn_chinese_characters_rec" -> "xiaofengShi/CHINESE-OCR"
"Sierkinhane/crnn_chinese_characters_rec" -> "MaybeShewill-CV/CRNN_Tensorflow"
"Sierkinhane/crnn_chinese_characters_rec" -> "Sanster/text_renderer"
"Sierkinhane/crnn_chinese_characters_rec" -> "AstarLight/Lets_OCR"
"Sierkinhane/crnn_chinese_characters_rec" -> "JarveeLee/SynthText_Chinese_version"
"Sierkinhane/crnn_chinese_characters_rec" -> "YCG09/chinese_ocr"
"Sierkinhane/crnn_chinese_characters_rec" -> "eragonruan/text-detection-ctpn"
"Sierkinhane/crnn_chinese_characters_rec" -> "meijieru/crnn.pytorch"
"Sierkinhane/crnn_chinese_characters_rec" -> "whai362/PSENet"
"Sierkinhane/crnn_chinese_characters_rec" -> "huoyijie/AdvancedEAST"
"Sierkinhane/crnn_chinese_characters_rec" -> "senlinuc/caffe_ocr"
"Sierkinhane/crnn_chinese_characters_rec" -> "xiaomaxiao/keras_ocr"
"Sierkinhane/crnn_chinese_characters_rec" -> "bgshih/crnn"
"Sierkinhane/crnn_chinese_characters_rec" -> "bear63/sceneReco"
"Sierkinhane/crnn_chinese_characters_rec" -> "A-bone1/Attention-ocr-Chinese-Version"
"Belval/CRNN" -> "MaybeShewill-CV/CRNN_Tensorflow"
"Belval/CRNN" -> "wushilian/CRNN_Attention_OCR_Chinese"
"Belval/CRNN" -> "ilovin/lstm_ctc_ocr"
"Belval/CRNN" -> "solivr/tf-crnn"
"Belval/CRNN" -> "bear63/sceneReco"
"Belval/CRNN" -> "bgshih/crnn"
"Belval/CRNN" -> "TJCVRS/CRNN_Tensorflow"
"Belval/CRNN" -> "kurapan/CRNN"
"Belval/CRNN" -> "ZJULearning/pixel_link"
"Belval/CRNN" -> "A-bone1/Attention-ocr-Chinese-Version"
"Belval/CRNN" -> "Li-Ming-Fan/OCR-DETECTION-CTPN"
"Belval/CRNN" -> "weinman/cnn_lstm_ctc_ocr"
"Belval/CRNN" -> "JarveeLee/SynthText_Chinese_version"
"Belval/CRNN" -> "YoungMiao/crnn"
"Belval/CRNN" -> "senlinuc/caffe_ocr"
"tesseract-ocr/tessdata" -> "rmtheis/tess-two"
"tesseract-ocr/tessdata" -> "tesseract-ocr/langdata"
"tesseract-ocr/tessdata" -> "tesseract-ocr/tessdata_best"
"tesseract-ocr/tessdata" -> "tesseract-ocr/tesseract" ["e"=1]
"tesseract-ocr/tessdata" -> "nguyenq/tess4j"
"tesseract-ocr/tessdata" -> "gali8/Tesseract-OCR-iOS" ["e"=1]
"tesseract-ocr/tessdata" -> "UB-Mannheim/tesseract"
"tesseract-ocr/tessdata" -> "madmaze/pytesseract"
"tesseract-ocr/tessdata" -> "charlesw/tesseract" ["e"=1]
"tesseract-ocr/tessdata" -> "chineseocr/chineseocr"
"tesseract-ocr/tessdata" -> "rmtheis/android-ocr"
"tesseract-ocr/tessdata" -> "tesseract-ocr/tessdoc"
"tesseract-ocr/tessdata" -> "tesseract-ocr/tessdata_fast"
"tesseract-ocr/tessdata" -> "sirfz/tesserocr"
"tesseract-ocr/tessdata" -> "eragonruan/text-detection-ctpn"
"ayumiymk/aster.pytorch" -> "bgshih/aster"
"ayumiymk/aster.pytorch" -> "Wang-Tianwei/Decoupled-attention-network"
"ayumiymk/aster.pytorch" -> "Canjie-Luo/MORAN_v2"
"ayumiymk/aster.pytorch" -> "HCIILAB/Scene-Text-Recognition"
"ayumiymk/aster.pytorch" -> "summerlvsong/Aggregation-Cross-Entropy"
"ayumiymk/aster.pytorch" -> "whai362/PSENet"
"ayumiymk/aster.pytorch" -> "lvpengyuan/corner"
"ayumiymk/aster.pytorch" -> "MhLiao/MaskTextSpotter"
"ayumiymk/aster.pytorch" -> "MhLiao/DB"
"ayumiymk/aster.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"ayumiymk/aster.pytorch" -> "jiangxiluning/FOTS.PyTorch"
"ayumiymk/aster.pytorch" -> "Jyouhou/SceneTextPapers"
"ayumiymk/aster.pytorch" -> "Sanster/text_renderer"
"ayumiymk/aster.pytorch" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"ayumiymk/aster.pytorch" -> "Megvii-CSG/MegReader"
"fh2019ustc/Awesome-Document-Image-Rectification" -> "fh2019ustc/DocScanner"
"fh2019ustc/Awesome-Document-Image-Rectification" -> "fh2019ustc/DocTr"
"fh2019ustc/Awesome-Document-Image-Rectification" -> "fh2019ustc/DocTr-Plus"
"fh2019ustc/Awesome-Document-Image-Rectification" -> "fh2019ustc/DocGeoNet"
"tesseract-ocr/langdata" -> "tesseract-ocr/docs"
"tesseract-ocr/langdata" -> "tesseract-ocr/tessdata"
"tesseract-ocr/langdata" -> "tesseract-ocr/tesseract-ocr.github.io"
"tesseract-ocr/langdata" -> "tesseract-ocr/tessdata_best"
"tesseract-ocr/langdata" -> "tesseract-ocr/langdata_lstm"
"tesseract-ocr/langdata" -> "tesseract-ocr/tessdata_fast"
"tesseract-ocr/langdata" -> "tesseract-ocr/tesstrain"
"tesseract-ocr/langdata" -> "tesseract-ocr/tessdoc"
"tesseract-ocr/langdata" -> "tmbdev/clstm"
"tesseract-ocr/langdata" -> "pannous/tensorflow-ocr"
"tesseract-ocr/langdata" -> "gali8/Tesseract-OCR-iOS" ["e"=1]
"tesseract-ocr/langdata" -> "tianzhi0549/CTPN"
"tesseract-ocr/langdata" -> "DanBloomberg/leptonica"
"tesseract-ocr/langdata" -> "bear63/sceneReco"
"tesseract-ocr/langdata" -> "pannous/caffe-ocr"
"jinxiwang/ocr_TDR" -> "jjcheer/ocrcn_tf2"
"jinxiwang/ocr_TDR" -> "taosir/cnn_handwritten_chinese_recognition"
"jinxiwang/ocr_TDR" -> "Mignet/chinese-write-handling-char-recognition"
"jinxiwang/ocr_TDR" -> "chenyr0021/Chinese_character_recognition"
"jinxiwang/ocr_TDR" -> "intel/handwritten-chinese-ocr-samples"
"jinxiwang/ocr_TDR" -> "chineseocr/trocr-chinese"
"jinxiwang/ocr_TDR" -> "peterWon/CASIA-HWDB-Recognition"
"jinxiwang/ocr_TDR" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"jjcheer/ocrcn_tf2" -> "jinxiwang/ocr_TDR"
"jjcheer/ocrcn_tf2" -> "taosir/cnn_handwritten_chinese_recognition"
"jjcheer/ocrcn_tf2" -> "Mignet/chinese-write-handling-char-recognition"
"jjcheer/ocrcn_tf2" -> "chenyr0021/Chinese_character_recognition"
"jjcheer/ocrcn_tf2" -> "xiaofengShi/CHINESE-OCR"
"jjcheer/ocrcn_tf2" -> "wangjinxile/ocr_TDR"
"jjcheer/ocrcn_tf2" -> "integeruser/CASIA-HWDB1.1-cnn"
"jjcheer/ocrcn_tf2" -> "peterWon/CASIA-HWDB-Recognition"
"jjcheer/ocrcn_tf2" -> "YCG09/chinese_ocr"
"jjcheer/ocrcn_tf2" -> "myhub/tr"
"jjcheer/ocrcn_tf2" -> "yinchangchang/ocr_densenet"
"jjcheer/ocrcn_tf2" -> "GlassyWing/text-detection-ocr"
"jjcheer/ocrcn_tf2" -> "xiaomaxiao/keras_ocr"
"jjcheer/ocrcn_tf2" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"jjcheer/ocrcn_tf2" -> "FLming/CRNN.tf2"
"JinpengLI/deep_ocr" -> "bear63/sceneReco"
"JinpengLI/deep_ocr" -> "YCG09/chinese_ocr"
"JinpengLI/deep_ocr" -> "eragonruan/text-detection-ctpn"
"JinpengLI/deep_ocr" -> "xiaofengShi/CHINESE-OCR"
"JinpengLI/deep_ocr" -> "chineseocr/chinese-ocr"
"JinpengLI/deep_ocr" -> "senlinuc/caffe_ocr"
"JinpengLI/deep_ocr" -> "tianzhi0549/CTPN"
"JinpengLI/deep_ocr" -> "da03/Attention-OCR"
"JinpengLI/deep_ocr" -> "wanghaisheng/awesome-ocr"
"JinpengLI/deep_ocr" -> "AstarLight/CPS-OCR-Engine"
"JinpengLI/deep_ocr" -> "JarveeLee/SynthText_Chinese_version"
"JinpengLI/deep_ocr" -> "chineseocr/chineseocr"
"JinpengLI/deep_ocr" -> "bgshih/crnn"
"JinpengLI/deep_ocr" -> "xiaomaxiao/keras_ocr"
"JinpengLI/deep_ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"isee15/Card-Ocr" -> "Raymondhhh90/idcardocr"
"isee15/Card-Ocr" -> "jimmyleaf/ocr_tensorflow_cnn"
"isee15/Card-Ocr" -> "sam-ke/idCardOcr"
"isee15/Card-Ocr" -> "wzb19960208/idCardRecognition" ["e"=1]
"isee15/Card-Ocr" -> "JinpengLI/deep_ocr"
"isee15/Card-Ocr" -> "still-wait/deepLearning_OCR"
"isee15/Card-Ocr" -> "XieZhiFa/IdCardOCR" ["e"=1]
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "meijieru/crnn.pytorch"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "WenmuZhou/PytorchOCR"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "Holmeyoung/crnn-pytorch"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "BADBADBADBOY/pytorchOCR"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "WenmuZhou/OCR_DataSet"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "WenmuZhou/DBNet.pytorch"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "bai-shang/crnn_seq2seq_ocr_pytorch"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "MhLiao/DB"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "Sanster/text_renderer"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "xiaofengShi/CHINESE-OCR"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "chenjun2hao/Attention_ocr.pytorch"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "bai-shang/crnn_ctc_ocr_tf"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "YCG09/chinese_ocr"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "MhLiao/MaskTextSpotterV3"
"Sierkinhane/CRNN_Chinese_Characters_Rec" -> "ayumiymk/aster.pytorch"
"danschultzer/receipt-scanner" -> "SmartReceipts/SmartReceiptsLibrary"
"danschultzer/receipt-scanner" -> "mre/receipt-parser"
"danschultzer/receipt-scanner" -> "billstark/receipt-scanner"
"danschultzer/receipt-scanner" -> "danschultzer/blazing-bookkeeper"
"danschultzer/receipt-scanner" -> "jasalt/kuittiskanneri" ["e"=1]
"tleyden/open-ocr" -> "tmbdev/ocropy"
"tleyden/open-ocr" -> "aperrau/DetectText"
"tleyden/open-ocr" -> "guitarmind/tesseract-web-service"
"tleyden/open-ocr" -> "tleyden/DetectText"
"tleyden/open-ocr" -> "otiai10/gosseract" ["e"=1]
"tleyden/open-ocr" -> "kba/awesome-ocr"
"tleyden/open-ocr" -> "tmbdev/hocr-tools"
"tleyden/open-ocr" -> "creatale/node-dv" ["e"=1]
"tleyden/open-ocr" -> "sirfz/tesserocr"
"tleyden/open-ocr" -> "otiai10/ocrserver" ["e"=1]
"tleyden/open-ocr" -> "tmbdev/clstm"
"tleyden/open-ocr" -> "emedvedev/attention-ocr"
"tleyden/open-ocr" -> "jlsutherland/doc2text"
"tleyden/open-ocr" -> "wanghaisheng/awesome-ocr"
"tleyden/open-ocr" -> "pannous/caffe-ocr"
"breezedeus/cnocr" -> "breezedeus/cnstd"
"breezedeus/cnocr" -> "xiaofengShi/CHINESE-OCR"
"breezedeus/cnocr" -> "chineseocr/chineseocr"
"breezedeus/cnocr" -> "ouyanghuiyu/chineseocr_lite"
"breezedeus/cnocr" -> "YCG09/chinese_ocr"
"breezedeus/cnocr" -> "chineseocr/darknet-ocr"
"breezedeus/cnocr" -> "diaomin/crnn-mxnet-chinese-text-recognition"
"breezedeus/cnocr" -> "myhub/tr"
"breezedeus/cnocr" -> "Sanster/text_renderer"
"breezedeus/cnocr" -> "eragonruan/text-detection-ctpn"
"breezedeus/cnocr" -> "chineseocr/table-ocr"
"breezedeus/cnocr" -> "MhLiao/DB"
"breezedeus/cnocr" -> "alisen39/TrWebOCR"
"breezedeus/cnocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"breezedeus/cnocr" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "ankush-me/SynthText"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "whitelok/image-text-localization-recognition"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "tianzhi0549/CTPN"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "argman/EAST"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "bgshih/crnn"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "wanghaisheng/awesome-ocr"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "MhLiao/TextBoxes"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "eragonruan/text-detection-ctpn"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "Jyouhou/SceneTextPapers"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "JarveeLee/SynthText_Chinese_version"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "MhLiao/TextBoxes_plusplus"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "cs-chan/Total-Text-Dataset"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "da03/Attention-OCR"
"chongyangtao/Awesome-Scene-Text-Recognition" -> "Bartzi/see"
"emedvedev/attention-ocr" -> "da03/Attention-OCR"
"emedvedev/attention-ocr" -> "weinman/cnn_lstm_ctc_ocr"
"emedvedev/attention-ocr" -> "pannous/tensorflow-ocr"
"emedvedev/attention-ocr" -> "Bartzi/see"
"emedvedev/attention-ocr" -> "Bartzi/stn-ocr"
"emedvedev/attention-ocr" -> "bgshih/aster"
"emedvedev/attention-ocr" -> "A-bone1/Attention-ocr-Chinese-Version"
"emedvedev/attention-ocr" -> "tianzhi0549/CTPN"
"emedvedev/attention-ocr" -> "MhLiao/TextBoxes_plusplus"
"emedvedev/attention-ocr" -> "MaybeShewill-CV/CRNN_Tensorflow"
"emedvedev/attention-ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"emedvedev/attention-ocr" -> "eragonruan/text-detection-ctpn"
"emedvedev/attention-ocr" -> "argman/EAST"
"emedvedev/attention-ocr" -> "bgshih/crnn"
"emedvedev/attention-ocr" -> "ankush-me/SynthText"
"huoyijie/AdvancedEAST" -> "argman/EAST"
"huoyijie/AdvancedEAST" -> "ZJULearning/pixel_link"
"huoyijie/AdvancedEAST" -> "whai362/PSENet"
"huoyijie/AdvancedEAST" -> "jiangxiluning/FOTS.PyTorch"
"huoyijie/AdvancedEAST" -> "songdejia/EAST"
"huoyijie/AdvancedEAST" -> "ankush-me/SynthText"
"huoyijie/AdvancedEAST" -> "eragonruan/text-detection-ctpn"
"huoyijie/AdvancedEAST" -> "MhLiao/DB"
"huoyijie/AdvancedEAST" -> "JarveeLee/SynthText_Chinese_version"
"huoyijie/AdvancedEAST" -> "Sanster/text_renderer"
"huoyijie/AdvancedEAST" -> "liuheng92/tensorflow_PSENet"
"huoyijie/AdvancedEAST" -> "YCG09/chinese_ocr"
"huoyijie/AdvancedEAST" -> "MhLiao/TextBoxes_plusplus"
"huoyijie/AdvancedEAST" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"huoyijie/AdvancedEAST" -> "bgshih/aster"
"TJCVRS/CRNN_Tensorflow" -> "AimeeKing/crnn-tensorflow"
"TJCVRS/CRNN_Tensorflow" -> "BestSonny/SSTD"
"madmaze/pytesseract" -> "sirfz/tesserocr"
"madmaze/pytesseract" -> "tesseract-ocr/tesseract" ["e"=1]
"madmaze/pytesseract" -> "tesseract-ocr/tessdata"
"madmaze/pytesseract" -> "JaidedAI/EasyOCR" ["e"=1]
"madmaze/pytesseract" -> "python-pillow/Pillow" ["e"=1]
"madmaze/pytesseract" -> "mstamy2/PyPDF2" ["e"=1]
"madmaze/pytesseract" -> "UB-Mannheim/tesseract"
"madmaze/pytesseract" -> "pdfminer/pdfminer.six" ["e"=1]
"madmaze/pytesseract" -> "seatgeek/fuzzywuzzy" ["e"=1]
"madmaze/pytesseract" -> "tmbdev/ocropy"
"madmaze/pytesseract" -> "Belval/pdf2image" ["e"=1]
"madmaze/pytesseract" -> "euske/pdfminer" ["e"=1]
"madmaze/pytesseract" -> "tesseract-ocr/tessdoc"
"madmaze/pytesseract" -> "asweigart/pyautogui" ["e"=1]
"madmaze/pytesseract" -> "theskumar/python-dotenv" ["e"=1]
"openpaperwork/pyocr" -> "sirfz/tesserocr"
"openpaperwork/pyocr" -> "JinpengLI/deep_ocr"
"openpaperwork/pyocr" -> "goncalopp/simple-ocr-opencv" ["e"=1]
"openpaperwork/pyocr" -> "openpaperwork/libpillowfight"
"sirfz/tesserocr" -> "madmaze/pytesseract"
"sirfz/tesserocr" -> "tmbdev/ocropy"
"sirfz/tesserocr" -> "openpaperwork/pyocr"
"sirfz/tesserocr" -> "simonflueckiger/tesserocr-windows_build"
"sirfz/tesserocr" -> "eragonruan/text-detection-ctpn"
"sirfz/tesserocr" -> "jlsutherland/doc2text"
"sirfz/tesserocr" -> "JinpengLI/deep_ocr"
"sirfz/tesserocr" -> "tesseract-ocr/tessdata_best"
"sirfz/tesserocr" -> "pannous/tensorflow-ocr"
"sirfz/tesserocr" -> "tesseract-ocr/tessdata"
"sirfz/tesserocr" -> "DanBloomberg/leptonica"
"sirfz/tesserocr" -> "Calamari-OCR/calamari"
"sirfz/tesserocr" -> "jflesch/pyocr"
"sirfz/tesserocr" -> "tleyden/open-ocr"
"sirfz/tesserocr" -> "goncalopp/simple-ocr-opencv" ["e"=1]
"yinchuandong/JavaVerify" -> "isee15/captcha-ocr"
"yinchuandong/JavaVerify" -> "hotstu/javaCaptcha"
"DeepSystems/supervisely-tutorials" -> "supervisely/supervisely"
"DeepSystems/supervisely-tutorials" -> "Bartzi/stn-ocr"
"DeepSystems/supervisely-tutorials" -> "hs105/Deep-Learning-for-OCR"
"DeepSystems/supervisely-tutorials" -> "matthewearl/deep-anpr" ["e"=1]
"DeepSystems/supervisely-tutorials" -> "emedvedev/attention-ocr"
"adaptech-cz/Tesseract4Android" -> "alexcohn/tess-two"
"adaptech-cz/Tesseract4Android" -> "SubhamTyagi/android-ocr"
"adaptech-cz/Tesseract4Android" -> "zsmartercn/Tess4Android"
"adaptech-cz/Tesseract4Android" -> "rmtheis/tess-two"
"adaptech-cz/Tesseract4Android" -> "simplezhli/Tesseract-OCR-Scanner"
"kba/awesome-ocr" -> "wanghaisheng/awesome-ocr"
"kba/awesome-ocr" -> "zacharywhitley/awesome-ocr"
"kba/awesome-ocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"kba/awesome-ocr" -> "tmbdev/ocropy"
"kba/awesome-ocr" -> "Calamari-OCR/calamari"
"kba/awesome-ocr" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"kba/awesome-ocr" -> "clovaai/CRAFT-pytorch"
"kba/awesome-ocr" -> "whitelok/image-text-localization-recognition"
"kba/awesome-ocr" -> "clovaai/deep-text-recognition-benchmark"
"kba/awesome-ocr" -> "Belval/TextRecognitionDataGenerator"
"kba/awesome-ocr" -> "eragonruan/text-detection-ctpn"
"kba/awesome-ocr" -> "ChanChiChoi/awesome-ocr"
"kba/awesome-ocr" -> "ankush-me/SynthText"
"kba/awesome-ocr" -> "da03/Attention-OCR"
"kba/awesome-ocr" -> "emedvedev/attention-ocr"
"mvoelk/ssd_detectors" -> "qjadud1994/CRNN-Keras"
"mvoelk/ssd_detectors" -> "qjadud1994/Text_Detector"
"mvoelk/ssd_detectors" -> "MhLiao/TextBoxes_plusplus"
"mvoelk/ssd_detectors" -> "Bartzi/see"
"myhub/tr" -> "alisen39/TrWebOCR"
"myhub/tr" -> "chineseocr/darknet-ocr"
"myhub/tr" -> "YCG09/chinese_ocr"
"myhub/tr" -> "chineseocr/chineseocr"
"myhub/tr" -> "chineseocr/table-ocr"
"myhub/tr" -> "WenmuZhou/PytorchOCR"
"myhub/tr" -> "WenmuZhou/OCR_DataSet"
"myhub/tr" -> "xiaofengShi/CHINESE-OCR"
"myhub/tr" -> "tiantian91091317/OCR-Corrector"
"myhub/tr" -> "breezedeus/cnocr"
"myhub/tr" -> "ouyanghuiyu/chineseocr_lite"
"myhub/tr" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"myhub/tr" -> "Sanster/text_renderer"
"myhub/tr" -> "AstarLight/Lets_OCR"
"myhub/tr" -> "senlinuc/caffe_ocr"
"renard314/textfairy" -> "rmtheis/android-ocr"
"renard314/textfairy" -> "GautamGupta/Simple-Android-OCR"
"renard314/textfairy" -> "rmtheis/tess-two"
"renard314/textfairy" -> "ctodobom/OpenNoteScanner" ["e"=1]
"renard314/textfairy" -> "SubhamTyagi/android-ocr"
"renard314/textfairy" -> "adaptech-cz/Tesseract4Android"
"renard314/textfairy" -> "allgood/OpenNoteScanner" ["e"=1]
"renard314/textfairy" -> "priyankvex/Easy-Ocr-Scanner-Android"
"renard314/textfairy" -> "byoutline/kickmaterial" ["e"=1]
"renard314/textfairy" -> "jhansireddy/AndroidScannerDemo" ["e"=1]
"renard314/textfairy" -> "artetxem/mitzuli"
"renard314/textfairy" -> "lawloretienne/DiscreteSlider" ["e"=1]
"renard314/textfairy" -> "Aniruddha-Tapas/Document-Scanner" ["e"=1]
"renard314/textfairy" -> "vmihalachi/turbo-editor" ["e"=1]
"rmtheis/tess-two" -> "rmtheis/android-ocr"
"rmtheis/tess-two" -> "tesseract-ocr/tessdata"
"rmtheis/tess-two" -> "tbruyelle/RxPermissions" ["e"=1]
"rmtheis/tess-two" -> "googlesamples/easypermissions" ["e"=1]
"rmtheis/tess-two" -> "alibaba/ARouter" ["e"=1]
"rmtheis/tess-two" -> "greenrobot/greenDAO" ["e"=1]
"rmtheis/tess-two" -> "chrisbanes/PhotoView" ["e"=1]
"rmtheis/tess-two" -> "Curzibn/Luban" ["e"=1]
"rmtheis/tess-two" -> "alibaba/vlayout" ["e"=1]
"rmtheis/tess-two" -> "Yalantis/uCrop" ["e"=1]
"rmtheis/tess-two" -> "wasabeef/glide-transformations" ["e"=1]
"rmtheis/tess-two" -> "crazycodeboy/TakePhoto" ["e"=1]
"rmtheis/tess-two" -> "trello/RxLifecycle" ["e"=1]
"rmtheis/tess-two" -> "zhihu/Matisse" ["e"=1]
"rmtheis/tess-two" -> "didi/VirtualAPK" ["e"=1]
"pannous/tensorflow-ocr" -> "da03/Attention-OCR"
"pannous/tensorflow-ocr" -> "emedvedev/attention-ocr"
"pannous/tensorflow-ocr" -> "ilovin/lstm_ctc_ocr"
"pannous/tensorflow-ocr" -> "pannous/caffe-ocr"
"pannous/tensorflow-ocr" -> "dengdan/seglink"
"pannous/tensorflow-ocr" -> "hs105/Deep-Learning-for-OCR"
"pannous/tensorflow-ocr" -> "weinman/cnn_lstm_ctc_ocr"
"pannous/tensorflow-ocr" -> "JinpengLI/deep_ocr"
"pannous/tensorflow-ocr" -> "tianzhi0549/CTPN"
"pannous/tensorflow-ocr" -> "Bartzi/stn-ocr"
"pannous/tensorflow-ocr" -> "deeperic/SpikeFlow"
"pannous/tensorflow-ocr" -> "tongpi/basicOCR"
"pannous/tensorflow-ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"pannous/tensorflow-ocr" -> "A-bone1/Attention-ocr-Chinese-Version"
"pannous/tensorflow-ocr" -> "bgshih/crnn"
"ugetdm/uget-integrator" -> "ugetdm/uget-windows-installer"
"ugetdm/uget-integrator" -> "ugetdm/uget-extension"
"ugetdm/uget-integrator" -> "slgobinath/uget-chrome-wrapper"
"ugetdm/uget-integrator" -> "ugetdm/uget"
"invoice-x/invoice2data" -> "naiveHobo/InvoiceNet"
"invoice-x/invoice2data" -> "robela/OCR-Invoice"
"invoice-x/invoice2data" -> "mre/receipt-parser"
"invoice-x/invoice2data" -> "DevashishPrasad/CascadeTabNet"
"invoice-x/invoice2data" -> "vsymbol/CUTIE"
"invoice-x/invoice2data" -> "zacharywhitley/awesome-ocr"
"invoice-x/invoice2data" -> "dhavalpotdar/Graph-Convolution-on-Structured-Documents"
"invoice-x/invoice2data" -> "atlanhq/camelot" ["e"=1]
"invoice-x/invoice2data" -> "camelot-dev/camelot" ["e"=1]
"invoice-x/invoice2data" -> "zzzDavid/ICDAR-2019-SROIE"
"invoice-x/invoice2data" -> "invoice-x/invoicex-gui"
"invoice-x/invoice2data" -> "kba/awesome-ocr"
"invoice-x/invoice2data" -> "jsvine/pdfplumber" ["e"=1]
"invoice-x/invoice2data" -> "mindee/doctr"
"invoice-x/invoice2data" -> "akretion/factur-x"
"Tessellate-Imaging/Monk_Object_Detection" -> "Tessellate-Imaging/monk_v1"
"Tessellate-Imaging/Monk_Object_Detection" -> "Tessellate-Imaging/Monk_Gui"
"Tessellate-Imaging/Monk_Object_Detection" -> "Tessellate-Imaging/Pytorch_Tutorial"
"Tessellate-Imaging/Monk_Object_Detection" -> "hhaji/Deep-Learning"
"Tessellate-Imaging/Monk_Object_Detection" -> "alankbi/detecto"
"Tessellate-Imaging/Monk_Object_Detection" -> "phamquiluan/PubLayNet"
"Tessellate-Imaging/Monk_Object_Detection" -> "ciber-lab/pictor-ppe"
"Tessellate-Imaging/monk_v1" -> "Tessellate-Imaging/Monk_Object_Detection"
"Tessellate-Imaging/monk_v1" -> "Tessellate-Imaging/Monk_Gui"
"Tessellate-Imaging/monk_v1" -> "Tessellate-Imaging/Pytorch_Tutorial"
"Tessellate-Imaging/monk_v1" -> "alankbi/detecto"
"whitelok/image-text-localization-recognition" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"whitelok/image-text-localization-recognition" -> "Jyouhou/SceneTextPapers"
"whitelok/image-text-localization-recognition" -> "HCIILAB/Scene-Text-Recognition"
"whitelok/image-text-localization-recognition" -> "cs-chan/Total-Text-Dataset"
"whitelok/image-text-localization-recognition" -> "bgshih/aster"
"whitelok/image-text-localization-recognition" -> "MhLiao/TextBoxes_plusplus"
"whitelok/image-text-localization-recognition" -> "ankush-me/SynthText"
"whitelok/image-text-localization-recognition" -> "Yuliang-Liu/Curve-Text-Detector"
"whitelok/image-text-localization-recognition" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"whitelok/image-text-localization-recognition" -> "huoyijie/AdvancedEAST"
"whitelok/image-text-localization-recognition" -> "wanghaisheng/awesome-ocr"
"whitelok/image-text-localization-recognition" -> "whai362/PSENet"
"whitelok/image-text-localization-recognition" -> "ZumingHuang/awesome-ocr-resources"
"whitelok/image-text-localization-recognition" -> "Canjie-Luo/MORAN_v2"
"whitelok/image-text-localization-recognition" -> "HCIILAB/Scene-Text-Detection"
"naiveHobo/InvoiceNet" -> "invoice-x/invoice2data"
"naiveHobo/InvoiceNet" -> "DevashishPrasad/CascadeTabNet"
"naiveHobo/InvoiceNet" -> "mindee/doctr"
"naiveHobo/InvoiceNet" -> "vsymbol/CUTIE"
"naiveHobo/InvoiceNet" -> "zzzDavid/ICDAR-2019-SROIE"
"naiveHobo/InvoiceNet" -> "wenwenyu/PICK-pytorch"
"naiveHobo/InvoiceNet" -> "bikash/DocumentUnderstanding"
"naiveHobo/InvoiceNet" -> "tstanislawek/awesome-document-understanding"
"naiveHobo/InvoiceNet" -> "Layout-Parser/layout-parser"
"naiveHobo/InvoiceNet" -> "camelot-dev/camelot" ["e"=1]
"naiveHobo/InvoiceNet" -> "axa-group/Parsr" ["e"=1]
"naiveHobo/InvoiceNet" -> "doc-analysis/TableBank"
"naiveHobo/InvoiceNet" -> "PAIR-code/lit" ["e"=1]
"naiveHobo/InvoiceNet" -> "zacharywhitley/awesome-ocr"
"naiveHobo/InvoiceNet" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"tmbdev/clstm" -> "tmbdev/ocropy"
"tmbdev/clstm" -> "junhyukoh/caffe-lstm" ["e"=1]
"tmbdev/clstm" -> "rakeshvar/rnn_ctc" ["e"=1]
"tmbdev/clstm" -> "tianzhi0549/CTPN"
"tmbdev/clstm" -> "da03/Attention-OCR"
"tmbdev/clstm" -> "pannous/caffe-ocr"
"tmbdev/clstm" -> "MichalBusta/FASText"
"tmbdev/clstm" -> "amaas/stanford-ctc" ["e"=1]
"tmbdev/clstm" -> "dophist/kaldi-lstm" ["e"=1]
"tmbdev/clstm" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"tmbdev/clstm" -> "wanghaisheng/awesome-ocr"
"tmbdev/clstm" -> "lluisgomez/TextProposals"
"tmbdev/clstm" -> "MhLiao/TextBoxes"
"tmbdev/clstm" -> "pannous/tensorflow-ocr"
"tmbdev/clstm" -> "bgshih/crnn"
"GautamGupta/Simple-Android-OCR" -> "rmtheis/android-ocr"
"GautamGupta/Simple-Android-OCR" -> "komamitsu/Android-OCRSample"
"GautamGupta/Simple-Android-OCR" -> "rmtheis/tess-two"
"GautamGupta/Simple-Android-OCR" -> "renard314/textfairy"
"GautamGupta/Simple-Android-OCR" -> "DynamsoftRD/android-tesseract-ocr"
"GautamGupta/Simple-Android-OCR" -> "priyankvex/Easy-Ocr-Scanner-Android"
"GautamGupta/Simple-Android-OCR" -> "testica/text-scanner"
"GautamGupta/Simple-Android-OCR" -> "yushulx/android-tesseract-ocr"
"rmtheis/android-ocr" -> "rmtheis/tess-two"
"rmtheis/android-ocr" -> "GautamGupta/Simple-Android-OCR"
"rmtheis/android-ocr" -> "renard314/textfairy"
"rmtheis/android-ocr" -> "card-io/card.io-Android-SDK" ["e"=1]
"rmtheis/android-ocr" -> "simplezhli/Tesseract-OCR-Scanner"
"rmtheis/android-ocr" -> "google/cameraview" ["e"=1]
"rmtheis/android-ocr" -> "jgilfelt/android-viewbadger" ["e"=1]
"rmtheis/android-ocr" -> "jdamcd/android-crop" ["e"=1]
"rmtheis/android-ocr" -> "gabrielemariotti/cardslib" ["e"=1]
"rmtheis/android-ocr" -> "pengjianbo/GalleryFinal" ["e"=1]
"rmtheis/android-ocr" -> "liaohuqiu/android-Ultra-Pull-To-Refresh" ["e"=1]
"rmtheis/android-ocr" -> "ksoichiro/Android-ObservableScrollView" ["e"=1]
"rmtheis/android-ocr" -> "greenrobot/greenDAO" ["e"=1]
"rmtheis/android-ocr" -> "JakeWharton/DiskLruCache" ["e"=1]
"rmtheis/android-ocr" -> "singwhatiwanna/dynamic-load-apk" ["e"=1]
"open-mmlab/mmocr" -> "MhLiao/DB"
"open-mmlab/mmocr" -> "clovaai/deep-text-recognition-benchmark"
"open-mmlab/mmocr" -> "hikopensource/DAVAR-Lab-OCR"
"open-mmlab/mmocr" -> "clovaai/CRAFT-pytorch"
"open-mmlab/mmocr" -> "Belval/TextRecognitionDataGenerator"
"open-mmlab/mmocr" -> "whai362/pan_pp.pytorch"
"open-mmlab/mmocr" -> "aim-uofa/AdelaiDet" ["e"=1]
"open-mmlab/mmocr" -> "WenmuZhou/DBNet.pytorch"
"open-mmlab/mmocr" -> "open-mmlab/mmdeploy" ["e"=1]
"open-mmlab/mmocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"open-mmlab/mmocr" -> "WenmuZhou/OCR_DataSet"
"open-mmlab/mmocr" -> "ankush-me/SynthText"
"open-mmlab/mmocr" -> "open-mmlab/mmclassification" ["e"=1]
"open-mmlab/mmocr" -> "open-mmlab/mmcv" ["e"=1]
"open-mmlab/mmocr" -> "whai362/PSENet"
"faustomorales/keras-ocr" -> "clovaai/CRAFT-pytorch"
"faustomorales/keras-ocr" -> "clovaai/deep-text-recognition-benchmark"
"faustomorales/keras-ocr" -> "RubanSeven/CRAFT_keras"
"faustomorales/keras-ocr" -> "backtime92/CRAFT-Reimplementation"
"faustomorales/keras-ocr" -> "Belval/TextRecognitionDataGenerator"
"faustomorales/keras-ocr" -> "MhLiao/DB"
"faustomorales/keras-ocr" -> "kurapan/CRNN"
"faustomorales/keras-ocr" -> "Sanster/text_renderer"
"faustomorales/keras-ocr" -> "zacharywhitley/awesome-ocr"
"faustomorales/keras-ocr" -> "tulasiram58827/ocr_tflite"
"faustomorales/keras-ocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"faustomorales/keras-ocr" -> "mindee/doctr"
"faustomorales/keras-ocr" -> "eragonruan/text-detection-ctpn"
"faustomorales/keras-ocr" -> "ankush-me/SynthText"
"faustomorales/keras-ocr" -> "zhang0jhon/AttentionOCR"
"pengcao/chinese_ocr" -> "GlassyWing/text-detection-ocr"
"pengcao/chinese_ocr" -> "xiaofengShi/CHINESE-OCR"
"MhLiao/MaskTextSpotterV3" -> "MhLiao/MaskTextSpotter"
"MhLiao/MaskTextSpotterV3" -> "Yuliang-Liu/bezier_curve_text_spotting"
"MhLiao/MaskTextSpotterV3" -> "MhLiao/DB"
"MhLiao/MaskTextSpotterV3" -> "whai362/pan_pp.pytorch"
"MhLiao/MaskTextSpotterV3" -> "HCIILAB/Scene-Text-Recognition"
"MhLiao/MaskTextSpotterV3" -> "Wang-Tianwei/Decoupled-attention-network"
"MhLiao/MaskTextSpotterV3" -> "ayumiymk/aster.pytorch"
"MhLiao/MaskTextSpotterV3" -> "chenjun2hao/SRN.pytorch"
"MhLiao/MaskTextSpotterV3" -> "whai362/PSENet"
"MhLiao/MaskTextSpotterV3" -> "WenmuZhou/DBNet.pytorch"
"MhLiao/MaskTextSpotterV3" -> "Megvii-CSG/MegReader"
"MhLiao/MaskTextSpotterV3" -> "wenwenyu/MASTER-pytorch"
"MhLiao/MaskTextSpotterV3" -> "Canjie-Luo/Text-Image-Augmentation"
"MhLiao/MaskTextSpotterV3" -> "zhang0jhon/AttentionOCR"
"MhLiao/MaskTextSpotterV3" -> "WenmuZhou/OCR_DataSet"
"cvlab-stonybrook/DewarpNet" -> "cvlab-stonybrook/doc3D-dataset"
"cvlab-stonybrook/DewarpNet" -> "xiaoyu258/DocProj"
"cvlab-stonybrook/DewarpNet" -> "sagniklp/doc3D-renderer"
"cvlab-stonybrook/DewarpNet" -> "DVLP-CMATERJU/RectiNet"
"cvlab-stonybrook/DewarpNet" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"cvlab-stonybrook/DewarpNet" -> "fh2019ustc/DocTr"
"cvlab-stonybrook/DewarpNet" -> "xellows1305/Document-Image-Dewarping"
"cvlab-stonybrook/DewarpNet" -> "phulin/rebook"
"cvlab-stonybrook/DewarpNet" -> "teresasun/docUnet.pytorch"
"cvlab-stonybrook/DewarpNet" -> "mhashas/Document-Image-Unwarping-pytorch"
"cvlab-stonybrook/DewarpNet" -> "cvlab-stonybrook/PaperEdge"
"cvlab-stonybrook/DewarpNet" -> "ibm-aur-nlp/PubLayNet"
"cvlab-stonybrook/DewarpNet" -> "wuleiaty/DocUNet"
"cvlab-stonybrook/DewarpNet" -> "fh2019ustc/Awesome-Document-Image-Rectification"
"cvlab-stonybrook/DewarpNet" -> "shahrukhqasim/TIES-2.0"
"localhost02/SealUtil" -> "tommyMessi/crnn_ctc-centerloss"
"localhost02/SealUtil" -> "tommyMessi/tableImageParser_tx"
"localhost02/SealUtil" -> "wenwenyu/PICK-pytorch"
"localhost02/SealUtil" -> "niezhiliang/signature-utils"
"localhost02/SealUtil" -> "tommyMessi/PST-table"
"localhost02/SealUtil" -> "tommyMessi/remove-stamp"
"localhost02/SealUtil" -> "chibohe/text_recognition_toolbox"
"localhost02/SealUtil" -> "JiaquanYe/TableMASTER-mmocr"
"localhost02/SealUtil" -> "oh-my-ocr/text_renderer"
"localhost02/SealUtil" -> "chineseocr/table-ocr"
"localhost02/SealUtil" -> "hikopensource/DAVAR-Lab-OCR"
"localhost02/SealUtil" -> "TianzhongSong/awesome-SynthText"
"localhost02/SealUtil" -> "shahrukhqasim/TIES-2.0"
"localhost02/SealUtil" -> "summerlvsong/Aggregation-Cross-Entropy"
"localhost02/SealUtil" -> "chineseocr/table-detect"
"impira/docquery" -> "mindee/doctr"
"impira/docquery" -> "tstanislawek/awesome-document-understanding"
"impira/docquery" -> "clovaai/donut"
"impira/docquery" -> "basetenlabs/truss" ["e"=1]
"impira/docquery" -> "code-kern-ai/refinery" ["e"=1]
"impira/docquery" -> "recognai/rubrix" ["e"=1]
"impira/docquery" -> "huggingface/setfit" ["e"=1]
"impira/docquery" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"impira/docquery" -> "axa-group/Parsr" ["e"=1]
"impira/docquery" -> "DerwenAI/kglab" ["e"=1]
"impira/docquery" -> "deepdoctection/deepdoctection"
"impira/docquery" -> "primeqa/primeqa" ["e"=1]
"impira/docquery" -> "webis-de/small-text" ["e"=1]
"impira/docquery" -> "neuml/txtai" ["e"=1]
"impira/docquery" -> "jpWang/LiLT"
"clovaai/donut" -> "tstanislawek/awesome-document-understanding"
"clovaai/donut" -> "baudm/parseq"
"clovaai/donut" -> "open-mmlab/mmocr"
"clovaai/donut" -> "mindee/doctr"
"clovaai/donut" -> "wenwenyu/PICK-pytorch"
"clovaai/donut" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"clovaai/donut" -> "clovaai/cord"
"clovaai/donut" -> "clovaai/synthtiger"
"clovaai/donut" -> "hikopensource/DAVAR-Lab-OCR"
"clovaai/donut" -> "shabie/docformer"
"clovaai/donut" -> "jpWang/LiLT"
"clovaai/donut" -> "microsoft/table-transformer"
"clovaai/donut" -> "microsoft/unilm" ["e"=1]
"clovaai/donut" -> "Layout-Parser/layout-parser"
"clovaai/donut" -> "clovaai/deep-text-recognition-benchmark"
"alisen39/TrWebOCR" -> "myhub/tr"
"alisen39/TrWebOCR" -> "DayBreak-u/chineseocr_lite"
"alisen39/TrWebOCR" -> "ouyanghuiyu/chineseocr_lite"
"alisen39/TrWebOCR" -> "chineseocr/chineseocr"
"alisen39/TrWebOCR" -> "breezedeus/cnocr"
"alisen39/TrWebOCR" -> "RapidAI/RapidOCR"
"alisen39/TrWebOCR" -> "xiaofengShi/CHINESE-OCR"
"alisen39/TrWebOCR" -> "chineseocr/darknet-ocr"
"alisen39/TrWebOCR" -> "hiroi-sora/Umi-OCR" ["e"=1]
"alisen39/TrWebOCR" -> "WenmuZhou/PytorchOCR"
"alisen39/TrWebOCR" -> "YCG09/chinese_ocr"
"alisen39/TrWebOCR" -> "guanshuicheng/invoice"
"alisen39/TrWebOCR" -> "chineseocr/table-ocr"
"alisen39/TrWebOCR" -> "Sanster/text_renderer"
"alisen39/TrWebOCR" -> "sml2h3/ddddocr" ["e"=1]
"qjadud1994/CRNN-Keras" -> "qjadud1994/Korean-license-plate-Generator"
"qjadud1994/CRNN-Keras" -> "MaybeShewill-CV/CRNN_Tensorflow"
"qjadud1994/CRNN-Keras" -> "mvoelk/ssd_detectors"
"qjadud1994/CRNN-Keras" -> "sbillburg/CRNN-with-STN"
"qjadud1994/CRNN-Keras" -> "xiaomaxiao/keras_ocr"
"qjadud1994/CRNN-Keras" -> "bgshih/crnn"
"qjadud1994/CRNN-Keras" -> "qjadud1994/Text_Detector"
"qjadud1994/CRNN-Keras" -> "meijieru/crnn.pytorch"
"qjadud1994/CRNN-Keras" -> "kurapan/CRNN"
"qjadud1994/CRNN-Keras" -> "Belval/CRNN"
"qjadud1994/CRNN-Keras" -> "Tony607/keras-image-ocr"
"qjadud1994/CRNN-Keras" -> "gasparian/CRNN_OCR_lite"
"qjadud1994/CRNN-Keras" -> "solivr/tf-crnn"
"qjadud1994/CRNN-Keras" -> "weinman/cnn_lstm_ctc_ocr"
"qjadud1994/CRNN-Keras" -> "wushilian/CRNN_Attention_OCR_Chinese"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/tessdata_best"
"tesseract-ocr/tessdoc" -> "UB-Mannheim/tesseract"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/tesstrain"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/tessdata"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/langdata"
"tesseract-ocr/tessdoc" -> "madmaze/pytesseract"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/tessdata_fast"
"tesseract-ocr/tessdoc" -> "sirfz/tesserocr"
"tesseract-ocr/tessdoc" -> "DanBloomberg/leptonica"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/docs"
"tesseract-ocr/tessdoc" -> "tesseract-ocr/tesseract" ["e"=1]
"tesseract-ocr/tessdoc" -> "kba/awesome-ocr"
"tesseract-ocr/tessdoc" -> "mittagessen/kraken"
"tesseract-ocr/tessdoc" -> "leha-bot/PRLib"
"tesseract-ocr/tessdoc" -> "otiai10/gosseract" ["e"=1]
"A9T9/Free-Ocr-Windows-Desktop" -> "A9T9/Free-OCR-Software"
"clovaai/synthtiger" -> "clovaai/CLEval"
"clovaai/synthtiger" -> "ku21fan/STR-Fewer-Labels"
"clovaai/synthtiger" -> "FangShancheng/ABINet"
"clovaai/synthtiger" -> "RuijieJ/pren"
"clovaai/synthtiger" -> "hikopensource/DAVAR-Lab-OCR"
"clovaai/synthtiger" -> "baudm/parseq"
"clovaai/synthtiger" -> "SHI-Labs/Rethinking-Text-Segmentation"
"clovaai/synthtiger" -> "xdxie/WordArt"
"clovaai/synthtiger" -> "clovaai/webvicob"
"clovaai/synthtiger" -> "oh-my-ocr/text_renderer"
"clovaai/synthtiger" -> "youdao-ai/SRNet-Datagen"
"clovaai/synthtiger" -> "Jyouhou/UnrealText"
"clovaai/synthtiger" -> "ymy-k/DPText-DETR"
"clovaai/synthtiger" -> "clovaai/lffont" ["e"=1]
"clovaai/synthtiger" -> "roatienza/deep-text-recognition-benchmark"
"4lex4/scantailor-advanced" -> "scantailor/scantailor"
"4lex4/scantailor-advanced" -> "yb85/scantailor-advanced-osx"
"4lex4/scantailor-advanced" -> "trufanov-nok/scantailor-universal"
"4lex4/scantailor-advanced" -> "vigri/scantailor-advanced"
"4lex4/scantailor-advanced" -> "trufanov-nok/scantailor"
"4lex4/scantailor-advanced" -> "Tulon/scantailor"
"4lex4/scantailor-advanced" -> "manisandro/gImageReader"
"4lex4/scantailor-advanced" -> "4lex4/scantailor-libs-build"
"4lex4/scantailor-advanced" -> "mzucker/page_dewarp"
"4lex4/scantailor-advanced" -> "ad-si/awesome-scanning"
"4lex4/scantailor-advanced" -> "jbarlow83/OCRmyPDF" ["e"=1]
"4lex4/scantailor-advanced" -> "unpaper/unpaper"
"4lex4/scantailor-advanced" -> "phulin/rebook"
"4lex4/scantailor-advanced" -> "Tenrec-Builders/pi-scan"
"4lex4/scantailor-advanced" -> "ilius/pyglossary" ["e"=1]
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "huizhang0110/AON"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "Yuliang-Liu/Box_Discretization_Network"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "STVIR/PMTD"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "princewang1994/TextSnake.pytorch"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "fnzhan/ESIR"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "lvpengyuan/masktextspotter.caffe2"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "guruL/Character-Region-Awareness-for-Text-Detection-"
"AirBernard/Scene-Text-Detection-with-SPCNET" -> "WenmuZhou/PAN.pytorch"
"MhLiao/MaskTextSpotter" -> "MhLiao/MaskTextSpotterV3"
"MhLiao/MaskTextSpotter" -> "Yuliang-Liu/bezier_curve_text_spotting"
"MhLiao/MaskTextSpotter" -> "Wang-Tianwei/Decoupled-attention-network"
"MhLiao/MaskTextSpotter" -> "MalongTech/research-charnet"
"MhLiao/MaskTextSpotter" -> "ayumiymk/aster.pytorch"
"MhLiao/MaskTextSpotter" -> "jiangxiluning/FOTS.PyTorch"
"MhLiao/MaskTextSpotter" -> "lvpengyuan/corner"
"MhLiao/MaskTextSpotter" -> "lvpengyuan/masktextspotter.caffe2"
"MhLiao/MaskTextSpotter" -> "HCIILAB/Scene-Text-Recognition"
"MhLiao/MaskTextSpotter" -> "summerlvsong/Aggregation-Cross-Entropy"
"MhLiao/MaskTextSpotter" -> "Yuliang-Liu/Box_Discretization_Network"
"MhLiao/MaskTextSpotter" -> "Megvii-CSG/MegReader"
"MhLiao/MaskTextSpotter" -> "zhang0jhon/AttentionOCR"
"MhLiao/MaskTextSpotter" -> "Jyouhou/SceneTextPapers"
"MhLiao/MaskTextSpotter" -> "princewang1994/TextSnake.pytorch"
"Calamari-OCR/calamari" -> "mittagessen/kraken"
"Calamari-OCR/calamari" -> "OCR4all/OCR4all"
"Calamari-OCR/calamari" -> "Calamari-OCR/calamari_models"
"Calamari-OCR/calamari" -> "kba/awesome-ocr"
"Calamari-OCR/calamari" -> "dhlab-epfl/dhSegment"
"Calamari-OCR/calamari" -> "tmbdev/ocropy"
"Calamari-OCR/calamari" -> "NVlabs/ocropus3"
"Calamari-OCR/calamari" -> "ocropus/ocropy"
"Calamari-OCR/calamari" -> "emedvedev/attention-ocr"
"Calamari-OCR/calamari" -> "da03/Attention-OCR"
"Calamari-OCR/calamari" -> "MhLiao/TextBoxes_plusplus"
"Calamari-OCR/calamari" -> "lquirosd/P2PaLA"
"Calamari-OCR/calamari" -> "eragonruan/text-detection-ctpn"
"Calamari-OCR/calamari" -> "OCR4all/LAREX"
"Calamari-OCR/calamari" -> "UB-Mannheim/ocr-fileformat"
"dynobo/normcap" -> "manisandro/gImageReader"
"dynobo/normcap" -> "RajSolai/TextSnatcher" ["e"=1]
"dynobo/normcap" -> "danpla/dpscreenocr"
"dynobo/normcap" -> "crow-translate/crow-translate" ["e"=1]
"informatici/openhospital" -> "informatici/openhospital-core"
"informatici/openhospital" -> "informatici/openhospital-api"
"informatici/openhospital" -> "informatici/openhospital-gui"
"informatici/openhospital" -> "informatici/openhospital-ui"
"informatici/openhospital" -> "junaid33/opensource.builders"
"junaid33/opensource.builders" -> "informatici/openhospital"
"junaid33/opensource.builders" -> "mayeaux/nodetube" ["e"=1]
"junaid33/opensource.builders" -> "staticdeploy/staticdeploy" ["e"=1]
"junaid33/opensource.builders" -> "Tessellate-Imaging/monk_v1"
"junaid33/opensource.builders" -> "FBDevCLagos/The-Internship-v1"
"junaid33/opensource.builders" -> "chaskiq/chaskiq" ["e"=1]
"junaid33/opensource.builders" -> "JackZhu426/ElysiumMall" ["e"=1]
"ciber-lab/pictor-ppe" -> "ZijianWang1995/PPE_detection"
"ciber-lab/pictor-ppe" -> "AnshulSood11/PPE-Detection-YOLO-Deep_SORT" ["e"=1]
"doc-analysis/TableBank" -> "doc-analysis/DocBank"
"doc-analysis/TableBank" -> "shahrukhqasim/TIES-2.0"
"doc-analysis/TableBank" -> "ibm-aur-nlp/PubTabNet"
"doc-analysis/TableBank" -> "Academic-Hammer/SciTSR"
"doc-analysis/TableBank" -> "chineseocr/table-ocr"
"doc-analysis/TableBank" -> "DevashishPrasad/CascadeTabNet"
"doc-analysis/TableBank" -> "ibm-aur-nlp/PubLayNet"
"doc-analysis/TableBank" -> "cndplab-founder/ICDAR2019_cTDaR"
"doc-analysis/TableBank" -> "Irene323/GFTE"
"doc-analysis/TableBank" -> "tommyMessi/tableImageParser_tx"
"doc-analysis/TableBank" -> "chineseocr/table-detect"
"doc-analysis/TableBank" -> "wenwenyu/PICK-pytorch"
"doc-analysis/TableBank" -> "hassan-mahmood/TIES_DataGeneration"
"doc-analysis/TableBank" -> "hikopensource/DAVAR-Lab-OCR"
"doc-analysis/TableBank" -> "whai362/PSENet"
"hikopensource/DAVAR-Lab-OCR" -> "JiaquanYe/TableMASTER-mmocr"
"hikopensource/DAVAR-Lab-OCR" -> "wenwenyu/PICK-pytorch"
"hikopensource/DAVAR-Lab-OCR" -> "ibm-aur-nlp/PubTabNet"
"hikopensource/DAVAR-Lab-OCR" -> "tommyMessi/tableImageParser_tx"
"hikopensource/DAVAR-Lab-OCR" -> "whai362/pan_pp.pytorch"
"hikopensource/DAVAR-Lab-OCR" -> "wenwenyu/MASTER-pytorch"
"hikopensource/DAVAR-Lab-OCR" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"hikopensource/DAVAR-Lab-OCR" -> "FangShancheng/ABINet"
"hikopensource/DAVAR-Lab-OCR" -> "oh-my-ocr/text_renderer"
"hikopensource/DAVAR-Lab-OCR" -> "WenmuZhou/OCR_DataSet"
"hikopensource/DAVAR-Lab-OCR" -> "WenmuZhou/DBNet.pytorch"
"hikopensource/DAVAR-Lab-OCR" -> "tiantian91091317/OCR-Corrector"
"hikopensource/DAVAR-Lab-OCR" -> "cv-small-snails/Awesome-Table-Recognition"
"hikopensource/DAVAR-Lab-OCR" -> "HCIILAB/Scene-Text-Recognition"
"hikopensource/DAVAR-Lab-OCR" -> "chineseocr/table-detect"
"hiroi-sora/PaddleOCR-json" -> "hiroi-sora/Umi-CUT"
"jlsutherland/doc2text" -> "tmbdev/ocropy"
"jlsutherland/doc2text" -> "tencent-wechat/phxsql" ["e"=1]
"jlsutherland/doc2text" -> "mzucker/page_dewarp"
"jlsutherland/doc2text" -> "WZBSocialScienceCenter/pdftabextract" ["e"=1]
"jlsutherland/doc2text" -> "sirfz/tesserocr"
"jlsutherland/doc2text" -> "HiFaraz/node-playbook" ["e"=1]
"jlsutherland/doc2text" -> "baidu/Paddle" ["e"=1]
"jlsutherland/doc2text" -> "PHPixie/Project" ["e"=1]
"jlsutherland/doc2text" -> "falvaro/seshat" ["e"=1]
"jlsutherland/doc2text" -> "christabor/flask_jsondash" ["e"=1]
"jlsutherland/doc2text" -> "TYVRNET/SRL" ["e"=1]
"jlsutherland/doc2text" -> "gregdurrett/berkeley-doc-summarizer" ["e"=1]
"jlsutherland/doc2text" -> "worldofpiggy/deeplearning-ahem-detector" ["e"=1]
"jlsutherland/doc2text" -> "openpaperwork/pyocr"
"jlsutherland/doc2text" -> "jsvine/waybackpack" ["e"=1]
"AimeeKing/crnn-tensorflow" -> "Belval/crnn"
"AimeeKing/crnn-tensorflow" -> "wcy940418/CRNN-end-to-end"
"dengdan/seglink" -> "bgshih/seglink"
"dengdan/seglink" -> "ZJULearning/pixel_link"
"dengdan/seglink" -> "BestSonny/SSTD"
"dengdan/seglink" -> "huoyijie/AdvancedEAST"
"dengdan/seglink" -> "argman/EAST"
"dengdan/seglink" -> "tianzhi0549/CTPN"
"dengdan/seglink" -> "MhLiao/TextBoxes"
"dengdan/seglink" -> "ankush-me/SynthText"
"dengdan/seglink" -> "Bartzi/see"
"dengdan/seglink" -> "JarveeLee/SynthText_Chinese_version"
"dengdan/seglink" -> "MhLiao/TextBoxes_plusplus"
"dengdan/seglink" -> "da03/Attention-OCR"
"dengdan/seglink" -> "bear63/sceneReco"
"dengdan/seglink" -> "tonghe90/textspotter"
"dengdan/seglink" -> "Yuliang-Liu/Curve-Text-Detector"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "chineseocr/table-ocr"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "MhLiao/DB"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "Sanster/text_renderer"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "WenmuZhou/OCR_DataSet"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "zhang0jhon/AttentionOCR"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "whai362/PSENet"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "MalongTech/research-charnet"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "WenmuZhou/PSENet.pytorch"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "huoyijie/AdvancedEAST"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-fake_data_generator"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "Rid7/Table-OCR"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "WenmuZhou/DBNet.pytorch"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "MhLiao/MaskTextSpotterV3"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "tiantian91091317/OCR-Corrector"
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" -> "liuheng92/tensorflow_PSENet"
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" -> "bikash/DocumentUnderstanding"
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" -> "mdv3101/CDeCNet"
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" -> "udipbohara/info_extraction_receipts"
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" -> "vsymbol/CUTIE"
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" -> "wenwenyu/PICK-pytorch"
"Pay20Y/FOTS_TF" -> "jiangxiluning/FOTS.PyTorch"
"Pay20Y/FOTS_TF" -> "xieyufei1993/FOTS"
"Pay20Y/FOTS_TF" -> "yu20103983/FOTS"
"Pay20Y/FOTS_TF" -> "lvpengyuan/masktextspotter.caffe2"
"Pay20Y/FOTS_TF" -> "tonghe90/textspotter"
"Pay20Y/FOTS_TF" -> "Shun14/TextBoxes_plusplus_Tensorflow"
"Pay20Y/FOTS_TF" -> "chenjun2hao/FOTS.pytorch"
"Pay20Y/FOTS_TF" -> "lvpengyuan/corner"
"Pay20Y/FOTS_TF" -> "Wang-Tianwei/Decoupled-attention-network"
"Pay20Y/FOTS_TF" -> "MichalBusta/DeepTextSpotter"
"Pay20Y/FOTS_TF" -> "ZJULearning/pixel_link"
"tommyMessi/tableImageParser_tx" -> "chineseocr/table-ocr"
"tommyMessi/tableImageParser_tx" -> "Rid7/Table-OCR"
"tommyMessi/tableImageParser_tx" -> "chineseocr/table-detect"
"tommyMessi/tableImageParser_tx" -> "ibm-aur-nlp/PubTabNet"
"tommyMessi/tableImageParser_tx" -> "tommyMessi/crnn_ctc-centerloss"
"tommyMessi/tableImageParser_tx" -> "tommyMessi/PST-table"
"tommyMessi/tableImageParser_tx" -> "shahrukhqasim/TIES-2.0"
"tommyMessi/tableImageParser_tx" -> "tommyMessi/remove-stamp"
"tommyMessi/tableImageParser_tx" -> "CharlesWu123/SPLERGE"
"tommyMessi/tableImageParser_tx" -> "hikopensource/DAVAR-Lab-OCR"
"tommyMessi/tableImageParser_tx" -> "Irene323/GFTE"
"tommyMessi/tableImageParser_tx" -> "hassan-mahmood/TIES_DataGeneration"
"tommyMessi/tableImageParser_tx" -> "JiaquanYe/TableMASTER-mmocr"
"tommyMessi/tableImageParser_tx" -> "fireae/Split_Merge_table_recognition"
"tommyMessi/tableImageParser_tx" -> "tiantian91091317/OCR-Corrector"
"ccccccmd/ReCapcha" -> "xuwenxue000/PJ_PREDICT_IMG"
"ccccccmd/ReCapcha" -> "coldicelion/Captcha-Recognizer" ["e"=1]
"ccccccmd/ReCapcha" -> "coldicelion/Strong-Web-Crawler" ["e"=1]
"vwarship/ocrstyle" -> "xuwenxue000/PJ_PREDICT_IMG"
"vwarship/ocrstyle" -> "huanglu20124/invoice"
"xuwenxue000/PJ_PREDICT_IMG" -> "xuwenxue000/PJ_DARKNET"
"xuwenxue000/PJ_PREDICT_IMG" -> "huanglu20124/invoice"
"xuwenxue000/PJ_PREDICT_IMG" -> "vwarship/ocrstyle"
"xuwenxue000/PJ_PREDICT_IMG" -> "JiangKui007/jx_ocr"
"xuwenxue000/PJ_PREDICT_IMG" -> "lxj0276/OCRServer"
"xuwenxue000/PJ_PREDICT_IMG" -> "ccccccmd/ReCapcha"
"cseas/ocr-table" -> "eihli/image-table-ocr"
"cseas/ocr-table" -> "rohanpillai20/Table-Extractor-From-Image"
"cseas/ocr-table" -> "chineseocr/table-ocr"
"cseas/ocr-table" -> "bitdata/ocrtable"
"cseas/ocr-table" -> "vitali84/pdf-to-csv-table-extactor"
"cseas/ocr-table" -> "ulikoehler/OTR"
"cseas/ocr-table" -> "brian-yang/table-parser-opencv"
"cseas/ocr-table" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"cseas/ocr-table" -> "MrZilinXiao/Hyper-Table-OCR"
"cseas/ocr-table" -> "the-black-knight-01/Tabulo"
"chenjun2hao/Attention_ocr.pytorch" -> "zhang0jhon/AttentionOCR"
"chenjun2hao/Attention_ocr.pytorch" -> "chenjun2hao/Bert_OCR.pytorch"
"chenjun2hao/Attention_ocr.pytorch" -> "lvpengyuan/corner"
"chenjun2hao/Attention_ocr.pytorch" -> "summerlvsong/Aggregation-Cross-Entropy"
"chenjun2hao/Attention_ocr.pytorch" -> "opconty/pytorch_ctpn"
"chenjun2hao/Attention_ocr.pytorch" -> "wushilian/CRNN_Attention_OCR_Chinese"
"chenjun2hao/Attention_ocr.pytorch" -> "ayumiymk/aster.pytorch"
"chenjun2hao/Attention_ocr.pytorch" -> "WenmuZhou/PSENet.pytorch"
"chenjun2hao/Attention_ocr.pytorch" -> "da03/Attention-OCR"
"chenjun2hao/Attention_ocr.pytorch" -> "A-bone1/Attention-ocr-Chinese-Version"
"chenjun2hao/Attention_ocr.pytorch" -> "Wang-Tianwei/Decoupled-attention-network"
"chenjun2hao/Attention_ocr.pytorch" -> "HCIILAB/Scene-Text-Recognition"
"chenjun2hao/Attention_ocr.pytorch" -> "Sierkinhane/crnn_chinese_characters_rec"
"chenjun2hao/Attention_ocr.pytorch" -> "fengxinjie/Transformer-OCR"
"chenjun2hao/Attention_ocr.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"ooooverflow/chinese-ocr" -> "Walleclipse/ChineseAddress_OCR"
"ooooverflow/chinese-ocr" -> "GlassyWing/text-detection-ocr"
"ooooverflow/chinese-ocr" -> "AstarLight/Lets_OCR"
"ooooverflow/chinese-ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"ooooverflow/chinese-ocr" -> "xiaofengShi/CHINESE-OCR"
"ooooverflow/chinese-ocr" -> "YCG09/chinese_ocr"
"ooooverflow/chinese-ocr" -> "yinchangchang/ocr_densenet"
"ooooverflow/chinese-ocr" -> "xiaomaxiao/keras_ocr"
"ooooverflow/chinese-ocr" -> "lvpengyuan/corner"
"ooooverflow/chinese-ocr" -> "AstarLight/CPS-OCR-Engine"
"ooooverflow/chinese-ocr" -> "chenjun2hao/Attention_ocr.pytorch"
"ooooverflow/chinese-ocr" -> "wang-tf/Chinese_OCR_synthetic_data"
"ooooverflow/chinese-ocr" -> "MachineLP/OCR_repo"
"ooooverflow/chinese-ocr" -> "Li-Ming-Fan/OCR-CRNN-CTC"
"ooooverflow/chinese-ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"zhang0jhon/AttentionOCR" -> "MhLiao/DB"
"zhang0jhon/AttentionOCR" -> "Yuliang-Liu/bezier_curve_text_spotting"
"zhang0jhon/AttentionOCR" -> "MalongTech/research-charnet"
"zhang0jhon/AttentionOCR" -> "Wang-Tianwei/Decoupled-attention-network"
"zhang0jhon/AttentionOCR" -> "jiangxiluning/FOTS.PyTorch"
"zhang0jhon/AttentionOCR" -> "whai362/PSENet"
"zhang0jhon/AttentionOCR" -> "Sanster/text_renderer"
"zhang0jhon/AttentionOCR" -> "MhLiao/MaskTextSpotterV3"
"zhang0jhon/AttentionOCR" -> "huoyijie/AdvancedEAST"
"zhang0jhon/AttentionOCR" -> "Megvii-CSG/MegReader"
"zhang0jhon/AttentionOCR" -> "MhLiao/MaskTextSpotter"
"zhang0jhon/AttentionOCR" -> "HCIILAB/Scene-Text-Recognition"
"zhang0jhon/AttentionOCR" -> "ayumiymk/aster.pytorch"
"zhang0jhon/AttentionOCR" -> "chenjun2hao/Attention_ocr.pytorch"
"zhang0jhon/AttentionOCR" -> "bgshih/aster"
"solivr/tf-crnn" -> "MaybeShewill-CV/CRNN_Tensorflow"
"solivr/tf-crnn" -> "Belval/CRNN"
"solivr/tf-crnn" -> "ilovin/lstm_ctc_ocr"
"solivr/tf-crnn" -> "weinman/cnn_lstm_ctc_ocr"
"solivr/tf-crnn" -> "AimeeKing/crnn-tensorflow"
"solivr/tf-crnn" -> "gasparian/CRNN_OCR_lite"
"solivr/tf-crnn" -> "wushilian/CRNN_Attention_OCR_Chinese"
"solivr/tf-crnn" -> "bear63/sceneReco"
"solivr/tf-crnn" -> "bai-shang/OCR_TF_CRNN_CTC"
"solivr/tf-crnn" -> "githubharald/CTCWordBeamSearch" ["e"=1]
"solivr/tf-crnn" -> "Bartzi/stn-ocr"
"solivr/tf-crnn" -> "frereit/TensorflowHandwritingRecognition" ["e"=1]
"solivr/tf-crnn" -> "bgshih/crnn"
"solivr/tf-crnn" -> "summerlvsong/Aggregation-Cross-Entropy"
"solivr/tf-crnn" -> "Bartzi/see"
"YIYIMZ/my_orc_keras_verification_code_identification" -> "IMYR666/any-captcha" ["e"=1]
"YIYIMZ/my_orc_keras_verification_code_identification" -> "xiaomaxiao/keras_ocr"
"YIYIMZ/my_orc_keras_verification_code_identification" -> "yinchangchang/ocr_densenet"
"YIYIMZ/my_orc_keras_verification_code_identification" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" ["e"=1]
"AutoML-4Paradigm/AutoSTR" -> "Chuhanxx/FontAdaptor"
"Canjie-Luo/MORAN_v2" -> "bgshih/aster"
"Canjie-Luo/MORAN_v2" -> "summerlvsong/Aggregation-Cross-Entropy"
"Canjie-Luo/MORAN_v2" -> "Wang-Tianwei/Decoupled-attention-network"
"Canjie-Luo/MORAN_v2" -> "ayumiymk/aster.pytorch"
"Canjie-Luo/MORAN_v2" -> "HCIILAB/Scene-Text-Recognition"
"Canjie-Luo/MORAN_v2" -> "whai362/PSENet"
"Canjie-Luo/MORAN_v2" -> "princewang1994/TextSnake.pytorch"
"Canjie-Luo/MORAN_v2" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Canjie-Luo/MORAN_v2" -> "WenmuZhou/PAN.pytorch"
"Canjie-Luo/MORAN_v2" -> "Jyouhou/SceneTextPapers"
"Canjie-Luo/MORAN_v2" -> "Megvii-CSG/MegReader"
"Canjie-Luo/MORAN_v2" -> "MalongTech/research-charnet"
"Canjie-Luo/MORAN_v2" -> "Yuliang-Liu/Curve-Text-Detector"
"Canjie-Luo/MORAN_v2" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Canjie-Luo/MORAN_v2" -> "cs-chan/Total-Text-Dataset"
"Canjie-Luo/Text-Image-Augmentation" -> "RubanSeven/Text-Image-Augmentation-python"
"Canjie-Luo/Text-Image-Augmentation" -> "Wang-Tianwei/Decoupled-attention-network"
"Canjie-Luo/Text-Image-Augmentation" -> "chenjun2hao/SRN.pytorch"
"Canjie-Luo/Text-Image-Augmentation" -> "Megvii-CSG/MegReader"
"Canjie-Luo/Text-Image-Augmentation" -> "Pay20Y/SEED"
"Canjie-Luo/Text-Image-Augmentation" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Canjie-Luo/Text-Image-Augmentation" -> "Jyouhou/UnrealText"
"Canjie-Luo/Text-Image-Augmentation" -> "summerlvsong/Aggregation-Cross-Entropy"
"Canjie-Luo/Text-Image-Augmentation" -> "ayumiymk/aster.pytorch"
"Canjie-Luo/Text-Image-Augmentation" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Canjie-Luo/Text-Image-Augmentation" -> "HCIILAB/Scene-Text-Recognition"
"Canjie-Luo/Text-Image-Augmentation" -> "opconty/Transformer_STR"
"Canjie-Luo/Text-Image-Augmentation" -> "tommyMessi/crnn_ctc-centerloss"
"Canjie-Luo/Text-Image-Augmentation" -> "MhLiao/MaskTextSpotterV3"
"Canjie-Luo/Text-Image-Augmentation" -> "oh-my-ocr/text_renderer"
"FangShancheng/ABINet" -> "ku21fan/STR-Fewer-Labels"
"FangShancheng/ABINet" -> "chenjun2hao/SRN.pytorch"
"FangShancheng/ABINet" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"FangShancheng/ABINet" -> "RuijieJ/pren"
"FangShancheng/ABINet" -> "wangyuxin87/VisionLAN"
"FangShancheng/ABINet" -> "whai362/pan_pp.pytorch"
"FangShancheng/ABINet" -> "Wang-Tianwei/Decoupled-attention-network"
"FangShancheng/ABINet" -> "baudm/parseq"
"FangShancheng/ABINet" -> "HCIILAB/Scene-Text-Recognition"
"FangShancheng/ABINet" -> "hikopensource/DAVAR-Lab-OCR"
"FangShancheng/ABINet" -> "Pay20Y/SEED"
"FangShancheng/ABINet" -> "mxin262/SwinTextSpotter"
"FangShancheng/ABINet" -> "roatienza/deep-text-recognition-benchmark"
"FangShancheng/ABINet" -> "FudanVI/benchmarking-chinese-text-recognition"
"FangShancheng/ABINet" -> "Media-Smart/vedastr"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "ku21fan/STR-Fewer-Labels"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "HCIILAB/Scene-Text-Recognition"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "FangShancheng/ABINet"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "FudanVI/benchmarking-chinese-text-recognition"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "roatienza/deep-text-recognition-benchmark"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "google-research-datasets/hiertext"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "hikopensource/DAVAR-Lab-OCR"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "roatienza/straug"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "mxin262/SwinTextSpotter"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "baudm/parseq"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "amazon-research/semimtr-text-recognition"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "wenwenyu/MASTER-pytorch"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "shannanyinxiang/PageNet"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "whai362/pan_pp.pytorch"
"HCIILAB/Scene-Text-Recognition-Recommendations" -> "shannanyinxiang/SPTS"
"JasonBoy1/TextZoom" -> "mjq11302010044/TPGSR"
"JasonBoy1/TextZoom" -> "FudanVI/FudanOCR"
"JasonBoy1/TextZoom" -> "Pay20Y/SEED"
"JasonBoy1/TextZoom" -> "mjq11302010044/TATT"
"JasonBoy1/TextZoom" -> "ayumiymk/aster.pytorch"
"JasonBoy1/TextZoom" -> "opconty/Transformer_STR"
"JasonBoy1/TextZoom" -> "huiyang865/plugnet"
"JasonBoy1/TextZoom" -> "Wang-Tianwei/Decoupled-attention-network"
"JasonBoy1/TextZoom" -> "wangyuxin87/ContourNet"
"JasonBoy1/TextZoom" -> "chenjun2hao/SRN.pytorch"
"JasonBoy1/TextZoom" -> "ku21fan/STR-Fewer-Labels"
"JasonBoy1/TextZoom" -> "Yuliang-Liu/bezier_curve_text_spotting"
"JasonBoy1/TextZoom" -> "zhaominyiz/C3-STISR"
"JasonBoy1/TextZoom" -> "wenwenyu/MASTER-pytorch"
"JasonBoy1/TextZoom" -> "FangShancheng/ABINet"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Wang-Tianwei/Decoupled-attention-network"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "summerlvsong/Aggregation-Cross-Entropy"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Megvii-CSG/MegReader"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Yuliang-Liu/Box_Discretization_Network"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Pay20Y/SEED"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "Canjie-Luo/Text-Image-Augmentation"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "WenmuZhou/PAN.pytorch"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "STVIR/PMTD"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "chenjun2hao/SRN.pytorch"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "chenjun2hao/Bert_OCR.pytorch"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "yflv-yanxia/scene_text"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "MalongTech/research-charnet"
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" -> "GXYM/DRRG"
"Jyouhou/SceneTextPapers" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"Jyouhou/SceneTextPapers" -> "HCIILAB/Scene-Text-Recognition"
"Jyouhou/SceneTextPapers" -> "whai362/PSENet"
"Jyouhou/SceneTextPapers" -> "cs-chan/Total-Text-Dataset"
"Jyouhou/SceneTextPapers" -> "Megvii-CSG/MegReader"
"Jyouhou/SceneTextPapers" -> "whitelok/image-text-localization-recognition"
"Jyouhou/SceneTextPapers" -> "Canjie-Luo/MORAN_v2"
"Jyouhou/SceneTextPapers" -> "ayumiymk/aster.pytorch"
"Jyouhou/SceneTextPapers" -> "HCIILAB/Scene-Text-Detection"
"Jyouhou/SceneTextPapers" -> "bgshih/aster"
"Jyouhou/SceneTextPapers" -> "princewang1994/TextSnake.pytorch"
"Jyouhou/SceneTextPapers" -> "Yuliang-Liu/Curve-Text-Detector"
"Jyouhou/SceneTextPapers" -> "summerlvsong/Aggregation-Cross-Entropy"
"Jyouhou/SceneTextPapers" -> "jiangxiluning/FOTS.PyTorch"
"Jyouhou/SceneTextPapers" -> "MhLiao/DB"
"Jyouhou/UnrealText" -> "MhLiao/SynthText3D"
"Jyouhou/UnrealText" -> "Canjie-Luo/Text-Image-Augmentation"
"Jyouhou/UnrealText" -> "Yuliang-Liu/Box_Discretization_Network"
"Jyouhou/UnrealText" -> "youdao-ai/SRNet"
"Jyouhou/UnrealText" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Jyouhou/UnrealText" -> "youdao-ai/SRNet-Datagen"
"Jyouhou/UnrealText" -> "Pay20Y/SEED"
"Jyouhou/UnrealText" -> "Wang-Tianwei/Decoupled-attention-network"
"Jyouhou/UnrealText" -> "summerlvsong/Aggregation-Cross-Entropy"
"Jyouhou/UnrealText" -> "GXYM/DRRG"
"Jyouhou/UnrealText" -> "RubanSeven/Text-Image-Augmentation-python"
"Jyouhou/UnrealText" -> "Niwhskal/SRNet"
"Jyouhou/UnrealText" -> "Megvii-CSG/MegReader"
"Jyouhou/UnrealText" -> "MhLiao/MaskTextSpotterV3"
"Jyouhou/UnrealText" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Media-Smart/vedastr" -> "chenjun2hao/SRN.pytorch"
"Media-Smart/vedastr" -> "whai362/pan_pp.pytorch"
"Media-Smart/vedastr" -> "Pay20Y/SEED"
"Media-Smart/vedastr" -> "Wang-Tianwei/Decoupled-attention-network"
"Media-Smart/vedastr" -> "clovaai/SATRN"
"Media-Smart/vedastr" -> "MhLiao/MaskTextSpotterV3"
"Media-Smart/vedastr" -> "RubanSeven/Text-Image-Augmentation-python"
"Media-Smart/vedastr" -> "ayumiymk/aster.pytorch"
"Media-Smart/vedastr" -> "wenwenyu/MASTER-pytorch"
"Media-Smart/vedastr" -> "FangShancheng/ABINet"
"Media-Smart/vedastr" -> "opconty/Transformer_STR"
"Media-Smart/vedastr" -> "HCIILAB/Scene-Text-Recognition"
"Media-Smart/vedastr" -> "backtime92/CRAFT-Reimplementation"
"Media-Smart/vedastr" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Media-Smart/vedastr" -> "hikopensource/DAVAR-Lab-OCR"
"RubanSeven/Text-Image-Augmentation-python" -> "Canjie-Luo/Text-Image-Augmentation"
"RubanSeven/Text-Image-Augmentation-python" -> "Wang-Tianwei/Decoupled-attention-network"
"RubanSeven/Text-Image-Augmentation-python" -> "Pay20Y/SEED"
"RubanSeven/Text-Image-Augmentation-python" -> "summerlvsong/Aggregation-Cross-Entropy"
"RubanSeven/Text-Image-Augmentation-python" -> "chenjun2hao/SRN.pytorch"
"RubanSeven/Text-Image-Augmentation-python" -> "Megvii-CSG/MegReader"
"RubanSeven/Text-Image-Augmentation-python" -> "tommyMessi/crnn_ctc-centerloss"
"RubanSeven/Text-Image-Augmentation-python" -> "wenwenyu/MASTER-pytorch"
"RubanSeven/Text-Image-Augmentation-python" -> "Media-Smart/vedastr"
"RubanSeven/Text-Image-Augmentation-python" -> "opconty/Transformer_STR"
"RubanSeven/Text-Image-Augmentation-python" -> "Yuliang-Liu/Box_Discretization_Network"
"RubanSeven/Text-Image-Augmentation-python" -> "Yuliang-Liu/bezier_curve_text_spotting"
"RubanSeven/Text-Image-Augmentation-python" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"RubanSeven/Text-Image-Augmentation-python" -> "whai362/pan_pp.pytorch"
"RubanSeven/Text-Image-Augmentation-python" -> "HCIILAB/Scene-Text-Recognition"
"Wang-Tianwei/Decoupled-attention-network" -> "Pay20Y/SEED"
"Wang-Tianwei/Decoupled-attention-network" -> "Canjie-Luo/Text-Image-Augmentation"
"Wang-Tianwei/Decoupled-attention-network" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Wang-Tianwei/Decoupled-attention-network" -> "summerlvsong/Aggregation-Cross-Entropy"
"Wang-Tianwei/Decoupled-attention-network" -> "ayumiymk/aster.pytorch"
"Wang-Tianwei/Decoupled-attention-network" -> "Canjie-Luo/MORAN_v2"
"Wang-Tianwei/Decoupled-attention-network" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Wang-Tianwei/Decoupled-attention-network" -> "chenjun2hao/SRN.pytorch"
"Wang-Tianwei/Decoupled-attention-network" -> "Yuliang-Liu/Box_Discretization_Network"
"Wang-Tianwei/Decoupled-attention-network" -> "RubanSeven/Text-Image-Augmentation-python"
"Wang-Tianwei/Decoupled-attention-network" -> "HCIILAB/Scene-Text-Recognition"
"Wang-Tianwei/Decoupled-attention-network" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Wang-Tianwei/Decoupled-attention-network" -> "Megvii-CSG/MegReader"
"Wang-Tianwei/Decoupled-attention-network" -> "MhLiao/MaskTextSpotter"
"Wang-Tianwei/Decoupled-attention-network" -> "chenjun2hao/Bert_OCR.pytorch"
"Yuliang-Liu/Box_Discretization_Network" -> "Wang-Tianwei/Decoupled-attention-network"
"Yuliang-Liu/Box_Discretization_Network" -> "STVIR/PMTD"
"Yuliang-Liu/Box_Discretization_Network" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Yuliang-Liu/Box_Discretization_Network" -> "summerlvsong/Aggregation-Cross-Entropy"
"Yuliang-Liu/Box_Discretization_Network" -> "Megvii-CSG/MegReader"
"Yuliang-Liu/Box_Discretization_Network" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Yuliang-Liu/Box_Discretization_Network" -> "HCIILAB/Scene-Text-Recognition"
"Yuliang-Liu/Box_Discretization_Network" -> "HCIILAB/Scene-Text-Detection"
"Yuliang-Liu/Box_Discretization_Network" -> "Jyouhou/UnrealText"
"Yuliang-Liu/Box_Discretization_Network" -> "lvpengyuan/corner"
"Yuliang-Liu/Box_Discretization_Network" -> "GXYM/DRRG"
"Yuliang-Liu/Box_Discretization_Network" -> "backtime92/CRAFT-Reimplementation"
"Yuliang-Liu/Box_Discretization_Network" -> "Pay20Y/SEED"
"Yuliang-Liu/Box_Discretization_Network" -> "Canjie-Luo/MORAN_v2"
"Yuliang-Liu/Box_Discretization_Network" -> "ayumiymk/aster.pytorch"
"bgshih/aster" -> "ayumiymk/aster.pytorch"
"bgshih/aster" -> "Canjie-Luo/MORAN_v2"
"bgshih/aster" -> "whai362/PSENet"
"bgshih/aster" -> "lvpengyuan/corner"
"bgshih/aster" -> "summerlvsong/Aggregation-Cross-Entropy"
"bgshih/aster" -> "jiangxiluning/FOTS.PyTorch"
"bgshih/aster" -> "cs-chan/Total-Text-Dataset"
"bgshih/aster" -> "MhLiao/TextBoxes_plusplus"
"bgshih/aster" -> "Sanster/text_renderer"
"bgshih/aster" -> "JarveeLee/SynthText_Chinese_version"
"bgshih/aster" -> "Wang-Tianwei/Decoupled-attention-network"
"bgshih/aster" -> "liuheng92/tensorflow_PSENet"
"bgshih/aster" -> "lvpengyuan/masktextspotter.caffe2"
"bgshih/aster" -> "MalongTech/research-charnet"
"bgshih/aster" -> "ZJULearning/pixel_link"
"clovaai/SATRN" -> "Pay20Y/SEED"
"clovaai/SATRN" -> "chenjun2hao/SRN.pytorch"
"clovaai/SATRN" -> "opconty/Transformer_STR"
"clovaai/SATRN" -> "RuijieJ/pren"
"clovaai/SATRN" -> "Media-Smart/vedastr"
"clovaai/SATRN" -> "Wang-Tianwei/Decoupled-attention-network"
"clovaai/SATRN" -> "clovaai/CLEval"
"clovaai/SATRN" -> "ku21fan/STR-Fewer-Labels"
"clovaai/SATRN" -> "roatienza/deep-text-recognition-benchmark"
"cs-chan/Total-Text-Dataset" -> "Yuliang-Liu/Curve-Text-Detector"
"cs-chan/Total-Text-Dataset" -> "whai362/PSENet"
"cs-chan/Total-Text-Dataset" -> "princewang1994/TextSnake.pytorch"
"cs-chan/Total-Text-Dataset" -> "Jyouhou/SceneTextPapers"
"cs-chan/Total-Text-Dataset" -> "bgshih/aster"
"cs-chan/Total-Text-Dataset" -> "whitelok/image-text-localization-recognition"
"cs-chan/Total-Text-Dataset" -> "ankush-me/SynthText"
"cs-chan/Total-Text-Dataset" -> "HCIILAB/Scene-Text-Recognition"
"cs-chan/Total-Text-Dataset" -> "Canjie-Luo/MORAN_v2"
"cs-chan/Total-Text-Dataset" -> "HCIILAB/Scene-Text-Detection"
"cs-chan/Total-Text-Dataset" -> "MhLiao/DB"
"cs-chan/Total-Text-Dataset" -> "MalongTech/research-charnet"
"cs-chan/Total-Text-Dataset" -> "Megvii-CSG/MegReader"
"cs-chan/Total-Text-Dataset" -> "lvpengyuan/masktextspotter.caffe2"
"cs-chan/Total-Text-Dataset" -> "WenmuZhou/PAN.pytorch"
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" -> "MhLiao/SynthText3D"
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" -> "cjnolet/text-renderer"
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" -> "FangShancheng/conv-ensemble-str"
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" -> "chongshengzhang/shopsign"
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" -> "fnzhan/ESIR"
"guruL/Character-Region-Awareness-for-Text-Detection-" -> "RubanSeven/CRAFT_keras"
"guruL/Character-Region-Awareness-for-Text-Detection-" -> "autonise/CRAFT-Remade"
"guruL/Character-Region-Awareness-for-Text-Detection-" -> "backtime92/CRAFT-Reimplementation"
"guruL/Character-Region-Awareness-for-Text-Detection-" -> "Yuliang-Liu/Box_Discretization_Network"
"huizhang0110/AON" -> "fnzhan/ESIR"
"huizhang0110/AON" -> "AirBernard/Scene-Text-Detection-with-SPCNET"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "clovaai/deep-text-recognition-benchmark"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "clovaai/CRAFT-pytorch"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "MhLiao/DB"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "Jyouhou/SceneTextPapers"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "ankush-me/SynthText"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "Belval/TextRecognitionDataGenerator"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "whai362/PSENet"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "jiangxiluning/FOTS.PyTorch"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "argman/EAST"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "huoyijie/AdvancedEAST"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "eragonruan/text-detection-ctpn"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "Sanster/text_renderer"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "xiaofengShi/CHINESE-OCR"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "bgshih/aster"
"hwalsuklee/awesome-deep-text-detection-recognition" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"jiangxiluning/FOTS.PyTorch" -> "whai362/PSENet"
"jiangxiluning/FOTS.PyTorch" -> "xieyufei1993/FOTS"
"jiangxiluning/FOTS.PyTorch" -> "lvpengyuan/masktextspotter.caffe2"
"jiangxiluning/FOTS.PyTorch" -> "huoyijie/AdvancedEAST"
"jiangxiluning/FOTS.PyTorch" -> "SakuraRiven/EAST"
"jiangxiluning/FOTS.PyTorch" -> "bgshih/aster"
"jiangxiluning/FOTS.PyTorch" -> "ayumiymk/aster.pytorch"
"jiangxiluning/FOTS.PyTorch" -> "WenmuZhou/PSENet.pytorch"
"jiangxiluning/FOTS.PyTorch" -> "MhLiao/MaskTextSpotter"
"jiangxiluning/FOTS.PyTorch" -> "ZJULearning/pixel_link"
"jiangxiluning/FOTS.PyTorch" -> "songdejia/EAST"
"jiangxiluning/FOTS.PyTorch" -> "Pay20Y/FOTS_TF"
"jiangxiluning/FOTS.PyTorch" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"jiangxiluning/FOTS.PyTorch" -> "zhang0jhon/AttentionOCR"
"jiangxiluning/FOTS.PyTorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"ku21fan/STR-Fewer-Labels" -> "FangShancheng/ABINet"
"ku21fan/STR-Fewer-Labels" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"ku21fan/STR-Fewer-Labels" -> "google-research-datasets/hiertext"
"ku21fan/STR-Fewer-Labels" -> "Pay20Y/SEED"
"ku21fan/STR-Fewer-Labels" -> "chenjun2hao/SRN.pytorch"
"ku21fan/STR-Fewer-Labels" -> "RuijieJ/pren"
"ku21fan/STR-Fewer-Labels" -> "wangyuxin87/VisionLAN"
"ku21fan/STR-Fewer-Labels" -> "mxin262/SwinTextSpotter"
"ku21fan/STR-Fewer-Labels" -> "opconty/Transformer_STR"
"ku21fan/STR-Fewer-Labels" -> "baudm/parseq"
"ku21fan/STR-Fewer-Labels" -> "xdxie/WordArt"
"ku21fan/STR-Fewer-Labels" -> "amazon-research/semimtr-text-recognition"
"ku21fan/STR-Fewer-Labels" -> "HCIILAB/Scene-Text-Removal"
"ku21fan/STR-Fewer-Labels" -> "roatienza/deep-text-recognition-benchmark"
"liuch37/sar-pytorch" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"princewang1994/TextSnake.pytorch" -> "whai362/PSENet"
"princewang1994/TextSnake.pytorch" -> "Canjie-Luo/MORAN_v2"
"princewang1994/TextSnake.pytorch" -> "Yuliang-Liu/Curve-Text-Detector"
"princewang1994/TextSnake.pytorch" -> "cs-chan/Total-Text-Dataset"
"princewang1994/TextSnake.pytorch" -> "lvpengyuan/masktextspotter.caffe2"
"princewang1994/TextSnake.pytorch" -> "bgshih/aster"
"princewang1994/TextSnake.pytorch" -> "songdejia/EAST"
"princewang1994/TextSnake.pytorch" -> "summerlvsong/Aggregation-Cross-Entropy"
"princewang1994/TextSnake.pytorch" -> "GXYM/DRRG"
"princewang1994/TextSnake.pytorch" -> "liuheng92/tensorflow_PSENet"
"princewang1994/TextSnake.pytorch" -> "jiangxiluning/FOTS.PyTorch"
"princewang1994/TextSnake.pytorch" -> "WenmuZhou/PSENet.pytorch"
"princewang1994/TextSnake.pytorch" -> "Jyouhou/SceneTextPapers"
"princewang1994/TextSnake.pytorch" -> "lvpengyuan/corner"
"princewang1994/TextSnake.pytorch" -> "ayumiymk/aster.pytorch"
"roatienza/deep-text-recognition-benchmark" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"roatienza/deep-text-recognition-benchmark" -> "ku21fan/STR-Fewer-Labels"
"roatienza/deep-text-recognition-benchmark" -> "chenjun2hao/SRN.pytorch"
"roatienza/deep-text-recognition-benchmark" -> "FangShancheng/ABINet"
"roatienza/deep-text-recognition-benchmark" -> "whai362/pan_pp.pytorch"
"roatienza/deep-text-recognition-benchmark" -> "baudm/parseq"
"roatienza/deep-text-recognition-benchmark" -> "Pay20Y/SEED"
"roatienza/deep-text-recognition-benchmark" -> "clovaai/SATRN"
"roatienza/deep-text-recognition-benchmark" -> "roatienza/straug"
"roatienza/deep-text-recognition-benchmark" -> "Media-Smart/vedastr"
"roatienza/deep-text-recognition-benchmark" -> "opconty/Transformer_STR"
"roatienza/deep-text-recognition-benchmark" -> "FudanVI/benchmarking-chinese-text-recognition"
"roatienza/deep-text-recognition-benchmark" -> "clovaai/synthtiger"
"roatienza/deep-text-recognition-benchmark" -> "RubanSeven/Text-Image-Augmentation-python"
"roatienza/deep-text-recognition-benchmark" -> "SHI-Labs/Rethinking-Text-Segmentation"
"tonghe90/textspotter" -> "MichalBusta/DeepTextSpotter"
"tonghe90/textspotter" -> "BestSonny/SSTD"
"tonghe90/textspotter" -> "lvpengyuan/masktextspotter.caffe2"
"tonghe90/textspotter" -> "MhLiao/TextBoxes_plusplus"
"tonghe90/textspotter" -> "bgshih/seglink"
"tonghe90/textspotter" -> "bgshih/aster"
"tonghe90/textspotter" -> "ZJULearning/pixel_link"
"tonghe90/textspotter" -> "jiangxiluning/FOTS.PyTorch"
"tonghe90/textspotter" -> "Canjie-Luo/MORAN_v2"
"tonghe90/textspotter" -> "Yuliang-Liu/Curve-Text-Detector"
"tonghe90/textspotter" -> "xhzdeng/crpn"
"tonghe90/textspotter" -> "MalongTech/research-charnet"
"tonghe90/textspotter" -> "Bartzi/see"
"tonghe90/textspotter" -> "summerlvsong/Aggregation-Cross-Entropy"
"tonghe90/textspotter" -> "whai362/PSENet"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Pay20Y/SAR_TF"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Wang-Tianwei/Decoupled-attention-network"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "summerlvsong/Aggregation-Cross-Entropy"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "liuch37/sar-pytorch"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Canjie-Luo/MORAN_v2"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Pay20Y/SEED"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "ayumiymk/aster.pytorch"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "jichilen/SAR_quick"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Bartzi/kiss"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "HCIILAB/Scene-Text-Recognition"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Megvii-CSG/MegReader"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "fengxinjie/Transformer-OCR"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" -> "chenjun2hao/Bert_OCR.pytorch"
"wenwenyu/MASTER-pytorch" -> "JiaquanYe/TableMASTER-mmocr"
"wenwenyu/MASTER-pytorch" -> "jiangxiluning/MASTER-TF"
"wenwenyu/MASTER-pytorch" -> "wenwenyu/PICK-pytorch"
"wenwenyu/MASTER-pytorch" -> "hikopensource/DAVAR-Lab-OCR"
"wenwenyu/MASTER-pytorch" -> "ibm-aur-nlp/PubTabNet"
"wenwenyu/MASTER-pytorch" -> "JiaquanYe/MASTER-mmocr"
"wenwenyu/MASTER-pytorch" -> "tommyMessi/crnn_ctc-centerloss"
"wenwenyu/MASTER-pytorch" -> "limengyang1992/seq2seq-layout-analysis"
"wenwenyu/MASTER-pytorch" -> "novioleo/Savior"
"wenwenyu/MASTER-pytorch" -> "whai362/pan_pp.pytorch"
"wenwenyu/MASTER-pytorch" -> "RubanSeven/Text-Image-Augmentation-python"
"wenwenyu/MASTER-pytorch" -> "MhLiao/MaskTextSpotterV3"
"wenwenyu/MASTER-pytorch" -> "Media-Smart/vedastr"
"wenwenyu/MASTER-pytorch" -> "tommyMessi/PST-table"
"wenwenyu/MASTER-pytorch" -> "liuch37/sar-pytorch"
"whai362/PSENet" -> "liuheng92/tensorflow_PSENet"
"whai362/PSENet" -> "MhLiao/DB"
"whai362/PSENet" -> "WenmuZhou/PSENet.pytorch"
"whai362/PSENet" -> "ZJULearning/pixel_link"
"whai362/PSENet" -> "jiangxiluning/FOTS.PyTorch"
"whai362/PSENet" -> "huoyijie/AdvancedEAST"
"whai362/PSENet" -> "Yuliang-Liu/Curve-Text-Detector"
"whai362/PSENet" -> "bgshih/aster"
"whai362/PSENet" -> "WenmuZhou/PAN.pytorch"
"whai362/PSENet" -> "WenmuZhou/DBNet.pytorch"
"whai362/PSENet" -> "whai362/pan_pp.pytorch"
"whai362/PSENet" -> "JarveeLee/SynthText_Chinese_version"
"whai362/PSENet" -> "Sanster/text_renderer"
"whai362/PSENet" -> "cs-chan/Total-Text-Dataset"
"whai362/PSENet" -> "ayumiymk/aster.pytorch"
"whai362/pan_pp.pytorch" -> "WenmuZhou/PAN.pytorch"
"whai362/pan_pp.pytorch" -> "whai362/PSENet"
"whai362/pan_pp.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"whai362/pan_pp.pytorch" -> "MhLiao/MaskTextSpotterV3"
"whai362/pan_pp.pytorch" -> "hikopensource/DAVAR-Lab-OCR"
"whai362/pan_pp.pytorch" -> "Media-Smart/vedastr"
"whai362/pan_pp.pytorch" -> "ying09/TextFuseNet"
"whai362/pan_pp.pytorch" -> "WenmuZhou/DBNet.pytorch"
"whai362/pan_pp.pytorch" -> "MhLiao/DB"
"whai362/pan_pp.pytorch" -> "FangShancheng/ABINet"
"whai362/pan_pp.pytorch" -> "wangyuxin87/ContourNet"
"whai362/pan_pp.pytorch" -> "wenwenyu/MASTER-pytorch"
"whai362/pan_pp.pytorch" -> "WenmuZhou/PSENet.pytorch"
"whai362/pan_pp.pytorch" -> "mxin262/SwinTextSpotter"
"whai362/pan_pp.pytorch" -> "RubanSeven/Text-Image-Augmentation-python"
"simplezhli/Tesseract-OCR-Scanner" -> "SiKang123/ImgTranslator"
"simplezhli/Tesseract-OCR-Scanner" -> "wenchaosong/OCR_identify" ["e"=1]
"simplezhli/Tesseract-OCR-Scanner" -> "iluhcm/QrCodeScanner" ["e"=1]
"simplezhli/Tesseract-OCR-Scanner" -> "rmtheis/tess-two"
"simplezhli/Tesseract-OCR-Scanner" -> "CN-ZPH/Three360panorama" ["e"=1]
"simplezhli/Tesseract-OCR-Scanner" -> "beiliao-mobile/BadgeNumberManager" ["e"=1]
"simplezhli/Tesseract-OCR-Scanner" -> "pqpo/SmartCamera" ["e"=1]
"simplezhli/Tesseract-OCR-Scanner" -> "fengzhizi715/Tess-TwoDemo" ["e"=1]
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/tessdata_fast"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/tessdata"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/tesstrain"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/tessdoc"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/langdata_lstm"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/langdata"
"tesseract-ocr/tessdata_best" -> "UB-Mannheim/tesseract"
"tesseract-ocr/tessdata_best" -> "DanBloomberg/leptonica"
"tesseract-ocr/tessdata_best" -> "sirfz/tesserocr"
"tesseract-ocr/tessdata_best" -> "madmaze/pytesseract"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/tesseract-ocr.github.io"
"tesseract-ocr/tessdata_best" -> "nguyenq/tess4j"
"tesseract-ocr/tessdata_best" -> "naptha/tessdata"
"tesseract-ocr/tessdata_best" -> "Calamari-OCR/calamari"
"tesseract-ocr/tessdata_best" -> "tesseract-ocr/test"
"AstarLight/CPS-OCR-Engine" -> "AstarLight/Lets_OCR"
"AstarLight/CPS-OCR-Engine" -> "YCG09/chinese_ocr"
"AstarLight/CPS-OCR-Engine" -> "Sierkinhane/crnn_chinese_characters_rec"
"AstarLight/CPS-OCR-Engine" -> "xiaofengShi/CHINESE-OCR"
"AstarLight/CPS-OCR-Engine" -> "eragonruan/text-detection-ctpn"
"AstarLight/CPS-OCR-Engine" -> "senlinuc/caffe_ocr"
"AstarLight/CPS-OCR-Engine" -> "JarveeLee/SynthText_Chinese_version"
"AstarLight/CPS-OCR-Engine" -> "xiaomaxiao/keras_ocr"
"AstarLight/CPS-OCR-Engine" -> "bear63/sceneReco"
"AstarLight/CPS-OCR-Engine" -> "wanghaisheng/awesome-ocr"
"AstarLight/CPS-OCR-Engine" -> "chineseocr/chineseocr"
"AstarLight/CPS-OCR-Engine" -> "JinpengLI/deep_ocr"
"AstarLight/CPS-OCR-Engine" -> "Sanster/text_renderer"
"AstarLight/CPS-OCR-Engine" -> "huoyijie/AdvancedEAST"
"AstarLight/CPS-OCR-Engine" -> "yinchangchang/ocr_densenet"
"jiangxiluning/chinese-ocr" -> "xiaomaxiao/keras_ocr"
"jiangxiluning/chinese-ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"jiangxiluning/chinese-ocr" -> "eragonruan/text-detection-ctpn"
"jiangxiluning/chinese-ocr" -> "xiaofengShi/CHINESE-OCR"
"jiangxiluning/chinese-ocr" -> "YCG09/chinese_ocr"
"jiangxiluning/chinese-ocr" -> "huoyijie/AdvancedEAST"
"jiangxiluning/chinese-ocr" -> "bear63/sceneReco"
"jiangxiluning/chinese-ocr" -> "AstarLight/CPS-OCR-Engine"
"jiangxiluning/chinese-ocr" -> "YoungMiao/crnn"
"jiangxiluning/chinese-ocr" -> "JarveeLee/SynthText_Chinese_version"
"jiangxiluning/chinese-ocr" -> "Li-Ming-Fan/OCR-DETECTION-CTPN"
"jiangxiluning/chinese-ocr" -> "senlinuc/caffe_ocr"
"jiangxiluning/chinese-ocr" -> "jimmyleaf/ocr_tensorflow_cnn"
"jiangxiluning/chinese-ocr" -> "AstarLight/Lets_OCR"
"jiangxiluning/chinese-ocr" -> "ZJULearning/pixel_link"
"clovaai/spade" -> "clovaai/bros"
"yinchangchang/ocr_densenet" -> "Walleclipse/ChineseAddress_OCR"
"yinchangchang/ocr_densenet" -> "Sierkinhane/crnn_chinese_characters_rec"
"yinchangchang/ocr_densenet" -> "xiaomaxiao/keras_ocr"
"yinchangchang/ocr_densenet" -> "JarveeLee/SynthText_Chinese_version"
"yinchangchang/ocr_densenet" -> "bgshih/aster"
"yinchangchang/ocr_densenet" -> "YCG09/chinese_ocr"
"yinchangchang/ocr_densenet" -> "lvpengyuan/corner"
"yinchangchang/ocr_densenet" -> "xiaofengShi/CHINESE-OCR"
"yinchangchang/ocr_densenet" -> "AstarLight/CPS-OCR-Engine"
"yinchangchang/ocr_densenet" -> "chenjun2hao/Attention_ocr.pytorch"
"yinchangchang/ocr_densenet" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"yinchangchang/ocr_densenet" -> "liuheng92/OCR_EVALUATION"
"yinchangchang/ocr_densenet" -> "MalongTech/research-charnet"
"yinchangchang/ocr_densenet" -> "AstarLight/Lets_OCR"
"yinchangchang/ocr_densenet" -> "wang-tf/Chinese_OCR_synthetic_data"
"PaddlePaddle/VIMER" -> "jpWang/LiLT"
"PaddlePaddle/VIMER" -> "hikopensource/DAVAR-Lab-OCR"
"PaddlePaddle/VIMER" -> "PaddlePaddle/PASSL" ["e"=1]
"PaddlePaddle/VIMER" -> "cv-small-snails/Awesome-Table-Recognition"
"PaddlePaddle/VIMER" -> "wenwenyu/PICK-pytorch"
"PaddlePaddle/VIMER" -> "tommyMessi/tableImageParser_tx"
"PaddlePaddle/VIMER" -> "clovaai/spade"
"PaddlePaddle/VIMER" -> "Irene323/GFTE"
"PaddlePaddle/VIMER" -> "JiaquanYe/TableMASTER-mmocr"
"PaddlePaddle/VIMER" -> "shabie/docformer"
"PaddlePaddle/VIMER" -> "tstanislawek/awesome-document-understanding"
"PaddlePaddle/VIMER" -> "doc-analysis/DocBank"
"PaddlePaddle/VIMER" -> "shahrukhqasim/TIES-2.0"
"PaddlePaddle/VIMER" -> "Pay20Y/SEED"
"PaddlePaddle/VIMER" -> "HCIILAB/EPHOIE"
"tesseract-ocr/tessdata_fast" -> "tesseract-ocr/tessdata_best"
"tesseract-ocr/tessdata_fast" -> "tesseract-ocr/test"
"tesseract-ocr/tessdata_fast" -> "tesseract-ocr/tesstrain"
"tesseract-ocr/tessdata_fast" -> "tesseract-ocr/langdata_lstm"
"Bartzi/kiss" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Bartzi/kiss" -> "Alpaca07/dtr"
"Bartzi/kiss" -> "chenjun2hao/Bert_OCR.pytorch"
"Bartzi/kiss" -> "Wang-Tianwei/Decoupled-attention-network"
"Chuhanxx/FontAdaptor" -> "AutoML-4Paradigm/AutoSTR"
"Chuhanxx/FontAdaptor" -> "Pay20Y/SEED"
"Chuhanxx/FontAdaptor" -> "opconty/Transformer_STR"
"Chuhanxx/FontAdaptor" -> "jiangxiluning/MASTER-TF"
"Chuhanxx/FontAdaptor" -> "Wang-Tianwei/Decoupled-attention-network"
"Chuhanxx/FontAdaptor" -> "liuch37/sar-pytorch"
"Chuhanxx/FontAdaptor" -> "chenjun2hao/SRN.pytorch"
"GXYM/DRRG" -> "GXYM/TextBPN"
"GXYM/DRRG" -> "GXYM/TextPMs"
"GXYM/DRRG" -> "wangyuxin87/ContourNet"
"GXYM/DRRG" -> "Yuliang-Liu/bezier_curve_text_spotting"
"GXYM/DRRG" -> "GXYM/KPN"
"GXYM/DRRG" -> "GXYM/TextBPN-Plus-Plus"
"GXYM/DRRG" -> "Wang-Tianwei/Decoupled-attention-network"
"GXYM/DRRG" -> "GXYM/GloRe"
"GXYM/DRRG" -> "princewang1994/TextSnake.pytorch"
"GXYM/DRRG" -> "chenjun2hao/SRN.pytorch"
"GXYM/DRRG" -> "Yuliang-Liu/Box_Discretization_Network"
"GXYM/DRRG" -> "GXYM/GHM_Loss"
"GXYM/DRRG" -> "Pay20Y/SEED"
"GXYM/DRRG" -> "Megvii-CSG/MegReader"
"GXYM/DRRG" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"HCIILAB/EPHOIE" -> "applicaai/lambert"
"HCIILAB/EPHOIE" -> "beacandler/EATEN"
"HCIILAB/SCUT-EPT_Dataset_Release" -> "HCIILAB/SCUT-HCCDoc_Dataset_Release"
"HCIILAB/SCUT-EPT_Dataset_Release" -> "intel/handwritten-chinese-ocr-samples"
"HCIILAB/Scene-Text-Detection" -> "HCIILAB/Scene-Text-Recognition"
"HCIILAB/Scene-Text-Detection" -> "HCIILAB/Scene-Text-End2end"
"HCIILAB/Scene-Text-Detection" -> "Jyouhou/SceneTextPapers"
"HCIILAB/Scene-Text-Detection" -> "Yuliang-Liu/Box_Discretization_Network"
"HCIILAB/Scene-Text-Detection" -> "MalongTech/research-charnet"
"HCIILAB/Scene-Text-Detection" -> "MhLiao/DB"
"HCIILAB/Scene-Text-Detection" -> "cs-chan/Total-Text-Dataset"
"HCIILAB/Scene-Text-Detection" -> "WenmuZhou/PAN.pytorch"
"HCIILAB/Scene-Text-Detection" -> "Megvii-CSG/MegReader"
"HCIILAB/Scene-Text-Detection" -> "Yuliang-Liu/Curve-Text-Detector"
"HCIILAB/Scene-Text-Detection" -> "Yuliang-Liu/bezier_curve_text_spotting"
"HCIILAB/Scene-Text-Detection" -> "Wang-Tianwei/Decoupled-attention-network"
"HCIILAB/Scene-Text-Detection" -> "whai362/pan_pp.pytorch"
"HCIILAB/Scene-Text-Detection" -> "ayumiymk/aster.pytorch"
"HCIILAB/Scene-Text-Detection" -> "Canjie-Luo/MORAN_v2"
"HCIILAB/Scene-Text-Recognition" -> "HCIILAB/Scene-Text-Detection"
"HCIILAB/Scene-Text-Recognition" -> "HCIILAB/Scene-Text-End2end"
"HCIILAB/Scene-Text-Recognition" -> "ayumiymk/aster.pytorch"
"HCIILAB/Scene-Text-Recognition" -> "Wang-Tianwei/Decoupled-attention-network"
"HCIILAB/Scene-Text-Recognition" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"HCIILAB/Scene-Text-Recognition" -> "Canjie-Luo/MORAN_v2"
"HCIILAB/Scene-Text-Recognition" -> "Jyouhou/SceneTextPapers"
"HCIILAB/Scene-Text-Recognition" -> "Megvii-CSG/MegReader"
"HCIILAB/Scene-Text-Recognition" -> "MhLiao/MaskTextSpotterV3"
"HCIILAB/Scene-Text-Recognition" -> "MhLiao/DB"
"HCIILAB/Scene-Text-Recognition" -> "Yuliang-Liu/bezier_curve_text_spotting"
"HCIILAB/Scene-Text-Recognition" -> "whitelok/image-text-localization-recognition"
"HCIILAB/Scene-Text-Recognition" -> "MalongTech/research-charnet"
"HCIILAB/Scene-Text-Recognition" -> "cs-chan/Total-Text-Dataset"
"HCIILAB/Scene-Text-Recognition" -> "Yuliang-Liu/Box_Discretization_Network"
"HCIILAB/Scene-Text-Removal" -> "lcy0604/EraseNet"
"HCIILAB/Scene-Text-Removal" -> "HCIILAB/SCUT-EnsText"
"HCIILAB/Scene-Text-Removal" -> "neouyghur/One-stage-Mask-based-Scene-Text-Eraser"
"HCIILAB/Scene-Text-Removal" -> "youdao-ai/SRNet"
"HCIILAB/Scene-Text-Removal" -> "Yuliang-Liu/TIoU-metric"
"HCIILAB/Scene-Text-Removal" -> "ku21fan/STR-Fewer-Labels"
"HCIILAB/Scene-Text-Removal" -> "Niwhskal/SRNet"
"HCIILAB/Scene-Text-Removal" -> "lcy0604/CTRNet"
"Irene323/GFTE" -> "shahrukhqasim/TIES-2.0"
"Irene323/GFTE" -> "Academic-Hammer/SciTSR"
"Irene323/GFTE" -> "sachinraja13/TabStructNet"
"Irene323/GFTE" -> "ibm-aur-nlp/PubTabNet"
"Irene323/GFTE" -> "hassan-mahmood/TIES_DataGeneration"
"Irene323/GFTE" -> "tommyMessi/tableImageParser_tx"
"Irene323/GFTE" -> "cndplab-founder/ICDAR2019_cTDaR"
"Irene323/GFTE" -> "fireae/Split_Merge_table_recognition"
"Irene323/GFTE" -> "CharlesWu123/SPLERGE"
"Irene323/GFTE" -> "JiaquanYe/TableMASTER-mmocr"
"Irene323/GFTE" -> "mdv3101/CDeCNet"
"Irene323/GFTE" -> "xuewenyuan/TGRNet"
"Irene323/GFTE" -> "Rid7/Table-OCR"
"Irene323/GFTE" -> "hikopensource/DAVAR-Lab-OCR"
"Irene323/GFTE" -> "doc-analysis/TableBank"
"JiangKui007/jx_ocr" -> "lxj0276/OCRServer"
"JiaquanYe/TableMASTER-mmocr" -> "JiaquanYe/MASTER-mmocr"
"JiaquanYe/TableMASTER-mmocr" -> "wenwenyu/MASTER-pytorch"
"JiaquanYe/TableMASTER-mmocr" -> "hikopensource/DAVAR-Lab-OCR"
"JiaquanYe/TableMASTER-mmocr" -> "ibm-aur-nlp/PubTabNet"
"JiaquanYe/TableMASTER-mmocr" -> "cv-small-snails/Awesome-Table-Recognition"
"JiaquanYe/TableMASTER-mmocr" -> "tommyMessi/tableImageParser_tx"
"JiaquanYe/TableMASTER-mmocr" -> "tommyMessi/PST-table"
"JiaquanYe/TableMASTER-mmocr" -> "tommyMessi/remove-stamp"
"JiaquanYe/TableMASTER-mmocr" -> "xuewenyuan/TGRNet"
"JiaquanYe/TableMASTER-mmocr" -> "WenmuZhou/TableGeneration"
"JiaquanYe/TableMASTER-mmocr" -> "Irene323/GFTE"
"JiaquanYe/TableMASTER-mmocr" -> "Psarpei/Multi-Type-TD-TSR"
"JiaquanYe/TableMASTER-mmocr" -> "IBM/SynthTabNet"
"JiaquanYe/TableMASTER-mmocr" -> "pyxploiter/deep-splerge"
"JiaquanYe/TableMASTER-mmocr" -> "microsoft/table-transformer"
"MalongTech/research-charnet" -> "backtime92/CRAFT-Reimplementation"
"MalongTech/research-charnet" -> "Megvii-CSG/MegReader"
"MalongTech/research-charnet" -> "Yuliang-Liu/bezier_curve_text_spotting"
"MalongTech/research-charnet" -> "MhLiao/MaskTextSpotter"
"MalongTech/research-charnet" -> "Wang-Tianwei/Decoupled-attention-network"
"MalongTech/research-charnet" -> "zhang0jhon/AttentionOCR"
"MalongTech/research-charnet" -> "MhLiao/DB"
"MalongTech/research-charnet" -> "whai362/PSENet"
"MalongTech/research-charnet" -> "Canjie-Luo/MORAN_v2"
"MalongTech/research-charnet" -> "bgshih/aster"
"MalongTech/research-charnet" -> "HCIILAB/Scene-Text-Recognition"
"MalongTech/research-charnet" -> "WenmuZhou/PAN.pytorch"
"MalongTech/research-charnet" -> "summerlvsong/Aggregation-Cross-Entropy"
"MalongTech/research-charnet" -> "HCIILAB/Scene-Text-Detection"
"MalongTech/research-charnet" -> "jiangxiluning/FOTS.PyTorch"
"Megvii-CSG/MegReader" -> "summerlvsong/Aggregation-Cross-Entropy"
"Megvii-CSG/MegReader" -> "MalongTech/research-charnet"
"Megvii-CSG/MegReader" -> "Wang-Tianwei/Decoupled-attention-network"
"Megvii-CSG/MegReader" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Megvii-CSG/MegReader" -> "Canjie-Luo/Text-Image-Augmentation"
"Megvii-CSG/MegReader" -> "HCIILAB/Scene-Text-Recognition"
"Megvii-CSG/MegReader" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Megvii-CSG/MegReader" -> "Yuliang-Liu/Box_Discretization_Network"
"Megvii-CSG/MegReader" -> "Jyouhou/SceneTextPapers"
"Megvii-CSG/MegReader" -> "lvpengyuan/corner"
"Megvii-CSG/MegReader" -> "Canjie-Luo/MORAN_v2"
"Megvii-CSG/MegReader" -> "ayumiymk/aster.pytorch"
"Megvii-CSG/MegReader" -> "HCIILAB/Scene-Text-End2end"
"Megvii-CSG/MegReader" -> "MhLiao/DB"
"Megvii-CSG/MegReader" -> "RubanSeven/Text-Image-Augmentation-python"
"MhLiao/DB" -> "WenmuZhou/DBNet.pytorch"
"MhLiao/DB" -> "whai362/PSENet"
"MhLiao/DB" -> "clovaai/deep-text-recognition-benchmark"
"MhLiao/DB" -> "clovaai/CRAFT-pytorch"
"MhLiao/DB" -> "MhLiao/MaskTextSpotterV3"
"MhLiao/DB" -> "Sanster/text_renderer"
"MhLiao/DB" -> "zhang0jhon/AttentionOCR"
"MhLiao/DB" -> "WenmuZhou/OCR_DataSet"
"MhLiao/DB" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"MhLiao/DB" -> "ankush-me/SynthText"
"MhLiao/DB" -> "ayumiymk/aster.pytorch"
"MhLiao/DB" -> "HCIILAB/Scene-Text-Recognition"
"MhLiao/DB" -> "huoyijie/AdvancedEAST"
"MhLiao/DB" -> "meijieru/crnn.pytorch"
"MhLiao/DB" -> "Belval/TextRecognitionDataGenerator"
"Psarpei/Multi-Type-TD-TSR" -> "JiaquanYe/TableMASTER-mmocr"
"Psarpei/Multi-Type-TD-TSR" -> "cv-small-snails/Awesome-Table-Recognition"
"Psarpei/Multi-Type-TD-TSR" -> "mdv3101/CDeCNet"
"Psarpei/Multi-Type-TD-TSR" -> "phamquiluan/table-transformer"
"Psarpei/Multi-Type-TD-TSR" -> "abdoelsayed2016/TNCR_Dataset"
"Psarpei/Multi-Type-TD-TSR" -> "deepdoctection/deepdoctection"
"Psarpei/Multi-Type-TD-TSR" -> "sachinraja13/TabStructNet"
"Psarpei/Multi-Type-TD-TSR" -> "jainammm/TableNet"
"Psarpei/Multi-Type-TD-TSR" -> "microsoft/table-transformer"
"Psarpei/Multi-Type-TD-TSR" -> "ibm-aur-nlp/PubTabNet"
"Psarpei/Multi-Type-TD-TSR" -> "IBM/SynthTabNet"
"Psarpei/Multi-Type-TD-TSR" -> "WenmuZhou/TableGeneration"
"Psarpei/Multi-Type-TD-TSR" -> "MrZilinXiao/Hyper-Table-OCR"
"RuijieJ/pren" -> "wangyuxin87/VisionLAN"
"RuijieJ/pren" -> "chenjun2hao/SRN.pytorch"
"RuijieJ/pren" -> "FangShancheng/ABINet"
"SHI-Labs/Rethinking-Text-Segmentation" -> "yizhiwang96/TextLogoLayout"
"SHI-Labs/Rethinking-Text-Segmentation" -> "lcy0604/EraseNet"
"SHI-Labs/Rethinking-Text-Segmentation" -> "Canjie-Luo/Real-300K"
"SHI-Labs/Rethinking-Text-Segmentation" -> "xdxie/WordArt"
"SHI-Labs/Rethinking-Text-Segmentation" -> "lcy0604/CTRNet"
"SHI-Labs/Rethinking-Text-Segmentation" -> "ku21fan/STR-Fewer-Labels"
"SHI-Labs/Rethinking-Text-Segmentation" -> "GXYM/DRRG"
"SHI-Labs/Rethinking-Text-Segmentation" -> "clovaai/synthtiger"
"SHI-Labs/Rethinking-Text-Segmentation" -> "Chuhanxx/FontAdaptor"
"SHI-Labs/Rethinking-Text-Segmentation" -> "google-research-datasets/hiertext"
"SHI-Labs/Rethinking-Text-Segmentation" -> "Jyouhou/UnrealText"
"SHI-Labs/Rethinking-Text-Segmentation" -> "mlpc-ucsd/TESTR"
"SHI-Labs/Rethinking-Text-Segmentation" -> "Niwhskal/SRNet"
"SHI-Labs/Rethinking-Text-Segmentation" -> "Yuliang-Liu/Box_Discretization_Network"
"SHI-Labs/Rethinking-Text-Segmentation" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"STVIR/PMTD" -> "Yuliang-Liu/Box_Discretization_Network"
"STVIR/PMTD" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"STVIR/PMTD" -> "whai362/PSENet"
"STVIR/PMTD" -> "WenmuZhou/PAN.pytorch"
"STVIR/PMTD" -> "Yuliang-Liu/TIoU-metric"
"STVIR/PMTD" -> "summerlvsong/Aggregation-Cross-Entropy"
"STVIR/PMTD" -> "AirBernard/Scene-Text-Detection-with-SPCNET"
"STVIR/PMTD" -> "HCIILAB/DeRPN"
"STVIR/PMTD" -> "Yuliang-Liu/bezier_curve_text_spotting"
"STVIR/PMTD" -> "clovaai/TedEval"
"STVIR/PMTD" -> "MichalBusta/E2E-MLT"
"STVIR/PMTD" -> "Yuliang-Liu/Curve-Text-Detector"
"STVIR/PMTD" -> "Megvii-CSG/MegReader"
"STVIR/PMTD" -> "princewang1994/TextSnake.pytorch"
"STVIR/PMTD" -> "MalongTech/research-charnet"
"Vipermdl/OCR_detection_IC15" -> "xieyufei1993/FOTS"
"Vipermdl/OCR_detection_IC15" -> "novioleo/FOTS"
"Vipermdl/OCR_detection_IC15" -> "Wovchena/text-detection-fots.pytorch"
"Vipermdl/OCR_detection_IC15" -> "jiangxiluning/FOTS.PyTorch"
"Vipermdl/OCR_detection_IC15" -> "MagicianQi/FOTS_two_stage"
"WenmuZhou/PAN.pytorch" -> "WenmuZhou/PSENet.pytorch"
"WenmuZhou/PAN.pytorch" -> "WenmuZhou/DBNet.pytorch"
"WenmuZhou/PAN.pytorch" -> "whai362/PSENet"
"WenmuZhou/PAN.pytorch" -> "whai362/pan_pp.pytorch"
"WenmuZhou/PAN.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"WenmuZhou/PAN.pytorch" -> "Canjie-Luo/MORAN_v2"
"WenmuZhou/PAN.pytorch" -> "MhLiao/DB"
"WenmuZhou/PAN.pytorch" -> "lvpengyuan/corner"
"WenmuZhou/PAN.pytorch" -> "ayumiymk/aster.pytorch"
"WenmuZhou/PAN.pytorch" -> "backtime92/CRAFT-Reimplementation"
"WenmuZhou/PAN.pytorch" -> "MalongTech/research-charnet"
"WenmuZhou/PAN.pytorch" -> "liuheng92/tensorflow_PSENet"
"WenmuZhou/PAN.pytorch" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"WenmuZhou/PAN.pytorch" -> "Megvii-CSG/MegReader"
"WenmuZhou/PAN.pytorch" -> "Wang-Tianwei/Decoupled-attention-network"
"Wovchena/text-detection-fots.pytorch" -> "chenjun2hao/FOTS.pytorch"
"Wovchena/text-detection-fots.pytorch" -> "Vipermdl/OCR_detection_IC15"
"Wovchena/text-detection-fots.pytorch" -> "bityigoss/mtl-text-recognition"
"Wovchena/text-detection-fots.pytorch" -> "MauritsBleeker/Bi-STET"
"Yuliang-Liu/Curve-Text-Detector" -> "cs-chan/Total-Text-Dataset"
"Yuliang-Liu/Curve-Text-Detector" -> "whai362/PSENet"
"Yuliang-Liu/Curve-Text-Detector" -> "princewang1994/TextSnake.pytorch"
"Yuliang-Liu/Curve-Text-Detector" -> "lvpengyuan/masktextspotter.caffe2"
"Yuliang-Liu/Curve-Text-Detector" -> "Yuliang-Liu/TIoU-metric"
"Yuliang-Liu/Curve-Text-Detector" -> "ankush-me/SynthText"
"Yuliang-Liu/Curve-Text-Detector" -> "Canjie-Luo/MORAN_v2"
"Yuliang-Liu/Curve-Text-Detector" -> "Yuliang-Liu/bezier_curve_text_spotting"
"Yuliang-Liu/Curve-Text-Detector" -> "ZJULearning/pixel_link"
"Yuliang-Liu/Curve-Text-Detector" -> "Jyouhou/SceneTextPapers"
"Yuliang-Liu/Curve-Text-Detector" -> "JarveeLee/SynthText_Chinese_version"
"Yuliang-Liu/Curve-Text-Detector" -> "bgshih/aster"
"Yuliang-Liu/Curve-Text-Detector" -> "jiangxiluning/FOTS.PyTorch"
"Yuliang-Liu/Curve-Text-Detector" -> "HCIILAB/Scene-Text-Detection"
"Yuliang-Liu/Curve-Text-Detector" -> "summerlvsong/Aggregation-Cross-Entropy"
"adeline-cs/GTR" -> "simplify23/CDistNet"
"adeline-cs/GTR" -> "ymy-k/DPText-DETR"
"adeline-cs/GTR" -> "ViTAE-Transformer/DeepSolo"
"adeline-cs/GTR" -> "byeonghu-na/MATRN"
"adeline-cs/GTR" -> "WHU-ZQH/FSAM4PLM" ["e"=1]
"adeline-cs/GTR" -> "wangbing1416/C3DA" ["e"=1]
"adeline-cs/GTR" -> "DREAMXFAR/FCL-Net" ["e"=1]
"adeline-cs/GTR" -> "baudm/parseq"
"applicaai/lambert" -> "ruifcruz/sroie-on-layoutlm"
"applicaai/lambert" -> "HCIILAB/EPHOIE"
"autonise/CRAFT-Remade" -> "backtime92/CRAFT-Reimplementation"
"autonise/CRAFT-Remade" -> "RubanSeven/CRAFT_keras"
"autonise/CRAFT-Remade" -> "guruL/Character-Region-Awareness-for-Text-Detection-"
"autonise/CRAFT-Remade" -> "brooklyn1900/CRAFT_pytorch"
"autonise/CRAFT-Remade" -> "Yuliang-Liu/Box_Discretization_Network"
"backtime92/CRAFT-Reimplementation" -> "autonise/CRAFT-Remade"
"backtime92/CRAFT-Reimplementation" -> "RubanSeven/CRAFT_keras"
"backtime92/CRAFT-Reimplementation" -> "MalongTech/research-charnet"
"backtime92/CRAFT-Reimplementation" -> "brooklyn1900/CRAFT_pytorch"
"backtime92/CRAFT-Reimplementation" -> "clovaai/CRAFT-pytorch"
"backtime92/CRAFT-Reimplementation" -> "WenmuZhou/PAN.pytorch"
"backtime92/CRAFT-Reimplementation" -> "MhLiao/DB"
"backtime92/CRAFT-Reimplementation" -> "ayumiymk/aster.pytorch"
"backtime92/CRAFT-Reimplementation" -> "Yuliang-Liu/Box_Discretization_Network"
"backtime92/CRAFT-Reimplementation" -> "WenmuZhou/DBNet.pytorch"
"backtime92/CRAFT-Reimplementation" -> "guruL/Character-Region-Awareness-for-Text-Detection-"
"backtime92/CRAFT-Reimplementation" -> "Yuliang-Liu/bezier_curve_text_spotting"
"backtime92/CRAFT-Reimplementation" -> "lvpengyuan/corner"
"backtime92/CRAFT-Reimplementation" -> "Wang-Tianwei/Decoupled-attention-network"
"backtime92/CRAFT-Reimplementation" -> "MhLiao/MaskTextSpotter"
"chenjun2hao/Bert_OCR.pytorch" -> "Wang-Tianwei/Decoupled-attention-network"
"chenjun2hao/Bert_OCR.pytorch" -> "chenjun2hao/SRN.pytorch"
"chenjun2hao/Bert_OCR.pytorch" -> "opconty/Transformer_STR"
"chenjun2hao/Bert_OCR.pytorch" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"chenjun2hao/Bert_OCR.pytorch" -> "Pay20Y/SAR_TF"
"chenjun2hao/Bert_OCR.pytorch" -> "Bartzi/kiss"
"chenjun2hao/Bert_OCR.pytorch" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"clovaai/CLEval" -> "clovaai/TedEval"
"clovaai/CLEval" -> "clovaai/synthtiger"
"clovaai/CLEval" -> "clovaai/dmfont" ["e"=1]
"clovaai/CLEval" -> "clovaai/SATRN"
"clovaai/CLEval" -> "clovaai/cord"
"clovaai/CLEval" -> "ku21fan/STR-Fewer-Labels"
"clovaai/TedEval" -> "clovaai/CLEval"
"clovaai/TedEval" -> "liuheng92/OCR_EVALUATION"
"clovaai/TedEval" -> "STVIR/PMTD"
"clovaai/TedEval" -> "clovaai/dmfont" ["e"=1]
"clovaai/TedEval" -> "clovaai/SATRN"
"clovaai/bros" -> "clovaai/spade"
"clovaai/bros" -> "clovaai/webvicob"
"clovaai/bros" -> "jpWang/LiLT"
"clovaai/cord" -> "beacandler/EATEN"
"clovaai/cord" -> "HCIILAB/EPHOIE"
"clovaai/cord" -> "clovaai/CLEval"
"clovaai/cord" -> "wenwenyu/PICK-pytorch"
"clovaai/cord" -> "doc-analysis/DocBank"
"clovaai/cord" -> "clovaai/bros"
"clovaai/cord" -> "zzzDavid/ICDAR-2019-SROIE"
"clovaai/cord" -> "ibm-aur-nlp/PubTabNet"
"clovaai/cord" -> "applicaai/lambert"
"clovaai/cord" -> "doc-analysis/XFUND"
"clovaai/cord" -> "applicaai/kleister-nda"
"clovaai/cord" -> "ruifcruz/sroie-on-layoutlm"
"clovaai/cord" -> "wangwen-whu/WTW-Dataset"
"clovaai/cord" -> "google-research-datasets/hiertext"
"clovaai/cord" -> "ku21fan/STR-Fewer-Labels"
"cndplab-founder/ICDAR2019_cTDaR" -> "cndplab-founder/ctdar_measurement_tool"
"cndplab-founder/ICDAR2019_cTDaR" -> "ibm-aur-nlp/PubTabNet"
"cndplab-founder/ICDAR2019_cTDaR" -> "shahrukhqasim/TIES-2.0"
"cndplab-founder/ICDAR2019_cTDaR" -> "Irene323/GFTE"
"cndplab-founder/ICDAR2019_cTDaR" -> "Academic-Hammer/SciTSR"
"cndplab-founder/ICDAR2019_cTDaR" -> "sgrpanchal31/table-detection-dataset"
"cndplab-founder/ICDAR2019_cTDaR" -> "weidafeng/TableCell"
"cndplab-founder/ICDAR2019_cTDaR" -> "xuewenyuan/TGRNet"
"cndplab-founder/ICDAR2019_cTDaR" -> "sachinraja13/TabStructNet"
"cndplab-founder/ICDAR2019_cTDaR" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"doc-analysis/DocBank" -> "ibm-aur-nlp/PubLayNet"
"doc-analysis/DocBank" -> "doc-analysis/TableBank"
"doc-analysis/DocBank" -> "wenwenyu/PICK-pytorch"
"doc-analysis/DocBank" -> "BobLd/DocumentLayoutAnalysis"
"doc-analysis/DocBank" -> "ibm-aur-nlp/PubTabNet"
"doc-analysis/DocBank" -> "shabie/docformer"
"doc-analysis/DocBank" -> "HCIILAB/EPHOIE"
"doc-analysis/DocBank" -> "clovaai/cord"
"doc-analysis/DocBank" -> "phamquiluan/PubLayNet"
"doc-analysis/DocBank" -> "applicaai/lambert"
"doc-analysis/DocBank" -> "hpanwar08/detectron2"
"doc-analysis/DocBank" -> "Academic-Hammer/SciTSR"
"doc-analysis/DocBank" -> "tstanislawek/awesome-document-understanding"
"doc-analysis/DocBank" -> "cvlab-stonybrook/DewarpNet"
"doc-analysis/DocBank" -> "microsoft/table-transformer"
"facebookresearch/IMGUR5K-Handwriting-Dataset" -> "clovaai/synthtiger"
"fh2019ustc/DocTr" -> "fh2019ustc/Awesome-Document-Image-Rectification"
"fh2019ustc/DocTr" -> "fh2019ustc/DocScanner"
"fh2019ustc/DocTr" -> "cvlab-stonybrook/PaperEdge"
"fh2019ustc/DocTr" -> "cvlab-stonybrook/DewarpNet"
"fh2019ustc/DocTr" -> "fh2019ustc/DocGeoNet"
"fh2019ustc/DocTr" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"fh2019ustc/DocTr" -> "fh2019ustc/DocTr-Plus"
"fh2019ustc/DocTr" -> "xiaoyu258/DocProj"
"fh2019ustc/DocTr" -> "DVLP-CMATERJU/RectiNet"
"fh2019ustc/DocTr" -> "gwxie/Document-Dewarping-with-Control-Points"
"fh2019ustc/DocTr" -> "hikopensource/DAVAR-Lab-OCR"
"fh2019ustc/DocTr" -> "cvlab-stonybrook/doc3D-dataset"
"fh2019ustc/DocTr" -> "roatienza/deep-text-recognition-benchmark"
"fh2019ustc/DocTr" -> "google-research-datasets/hiertext"
"fireae/Split_Merge_table_recognition" -> "pyxploiter/deep-splerge"
"frotms/PaddleOCR2Pytorch" -> "WenmuZhou/PytorchOCR"
"frotms/PaddleOCR2Pytorch" -> "BADBADBADBOY/pytorchOCR"
"frotms/PaddleOCR2Pytorch" -> "WenmuZhou/OCR_DataSet"
"frotms/PaddleOCR2Pytorch" -> "whai362/pan_pp.pytorch"
"frotms/PaddleOCR2Pytorch" -> "hikopensource/DAVAR-Lab-OCR"
"frotms/PaddleOCR2Pytorch" -> "Sanster/text_renderer"
"frotms/PaddleOCR2Pytorch" -> "FeiGeChuanShu/ncnn_paddleocr" ["e"=1]
"frotms/PaddleOCR2Pytorch" -> "WenmuZhou/DBNet.pytorch"
"frotms/PaddleOCR2Pytorch" -> "Media-Smart/vedastr"
"frotms/PaddleOCR2Pytorch" -> "oh-my-ocr/text_renderer"
"frotms/PaddleOCR2Pytorch" -> "wenwenyu/MASTER-pytorch"
"frotms/PaddleOCR2Pytorch" -> "MhLiao/DB"
"frotms/PaddleOCR2Pytorch" -> "MhLiao/MaskTextSpotterV3"
"frotms/PaddleOCR2Pytorch" -> "FudanVI/benchmarking-chinese-text-recognition"
"frotms/PaddleOCR2Pytorch" -> "novioleo/Savior"
"google-research-datasets/hiertext" -> "mlpc-ucsd/TESTR"
"google-research-datasets/hiertext" -> "ku21fan/STR-Fewer-Labels"
"google-research-datasets/hiertext" -> "mxin262/SwinTextSpotter"
"google-research-datasets/hiertext" -> "xdxie/WordArt"
"google-research-datasets/hiertext" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"google-research-datasets/hiertext" -> "Canjie-Luo/Real-300K"
"google-research-datasets/hiertext" -> "shannanyinxiang/SPTS"
"google-research-datasets/hiertext" -> "Yuliang-Liu/SPTSv2"
"google-research-datasets/hiertext" -> "wp03052/MATRN"
"google-research-datasets/hiertext" -> "AlibabaResearch/AdvancedLiterateMachinery"
"google-research/pix2struct" -> "clovaai/webvicob"
"google-research/pix2struct" -> "vis-nlp/ChartQA"
"google-research/pix2struct" -> "microsoft/UDOP"
"huanglu20124/invoice" -> "xuwenxue000/PJ_PREDICT_IMG"
"ibm-aur-nlp/PubTabNet" -> "ibm-aur-nlp/PubLayNet"
"ibm-aur-nlp/PubTabNet" -> "shahrukhqasim/TIES-2.0"
"ibm-aur-nlp/PubTabNet" -> "tommyMessi/tableImageParser_tx"
"ibm-aur-nlp/PubTabNet" -> "JiaquanYe/TableMASTER-mmocr"
"ibm-aur-nlp/PubTabNet" -> "cndplab-founder/ICDAR2019_cTDaR"
"ibm-aur-nlp/PubTabNet" -> "Academic-Hammer/SciTSR"
"ibm-aur-nlp/PubTabNet" -> "Irene323/GFTE"
"ibm-aur-nlp/PubTabNet" -> "hassan-mahmood/TIES_DataGeneration"
"ibm-aur-nlp/PubTabNet" -> "hikopensource/DAVAR-Lab-OCR"
"ibm-aur-nlp/PubTabNet" -> "wenwenyu/MASTER-pytorch"
"ibm-aur-nlp/PubTabNet" -> "sachinraja13/TabStructNet"
"ibm-aur-nlp/PubTabNet" -> "doc-analysis/TableBank"
"ibm-aur-nlp/PubTabNet" -> "CharlesWu123/SPLERGE"
"ibm-aur-nlp/PubTabNet" -> "DevashishPrasad/CascadeTabNet"
"ibm-aur-nlp/PubTabNet" -> "cv-small-snails/Awesome-Table-Recognition"
"limengyang1992/seq2seq-layout-analysis" -> "wenwenyu/MASTER-pytorch"
"liuhu-bigeye/enctc.crnn" -> "summerlvsong/Aggregation-Cross-Entropy"
"liuhu-bigeye/enctc.crnn" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"liuhu-bigeye/enctc.crnn" -> "Megvii-CSG/MegReader"
"lvpengyuan/corner" -> "bgshih/aster"
"lvpengyuan/corner" -> "ayumiymk/aster.pytorch"
"lvpengyuan/corner" -> "WenmuZhou/PSENet.pytorch"
"lvpengyuan/corner" -> "whai362/PSENet"
"lvpengyuan/corner" -> "Megvii-CSG/MegReader"
"lvpengyuan/corner" -> "WenmuZhou/PAN.pytorch"
"lvpengyuan/corner" -> "Wang-Tianwei/Decoupled-attention-network"
"lvpengyuan/corner" -> "MhLiao/MaskTextSpotter"
"lvpengyuan/corner" -> "jiangxiluning/FOTS.PyTorch"
"lvpengyuan/corner" -> "Yuliang-Liu/Box_Discretization_Network"
"lvpengyuan/corner" -> "MalongTech/research-charnet"
"lvpengyuan/corner" -> "ZJULearning/pixel_link"
"lvpengyuan/corner" -> "princewang1994/TextSnake.pytorch"
"lvpengyuan/corner" -> "lvpengyuan/masktextspotter.caffe2"
"lvpengyuan/corner" -> "backtime92/CRAFT-Reimplementation"
"mhashas/Document-Image-Unwarping-pytorch" -> "teresasun/docUnet.pytorch"
"mhashas/Document-Image-Unwarping-pytorch" -> "wuleiaty/DocUNet"
"mhashas/Document-Image-Unwarping-pytorch" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"mindee/doctr" -> "open-mmlab/mmocr"
"mindee/doctr" -> "tstanislawek/awesome-document-understanding"
"mindee/doctr" -> "clovaai/donut"
"mindee/doctr" -> "Layout-Parser/layout-parser"
"mindee/doctr" -> "DevashishPrasad/CascadeTabNet"
"mindee/doctr" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"mindee/doctr" -> "hikopensource/DAVAR-Lab-OCR"
"mindee/doctr" -> "Belval/TextRecognitionDataGenerator"
"mindee/doctr" -> "zacharywhitley/awesome-ocr"
"mindee/doctr" -> "impira/docquery"
"mindee/doctr" -> "wenwenyu/PICK-pytorch"
"mindee/doctr" -> "deepdoctection/deepdoctection"
"mindee/doctr" -> "neuml/txtai" ["e"=1]
"mindee/doctr" -> "microsoft/table-transformer"
"mindee/doctr" -> "faustomorales/keras-ocr"
"mxin262/SwinTextSpotter" -> "mlpc-ucsd/TESTR"
"mxin262/SwinTextSpotter" -> "shannanyinxiang/SPTS"
"mxin262/SwinTextSpotter" -> "google-research-datasets/hiertext"
"mxin262/SwinTextSpotter" -> "ku21fan/STR-Fewer-Labels"
"mxin262/SwinTextSpotter" -> "wangyuxin87/VisionLAN"
"mxin262/SwinTextSpotter" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"mxin262/SwinTextSpotter" -> "xdxie/WordArt"
"mxin262/SwinTextSpotter" -> "whai362/pan_pp.pytorch"
"mxin262/SwinTextSpotter" -> "FangShancheng/ABINet"
"mxin262/SwinTextSpotter" -> "amazon-research/glass-text-spotting"
"mxin262/SwinTextSpotter" -> "yeungchenwa/OCR-SAM"
"mxin262/SwinTextSpotter" -> "Yuliang-Liu/SPTSv2"
"mxin262/SwinTextSpotter" -> "wenwenyu/TCM"
"mxin262/SwinTextSpotter" -> "ymy-k/DPText-DETR"
"opconty/Transformer_STR" -> "fengxinjie/Transformer-OCR"
"opconty/Transformer_STR" -> "Wang-Tianwei/Decoupled-attention-network"
"opconty/Transformer_STR" -> "Pay20Y/SEED"
"opconty/Transformer_STR" -> "chenjun2hao/Bert_OCR.pytorch"
"opconty/Transformer_STR" -> "chenjun2hao/SRN.pytorch"
"opconty/Transformer_STR" -> "clovaai/SATRN"
"opconty/Transformer_STR" -> "Chuhanxx/FontAdaptor"
"opconty/Transformer_STR" -> "ku21fan/STR-Fewer-Labels"
"opconty/Transformer_STR" -> "Canjie-Luo/Text-Image-Augmentation"
"opconty/Transformer_STR" -> "RubanSeven/Text-Image-Augmentation-python"
"opconty/Transformer_STR" -> "AutoML-4Paradigm/AutoSTR"
"opconty/Transformer_STR" -> "JasonBoy1/TextZoom"
"opconty/Transformer_STR" -> "Media-Smart/vedastr"
"opconty/Transformer_STR" -> "summerlvsong/Aggregation-Cross-Entropy"
"opconty/Transformer_STR" -> "Megvii-CSG/MegReader"
"rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning" -> "mawanda-jun/TableTrainNet"
"rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning" -> "shahrukhqasim/TIES-2.0"
"sachinraja13/TabStructNet" -> "Irene323/GFTE"
"sachinraja13/TabStructNet" -> "mdv3101/CDeCNet"
"sachinraja13/TabStructNet" -> "fireae/Split_Merge_table_recognition"
"sachinraja13/TabStructNet" -> "ibm-aur-nlp/PubTabNet"
"sachinraja13/TabStructNet" -> "jainammm/TableNet"
"sachinraja13/TabStructNet" -> "shahrukhqasim/TIES-2.0"
"sachinraja13/TabStructNet" -> "tamirhassan/dataset-tools"
"sachinraja13/TabStructNet" -> "Academic-Hammer/SciTSR"
"shahrukhqasim/TIES-2.0" -> "hassan-mahmood/TIES_DataGeneration"
"shahrukhqasim/TIES-2.0" -> "ibm-aur-nlp/PubTabNet"
"shahrukhqasim/TIES-2.0" -> "Irene323/GFTE"
"shahrukhqasim/TIES-2.0" -> "tommyMessi/tableImageParser_tx"
"shahrukhqasim/TIES-2.0" -> "Academic-Hammer/SciTSR"
"shahrukhqasim/TIES-2.0" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"shahrukhqasim/TIES-2.0" -> "cndplab-founder/ICDAR2019_cTDaR"
"shahrukhqasim/TIES-2.0" -> "doc-analysis/TableBank"
"shahrukhqasim/TIES-2.0" -> "CharlesWu123/SPLERGE"
"shahrukhqasim/TIES-2.0" -> "jkiesele/caloGraphNN"
"shahrukhqasim/TIES-2.0" -> "ibm-aur-nlp/PubLayNet"
"shahrukhqasim/TIES-2.0" -> "sachinraja13/TabStructNet"
"shahrukhqasim/TIES-2.0" -> "wenwenyu/PICK-pytorch"
"shahrukhqasim/TIES-2.0" -> "JiaquanYe/TableMASTER-mmocr"
"shahrukhqasim/TIES-2.0" -> "mdv3101/CDeCNet"
"tiantian91091317/OCR-Corrector" -> "tommyMessi/crnn_ctc-centerloss"
"tiantian91091317/OCR-Corrector" -> "WenmuZhou/OCR_DataSet"
"tiantian91091317/OCR-Corrector" -> "tommyMessi/tableImageParser_tx"
"tiantian91091317/OCR-Corrector" -> "wenwenyu/PICK-pytorch"
"tiantian91091317/OCR-Corrector" -> "chineseocr/table-ocr"
"tiantian91091317/OCR-Corrector" -> "hikopensource/DAVAR-Lab-OCR"
"tiantian91091317/OCR-Corrector" -> "Canjie-Luo/Text-Image-Augmentation"
"tiantian91091317/OCR-Corrector" -> "wenwenyu/MASTER-pytorch"
"tiantian91091317/OCR-Corrector" -> "Rid7/Table-OCR"
"tiantian91091317/OCR-Corrector" -> "Wang-Tianwei/Decoupled-attention-network"
"tiantian91091317/OCR-Corrector" -> "iqiyi/FASPell" ["e"=1]
"tiantian91091317/OCR-Corrector" -> "summerlvsong/Aggregation-Cross-Entropy"
"tiantian91091317/OCR-Corrector" -> "Megvii-CSG/MegReader"
"tiantian91091317/OCR-Corrector" -> "Sanster/text_renderer"
"tiantian91091317/OCR-Corrector" -> "WenmuZhou/DBNet.pytorch"
"tommyMessi/DocumentPhotoCorrection" -> "tommyMessi/waveCorrection"
"tommyMessi/crnn_ctc-centerloss" -> "tommyMessi/tableImageParser_tx"
"tommyMessi/crnn_ctc-centerloss" -> "tiantian91091317/OCR-Corrector"
"tommyMessi/crnn_ctc-centerloss" -> "tommyMessi/remove-stamp"
"tommyMessi/crnn_ctc-centerloss" -> "wenwenyu/MASTER-pytorch"
"tommyMessi/crnn_ctc-centerloss" -> "RubanSeven/Text-Image-Augmentation-python"
"tommyMessi/crnn_ctc-centerloss" -> "Canjie-Luo/Text-Image-Augmentation"
"tommyMessi/crnn_ctc-centerloss" -> "wenwenyu/PICK-pytorch"
"tommyMessi/crnn_ctc-centerloss" -> "BADBADBADBOY/pytorchOCR"
"tommyMessi/crnn_ctc-centerloss" -> "WenmuZhou/OCR_DataSet"
"tommyMessi/crnn_ctc-centerloss" -> "bityigoss/mtl-text-recognition"
"tommyMessi/crnn_ctc-centerloss" -> "Wang-Tianwei/Decoupled-attention-network"
"tommyMessi/crnn_ctc-centerloss" -> "Chuhanxx/FontAdaptor"
"tommyMessi/crnn_ctc-centerloss" -> "lvpengyuan/corner"
"tommyMessi/remove-stamp" -> "tommyMessi/PST-table"
"tommyMessi/remove-stamp" -> "tommyMessi/tableImageParser_tx"
"tommyMessi/remove-stamp" -> "tommyMessi/waveCorrection"
"tommyMessi/remove-stamp" -> "tommyMessi/DocumentPhotoCorrection"
"tommyMessi/remove-stamp" -> "tommyMessi/crnn_ctc-centerloss"
"tommyMessi/remove-stamp" -> "JiaquanYe/MASTER-mmocr"
"tommyMessi/remove-stamp" -> "JiaquanYe/TableMASTER-mmocr"
"tommyMessi/remove-stamp" -> "limengyang1992/seq2seq-layout-analysis"
"tommyMessi/remove-stamp" -> "chibohe/text_recognition_toolbox"
"tommyMessi/remove-stamp" -> "bigcash/awesome-ai-list-guide"
"vsymbol/CUTIE" -> "dhavalpotdar/Graph-Convolution-on-Structured-Documents"
"vsymbol/CUTIE" -> "antoinedelplace/Chargrid"
"vsymbol/CUTIE" -> "zzzDavid/ICDAR-2019-SROIE"
"vsymbol/CUTIE" -> "vincentAGNES/OCR-Extract-total-amount-TTC-of-receipts"
"wangyuxin87/ContourNet" -> "wangyuxin87/R-Net"
"wangyuxin87/ContourNet" -> "GXYM/DRRG"
"wangyuxin87/ContourNet" -> "Yuliang-Liu/bezier_curve_text_spotting"
"wangyuxin87/ContourNet" -> "Pay20Y/SEED"
"wangyuxin87/ContourNet" -> "chenjun2hao/SRN.pytorch"
"wangyuxin87/ContourNet" -> "whai362/pan_pp.pytorch"
"wangyuxin87/ContourNet" -> "Wang-Tianwei/Decoupled-attention-network"
"wangyuxin87/ContourNet" -> "MhLiao/MaskTextSpotterV3"
"wangyuxin87/ContourNet" -> "lvpengyuan/corner"
"wangyuxin87/ContourNet" -> "ku21fan/STR-Fewer-Labels"
"wangyuxin87/ContourNet" -> "Yuliang-Liu/Box_Discretization_Network"
"wangyuxin87/ContourNet" -> "chenjun2hao/Bert_OCR.pytorch"
"wangyuxin87/ContourNet" -> "Chuhanxx/FontAdaptor"
"wangyuxin87/ContourNet" -> "JasonBoy1/TextZoom"
"wangyuxin87/ContourNet" -> "opconty/Transformer_STR"
"wangyuxin87/VisionLAN" -> "RuijieJ/pren"
"weijiawu/TransVTSpotter" -> "weijiawu/TransDETR"
"weijiawu/TransVTSpotter" -> "weijiawu/BOVText-Benchmark"
"wenwenyu/PICK-pytorch" -> "wenwenyu/MASTER-pytorch"
"wenwenyu/PICK-pytorch" -> "hikopensource/DAVAR-Lab-OCR"
"wenwenyu/PICK-pytorch" -> "doc-analysis/DocBank"
"wenwenyu/PICK-pytorch" -> "tiantian91091317/OCR-Corrector"
"wenwenyu/PICK-pytorch" -> "tommyMessi/crnn_ctc-centerloss"
"wenwenyu/PICK-pytorch" -> "shahrukhqasim/TIES-2.0"
"wenwenyu/PICK-pytorch" -> "beacandler/EATEN"
"wenwenyu/PICK-pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"wenwenyu/PICK-pytorch" -> "ibm-aur-nlp/PubTabNet"
"wenwenyu/PICK-pytorch" -> "tstanislawek/awesome-document-understanding"
"wenwenyu/PICK-pytorch" -> "chineseocr/table-ocr"
"wenwenyu/PICK-pytorch" -> "tommyMessi/tableImageParser_tx"
"wenwenyu/PICK-pytorch" -> "ibm-aur-nlp/PubLayNet"
"wenwenyu/PICK-pytorch" -> "jpWang/LiLT"
"wenwenyu/PICK-pytorch" -> "Canjie-Luo/Text-Image-Augmentation"
"whai362/TDA-ReCTS" -> "whai362/AE_TextSpotter"
"xieyufei1993/InceptText-Tensorflow" -> "lvpengyuan/masktextspotter.caffe2"
"xieyufei1993/InceptText-Tensorflow" -> "Shun14/TextBoxes_plusplus_Tensorflow"
"xieyufei1993/InceptText-Tensorflow" -> "xieyufei1993/FOTS"
"xieyufei1993/InceptText-Tensorflow" -> "UpCoder/ICPR_TextDection"
"xieyufei1993/InceptText-Tensorflow" -> "Vipermdl/OCR_detection_IC15"
"yflv-yanxia/scene_text" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"yflv-yanxia/scene_text" -> "MhLiao/SynthText3D"
"ying09/TextFuseNet" -> "whai362/pan_pp.pytorch"
"ying09/TextFuseNet" -> "msight-tech/research-charnet"
"ying09/TextFuseNet" -> "MhLiao/MaskTextSpotterV3"
"ying09/TextFuseNet" -> "adeline-cs/GTR"
"ying09/TextFuseNet" -> "wangyuxin87/ContourNet"
"ying09/TextFuseNet" -> "MhLiao/DB"
"ying09/TextFuseNet" -> "HCIILAB/Scene-Text-Detection"
"ying09/TextFuseNet" -> "HCIILAB/Scene-Text-Recognition"
"ying09/TextFuseNet" -> "WenmuZhou/DBNet.pytorch"
"ying09/TextFuseNet" -> "backtime92/CRAFT-Reimplementation"
"ying09/TextFuseNet" -> "Yuliang-Liu/Box_Discretization_Network"
"ying09/TextFuseNet" -> "Media-Smart/vedastr"
"ying09/TextFuseNet" -> "FangShancheng/ABINet"
"ying09/TextFuseNet" -> "opconty/Transformer_STR"
"ying09/TextFuseNet" -> "ymy-k/DPText-DETR"
"yu20103983/FOTS" -> "Pay20Y/FOTS_TF"
"yuantailing/ctw-baseline" -> "JarveeLee/SynthText_Chinese_version"
"yuantailing/ctw-baseline" -> "lvpengyuan/masktextspotter.caffe2"
"yuantailing/ctw-baseline" -> "wang-tf/Chinese_OCR_synthetic_data"
"yuantailing/ctw-baseline" -> "whai362/PSENet"
"yuantailing/ctw-baseline" -> "Jyouhou/SceneTextPapers"
"yuantailing/ctw-baseline" -> "Canjie-Luo/MORAN_v2"
"yuantailing/ctw-baseline" -> "tonghe90/textspotter"
"yuantailing/ctw-baseline" -> "bgshih/aster"
"yuantailing/ctw-baseline" -> "dengdan/seglink"
"yuantailing/ctw-baseline" -> "Yuliang-Liu/Curve-Text-Detector"
"yuantailing/ctw-baseline" -> "MichalBusta/E2E-MLT"
"yuantailing/ctw-baseline" -> "jiangxiluning/FOTS.PyTorch"
"yuantailing/ctw-baseline" -> "xieyufei1993/InceptText-Tensorflow"
"yuantailing/ctw-baseline" -> "Sanster/text_renderer"
"yuantailing/ctw-baseline" -> "MhLiao/TextBoxes_plusplus"
"zcswdt/OCR_ICDAR_label_revise" -> "WenmuZhou/OCR_DataSet"
"zcswdt/OCR_ICDAR_label_revise" -> "whai362/pan_pp.pytorch"
"zcswdt/OCR_ICDAR_label_revise" -> "zcswdt/Color_OCR_image_generator"
"zcswdt/OCR_ICDAR_label_revise" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"zcswdt/OCR_ICDAR_label_revise" -> "TianzhongSong/awesome-SynthText"
"zcswdt/OCR_ICDAR_label_revise" -> "MhLiao/MaskTextSpotterV3"
"zcswdt/OCR_ICDAR_label_revise" -> "wenwenyu/MASTER-pytorch"
"zcswdt/OCR_ICDAR_label_revise" -> "FudanVI/benchmarking-chinese-text-recognition"
"zcswdt/OCR_ICDAR_label_revise" -> "WenmuZhou/DBNet.pytorch"
"zcswdt/OCR_ICDAR_label_revise" -> "yizt/crnn.pytorch"
"zzzDavid/ICDAR-2019-SROIE" -> "vsymbol/CUTIE"
"zzzDavid/ICDAR-2019-SROIE" -> "clovaai/cord"
"zzzDavid/ICDAR-2019-SROIE" -> "Michael-Xiu/ICDAR-SROIE"
"zzzDavid/ICDAR-2019-SROIE" -> "wenwenyu/PICK-pytorch"
"zzzDavid/ICDAR-2019-SROIE" -> "bikash/DocumentUnderstanding"
"zzzDavid/ICDAR-2019-SROIE" -> "dhavalpotdar/Graph-Convolution-on-Structured-Documents"
"zzzDavid/ICDAR-2019-SROIE" -> "chawla201/Custom-Named-Entity-Recognition"
"zzzDavid/ICDAR-2019-SROIE" -> "sciencefictionlab/chargrid-pytorch"
"zzzDavid/ICDAR-2019-SROIE" -> "BlackStar1313/ICDAR-2019-RRC-SROIE"
"zzzDavid/ICDAR-2019-SROIE" -> "ruifcruz/sroie-on-layoutlm"
"zzzDavid/ICDAR-2019-SROIE" -> "antoinedelplace/Chargrid"
"zzzDavid/ICDAR-2019-SROIE" -> "DevashishPrasad/CascadeTabNet"
"Ice-Hazymoon/idcard_generator" -> "airob0t/idcardgenerator"
"Ice-Hazymoon/idcard_generator" -> "mritd/idgen"
"Ice-Hazymoon/idcard_generator" -> "Ice-Hazymoon/domains" ["e"=1]
"Aurora11111/crnn-train-pytorch" -> "Aurora11111/TextRecognitionDataGenerator"
"Aurora11111/crnn-train-pytorch" -> "YoungMiao/synthdata-zh"
"SeanNaren/warp-ctc" -> "meijieru/crnn.pytorch"
"SeanNaren/warp-ctc" -> "JarveeLee/SynthText_Chinese_version"
"SeanNaren/warp-ctc" -> "Sierkinhane/crnn_chinese_characters_rec"
"SeanNaren/warp-ctc" -> "bgshih/crnn"
"SeanNaren/warp-ctc" -> "ankush-me/SynthText"
"SeanNaren/warp-ctc" -> "jiangxiluning/FOTS.PyTorch"
"SeanNaren/warp-ctc" -> "parlance/ctcdecode" ["e"=1]
"SeanNaren/warp-ctc" -> "githubharald/CTCDecoder" ["e"=1]
"SeanNaren/warp-ctc" -> "whai362/PSENet"
"SeanNaren/warp-ctc" -> "SeanNaren/deepspeech.pytorch" ["e"=1]
"SeanNaren/warp-ctc" -> "MhLiao/TextBoxes_plusplus"
"SeanNaren/warp-ctc" -> "baidu-research/warp-ctc" ["e"=1]
"SeanNaren/warp-ctc" -> "ayumiymk/aster.pytorch"
"SeanNaren/warp-ctc" -> "Jyouhou/SceneTextPapers"
"SeanNaren/warp-ctc" -> "tianzhi0549/CTPN"
"chineseocr/darknet-ocr" -> "chineseocr/chineseocr"
"chineseocr/darknet-ocr" -> "chineseocr/table-ocr"
"chineseocr/darknet-ocr" -> "xiaofengShi/CHINESE-OCR"
"chineseocr/darknet-ocr" -> "YCG09/chinese_ocr"
"chineseocr/darknet-ocr" -> "WenmuZhou/PSENet.pytorch"
"chineseocr/darknet-ocr" -> "WenmuZhou/OCR_DataSet"
"chineseocr/darknet-ocr" -> "ouyanghuiyu/chineseocr_lite"
"chineseocr/darknet-ocr" -> "Sanster/text_renderer"
"chineseocr/darknet-ocr" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"chineseocr/darknet-ocr" -> "myhub/tr"
"chineseocr/darknet-ocr" -> "eragonruan/text-detection-ctpn"
"chineseocr/darknet-ocr" -> "senlinuc/caffe_ocr"
"chineseocr/darknet-ocr" -> "meijieru/crnn.pytorch"
"chineseocr/darknet-ocr" -> "MhLiao/DB"
"chineseocr/darknet-ocr" -> "huoyijie/AdvancedEAST"
"fh2019ustc/DocTr-Plus" -> "fh2019ustc/DocScanner"
"fh2019ustc/DocTr-Plus" -> "fh2019ustc/PolySnake"
"fh2019ustc/DocTr-Plus" -> "fh2019ustc/Awesome-Document-Image-Rectification"
"TianzhongSong/awesome-SynthText" -> "wang-tf/Chinese_OCR_synthetic_data"
"TianzhongSong/awesome-SynthText" -> "WenmuZhou/OCR_DataSet"
"TianzhongSong/awesome-SynthText" -> "JarveeLee/SynthText_Chinese_version"
"TianzhongSong/awesome-SynthText" -> "Wang-Tianwei/Decoupled-attention-network"
"TianzhongSong/awesome-SynthText" -> "Sanster/text_renderer"
"TianzhongSong/awesome-SynthText" -> "BboyHanat/TextGenerator"
"TianzhongSong/awesome-SynthText" -> "ayumiymk/aster.pytorch"
"TianzhongSong/awesome-SynthText" -> "Yuliang-Liu/bezier_curve_text_spotting"
"TianzhongSong/awesome-SynthText" -> "bgshih/aster"
"TianzhongSong/awesome-SynthText" -> "oh-my-ocr/text_renderer"
"TianzhongSong/awesome-SynthText" -> "Canjie-Luo/MORAN_v2"
"TianzhongSong/awesome-SynthText" -> "summerlvsong/Aggregation-Cross-Entropy"
"TianzhongSong/awesome-SynthText" -> "WenmuZhou/PAN.pytorch"
"TianzhongSong/awesome-SynthText" -> "HCIILAB/Scene-Text-Recognition"
"TianzhongSong/awesome-SynthText" -> "whai362/pan_pp.pytorch"
"WenmuZhou/OCR_DataSet" -> "WenmuZhou/PytorchOCR"
"WenmuZhou/OCR_DataSet" -> "WenmuZhou/DBNet.pytorch"
"WenmuZhou/OCR_DataSet" -> "TianzhongSong/awesome-SynthText"
"WenmuZhou/OCR_DataSet" -> "MhLiao/DB"
"WenmuZhou/OCR_DataSet" -> "BADBADBADBOY/pytorchOCR"
"WenmuZhou/OCR_DataSet" -> "Sanster/text_renderer"
"WenmuZhou/OCR_DataSet" -> "tiantian91091317/OCR-Corrector"
"WenmuZhou/OCR_DataSet" -> "chineseocr/table-ocr"
"WenmuZhou/OCR_DataSet" -> "MhLiao/MaskTextSpotterV3"
"WenmuZhou/OCR_DataSet" -> "oh-my-ocr/text_renderer"
"WenmuZhou/OCR_DataSet" -> "HCIILAB/Scene-Text-Recognition"
"WenmuZhou/OCR_DataSet" -> "WenmuZhou/PAN.pytorch"
"WenmuZhou/OCR_DataSet" -> "tommyMessi/crnn_ctc-centerloss"
"WenmuZhou/OCR_DataSet" -> "hikopensource/DAVAR-Lab-OCR"
"WenmuZhou/OCR_DataSet" -> "WenmuZhou/PSENet.pytorch"
"chineseocr/table-ocr" -> "chineseocr/table-detect"
"chineseocr/table-ocr" -> "tommyMessi/tableImageParser_tx"
"chineseocr/table-ocr" -> "Rid7/Table-OCR"
"chineseocr/table-ocr" -> "WenmuZhou/OCR_DataSet"
"chineseocr/table-ocr" -> "doc-analysis/TableBank"
"chineseocr/table-ocr" -> "bitdata/ocrtable"
"chineseocr/table-ocr" -> "chineseocr/darknet-ocr"
"chineseocr/table-ocr" -> "tiantian91091317/OCR-Corrector"
"chineseocr/table-ocr" -> "ibm-aur-nlp/PubTabNet"
"chineseocr/table-ocr" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"chineseocr/table-ocr" -> "wenwenyu/PICK-pytorch"
"chineseocr/table-ocr" -> "tommyMessi/crnn_ctc-centerloss"
"chineseocr/table-ocr" -> "hikopensource/DAVAR-Lab-OCR"
"chineseocr/table-ocr" -> "CharlesWu123/SPLERGE"
"chineseocr/table-ocr" -> "WenmuZhou/PSENet.pytorch"
"chineseocr/trocr-chinese" -> "tommyMessi/remove-stamp"
"chineseocr/trocr-chinese" -> "tommyMessi/crnn_ctc-centerloss"
"chineseocr/trocr-chinese" -> "tommyMessi/PST-table"
"oh-my-ocr/text_renderer" -> "Sanster/text_renderer"
"oh-my-ocr/text_renderer" -> "WenmuZhou/OCR_DataSet"
"oh-my-ocr/text_renderer" -> "MhLiao/DB"
"oh-my-ocr/text_renderer" -> "hikopensource/DAVAR-Lab-OCR"
"oh-my-ocr/text_renderer" -> "Canjie-Luo/Text-Image-Augmentation"
"oh-my-ocr/text_renderer" -> "WenmuZhou/DBNet.pytorch"
"oh-my-ocr/text_renderer" -> "ayumiymk/aster.pytorch"
"oh-my-ocr/text_renderer" -> "FangShancheng/ABINet"
"oh-my-ocr/text_renderer" -> "whai362/pan_pp.pytorch"
"oh-my-ocr/text_renderer" -> "TianzhongSong/awesome-SynthText"
"oh-my-ocr/text_renderer" -> "tommyMessi/crnn_ctc-centerloss"
"oh-my-ocr/text_renderer" -> "Belval/TextRecognitionDataGenerator"
"oh-my-ocr/text_renderer" -> "wenwenyu/MASTER-pytorch"
"oh-my-ocr/text_renderer" -> "ankush-me/SynthText"
"oh-my-ocr/text_renderer" -> "clovaai/synthtiger"
"FudanVI/FudanOCR" -> "mjq11302010044/TPGSR"
"FudanVI/FudanOCR" -> "mjq11302010044/TATT"
"FudanVI/FudanOCR" -> "JasonBoy1/TextZoom"
"FudanVI/FudanOCR" -> "FudanVI/benchmarking-chinese-text-recognition"
"FudanVI/FudanOCR" -> "zhaominyiz/C3-STISR"
"FudanVI/FudanOCR" -> "SHI-Labs/Rethinking-Text-Segmentation"
"FudanVI/FudanOCR" -> "lancercat/VSDF"
"FudanVI/FudanOCR" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"mjq11302010044/TATT" -> "mjq11302010044/TPGSR"
"mjq11302010044/TATT" -> "zhaominyiz/C3-STISR"
"mjq11302010044/TATT" -> "FudanVI/FudanOCR"
"mjq11302010044/TATT" -> "JasonBoy1/TextZoom"
"mjq11302010044/TPGSR" -> "mjq11302010044/TATT"
"mjq11302010044/TPGSR" -> "JasonBoy1/TextZoom"
"mjq11302010044/TPGSR" -> "zhaominyiz/C3-STISR"
"mjq11302010044/TPGSR" -> "FudanVI/FudanOCR"
"mjq11302010044/TPGSR" -> "jdfxzzy/DPMN"
"roatienza/straug" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"roatienza/straug" -> "ku21fan/STR-Fewer-Labels"
"roatienza/straug" -> "RubanSeven/Text-Image-Augmentation-python"
"roatienza/straug" -> "FangShancheng/ABINet"
"roatienza/straug" -> "roatienza/deep-text-recognition-benchmark"
"roatienza/straug" -> "Wang-Tianwei/Implicit-feature-alignment" ["e"=1]
"roatienza/straug" -> "ViTAE-Transformer/DeepSolo"
"roatienza/straug" -> "wangyuxin87/VisionLAN"
"roatienza/straug" -> "Canjie-Luo/Text-Image-Augmentation"
"HCIILAB/Scene-Text-End2end" -> "HCIILAB/Scene-Text-Detection"
"HCIILAB/Scene-Text-End2end" -> "HCIILAB/Scene-Text-Recognition"
"HCIILAB/Scene-Text-End2end" -> "Megvii-CSG/MegReader"
"HCIILAB/Scene-Text-End2end" -> "summerlvsong/Aggregation-Cross-Entropy"
"HCIILAB/Scene-Text-End2end" -> "Wang-Tianwei/Decoupled-attention-network"
"HCIILAB/Scene-Text-End2end" -> "MhLiao/MaskTextSpotter"
"HCIILAB/Scene-Text-End2end" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"HCIILAB/Scene-Text-End2end" -> "Yuliang-Liu/bezier_curve_text_spotting"
"HCIILAB/Scene-Text-End2end" -> "ayumiymk/aster.pytorch"
"HCIILAB/Scene-Text-End2end" -> "Yuliang-Liu/Box_Discretization_Network"
"RapidAI/RapidOCR" -> "SWHL/RapidVideOCR"
"RapidAI/RapidOCR" -> "frotms/PaddleOCR2Pytorch"
"RapidAI/RapidOCR" -> "wangfreexx/wangfreexx-tianruoocr-cl-paddle" ["e"=1]
"RapidAI/RapidOCR" -> "PaddlePaddle/Paddle2ONNX" ["e"=1]
"RapidAI/RapidOCR" -> "DayBreak-u/chineseocr_lite"
"RapidAI/RapidOCR" -> "hiroi-sora/PaddleOCR-json"
"RapidAI/RapidOCR" -> "alisen39/TrWebOCR"
"RapidAI/RapidOCR" -> "WenmuZhou/OCR_DataSet"
"RapidAI/RapidOCR" -> "RapidAI/RapidASR" ["e"=1]
"RapidAI/RapidOCR" -> "raoyutian/PaddleOCRSharp" ["e"=1]
"RapidAI/RapidOCR" -> "myhub/tr"
"RapidAI/RapidOCR" -> "DefTruth/lite.ai.toolkit" ["e"=1]
"RapidAI/RapidOCR" -> "Sanster/text_renderer"
"RapidAI/RapidOCR" -> "miaomiaosoft/PandaOCR.Pro" ["e"=1]
"RapidAI/RapidOCR" -> "novioleo/Savior"
"ktrk115/const_layout" -> "Layout-Generation/layout-generation"
"ktrk115/const_layout" -> "kampta/DeepLayout"
"ktrk115/const_layout" -> "CyberAgentAILab/canvas-vae"
"ktrk115/const_layout" -> "JiananLi2016/LayoutGAN-Tensorflow"
"ktrk115/const_layout" -> "billzhonggz/LayoutGAN"
"ktrk115/const_layout" -> "JosephKJ/Awesome-Layout-Generators"
"ktrk115/const_layout" -> "aalto-ui/GRIDS"
"yizhiwang96/TextLogoLayout" -> "SHI-Labs/Rethinking-Text-Segmentation"
"yizhiwang96/TextLogoLayout" -> "kampta/DeepLayout"
"yizhiwang96/TextLogoLayout" -> "yizhiwang96/PKU-CSCL-Surveys"
"yizhiwang96/TextLogoLayout" -> "Canjie-Luo/Real-300K"
"yizhiwang96/TextLogoLayout" -> "lcy0604/CTRNet"
"yizhiwang96/TextLogoLayout" -> "ecnuycxie/DG-Font" ["e"=1]
"yizhiwang96/TextLogoLayout" -> "TencentARC/BTS"
"MichalBusta/DeepTextSpotter" -> "tonghe90/textspotter"
"MichalBusta/DeepTextSpotter" -> "Bartzi/see"
"MichalBusta/DeepTextSpotter" -> "lvpengyuan/masktextspotter.caffe2"
"MichalBusta/DeepTextSpotter" -> "BestSonny/SSTD"
"MichalBusta/DeepTextSpotter" -> "MichalBusta/E2E-MLT"
"MichalBusta/DeepTextSpotter" -> "Bartzi/stn-ocr"
"MichalBusta/DeepTextSpotter" -> "MhLiao/TextBoxes"
"MichalBusta/DeepTextSpotter" -> "bgshih/seglink"
"MichalBusta/DeepTextSpotter" -> "ZJULearning/pixel_link"
"MichalBusta/DeepTextSpotter" -> "MhLiao/TextBoxes_plusplus"
"MichalBusta/DeepTextSpotter" -> "bgshih/aster"
"MichalBusta/DeepTextSpotter" -> "Yuliang-Liu/Curve-Text-Detector"
"MichalBusta/DeepTextSpotter" -> "xhzdeng/crpn"
"MichalBusta/DeepTextSpotter" -> "summerlvsong/Aggregation-Cross-Entropy"
"MichalBusta/DeepTextSpotter" -> "lluisgomez/TextProposals"
"tmbdev/ocropy" -> "tmbdev/clstm"
"tmbdev/ocropy" -> "da03/Attention-OCR"
"tmbdev/ocropy" -> "wanghaisheng/awesome-ocr"
"tmbdev/ocropy" -> "bgshih/crnn"
"tmbdev/ocropy" -> "kba/awesome-ocr"
"tmbdev/ocropy" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"tmbdev/ocropy" -> "eragonruan/text-detection-ctpn"
"tmbdev/ocropy" -> "pannous/tensorflow-ocr"
"tmbdev/ocropy" -> "tianzhi0549/CTPN"
"tmbdev/ocropy" -> "ankush-me/SynthText"
"tmbdev/ocropy" -> "tleyden/open-ocr"
"tmbdev/ocropy" -> "Calamari-OCR/calamari"
"tmbdev/ocropy" -> "JinpengLI/deep_ocr"
"tmbdev/ocropy" -> "emedvedev/attention-ocr"
"tmbdev/ocropy" -> "argman/EAST"
"JiageWang/hand-writing-recognition" -> "peterWon/CASIA-HWDB-Recognition"
"integeruser/CASIA-HWDB1.1-cnn" -> "peterWon/CASIA-HWDB-Recognition"
"integeruser/CASIA-HWDB1.1-cnn" -> "wangjp0408/HCCR-HWDB-tensorflow"
"peterWon/CASIA-HWDB-Recognition" -> "integeruser/CASIA-HWDB1.1-cnn"
"peterWon/CASIA-HWDB-Recognition" -> "wangjp0408/HCCR-HWDB-tensorflow"
"songdejia/EAST" -> "SakuraRiven/EAST"
"songdejia/EAST" -> "huoyijie/AdvancedEAST"
"songdejia/EAST" -> "jiangxiluning/FOTS.PyTorch"
"songdejia/EAST" -> "princewang1994/TextSnake.pytorch"
"songdejia/EAST" -> "whai362/PSENet"
"songdejia/EAST" -> "argman/EAST"
"songdejia/EAST" -> "WenmuZhou/PSENet.pytorch"
"songdejia/EAST" -> "cs-chan/Total-Text-Dataset"
"songdejia/EAST" -> "Jyouhou/SceneTextPapers"
"songdejia/EAST" -> "Canjie-Luo/MORAN_v2"
"songdejia/EAST" -> "ZJULearning/pixel_link"
"songdejia/EAST" -> "songdejia/DFL-CNN" ["e"=1]
"songdejia/EAST" -> "opconty/pytorch_ctpn"
"songdejia/EAST" -> "MhLiao/DB"
"songdejia/EAST" -> "lvpengyuan/corner"
"taosir/cnn_handwritten_chinese_recognition" -> "jinxiwang/ocr_TDR"
"taosir/cnn_handwritten_chinese_recognition" -> "jjcheer/ocrcn_tf2"
"taosir/cnn_handwritten_chinese_recognition" -> "soloice/Chinese-Character-Recognition"
"taosir/cnn_handwritten_chinese_recognition" -> "wangjinxile/ocr_TDR"
"taosir/cnn_handwritten_chinese_recognition" -> "peterWon/CASIA-HWDB-Recognition"
"taosir/cnn_handwritten_chinese_recognition" -> "integeruser/CASIA-HWDB1.1-cnn"
"taosir/cnn_handwritten_chinese_recognition" -> "chongyangtao/DeepHCCR"
"taosir/cnn_handwritten_chinese_recognition" -> "JiageWang/hand-writing-recognition"
"taosir/cnn_handwritten_chinese_recognition" -> "AmemiyaYuko/HandwrittenChineseCharacterRecognition"
"taosir/cnn_handwritten_chinese_recognition" -> "angzhou/anchor"
"taosir/cnn_handwritten_chinese_recognition" -> "orange90/HandWrittenChineseRecogntion"
"taosir/cnn_handwritten_chinese_recognition" -> "hsddlz/faster-CTPN"
"taosir/cnn_handwritten_chinese_recognition" -> "chenyr0021/Chinese_character_recognition"
"taosir/cnn_handwritten_chinese_recognition" -> "AstarLight/CPS-OCR-Engine"
"taosir/cnn_handwritten_chinese_recognition" -> "burness/tensorflow-101"
"virantha/pypdfocr" -> "tmbdev/hocr-tools"
"virantha/pypdfocr" -> "virantha/scanpdf"
"isee15/captcha-ocr" -> "yinchuandong/JavaVerify"
"isee15/captcha-ocr" -> "hotstu/javaCaptcha"
"lvpengyuan/masktextspotter.caffe2" -> "jiangxiluning/FOTS.PyTorch"
"lvpengyuan/masktextspotter.caffe2" -> "xieyufei1993/FOTS"
"lvpengyuan/masktextspotter.caffe2" -> "tonghe90/textspotter"
"lvpengyuan/masktextspotter.caffe2" -> "xieyufei1993/InceptText-Tensorflow"
"lvpengyuan/masktextspotter.caffe2" -> "Yuliang-Liu/Curve-Text-Detector"
"lvpengyuan/masktextspotter.caffe2" -> "princewang1994/TextSnake.pytorch"
"lvpengyuan/masktextspotter.caffe2" -> "bgshih/aster"
"lvpengyuan/masktextspotter.caffe2" -> "MichalBusta/DeepTextSpotter"
"lvpengyuan/masktextspotter.caffe2" -> "MhLiao/MaskTextSpotter"
"lvpengyuan/masktextspotter.caffe2" -> "lvpengyuan/corner"
"lvpengyuan/masktextspotter.caffe2" -> "cs-chan/Total-Text-Dataset"
"lvpengyuan/masktextspotter.caffe2" -> "whai362/PSENet"
"lvpengyuan/masktextspotter.caffe2" -> "MhLiao/TextBoxes_plusplus"
"lvpengyuan/masktextspotter.caffe2" -> "liuheng92/tensorflow_PSENet"
"lvpengyuan/masktextspotter.caffe2" -> "YukangWang/TextField"
"wangtaoT/AndroidOCR" -> "wangyisll/TessTwoDemo"
"nguyenq/tess4j" -> "ushelp/EasyOCR"
"nguyenq/tess4j" -> "tesseract-ocr/tessdata"
"nguyenq/tess4j" -> "bytedeco/javacpp-presets" ["e"=1]
"nguyenq/tess4j" -> "tesseract4java/tesseract4java"
"nguyenq/tess4j" -> "bytedeco/javacv" ["e"=1]
"nguyenq/tess4j" -> "java-native-access/jna" ["e"=1]
"nguyenq/tess4j" -> "coobird/thumbnailator" ["e"=1]
"nguyenq/tess4j" -> "nguyenq/lept4j"
"nguyenq/tess4j" -> "ctripcorp/C-OCR" ["e"=1]
"nguyenq/tess4j" -> "plutext/docx4j" ["e"=1]
"nguyenq/tess4j" -> "Sayi/poi-tl" ["e"=1]
"nguyenq/tess4j" -> "tesseract-ocr/tessdata_best"
"nguyenq/tess4j" -> "sbraconnier/jodconverter" ["e"=1]
"nguyenq/tess4j" -> "tesseract-ocr/tesseract" ["e"=1]
"nguyenq/tess4j" -> "haraldk/TwelveMonkeys" ["e"=1]
"breezedeus/cnstd" -> "breezedeus/cnocr"
"breezedeus/cnstd" -> "myhub/tr"
"breezedeus/cnstd" -> "tiantian91091317/OCR-Corrector"
"breezedeus/cnstd" -> "WenmuZhou/PytorchOCR"
"breezedeus/cnstd" -> "yizt/crnn.pytorch"
"WenmuZhou/PSENet.pytorch" -> "WenmuZhou/PAN.pytorch"
"WenmuZhou/PSENet.pytorch" -> "whai362/PSENet"
"WenmuZhou/PSENet.pytorch" -> "WenmuZhou/DBNet.pytorch"
"WenmuZhou/PSENet.pytorch" -> "lvpengyuan/corner"
"WenmuZhou/PSENet.pytorch" -> "jiangxiluning/FOTS.PyTorch"
"WenmuZhou/PSENet.pytorch" -> "liuheng92/tensorflow_PSENet"
"WenmuZhou/PSENet.pytorch" -> "ayumiymk/aster.pytorch"
"WenmuZhou/PSENet.pytorch" -> "princewang1994/TextSnake.pytorch"
"WenmuZhou/PSENet.pytorch" -> "Canjie-Luo/MORAN_v2"
"WenmuZhou/PSENet.pytorch" -> "MhLiao/DB"
"WenmuZhou/PSENet.pytorch" -> "whai362/pan_pp.pytorch"
"WenmuZhou/PSENet.pytorch" -> "MhLiao/MaskTextSpotterV3"
"WenmuZhou/PSENet.pytorch" -> "MalongTech/research-charnet"
"WenmuZhou/PSENet.pytorch" -> "summerlvsong/Aggregation-Cross-Entropy"
"WenmuZhou/PSENet.pytorch" -> "Sanster/text_renderer"
"hsddlz/faster-CTPN" -> "lvpengyuan/corner"
"hsddlz/faster-CTPN" -> "opconty/pytorch_ctpn"
"hsddlz/faster-CTPN" -> "Yuanhang8605/pixel-anchor-link-and-text-detector-experience"
"xiaomaxiao/keras_ocr" -> "YCG09/chinese_ocr"
"xiaomaxiao/keras_ocr" -> "senlinuc/caffe_ocr"
"xiaomaxiao/keras_ocr" -> "JarveeLee/SynthText_Chinese_version"
"xiaomaxiao/keras_ocr" -> "eragonruan/text-detection-ctpn"
"xiaomaxiao/keras_ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"xiaomaxiao/keras_ocr" -> "bear63/sceneReco"
"xiaomaxiao/keras_ocr" -> "Sanster/text_renderer"
"xiaomaxiao/keras_ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"xiaomaxiao/keras_ocr" -> "xiaofengShi/CHINESE-OCR"
"xiaomaxiao/keras_ocr" -> "jiangxiluning/chinese-ocr"
"xiaomaxiao/keras_ocr" -> "GlassyWing/text-detection-ocr"
"xiaomaxiao/keras_ocr" -> "AstarLight/Lets_OCR"
"xiaomaxiao/keras_ocr" -> "wang-tf/Chinese_OCR_synthetic_data"
"xiaomaxiao/keras_ocr" -> "huoyijie/AdvancedEAST"
"xiaomaxiao/keras_ocr" -> "bgshih/aster"
"Niwhskal/SRNet" -> "youdao-ai/SRNet"
"Niwhskal/SRNet" -> "youdao-ai/SRNet-Datagen"
"Niwhskal/SRNet" -> "qqqyd/MOSTEL"
"Niwhskal/SRNet" -> "prasunroy/stefann"
"Niwhskal/SRNet" -> "HCIILAB/Scene-Text-Removal"
"Niwhskal/SRNet" -> "Jyouhou/UnrealText"
"Niwhskal/SRNet" -> "lcy0604/EraseNet"
"yizt/crnn.pytorch" -> "Rid7/Table-OCR"
"yizt/crnn.pytorch" -> "BADBADBADBOY/pytorchOCR"
"yizt/crnn.pytorch" -> "BADBADBADBOY/DBnet-lite.pytorch"
"yizt/crnn.pytorch" -> "WenmuZhou/OCR_DataSet"
"yizt/crnn.pytorch" -> "Yuliang-Liu/bezier_curve_text_spotting"
"yizt/crnn.pytorch" -> "liuheng92/OCR_EVALUATION"
"yizt/crnn.pytorch" -> "WenmuZhou/PytorchOCR"
"youdao-ai/SRNet" -> "youdao-ai/SRNet-Datagen"
"youdao-ai/SRNet" -> "Niwhskal/SRNet"
"youdao-ai/SRNet" -> "prasunroy/stefann"
"youdao-ai/SRNet" -> "HCIILAB/Scene-Text-Removal"
"youdao-ai/SRNet" -> "Jyouhou/UnrealText"
"youdao-ai/SRNet" -> "MhLiao/SynthText3D"
"youdao-ai/SRNet" -> "Wang-Tianwei/Decoupled-attention-network"
"youdao-ai/SRNet" -> "summerlvsong/Aggregation-Cross-Entropy"
"youdao-ai/SRNet-Datagen" -> "youdao-ai/SRNet"
"youdao-ai/SRNet-Datagen" -> "Niwhskal/SRNet"
"chineseocr/chinese-ocr" -> "bear63/sceneReco"
"chineseocr/chinese-ocr" -> "eragonruan/text-detection-ctpn"
"chineseocr/chinese-ocr" -> "JinpengLI/deep_ocr"
"chineseocr/chinese-ocr" -> "senlinuc/caffe_ocr"
"chineseocr/chinese-ocr" -> "tianzhi0549/CTPN"
"chineseocr/chinese-ocr" -> "TJCVRS/CRNN_Tensorflow"
"chineseocr/chinese-ocr" -> "JarveeLee/SynthText_Chinese_version"
"chineseocr/chinese-ocr" -> "ilovin/lstm_ctc_ocr"
"chineseocr/chinese-ocr" -> "chineseocr/new-text-detection-ctpn"
"chineseocr/chinese-ocr" -> "xiaomaxiao/keras_ocr"
"chineseocr/chinese-ocr" -> "dengdan/seglink"
"chineseocr/chinese-ocr" -> "tongpi/basicOCR"
"chineseocr/chinese-ocr" -> "wanghaisheng/awesome-ocr"
"chineseocr/chinese-ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"chineseocr/chinese-ocr" -> "bgshih/crnn"
"courao/ocr.pytorch" -> "opconty/pytorch_ctpn"
"courao/ocr.pytorch" -> "Holmeyoung/crnn-pytorch"
"courao/ocr.pytorch" -> "WenmuZhou/PytorchOCR"
"courao/ocr.pytorch" -> "EnkrateiaLucca/ocr_for_transcribing_pdf_slides"
"courao/ocr.pytorch" -> "BADBADBADBOY/pytorch.ctpn"
"courao/ocr.pytorch" -> "backtime92/CRAFT-Reimplementation"
"courao/ocr.pytorch" -> "AstarLight/Lets_OCR"
"courao/ocr.pytorch" -> "BADBADBADBOY/pytorchOCR"
"courao/ocr.pytorch" -> "yizt/crnn.pytorch"
"courao/ocr.pytorch" -> "WenmuZhou/DBNet.pytorch"
"courao/ocr.pytorch" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"courao/ocr.pytorch" -> "WenmuZhou/PSENet.pytorch"
"courao/ocr.pytorch" -> "meijieru/crnn.pytorch"
"courao/ocr.pytorch" -> "jiangxiluning/FOTS.PyTorch"
"courao/ocr.pytorch" -> "autonise/CRAFT-Remade"
"DevashishPrasad/CascadeTabNet" -> "doc-analysis/TableBank"
"DevashishPrasad/CascadeTabNet" -> "ibm-aur-nlp/PubTabNet"
"DevashishPrasad/CascadeTabNet" -> "Academic-Hammer/SciTSR"
"DevashishPrasad/CascadeTabNet" -> "shahrukhqasim/TIES-2.0"
"DevashishPrasad/CascadeTabNet" -> "ibm-aur-nlp/PubLayNet"
"DevashishPrasad/CascadeTabNet" -> "chineseocr/table-ocr"
"DevashishPrasad/CascadeTabNet" -> "hikopensource/DAVAR-Lab-OCR"
"DevashishPrasad/CascadeTabNet" -> "tommyMessi/tableImageParser_tx"
"DevashishPrasad/CascadeTabNet" -> "jainammm/TableNet"
"DevashishPrasad/CascadeTabNet" -> "Irene323/GFTE"
"DevashishPrasad/CascadeTabNet" -> "tomassosorio/OCR_tablenet"
"DevashishPrasad/CascadeTabNet" -> "JiaquanYe/TableMASTER-mmocr"
"DevashishPrasad/CascadeTabNet" -> "wenwenyu/PICK-pytorch"
"DevashishPrasad/CascadeTabNet" -> "microsoft/table-transformer"
"DevashishPrasad/CascadeTabNet" -> "mdv3101/CDeCNet"
"FangShancheng/ABINet-PP" -> "Yuliang-Liu/SPTSv2"
"FudanVI/benchmarking-chinese-text-recognition" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"FudanVI/benchmarking-chinese-text-recognition" -> "FudanVI/FudanOCR"
"FudanVI/benchmarking-chinese-text-recognition" -> "FangShancheng/ABINet"
"FudanVI/benchmarking-chinese-text-recognition" -> "hikopensource/DAVAR-Lab-OCR"
"FudanVI/benchmarking-chinese-text-recognition" -> "wenwenyu/MASTER-pytorch"
"FudanVI/benchmarking-chinese-text-recognition" -> "roatienza/deep-text-recognition-benchmark"
"FudanVI/benchmarking-chinese-text-recognition" -> "RubanSeven/Text-Image-Augmentation-python"
"FudanVI/benchmarking-chinese-text-recognition" -> "mxin262/SwinTextSpotter"
"FudanVI/benchmarking-chinese-text-recognition" -> "google-research-datasets/hiertext"
"FudanVI/benchmarking-chinese-text-recognition" -> "Canjie-Luo/Text-Image-Augmentation"
"FudanVI/benchmarking-chinese-text-recognition" -> "shannanyinxiang/PageNet"
"FudanVI/benchmarking-chinese-text-recognition" -> "baudm/parseq"
"FudanVI/benchmarking-chinese-text-recognition" -> "JinGyeSetBirdsFree/FudanOCR"
"FudanVI/benchmarking-chinese-text-recognition" -> "HCIILAB/Scene-Text-Recognition"
"FudanVI/benchmarking-chinese-text-recognition" -> "roatienza/straug"
"ViTAE-Transformer/DeepSolo" -> "ymy-k/DPText-DETR"
"ViTAE-Transformer/DeepSolo" -> "Yuliang-Liu/SPTSv2"
"ViTAE-Transformer/DeepSolo" -> "lcy0604/CTRNet"
"ViTAE-Transformer/DeepSolo" -> "yeungchenwa/OCR-SAM"
"WenmuZhou/PytorchOCR" -> "WenmuZhou/OCR_DataSet"
"WenmuZhou/PytorchOCR" -> "BADBADBADBOY/pytorchOCR"
"WenmuZhou/PytorchOCR" -> "WenmuZhou/DBNet.pytorch"
"WenmuZhou/PytorchOCR" -> "frotms/PaddleOCR2Pytorch"
"WenmuZhou/PytorchOCR" -> "MhLiao/DB"
"WenmuZhou/PytorchOCR" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"WenmuZhou/PytorchOCR" -> "Sanster/text_renderer"
"WenmuZhou/PytorchOCR" -> "WenmuZhou/PAN.pytorch"
"WenmuZhou/PytorchOCR" -> "WenmuZhou/PSENet.pytorch"
"WenmuZhou/PytorchOCR" -> "meijieru/crnn.pytorch"
"WenmuZhou/PytorchOCR" -> "whai362/PSENet"
"WenmuZhou/PytorchOCR" -> "MhLiao/MaskTextSpotterV3"
"WenmuZhou/PytorchOCR" -> "Media-Smart/vedastr"
"WenmuZhou/PytorchOCR" -> "oh-my-ocr/text_renderer"
"WenmuZhou/PytorchOCR" -> "chineseocr/table-ocr"
"baudm/parseq" -> "ku21fan/STR-Fewer-Labels"
"baudm/parseq" -> "FangShancheng/ABINet"
"baudm/parseq" -> "adeline-cs/GTR"
"baudm/parseq" -> "xdxie/WordArt"
"baudm/parseq" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"baudm/parseq" -> "roatienza/deep-text-recognition-benchmark"
"baudm/parseq" -> "ViTAE-Transformer/DeepSolo"
"baudm/parseq" -> "clovaai/synthtiger"
"baudm/parseq" -> "simplify23/CDistNet"
"baudm/parseq" -> "byeonghu-na/MATRN"
"baudm/parseq" -> "google-research-datasets/hiertext"
"baudm/parseq" -> "mlpc-ucsd/TESTR"
"baudm/parseq" -> "wangyuxin87/VisionLAN"
"baudm/parseq" -> "ymy-k/DPText-DETR"
"baudm/parseq" -> "mxin262/SwinTextSpotter"
"lancercat/VSDF" -> "lancercat/OSOCR"
"shannanyinxiang/SPTS" -> "Yuliang-Liu/SPTSv2"
"shannanyinxiang/SPTS" -> "mxin262/SwinTextSpotter"
"shannanyinxiang/SPTS" -> "amazon-research/glass-text-spotting"
"shannanyinxiang/SPTS" -> "wenwenyu/TCM"
"shannanyinxiang/SPTS" -> "mlpc-ucsd/TESTR"
"shannanyinxiang/SPTS" -> "Yuliang-Liu/SPTS"
"shannanyinxiang/SPTS" -> "shannanyinxiang/PageNet"
"shannanyinxiang/SPTS" -> "Yuliang-Liu/ATVM-Datasets"
"shannanyinxiang/SPTS" -> "lcy0604/CTRNet"
"weijiawu/TransDETR" -> "weijiawu/TransVTSpotter"
"weijiawu/TransDETR" -> "weijiawu/BOVText-Benchmark"
"ymy-k/DPText-DETR" -> "ViTAE-Transformer/DeepSolo"
"ymy-k/DPText-DETR" -> "ViTAE-Transformer/ViTAE-Transformer-Scene-Text-Detection"
"ymy-k/DPText-DETR" -> "adeline-cs/GTR"
"zacharywhitley/awesome-ocr" -> "sbrunner/deskew"
"zacharywhitley/awesome-ocr" -> "kba/awesome-ocr"
"zacharywhitley/awesome-ocr" -> "qurator-spk/eynollah"
"zacharywhitley/awesome-ocr" -> "dhlab-epfl/dhSegment"
"zacharywhitley/awesome-ocr" -> "xellows1305/Document-Image-Dewarping"
"zacharywhitley/awesome-ocr" -> "cvlab-stonybrook/DewarpNet"
"zacharywhitley/awesome-ocr" -> "thomasjhuang/deep-learning-for-document-dewarping"
"zacharywhitley/awesome-ocr" -> "doc-analysis/TableBank"
"zacharywhitley/awesome-ocr" -> "Breta01/handwriting-ocr" ["e"=1]
"zacharywhitley/awesome-ocr" -> "oh-my-ocr/text_renderer"
"zacharywhitley/awesome-ocr" -> "whitelok/image-text-localization-recognition"
"zacharywhitley/awesome-ocr" -> "mindee/doctr"
"zacharywhitley/awesome-ocr" -> "hpanwar08/detectron2"
"zacharywhitley/awesome-ocr" -> "faustomorales/keras-ocr"
"zacharywhitley/awesome-ocr" -> "DevashishPrasad/CascadeTabNet"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "weinman/cnn_lstm_ctc_ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "ilovin/lstm_ctc_ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "oyxhust/CNN-LSTM-CTC-text-recognition"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "jimmyleaf/ocr_tensorflow_cnn"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "synckey/tensorflow_lstm_ctc_ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "Li-Ming-Fan/OCR-DETECTION-CTPN"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "wushilian/CRNN_Attention_OCR_Chinese"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "MaybeShewill-CV/CRNN_Tensorflow"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "tongpi/basicOCR"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "pannous/tensorflow-ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "Bartzi/stn-ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "bear63/sceneReco"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "senlinuc/caffe_ocr"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "eragonruan/text-detection-ctpn"
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" -> "JarveeLee/SynthText_Chinese_version"
"jiangxiluning/MASTER-TF" -> "wenwenyu/MASTER-pytorch"
"jiangxiluning/MASTER-TF" -> "Pay20Y/SAR_TF"
"jiangxiluning/MASTER-TF" -> "Chuhanxx/FontAdaptor"
"jiangxiluning/MASTER-TF" -> "tommyMessi/crnn_ctc-centerloss"
"ocrbook/ocrinaction" -> "WenmuZhou/OCR_DataSet"
"ocrbook/ocrinaction" -> "chineseocr/table-ocr"
"ocrbook/ocrinaction" -> "wenwenyu/MASTER-pytorch"
"ocrbook/ocrinaction" -> "HCIILAB/Scene-Text-Recognition"
"ocrbook/ocrinaction" -> "Canjie-Luo/Text-Image-Augmentation"
"ocrbook/ocrinaction" -> "Wang-Tianwei/Decoupled-attention-network"
"ocrbook/ocrinaction" -> "Yuliang-Liu/bezier_curve_text_spotting"
"ocrbook/ocrinaction" -> "WenmuZhou/PSENet.pytorch"
"ocrbook/ocrinaction" -> "lvpengyuan/corner"
"ocrbook/ocrinaction" -> "chenjun2hao/Attention_ocr.pytorch"
"ocrbook/ocrinaction" -> "tiantian91091317/OCR-Corrector"
"ocrbook/ocrinaction" -> "Rid7/Table-OCR"
"ocrbook/ocrinaction" -> "Vincent131499/Chinese-OCR3"
"ocrbook/ocrinaction" -> "BboyHanat/TextGenerator"
"ocrbook/ocrinaction" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"Bartzi/see" -> "Bartzi/stn-ocr"
"Bartzi/see" -> "MichalBusta/DeepTextSpotter"
"Bartzi/see" -> "bgshih/aster"
"Bartzi/see" -> "MhLiao/TextBoxes_plusplus"
"Bartzi/see" -> "Yuliang-Liu/Curve-Text-Detector"
"Bartzi/see" -> "da03/Attention-OCR"
"Bartzi/see" -> "tonghe90/textspotter"
"Bartzi/see" -> "ZJULearning/pixel_link"
"Bartzi/see" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"Bartzi/see" -> "dengdan/seglink"
"Bartzi/see" -> "Canjie-Luo/MORAN_v2"
"Bartzi/see" -> "summerlvsong/Aggregation-Cross-Entropy"
"Bartzi/see" -> "whitelok/image-text-localization-recognition"
"Bartzi/see" -> "ankush-me/SynthText"
"Bartzi/see" -> "bgshih/crnn"
"ZJULearning/pixel_link" -> "dengdan/seglink"
"ZJULearning/pixel_link" -> "huoyijie/AdvancedEAST"
"ZJULearning/pixel_link" -> "whai362/PSENet"
"ZJULearning/pixel_link" -> "MhLiao/TextBoxes_plusplus"
"ZJULearning/pixel_link" -> "argman/EAST"
"ZJULearning/pixel_link" -> "jiangxiluning/FOTS.PyTorch"
"ZJULearning/pixel_link" -> "liuheng92/tensorflow_PSENet"
"ZJULearning/pixel_link" -> "bgshih/aster"
"ZJULearning/pixel_link" -> "JarveeLee/SynthText_Chinese_version"
"ZJULearning/pixel_link" -> "Yuliang-Liu/Curve-Text-Detector"
"ZJULearning/pixel_link" -> "tonghe90/textspotter"
"ZJULearning/pixel_link" -> "lvpengyuan/corner"
"ZJULearning/pixel_link" -> "Canjie-Luo/MORAN_v2"
"ZJULearning/pixel_link" -> "princewang1994/TextSnake.pytorch"
"ZJULearning/pixel_link" -> "ankush-me/SynthText"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "bai-shang/crnn_ctc_ocr_tf"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "Holmeyoung/crnn-pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "ayumiymk/aster.pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "yizt/crnn.pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "BADBADBADBOY/pytorchOCR"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "chenjun2hao/Attention_ocr.pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "WenmuZhou/PSENet.pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "Canjie-Luo/Text-Image-Augmentation"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "chenjun2hao/SRN.pytorch"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "RubanSeven/Text-Image-Augmentation-python"
"bai-shang/crnn_seq2seq_ocr_pytorch" -> "wenwenyu/MASTER-pytorch"
"soloice/Chinese-Character-Recognition" -> "chongyangtao/DeepHCCR"
"soloice/Chinese-Character-Recognition" -> "AmemiyaYuko/HandwrittenChineseCharacterRecognition"
"soloice/Chinese-Character-Recognition" -> "angzhou/anchor"
"soloice/Chinese-Character-Recognition" -> "burness/tensorflow-101"
"soloice/Chinese-Character-Recognition" -> "taosir/cnn_handwritten_chinese_recognition"
"soloice/Chinese-Character-Recognition" -> "simonwsw/cnn-zh"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/TextPMs"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/TextBPN"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/KPN"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/GloRe"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/Focal-loss"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/GHM_Loss"
"GXYM/TextBPN-Plus-Plus" -> "GXYM/OHEM-loss"
"Bartzi/stn-ocr" -> "Bartzi/see"
"Bartzi/stn-ocr" -> "MichalBusta/DeepTextSpotter"
"Bartzi/stn-ocr" -> "da03/Attention-OCR"
"Bartzi/stn-ocr" -> "MhLiao/TextBoxes_plusplus"
"Bartzi/stn-ocr" -> "MhLiao/TextBoxes"
"Bartzi/stn-ocr" -> "JarveeLee/SynthText_Chinese_version"
"Bartzi/stn-ocr" -> "Yuliang-Liu/Curve-Text-Detector"
"Bartzi/stn-ocr" -> "bgshih/aster"
"Bartzi/stn-ocr" -> "weinman/cnn_lstm_ctc_ocr"
"Bartzi/stn-ocr" -> "summerlvsong/Aggregation-Cross-Entropy"
"Bartzi/stn-ocr" -> "dengdan/seglink"
"Bartzi/stn-ocr" -> "emedvedev/attention-ocr"
"Bartzi/stn-ocr" -> "tonghe90/textspotter"
"Bartzi/stn-ocr" -> "Canjie-Luo/MORAN_v2"
"Bartzi/stn-ocr" -> "Jyouhou/SceneTextPapers"
"leonlulu/DeepLayout" -> "lquirosd/P2PaLA"
"leonlulu/DeepLayout" -> "dhlab-epfl/dhSegment"
"leonlulu/DeepLayout" -> "watersink/ocrsegment"
"leonlulu/DeepLayout" -> "rbaguila/document-layout-analysis"
"leonlulu/DeepLayout" -> "JaMesLiMers/Document_layout_analysis"
"leonlulu/DeepLayout" -> "phamquiluan/PubLayNet"
"leonlulu/DeepLayout" -> "BobLd/DocumentLayoutAnalysis"
"leonlulu/DeepLayout" -> "hpanwar08/detectron2"
"leonlulu/DeepLayout" -> "ibm-aur-nlp/PubLayNet"
"leonlulu/DeepLayout" -> "mawanda-jun/TableTrainNet"
"leonlulu/DeepLayout" -> "NVlabs/ocroseg"
"GlassyWing/text-detection-ocr" -> "xiaomaxiao/keras_ocr"
"GlassyWing/text-detection-ocr" -> "ooooverflow/chinese-ocr"
"GlassyWing/text-detection-ocr" -> "Sanster/text_renderer"
"GlassyWing/text-detection-ocr" -> "YCG09/chinese_ocr"
"GlassyWing/text-detection-ocr" -> "Sierkinhane/crnn_chinese_characters_rec"
"GlassyWing/text-detection-ocr" -> "yinchangchang/ocr_densenet"
"GlassyWing/text-detection-ocr" -> "xiaofengShi/CHINESE-OCR"
"GlassyWing/text-detection-ocr" -> "eragonruan/text-detection-ctpn"
"GlassyWing/text-detection-ocr" -> "felixBrave/ocr_chinese"
"GlassyWing/text-detection-ocr" -> "Canjie-Luo/MORAN_v2"
"GlassyWing/text-detection-ocr" -> "pengcao/chinese_ocr"
"GlassyWing/text-detection-ocr" -> "Li-Ming-Fan/OCR-DETECTION-CTPN"
"GlassyWing/text-detection-ocr" -> "zhang0jhon/AttentionOCR"
"GlassyWing/text-detection-ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"GlassyWing/text-detection-ocr" -> "RubanSeven/CRAFT_keras"
"chongyangtao/DeepHCCR" -> "zhongzhuoyao/HCCR-GoogLeNet"
"chongyangtao/DeepHCCR" -> "soloice/Chinese-Character-Recognition"
"chongyangtao/DeepHCCR" -> "angzhou/anchor"
"chongyangtao/DeepHCCR" -> "HCIILAB/Forward-Implementation-of-Fast-and-Compact-CNN-for-Offline-HCCR"
"chongyangtao/DeepHCCR" -> "simonwsw/cnn-zh"
"chongyangtao/DeepHCCR" -> "AmemiyaYuko/HandwrittenChineseCharacterRecognition"
"chongyangtao/DeepHCCR" -> "wangjp0408/HCCR-HWDB-tensorflow"
"chongyangtao/DeepHCCR" -> "HCIILAB/SCUT-EPT_Dataset_Release"
"chongyangtao/DeepHCCR" -> "lluisgomez/TextProposals"
"chongyangtao/DeepHCCR" -> "pavlo-melnyk/offline-HCCR"
"chongyangtao/DeepHCCR" -> "peterWon/CASIA-HWDB-Recognition"
"chongyangtao/DeepHCCR" -> "changebo/HCCG-CycleGAN" ["e"=1]
"chongyangtao/DeepHCCR" -> "MhLiao/TextBoxes"
"chongyangtao/DeepHCCR" -> "stupidZZ/Symmetry_Text_Line_Detection"
"wushilian/CRNN_Attention_OCR_Chinese" -> "A-bone1/Attention-ocr-Chinese-Version"
"wushilian/CRNN_Attention_OCR_Chinese" -> "xiaomaxiao/keras_ocr"
"wushilian/CRNN_Attention_OCR_Chinese" -> "ilovin/lstm_ctc_ocr"
"wushilian/CRNN_Attention_OCR_Chinese" -> "Belval/CRNN"
"wushilian/CRNN_Attention_OCR_Chinese" -> "chenjun2hao/Attention_ocr.pytorch"
"wushilian/CRNN_Attention_OCR_Chinese" -> "lvpengyuan/corner"
"wushilian/CRNN_Attention_OCR_Chinese" -> "bear63/sceneReco"
"wushilian/CRNN_Attention_OCR_Chinese" -> "Sierkinhane/crnn_chinese_characters_rec"
"wushilian/CRNN_Attention_OCR_Chinese" -> "weinman/cnn_lstm_ctc_ocr"
"wushilian/CRNN_Attention_OCR_Chinese" -> "da03/Attention-OCR"
"wushilian/CRNN_Attention_OCR_Chinese" -> "JarveeLee/SynthText_Chinese_version"
"wushilian/CRNN_Attention_OCR_Chinese" -> "MaybeShewill-CV/CRNN_Tensorflow"
"wushilian/CRNN_Attention_OCR_Chinese" -> "senlinuc/caffe_ocr"
"wushilian/CRNN_Attention_OCR_Chinese" -> "bgshih/aster"
"wushilian/CRNN_Attention_OCR_Chinese" -> "TJCVRS/CRNN_Tensorflow"
"AstarLight/Lets_OCR" -> "Sierkinhane/crnn_chinese_characters_rec"
"AstarLight/Lets_OCR" -> "AstarLight/CPS-OCR-Engine"
"AstarLight/Lets_OCR" -> "Sanster/text_renderer"
"AstarLight/Lets_OCR" -> "huoyijie/AdvancedEAST"
"AstarLight/Lets_OCR" -> "jiangxiluning/FOTS.PyTorch"
"AstarLight/Lets_OCR" -> "xiaofengShi/CHINESE-OCR"
"AstarLight/Lets_OCR" -> "opconty/pytorch_ctpn"
"AstarLight/Lets_OCR" -> "eragonruan/text-detection-ctpn"
"AstarLight/Lets_OCR" -> "whai362/PSENet"
"AstarLight/Lets_OCR" -> "meijieru/crnn.pytorch"
"AstarLight/Lets_OCR" -> "WenmuZhou/PSENet.pytorch"
"AstarLight/Lets_OCR" -> "chenjun2hao/Attention_ocr.pytorch"
"AstarLight/Lets_OCR" -> "xiaomaxiao/keras_ocr"
"AstarLight/Lets_OCR" -> "WenmuZhou/OCR_DataSet"
"AstarLight/Lets_OCR" -> "YCG09/chinese_ocr"
"TobiasGruening/ARU-Net" -> "lquirosd/P2PaLA"
"TobiasGruening/ARU-Net" -> "ssudholt/phocnet"
"TobiasGruening/ARU-Net" -> "DIVA-DIA/DIVA_Line_Segmentation_Evaluator"
"TobiasGruening/ARU-Net" -> "dhlab-epfl/dhSegment"
"TobiasGruening/ARU-Net" -> "DIVA-DIA/DIVA_Layout_Analysis_Evaluator"
"tongpi/basicOCR" -> "tongpi/synthtext100kCH"
"tongpi/basicOCR" -> "xiaodiu2010/TextBoxes-TensorFlow"
"tongpi/basicOCR" -> "dengdan/seglink"
"tongpi/basicOCR" -> "ilovin/lstm_ctc_ocr"
"tongpi/basicOCR" -> "chenxinpeng/SSD_scene_text_detection"
"tongpi/basicOCR" -> "JarveeLee/SynthText_Chinese_version"
"tongpi/basicOCR" -> "senlinuc/caffe_ocr"
"tongpi/basicOCR" -> "da03/Attention-OCR"
"tongpi/basicOCR" -> "wushilian/CRNN_Attention_OCR_Chinese"
"tongpi/basicOCR" -> "bear63/sceneReco"
"tongpi/basicOCR" -> "jimmyleaf/ocr_tensorflow_cnn"
"tongpi/basicOCR" -> "MhLiao/TextBoxes"
"tongpi/basicOCR" -> "wang-tf/Chinese_OCR_synthetic_data"
"tongpi/basicOCR" -> "chineseocr/chinese-ocr"
"tongpi/basicOCR" -> "pannous/tensorflow-ocr"
"mritd/idgen" -> "Revolution1/ID_generator"
"mateogianolio/ocr" -> "pannous/caffe-ocr"
"Mountchicken/Efficient-Deep-Learning" -> "shannanyinxiang/SPTS"
"Mountchicken/Efficient-Deep-Learning" -> "lcy0604/CTRNet"
"Mountchicken/Efficient-Deep-Learning" -> "lcy0604/EraseNet"
"Mountchicken/Efficient-Deep-Learning" -> "yeungchenwa/OCR-SAM"
"zhongzhuoyao/HCCR-GoogLeNet" -> "chongyangtao/DeepHCCR"
"zhongzhuoyao/HCCR-GoogLeNet" -> "HCIILAB/Forward-Implementation-of-Fast-and-Compact-CNN-for-Offline-HCCR"
"zhongzhuoyao/HCCR-GoogLeNet" -> "angzhou/anchor"
"jainammm/TableNet" -> "tomassosorio/OCR_tablenet"
"jainammm/TableNet" -> "sachinraja13/TabStructNet"
"jainammm/TableNet" -> "Sargunan/Table-Detection-using-Deep-learning"
"jainammm/TableNet" -> "Academic-Hammer/SciTSR"
"jainammm/TableNet" -> "mdv3101/CDeCNet"
"jainammm/TableNet" -> "phamquiluan/PubLayNet"
"jainammm/TableNet" -> "DevashishPrasad/CascadeTabNet"
"jainammm/TableNet" -> "Irene323/GFTE"
"jainammm/TableNet" -> "Psarpei/Multi-Type-TD-TSR"
"jainammm/TableNet" -> "ExtractTable/ExtractTable-py"
"jainammm/TableNet" -> "ibm-aur-nlp/PubTabNet"
"jainammm/TableNet" -> "eihli/image-table-ocr"
"jainammm/TableNet" -> "qurator-spk/eynollah"
"jainammm/TableNet" -> "bikash/DocumentUnderstanding"
"jainammm/TableNet" -> "shahrukhqasim/TIES-2.0"
"HotaekHan/SSTDNet" -> "BestSonny/SSTD"
"HotaekHan/SSTDNet" -> "Yuanhang8605/faster-than-ctpn-a-novel-poster-text-detector"
"HsiehYiChia/Scene-text-recognition" -> "MichalBusta/DeepTextSpotter"
"HsiehYiChia/Scene-text-recognition" -> "subokita/Robust-Text-Detection"
"mittagessen/kraken" -> "Calamari-OCR/calamari"
"mittagessen/kraken" -> "OCR4all/OCR4all"
"mittagessen/kraken" -> "OCR4all/LAREX"
"mittagessen/kraken" -> "lquirosd/P2PaLA"
"mittagessen/kraken" -> "jpuigcerver/PyLaia"
"mittagessen/kraken" -> "qurator-spk/eynollah"
"mittagessen/kraken" -> "OpenPhilology/nidaba"
"mittagessen/kraken" -> "NVlabs/ocropus3"
"mittagessen/kraken" -> "dhlab-epfl/dhSegment"
"mittagessen/kraken" -> "UB-Mannheim/ocr-fileformat"
"mittagessen/kraken" -> "HTR-United/htr-united"
"mittagessen/kraken" -> "ocropus/ocropy"
"mittagessen/kraken" -> "OCR-D/core"
"mittagessen/kraken" -> "DCGM/pero-ocr"
"mittagessen/kraken" -> "FactoDeepLearning/DAN"
"ugetdm/uget-extension" -> "ugetdm/uget-integrator"
"phantrdat/cvpr20-scatter-text-recognizer" -> "amazon-research/semimtr-text-recognition"
"phantrdat/cvpr20-scatter-text-recognizer" -> "amazon-research/textadain-robust-recognition"
"Walleclipse/ChineseAddress_OCR" -> "yinchangchang/ocr_densenet"
"Walleclipse/ChineseAddress_OCR" -> "hsddlz/faster-CTPN"
"Walleclipse/ChineseAddress_OCR" -> "ooooverflow/chinese-ocr"
"Walleclipse/ChineseAddress_OCR" -> "YCG09/chinese_ocr"
"Walleclipse/ChineseAddress_OCR" -> "Sierkinhane/crnn_chinese_characters_rec"
"Walleclipse/ChineseAddress_OCR" -> "chizhanyuefeng/Chinese_OCR_CNN-RNN-CTC"
"Walleclipse/ChineseAddress_OCR" -> "Sanster/text_renderer"
"Walleclipse/ChineseAddress_OCR" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"Walleclipse/ChineseAddress_OCR" -> "tongpi/basicOCR"
"Walleclipse/ChineseAddress_OCR" -> "xiaofengShi/CHINESE-OCR"
"Walleclipse/ChineseAddress_OCR" -> "JarveeLee/SynthText_Chinese_version"
"Walleclipse/ChineseAddress_OCR" -> "lvpengyuan/corner"
"Walleclipse/ChineseAddress_OCR" -> "marvis/ocr_attention"
"Walleclipse/ChineseAddress_OCR" -> "Canjie-Luo/MORAN_v2"
"Walleclipse/ChineseAddress_OCR" -> "wang-tf/Chinese_OCR_synthetic_data"
"kurapan/EAST" -> "huoyijie/AdvancedEAST"
"kurapan/EAST" -> "opconty/pixellink_keras" ["e"=1]
"kurapan/EAST" -> "Vipermdl/OCR_detection_IC15"
"kurapan/EAST" -> "xieyufei1993/FOTS"
"hzli-ucas/CCF-OCR" -> "linglanfeng/CCF2019-OCR"
"linglanfeng/CCF2019-OCR" -> "hzli-ucas/CCF-OCR"
"linglanfeng/CCF2019-OCR" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-fake_data_generator"
"linglanfeng/CCF2019-OCR" -> "tommyMessi/remove-stamp"
"linglanfeng/CCF2019-OCR" -> "tommyMessi/tableImageParser_tx"
"linglanfeng/CCF2019-OCR" -> "tommyMessi/crnn_ctc-centerloss"
"priyankvex/Easy-Ocr-Scanner-Android" -> "testica/text-scanner"
"Aurora11111/TextRecognitionDataGenerator" -> "Aurora11111/crnn-train-pytorch"
"liuheng92/tensorflow_PSENet" -> "whai362/PSENet"
"liuheng92/tensorflow_PSENet" -> "WenmuZhou/PSENet.pytorch"
"liuheng92/tensorflow_PSENet" -> "ZJULearning/pixel_link"
"liuheng92/tensorflow_PSENet" -> "bgshih/aster"
"liuheng92/tensorflow_PSENet" -> "huoyijie/AdvancedEAST"
"liuheng92/tensorflow_PSENet" -> "princewang1994/TextSnake.pytorch"
"liuheng92/tensorflow_PSENet" -> "WenmuZhou/PAN.pytorch"
"liuheng92/tensorflow_PSENet" -> "JarveeLee/SynthText_Chinese_version"
"liuheng92/tensorflow_PSENet" -> "lvpengyuan/corner"
"liuheng92/tensorflow_PSENet" -> "MalongTech/research-charnet"
"liuheng92/tensorflow_PSENet" -> "lvpengyuan/masktextspotter.caffe2"
"liuheng92/tensorflow_PSENet" -> "Canjie-Luo/MORAN_v2"
"liuheng92/tensorflow_PSENet" -> "MhLiao/DB"
"liuheng92/tensorflow_PSENet" -> "Sanster/text_renderer"
"liuheng92/tensorflow_PSENet" -> "jiangxiluning/FOTS.PyTorch"
"BboyHanat/TextGenerator" -> "TianzhongSong/awesome-SynthText"
"BboyHanat/TextGenerator" -> "tommyMessi/crnn_ctc-centerloss"
"BboyHanat/TextGenerator" -> "bityigoss/mtl-text-recognition"
"BboyHanat/TextGenerator" -> "novioleo/Savior"
"BboyHanat/TextGenerator" -> "MhLiao/SynthText3D"
"marvis/ocr_attention" -> "koibiki/crnn_self_attetion"
"marvis/ocr_attention" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"xuewenyuan/TGRNet" -> "xuewenyuan/ReS2TIM"
"xuewenyuan/TGRNet" -> "cv-small-snails/Awesome-Table-Recognition"
"microsoft/i-Code" -> "microsoft/UDOP"
"GXYM/TextBPN" -> "GXYM/TextPMs"
"GXYM/TextBPN" -> "GXYM/KPN"
"GXYM/TextBPN" -> "GXYM/TextBPN-Plus-Plus"
"GXYM/TextBPN" -> "GXYM/GloRe"
"GXYM/TextBPN" -> "GXYM/OHEM-loss"
"GXYM/TextBPN" -> "GXYM/GHM_Loss"
"GXYM/TextBPN" -> "GXYM/DRRG"
"GXYM/TextBPN" -> "GXYM/Focal-loss"
"Rid7/Table-OCR" -> "chineseocr/table-ocr"
"Rid7/Table-OCR" -> "tommyMessi/tableImageParser_tx"
"Rid7/Table-OCR" -> "weidafeng/TableCell"
"Rid7/Table-OCR" -> "chineseocr/table-detect"
"Rid7/Table-OCR" -> "tiantian91091317/OCR-Corrector"
"Rid7/Table-OCR" -> "Irene323/GFTE"
"Rid7/Table-OCR" -> "bitdata/ocrtable"
"Rid7/Table-OCR" -> "shahrukhqasim/TIES-2.0"
"Rid7/Table-OCR" -> "hassan-mahmood/TIES_DataGeneration"
"Rid7/Table-OCR" -> "yizt/crnn.pytorch"
"Rid7/Table-OCR" -> "BADBADBADBOY/pytorchOCR"
"Rid7/Table-OCR" -> "WenmuZhou/OCR_DataSet"
"Rid7/Table-OCR" -> "backtime92/CRAFT-Reimplementation"
"Rid7/Table-OCR" -> "Megvii-CSG/MegReader"
"Rid7/Table-OCR" -> "zcswdt/Color_OCR_image_generator"
"RubanSeven/CRAFT_keras" -> "backtime92/CRAFT-Reimplementation"
"RubanSeven/CRAFT_keras" -> "autonise/CRAFT-Remade"
"RubanSeven/CRAFT_keras" -> "guruL/Character-Region-Awareness-for-Text-Detection-"
"RubanSeven/CRAFT_keras" -> "brooklyn1900/CRAFT_pytorch"
"RubanSeven/CRAFT_keras" -> "MalongTech/research-charnet"
"RubanSeven/CRAFT_keras" -> "namedysx/CRAFT-tensorflow"
"RubanSeven/CRAFT_keras" -> "WenmuZhou/PAN.pytorch"
"RubanSeven/CRAFT_keras" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"RubanSeven/CRAFT_keras" -> "xuannianz/DifferentiableBinarization"
"RubanSeven/CRAFT_keras" -> "Yuliang-Liu/Box_Discretization_Network"
"Sargunan/Table-Detection-using-Deep-learning" -> "interviewBubble/Tabulo"
"Sargunan/Table-Detection-using-Deep-learning" -> "jainammm/TableNet"
"Sargunan/Table-Detection-using-Deep-learning" -> "ulikoehler/OTR"
"Sargunan/Table-Detection-using-Deep-learning" -> "cndplab-founder/ICDAR2019_cTDaR"
"interviewBubble/Tabulo" -> "Sargunan/Table-Detection-using-Deep-learning"
"interviewBubble/Tabulo" -> "interviewBubble/Table-Detection-using-Deep-Learning"
"interviewBubble/Tabulo" -> "mawanda-jun/TableTrainNet"
"interviewBubble/Tabulo" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"bai-shang/crnn_ctc_ocr_tf" -> "bai-shang/crnn_seq2seq_ocr_pytorch"
"bai-shang/crnn_ctc_ocr_tf" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"bai-shang/crnn_ctc_ocr_tf" -> "FLming/CRNN.tf2"
"bai-shang/crnn_ctc_ocr_tf" -> "wenwenyu/MASTER-pytorch"
"bai-shang/crnn_ctc_ocr_tf" -> "WenmuZhou/DBNet.pytorch"
"bai-shang/crnn_ctc_ocr_tf" -> "MaybeShewill-CV/CRNN_Tensorflow"
"bai-shang/crnn_ctc_ocr_tf" -> "MhLiao/DB"
"bai-shang/crnn_ctc_ocr_tf" -> "WenmuZhou/OCR_DataSet"
"bai-shang/crnn_ctc_ocr_tf" -> "summerlvsong/Aggregation-Cross-Entropy"
"bai-shang/crnn_ctc_ocr_tf" -> "WenmuZhou/PSENet.pytorch"
"bai-shang/crnn_ctc_ocr_tf" -> "Holmeyoung/crnn-pytorch"
"bai-shang/crnn_ctc_ocr_tf" -> "chineseocr/darknet-ocr"
"bai-shang/crnn_ctc_ocr_tf" -> "AstarLight/Lets_OCR"
"bai-shang/crnn_ctc_ocr_tf" -> "Sanster/text_renderer"
"bai-shang/crnn_ctc_ocr_tf" -> "chineseocr/table-ocr"
"novioleo/FOTS" -> "Vipermdl/OCR_detection_IC15"
"novioleo/FOTS" -> "JelfPann/ocr_invoice"
"novioleo/FOTS" -> "xieyufei1993/FOTS"
"novioleo/Savior" -> "wushilian/CenterNet2CharDet"
"novioleo/Savior" -> "wenwenyu/MASTER-pytorch"
"novioleo/Savior" -> "deep-practice/fake_certificate_generator"
"novioleo/Savior" -> "saicoco/SA-Text"
"qjadud1994/Text_Detector" -> "xhzdeng/stela"
"qjadud1994/Text_Detector" -> "lvpengyuan/corner"
"qjadud1994/Text_Detector" -> "yu20103983/FOTS"
"qjadud1994/Text_Detector" -> "Shun14/TextBoxes_plusplus_Tensorflow"
"qjadud1994/Text_Detector" -> "huizhang0110/AON"
"qjadud1994/Text_Detector" -> "jiangxiluning/FOTS.PyTorch"
"qjadud1994/Text_Detector" -> "SakuraRiven/EAST"
"xuannianz/DifferentiableBinarization" -> "zonasw/DBNet"
"xuannianz/DifferentiableBinarization" -> "iamrishab/DB-tf"
"xuannianz/DifferentiableBinarization" -> "RubanSeven/CRAFT_keras"
"xuannianz/DifferentiableBinarization" -> "MhLiao/DB"
"xuannianz/DifferentiableBinarization" -> "liuheng92/tensorflow_PSENet"
"zonasw/DBNet" -> "xuannianz/DifferentiableBinarization"
"Academic-Hammer/SciTSR" -> "Irene323/GFTE"
"Academic-Hammer/SciTSR" -> "ibm-aur-nlp/PubTabNet"
"Academic-Hammer/SciTSR" -> "shahrukhqasim/TIES-2.0"
"Academic-Hammer/SciTSR" -> "doc-analysis/TableBank"
"Academic-Hammer/SciTSR" -> "cndplab-founder/ICDAR2019_cTDaR"
"Academic-Hammer/SciTSR" -> "hassan-mahmood/TIES_DataGeneration"
"Academic-Hammer/SciTSR" -> "sachinraja13/TabStructNet"
"Academic-Hammer/SciTSR" -> "tommyMessi/tableImageParser_tx"
"Academic-Hammer/SciTSR" -> "DevashishPrasad/CascadeTabNet"
"Academic-Hammer/SciTSR" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"Academic-Hammer/SciTSR" -> "ibm-aur-nlp/PubLayNet"
"Academic-Hammer/SciTSR" -> "jainammm/TableNet"
"Academic-Hammer/SciTSR" -> "CharlesWu123/SPLERGE"
"Academic-Hammer/SciTSR" -> "doc-analysis/DocBank"
"Academic-Hammer/SciTSR" -> "mdv3101/CDeCNet"
"tommyMessi/waveCorrection" -> "tommyMessi/DocumentPhotoCorrection"
"tommyMessi/waveCorrection" -> "limengyang1992/seq2seq-ocr-analysis"
"tommyMessi/waveCorrection" -> "tommyMessi/remove-stamp"
"tangzhenyu/Scene-Text-Understanding" -> "bgshih/aster"
"tangzhenyu/Scene-Text-Understanding" -> "Jyouhou/SceneTextPapers"
"tangzhenyu/Scene-Text-Understanding" -> "whitelok/image-text-localization-recognition"
"tangzhenyu/Scene-Text-Understanding" -> "MhLiao/TextBoxes_plusplus"
"tangzhenyu/Scene-Text-Understanding" -> "tonghe90/textspotter"
"tangzhenyu/Scene-Text-Understanding" -> "Bartzi/see"
"tangzhenyu/Scene-Text-Understanding" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"tangzhenyu/Scene-Text-Understanding" -> "ZJULearning/pixel_link"
"tangzhenyu/Scene-Text-Understanding" -> "JarveeLee/SynthText_Chinese_version"
"tangzhenyu/Scene-Text-Understanding" -> "marvis/ocr_attention"
"tangzhenyu/Scene-Text-Understanding" -> "Yuliang-Liu/Curve-Text-Detector"
"tangzhenyu/Scene-Text-Understanding" -> "Canjie-Luo/MORAN_v2"
"tangzhenyu/Scene-Text-Understanding" -> "ZumingHuang/awesome-ocr-resources"
"tangzhenyu/Scene-Text-Understanding" -> "BestSonny/SSTD"
"tangzhenyu/Scene-Text-Understanding" -> "ankush-me/SynthText"
"HCIILAB/SCUT-EnsText" -> "neouyghur/One-stage-Mask-based-Scene-Text-Eraser"
"HCIILAB/SCUT-EnsText" -> "lcy0604/EraseNet"
"HCIILAB/SCUT-EnsText" -> "wcq19941215/SceneTextRemoval"
"bityigoss/mtl-text-recognition" -> "Wovchena/text-detection-fots.pytorch"
"chibohe/text_recognition_toolbox" -> "tommyMessi/remove-stamp"
"chibohe/text_recognition_toolbox" -> "tommyMessi/PST-table"
"chibohe/text_recognition_toolbox" -> "HCIILAB/Scene-Text-Recognition-Recommendations"
"chibohe/text_recognition_toolbox" -> "chineseocr/table-detect"
"chibohe/text_recognition_toolbox" -> "tiantian91091317/OCR-Corrector"
"chibohe/text_recognition_toolbox" -> "tommyMessi/crnn_ctc-centerloss"
"chibohe/text_recognition_toolbox" -> "whai362/AE_TextSpotter"
"chibohe/text_recognition_toolbox" -> "chineseocr/trocr-chinese"
"fengxinjie/Transformer-OCR" -> "opconty/Transformer_STR"
"fengxinjie/Transformer-OCR" -> "Wang-Tianwei/Decoupled-attention-network"
"fengxinjie/Transformer-OCR" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"fengxinjie/Transformer-OCR" -> "chenjun2hao/Bert_OCR.pytorch"
"fengxinjie/Transformer-OCR" -> "MalongTech/research-charnet"
"fengxinjie/Transformer-OCR" -> "HCIILAB/Scene-Text-Recognition"
"fengxinjie/Transformer-OCR" -> "summerlvsong/Aggregation-Cross-Entropy"
"fengxinjie/Transformer-OCR" -> "Canjie-Luo/Text-Image-Augmentation"
"fengxinjie/Transformer-OCR" -> "chenjun2hao/Attention_ocr.pytorch"
"fengxinjie/Transformer-OCR" -> "Bartzi/kiss"
"fengxinjie/Transformer-OCR" -> "chenjun2hao/SRN.pytorch"
"fengxinjie/Transformer-OCR" -> "backtime92/CRAFT-Reimplementation"
"fengxinjie/Transformer-OCR" -> "RubanSeven/Text-Image-Augmentation-python"
"fengxinjie/Transformer-OCR" -> "Canjie-Luo/MORAN_v2"
"fengxinjie/Transformer-OCR" -> "Megvii-CSG/MegReader"
"liuheng92/OCR_EVALUATION" -> "clovaai/TedEval"
"liuheng92/OCR_EVALUATION" -> "liuheng92/tensorflow_PSENet"
"liuheng92/OCR_EVALUATION" -> "lvpengyuan/corner"
"microsoft/table-transformer" -> "cv-small-snails/Awesome-Table-Recognition"
"microsoft/table-transformer" -> "JiaquanYe/TableMASTER-mmocr"
"microsoft/table-transformer" -> "ibm-aur-nlp/PubTabNet"
"microsoft/table-transformer" -> "hikopensource/DAVAR-Lab-OCR"
"microsoft/table-transformer" -> "deepdoctection/deepdoctection"
"microsoft/table-transformer" -> "phamquiluan/table-transformer"
"microsoft/table-transformer" -> "shabie/docformer"
"microsoft/table-transformer" -> "IBM/SynthTabNet"
"microsoft/table-transformer" -> "DevashishPrasad/CascadeTabNet"
"microsoft/table-transformer" -> "tommyMessi/tableImageParser_tx"
"microsoft/table-transformer" -> "Psarpei/Multi-Type-TD-TSR"
"microsoft/table-transformer" -> "jpWang/LiLT"
"microsoft/table-transformer" -> "doc-analysis/DocBank"
"microsoft/table-transformer" -> "wenwenyu/PICK-pytorch"
"microsoft/table-transformer" -> "tstanislawek/awesome-document-understanding"
"mlpc-ucsd/TESTR" -> "mxin262/SwinTextSpotter"
"mlpc-ucsd/TESTR" -> "shannanyinxiang/SPTS"
"mlpc-ucsd/TESTR" -> "amazon-research/glass-text-spotting"
"mlpc-ucsd/TESTR" -> "google-research-datasets/hiertext"
"mlpc-ucsd/TESTR" -> "Yuliang-Liu/SPTSv2"
"mlpc-ucsd/TESTR" -> "weijiawu/TransVTSpotter"
"mlpc-ucsd/TESTR" -> "ymy-k/DPText-DETR"
"whai362/AE_TextSpotter" -> "whai362/TDA-ReCTS"
"zcswdt/Color_OCR_image_generator" -> "tommyMessi/crnn_ctc-centerloss"
"zcswdt/Color_OCR_image_generator" -> "afterimagex/PlateGen"
"jugg1024/Text-Detection-with-FRCN" -> "chenxinpeng/SSD_scene_text_detection"
"jugg1024/Text-Detection-with-FRCN" -> "stupidZZ/FCN_Text"
"jugg1024/Text-Detection-with-FRCN" -> "oyxhust/ssd-text_detection"
"jugg1024/Text-Detection-with-FRCN" -> "MhLiao/TextBoxes"
"jugg1024/Text-Detection-with-FRCN" -> "lluisgomez/TextProposals"
"jugg1024/Text-Detection-with-FRCN" -> "MichalBusta/FASText"
"jugg1024/Text-Detection-with-FRCN" -> "BestSonny/SSTD"
"xieyufei1993/FOTS" -> "Vipermdl/OCR_detection_IC15"
"xieyufei1993/FOTS" -> "jiangxiluning/FOTS.PyTorch"
"xieyufei1993/FOTS" -> "lvpengyuan/masktextspotter.caffe2"
"xieyufei1993/FOTS" -> "xieyufei1993/InceptText-Tensorflow"
"xieyufei1993/FOTS" -> "novioleo/FOTS"
"xieyufei1993/FOTS" -> "Pay20Y/FOTS_TF"
"xieyufei1993/FOTS" -> "chenjun2hao/FOTS.pytorch"
"xieyufei1993/FOTS" -> "Wovchena/text-detection-fots.pytorch"
"xieyufei1993/FOTS" -> "yu20103983/FOTS"
"xieyufei1993/FOTS" -> "huizhang0110/AON"
"xieyufei1993/FOTS" -> "tonghe90/textspotter"
"JiananLi2016/LayoutGAN-Tensorflow" -> "jianh1994/layoutgan"
"JiananLi2016/LayoutGAN-Tensorflow" -> "billzhonggz/LayoutGAN"
"JiananLi2016/LayoutGAN-Tensorflow" -> "ktrk115/const_layout"
"DocCreator/DocCreator" -> "NVlabs/ocrodeg"
"tmbdev/hocr-tools" -> "UB-Mannheim/ocr-fileformat"
"tmbdev/hocr-tools" -> "kba/hocrjs"
"tmbdev/hocr-tools" -> "kba/hocr-spec"
"tmbdev/hocr-tools" -> "dinosauria123/gcv2hocr"
"tmbdev/hocr-tools" -> "filak/hOCR-to-ALTO"
"tmbdev/hocr-tools" -> "not-implemented/hocr-proofreader"
"FBDevCLagos/The-Internship-v1" -> "OpesanyaAdebayo/systems-design" ["e"=1]
"FBDevCLagos/The-Internship-v1" -> "informatici/openhospital"
"FBDevCLagos/The-Internship-v1" -> "oscommunityafrica/oscommunityafrica.github.io"
"ocropus/ocropy" -> "mittagessen/kraken"
"ocropus/ocropy" -> "tberg12/ocular"
"ocropus/ocropy" -> "Calamari-OCR/calamari"
"ocropus/ocropy" -> "ocropus/hocr-tools"
"ocropus/ocropy" -> "ocropus/ocropus4"
"ocropus/ocropy" -> "BobLd/DocumentLayoutAnalysis"
"ocropus/ocropy" -> "rbaguila/document-layout-analysis"
"ExtractTable/ExtractTable-py" -> "eihli/image-table-ocr"
"ExtractTable/ExtractTable-py" -> "jainammm/TableNet"
"ExtractTable/ExtractTable-py" -> "qurator-spk/eynollah"
"CharlesWu123/SPLERGE" -> "pyxploiter/deep-splerge"
"CharlesWu123/SPLERGE" -> "hassan-mahmood/TIES_DataGeneration"
"cv-small-snails/Awesome-Table-Recognition" -> "WenmuZhou/TableGeneration"
"cv-small-snails/Awesome-Table-Recognition" -> "JiaquanYe/TableMASTER-mmocr"
"cv-small-snails/Awesome-Table-Recognition" -> "xuewenyuan/TGRNet"
"cv-small-snails/Awesome-Table-Recognition" -> "microsoft/table-transformer"
"cv-small-snails/Awesome-Table-Recognition" -> "ibm-aur-nlp/PubTabNet"
"cv-small-snails/Awesome-Table-Recognition" -> "Psarpei/Multi-Type-TD-TSR"
"cv-small-snails/Awesome-Table-Recognition" -> "IBM/SynthTabNet"
"cv-small-snails/Awesome-Table-Recognition" -> "hikopensource/DAVAR-Lab-OCR"
"cv-small-snails/Awesome-Table-Recognition" -> "bigcash/awesome-ai-list-guide"
"cv-small-snails/Awesome-Table-Recognition" -> "CharlesWu123/SPLERGE"
"cv-small-snails/Awesome-Table-Recognition" -> "wangwen-whu/WTW-Dataset"
"cv-small-snails/Awesome-Table-Recognition" -> "wenwenyu/MASTER-pytorch"
"cv-small-snails/Awesome-Table-Recognition" -> "pyxploiter/deep-splerge"
"cv-small-snails/Awesome-Table-Recognition" -> "tommyMessi/tableImageParser_tx"
"cv-small-snails/Awesome-Table-Recognition" -> "phamquiluan/table-transformer"
"mjq11302010044/RRPN" -> "mjq11302010044/RRPN_pytorch" ["e"=1]
"mjq11302010044/RRPN" -> "yangxue0827/R2CNN_FPN_Tensorflow" ["e"=1]
"mjq11302010044/RRPN" -> "MhLiao/TextBoxes_plusplus"
"mjq11302010044/RRPN" -> "xhzdeng/crpn"
"mjq11302010044/RRPN" -> "Yuliang-Liu/Curve-Text-Detector"
"mjq11302010044/RRPN" -> "liulei01/DRBox" ["e"=1]
"mjq11302010044/RRPN" -> "DetectionTeamUCAS/RRPN_Faster-RCNN_Tensorflow" ["e"=1]
"mjq11302010044/RRPN" -> "ZJULearning/pixel_link"
"mjq11302010044/RRPN" -> "yangxue0827/R-DFPN_FPN_Tensorflow" ["e"=1]
"mjq11302010044/RRPN" -> "dengdan/seglink"
"mjq11302010044/RRPN" -> "tonghe90/textspotter"
"mjq11302010044/RRPN" -> "mjq11302010044/RRPN_plusplus" ["e"=1]
"mjq11302010044/RRPN" -> "lvpengyuan/masktextspotter.caffe2"
"mjq11302010044/RRPN" -> "BestSonny/SSTD"
"mjq11302010044/RRPN" -> "bgshih/seglink"
"pyxploiter/deep-splerge" -> "CharlesWu123/SPLERGE"
"pyxploiter/deep-splerge" -> "fireae/Split_Merge_table_recognition"
"BADBADBADBOY/DBnet-lite.pytorch" -> "BADBADBADBOY/genete_ocr_data"
"BADBADBADBOY/DBnet-lite.pytorch" -> "BADBADBADBOY/pytorchOCR"
"BobLd/DocumentLayoutAnalysis" -> "lquirosd/P2PaLA"
"BobLd/DocumentLayoutAnalysis" -> "doc-analysis/DocBank"
"BobLd/DocumentLayoutAnalysis" -> "ibm-aur-nlp/PubLayNet"
"BobLd/DocumentLayoutAnalysis" -> "leonlulu/DeepLayout"
"BobLd/DocumentLayoutAnalysis" -> "hpanwar08/detectron2"
"BobLd/DocumentLayoutAnalysis" -> "rbaguila/document-layout-analysis"
"BobLd/DocumentLayoutAnalysis" -> "qurator-spk/eynollah"
"BobLd/DocumentLayoutAnalysis" -> "BobLd/simple-docstrum"
"BobLd/DocumentLayoutAnalysis" -> "dhlab-epfl/dhSegment"
"BobLd/DocumentLayoutAnalysis" -> "shahrukhqasim/TIES-2.0"
"BobLd/DocumentLayoutAnalysis" -> "phamquiluan/PubLayNet"
"BobLd/DocumentLayoutAnalysis" -> "mdv3101/CDeCNet"
"BobLd/DocumentLayoutAnalysis" -> "tstanislawek/awesome-document-understanding"
"BobLd/DocumentLayoutAnalysis" -> "shabie/docformer"
"BobLd/DocumentLayoutAnalysis" -> "doc-analysis/TableBank"
"ibm-aur-nlp/PubLayNet" -> "ibm-aur-nlp/PubTabNet"
"ibm-aur-nlp/PubLayNet" -> "doc-analysis/DocBank"
"ibm-aur-nlp/PubLayNet" -> "hpanwar08/detectron2"
"ibm-aur-nlp/PubLayNet" -> "phamquiluan/PubLayNet"
"ibm-aur-nlp/PubLayNet" -> "shahrukhqasim/TIES-2.0"
"ibm-aur-nlp/PubLayNet" -> "BobLd/DocumentLayoutAnalysis"
"ibm-aur-nlp/PubLayNet" -> "doc-analysis/TableBank"
"ibm-aur-nlp/PubLayNet" -> "cvlab-stonybrook/DewarpNet"
"ibm-aur-nlp/PubLayNet" -> "wenwenyu/PICK-pytorch"
"ibm-aur-nlp/PubLayNet" -> "hikopensource/DAVAR-Lab-OCR"
"ibm-aur-nlp/PubLayNet" -> "lquirosd/P2PaLA"
"ibm-aur-nlp/PubLayNet" -> "DevashishPrasad/CascadeTabNet"
"ibm-aur-nlp/PubLayNet" -> "Academic-Hammer/SciTSR"
"ibm-aur-nlp/PubLayNet" -> "dhlab-epfl/dhSegment"
"ibm-aur-nlp/PubLayNet" -> "Irene323/GFTE"
"rbaguila/document-layout-analysis" -> "leonlulu/DeepLayout"
"Raymondhhh90/idcardocr" -> "isee15/Card-Ocr"
"Raymondhhh90/idcardocr" -> "still-wait/deepLearning_OCR"
"Raymondhhh90/idcardocr" -> "sam-ke/idCardOcr"
"Raymondhhh90/idcardocr" -> "jimmyleaf/ocr_tensorflow_cnn"
"Raymondhhh90/idcardocr" -> "portumo/chinese-bankCard-idcard-recognition"
"Raymondhhh90/idcardocr" -> "JinpengLI/deep_ocr"
"Raymondhhh90/idcardocr" -> "Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement"
"Raymondhhh90/idcardocr" -> "XieZhiFa/IdCardOCR" ["e"=1]
"Raymondhhh90/idcardocr" -> "yinchangchang/ocr_densenet"
"hs105/Deep-Learning-for-OCR" -> "pannous/tensorflow-ocr"
"hs105/Deep-Learning-for-OCR" -> "mathDR/reading-text-in-the-wild"
"hs105/Deep-Learning-for-OCR" -> "chongyangtao/Awesome-Scene-Text-Recognition"
"hs105/Deep-Learning-for-OCR" -> "da03/Attention-OCR"
"hs105/Deep-Learning-for-OCR" -> "emedvedev/attention-ocr"
"hs105/Deep-Learning-for-OCR" -> "Bartzi/stn-ocr"
"hs105/Deep-Learning-for-OCR" -> "MhLiao/TextBoxes"
"hs105/Deep-Learning-for-OCR" -> "BestSonny/SSTD"
"hs105/Deep-Learning-for-OCR" -> "lluisgomez/TextProposals"
"hs105/Deep-Learning-for-OCR" -> "weinman/cnn_lstm_ctc_ocr"
"hs105/Deep-Learning-for-OCR" -> "oyxhust/CNN-LSTM-CTC-text-recognition"
"TannerGilbert/Tutorials" -> "dudeperf3ct/DL_Notebooks"
"TannerGilbert/Tutorials" -> "alankbi/detecto"
"TannerGilbert/Tutorials" -> "Jcharis/Machine-Learning-Web-Apps" ["e"=1]
"mzucker/page_dewarp" -> "xellows1305/Document-Image-Dewarping"
"mzucker/page_dewarp" -> "cvlab-stonybrook/DewarpNet"
"mzucker/page_dewarp" -> "mzucker/unproject_text"
"mzucker/page_dewarp" -> "phulin/rebook"
"mzucker/page_dewarp" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"mzucker/page_dewarp" -> "xiaoyu258/DocProj"
"mzucker/page_dewarp" -> "mzucker/noteshrink" ["e"=1]
"mzucker/page_dewarp" -> "thomasjhuang/deep-learning-for-document-dewarping"
"mzucker/page_dewarp" -> "scantailor/scantailor"
"mzucker/page_dewarp" -> "zacharywhitley/awesome-ocr"
"mzucker/page_dewarp" -> "DanBloomberg/leptonica"
"mzucker/page_dewarp" -> "dhlab-epfl/dhSegment"
"mzucker/page_dewarp" -> "lmmx/page-dewarp"
"mzucker/page_dewarp" -> "sbrunner/deskew"
"mzucker/page_dewarp" -> "DVLP-CMATERJU/RectiNet"
"teresasun/docUnet.pytorch" -> "wuleiaty/DocUNet"
"teresasun/docUnet.pytorch" -> "mhashas/Document-Image-Unwarping-pytorch"
"teresasun/docUnet.pytorch" -> "sagniklp/doc3D-renderer"
"teresasun/docUnet.pytorch" -> "cvlab-stonybrook/DewarpNet"
"teresasun/docUnet.pytorch" -> "DVLP-CMATERJU/RectiNet"
"teresasun/docUnet.pytorch" -> "cvlab-stonybrook/doc3D-dataset"
"BADBADBADBOY/pytorch.ctpn" -> "opconty/pytorch_ctpn"
"BADBADBADBOY/pytorch.ctpn" -> "CrazySummerday/ctpn.pytorch"
"BADBADBADBOY/pytorch.ctpn" -> "BADBADBADBOY/genete_ocr_data"
"jpWang/LiLT" -> "shabie/docformer"
"jpWang/LiLT" -> "clovaai/bros"
"jpWang/LiLT" -> "microsoft/UDOP"
"jpWang/LiLT" -> "microsoft/i-Code"
"jpWang/LiLT" -> "wenwenyu/PICK-pytorch"
"jpWang/LiLT" -> "yeungchenwa/OCR-SAM"
"jpWang/LiLT" -> "tstanislawek/awesome-document-understanding"
"jpWang/LiLT" -> "PaddlePaddle/VIMER"
"jpWang/LiLT" -> "deepdoctection/deepdoctection"
"jpWang/LiLT" -> "clovaai/spade"
"jpWang/LiLT" -> "HCIILAB/EPHOIE"
"jpWang/LiLT" -> "hikopensource/DAVAR-Lab-OCR"
"jpWang/LiLT" -> "lcy0604/EraseNet"
"jpWang/LiLT" -> "applicaai/lambert"
"jpWang/LiLT" -> "rossumai/docile"
"SakuraRiven/EAST" -> "songdejia/EAST"
"SakuraRiven/EAST" -> "jiangxiluning/FOTS.PyTorch"
"SakuraRiven/EAST" -> "huoyijie/AdvancedEAST"
"SakuraRiven/EAST" -> "WenmuZhou/DBNet.pytorch"
"SakuraRiven/EAST" -> "whai362/PSENet"
"SakuraRiven/EAST" -> "MhLiao/DB"
"SakuraRiven/EAST" -> "lvpengyuan/corner"
"SakuraRiven/EAST" -> "whai362/pan_pp.pytorch"
"SakuraRiven/EAST" -> "opconty/pytorch_ctpn"
"SakuraRiven/EAST" -> "MalongTech/research-charnet"
"SakuraRiven/EAST" -> "xieyufei1993/FOTS"
"SakuraRiven/EAST" -> "ayumiymk/aster.pytorch"
"SakuraRiven/EAST" -> "Yuliang-Liu/bezier_curve_text_spotting"
"SakuraRiven/EAST" -> "HCIILAB/Scene-Text-Recognition"
"SakuraRiven/EAST" -> "MhLiao/MaskTextSpotterV3"
"Holmeyoung/crnn-pytorch" -> "Sierkinhane/CRNN_Chinese_Characters_Rec"
"Holmeyoung/crnn-pytorch" -> "meijieru/crnn.pytorch"
"Holmeyoung/crnn-pytorch" -> "GitYCC/crnn-pytorch"
"Holmeyoung/crnn-pytorch" -> "WenmuZhou/DBNet.pytorch"
"Holmeyoung/crnn-pytorch" -> "opconty/pytorch_ctpn"
"Holmeyoung/crnn-pytorch" -> "bai-shang/crnn_seq2seq_ocr_pytorch"
"Holmeyoung/crnn-pytorch" -> "yizt/crnn.pytorch"
"Holmeyoung/crnn-pytorch" -> "chenjun2hao/Attention_ocr.pytorch"
"Holmeyoung/crnn-pytorch" -> "courao/ocr.pytorch"
"Holmeyoung/crnn-pytorch" -> "lvpengyuan/corner"
"Holmeyoung/crnn-pytorch" -> "WenmuZhou/OCR_DataSet"
"Holmeyoung/crnn-pytorch" -> "Canjie-Luo/Text-Image-Augmentation"
"Holmeyoung/crnn-pytorch" -> "MhLiao/DB"
"Holmeyoung/crnn-pytorch" -> "Canjie-Luo/MORAN_v2"
"Holmeyoung/crnn-pytorch" -> "zhang0jhon/AttentionOCR"
"MhLiao/SynthText3D" -> "Jyouhou/UnrealText"
"MhLiao/SynthText3D" -> "fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes"
"MhLiao/SynthText3D" -> "youdao-ai/SRNet"
"brooklyn1900/CRAFT_pytorch" -> "backtime92/CRAFT-Reimplementation"
"xhzdeng/stela" -> "xhzdeng/crpn"
"ChanChiChoi/awesome-ocr" -> "HCIILAB/Scene-Text-Recognition"
"ChanChiChoi/awesome-ocr" -> "ZumingHuang/awesome-ocr-resources"
"ChanChiChoi/awesome-ocr" -> "Wang-Tianwei/Decoupled-attention-network"
"ChanChiChoi/awesome-ocr" -> "Jyouhou/SceneTextPapers"
"ChanChiChoi/awesome-ocr" -> "Canjie-Luo/MORAN_v2"
"ChanChiChoi/awesome-ocr" -> "whitelok/image-text-localization-recognition"
"ChanChiChoi/awesome-ocr" -> "cs-chan/Total-Text-Dataset"
"ChanChiChoi/awesome-ocr" -> "bgshih/aster"
"ChanChiChoi/awesome-ocr" -> "TianzhongSong/awesome-SynthText"
"ChanChiChoi/awesome-ocr" -> "HCIILAB/Scene-Text-Detection"
"ChanChiChoi/awesome-ocr" -> "whai362/PSENet"
"ChanChiChoi/awesome-ocr" -> "lvpengyuan/corner"
"ChanChiChoi/awesome-ocr" -> "yflv-yanxia/scene_text"
"ChanChiChoi/awesome-ocr" -> "hwalsuklee/awesome-deep-text-detection-recognition"
"ChanChiChoi/awesome-ocr" -> "WenmuZhou/OCR_DataSet"
"doc-analysis/XFUND" -> "applicaai/lambert"
"doc-analysis/XFUND" -> "ruifcruz/sroie-on-layoutlm"
"lcy0604/CTRNet" -> "wcq19941215/SceneTextRemoval"
"wenwenyu/TCM" -> "shannanyinxiang/SPTS"
"masyagin1998/robin" -> "ajgallego/document-image-binarization"
"masyagin1998/robin" -> "masyagin1998/CSC"
"masyagin1998/robin" -> "masyagin1998/gcc-plugin-guide"
"masyagin1998/robin" -> "qurator-spk/sbb_binarization"
"masyagin1998/robin" -> "masyagin1998/HSV"
"masyagin1998/robin" -> "thomasjhuang/deep-learning-for-document-dewarping"
"masyagin1998/robin" -> "lquirosd/P2PaLA"
"FangShancheng/conv-ensemble-str" -> "fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes"
"synckey/tensorflow_lstm_ctc_ocr" -> "jimmyleaf/ocr_tensorflow_cnn"
"synckey/tensorflow_lstm_ctc_ocr" -> "ilovin/lstm_ctc_ocr"
"synckey/tensorflow_lstm_ctc_ocr" -> "igormq/ctc_tensorflow_example" ["e"=1]
"synckey/tensorflow_lstm_ctc_ocr" -> "oyxhust/CNN-LSTM-CTC-text-recognition"
"synckey/tensorflow_lstm_ctc_ocr" -> "watsonyanghx/CNN_LSTM_CTC_Tensorflow"
"synckey/tensorflow_lstm_ctc_ocr" -> "weinman/cnn_lstm_ctc_ocr"
"synckey/tensorflow_lstm_ctc_ocr" -> "aaron-xichen/cnn-lstm-ctc" ["e"=1]
"synckey/tensorflow_lstm_ctc_ocr" -> "jonrein/tensorflow_CTC_example" ["e"=1]
"synckey/tensorflow_lstm_ctc_ocr" -> "da03/Attention-OCR"
"synckey/tensorflow_lstm_ctc_ocr" -> "Li-Ming-Fan/OCR-CRNN-CTC"
"FLming/CRNN.tf2" -> "alleveenstra/attentionocr"
"FLming/CRNN.tf2" -> "bai-shang/crnn_ctc_ocr_tf"
"FLming/CRNN.tf2" -> "RaidasGrisk/tf2-crnn"
"weinman/cnn_lstm_ctc_ocr" -> "watsonyanghx/CNN_LSTM_CTC_Tensorflow"
"weinman/cnn_lstm_ctc_ocr" -> "oyxhust/CNN-LSTM-CTC-text-recognition"
"weinman/cnn_lstm_ctc_ocr" -> "ilovin/lstm_ctc_ocr"
"weinman/cnn_lstm_ctc_ocr" -> "da03/Attention-OCR"
"weinman/cnn_lstm_ctc_ocr" -> "emedvedev/attention-ocr"
"weinman/cnn_lstm_ctc_ocr" -> "Bartzi/stn-ocr"
"weinman/cnn_lstm_ctc_ocr" -> "wushilian/CRNN_Attention_OCR_Chinese"
"weinman/cnn_lstm_ctc_ocr" -> "MaybeShewill-CV/CRNN_Tensorflow"
"weinman/cnn_lstm_ctc_ocr" -> "bgshih/aster"
"weinman/cnn_lstm_ctc_ocr" -> "Bartzi/see"
"weinman/cnn_lstm_ctc_ocr" -> "A-bone1/Attention-ocr-Chinese-Version"
"weinman/cnn_lstm_ctc_ocr" -> "synckey/tensorflow_lstm_ctc_ocr"
"weinman/cnn_lstm_ctc_ocr" -> "MhLiao/TextBoxes_plusplus"
"weinman/cnn_lstm_ctc_ocr" -> "bgshih/crnn"
"weinman/cnn_lstm_ctc_ocr" -> "pannous/tensorflow-ocr"
"Tenrec-Builders/pi-scan" -> "DIYBookScanner/spreads"
"Tenrec-Builders/pi-scan" -> "DIYBookScanner/spreadpi"
"Flameeyes/unpaper" -> "scantailor/scantailor"
"Flameeyes/unpaper" -> "tmbdev/hocr-tools"
"Flameeyes/unpaper" -> "unpaper/unpaper"
"Flameeyes/unpaper" -> "tmbdev/das2018-tutorial"
"hassan-mahmood/TIES_DataGeneration" -> "shahrukhqasim/TIES-2.0"
"hassan-mahmood/TIES_DataGeneration" -> "CharlesWu123/SPLERGE"
"hassan-mahmood/TIES_DataGeneration" -> "Irene323/GFTE"
"hassan-mahmood/TIES_DataGeneration" -> "ibm-aur-nlp/PubTabNet"
"hassan-mahmood/TIES_DataGeneration" -> "tommyMessi/tableImageParser_tx"
"josch/img2pdf" -> "trufanov-nok/scantailor-universal"
"antoinedelplace/Chargrid" -> "sam-ai/BertGrid"
"antoinedelplace/Chargrid" -> "sciencefictionlab/chargrid-pytorch"
"Tulon/scantailor" -> "trufanov-nok/scantailor"
"yb85/scantailor-advanced-osx" -> "trufanov-nok/scantailor"
"ugetdm/uget-windows-installer" -> "ugetdm/uget-integrator"
"ugetdm/uget-windows-installer" -> "ugetdm/uget-extension"
"hpanwar08/detectron2" -> "phamquiluan/PubLayNet"
"hpanwar08/detectron2" -> "ibm-aur-nlp/PubLayNet"
"hpanwar08/detectron2" -> "BobLd/DocumentLayoutAnalysis"
"hpanwar08/detectron2" -> "lquirosd/P2PaLA"
"hpanwar08/detectron2" -> "leonlulu/DeepLayout"
"hpanwar08/detectron2" -> "doc-analysis/DocBank"
"hpanwar08/detectron2" -> "mdv3101/CDeCNet"
"SiKang123/ocrTest" -> "SiKang123/ImgTranslator"
"bgshih/seglink" -> "dengdan/seglink"
"bgshih/seglink" -> "BestSonny/SSTD"
"bgshih/seglink" -> "tonghe90/textspotter"
"bgshih/seglink" -> "MhLiao/TextBoxes"
"bgshih/seglink" -> "ZJULearning/pixel_link"
"bgshih/seglink" -> "JarveeLee/SynthText_Chinese_version"
"bgshih/seglink" -> "MichalBusta/DeepTextSpotter"
"bgshih/seglink" -> "stupidZZ/FCN_Text"
"bgshih/seglink" -> "MhLiao/TextBoxes_plusplus"
"bgshih/seglink" -> "xhzdeng/crpn"
"bgshih/seglink" -> "Yuliang-Liu/Curve-Text-Detector"
"bgshih/seglink" -> "lvpengyuan/masktextspotter.caffe2"
"bgshih/seglink" -> "lluisgomez/TextProposals"
"bgshih/seglink" -> "TJCVRS/CRNN_Tensorflow"
"bgshih/seglink" -> "mjq11302010044/RRPN"
"sam-ke/idCardOcr" -> "bigppwong/idcardocr"
"HaozhengLi/EAST_ICPR" -> "zfxxfeng/cnn_lstm_ctc_ocr_for_ICPR"
"HaozhengLi/EAST_ICPR" -> "deepthinking-qichao/EAST_ICPR2018"
"HaozhengLi/EAST_ICPR" -> "xieyufei1993/InceptText-Tensorflow"
"billzhonggz/LayoutGAN" -> "JiananLi2016/LayoutGAN-Tensorflow"
"billzhonggz/LayoutGAN" -> "ktrk115/const_layout"
"billzhonggz/LayoutGAN" -> "jianh1994/layoutgan"
"billzhonggz/LayoutGAN" -> "zyf12389/LayoutGAN-Alpha"
"billzhonggz/LayoutGAN" -> "Layout-Generation/layout-generation"
"cvlab-stonybrook/doc3D-dataset" -> "sagniklp/doc3D-renderer"
"cvlab-stonybrook/doc3D-dataset" -> "cvlab-stonybrook/DewarpNet"
"cvlab-stonybrook/doc3D-dataset" -> "xiaoyu258/DocProj"
"cvlab-stonybrook/doc3D-dataset" -> "cvlab-stonybrook/PaperEdge"
"cvlab-stonybrook/doc3D-dataset" -> "mhashas/Document-Image-Unwarping-pytorch"
"cvlab-stonybrook/doc3D-dataset" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"cvlab-stonybrook/doc3D-dataset" -> "cvlab-stonybrook/DocIIW"
"cvlab-stonybrook/doc3D-dataset" -> "teresasun/docUnet.pytorch"
"xiaoyu258/DocProj" -> "cvlab-stonybrook/DewarpNet"
"xiaoyu258/DocProj" -> "cvlab-stonybrook/doc3D-dataset"
"xiaoyu258/DocProj" -> "fh2019ustc/DocTr"
"xiaoyu258/DocProj" -> "phulin/rebook"
"xiaoyu258/DocProj" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"xiaoyu258/DocProj" -> "cvlab-stonybrook/PaperEdge"
"xiaoyu258/DocProj" -> "DVLP-CMATERJU/RectiNet"
"xiaoyu258/DocProj" -> "sagniklp/doc3D-renderer"
"xiaoyu258/DocProj" -> "xellows1305/Document-Image-Dewarping"
"xiaoyu258/DocProj" -> "fh2019ustc/Awesome-Document-Image-Rectification"
"xiaoyu258/DocProj" -> "Megvii-CSG/MegReader"
"xiaoyu258/DocProj" -> "Yuliang-Liu/Box_Discretization_Network"
"xiaoyu258/DocProj" -> "Wang-Tianwei/Decoupled-attention-network"
"xiaoyu258/DocProj" -> "summerlvsong/Aggregation-Cross-Entropy"
"xiaoyu258/DocProj" -> "ibm-aur-nlp/PubLayNet"
"bloomberg/scatteract" -> "soap117/DeepRule"
"lluisgomez/TextProposals" -> "MichalBusta/FASText"
"lluisgomez/TextProposals" -> "MhLiao/TextBoxes"
"lluisgomez/TextProposals" -> "zchengquan/TextDetector"
"lluisgomez/TextProposals" -> "BestSonny/SSTD"
"lluisgomez/TextProposals" -> "lluisgomez/text_extraction"
"lluisgomez/TextProposals" -> "subokita/Robust-Text-Detection"
"lluisgomez/TextProposals" -> "stupidZZ/FCN_Text"
"lluisgomez/TextProposals" -> "jugg1024/Text-Detection-with-FRCN"
"lluisgomez/TextProposals" -> "aperrau/DetectText"
"lluisgomez/TextProposals" -> "stupidZZ/Symmetry_Text_Line_Detection"
"lluisgomez/TextProposals" -> "bgshih/seglink"
"lluisgomez/TextProposals" -> "MichalBusta/DeepTextSpotter"
"yestinsong/Text-Detection" -> "subokita/Robust-Text-Detection"
"yestinsong/Text-Detection" -> "aperrau/DetectText"
"yestinsong/Text-Detection" -> "ploverpang/HeadlineDetectionBySWT"
"GitYCC/crnn-pytorch" -> "Holmeyoung/crnn-pytorch"
"GitYCC/crnn-pytorch" -> "dredwardhyde/crnn-ctc-loss-pytorch"
"tommyMessi/PST-table" -> "tommyMessi/remove-stamp"
"tommyMessi/PST-table" -> "tommyMessi/tableImageParser_tx"
"tommyMessi/PST-table" -> "tommyMessi/DocumentPhotoCorrection"
"tommyMessi/PST-table" -> "JiaquanYe/MASTER-mmocr"
"tommyMessi/PST-table" -> "JiaquanYe/TableMASTER-mmocr"
"mdv3101/CDeCNet" -> "sachinraja13/TabStructNet"
"mdv3101/CDeCNet" -> "phamquiluan/PubLayNet"
"mdv3101/CDeCNet" -> "tomassosorio/OCR_tablenet"
"mdv3101/CDeCNet" -> "abdoelsayed2016/TNCR_Dataset"
"mdv3101/CDeCNet" -> "Irene323/GFTE"
"mdv3101/CDeCNet" -> "shahrukhqasim/TIES-2.0"
"mdv3101/CDeCNet" -> "dhavalpotdar/Graph-Convolution-on-Structured-Documents"
"alexcohn/tess-two" -> "adaptech-cz/Tesseract4Android"
"alexcohn/tess-two" -> "zsmartercn/Tess4Android"
"xhzdeng/crpn" -> "BestSonny/SSTD"
"xhzdeng/crpn" -> "xhzdeng/stela"
"xhzdeng/crpn" -> "MhLiao/RRD"
"xhzdeng/crpn" -> "mjq11302010044/RRPN"
"xhzdeng/crpn" -> "tonghe90/textspotter"
"SubhamTyagi/android-ocr" -> "adaptech-cz/Tesseract4Android"
"ZeroAct/SceneTextRemover-pytorch" -> "neouyghur/One-stage-Mask-based-Scene-Text-Eraser"
"tesseract4java/tesseract4java" -> "piersy/BasicTesseractExample"
"cvlab-stonybrook/PaperEdge" -> "fh2019ustc/DocGeoNet"
"chenxinpeng/SSD_scene_text_detection" -> "xiaodiu2010/TextBoxes-TensorFlow"
"chenxinpeng/SSD_scene_text_detection" -> "jugg1024/Text-Detection-with-FRCN"
"chenxinpeng/SSD_scene_text_detection" -> "oyxhust/ssd-text_detection"
"chenxinpeng/SSD_scene_text_detection" -> "hyh21521038/ssd-plate_detection" ["e"=1]
"chenxinpeng/SSD_scene_text_detection" -> "MhLiao/TextBoxes"
"chenxinpeng/SSD_scene_text_detection" -> "stupidZZ/FCN_Text"
"chenxinpeng/SSD_scene_text_detection" -> "mjq11302010044/RRPN"
"chenxinpeng/SSD_scene_text_detection" -> "bgshih/seglink"
"chenxinpeng/SSD_scene_text_detection" -> "BestSonny/SSTD"
"gwxie/Document-Dewarping-with-Control-Points" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"gwxie/Document-Dewarping-with-Control-Points" -> "gwxie/Synthesize-Distorted-Image-and-Its-Control-Points"
"AmemiyaYuko/HandwrittenChineseCharacterRecognition" -> "soloice/Chinese-Character-Recognition"
"AmemiyaYuko/HandwrittenChineseCharacterRecognition" -> "angzhou/anchor"
"HCIILAB/Forward-Implementation-of-Fast-and-Compact-CNN-for-Offline-HCCR" -> "peterWon/CASIA-HWDB-Recognition"
"HCIILAB/Forward-Implementation-of-Fast-and-Compact-CNN-for-Offline-HCCR" -> "zhongzhuoyao/HCCR-GoogLeNet"
"Yuliang-Liu/TIoU-metric" -> "Yuliang-Liu/Curve-Text-Detector"
"Yuliang-Liu/TIoU-metric" -> "HCIILAB/Scene-Text-Removal"
"Yuliang-Liu/TIoU-metric" -> "summerlvsong/Aggregation-Cross-Entropy"
"Yuliang-Liu/TIoU-metric" -> "STVIR/PMTD"
"Yuliang-Liu/TIoU-metric" -> "Jyouhou/ICDAR2019-ArT-Recognition-Alchemy"
"Yuliang-Liu/TIoU-metric" -> "Yuliang-Liu/Box_Discretization_Network"
"Yuliang-Liu/TIoU-metric" -> "PkuDavidGuan/TIoU-metric-python3"
"Yuliang-Liu/TIoU-metric" -> "HCIILAB/Scene-Text-Detection"
"Yuliang-Liu/TIoU-metric" -> "lvpengyuan/masktextspotter.caffe2"
"Yuliang-Liu/TIoU-metric" -> "cs-chan/Total-Text-Dataset"
"Yuliang-Liu/TIoU-metric" -> "xieyufei1993/FOTS"
"Yuliang-Liu/TIoU-metric" -> "Jyouhou/SceneTextPapers"
"angzhou/anchor" -> "chongyangtao/DeepHCCR"
"buptlihang/CDLA" -> "JaMesLiMers/Document_layout_analysis"
"buptlihang/CDLA" -> "tommyMessi/PST-table"
"JasonObeid/Chart2Text" -> "vis-nlp/Chart-to-text"
"JasonObeid/Chart2Text" -> "tingyaohsu/SciCap"
"JasonObeid/Chart2Text" -> "gongliym/data2text-transformer"
"supervisely/supervisely" -> "DeepSystems/supervisely-tutorials"
"supervisely/supervisely" -> "ryouchinsa/Rectlabel-support" ["e"=1]
"supervisely/supervisely" -> "aisegmentcn/matting_human_datasets" ["e"=1]
"Yuanhang8605/pixel-anchor-link-and-text-detector-experience" -> "hsddlz/faster-CTPN"
"xellows1305/Document-Image-Dewarping" -> "phulin/rebook"
"xellows1305/Document-Image-Dewarping" -> "cvlab-stonybrook/DewarpNet"
"xellows1305/Document-Image-Dewarping" -> "thomasjhuang/deep-learning-for-document-dewarping"
"xellows1305/Document-Image-Dewarping" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"xellows1305/Document-Image-Dewarping" -> "xiaoyu258/DocProj"
"xellows1305/Document-Image-Dewarping" -> "wuleiaty/DocUNet"
"xellows1305/Document-Image-Dewarping" -> "mzucker/page_dewarp"
"xellows1305/Document-Image-Dewarping" -> "RRanddom/tf_doc_localisation" ["e"=1]
"xellows1305/Document-Image-Dewarping" -> "dhlab-epfl/dhSegment"
"xellows1305/Document-Image-Dewarping" -> "cvlab-stonybrook/doc3D-dataset"
"xellows1305/Document-Image-Dewarping" -> "yuandong-tian/Document-Rectification--CVPR11-"
"xellows1305/Document-Image-Dewarping" -> "sagniklp/doc3D-renderer"
"xellows1305/Document-Image-Dewarping" -> "STVIR/PMTD"
"xellows1305/Document-Image-Dewarping" -> "DVLP-CMATERJU/RectiNet"
"Canjie-Luo/Scene-Text-Image-Transformer" -> "fnzhan/ESIR"
"Canjie-Luo/Scene-Text-Image-Transformer" -> "fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes"
"Canjie-Luo/Scene-Text-Image-Transformer" -> "chongshengzhang/shopsign"
"Canjie-Luo/Scene-Text-Image-Transformer" -> "summerlvsong/Aggregation-Cross-Entropy"
"Canjie-Luo/Scene-Text-Image-Transformer" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"ZumingHuang/awesome-ocr-resources" -> "whitelok/image-text-localization-recognition"
"ZumingHuang/awesome-ocr-resources" -> "cs-chan/Total-Text-Dataset"
"ZumingHuang/awesome-ocr-resources" -> "princewang1994/TextSnake.pytorch"
"ZumingHuang/awesome-ocr-resources" -> "ChanChiChoi/awesome-ocr"
"ZumingHuang/awesome-ocr-resources" -> "TianzhongSong/awesome-SynthText"
"ZumingHuang/awesome-ocr-resources" -> "lvpengyuan/masktextspotter.caffe2"
"ZumingHuang/awesome-ocr-resources" -> "bgshih/aster"
"ZumingHuang/awesome-ocr-resources" -> "summerlvsong/Aggregation-Cross-Entropy"
"ZumingHuang/awesome-ocr-resources" -> "Yuliang-Liu/Curve-Text-Detector"
"ZumingHuang/awesome-ocr-resources" -> "Megvii-CSG/MegReader"
"ZumingHuang/awesome-ocr-resources" -> "tonghe90/textspotter"
"ZumingHuang/awesome-ocr-resources" -> "JarveeLee/SynthText_Chinese_version"
"ZumingHuang/awesome-ocr-resources" -> "BestSonny/SSTD"
"ZumingHuang/awesome-ocr-resources" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"ZumingHuang/awesome-ocr-resources" -> "HCIILAB/Scene-Text-End2end"
"Shun14/TextBoxes_plusplus_Tensorflow" -> "xieyufei1993/InceptText-Tensorflow"
"Shun14/TextBoxes_plusplus_Tensorflow" -> "Sanster/keras_textboxes_plusplus"
"xdxie/WordArt" -> "google-research-datasets/hiertext"
"GXYM/GHM_Loss" -> "GXYM/GloRe"
"GXYM/GHM_Loss" -> "GXYM/KPN"
"GXYM/GHM_Loss" -> "GXYM/Focal-loss"
"GXYM/GHM_Loss" -> "GXYM/OHEM-loss"
"GXYM/GHM_Loss" -> "GXYM/TextBPN"
"GXYM/GHM_Loss" -> "GXYM/TextPMs"
"GXYM/GHM_Loss" -> "GXYM/TextBPN-Plus-Plus"
"unpaper/unpaper" -> "NVlabs/ocrodeg"
"A-bone1/FSNS-tfrecord-generate" -> "A-bone1/Attention-ocr-Chinese-Version"
"microsoft/UDOP" -> "microsoft/i-Code"
"microsoft/UDOP" -> "herobd/dessurt"
"microsoft/UDOP" -> "jpWang/LiLT"
"alankbi/detecto" -> "signatrix/efficientdet" ["e"=1]
"alankbi/detecto" -> "Tessellate-Imaging/Monk_Object_Detection"
"alankbi/detecto" -> "Tessellate-Imaging/monk_v1"
"alankbi/detecto" -> "airctic/icevision" ["e"=1]
"alankbi/detecto" -> "sgrvinod/a-PyTorch-Tutorial-to-Object-Detection" ["e"=1]
"not-implemented/hocr-proofreader" -> "kba/hocrjs"
"tesseract-ocr/docs" -> "tesseract-ocr/tesseract-ocr.github.io"
"tesseract-ocr/docs" -> "tesseract-ocr/langdata"
"lcy0604/EraseNet" -> "HCIILAB/SCUT-EnsText"
"lcy0604/EraseNet" -> "HCIILAB/Scene-Text-Removal"
"lcy0604/EraseNet" -> "neouyghur/One-stage-Mask-based-Scene-Text-Eraser"
"lcy0604/EraseNet" -> "lcy0604/CTRNet"
"lcy0604/EraseNet" -> "wangyuxin87/PERT"
"lcy0604/EraseNet" -> "ZeroAct/SceneTextRemover-pytorch"
"hhaji/Deep-Learning" -> "hhaji/Algorithms-For-Data-Science-2018"
"hhaji/Deep-Learning" -> "hhaji/Applied-Machine-Learning"
"billstark/receipt-scanner" -> "GiorgiaAuroraAdorni/smart-receipt-scanner"
"mre/receipt-parser" -> "danschultzer/receipt-scanner"
"mre/receipt-parser" -> "billstark/receipt-scanner"
"mre/receipt-parser" -> "invoice-x/invoice2data"
"mre/receipt-parser" -> "brikeats/receipt-reader"
"mre/receipt-parser" -> "VTurturika/receipt-recognition"
"tesseract-ocr/tesstrain" -> "tesseract-ocr/langdata_lstm"
"tesseract-ocr/tesstrain" -> "guiem/train-tesseract"
"tesseract-ocr/tesstrain" -> "Shreeshrii/tess4training"
"tesseract-ocr/tesstrain" -> "tesseract-ocr/tessdata_best"
"tesseract-ocr/tesstrain" -> "tesseract-ocr/tessdata_fast"
"tesseract-ocr/tesstrain" -> "OCR4all/LAREX"
"tesseract-ocr/tesstrain" -> "Shreeshrii/tessdata_shreetest"
"tesseract-ocr/tesstrain" -> "tesseract-ocr/tessdoc"
"watersink/ocrsegment" -> "leonlulu/DeepLayout"
"watersink/ocrsegment" -> "NVlabs/ocroseg"
"JiaquanYe/MASTER-mmocr" -> "JiaquanYe/TableMASTER-mmocr"
"JiaquanYe/MASTER-mmocr" -> "Yuxiang1995/ICDAR2021_MFD"
"azmiozgen/text-detection" -> "marrrcin/swt-python"
"azmiozgen/text-detection" -> "yestinsong/Text-Detection"
"azmiozgen/text-detection" -> "aperrault/DetectText"
"azmiozgen/text-detection" -> "mypetyak/StrokeWidthTransform"
"jpuigcerver/PyLaia" -> "lquirosd/P2PaLA"
"deepdoctection/deepdoctection" -> "microsoft/table-transformer"
"deepdoctection/deepdoctection" -> "jpWang/LiLT"
"deepdoctection/deepdoctection" -> "shabie/docformer"
"deepdoctection/deepdoctection" -> "Psarpei/Multi-Type-TD-TSR"
"deepdoctection/deepdoctection" -> "phamquiluan/table-transformer"
"SiKang123/ImgTranslator" -> "SiKang123/ocrTest"
"YoungMiao/crnn" -> "YoungMiao/synthdata-zh"
"stupidZZ/FCN_Text" -> "stupidZZ/Symmetry_Text_Line_Detection"
"DVLP-CMATERJU/RectiNet" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"DVLP-CMATERJU/RectiNet" -> "cvlab-stonybrook/DewarpNet"
"DVLP-CMATERJU/RectiNet" -> "thomasjhuang/deep-learning-for-document-dewarping"
"DVLP-CMATERJU/RectiNet" -> "wuleiaty/DocUNet"
"chenjun2hao/FOTS.pytorch" -> "Wovchena/text-detection-fots.pytorch"
"MhLiao/RRD" -> "xhzdeng/crpn"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "weinman/cnn_lstm_ctc_ocr"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "watsonyanghx/CNN_LSTM_CTC_Tensorflow"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "synckey/tensorflow_lstm_ctc_ocr"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "Bartzi/stn-ocr"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "oyxhust/ssd-text_detection"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "Li-Ming-Fan/OCR-DETECTION-CTPN"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "da03/Attention-OCR"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "ilovin/lstm_ctc_ocr"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "Halfish/lstm-ctc-ocr"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "jugg1024/Text-Detection-with-FRCN"
"oyxhust/CNN-LSTM-CTC-text-recognition" -> "xlvector/learning-dl" ["e"=1]
"ajgallego/document-image-binarization" -> "masyagin1998/robin"
"ajgallego/document-image-binarization" -> "Verazjy/Document-image-binarization-with-Cascaded-cGANs-generator"
"ajgallego/document-image-binarization" -> "qurator-spk/sbb_binarization"
"thomasjhuang/deep-learning-for-document-dewarping" -> "DVLP-CMATERJU/RectiNet"
"thomasjhuang/deep-learning-for-document-dewarping" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"thomasjhuang/deep-learning-for-document-dewarping" -> "lmmx/page-dewarp"
"soap117/DeepRule" -> "vis-nlp/ChartQA"
"soap117/DeepRule" -> "vis-nlp/Chart-to-text"
"soap117/DeepRule" -> "Cvrane/ChartReader"
"vis-nlp/Chart-to-text" -> "vis-nlp/ChartQA"
"vis-nlp/Chart-to-text" -> "tingyaohsu/SciCap"
"vis-nlp/Chart-to-text" -> "JasonObeid/Chart2Text"
"sbrunner/deskew" -> "kakul/Alyn"
"sbrunner/deskew" -> "zacharywhitley/awesome-ocr"
"sbrunner/deskew" -> "JPLeoRX/opencv-text-deskew"
"sbrunner/deskew" -> "thomasjhuang/deep-learning-for-document-dewarping"
"sbrunner/deskew" -> "qurator-spk/eynollah"
"sbrunner/deskew" -> "DVLP-CMATERJU/RectiNet"
"sbrunner/deskew" -> "sachinraja13/TabStructNet"
"sbrunner/deskew" -> "eihli/image-table-ocr"
"sbrunner/deskew" -> "shabie/docformer"
"sbrunner/deskew" -> "Psarpei/Multi-Type-TD-TSR"
"sbrunner/deskew" -> "lmmx/page-dewarp"
"sbrunner/deskew" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"bikash/DocumentUnderstanding" -> "dhavalpotdar/Graph-Convolution-on-Structured-Documents"
"NVlabs/ocrodeg" -> "DocCreator/DocCreator"
"aperrau/DetectText" -> "yestinsong/Text-Detection"
"aperrau/DetectText" -> "subokita/Robust-Text-Detection"
"aperrau/DetectText" -> "lluisgomez/text_extraction"
"aperrau/DetectText" -> "lluisgomez/TextProposals"
"aperrau/DetectText" -> "mypetyak/StrokeWidthTransform"
"aperrau/DetectText" -> "idiap/mser"
"aperrau/DetectText" -> "roseperrone/character-detector"
"aperrau/DetectText" -> "MichalBusta/FASText"
"aperrau/DetectText" -> "MhLiao/TextBoxes"
"aperrau/DetectText" -> "shiaokai/plex"
"aperrau/DetectText" -> "pannous/caffe-ocr"
"phamquiluan/PubLayNet" -> "mdv3101/CDeCNet"
"phamquiluan/PubLayNet" -> "hpanwar08/detectron2"
"phamquiluan/PubLayNet" -> "ibm-aur-nlp/PubLayNet"
"phamquiluan/PubLayNet" -> "JaMesLiMers/Document_layout_analysis"
"phamquiluan/PubLayNet" -> "lquirosd/P2PaLA"
"phamquiluan/PubLayNet" -> "leonlulu/DeepLayout"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "gwxie/Distorted-Image-With-Flow"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "DVLP-CMATERJU/RectiNet"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "gwxie/Document-Dewarping-with-Control-Points"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "fh2019ustc/DocGeoNet"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "cvlab-stonybrook/PaperEdge"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "cvlab-stonybrook/DewarpNet"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "thomasjhuang/deep-learning-for-document-dewarping"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "phulin/rebook"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "mhashas/Document-Image-Unwarping-pytorch"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "taeho-kil/Document-Image-Dewarping"
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" -> "fh2019ustc/DocTr"
"qurator-spk/eynollah" -> "qurator-spk/sbb_textline_detection"
"qurator-spk/eynollah" -> "poke1024/origami"
"qurator-spk/eynollah" -> "OCR4all/LAREX"
"qurator-spk/eynollah" -> "lquirosd/P2PaLA"
"qurator-spk/eynollah" -> "OCR4all/OCR4all"
"qurator-spk/eynollah" -> "OCR-D/ocrd_segment"
"qurator-spk/eynollah" -> "OCR-D/ocrd_all"
"qurator-spk/eynollah" -> "BobLd/DocumentLayoutAnalysis"
"qurator-spk/eynollah" -> "UB-Mannheim/ocr-fileformat"
"qurator-spk/eynollah" -> "Layout-Parser/layout-model-training"
"applicaai/kleister-nda" -> "applicaai/kleister-charity"
"mawanda-jun/TableTrainNet" -> "rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning"
"mawanda-jun/TableTrainNet" -> "interviewBubble/Tabulo"
"mawanda-jun/TableTrainNet" -> "shahrukhqasim/TIES-2.0"
"vis-nlp/ChartQA" -> "vis-nlp/Chart-to-text"
"vis-nlp/ChartQA" -> "soap117/DeepRule"
"BestSonny/SSTD" -> "xhzdeng/crpn"
"BestSonny/SSTD" -> "HotaekHan/SSTDNet"
"BestSonny/SSTD" -> "bgshih/seglink"
"BestSonny/SSTD" -> "tonghe90/textspotter"
"BestSonny/SSTD" -> "MichalBusta/DeepTextSpotter"
"BestSonny/SSTD" -> "MhLiao/RRD"
"BestSonny/SSTD" -> "dengdan/seglink"
"BestSonny/SSTD" -> "MhLiao/TextBoxes_plusplus"
"BestSonny/SSTD" -> "MhLiao/TextBoxes"
"BestSonny/SSTD" -> "lluisgomez/TextProposals"
"BestSonny/SSTD" -> "TJCVRS/CRNN_Tensorflow"
"BestSonny/SSTD" -> "Yuliang-Liu/Curve-Text-Detector"
"BestSonny/SSTD" -> "zlmzju/itn"
"BestSonny/SSTD" -> "Bartzi/see"
"BestSonny/SSTD" -> "jugg1024/Text-Detection-with-FRCN"
"deepthinking-qichao/EAST_ICPR2018" -> "HaozhengLi/EAST_ICPR"
"simplify23/CDistNet" -> "wp03052/MATRN"
"simplify23/CDistNet" -> "adeline-cs/GTR"
"MrZilinXiao/Hyper-Table-OCR" -> "chineseocr/table-ocr"
"shabie/docformer" -> "jpWang/LiLT"
"shabie/docformer" -> "applicaai/lambert"
"shabie/docformer" -> "uakarsh/docformer"
"shabie/docformer" -> "tstanislawek/awesome-document-understanding"
"shabie/docformer" -> "clovaai/bros"
"shabie/docformer" -> "doc-analysis/DocBank"
"shabie/docformer" -> "microsoft/UDOP"
"shabie/docformer" -> "clovaai/spade"
"shabie/docformer" -> "microsoft/table-transformer"
"shabie/docformer" -> "deepdoctection/deepdoctection"
"shabie/docformer" -> "bikash/DocumentUnderstanding"
"shabie/docformer" -> "microsoft/i-Code"
"chongshengzhang/shopsign" -> "fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes"
"chongshengzhang/shopsign" -> "FangShancheng/conv-ensemble-str"
"slgobinath/uget-chrome-wrapper" -> "persepolisdm/persepolis-chrome-wrapper"
"slgobinath/uget-chrome-wrapper" -> "ugetdm/uget-extension"
"HCIILAB/DeRPN" -> "Yuliang-Liu/Box_Discretization_Network"
"HCIILAB/DeRPN" -> "xhzdeng/stela"
"HCIILAB/DeRPN" -> "Canjie-Luo/Scene-Text-Image-Transformer"
"fh2019ustc/DocScanner" -> "fh2019ustc/DocTr-Plus"
"fh2019ustc/DocScanner" -> "fh2019ustc/Awesome-Document-Image-Rectification"
"fh2019ustc/DocScanner" -> "fh2019ustc/DocGeoNet"
"fh2019ustc/DocScanner" -> "fh2019ustc/PolySnake"
"sagniklp/doc3D-renderer" -> "cvlab-stonybrook/doc3D-dataset"
"sagniklp/doc3D-renderer" -> "cvlab-stonybrook/DewarpNet"
"sagniklp/doc3D-renderer" -> "phulin/rebook"
"simonwsw/cnn-zh" -> "atgambardella/handwriting"
"clovaai/webvicob" -> "priancho/ResearchSurvey"
"clovaai/webvicob" -> "clovaai/bros"
"pannous/caffe-ocr" -> "pannous/tensorflow-ocr"
"pannous/caffe-ocr" -> "tmbdev/clstm"
"informatici/openhospital-core" -> "informatici/openhospital-api"
"informatici/openhospital-core" -> "informatici/openhospital-gui"
"dhlab-epfl/dhSegment" -> "lquirosd/P2PaLA"
"dhlab-epfl/dhSegment" -> "leonlulu/DeepLayout"
"dhlab-epfl/dhSegment" -> "TobiasGruening/ARU-Net"
"dhlab-epfl/dhSegment" -> "dhlab-epfl/dhSegment-torch"
"dhlab-epfl/dhSegment" -> "ibm-aur-nlp/PubLayNet"
"dhlab-epfl/dhSegment" -> "xellows1305/Document-Image-Dewarping"
"dhlab-epfl/dhSegment" -> "BobLd/DocumentLayoutAnalysis"
"dhlab-epfl/dhSegment" -> "DIVA-DIA/DIVA_Layout_Analysis_Evaluator"
"dhlab-epfl/dhSegment" -> "qurator-spk/eynollah"
"dhlab-epfl/dhSegment" -> "cvlab-stonybrook/DewarpNet"
"dhlab-epfl/dhSegment" -> "watersink/ocrsegment"
"dhlab-epfl/dhSegment" -> "phulin/rebook"
"dhlab-epfl/dhSegment" -> "jpuigcerver/PyLaia"
"dhlab-epfl/dhSegment" -> "PRImA-Research-Lab/PAGE-XML"
"dhlab-epfl/dhSegment" -> "OCR4all/OCR4all"
"sbillburg/CRNN-with-STN" -> "gasparian/CRNN_OCR_lite"
"amazon-research/semimtr-text-recognition" -> "amazon-research/textadain-robust-recognition"
"kakul/Alyn" -> "sbrunner/deskew"
"kakul/Alyn" -> "xellows1305/Document-Image-Dewarping"
"tberg12/ocular" -> "ryanfb/book-aligner"
"neouyghur/One-stage-Mask-based-Scene-Text-Eraser" -> "HCIILAB/SCUT-EnsText"
"lluisgomez/text_extraction" -> "shiaokai/plex"
"MichalBusta/FASText" -> "lluisgomez/TextProposals"
"MichalBusta/FASText" -> "lluisgomez/text_extraction"
"MichalBusta/FASText" -> "stupidZZ/FCN_Text"
"MichalBusta/FASText" -> "zchengquan/TextDetector"
"MichalBusta/FASText" -> "idiap/mser"
"MichalBusta/FASText" -> "jugg1024/Text-Detection-with-FRCN"
"MichalBusta/FASText" -> "MhLiao/TextBoxes"
"MichalBusta/FASText" -> "stupidZZ/Symmetry_Text_Line_Detection"
"MichalBusta/FASText" -> "subokita/Robust-Text-Detection"
"MichalBusta/FASText" -> "bgshih/seglink"
"MichalBusta/FASText" -> "BestSonny/SSTD"
"MichalBusta/FASText" -> "tonghe90/textspotter"
"informatici/openhospital-api" -> "informatici/openhospital-core"
"informatici/openhospital-gui" -> "informatici/openhospital-core"
"informatici/openhospital-gui" -> "informatici/openhospital-api"
"subokita/Robust-Text-Detection" -> "yestinsong/Text-Detection"
"subokita/Robust-Text-Detection" -> "lluisgomez/text_extraction"
"subokita/Robust-Text-Detection" -> "aperrau/DetectText"
"subokita/Robust-Text-Detection" -> "lluisgomez/TextProposals"
"subokita/Robust-Text-Detection" -> "roseperrone/character-detector"
"subokita/Robust-Text-Detection" -> "dreamdragon/text-detection"
"subokita/Robust-Text-Detection" -> "idiap/mser"
"mypetyak/StrokeWidthTransform" -> "nlintz/StrokeWidthTransform"
"mypetyak/StrokeWidthTransform" -> "Sujay-M/TextDetection"
"mypetyak/StrokeWidthTransform" -> "marrrcin/swt-python"
"GXYM/GloRe" -> "GXYM/KPN"
"GXYM/GloRe" -> "GXYM/Focal-loss"
"GXYM/GloRe" -> "GXYM/OHEM-loss"
"GXYM/GloRe" -> "GXYM/GHM_Loss"
"GXYM/KPN" -> "GXYM/Focal-loss"
"GXYM/KPN" -> "GXYM/GloRe"
"GXYM/KPN" -> "GXYM/OHEM-loss"
"GXYM/KPN" -> "GXYM/TextPMs"
"GXYM/OHEM-loss" -> "GXYM/Focal-loss"
"GXYM/OHEM-loss" -> "GXYM/KPN"
"GXYM/OHEM-loss" -> "GXYM/GloRe"
"GXYM/TextPMs" -> "GXYM/KPN"
"GXYM/TextPMs" -> "GXYM/TextBPN"
"GXYM/TextPMs" -> "GXYM/TextBPN-Plus-Plus"
"GXYM/TextPMs" -> "GXYM/GloRe"
"GXYM/TextPMs" -> "GXYM/Focal-loss"
"GXYM/TextPMs" -> "GXYM/GHM_Loss"
"GXYM/TextPMs" -> "GXYM/OHEM-loss"
"UB-Mannheim/ocr-fileformat" -> "tmbdev/hocr-tools"
"UB-Mannheim/ocr-fileformat" -> "filak/hOCR-to-ALTO"
"UB-Mannheim/ocr-fileformat" -> "dinosauria123/gcv2hocr"
"UB-Mannheim/ocr-fileformat" -> "ocropus/hocr-tools"
"UB-Mannheim/ocr-fileformat" -> "OCR-D/ocrd_all"
"UB-Mannheim/ocr-fileformat" -> "altoxml/documentation"
"kba/hocrjs" -> "not-implemented/hocr-proofreader"
"kba/hocrjs" -> "tmbdev/hocr-tools"
"ssudholt/phocnet" -> "almazan/watts"
"wang-tf/Chinese_OCR_synthetic_data" -> "TianzhongSong/awesome-SynthText"
"wang-tf/Chinese_OCR_synthetic_data" -> "JarveeLee/SynthText_Chinese_version"
"wang-tf/Chinese_OCR_synthetic_data" -> "lkj1114889770/Synth_Chinese_OCR_dataset"
"wang-tf/Chinese_OCR_synthetic_data" -> "Sanster/text_renderer"
"wang-tf/Chinese_OCR_synthetic_data" -> "summerlvsong/Aggregation-Cross-Entropy"
"wang-tf/Chinese_OCR_synthetic_data" -> "princewang1994/TextSnake.pytorch"
"wang-tf/Chinese_OCR_synthetic_data" -> "WenmuZhou/PAN.pytorch"
"wang-tf/Chinese_OCR_synthetic_data" -> "WenmuZhou/PSENet.pytorch"
"wang-tf/Chinese_OCR_synthetic_data" -> "bgshih/aster"
"wang-tf/Chinese_OCR_synthetic_data" -> "Canjie-Luo/MORAN_v2"
"wang-tf/Chinese_OCR_synthetic_data" -> "Megvii-CSG/MegReader"
"wang-tf/Chinese_OCR_synthetic_data" -> "ankush-me/SynthText"
"wang-tf/Chinese_OCR_synthetic_data" -> "xiaomaxiao/keras_ocr"
"wang-tf/Chinese_OCR_synthetic_data" -> "ayumiymk/aster.pytorch"
"wang-tf/Chinese_OCR_synthetic_data" -> "Yuliang-Liu/bezier_curve_text_spotting"
"DIYBookScanner/spreads" -> "DIYBookScanner/spreadpi"
"wuleiaty/DocUNet" -> "teresasun/docUnet.pytorch"
"wuleiaty/DocUNet" -> "mhashas/Document-Image-Unwarping-pytorch"
"tesseract-ocr/tesseract-ocr.github.io" -> "tesseract-ocr/docs"
"Pay20Y/SAR_TF" -> "jichilen/SAR_quick"
"Pay20Y/SAR_TF" -> "wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition"
"Pay20Y/SAR_TF" -> "liuch37/sar-pytorch"
"Pay20Y/SAR_TF" -> "jiangxiluning/MASTER-TF"
"BADBADBADBOY/genete_ocr_data" -> "BADBADBADBOY/split_line_text_to_char"
"BADBADBADBOY/split_line_text_to_char" -> "BADBADBADBOY/paddlepaddle-"
"wangyuxin87/R-Net" -> "wangyuxin87/ContourNet"
"poke1024/origami" -> "hnesk/browse-ocrd"
"dinosauria123/gcv2hocr" -> "PublicI/pdf-gcv-ocr"
"dinosauria123/gcv2hocr" -> "ocropus/hocr-tools"
"dinosauria123/gcv2hocr" -> "UB-Mannheim/ocr-fileformat"
"phulin/rebook" -> "xellows1305/Document-Image-Dewarping"
"phulin/rebook" -> "gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation"
"phulin/rebook" -> "sagniklp/doc3D-renderer"
"phulin/rebook" -> "xiaoyu258/DocProj"
"phulin/rebook" -> "cvlab-stonybrook/DewarpNet"
"phulin/rebook" -> "thomasjhuang/deep-learning-for-document-dewarping"
"intel/handwritten-chinese-ocr-samples" -> "HCIILAB/SCUT-EPT_Dataset_Release"
"Cvrane/ChartReader" -> "soap117/DeepRule"
"lquirosd/P2PaLA" -> "leonlulu/DeepLayout"
"lquirosd/P2PaLA" -> "dhlab-epfl/dhSegment"
"lquirosd/P2PaLA" -> "TobiasGruening/ARU-Net"
"lquirosd/P2PaLA" -> "jpuigcerver/PyLaia"
"lquirosd/P2PaLA" -> "OCR4all/LAREX"
"lquirosd/P2PaLA" -> "BobLd/DocumentLayoutAnalysis"
"lquirosd/P2PaLA" -> "phamquiluan/PubLayNet"
"lquirosd/P2PaLA" -> "mauvilsa/nw-page-editor"
"lquirosd/P2PaLA" -> "qurator-spk/eynollah"
"lquirosd/P2PaLA" -> "hpanwar08/detectron2"
"lquirosd/P2PaLA" -> "DCGM/pero-ocr"
"lquirosd/P2PaLA" -> "ibm-aur-nlp/PubLayNet"
"mauvilsa/nw-page-editor" -> "omni-us/pagexml"
"mauvilsa/nw-page-editor" -> "mauvilsa/textfeats"
"WenmuZhou/TableGeneration" -> "cv-small-snails/Awesome-Table-Recognition"
"WenmuZhou/TableGeneration" -> "wangwen-whu/WTW-Dataset"
"yeungchenwa/OCR-SAM" -> "ViTAE-Transformer/DeepSolo"
"yeungchenwa/OCR-SAM" -> "shannanyinxiang/SPTS"
"yeungchenwa/OCR-SAM" -> "lcy0604/CTRNet"
"yeungchenwa/OCR-SAM" -> "xdxie/WordArt"
"yeungchenwa/OCR-SAM" -> "wenwenyu/TCM"
"yeungchenwa/OCR-SAM" -> "Canjie-Luo/Real-300K"
"yeungchenwa/OCR-SAM" -> "Yuliang-Liu/SPTSv2"
"yeungchenwa/OCR-SAM" -> "mxin262/SwinTextSpotter"
"yeungchenwa/OCR-SAM" -> "shannanyinxiang/PageNet"
"yeungchenwa/OCR-SAM" -> "lcy0604/EraseNet"
"yeungchenwa/OCR-SAM" -> "Mountchicken/Efficient-Deep-Learning"
"zfxxfeng/cnn_lstm_ctc_ocr_for_ICPR" -> "HaozhengLi/EAST_ICPR"
"zfxxfeng/cnn_lstm_ctc_ocr_for_ICPR" -> "TeamVanDeep/ICPR_MTWI_2018_section1"
"OCR-D/core" -> "OCR-D/ocrd_all"
"Yuxiang1995/ICDAR2021_MFD" -> "JiaquanYe/MASTER-mmocr"
"jianh1994/layoutgan" -> "JiananLi2016/LayoutGAN-Tensorflow"
"OCR4all/OCR4all" -> "OCR4all/LAREX"
"OCR4all/OCR4all" -> "OCR4all/getting_started"
"OCR4all/OCR4all" -> "OCR-D/core"
"OCR4all/OCR4all" -> "qurator-spk/eynollah"
"OCR4all/OCR4all" -> "DCGM/pero-ocr"
"OCR4all/LAREX" -> "OCR4all/OCR4all"
"OCR4all/LAREX" -> "poke1024/origami"
"OCR4all/LAREX" -> "lquirosd/P2PaLA"
"naver/garnet" -> "lcy0604/CTRNet"
"ocropus/hocr-tools" -> "dinosauria123/gcv2hocr"
"Yuliang-Liu/SPTS" -> "Yuliang-Liu/ATVM-Datasets"
"sam-ai/BertGrid" -> "antoinedelplace/Chargrid"
"tstanislawek/awesome-document-understanding" ["l"="29.79,34.179"]
"shabie/docformer" ["l"="29.838,34.17"]
"wenwenyu/PICK-pytorch" ["l"="29.77,34.146"]
"jpWang/LiLT" ["l"="29.836,34.13"]
"clovaai/donut" ["l"="29.754,34.156"]
"hikopensource/DAVAR-Lab-OCR" ["l"="29.738,34.117"]
"doc-analysis/DocBank" ["l"="29.79,34.195"]
"cv-small-snails/Awesome-Table-Recognition" ["l"="29.816,34.134"]
"microsoft/table-transformer" ["l"="29.81,34.158"]
"BobLd/DocumentLayoutAnalysis" ["l"="29.769,34.255"]
"bikash/DocumentUnderstanding" ["l"="29.863,34.213"]
"mindee/doctr" ["l"="29.738,34.187"]
"PaddlePaddle/VIMER" ["l"="29.802,34.14"]
"applicaai/lambert" ["l"="29.863,34.155"]
"ibm-aur-nlp/PubLayNet" ["l"="29.773,34.227"]
"Layout-Parser/layout-parser" ["l"="29.757,34.212"]
"DanBloomberg/leptonica" ["l"="29.46,34.324"]
"mzucker/page_dewarp" ["l"="29.624,34.306"]
"tmbdev/ocropy" ["l"="29.449,34.234"]
"tesseract-ocr/tessdata_best" ["l"="29.385,34.345"]
"agl/jbig2enc" ["l"="29.483,34.365"]
"tesseract-ocr/tessdata_fast" ["l"="29.405,34.353"]
"wanghaisheng/awesome-ocr" ["l"="29.461,34.17"]
"scantailor/scantailor" ["l"="29.543,34.392"]
"kba/awesome-ocr" ["l"="29.52,34.217"]
"sirfz/tesserocr" ["l"="29.398,34.302"]
"manisandro/gImageReader" ["l"="29.467,34.395"]
"tesseract-ocr/tessdata" ["l"="29.341,34.354"]
"uclouvain/openjpeg" ["l"="-10.024,23.61"]
"tesseract-ocr/tesseract" ["l"="33.686,35.533"]
"tmbdev/clstm" ["l"="29.398,34.196"]
"charlesw/tesseract" ["l"="25.657,18.142"]
"eragonruan/text-detection-ctpn" ["l"="29.487,34.168"]
"YCG09/chinese_ocr" ["l"="29.505,34.151"]
"xiaofengShi/CHINESE-OCR" ["l"="29.524,34.158"]
"tianzhi0549/CTPN" ["l"="29.433,34.144"]
"argman/EAST" ["l"="29.488,34.116"]
"bear63/sceneReco" ["l"="29.449,34.144"]
"bgshih/crnn" ["l"="29.448,34.127"]
"chineseocr/chineseocr" ["l"="29.533,34.186"]
"meijieru/crnn.pytorch" ["l"="29.523,34.133"]
"huoyijie/AdvancedEAST" ["l"="29.516,34.1"]
"ankush-me/SynthText" ["l"="29.513,34.116"]
"Belval/TextRecognitionDataGenerator" ["l"="29.555,34.154"]
"JarveeLee/SynthText_Chinese_version" ["l"="29.484,34.1"]
"senlinuc/caffe_ocr" ["l"="29.473,34.14"]
"Sierkinhane/crnn_chinese_characters_rec" ["l"="29.499,34.129"]
"Sanster/text_renderer" ["l"="29.564,34.123"]
"chineseocr/table-detect" ["l"="29.75,34.129"]
"chineseocr/table-ocr" ["l"="29.706,34.139"]
"tommyMessi/tableImageParser_tx" ["l"="29.764,34.134"]
"CharlesWu123/SPLERGE" ["l"="29.786,34.146"]
"ibm-aur-nlp/PubTabNet" ["l"="29.789,34.159"]
"Rid7/Table-OCR" ["l"="29.719,34.119"]
"tommyMessi/remove-stamp" ["l"="29.777,34.1"]
"tommyMessi/crnn_ctc-centerloss" ["l"="29.705,34.082"]
"tommyMessi/PST-table" ["l"="29.777,34.116"]
"hassan-mahmood/TIES_DataGeneration" ["l"="29.776,34.16"]
"shahrukhqasim/TIES-2.0" ["l"="29.802,34.178"]
"JiaquanYe/TableMASTER-mmocr" ["l"="29.794,34.128"]
"chibohe/text_recognition_toolbox" ["l"="29.751,34.1"]
"eihli/image-table-ocr" ["l"="29.813,34.229"]
"cseas/ocr-table" ["l"="29.871,34.18"]
"ExtractTable/ExtractTable-py" ["l"="29.809,34.264"]
"jainammm/TableNet" ["l"="29.83,34.221"]
"tomassosorio/OCR_tablenet" ["l"="29.853,34.227"]
"sbrunner/deskew" ["l"="29.749,34.26"]
"Psarpei/Multi-Type-TD-TSR" ["l"="29.826,34.176"]
"Sargunan/Table-Detection-using-Deep-learning" ["l"="29.888,34.226"]
"sachinraja13/TabStructNet" ["l"="29.825,34.196"]
"mdv3101/CDeCNet" ["l"="29.825,34.212"]
"MrZilinXiao/Hyper-Table-OCR" ["l"="29.838,34.191"]
"DevashishPrasad/CascadeTabNet" ["l"="29.804,34.199"]
"qurator-spk/eynollah" ["l"="29.725,34.314"]
"asagar60/TableNet-pytorch" ["l"="29.899,34.268"]
"cndplab-founder/ICDAR2019_cTDaR" ["l"="29.845,34.179"]
"wangwen-whu/WTW-Dataset" ["l"="29.867,34.107"]
"WenmuZhou/TableGeneration" ["l"="29.852,34.12"]
"IBM/SynthTabNet" ["l"="29.849,34.131"]
"GoogleChromeLabs/picture-in-picture-chrome-extension" ["l"="29.428,34.673"]
"ugetdm/uget-windows-installer" ["l"="29.434,34.616"]
"jevakallio/vscode-hacker-typer" ["l"="30.375,34.676"]
"oscommunityafrica/oscommunityafrica.github.io" ["l"="30.347,34.65"]
"bitdata/ocrtable" ["l"="29.778,34.134"]
"BADBADBADBOY/pytorchOCR" ["l"="29.65,34.085"]
"WenmuZhou/PytorchOCR" ["l"="29.634,34.116"]
"WenmuZhou/OCR_DataSet" ["l"="29.646,34.104"]
"WenmuZhou/DBNet.pytorch" ["l"="29.63,34.088"]
"BADBADBADBOY/DBnet-lite.pytorch" ["l"="29.657,34.035"]
"frotms/PaddleOCR2Pytorch" ["l"="29.683,34.094"]
"whai362/pan_pp.pytorch" ["l"="29.673,34.064"]
"MhLiao/MaskTextSpotterV3" ["l"="29.644,34.062"]
"Sierkinhane/CRNN_Chinese_Characters_Rec" ["l"="29.586,34.116"]
"MhLiao/DB" ["l"="29.587,34.098"]
"WenmuZhou/PAN.pytorch" ["l"="29.61,34.061"]
"Wang-Tianwei/Decoupled-attention-network" ["l"="29.642,34.035"]
"yizt/crnn.pytorch" ["l"="29.667,34.081"]
"Canjie-Luo/Text-Image-Augmentation" ["l"="29.662,34.048"]
"xiaomaxiao/keras_ocr" ["l"="29.468,34.124"]
"MaybeShewill-CV/CRNN_Tensorflow" ["l"="29.465,34.097"]
"chineseocr/chinese-ocr" ["l"="29.406,34.141"]
"JinpengLI/deep_ocr" ["l"="29.429,34.181"]
"MhLiao/TextBoxes_plusplus" ["l"="29.472,34.074"]
"da03/Attention-OCR" ["l"="29.43,34.117"]
"chongyangtao/Awesome-Scene-Text-Recognition" ["l"="29.46,34.112"]
"MhLiao/TextBoxes" ["l"="29.406,34.076"]
"bgshih/aster" ["l"="29.519,34.065"]
"ouyanghuiyu/chineseocr_lite" ["l"="29.56,34.208"]
"chineseocr/darknet-ocr" ["l"="29.582,34.156"]
"Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB" ["l"="34.171,35.466"]
"whai362/PSENet" ["l"="29.558,34.088"]
"hwalsuklee/awesome-deep-text-detection-recognition" ["l"="29.543,34.131"]
"clovaai/deep-text-recognition-benchmark" ["l"="29.587,34.136"]
"PaddlePaddle/PaddleOCR" ["l"="33.971,35.687"]
"breezedeus/cnocr" ["l"="29.582,34.186"]
"ushelp/EasyOCR" ["l"="29.206,34.42"]
"nguyenq/tess4j" ["l"="29.283,34.394"]
"yinchuandong/JavaVerify" ["l"="29.155,34.443"]
"HighCWu/EasyOCR" ["l"="29.178,34.414"]
"ctripcorp/C-OCR" ["l"="6.553,17.981"]
"tesseract4java/tesseract4java" ["l"="29.305,34.431"]
"wangtaoT/AndroidOCR" ["l"="29.112,34.42"]
"isee15/captcha-ocr" ["l"="29.152,34.427"]
"4lex4/scantailor-advanced" ["l"="29.571,34.42"]
"Flameeyes/unpaper" ["l"="29.535,34.466"]
"Tulon/scantailor" ["l"="29.537,34.431"]
"yb85/scantailor-advanced-osx" ["l"="29.552,34.438"]
"trufanov-nok/scantailor" ["l"="29.547,34.421"]
"jbarlow83/OCRmyPDF" ["l"="24.453,3.729"]
"DIYBookScanner/spreads" ["l"="29.56,34.471"]
"Tenrec-Builders/pi-scan" ["l"="29.568,34.456"]
"trufanov-nok/scantailor-universal" ["l"="29.588,34.466"]
"ad-si/awesome-scanning" ["l"="29.587,34.44"]
"phulin/rebook" ["l"="29.662,34.29"]
"beacandler/EATEN" ["l"="29.837,34.143"]
"HCIILAB/EPHOIE" ["l"="29.849,34.15"]
"clovaai/cord" ["l"="29.833,34.12"]
"Pay20Y/SEED" ["l"="29.691,34.025"]
"chenjun2hao/SRN.pytorch" ["l"="29.679,34.027"]
"RubanSeven/Text-Image-Augmentation-python" ["l"="29.673,34.042"]
"AutoML-4Paradigm/AutoSTR" ["l"="29.706,33.987"]
"opconty/Transformer_STR" ["l"="29.687,34.016"]
"wangpengnorman/SAR-Strong-Baseline-for-Text-Recognition" ["l"="29.632,34.007"]
"JasonBoy1/TextZoom" ["l"="29.715,33.997"]
"clovaai/SATRN" ["l"="29.71,34.03"]
"Chuhanxx/FontAdaptor" ["l"="29.706,34.008"]
"Media-Smart/vedastr" ["l"="29.69,34.053"]
"wangyuxin87/ContourNet" ["l"="29.673,34.013"]
"ku21fan/STR-Fewer-Labels" ["l"="29.746,34.02"]
"Yuliang-Liu/bezier_curve_text_spotting" ["l"="29.632,34.044"]
"ayumiymk/aster.pytorch" ["l"="29.596,34.056"]
"MichalBusta/E2E-MLT" ["l"="29.545,34.013"]
"MichalBusta/DeepTextSpotter" ["l"="29.453,34.032"]
"Megvii-CSG/MegReader" ["l"="29.616,34.04"]
"fnzhan/Verisimilar-Image-Synthesis-for-Accurate-Detection-and-Recognition-of-Texts-in-Scenes" ["l"="29.599,33.929"]
"Canjie-Luo/MORAN_v2" ["l"="29.563,34.043"]
"jiangxiluning/FOTS.PyTorch" ["l"="29.535,34.048"]
"summerlvsong/Aggregation-Cross-Entropy" ["l"="29.594,34.041"]
"cs-chan/Total-Text-Dataset" ["l"="29.547,34.041"]
"MalongTech/research-charnet" ["l"="29.582,34.045"]
"backtime92/CRAFT-Reimplementation" ["l"="29.612,34.046"]
"MhLiao/MaskTextSpotter" ["l"="29.586,34.03"]
"Canjie-Luo/Scene-Text-Image-Transformer" ["l"="29.57,33.98"]
"princewang1994/TextSnake.pytorch" ["l"="29.556,34.026"]
"STVIR/PMTD" ["l"="29.595,34.022"]
"clovaai/CRAFT-pytorch" ["l"="29.559,34.109"]
"airob0t/idcardgenerator" ["l"="29.618,34.129"]
"Ice-Hazymoon/idcard_generator" ["l"="29.679,34.174"]
"TianzhongSong/awesome-SynthText" ["l"="29.618,34.072"]
"bzsome/idcard_generator" ["l"="-10.304,-45.907"]
"mritd/idgen" ["l"="29.677,34.193"]
"jayknoxqu/id-number-util" ["l"="-26.759,-42.826"]
"zhang0jhon/AttentionOCR" ["l"="29.583,34.077"]
"wang-tf/Chinese_OCR_synthetic_data" ["l"="29.54,34.077"]
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-OCR-IdentificationIDElement" ["l"="29.619,34.106"]
"oh-my-ocr/text_renderer" ["l"="29.665,34.097"]
"opconty/pytorch_ctpn" ["l"="29.535,34.064"]
"BADBADBADBOY/pytorch.ctpn" ["l"="29.541,33.991"]
"courao/ocr.pytorch" ["l"="29.584,34.061"]
"hsddlz/faster-CTPN" ["l"="29.445,34.046"]
"AstarLight/Lets_OCR" ["l"="29.533,34.113"]
"chenjun2hao/Attention_ocr.pytorch" ["l"="29.556,34.075"]
"WenmuZhou/PSENet.pytorch" ["l"="29.598,34.082"]
"songdejia/EAST" ["l"="29.529,34.04"]
"Jyouhou/ICDAR2019-ArT-Recognition-Alchemy" ["l"="29.62,34.016"]
"Holmeyoung/crnn-pytorch" ["l"="29.602,34.069"]
"open-mmlab/mmocr" ["l"="29.659,34.147"]
"microsoft/unilm" ["l"="34.387,35.927"]
"jsvine/pdfplumber" ["l"="24.502,3.767"]
"NielsRogge/Transformers-Tutorials" ["l"="23.726,30.283"]
"paulgp/applied-methods-phd" ["l"="23.141,33.08"]
"axa-group/Parsr" ["l"="29.497,32.484"]
"heartexlabs/label-studio" ["l"="34.418,35.533"]
"doc-analysis/TableBank" ["l"="29.765,34.181"]
"DayBreak-u/chineseocr_lite" ["l"="29.612,34.211"]
"alisen39/TrWebOCR" ["l"="29.614,34.185"]
"RapidAI/RapidOCR" ["l"="29.648,34.187"]
"hiroi-sora/Umi-OCR" ["l"="-27.406,-17.812"]
"myhub/tr" ["l"="29.598,34.167"]
"JaidedAI/EasyOCR" ["l"="33.941,35.623"]
"Tencent/TNN" ["l"="34.265,35.587"]
"guanshuicheng/invoice" ["l"="29.659,34.122"]
"DefTruth/lite.ai.toolkit" ["l"="34.451,35.652"]
"danvk/oldnyc" ["l"="29.152,34.048"]
"danvk/localturk" ["l"="29.091,34.036"]
"aperrau/DetectText" ["l"="29.278,34.069"]
"xuwenxue000/PJ_PREDICT_IMG" ["l"="29.745,33.902"]
"huanglu20124/invoice" ["l"="29.729,33.934"]
"lvpengyuan/corner" ["l"="29.568,34.051"]
"ZJULearning/pixel_link" ["l"="29.493,34.056"]
"tonghe90/textspotter" ["l"="29.475,34.033"]
"Bartzi/see" ["l"="29.461,34.058"]
"lvpengyuan/masktextspotter.caffe2" ["l"="29.512,34.018"]
"whitelok/image-text-localization-recognition" ["l"="29.529,34.085"]
"prasunroy/stefann" ["l"="29.702,33.97"]
"youdao-ai/SRNet" ["l"="29.686,33.974"]
"Niwhskal/SRNet" ["l"="29.721,33.964"]
"HCIILAB/Scene-Text-Removal" ["l"="29.731,33.974"]
"wangyuxin87/R-Net" ["l"="29.685,33.96"]
"Jyouhou/UnrealText" ["l"="29.674,34.002"]
"qqqyd/MOSTEL" ["l"="29.713,33.937"]
"UB-Mannheim/tesseract" ["l"="29.4,34.38"]
"tesseract-ocr/tessdoc" ["l"="29.418,34.339"]
"madmaze/pytesseract" ["l"="29.364,34.378"]
"UB-Mannheim/zotero-ocr" ["l"="6.174,8.586"]
"oschwartz10612/poppler-windows" ["l"="24.412,3.898"]
"mhammond/pywin32" ["l"="45.407,-0.983"]
"ianzhao05/textshot" ["l"="26.114,14.056"]
"shannanyinxiang/PageNet" ["l"="29.816,34.025"]
"Yuliang-Liu/SPTSv2" ["l"="29.836,34.012"]
"ZZZHANG-jx/Marior" ["l"="29.856,34.023"]
"Li-Ming-Fan/OCR-DETECTION-CTPN" ["l"="29.394,34.087"]
"Li-Ming-Fan/OCR-CRNN-CTC" ["l"="29.384,34.075"]
"ilovin/lstm_ctc_ocr" ["l"="29.397,34.102"]
"wushilian/CRNN_Attention_OCR_Chinese" ["l"="29.442,34.096"]
"oyxhust/CNN-LSTM-CTC-text-recognition" ["l"="29.366,34.077"]
"AstarLight/CPS-OCR-Engine" ["l"="29.476,34.154"]
"jimmyleaf/ocr_tensorflow_cnn" ["l"="29.396,34.127"]
"synckey/tensorflow_lstm_ctc_ocr" ["l"="29.373,34.104"]
"watsonyanghx/CNN_LSTM_CTC_Tensorflow" ["l"="29.398,34.114"]
"isee15/Card-Ocr" ["l"="29.341,34.181"]
"weinman/cnn_lstm_ctc_ocr" ["l"="29.412,34.093"]
"tongpi/basicOCR" ["l"="29.412,34.105"]
"Raymondhhh90/idcardocr" ["l"="29.376,34.168"]
"yinchangchang/ocr_densenet" ["l"="29.495,34.092"]
"bai-shang/OCR_TF_CRNN_CTC" ["l"="29.339,34.088"]
"jiangxiluning/chinese-ocr" ["l"="29.445,34.112"]
"SeanNaren/warp-ctc" ["l"="29.504,34.082"]
"Roujack/mathAI" ["l"="29.487,34.196"]
"LinXueyuanStdio/LaTeX_OCR_PRO" ["l"="24.969,28.769"]
"LinXueyuanStdio/LaTeX_OCR" ["l"="24.937,28.779"]
"whywhs/Pytorch-Handwritten-Mathematical-Expression-Recognition" ["l"="24.922,28.757"]
"harvardnlp/im2markup" ["l"="24.941,28.798"]
"guillaumegenthial/im2latex" ["l"="24.924,28.797"]
"taosir/cnn_handwritten_chinese_recognition" ["l"="29.347,34.164"]
"dynobo/normcap" ["l"="29.44,34.449"]
"A9T9/Free-Ocr-Windows-Desktop" ["l"="29.424,34.484"]
"danpla/dpscreenocr" ["l"="29.464,34.445"]
"jurplel/qView" ["l"="-27.806,-17.696"]
"torakiki/pdfsam" ["l"="-27.841,-17.358"]
"Calamari-OCR/calamari" ["l"="29.547,34.284"]
"ugetdm/uget-integrator" ["l"="29.43,34.57"]
"martinrotter/rssguard" ["l"="-29.491,-20.691"]
"pdfarranger/pdfarranger" ["l"="24.361,3.782"]
"Layout-Generation/layout-generation" ["l"="30.002,33.823"]
"kampta/DeepLayout" ["l"="29.968,33.84"]
"ktrk115/const_layout" ["l"="29.998,33.809"]
"JiananLi2016/LayoutGAN-Tensorflow" ["l"="30.016,33.8"]
"billzhonggz/LayoutGAN" ["l"="30.024,33.811"]
"CyberAgentAILab/canvas-vae" ["l"="29.978,33.819"]
"Belval/CRNN" ["l"="29.424,34.086"]
"solivr/tf-crnn" ["l"="29.417,34.067"]
"A-bone1/Attention-ocr-Chinese-Version" ["l"="29.457,34.085"]
"A-bone1/FSNS-tfrecord-generate" ["l"="29.421,34.052"]
"Yuliang-Liu/Curve-Text-Detector" ["l"="29.513,34.041"]
"emedvedev/attention-ocr" ["l"="29.422,34.13"]
"bgshih/seglink" ["l"="29.426,34.041"]
"lluisgomez/TextProposals" ["l"="29.354,34.059"]
"dengdan/seglink" ["l"="29.441,34.079"]
"Bartzi/stn-ocr" ["l"="29.436,34.067"]
"BestSonny/SSTD" ["l"="29.412,34.033"]
"jugg1024/Text-Detection-with-FRCN" ["l"="29.365,34.043"]
"HCIILAB/Scene-Text-Recognition" ["l"="29.626,34.054"]
"Yuliang-Liu/Box_Discretization_Network" ["l"="29.626,34.025"]
"GXYM/DRRG" ["l"="29.654,33.984"]
"burness/tensorflow-101" ["l"="29.341,34.149"]
"soloice/Chinese-Character-Recognition" ["l"="29.287,34.151"]
"tobegit3hub/deep_recommend_system" ["l"="22.845,37.311"]
"igul222/improved_wgan_training" ["l"="33.69,32.656"]
"AmemiyaYuko/HandwrittenChineseCharacterRecognition" ["l"="29.297,34.14"]
"buriburisuri/ac-gan" ["l"="33.783,32.578"]
"ahangchen/GDLnotes" ["l"="23.678,31.377"]
"shekkizh/WassersteinGAN.tensorflow" ["l"="33.776,32.604"]
"rockingdingo/deepnlp" ["l"="32.091,30.044"]
"koth/kcws" ["l"="32.038,30.083"]
"FangShancheng/ABINet" ["l"="29.722,34.041"]
"chenjun2hao/Bert_OCR.pytorch" ["l"="29.65,34.004"]
"RuijieJ/pren" ["l"="29.731,34.013"]
"Jyouhou/SceneTextPapers" ["l"="29.553,34.054"]
"pannous/tensorflow-ocr" ["l"="29.389,34.149"]
"AimeeKing/crnn-tensorflow" ["l"="29.345,34.071"]
"dlunion/CaffeLSTM-OCR" ["l"="34.618,33.618"]
"HCIILAB/Scene-Text-End2end" ["l"="29.608,34.02"]
"liuhu-bigeye/enctc.crnn" ["l"="29.594,33.982"]
"TJCVRS/CRNN_Tensorflow" ["l"="29.386,34.061"]
"kurapan/CRNN" ["l"="29.456,34.069"]
"YoungMiao/crnn" ["l"="29.318,34.098"]
"rmtheis/tess-two" ["l"="29.202,34.49"]
"tesseract-ocr/langdata" ["l"="29.385,34.286"]
"gali8/Tesseract-OCR-iOS" ["l"="-51.188,-0.45"]
"rmtheis/android-ocr" ["l"="29.192,34.526"]
"fh2019ustc/Awesome-Document-Image-Rectification" ["l"="29.725,34.238"]
"fh2019ustc/DocScanner" ["l"="29.733,34.253"]
"fh2019ustc/DocTr" ["l"="29.719,34.214"]
"fh2019ustc/DocTr-Plus" ["l"="29.743,34.245"]
"fh2019ustc/DocGeoNet" ["l"="29.721,34.25"]
"tesseract-ocr/docs" ["l"="29.36,34.312"]
"tesseract-ocr/tesseract-ocr.github.io" ["l"="29.345,34.321"]
"tesseract-ocr/langdata_lstm" ["l"="29.397,34.329"]
"tesseract-ocr/tesstrain" ["l"="29.437,34.363"]
"pannous/caffe-ocr" ["l"="29.339,34.205"]
"jinxiwang/ocr_TDR" ["l"="29.401,34.172"]
"jjcheer/ocrcn_tf2" ["l"="29.425,34.166"]
"Mignet/chinese-write-handling-char-recognition" ["l"="29.374,34.206"]
"chenyr0021/Chinese_character_recognition" ["l"="29.368,34.187"]
"intel/handwritten-chinese-ocr-samples" ["l"="29.258,34.175"]
"chineseocr/trocr-chinese" ["l"="29.689,34.126"]
"peterWon/CASIA-HWDB-Recognition" ["l"="29.315,34.159"]
"wangjinxile/ocr_TDR" ["l"="29.355,34.196"]
"integeruser/CASIA-HWDB1.1-cnn" ["l"="29.315,34.174"]
"GlassyWing/text-detection-ocr" ["l"="29.483,34.129"]
"FLming/CRNN.tf2" ["l"="29.513,34.199"]
"sam-ke/idCardOcr" ["l"="29.294,34.195"]
"wzb19960208/idCardRecognition" ["l"="30.882,35.092"]
"still-wait/deepLearning_OCR" ["l"="29.313,34.195"]
"XieZhiFa/IdCardOCR" ["l"="49.005,1.63"]
"bai-shang/crnn_seq2seq_ocr_pytorch" ["l"="29.634,34.076"]
"bai-shang/crnn_ctc_ocr_tf" ["l"="29.602,34.114"]
"danschultzer/receipt-scanner" ["l"="30.002,34.368"]
"SmartReceipts/SmartReceiptsLibrary" ["l"="30.036,34.387"]
"mre/receipt-parser" ["l"="29.959,34.334"]
"billstark/receipt-scanner" ["l"="30.015,34.35"]
"danschultzer/blazing-bookkeeper" ["l"="30.015,34.39"]
"jasalt/kuittiskanneri" ["l"="20.149,1.333"]
"tleyden/open-ocr" ["l"="29.396,34.244"]
"guitarmind/tesseract-web-service" ["l"="29.314,34.265"]
"tleyden/DetectText" ["l"="29.342,34.254"]
"otiai10/gosseract" ["l"="-13.14,1.844"]
"tmbdev/hocr-tools" ["l"="29.525,34.418"]
"creatale/node-dv" ["l"="24.099,17.028"]
"otiai10/ocrserver" ["l"="-13.147,2.104"]
"jlsutherland/doc2text" ["l"="29.442,34.293"]
"breezedeus/cnstd" ["l"="29.643,34.164"]
"diaomin/crnn-mxnet-chinese-text-recognition" ["l"="29.58,34.264"]
"liuheng92/tensorflow_PSENet" ["l"="29.549,34.065"]
"python-pillow/Pillow" ["l"="22.899,4.256"]
"mstamy2/PyPDF2" ["l"="24.534,3.866"]
"pdfminer/pdfminer.six" ["l"="24.52,3.791"]
"seatgeek/fuzzywuzzy" ["l"="29.592,32.784"]
"Belval/pdf2image" ["l"="24.48,3.829"]
"euske/pdfminer" ["l"="24.563,3.805"]
"asweigart/pyautogui" ["l"="45.368,-0.945"]
"theskumar/python-dotenv" ["l"="23.01,3.897"]
"openpaperwork/pyocr" ["l"="29.36,34.275"]
"goncalopp/simple-ocr-opencv" ["l"="25.928,13.867"]
"openpaperwork/libpillowfight" ["l"="29.303,34.287"]
"simonflueckiger/tesserocr-windows_build" ["l"="29.309,34.315"]
"jflesch/pyocr" ["l"="29.269,34.331"]
"hotstu/javaCaptcha" ["l"="29.129,34.443"]
"DeepSystems/supervisely-tutorials" ["l"="29.299,34.085"]
"supervisely/supervisely" ["l"="29.226,34.074"]
"hs105/Deep-Learning-for-OCR" ["l"="29.361,34.094"]
"matthewearl/deep-anpr" ["l"="30.751,34.869"]
"adaptech-cz/Tesseract4Android" ["l"="29.108,34.545"]
"alexcohn/tess-two" ["l"="29.069,34.552"]
"SubhamTyagi/android-ocr" ["l"="29.107,34.569"]
"zsmartercn/Tess4Android" ["l"="29.079,34.567"]
"simplezhli/Tesseract-OCR-Scanner" ["l"="29.128,34.516"]
"zacharywhitley/awesome-ocr" ["l"="29.694,34.224"]
"ChanChiChoi/awesome-ocr" ["l"="29.57,34.066"]
"mvoelk/ssd_detectors" ["l"="29.416,34.011"]
"qjadud1994/CRNN-Keras" ["l"="29.405,34.046"]
"qjadud1994/Text_Detector" ["l"="29.481,33.992"]
"tiantian91091317/OCR-Corrector" ["l"="29.69,34.108"]
"renard314/textfairy" ["l"="29.151,34.556"]
"GautamGupta/Simple-Android-OCR" ["l"="29.179,34.572"]
"ctodobom/OpenNoteScanner" ["l"="24.673,-30.879"]
"allgood/OpenNoteScanner" ["l"="24.673,-30.815"]
"priyankvex/Easy-Ocr-Scanner-Android" ["l"="29.152,34.586"]
"byoutline/kickmaterial" ["l"="49.925,-3.483"]
"jhansireddy/AndroidScannerDemo" ["l"="24.675,-30.86"]
"artetxem/mitzuli" ["l"="29.112,34.6"]
"lawloretienne/DiscreteSlider" ["l"="52.115,-3.013"]
"Aniruddha-Tapas/Document-Scanner" ["l"="24.651,-30.863"]
"vmihalachi/turbo-editor" ["l"="-28.293,-22.346"]
"tbruyelle/RxPermissions" ["l"="48.649,0.916"]
"googlesamples/easypermissions" ["l"="48.652,0.873"]
"alibaba/ARouter" ["l"="48.786,1.055"]
"greenrobot/greenDAO" ["l"="48.6,0.682"]
"chrisbanes/PhotoView" ["l"="48.52,0.692"]
"Curzibn/Luban" ["l"="48.66,1.096"]
"alibaba/vlayout" ["l"="48.666,1.12"]
"Yalantis/uCrop" ["l"="48.528,0.884"]
"wasabeef/glide-transformations" ["l"="48.559,0.94"]
"crazycodeboy/TakePhoto" ["l"="48.577,1.25"]
"trello/RxLifecycle" ["l"="48.662,0.786"]
"zhihu/Matisse" ["l"="48.686,1.08"]
"didi/VirtualAPK" ["l"="48.877,0.965"]
"deeperic/SpikeFlow" ["l"="29.311,34.213"]
"ugetdm/uget-extension" ["l"="29.429,34.594"]
"slgobinath/uget-chrome-wrapper" ["l"="29.402,34.594"]
"ugetdm/uget" ["l"="29.413,34.609"]
"invoice-x/invoice2data" ["l"="29.849,34.272"]
"naiveHobo/InvoiceNet" ["l"="29.832,34.242"]
"robela/OCR-Invoice" ["l"="29.911,34.306"]
"vsymbol/CUTIE" ["l"="29.896,34.247"]
"dhavalpotdar/Graph-Convolution-on-Structured-Documents" ["l"="29.871,34.228"]
"atlanhq/camelot" ["l"="24.536,3.734"]
"camelot-dev/camelot" ["l"="24.506,3.741"]
"zzzDavid/ICDAR-2019-SROIE" ["l"="29.891,34.205"]
"invoice-x/invoicex-gui" ["l"="29.88,34.296"]
"akretion/factur-x" ["l"="29.888,34.318"]
"Tessellate-Imaging/Monk_Object_Detection" ["l"="30.114,34.449"]
"Tessellate-Imaging/monk_v1" ["l"="30.166,34.498"]
"Tessellate-Imaging/Monk_Gui" ["l"="30.129,34.491"]
"Tessellate-Imaging/Pytorch_Tutorial" ["l"="30.139,34.474"]
"hhaji/Deep-Learning" ["l"="30.18,34.439"]
"alankbi/detecto" ["l"="30.173,34.474"]
"phamquiluan/PubLayNet" ["l"="29.818,34.275"]
"ciber-lab/pictor-ppe" ["l"="30.143,34.43"]
"ZumingHuang/awesome-ocr-resources" ["l"="29.532,34.025"]
"HCIILAB/Scene-Text-Detection" ["l"="29.599,34.033"]
"PAIR-code/lit" ["l"="29.643,32.514"]
"junhyukoh/caffe-lstm" ["l"="26.876,34.145"]
"rakeshvar/rnn_ctc" ["l"="0.809,39.746"]
"MichalBusta/FASText" ["l"="29.339,34.056"]
"amaas/stanford-ctc" ["l"="0.751,39.764"]
"dophist/kaldi-lstm" ["l"="26.822,34.147"]
"komamitsu/Android-OCRSample" ["l"="29.184,34.62"]
"DynamsoftRD/android-tesseract-ocr" ["l"="29.152,34.617"]
"testica/text-scanner" ["l"="29.167,34.601"]
"yushulx/android-tesseract-ocr" ["l"="29.202,34.602"]
"card-io/card.io-Android-SDK" ["l"="26.683,16.066"]
"google/cameraview" ["l"="48.552,0.815"]
"jgilfelt/android-viewbadger" ["l"="48.11,0.445"]
"jdamcd/android-crop" ["l"="48.259,0.656"]
"gabrielemariotti/cardslib" ["l"="48.183,0.423"]
"pengjianbo/GalleryFinal" ["l"="48.343,1.156"]
"liaohuqiu/android-Ultra-Pull-To-Refresh" ["l"="48.389,0.873"]
"ksoichiro/Android-ObservableScrollView" ["l"="48.275,0.682"]
"JakeWharton/DiskLruCache" ["l"="48.532,0.599"]
"singwhatiwanna/dynamic-load-apk" ["l"="48.616,0.865"]
"aim-uofa/AdelaiDet" ["l"="34.636,35.565"]
"open-mmlab/mmdeploy" ["l"="34.658,35.732"]
"open-mmlab/mmclassification" ["l"="34.624,35.739"]
"open-mmlab/mmcv" ["l"="34.484,35.647"]
"faustomorales/keras-ocr" ["l"="29.616,34.149"]
"RubanSeven/CRAFT_keras" ["l"="29.583,34.013"]
"tulasiram58827/ocr_tflite" ["l"="29.644,34.216"]
"pengcao/chinese_ocr" ["l"="29.457,34.197"]
"wenwenyu/MASTER-pytorch" ["l"="29.723,34.083"]
"cvlab-stonybrook/DewarpNet" ["l"="29.706,34.253"]
"cvlab-stonybrook/doc3D-dataset" ["l"="29.69,34.252"]
"xiaoyu258/DocProj" ["l"="29.677,34.212"]
"sagniklp/doc3D-renderer" ["l"="29.674,34.269"]
"DVLP-CMATERJU/RectiNet" ["l"="29.69,34.265"]
"gwxie/Dewarping-Document-Image-By-Displacement-Flow-Estimation" ["l"="29.703,34.269"]
"xellows1305/Document-Image-Dewarping" ["l"="29.671,34.257"]
"teresasun/docUnet.pytorch" ["l"="29.69,34.278"]
"mhashas/Document-Image-Unwarping-pytorch" ["l"="29.705,34.283"]
"cvlab-stonybrook/PaperEdge" ["l"="29.702,34.241"]
"wuleiaty/DocUNet" ["l"="29.682,34.285"]
"localhost02/SealUtil" ["l"="29.734,34.103"]
"niezhiliang/signature-utils" ["l"="29.782,34.088"]
"impira/docquery" ["l"="29.798,34.217"]
"basetenlabs/truss" ["l"="34.758,-28.233"]
"code-kern-ai/refinery" ["l"="29.448,32.484"]
"recognai/rubrix" ["l"="29.535,32.529"]
"huggingface/setfit" ["l"="29.513,32.509"]
"DerwenAI/kglab" ["l"="26.83,29.359"]
"deepdoctection/deepdoctection" ["l"="29.832,34.16"]
"primeqa/primeqa" ["l"="25.829,29.221"]
"webis-de/small-text" ["l"="29.462,32.508"]
"neuml/txtai" ["l"="29.584,32.482"]
"baudm/parseq" ["l"="29.773,34.026"]
"clovaai/synthtiger" ["l"="29.766,34.044"]
"sml2h3/ddddocr" ["l"="-18.39,-29.45"]
"qjadud1994/Korean-license-plate-Generator" ["l"="29.36,33.997"]
"sbillburg/CRNN-with-STN" ["l"="29.341,34.001"]
"Tony607/keras-image-ocr" ["l"="29.346,33.983"]
"gasparian/CRNN_OCR_lite" ["l"="29.366,34.015"]
"mittagessen/kraken" ["l"="29.632,34.344"]
"leha-bot/PRLib" ["l"="29.398,34.408"]
"A9T9/Free-OCR-Software" ["l"="29.404,34.523"]
"clovaai/CLEval" ["l"="29.755,34.054"]
"SHI-Labs/Rethinking-Text-Segmentation" ["l"="29.764,33.995"]
"xdxie/WordArt" ["l"="29.8,34.015"]
"clovaai/webvicob" ["l"="29.905,34.081"]
"youdao-ai/SRNet-Datagen" ["l"="29.722,33.982"]
"ymy-k/DPText-DETR" ["l"="29.786,34.005"]
"clovaai/lffont" ["l"="33.249,32.382"]
"roatienza/deep-text-recognition-benchmark" ["l"="29.73,34.048"]
"vigri/scantailor-advanced" ["l"="29.61,34.467"]
"4lex4/scantailor-libs-build" ["l"="29.604,34.45"]
"unpaper/unpaper" ["l"="29.567,34.515"]
"ilius/pyglossary" ["l"="-29.973,-16.054"]
"AirBernard/Scene-Text-Detection-with-SPCNET" ["l"="29.572,33.993"]
"huizhang0110/AON" ["l"="29.532,33.957"]
"fnzhan/ESIR" ["l"="29.564,33.947"]
"guruL/Character-Region-Awareness-for-Text-Detection-" ["l"="29.614,33.998"]
"OCR4all/OCR4all" ["l"="29.67,34.333"]
"Calamari-OCR/calamari_models" ["l"="29.536,34.321"]
"dhlab-epfl/dhSegment" ["l"="29.717,34.299"]
"NVlabs/ocropus3" ["l"="29.576,34.339"]
"ocropus/ocropy" ["l"="29.661,34.352"]
"lquirosd/P2PaLA" ["l"="29.738,34.305"]
"OCR4all/LAREX" ["l"="29.647,34.328"]
"UB-Mannheim/ocr-fileformat" ["l"="29.606,34.382"]
"RajSolai/TextSnatcher" ["l"="-28.773,-24.027"]
"crow-translate/crow-translate" ["l"="-27.654,-17.742"]
"informatici/openhospital" ["l"="30.321,34.59"]
"informatici/openhospital-core" ["l"="30.359,34.596"]
"informatici/openhospital-api" ["l"="30.347,34.589"]
"informatici/openhospital-gui" ["l"="30.344,34.602"]
"informatici/openhospital-ui" ["l"="30.34,34.572"]
"junaid33/opensource.builders" ["l"="30.276,34.574"]
"mayeaux/nodetube" ["l"="26.182,-25.415"]
"staticdeploy/staticdeploy" ["l"="-9.044,0.219"]
"FBDevCLagos/The-Internship-v1" ["l"="30.315,34.62"]
"chaskiq/chaskiq" ["l"="32.229,-26.149"]
"JackZhu426/ElysiumMall" ["l"="8.294,17.238"]
"ZijianWang1995/PPE_detection" ["l"="30.162,34.416"]
"AnshulSood11/PPE-Detection-YOLO-Deep_SORT" ["l"="32.087,36.26"]
"Academic-Hammer/SciTSR" ["l"="29.812,34.187"]
"Irene323/GFTE" ["l"="29.798,34.166"]
"HCIILAB/Scene-Text-Recognition-Recommendations" ["l"="29.751,34.037"]
"hiroi-sora/PaddleOCR-json" ["l"="29.614,34.279"]
"hiroi-sora/Umi-CUT" ["l"="29.595,34.323"]
"tencent-wechat/phxsql" ["l"="-11.276,4.799"]
"WZBSocialScienceCenter/pdftabextract" ["l"="22.867,4.204"]
"HiFaraz/node-playbook" ["l"="28.114,-19.146"]
"baidu/Paddle" ["l"="27.045,33.93"]
"PHPixie/Project" ["l"="11.872,-8.981"]
"falvaro/seshat" ["l"="24.9,28.794"]
"christabor/flask_jsondash" ["l"="20.001,1.375"]
"TYVRNET/SRL" ["l"="-24.619,-42.738"]
"gregdurrett/berkeley-doc-summarizer" ["l"="33.866,32.366"]
"worldofpiggy/deeplearning-ahem-detector" ["l"="28.373,-18.667"]
"jsvine/waybackpack" ["l"="25.627,-20.193"]
"Belval/crnn" ["l"="29.303,34.055"]
"wcy940418/CRNN-end-to-end" ["l"="29.315,34.056"]
"Mingtzge/2019-CCF-BDCI-OCR-MCZJ-fake_data_generator" ["l"="29.735,34.072"]
"udipbohara/info_extraction_receipts" ["l"="29.919,34.254"]
"Pay20Y/FOTS_TF" ["l"="29.512,33.995"]
"xieyufei1993/FOTS" ["l"="29.515,33.972"]
"yu20103983/FOTS" ["l"="29.495,33.959"]
"Shun14/TextBoxes_plusplus_Tensorflow" ["l"="29.464,33.939"]
"chenjun2hao/FOTS.pytorch" ["l"="29.521,33.934"]
"fireae/Split_Merge_table_recognition" ["l"="29.822,34.146"]
"ccccccmd/ReCapcha" ["l"="29.749,33.851"]
"coldicelion/Captcha-Recognizer" ["l"="22.785,19.525"]
"coldicelion/Strong-Web-Crawler" ["l"="22.78,19.548"]
"vwarship/ocrstyle" ["l"="29.745,33.88"]
"xuwenxue000/PJ_DARKNET" ["l"="29.776,33.878"]
"JiangKui007/jx_ocr" ["l"="29.78,33.851"]
"lxj0276/OCRServer" ["l"="29.768,33.865"]
"rohanpillai20/Table-Extractor-From-Image" ["l"="29.94,34.18"]
"vitali84/pdf-to-csv-table-extactor" ["l"="29.959,34.166"]
"ulikoehler/OTR" ["l"="29.924,34.21"]
"brian-yang/table-parser-opencv" ["l"="29.966,34.188"]
"rinkstiekema/PDF-Table-Structure-Recognition-using-deep-learning" ["l"="29.861,34.202"]
"the-black-knight-01/Tabulo" ["l"="29.925,34.187"]
"fengxinjie/Transformer-OCR" ["l"="29.638,34.021"]
"ooooverflow/chinese-ocr" ["l"="29.497,34.105"]
"Walleclipse/ChineseAddress_OCR" ["l"="29.496,34.068"]
"MachineLP/OCR_repo" ["l"="29.424,34.21"]
"githubharald/CTCWordBeamSearch" ["l"="0.664,39.712"]
"frereit/TensorflowHandwritingRecognition" ["l"="0.821,39.571"]
"YIYIMZ/my_orc_keras_verification_code_identification" ["l"="29.369,34.123"]
"IMYR666/any-captcha" ["l"="-18.53,-29.478"]
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" ["l"="30.776,34.811"]
"wangyuxin87/VisionLAN" ["l"="29.757,34.008"]
"mxin262/SwinTextSpotter" ["l"="29.784,34.018"]
"FudanVI/benchmarking-chinese-text-recognition" ["l"="29.741,34.042"]
"google-research-datasets/hiertext" ["l"="29.8,34.033"]
"roatienza/straug" ["l"="29.737,34.025"]
"amazon-research/semimtr-text-recognition" ["l"="29.789,33.965"]
"shannanyinxiang/SPTS" ["l"="29.83,34"]
"mjq11302010044/TPGSR" ["l"="29.758,33.953"]
"FudanVI/FudanOCR" ["l"="29.755,33.979"]
"mjq11302010044/TATT" ["l"="29.747,33.963"]
"huiyang865/plugnet" ["l"="29.751,33.93"]
"zhaominyiz/C3-STISR" ["l"="29.742,33.951"]
"yflv-yanxia/scene_text" ["l"="29.618,33.975"]
"MhLiao/SynthText3D" ["l"="29.651,33.956"]
"cjnolet/text-renderer" ["l"="29.6,33.878"]
"FangShancheng/conv-ensemble-str" ["l"="29.6,33.896"]
"chongshengzhang/shopsign" ["l"="29.588,33.91"]
"autonise/CRAFT-Remade" ["l"="29.602,33.995"]
"SakuraRiven/EAST" ["l"="29.57,34.031"]
"liuch37/sar-pytorch" ["l"="29.691,34.001"]
"xhzdeng/crpn" ["l"="29.432,33.997"]
"Pay20Y/SAR_TF" ["l"="29.679,33.987"]
"jichilen/SAR_quick" ["l"="29.662,33.965"]
"Bartzi/kiss" ["l"="29.64,33.977"]
"jiangxiluning/MASTER-TF" ["l"="29.719,34.022"]
"JiaquanYe/MASTER-mmocr" ["l"="29.81,34.096"]
"limengyang1992/seq2seq-layout-analysis" ["l"="29.772,34.078"]
"novioleo/Savior" ["l"="29.745,34.083"]
"ying09/TextFuseNet" ["l"="29.691,34.04"]
"SiKang123/ImgTranslator" ["l"="29.073,34.517"]
"wenchaosong/OCR_identify" ["l"="49.035,1.709"]
"iluhcm/QrCodeScanner" ["l"="-35.329,38.657"]
"CN-ZPH/Three360panorama" ["l"="52.706,-2.101"]
"beiliao-mobile/BadgeNumberManager" ["l"="48.632,1.635"]
"pqpo/SmartCamera" ["l"="48.862,1.428"]
"fengzhizi715/Tess-TwoDemo" ["l"="50.538,1.777"]
"naptha/tessdata" ["l"="29.341,34.41"]
"tesseract-ocr/test" ["l"="29.382,34.363"]
"clovaai/spade" ["l"="29.871,34.134"]
"clovaai/bros" ["l"="29.879,34.117"]
"liuheng92/OCR_EVALUATION" ["l"="29.6,34.011"]
"PaddlePaddle/PASSL" ["l"="34.091,35.909"]
"Alpaca07/dtr" ["l"="29.639,33.933"]
"GXYM/TextBPN" ["l"="29.665,33.93"]
"GXYM/TextPMs" ["l"="29.67,33.913"]
"GXYM/KPN" ["l"="29.661,33.921"]
"GXYM/TextBPN-Plus-Plus" ["l"="29.657,33.911"]
"GXYM/GloRe" ["l"="29.673,33.924"]
"GXYM/GHM_Loss" ["l"="29.681,33.917"]
"HCIILAB/SCUT-EPT_Dataset_Release" ["l"="29.219,34.166"]
"HCIILAB/SCUT-HCCDoc_Dataset_Release" ["l"="29.171,34.174"]
"lcy0604/EraseNet" ["l"="29.794,33.977"]
"HCIILAB/SCUT-EnsText" ["l"="29.793,33.952"]
"neouyghur/One-stage-Mask-based-Scene-Text-Eraser" ["l"="29.781,33.947"]
"Yuliang-Liu/TIoU-metric" ["l"="29.587,33.998"]
"lcy0604/CTRNet" ["l"="29.814,33.967"]
"xuewenyuan/TGRNet" ["l"="29.857,34.141"]
"pyxploiter/deep-splerge" ["l"="29.814,34.124"]
"phamquiluan/table-transformer" ["l"="29.852,34.16"]
"abdoelsayed2016/TNCR_Dataset" ["l"="29.871,34.196"]
"yizhiwang96/TextLogoLayout" ["l"="29.856,33.936"]
"Canjie-Luo/Real-300K" ["l"="29.824,33.982"]
"mlpc-ucsd/TESTR" ["l"="29.818,34"]
"HCIILAB/DeRPN" ["l"="29.553,33.964"]
"clovaai/TedEval" ["l"="29.661,34.011"]
"Vipermdl/OCR_detection_IC15" ["l"="29.507,33.94"]
"novioleo/FOTS" ["l"="29.496,33.92"]
"Wovchena/text-detection-fots.pytorch" ["l"="29.547,33.923"]
"MagicianQi/FOTS_two_stage" ["l"="29.495,33.892"]
"bityigoss/mtl-text-recognition" ["l"="29.623,33.957"]
"MauritsBleeker/Bi-STET" ["l"="29.539,33.868"]
"adeline-cs/GTR" ["l"="29.782,33.994"]
"simplify23/CDistNet" ["l"="29.81,33.983"]
"ViTAE-Transformer/DeepSolo" ["l"="29.804,34.001"]
"byeonghu-na/MATRN" ["l"="29.798,33.991"]
"WHU-ZQH/FSAM4PLM" ["l"="27.831,31.606"]
"wangbing1416/C3DA" ["l"="27.831,31.594"]
"DREAMXFAR/FCL-Net" ["l"="27.85,31.626"]
"ruifcruz/sroie-on-layoutlm" ["l"="29.888,34.153"]
"brooklyn1900/CRAFT_pytorch" ["l"="29.62,33.991"]
"clovaai/dmfont" ["l"="33.242,32.347"]
"doc-analysis/XFUND" ["l"="29.896,34.131"]
"applicaai/kleister-nda" ["l"="29.924,34.097"]
"cndplab-founder/ctdar_measurement_tool" ["l"="29.909,34.179"]
"sgrpanchal31/table-detection-dataset" ["l"="29.928,34.165"]
"weidafeng/TableCell" ["l"="29.806,34.116"]
"hpanwar08/detectron2" ["l"="29.785,34.259"]
"facebookresearch/IMGUR5K-Handwriting-Dataset" ["l"="29.889,34.007"]
"gwxie/Document-Dewarping-with-Control-Points" ["l"="29.734,34.276"]
"FeiGeChuanShu/ncnn_paddleocr" ["l"="31.562,36.259"]
"wp03052/MATRN" ["l"="29.84,33.99"]
"AlibabaResearch/AdvancedLiterateMachinery" ["l"="29.877,34.025"]
"google-research/pix2struct" ["l"="30.015,34.084"]
"vis-nlp/ChartQA" ["l"="30.142,34.061"]
"microsoft/UDOP" ["l"="29.919,34.127"]
"amazon-research/glass-text-spotting" ["l"="29.848,34.008"]
"yeungchenwa/OCR-SAM" ["l"="29.826,34.011"]
"wenwenyu/TCM" ["l"="29.85,33.998"]
"mawanda-jun/TableTrainNet" ["l"="29.868,34.241"]
"tamirhassan/dataset-tools" ["l"="29.893,34.189"]
"jkiesele/caloGraphNN" ["l"="29.884,34.17"]
"iqiyi/FASPell" ["l"="32.106,30.314"]
"tommyMessi/DocumentPhotoCorrection" ["l"="29.82,34.086"]
"tommyMessi/waveCorrection" ["l"="29.84,34.078"]
"bigcash/awesome-ai-list-guide" ["l"="29.83,34.099"]
"antoinedelplace/Chargrid" ["l"="29.943,34.239"]
"vincentAGNES/OCR-Extract-total-amount-TTC-of-receipts" ["l"="29.929,34.266"]
"weijiawu/TransVTSpotter" ["l"="29.916,33.946"]
"weijiawu/TransDETR" ["l"="29.94,33.93"]
"weijiawu/BOVText-Benchmark" ["l"="29.958,33.93"]
"whai362/TDA-ReCTS" ["l"="29.725,34.164"]
"whai362/AE_TextSpotter" ["l"="29.733,34.146"]
"xieyufei1993/InceptText-Tensorflow" ["l"="29.483,33.946"]
"UpCoder/ICPR_TextDection" ["l"="29.457,33.896"]
"msight-tech/research-charnet" ["l"="29.785,34.038"]
"yuantailing/ctw-baseline" ["l"="29.5,34.034"]
"zcswdt/OCR_ICDAR_label_revise" ["l"="29.699,34.068"]
"zcswdt/Color_OCR_image_generator" ["l"="29.757,34.074"]
"Michael-Xiu/ICDAR-SROIE" ["l"="29.956,34.217"]
"chawla201/Custom-Named-Entity-Recognition" ["l"="29.94,34.201"]
"sciencefictionlab/chargrid-pytorch" ["l"="29.937,34.226"]
"BlackStar1313/ICDAR-2019-RRC-SROIE" ["l"="29.943,34.213"]
"Ice-Hazymoon/domains" ["l"="-24.922,23.176"]
"Aurora11111/crnn-train-pytorch" ["l"="29.136,34.094"]
"Aurora11111/TextRecognitionDataGenerator" ["l"="29.107,34.093"]
"YoungMiao/synthdata-zh" ["l"="29.206,34.095"]
"parlance/ctcdecode" ["l"="0.615,39.786"]
"githubharald/CTCDecoder" ["l"="0.635,39.749"]
"SeanNaren/deepspeech.pytorch" ["l"="0.616,39.872"]
"baidu-research/warp-ctc" ["l"="27.086,33.924"]
"fh2019ustc/PolySnake" ["l"="29.758,34.274"]
"BboyHanat/TextGenerator" ["l"="29.666,34.026"]
"lancercat/VSDF" ["l"="29.789,33.926"]
"jdfxzzy/DPMN" ["l"="29.777,33.916"]
"Wang-Tianwei/Implicit-feature-alignment" ["l"="30.873,32.252"]
"SWHL/RapidVideOCR" ["l"="29.638,34.25"]
"wangfreexx/wangfreexx-tianruoocr-cl-paddle" ["l"="-27.519,-17.836"]
"PaddlePaddle/Paddle2ONNX" ["l"="34.15,35.831"]
"RapidAI/RapidASR" ["l"="0.442,39.8"]
"raoyutian/PaddleOCRSharp" ["l"="23.276,19.28"]
"miaomiaosoft/PandaOCR.Pro" ["l"="-27.521,-17.795"]
"JosephKJ/Awesome-Layout-Generators" ["l"="29.995,33.786"]
"aalto-ui/GRIDS" ["l"="30.014,33.779"]
"yizhiwang96/PKU-CSCL-Surveys" ["l"="29.887,33.917"]
"ecnuycxie/DG-Font" ["l"="33.262,32.375"]
"TencentARC/BTS" ["l"="29.875,33.911"]
"JiageWang/hand-writing-recognition" ["l"="29.287,34.175"]
"wangjp0408/HCCR-HWDB-tensorflow" ["l"="29.275,34.16"]
"songdejia/DFL-CNN" ["l"="34.351,36.504"]
"chongyangtao/DeepHCCR" ["l"="29.277,34.126"]
"angzhou/anchor" ["l"="29.27,34.143"]
"orange90/HandWrittenChineseRecogntion" ["l"="29.273,34.19"]
"virantha/pypdfocr" ["l"="29.499,34.51"]
"virantha/scanpdf" ["l"="29.496,34.54"]
"YukangWang/TextField" ["l"="29.442,33.944"]
"wangyisll/TessTwoDemo" ["l"="29.071,34.426"]
"bytedeco/javacpp-presets" ["l"="7.045,19.649"]
"bytedeco/javacv" ["l"="7.067,19.607"]
"java-native-access/jna" ["l"="9.275,21.602"]
"coobird/thumbnailator" ["l"="9.808,21.398"]
"nguyenq/lept4j" ["l"="29.252,34.411"]
"plutext/docx4j" ["l"="10.935,20.385"]
"Sayi/poi-tl" ["l"="9.996,21.422"]
"sbraconnier/jodconverter" ["l"="10.951,20.358"]
"haraldk/TwelveMonkeys" ["l"="6.96,19.587"]
"Yuanhang8605/pixel-anchor-link-and-text-detector-experience" ["l"="29.398,33.996"]
"chineseocr/new-text-detection-ctpn" ["l"="29.323,34.134"]
"EnkrateiaLucca/ocr_for_transcribing_pdf_slides" ["l"="29.582,33.946"]
"FangShancheng/ABINet-PP" ["l"="29.895,33.985"]
"JinGyeSetBirdsFree/FudanOCR" ["l"="29.801,34.046"]
"lancercat/OSOCR" ["l"="29.804,33.901"]
"Yuliang-Liu/SPTS" ["l"="29.872,33.976"]
"Yuliang-Liu/ATVM-Datasets" ["l"="29.865,33.986"]
"ViTAE-Transformer/ViTAE-Transformer-Scene-Text-Detection" ["l"="29.832,33.964"]
"thomasjhuang/deep-learning-for-document-dewarping" ["l"="29.698,34.293"]
"Breta01/handwriting-ocr" ["l"="0.8,39.569"]
"ocrbook/ocrinaction" ["l"="29.658,34.069"]
"Vincent131499/Chinese-OCR3" ["l"="29.67,33.976"]
"simonwsw/cnn-zh" ["l"="29.222,34.141"]
"GXYM/Focal-loss" ["l"="29.667,33.903"]
"GXYM/OHEM-loss" ["l"="29.678,33.905"]
"leonlulu/DeepLayout" ["l"="29.785,34.291"]
"watersink/ocrsegment" ["l"="29.788,34.322"]
"rbaguila/document-layout-analysis" ["l"="29.76,34.317"]
"JaMesLiMers/Document_layout_analysis" ["l"="29.836,34.289"]
"NVlabs/ocroseg" ["l"="29.816,34.331"]
"felixBrave/ocr_chinese" ["l"="29.342,34.124"]
"zhongzhuoyao/HCCR-GoogLeNet" ["l"="29.238,34.13"]
"HCIILAB/Forward-Implementation-of-Fast-and-Compact-CNN-for-Offline-HCCR" ["l"="29.248,34.146"]
"pavlo-melnyk/offline-HCCR" ["l"="29.219,34.117"]
"changebo/HCCG-CycleGAN" ["l"="33.38,32.436"]
"stupidZZ/Symmetry_Text_Line_Detection" ["l"="29.314,34.068"]
"TobiasGruening/ARU-Net" ["l"="29.755,34.339"]
"ssudholt/phocnet" ["l"="29.784,34.399"]
"DIVA-DIA/DIVA_Line_Segmentation_Evaluator" ["l"="29.778,34.355"]
"DIVA-DIA/DIVA_Layout_Analysis_Evaluator" ["l"="29.741,34.331"]
"tongpi/synthtext100kCH" ["l"="29.335,34.106"]
"xiaodiu2010/TextBoxes-TensorFlow" ["l"="29.342,34.044"]
"chenxinpeng/SSD_scene_text_detection" ["l"="29.377,34.033"]
"Revolution1/ID_generator" ["l"="29.665,34.22"]
"mateogianolio/ocr" ["l"="29.223,34.239"]
"Mountchicken/Efficient-Deep-Learning" ["l"="29.844,33.976"]
"HotaekHan/SSTDNet" ["l"="29.368,33.973"]
"Yuanhang8605/faster-than-ctpn-a-novel-poster-text-detector" ["l"="29.33,33.933"]
"HsiehYiChia/Scene-text-recognition" ["l"="29.321,33.994"]
"subokita/Robust-Text-Detection" ["l"="29.282,34.033"]
"jpuigcerver/PyLaia" ["l"="29.707,34.334"]
"OpenPhilology/nidaba" ["l"="29.658,34.4"]
"HTR-United/htr-united" ["l"="29.628,34.371"]
"OCR-D/core" ["l"="29.657,34.374"]
"DCGM/pero-ocr" ["l"="29.689,34.341"]
"FactoDeepLearning/DAN" ["l"="29.638,34.381"]
"phantrdat/cvpr20-scatter-text-recognizer" ["l"="29.822,33.915"]
"amazon-research/textadain-robust-recognition" ["l"="29.812,33.929"]
"chizhanyuefeng/Chinese_OCR_CNN-RNN-CTC" ["l"="29.429,33.972"]
"marvis/ocr_attention" ["l"="29.492,33.979"]
"kurapan/EAST" ["l"="29.477,33.97"]
"opconty/pixellink_keras" ["l"="34.844,35.01"]
"hzli-ucas/CCF-OCR" ["l"="29.837,34.061"]
"linglanfeng/CCF2019-OCR" ["l"="29.794,34.079"]
"koibiki/crnn_self_attetion" ["l"="29.465,33.923"]
"xuewenyuan/ReS2TIM" ["l"="29.905,34.118"]
"microsoft/i-Code" ["l"="29.905,34.144"]
"namedysx/CRAFT-tensorflow" ["l"="29.575,33.927"]
"xuannianz/DifferentiableBinarization" ["l"="29.553,33.982"]
"interviewBubble/Tabulo" ["l"="29.912,34.238"]
"interviewBubble/Table-Detection-using-Deep-Learning" ["l"="29.953,34.257"]
"JelfPann/ocr_invoice" ["l"="29.483,33.874"]
"wushilian/CenterNet2CharDet" ["l"="29.794,34.064"]
"deep-practice/fake_certificate_generator" ["l"="29.809,34.069"]
"saicoco/SA-Text" ["l"="29.816,34.058"]
"xhzdeng/stela" ["l"="29.457,33.967"]
"zonasw/DBNet" ["l"="29.541,33.941"]
"iamrishab/DB-tf" ["l"="29.555,33.934"]
"limengyang1992/seq2seq-ocr-analysis" ["l"="29.899,34.057"]
"tangzhenyu/Scene-Text-Understanding" ["l"="29.483,34.044"]
"wcq19941215/SceneTextRemoval" ["l"="29.821,33.942"]
"afterimagex/PlateGen" ["l"="29.785,34.063"]
"stupidZZ/FCN_Text" ["l"="29.347,34.032"]
"oyxhust/ssd-text_detection" ["l"="29.331,34.026"]
"jianh1994/layoutgan" ["l"="30.035,33.793"]
"DocCreator/DocCreator" ["l"="29.584,34.602"]
"NVlabs/ocrodeg" ["l"="29.579,34.577"]
"kba/hocrjs" ["l"="29.511,34.442"]
"kba/hocr-spec" ["l"="29.505,34.469"]
"dinosauria123/gcv2hocr" ["l"="29.603,34.413"]
"filak/hOCR-to-ALTO" ["l"="29.574,34.401"]
"not-implemented/hocr-proofreader" ["l"="29.499,34.453"]
"OpesanyaAdebayo/systems-design" ["l"="31.537,-21.489"]
"tberg12/ocular" ["l"="29.701,34.434"]
"ocropus/hocr-tools" ["l"="29.628,34.401"]
"ocropus/ocropus4" ["l"="29.679,34.388"]
"mjq11302010044/RRPN" ["l"="29.442,34.016"]
"mjq11302010044/RRPN_pytorch" ["l"="34.984,36.83"]
"yangxue0827/R2CNN_FPN_Tensorflow" ["l"="35.044,36.806"]
"liulei01/DRBox" ["l"="35.053,36.829"]
"DetectionTeamUCAS/RRPN_Faster-RCNN_Tensorflow" ["l"="35.013,36.813"]
"yangxue0827/R-DFPN_FPN_Tensorflow" ["l"="35.021,36.799"]
"mjq11302010044/RRPN_plusplus" ["l"="34.94,36.788"]
"BADBADBADBOY/genete_ocr_data" ["l"="29.606,33.963"]
"BobLd/simple-docstrum" ["l"="29.804,34.29"]
"portumo/chinese-bankCard-idcard-recognition" ["l"="29.287,34.213"]
"mathDR/reading-text-in-the-wild" ["l"="29.266,34.093"]
"TannerGilbert/Tutorials" ["l"="30.237,34.493"]
"dudeperf3ct/DL_Notebooks" ["l"="30.272,34.499"]
"Jcharis/Machine-Learning-Web-Apps" ["l"="22.966,31.998"]
"mzucker/unproject_text" ["l"="29.604,34.356"]
"mzucker/noteshrink" ["l"="28.555,-18.946"]
"lmmx/page-dewarp" ["l"="29.683,34.303"]
"CrazySummerday/ctpn.pytorch" ["l"="29.524,33.919"]
"rossumai/docile" ["l"="29.897,34.104"]
"GitYCC/crnn-pytorch" ["l"="29.587,33.965"]
"masyagin1998/robin" ["l"="29.8,34.377"]
"ajgallego/document-image-binarization" ["l"="29.824,34.411"]
"masyagin1998/CSC" ["l"="29.818,34.392"]
"masyagin1998/gcc-plugin-guide" ["l"="29.832,34.388"]
"qurator-spk/sbb_binarization" ["l"="29.84,34.403"]
"masyagin1998/HSV" ["l"="29.808,34.401"]
"igormq/ctc_tensorflow_example" ["l"="0.71,39.787"]
"aaron-xichen/cnn-lstm-ctc" ["l"="0.834,39.725"]
"jonrein/tensorflow_CTC_example" ["l"="0.766,39.751"]
"alleveenstra/attentionocr" ["l"="29.504,34.257"]
"RaidasGrisk/tf2-crnn" ["l"="29.504,34.242"]
"DIYBookScanner/spreadpi" ["l"="29.575,34.487"]
"tmbdev/das2018-tutorial" ["l"="29.533,34.507"]
"josch/img2pdf" ["l"="29.622,34.533"]
"sam-ai/BertGrid" ["l"="29.972,34.247"]
"SiKang123/ocrTest" ["l"="29.049,34.519"]
"bigppwong/idcardocr" ["l"="29.248,34.209"]
"HaozhengLi/EAST_ICPR" ["l"="29.429,33.841"]
"zfxxfeng/cnn_lstm_ctc_ocr_for_ICPR" ["l"="29.421,33.809"]
"deepthinking-qichao/EAST_ICPR2018" ["l"="29.41,33.823"]
"zyf12389/LayoutGAN-Alpha" ["l"="30.05,33.805"]
"cvlab-stonybrook/DocIIW" ["l"="29.721,34.279"]
"bloomberg/scatteract" ["l"="30.226,34.026"]
"soap117/DeepRule" ["l"="30.18,34.044"]
"zchengquan/TextDetector" ["l"="29.318,34.043"]
"lluisgomez/text_extraction" ["l"="29.289,34.048"]
"yestinsong/Text-Detection" ["l"="29.234,34.026"]
"ploverpang/HeadlineDetectionBySWT" ["l"="29.206,34.007"]
"dredwardhyde/crnn-ctc-loss-pytorch" ["l"="29.572,33.898"]
"MhLiao/RRD" ["l"="29.401,33.976"]
"ZeroAct/SceneTextRemover-pytorch" ["l"="29.805,33.94"]
"piersy/BasicTesseractExample" ["l"="29.287,34.46"]
"hyh21521038/ssd-plate_detection" ["l"="30.715,34.886"]
"gwxie/Synthesize-Distorted-Image-and-Its-Control-Points" ["l"="29.769,34.305"]
"PkuDavidGuan/TIoU-metric-python3" ["l"="29.602,33.945"]
"buptlihang/CDLA" ["l"="29.846,34.209"]
"JasonObeid/Chart2Text" ["l"="30.213,34.069"]
"vis-nlp/Chart-to-text" ["l"="30.182,34.063"]
"tingyaohsu/SciCap" ["l"="30.206,34.056"]
"gongliym/data2text-transformer" ["l"="30.241,34.072"]
"ryouchinsa/Rectlabel-support" ["l"="34.462,34.951"]
"aisegmentcn/matting_human_datasets" ["l"="33.763,33.315"]
"RRanddom/tf_doc_localisation" ["l"="29.894,37.035"]
"yuandong-tian/Document-Rectification--CVPR11-" ["l"="29.65,34.279"]
"Sanster/keras_textboxes_plusplus" ["l"="29.436,33.904"]
"herobd/dessurt" ["l"="29.963,34.12"]
"signatrix/efficientdet" ["l"="34.641,35.499"]
"airctic/icevision" ["l"="22.738,28.989"]
"sgrvinod/a-PyTorch-Tutorial-to-Object-Detection" ["l"="34.444,35.404"]
"wangyuxin87/PERT" ["l"="29.833,33.949"]
"hhaji/Algorithms-For-Data-Science-2018" ["l"="30.198,34.427"]
"hhaji/Applied-Machine-Learning" ["l"="30.214,34.439"]
"GiorgiaAuroraAdorni/smart-receipt-scanner" ["l"="30.047,34.356"]
"brikeats/receipt-reader" ["l"="29.972,34.354"]
"VTurturika/receipt-recognition" ["l"="29.991,34.339"]
"guiem/train-tesseract" ["l"="29.434,34.398"]
"Shreeshrii/tess4training" ["l"="29.432,34.413"]
"Shreeshrii/tessdata_shreetest" ["l"="29.408,34.428"]
"Yuxiang1995/ICDAR2021_MFD" ["l"="29.863,34.076"]
"azmiozgen/text-detection" ["l"="29.166,33.989"]
"marrrcin/swt-python" ["l"="29.143,33.994"]
"aperrault/DetectText" ["l"="29.133,33.966"]
"mypetyak/StrokeWidthTransform" ["l"="29.174,34.016"]
"Halfish/lstm-ctc-ocr" ["l"="29.305,34.027"]
"xlvector/learning-dl" ["l"="33.156,35.694"]
"Verazjy/Document-image-binarization-with-Cascaded-cGANs-generator" ["l"="29.841,34.433"]
"Cvrane/ChartReader" ["l"="30.193,34.03"]
"kakul/Alyn" ["l"="29.751,34.291"]
"JPLeoRX/opencv-text-deskew" ["l"="29.794,34.305"]
"idiap/mser" ["l"="29.267,34.044"]
"roseperrone/character-detector" ["l"="29.25,34.037"]
"shiaokai/plex" ["l"="29.244,34.053"]
"gwxie/Distorted-Image-With-Flow" ["l"="29.731,34.29"]
"taeho-kil/Document-Image-Dewarping" ["l"="29.698,34.316"]
"qurator-spk/sbb_textline_detection" ["l"="29.737,34.371"]
"poke1024/origami" ["l"="29.702,34.359"]
"OCR-D/ocrd_segment" ["l"="29.753,34.358"]
"OCR-D/ocrd_all" ["l"="29.675,34.37"]
"Layout-Parser/layout-model-training" ["l"="29.773,34.37"]
"applicaai/kleister-charity" ["l"="29.966,34.087"]
"zlmzju/itn" ["l"="29.374,33.99"]
"uakarsh/docformer" ["l"="29.899,34.166"]
"persepolisdm/persepolis-chrome-wrapper" ["l"="29.386,34.61"]
"atgambardella/handwriting" ["l"="29.172,34.141"]
"priancho/ResearchSurvey" ["l"="29.932,34.071"]
"dhlab-epfl/dhSegment-torch" ["l"="29.727,34.336"]
"PRImA-Research-Lab/PAGE-XML" ["l"="29.73,34.349"]
"ryanfb/book-aligner" ["l"="29.715,34.464"]
"dreamdragon/text-detection" ["l"="29.247,34.004"]
"nlintz/StrokeWidthTransform" ["l"="29.135,34.011"]
"Sujay-M/TextDetection" ["l"="29.149,34.012"]
"altoxml/documentation" ["l"="29.626,34.42"]
"almazan/watts" ["l"="29.797,34.432"]
"lkj1114889770/Synth_Chinese_OCR_dataset" ["l"="29.485,34.007"]
"BADBADBADBOY/split_line_text_to_char" ["l"="29.616,33.917"]
"BADBADBADBOY/paddlepaddle-" ["l"="29.622,33.893"]
"hnesk/browse-ocrd" ["l"="29.714,34.39"]
"PublicI/pdf-gcv-ocr" ["l"="29.628,34.442"]
"mauvilsa/nw-page-editor" ["l"="29.755,34.377"]
"omni-us/pagexml" ["l"="29.764,34.408"]
"mauvilsa/textfeats" ["l"="29.76,34.398"]
"TeamVanDeep/ICPR_MTWI_2018_section1" ["l"="29.412,33.787"]
"OCR4all/getting_started" ["l"="29.693,34.374"]
"naver/garnet" ["l"="29.842,33.925"]
}