digraph G {
"jcjohnson/neural-style" -> "alexjc/neural-doodle"
"jcjohnson/neural-style" -> "google/deepdream"
"jcjohnson/neural-style" -> "jcjohnson/fast-neural-style"
"jcjohnson/neural-style" -> "anishathalye/neural-style"
"jcjohnson/neural-style" -> "luanfujun/deep-photo-styletransfer"
"jcjohnson/neural-style" -> "karpathy/char-rnn" ["e"=1]
"jcjohnson/neural-style" -> "torch/torch7" ["e"=1]
"jcjohnson/neural-style" -> "fchollet/keras" ["e"=1]
"jcjohnson/neural-style" -> "lengstrom/fast-style-transfer"
"jcjohnson/neural-style" -> "tensorflow/magenta"
"jcjohnson/neural-style" -> "kaishengtai/neuralart"
"jcjohnson/neural-style" -> "dmlc/mxnet" ["e"=1]
"jcjohnson/neural-style" -> "BVLC/caffe" ["e"=1]
"jcjohnson/neural-style" -> "karpathy/neuraltalk2" ["e"=1]
"jcjohnson/neural-style" -> "junyanz/CycleGAN"
"babysor/MockingBird" -> "CorentinJ/Real-Time-Voice-Cloning"
"babysor/MockingBird" -> "qier222/YesPlayMusic" ["e"=1]
"babysor/MockingBird" -> "fighting41love/funNLP" ["e"=1]
"babysor/MockingBird" -> "ssssssss-team/spider-flow" ["e"=1]
"babysor/MockingBird" -> "xinntao/Real-ESRGAN" ["e"=1]
"babysor/MockingBird" -> "ruanyf/weekly" ["e"=1]
"babysor/MockingBird" -> "PlexPt/awesome-chatgpt-prompts-zh" ["e"=1]
"babysor/MockingBird" -> "Baiyuetribe/paper2gui" ["e"=1]
"babysor/MockingBird" -> "THUDM/ChatGLM-6B" ["e"=1]
"babysor/MockingBird" -> "geekan/HowToLiveLonger" ["e"=1]
"babysor/MockingBird" -> "chinese-poetry/chinese-poetry" ["e"=1]
"babysor/MockingBird" -> "mamoe/mirai" ["e"=1]
"babysor/MockingBird" -> "iperov/DeepFaceLab"
"babysor/MockingBird" -> "kon9chunkit/GitHub-Chinese-Top-Charts" ["e"=1]
"babysor/MockingBird" -> "PaddlePaddle/PaddleOCR" ["e"=1]
"NVIDIA/vid2vid" -> "NVIDIA/pix2pixHD"
"NVIDIA/vid2vid" -> "facebookresearch/DensePose" ["e"=1]
"NVIDIA/vid2vid" -> "tkarras/progressive_growing_of_gans"
"NVIDIA/vid2vid" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVIDIA/vid2vid" -> "facebookresearch/Detectron" ["e"=1]
"NVIDIA/vid2vid" -> "NVlabs/stylegan"
"NVIDIA/vid2vid" -> "NVlabs/few-shot-vid2vid"
"NVIDIA/vid2vid" -> "albertpumarola/GANimation"
"NVIDIA/vid2vid" -> "NVlabs/SPADE"
"NVIDIA/vid2vid" -> "NVIDIA/FastPhotoStyle"
"NVIDIA/vid2vid" -> "openai/glow"
"NVIDIA/vid2vid" -> "NVlabs/MUNIT"
"NVIDIA/vid2vid" -> "phillipi/pix2pix"
"NVIDIA/vid2vid" -> "luanfujun/deep-painterly-harmonization"
"NVIDIA/vid2vid" -> "YadiraF/PRNet" ["e"=1]
"bryandlee/FreezeG" -> "sangwoomo/FreezeD"
"bryandlee/FreezeG" -> "bryandlee/malnyun_faces"
"bryandlee/FreezeG" -> "bryandlee/naver-webtoon-faces"
"bryandlee/FreezeG" -> "happy-jihye/Cartoon-StyleGAN"
"bryandlee/FreezeG" -> "NVlabs/metfaces-dataset"
"bryandlee/FreezeG" -> "yuval-alaluf/stylegan3-editing"
"bryandlee/FreezeG" -> "taesungp/swapping-autoencoder-pytorch"
"bryandlee/FreezeG" -> "mit-han-lab/data-efficient-gans"
"bryandlee/FreezeG" -> "EvgenyKashin/stylegan2-distillation"
"bryandlee/FreezeG" -> "rosinality/swapping-autoencoder-pytorch"
"bryandlee/FreezeG" -> "clovaai/tunit"
"bryandlee/FreezeG" -> "chail/anyres-gan"
"bryandlee/FreezeG" -> "stylegan-human/StyleGAN-Human"
"bryandlee/FreezeG" -> "sunniesuhyoung/DST"
"bryandlee/FreezeG" -> "rosinality/stylegan2-pytorch"
"CorentinJ/Real-Time-Voice-Cloning" -> "iperov/DeepFaceLab"
"CorentinJ/Real-Time-Voice-Cloning" -> "deepfakes/faceswap"
"CorentinJ/Real-Time-Voice-Cloning" -> "babysor/MockingBird"
"CorentinJ/Real-Time-Voice-Cloning" -> "coqui-ai/TTS" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "ageitgey/face_recognition" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "sherlock-project/sherlock" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "huggingface/transformers" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "deezer/spleeter" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "AliaksandrSiarohin/first-order-model"
"CorentinJ/Real-Time-Voice-Cloning" -> "ytdl-org/youtube-dl" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "openai/whisper" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "mozilla/DeepSpeech" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "CompVis/stable-diffusion" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "iptv-org/iptv" ["e"=1]
"CorentinJ/Real-Time-Voice-Cloning" -> "mozilla/TTS" ["e"=1]
"iperov/DeepFaceLab" -> "deepfakes/faceswap"
"iperov/DeepFaceLab" -> "CorentinJ/Real-Time-Voice-Cloning"
"iperov/DeepFaceLab" -> "iperov/DeepFaceLive"
"iperov/DeepFaceLab" -> "AliaksandrSiarohin/first-order-model"
"iperov/DeepFaceLab" -> "ageitgey/face_recognition" ["e"=1]
"iperov/DeepFaceLab" -> "CompVis/stable-diffusion" ["e"=1]
"iperov/DeepFaceLab" -> "babysor/MockingBird"
"iperov/DeepFaceLab" -> "sherlock-project/sherlock" ["e"=1]
"iperov/DeepFaceLab" -> "ytdl-org/youtube-dl" ["e"=1]
"iperov/DeepFaceLab" -> "huggingface/transformers" ["e"=1]
"iperov/DeepFaceLab" -> "NVlabs/stylegan"
"iperov/DeepFaceLab" -> "alievk/avatarify"
"iperov/DeepFaceLab" -> "NVlabs/stylegan2"
"iperov/DeepFaceLab" -> "google/mediapipe" ["e"=1]
"iperov/DeepFaceLab" -> "soimort/you-get" ["e"=1]
"yangxy/GPEN" -> "neuralchen/SimSwap" ["e"=1]
"yangxy/GPEN" -> "zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis" ["e"=1]
"yangxy/GPEN" -> "csxmli2016/DFDNet" ["e"=1]
"yangxy/GPEN" -> "eladrich/pixel2style2pixel"
"yangxy/GPEN" -> "omertov/encoder4editing"
"yangxy/GPEN" -> "rosinality/stylegan2-pytorch"
"yangxy/GPEN" -> "zllrunning/face-parsing.PyTorch"
"yangxy/GPEN" -> "cszn/BSRGAN" ["e"=1]
"yangxy/GPEN" -> "chaofengc/PSFRGAN" ["e"=1]
"yangxy/GPEN" -> "cszn/KAIR" ["e"=1]
"yangxy/GPEN" -> "harlanhong/CVPR2022-DaGAN" ["e"=1]
"yangxy/GPEN" -> "danielroich/PTI"
"yangxy/GPEN" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"yangxy/GPEN" -> "YuanxunLu/LiveSpeechPortraits" ["e"=1]
"yangxy/GPEN" -> "YadiraF/DECA" ["e"=1]
"lengstrom/fast-style-transfer" -> "anishathalye/neural-style"
"lengstrom/fast-style-transfer" -> "luanfujun/deep-photo-styletransfer"
"lengstrom/fast-style-transfer" -> "jcjohnson/fast-neural-style"
"lengstrom/fast-style-transfer" -> "yenchenlin/DeepLearningFlappyBird" ["e"=1]
"lengstrom/fast-style-transfer" -> "tensorflow/magenta"
"lengstrom/fast-style-transfer" -> "junyanz/CycleGAN"
"lengstrom/fast-style-transfer" -> "cysmith/neural-style-tf"
"lengstrom/fast-style-transfer" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"lengstrom/fast-style-transfer" -> "junyanz/iGAN"
"lengstrom/fast-style-transfer" -> "jcjohnson/neural-style"
"lengstrom/fast-style-transfer" -> "NVIDIA/FastPhotoStyle"
"lengstrom/fast-style-transfer" -> "alexjc/neural-enhance"
"lengstrom/fast-style-transfer" -> "deepmind/sonnet" ["e"=1]
"lengstrom/fast-style-transfer" -> "titu1994/Neural-Style-Transfer"
"lengstrom/fast-style-transfer" -> "DmitryUlyanov/deep-image-prior"
"leongatys/PytorchNeuralStyleTransfer" -> "leongatys/NeuralImageSynthesis"
"leongatys/PytorchNeuralStyleTransfer" -> "abhiskk/fast-neural-style"
"leongatys/PytorchNeuralStyleTransfer" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"leongatys/PytorchNeuralStyleTransfer" -> "sunshineatnoon/PytorchWCT"
"leongatys/PytorchNeuralStyleTransfer" -> "sunshineatnoon/LinearStyleTransfer"
"leongatys/PytorchNeuralStyleTransfer" -> "naoto0804/pytorch-AdaIN"
"leongatys/PytorchNeuralStyleTransfer" -> "xunhuang1995/AdaIN-style"
"leongatys/PytorchNeuralStyleTransfer" -> "rtqichen/style-swap"
"leongatys/PytorchNeuralStyleTransfer" -> "nkolkin13/STROTSS"
"leongatys/PytorchNeuralStyleTransfer" -> "darkstar112358/fast-neural-style"
"leongatys/PytorchNeuralStyleTransfer" -> "pietrocarbo/deep-transfer"
"leongatys/PytorchNeuralStyleTransfer" -> "leongatys/fast-neural-style"
"leongatys/PytorchNeuralStyleTransfer" -> "ycjing/Neural-Style-Transfer-Papers"
"leongatys/PytorchNeuralStyleTransfer" -> "taesungp/swapping-autoencoder-pytorch"
"leongatys/PytorchNeuralStyleTransfer" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"HsinYingLee/DRIT" -> "NVlabs/MUNIT"
"HsinYingLee/DRIT" -> "HelenMao/MSGAN"
"HsinYingLee/DRIT" -> "junyanz/BicycleGAN"
"HsinYingLee/DRIT" -> "mingyuliutw/UNIT"
"HsinYingLee/DRIT" -> "HsinYingLee/MDMM"
"HsinYingLee/DRIT" -> "taki0112/DRIT-Tensorflow"
"HsinYingLee/DRIT" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"HsinYingLee/DRIT" -> "lzhbrian/image-to-image-papers"
"HsinYingLee/DRIT" -> "sangwoomo/instagan"
"HsinYingLee/DRIT" -> "jhoffman/cycada_release" ["e"=1]
"HsinYingLee/DRIT" -> "NVlabs/FUNIT"
"HsinYingLee/DRIT" -> "heykeetae/Self-Attention-GAN"
"HsinYingLee/DRIT" -> "pfnet-research/sngan_projection"
"HsinYingLee/DRIT" -> "Ha0Tang/AttentionGAN"
"HsinYingLee/DRIT" -> "bioinf-jku/TTUR"
"LouieYang/deep-photo-styletransfer-tf" -> "ycjing/Neural-Style-Transfer-Papers"
"LouieYang/deep-photo-styletransfer-tf" -> "msracver/Deep-Image-Analogy"
"LouieYang/deep-photo-styletransfer-tf" -> "rtqichen/style-swap"
"LouieYang/deep-photo-styletransfer-tf" -> "xunhuang1995/AdaIN-style"
"LouieYang/deep-photo-styletransfer-tf" -> "Yijunmaverick/UniversalStyleTransfer"
"LouieYang/deep-photo-styletransfer-tf" -> "eridgd/WCT-TF"
"LouieYang/deep-photo-styletransfer-tf" -> "luanfujun/deep-photo-styletransfer"
"LouieYang/deep-photo-styletransfer-tf" -> "HsinYingLee/DRIT"
"LouieYang/deep-photo-styletransfer-tf" -> "cysmith/neural-style-tf"
"LouieYang/deep-photo-styletransfer-tf" -> "CompVis/adaptive-style-transfer"
"LouieYang/deep-photo-styletransfer-tf" -> "zsdonghao/SRGAN" ["e"=1]
"LouieYang/deep-photo-styletransfer-tf" -> "LucasSheng/avatar-net"
"LouieYang/deep-photo-styletransfer-tf" -> "hzy46/fast-neural-style-tensorflow"
"LouieYang/deep-photo-styletransfer-tf" -> "carpedm20/BEGAN-tensorflow"
"LouieYang/deep-photo-styletransfer-tf" -> "LouieYang/stroke-controllable-fast-style-transfer"
"caogang/wgan-gp" -> "igul222/improved_wgan_training"
"caogang/wgan-gp" -> "martinarjovsky/WassersteinGAN"
"caogang/wgan-gp" -> "jalola/improved-wgan-pytorch"
"caogang/wgan-gp" -> "Zeleni9/pytorch-wgan"
"caogang/wgan-gp" -> "heykeetae/Self-Attention-GAN"
"caogang/wgan-gp" -> "pfnet-research/sngan_projection"
"caogang/wgan-gp" -> "znxlwm/pytorch-generative-model-collections"
"caogang/wgan-gp" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"caogang/wgan-gp" -> "mseitzer/pytorch-fid"
"caogang/wgan-gp" -> "ajbrock/BigGAN-PyTorch"
"caogang/wgan-gp" -> "openai/improved-gan"
"caogang/wgan-gp" -> "sbarratt/inception-score-pytorch"
"caogang/wgan-gp" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"caogang/wgan-gp" -> "wiseodd/generative-models"
"caogang/wgan-gp" -> "bioinf-jku/TTUR"
"heykeetae/Self-Attention-GAN" -> "brain-research/self-attention-gan"
"heykeetae/Self-Attention-GAN" -> "taki0112/Self-Attention-GAN-Tensorflow"
"heykeetae/Self-Attention-GAN" -> "ajbrock/BigGAN-PyTorch"
"heykeetae/Self-Attention-GAN" -> "pfnet-research/sngan_projection"
"heykeetae/Self-Attention-GAN" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"heykeetae/Self-Attention-GAN" -> "caogang/wgan-gp"
"heykeetae/Self-Attention-GAN" -> "mseitzer/pytorch-fid"
"heykeetae/Self-Attention-GAN" -> "junfu1115/DANet" ["e"=1]
"heykeetae/Self-Attention-GAN" -> "google/compare_gan"
"heykeetae/Self-Attention-GAN" -> "znxlwm/pytorch-generative-model-collections"
"heykeetae/Self-Attention-GAN" -> "NVlabs/MUNIT"
"heykeetae/Self-Attention-GAN" -> "igul222/improved_wgan_training"
"heykeetae/Self-Attention-GAN" -> "HsinYingLee/DRIT"
"heykeetae/Self-Attention-GAN" -> "martinarjovsky/WassersteinGAN"
"heykeetae/Self-Attention-GAN" -> "tkarras/progressive_growing_of_gans"
"junyanz/BicycleGAN" -> "NVlabs/MUNIT"
"junyanz/BicycleGAN" -> "HsinYingLee/DRIT"
"junyanz/BicycleGAN" -> "mingyuliutw/UNIT"
"junyanz/BicycleGAN" -> "NVIDIA/pix2pixHD"
"junyanz/BicycleGAN" -> "yunjey/StarGAN"
"junyanz/BicycleGAN" -> "pfnet-research/sngan_projection"
"junyanz/BicycleGAN" -> "tkarras/progressive_growing_of_gans"
"junyanz/BicycleGAN" -> "NVlabs/FUNIT"
"junyanz/BicycleGAN" -> "heykeetae/Self-Attention-GAN"
"junyanz/BicycleGAN" -> "richzhang/PerceptualSimilarity"
"junyanz/BicycleGAN" -> "HelenMao/MSGAN"
"junyanz/BicycleGAN" -> "xunhuang1995/AdaIN-style"
"junyanz/BicycleGAN" -> "lzhbrian/image-to-image-papers"
"junyanz/BicycleGAN" -> "caogang/wgan-gp"
"junyanz/BicycleGAN" -> "bioinf-jku/TTUR"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "junyanz/CycleGAN"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "eriklindernoren/PyTorch-GAN"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "phillipi/pix2pix"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "NVIDIA/pix2pixHD"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "hindupuravinash/the-gan-zoo"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "soumith/ganhacks"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "pytorch/examples" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "open-mmlab/mmdetection" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "rwightman/pytorch-image-models" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "facebookresearch/detectron2" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "facebookresearch/Detectron" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "NVlabs/stylegan"
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "matterport/Mask_RCNN" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "facebookresearch/maskrcnn-benchmark" ["e"=1]
"junyanz/pytorch-CycleGAN-and-pix2pix" -> "yunjey/pytorch-tutorial" ["e"=1]
"reedscot/cvpr2016" -> "reedscot/icml2016"
"reedscot/cvpr2016" -> "reedscot/nips2016"
"reedscot/cvpr2016" -> "aelnouby/Text-to-Image-Synthesis"
"reedscot/cvpr2016" -> "hanzhanggit/StackGAN-v2"
"reedscot/cvpr2016" -> "zsdonghao/text-to-image"
"reedscot/cvpr2016" -> "kimiyoung/review_net" ["e"=1]
"reedscot/cvpr2016" -> "hanzhanggit/StackGAN"
"reedscot/cvpr2016" -> "taoxugit/AttnGAN"
"reedscot/cvpr2016" -> "facebook/eyescream"
"wiseodd/generative-models" -> "soumith/ganhacks"
"wiseodd/generative-models" -> "hwalsuklee/tensorflow-generative-model-collections"
"wiseodd/generative-models" -> "zhangqianhui/AdversarialNetsPapers"
"wiseodd/generative-models" -> "carpedm20/DCGAN-tensorflow"
"wiseodd/generative-models" -> "martinarjovsky/WassersteinGAN"
"wiseodd/generative-models" -> "hindupuravinash/the-gan-zoo"
"wiseodd/generative-models" -> "znxlwm/pytorch-generative-model-collections"
"wiseodd/generative-models" -> "nightrome/really-awesome-gan"
"wiseodd/generative-models" -> "igul222/improved_wgan_training"
"wiseodd/generative-models" -> "openai/improved-gan"
"wiseodd/generative-models" -> "tkarras/progressive_growing_of_gans"
"wiseodd/generative-models" -> "eriklindernoren/PyTorch-GAN"
"wiseodd/generative-models" -> "YadiraF/GAN"
"wiseodd/generative-models" -> "pytorch/examples" ["e"=1]
"wiseodd/generative-models" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"yunjey/StarGAN" -> "NVIDIA/pix2pixHD"
"yunjey/StarGAN" -> "tkarras/progressive_growing_of_gans"
"yunjey/StarGAN" -> "junyanz/iGAN"
"yunjey/StarGAN" -> "junyanz/BicycleGAN"
"yunjey/StarGAN" -> "lanpa/tensorboard-pytorch" ["e"=1]
"yunjey/StarGAN" -> "mingyuliutw/UNIT"
"yunjey/StarGAN" -> "DmitryUlyanov/deep-image-prior"
"yunjey/StarGAN" -> "openai/glow"
"yunjey/StarGAN" -> "NVlabs/MUNIT"
"yunjey/StarGAN" -> "martinarjovsky/WassersteinGAN"
"yunjey/StarGAN" -> "hwalsuklee/tensorflow-generative-model-collections"
"yunjey/StarGAN" -> "wiseodd/generative-models"
"yunjey/StarGAN" -> "znxlwm/pytorch-generative-model-collections"
"yunjey/StarGAN" -> "uber/pyro" ["e"=1]
"yunjey/StarGAN" -> "openai/improved-gan"
"zhangqianhui/AdversarialNetsPapers" -> "carpedm20/DCGAN-tensorflow"
"zhangqianhui/AdversarialNetsPapers" -> "soumith/ganhacks"
"zhangqianhui/AdversarialNetsPapers" -> "wiseodd/generative-models"
"zhangqianhui/AdversarialNetsPapers" -> "hindupuravinash/the-gan-zoo"
"zhangqianhui/AdversarialNetsPapers" -> "nightrome/really-awesome-gan"
"zhangqianhui/AdversarialNetsPapers" -> "martinarjovsky/WassersteinGAN"
"zhangqianhui/AdversarialNetsPapers" -> "goodfeli/adversarial"
"zhangqianhui/AdversarialNetsPapers" -> "hwalsuklee/tensorflow-generative-model-collections"
"zhangqianhui/AdversarialNetsPapers" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"zhangqianhui/AdversarialNetsPapers" -> "igul222/improved_wgan_training"
"zhangqianhui/AdversarialNetsPapers" -> "eriklindernoren/PyTorch-GAN"
"zhangqianhui/AdversarialNetsPapers" -> "tkarras/progressive_growing_of_gans"
"zhangqianhui/AdversarialNetsPapers" -> "openai/improved-gan"
"zhangqianhui/AdversarialNetsPapers" -> "phillipi/pix2pix"
"zhangqianhui/AdversarialNetsPapers" -> "kjw0612/awesome-deep-vision" ["e"=1]
"hindupuravinash/the-gan-zoo" -> "soumith/ganhacks"
"hindupuravinash/the-gan-zoo" -> "eriklindernoren/PyTorch-GAN"
"hindupuravinash/the-gan-zoo" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"hindupuravinash/the-gan-zoo" -> "zhangqianhui/AdversarialNetsPapers"
"hindupuravinash/the-gan-zoo" -> "wiseodd/generative-models"
"hindupuravinash/the-gan-zoo" -> "eriklindernoren/Keras-GAN"
"hindupuravinash/the-gan-zoo" -> "carpedm20/DCGAN-tensorflow"
"hindupuravinash/the-gan-zoo" -> "junyanz/CycleGAN"
"hindupuravinash/the-gan-zoo" -> "pytorch/examples" ["e"=1]
"hindupuravinash/the-gan-zoo" -> "nightrome/really-awesome-gan"
"hindupuravinash/the-gan-zoo" -> "YadiraF/GAN"
"hindupuravinash/the-gan-zoo" -> "tkarras/progressive_growing_of_gans"
"hindupuravinash/the-gan-zoo" -> "nashory/gans-awesome-applications"
"hindupuravinash/the-gan-zoo" -> "phillipi/pix2pix"
"hindupuravinash/the-gan-zoo" -> "yunjey/pytorch-tutorial" ["e"=1]
"jantic/DeOldify" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"jantic/DeOldify" -> "baowenbo/DAIN"
"jantic/DeOldify" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"jantic/DeOldify" -> "NVlabs/stylegan"
"jantic/DeOldify" -> "fastai/fastai" ["e"=1]
"jantic/DeOldify" -> "xinntao/ESRGAN" ["e"=1]
"jantic/DeOldify" -> "DmitryUlyanov/deep-image-prior"
"jantic/DeOldify" -> "NVlabs/stylegan2"
"jantic/DeOldify" -> "iperov/DeepFaceLab"
"jantic/DeOldify" -> "NVIDIA/vid2vid"
"jantic/DeOldify" -> "deepfakes/faceswap"
"jantic/DeOldify" -> "AliaksandrSiarohin/first-order-model"
"jantic/DeOldify" -> "CorentinJ/Real-Time-Voice-Cloning"
"jantic/DeOldify" -> "facebookresearch/Detectron" ["e"=1]
"jantic/DeOldify" -> "lllyasviel/style2paints" ["e"=1]
"AliaksandrSiarohin/first-order-model" -> "alievk/avatarify"
"AliaksandrSiarohin/first-order-model" -> "iperov/DeepFaceLab"
"AliaksandrSiarohin/first-order-model" -> "Rudrabha/Wav2Lip" ["e"=1]
"AliaksandrSiarohin/first-order-model" -> "NVlabs/stylegan2"
"AliaksandrSiarohin/first-order-model" -> "CorentinJ/Real-Time-Voice-Cloning"
"AliaksandrSiarohin/first-order-model" -> "deepfakes/faceswap"
"AliaksandrSiarohin/first-order-model" -> "1adrianb/face-alignment" ["e"=1]
"AliaksandrSiarohin/first-order-model" -> "NVlabs/stylegan"
"AliaksandrSiarohin/first-order-model" -> "vt-vl-lab/3d-photo-inpainting"
"AliaksandrSiarohin/first-order-model" -> "anandpawara/Real_Time_Image_Animation"
"AliaksandrSiarohin/first-order-model" -> "google/mediapipe" ["e"=1]
"AliaksandrSiarohin/first-order-model" -> "jantic/DeOldify"
"AliaksandrSiarohin/first-order-model" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"AliaksandrSiarohin/first-order-model" -> "facebookresearch/pifuhd"
"AliaksandrSiarohin/first-order-model" -> "NVIDIA/vid2vid"
"vijishmadhavan/ArtLine" -> "vijishmadhavan/Toon-Me"
"vijishmadhavan/ArtLine" -> "NathanUA/U-2-Net"
"vijishmadhavan/ArtLine" -> "yiranran/APDrawingGAN"
"vijishmadhavan/ArtLine" -> "PeterL1n/BackgroundMattingV2"
"vijishmadhavan/ArtLine" -> "SystemErrorWang/White-box-Cartoonization"
"vijishmadhavan/ArtLine" -> "eladrich/pixel2style2pixel"
"vijishmadhavan/ArtLine" -> "DevUtilsApp/DevUtils-app" ["e"=1]
"vijishmadhavan/ArtLine" -> "ZHKKKe/MODNet"
"vijishmadhavan/ArtLine" -> "owncast/owncast" ["e"=1]
"vijishmadhavan/ArtLine" -> "louisfb01/Best_AI_paper_2020" ["e"=1]
"vijishmadhavan/ArtLine" -> "jiupinjia/stylized-neural-painting"
"vijishmadhavan/ArtLine" -> "vijishmadhavan/SkinDeep"
"vijishmadhavan/ArtLine" -> "FlaxEngine/FlaxEngine" ["e"=1]
"vijishmadhavan/ArtLine" -> "h2oai/wave" ["e"=1]
"vijishmadhavan/ArtLine" -> "facebookresearch/pifuhd"
"PeterL1n/RobustVideoMatting" -> "PeterL1n/BackgroundMattingV2"
"PeterL1n/RobustVideoMatting" -> "ZHKKKe/MODNet"
"PeterL1n/RobustVideoMatting" -> "senguptaumd/Background-Matting"
"PeterL1n/RobustVideoMatting" -> "saic-mdal/lama"
"PeterL1n/RobustVideoMatting" -> "babysor/MockingBird"
"PeterL1n/RobustVideoMatting" -> "xinntao/Real-ESRGAN" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "PaddlePaddle/PaddleSeg" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "DefTruth/lite.ai.toolkit" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "NVlabs/instant-ngp" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "xuebinqin/U-2-Net"
"PeterL1n/RobustVideoMatting" -> "open-mmlab/mmediting" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "Rudrabha/Wav2Lip" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "yeemachine/kalidokit" ["e"=1]
"PeterL1n/RobustVideoMatting" -> "bryandlee/animegan2-pytorch"
"PeterL1n/RobustVideoMatting" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"NVIDIA/FastPhotoStyle" -> "luanfujun/deep-photo-styletransfer"
"NVIDIA/FastPhotoStyle" -> "lengstrom/fast-style-transfer"
"NVIDIA/FastPhotoStyle" -> "NVIDIA/vid2vid"
"NVIDIA/FastPhotoStyle" -> "facebookresearch/Detectron" ["e"=1]
"NVIDIA/FastPhotoStyle" -> "luanfujun/deep-painterly-harmonization"
"NVIDIA/FastPhotoStyle" -> "NVIDIA/pix2pixHD"
"NVIDIA/FastPhotoStyle" -> "esimov/caire" ["e"=1]
"NVIDIA/FastPhotoStyle" -> "junyanz/CycleGAN"
"NVIDIA/FastPhotoStyle" -> "tkarras/progressive_growing_of_gans"
"NVIDIA/FastPhotoStyle" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVIDIA/FastPhotoStyle" -> "yunjey/StarGAN"
"NVIDIA/FastPhotoStyle" -> "jcjohnson/fast-neural-style"
"NVIDIA/FastPhotoStyle" -> "DmitryUlyanov/deep-image-prior"
"NVIDIA/FastPhotoStyle" -> "emilwallner/Screenshot-to-code-in-Keras" ["e"=1]
"NVIDIA/FastPhotoStyle" -> "NVlabs/stylegan"
"affinelayer/pix2pix-tensorflow" -> "phillipi/pix2pix"
"affinelayer/pix2pix-tensorflow" -> "carpedm20/DCGAN-tensorflow"
"affinelayer/pix2pix-tensorflow" -> "NVIDIA/pix2pixHD"
"affinelayer/pix2pix-tensorflow" -> "yenchenlin/pix2pix-tensorflow"
"affinelayer/pix2pix-tensorflow" -> "junyanz/CycleGAN"
"affinelayer/pix2pix-tensorflow" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"affinelayer/pix2pix-tensorflow" -> "tkarras/progressive_growing_of_gans"
"affinelayer/pix2pix-tensorflow" -> "vanhuyz/CycleGAN-TensorFlow"
"affinelayer/pix2pix-tensorflow" -> "junyanz/iGAN"
"affinelayer/pix2pix-tensorflow" -> "martinarjovsky/WassersteinGAN"
"affinelayer/pix2pix-tensorflow" -> "wiseodd/generative-models"
"affinelayer/pix2pix-tensorflow" -> "datitran/face2face-demo" ["e"=1]
"affinelayer/pix2pix-tensorflow" -> "soumith/ganhacks"
"affinelayer/pix2pix-tensorflow" -> "zhangqianhui/AdversarialNetsPapers"
"affinelayer/pix2pix-tensorflow" -> "hwalsuklee/tensorflow-generative-model-collections"
"akanimax/BMSG-GAN" -> "akanimax/msg-stylegan-tf"
"akanimax/BMSG-GAN" -> "akanimax/MSG-GAN"
"akanimax/BMSG-GAN" -> "akanimax/BBMSG-GAN"
"akanimax/BMSG-GAN" -> "akanimax/pro_gan_pytorch"
"akanimax/BMSG-GAN" -> "kam1107/RealnessGAN"
"akanimax/BMSG-GAN" -> "AlexiaJM/RelativisticGAN"
"akanimax/BMSG-GAN" -> "rosinality/style-based-gan-pytorch"
"akanimax/BMSG-GAN" -> "ajbrock/BigGAN-PyTorch"
"akanimax/BMSG-GAN" -> "rosinality/stylegan2-pytorch"
"akanimax/BMSG-GAN" -> "pfnet-research/sngan_projection"
"akanimax/BMSG-GAN" -> "akanimax/T2F"
"akanimax/BMSG-GAN" -> "akanimax/msg-gan-v1"
"akanimax/BMSG-GAN" -> "LMescheder/GAN_stability"
"akanimax/BMSG-GAN" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"akanimax/BMSG-GAN" -> "pbaylies/stylegan-encoder"
"taki0112/BigGAN-Tensorflow" -> "taki0112/Self-Attention-GAN-Tensorflow"
"taki0112/BigGAN-Tensorflow" -> "ANIME305/Anime-GAN-tensorflow" ["e"=1]
"taki0112/BigGAN-Tensorflow" -> "taki0112/GAN_Metrics-Tensorflow"
"taki0112/BigGAN-Tensorflow" -> "AaronLeong/BigGAN-pytorch"
"taki0112/BigGAN-Tensorflow" -> "taki0112/RelativisticGAN-Tensorflow"
"taki0112/BigGAN-Tensorflow" -> "huggingface/pytorch-pretrained-BigGAN"
"alexjc/neural-enhance" -> "david-gpu/srez"
"alexjc/neural-enhance" -> "alexjc/neural-doodle"
"alexjc/neural-enhance" -> "lengstrom/fast-style-transfer"
"alexjc/neural-enhance" -> "idealo/image-super-resolution" ["e"=1]
"alexjc/neural-enhance" -> "songrotek/Deep-Learning-Papers-Reading-Roadmap" ["e"=1]
"alexjc/neural-enhance" -> "jcjohnson/neural-style"
"alexjc/neural-enhance" -> "luanfujun/deep-photo-styletransfer"
"alexjc/neural-enhance" -> "DmitryUlyanov/deep-image-prior"
"alexjc/neural-enhance" -> "phillipi/pix2pix"
"alexjc/neural-enhance" -> "junyanz/CycleGAN"
"alexjc/neural-enhance" -> "kjw0612/awesome-deep-vision" ["e"=1]
"alexjc/neural-enhance" -> "jcjohnson/fast-neural-style"
"alexjc/neural-enhance" -> "nagadomi/waifu2x" ["e"=1]
"alexjc/neural-enhance" -> "fchollet/keras" ["e"=1]
"alexjc/neural-enhance" -> "tensorlayer/srgan" ["e"=1]
"stylegan-human/StyleGAN-Human" -> "yumingj/Text2Human" ["e"=1]
"stylegan-human/StyleGAN-Human" -> "danielroich/PTI"
"stylegan-human/StyleGAN-Human" -> "yuval-alaluf/stylegan3-editing"
"stylegan-human/StyleGAN-Human" -> "facebookresearch/StyleNeRF"
"stylegan-human/StyleGAN-Human" -> "autonomousvision/stylegan_xl"
"stylegan-human/StyleGAN-Human" -> "afruehstueck/insetGAN"
"stylegan-human/StyleGAN-Human" -> "weihaox/awesome-gan-inversion"
"stylegan-human/StyleGAN-Human" -> "CelebV-HQ/CelebV-HQ" ["e"=1]
"stylegan-human/StyleGAN-Human" -> "hongfz16/EVA3D" ["e"=1]
"stylegan-human/StyleGAN-Human" -> "yuval-alaluf/hyperstyle"
"stylegan-human/StyleGAN-Human" -> "hongfz16/AvatarCLIP" ["e"=1]
"stylegan-human/StyleGAN-Human" -> "omertov/encoder4editing"
"stylegan-human/StyleGAN-Human" -> "rinongal/StyleGAN-nada"
"stylegan-human/StyleGAN-Human" -> "seasonSH/SemanticStyleGAN"
"stylegan-human/StyleGAN-Human" -> "FeiiYin/StyleHEAT" ["e"=1]
"andersbll/neural_artistic_style" -> "fzliu/style-transfer"
"andersbll/neural_artistic_style" -> "anishathalye/neural-style"
"andersbll/neural_artistic_style" -> "kaishengtai/neuralart"
"andersbll/neural_artistic_style" -> "andersbll/deeppy" ["e"=1]
"andersbll/neural_artistic_style" -> "jcjohnson/neural-style"
"andersbll/neural_artistic_style" -> "andersbll/cudarray" ["e"=1]
"andersbll/neural_artistic_style" -> "yusuketomoto/chainer-fast-neuralstyle"
"andersbll/neural_artistic_style" -> "jcjohnson/fast-neural-style"
"andersbll/neural_artistic_style" -> "manuelruder/artistic-videos"
"andersbll/neural_artistic_style" -> "DmitryUlyanov/texture_nets"
"andersbll/neural_artistic_style" -> "woodrush/neural-art-tf"
"andersbll/neural_artistic_style" -> "mbartoli/neural-animation"
"andersbll/neural_artistic_style" -> "alexjc/neural-doodle"
"andersbll/neural_artistic_style" -> "ryankiros/neural-storyteller"
"andersbll/neural_artistic_style" -> "titu1994/Neural-Style-Transfer"
"deepfakes/faceswap" -> "iperov/DeepFaceLab"
"deepfakes/faceswap" -> "CorentinJ/Real-Time-Voice-Cloning"
"deepfakes/faceswap" -> "ageitgey/face_recognition" ["e"=1]
"deepfakes/faceswap" -> "tensorflow/models" ["e"=1]
"deepfakes/faceswap" -> "scutan90/DeepLearning-500-questions" ["e"=1]
"deepfakes/faceswap" -> "soimort/you-get" ["e"=1]
"deepfakes/faceswap" -> "NVlabs/stylegan"
"deepfakes/faceswap" -> "tensorflow/tensorflow" ["e"=1]
"deepfakes/faceswap" -> "chinese-poetry/chinese-poetry" ["e"=1]
"deepfakes/faceswap" -> "pytorch/pytorch" ["e"=1]
"deepfakes/faceswap" -> "keras-team/keras" ["e"=1]
"deepfakes/faceswap" -> "fighting41love/funNLP" ["e"=1]
"deepfakes/faceswap" -> "fatedier/frp" ["e"=1]
"deepfakes/faceswap" -> "facebookresearch/Detectron" ["e"=1]
"deepfakes/faceswap" -> "CMU-Perceptual-Computing-Lab/openpose" ["e"=1]
"tkarras/progressive_growing_of_gans" -> "NVIDIA/pix2pixHD"
"tkarras/progressive_growing_of_gans" -> "soumith/ganhacks"
"tkarras/progressive_growing_of_gans" -> "NVlabs/stylegan"
"tkarras/progressive_growing_of_gans" -> "igul222/improved_wgan_training"
"tkarras/progressive_growing_of_gans" -> "carpedm20/DCGAN-tensorflow"
"tkarras/progressive_growing_of_gans" -> "wiseodd/generative-models"
"tkarras/progressive_growing_of_gans" -> "martinarjovsky/WassersteinGAN"
"tkarras/progressive_growing_of_gans" -> "junyanz/CycleGAN"
"tkarras/progressive_growing_of_gans" -> "openai/improved-gan"
"tkarras/progressive_growing_of_gans" -> "NVlabs/MUNIT"
"tkarras/progressive_growing_of_gans" -> "hwalsuklee/tensorflow-generative-model-collections"
"tkarras/progressive_growing_of_gans" -> "yunjey/StarGAN"
"tkarras/progressive_growing_of_gans" -> "ajbrock/BigGAN-PyTorch"
"tkarras/progressive_growing_of_gans" -> "hindupuravinash/the-gan-zoo"
"tkarras/progressive_growing_of_gans" -> "phillipi/pix2pix"
"alexgand/springer_free_books" -> "renanxcortes/springerQuarantineBooksR"
"alexgand/springer_free_books" -> "amzn/computer-vision-basics-in-microsoft-excel"
"alexgand/springer_free_books" -> "hathagat/springer_free_german_books"
"alexgand/springer_free_books" -> "rebuild-123/Python-Head-First-Design-Patterns"
"alexgand/springer_free_books" -> "kotartemiy/newscatcher" ["e"=1]
"alexgand/springer_free_books" -> "anopara/genetic-drawing"
"alexgand/springer_free_books" -> "adilkhash/Data-Engineering-HowTo" ["e"=1]
"alexgand/springer_free_books" -> "senguptaumd/Background-Matting"
"alexgand/springer_free_books" -> "TritonHo/slides" ["e"=1]
"alexgand/springer_free_books" -> "chiphuyen/machine-learning-systems-design" ["e"=1]
"alexgand/springer_free_books" -> "Rubix982/Free-Educational-Resources-During-Corona-Epidemia" ["e"=1]
"alexgand/springer_free_books" -> "uvipen/Tetris-deep-Q-learning-pytorch" ["e"=1]
"alexgand/springer_free_books" -> "machinelearningmindset/machine-learning-course" ["e"=1]
"alexgand/springer_free_books" -> "flavioschneider/ethzcheatsheets"
"alexgand/springer_free_books" -> "justmarkham/scikit-learn-tips" ["e"=1]
"facebookresearch/pifuhd" -> "shunsukesaito/PIFu" ["e"=1]
"facebookresearch/pifuhd" -> "vt-vl-lab/3d-photo-inpainting"
"facebookresearch/pifuhd" -> "facebookresearch/pytorch3d" ["e"=1]
"facebookresearch/pifuhd" -> "NVlabs/instant-ngp" ["e"=1]
"facebookresearch/pifuhd" -> "mkocabas/VIBE" ["e"=1]
"facebookresearch/pifuhd" -> "bmild/nerf" ["e"=1]
"facebookresearch/pifuhd" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"facebookresearch/pifuhd" -> "PeterL1n/BackgroundMattingV2"
"facebookresearch/pifuhd" -> "adamian98/pulse"
"facebookresearch/pifuhd" -> "YuliangXiu/ICON" ["e"=1]
"facebookresearch/pifuhd" -> "vchoutas/smplify-x" ["e"=1]
"facebookresearch/pifuhd" -> "facebookresearch/VideoPose3D" ["e"=1]
"facebookresearch/pifuhd" -> "NVlabs/stylegan2"
"facebookresearch/pifuhd" -> "google/mediapipe" ["e"=1]
"facebookresearch/pifuhd" -> "sebastianstarke/AI4Animation" ["e"=1]
"NVlabs/imaginaire" -> "rosinality/stylegan2-pytorch"
"NVlabs/imaginaire" -> "eladrich/pixel2style2pixel"
"NVlabs/imaginaire" -> "NVlabs/few-shot-vid2vid"
"NVlabs/imaginaire" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/imaginaire" -> "CompVis/taming-transformers" ["e"=1]
"NVlabs/imaginaire" -> "clovaai/stargan-v2"
"NVlabs/imaginaire" -> "NVlabs/MUNIT"
"NVlabs/imaginaire" -> "taesungp/contrastive-unpaired-translation"
"NVlabs/imaginaire" -> "orpatashnik/StyleCLIP"
"NVlabs/imaginaire" -> "NVlabs/SPADE"
"NVlabs/imaginaire" -> "POSTECH-CVLab/PyTorch-StudioGAN"
"NVlabs/imaginaire" -> "NVlabs/stylegan2-ada"
"NVlabs/imaginaire" -> "NVlabs/stylegan3"
"NVlabs/imaginaire" -> "facebookresearch/pytorch3d" ["e"=1]
"NVlabs/imaginaire" -> "genforce/genforce"
"NVlabs/stylegan2" -> "NVlabs/stylegan"
"NVlabs/stylegan2" -> "lucidrains/stylegan2-pytorch"
"NVlabs/stylegan2" -> "rosinality/stylegan2-pytorch"
"NVlabs/stylegan2" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/stylegan2" -> "NVlabs/stylegan3"
"NVlabs/stylegan2" -> "clovaai/stargan-v2"
"NVlabs/stylegan2" -> "NVlabs/ffhq-dataset"
"NVlabs/stylegan2" -> "eladrich/pixel2style2pixel"
"NVlabs/stylegan2" -> "tkarras/progressive_growing_of_gans"
"NVlabs/stylegan2" -> "NVlabs/stylegan2-ada"
"NVlabs/stylegan2" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVlabs/stylegan2" -> "NVlabs/SPADE"
"NVlabs/stylegan2" -> "NVlabs/imaginaire"
"NVlabs/stylegan2" -> "NVIDIA/pix2pixHD"
"NVlabs/stylegan2" -> "AliaksandrSiarohin/first-order-model"
"phillipi/pix2pix" -> "affinelayer/pix2pix-tensorflow"
"phillipi/pix2pix" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"phillipi/pix2pix" -> "junyanz/CycleGAN"
"phillipi/pix2pix" -> "NVIDIA/pix2pixHD"
"phillipi/pix2pix" -> "carpedm20/DCGAN-tensorflow"
"phillipi/pix2pix" -> "soumith/ganhacks"
"phillipi/pix2pix" -> "junyanz/iGAN"
"phillipi/pix2pix" -> "tkarras/progressive_growing_of_gans"
"phillipi/pix2pix" -> "hindupuravinash/the-gan-zoo"
"phillipi/pix2pix" -> "martinarjovsky/WassersteinGAN"
"phillipi/pix2pix" -> "zhangqianhui/AdversarialNetsPapers"
"phillipi/pix2pix" -> "jcjohnson/fast-neural-style"
"phillipi/pix2pix" -> "wiseodd/generative-models"
"phillipi/pix2pix" -> "Newmu/dcgan_code"
"phillipi/pix2pix" -> "NVIDIA/vid2vid"
"google/deepdream" -> "jcjohnson/neural-style"
"google/deepdream" -> "karpathy/char-rnn" ["e"=1]
"google/deepdream" -> "graphific/DeepDreamVideo"
"google/deepdream" -> "fchollet/keras" ["e"=1]
"google/deepdream" -> "BVLC/caffe" ["e"=1]
"google/deepdream" -> "tensorflow/magenta"
"google/deepdream" -> "alexjc/neural-doodle"
"google/deepdream" -> "torch/torch7" ["e"=1]
"google/deepdream" -> "karpathy/neuraltalk" ["e"=1]
"google/deepdream" -> "caesar0301/awesome-public-datasets" ["e"=1]
"google/deepdream" -> "karpathy/neuraltalk2" ["e"=1]
"google/deepdream" -> "Theano/Theano" ["e"=1]
"google/deepdream" -> "karpathy/convnetjs" ["e"=1]
"google/deepdream" -> "cmusatyalab/openface" ["e"=1]
"google/deepdream" -> "dmlc/mxnet" ["e"=1]
"NVIDIA/pix2pixHD" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVIDIA/pix2pixHD" -> "tkarras/progressive_growing_of_gans"
"NVIDIA/pix2pixHD" -> "phillipi/pix2pix"
"NVIDIA/pix2pixHD" -> "NVIDIA/vid2vid"
"NVIDIA/pix2pixHD" -> "yunjey/StarGAN"
"NVIDIA/pix2pixHD" -> "NVlabs/SPADE"
"NVIDIA/pix2pixHD" -> "NVlabs/MUNIT"
"NVIDIA/pix2pixHD" -> "affinelayer/pix2pix-tensorflow"
"NVIDIA/pix2pixHD" -> "junyanz/CycleGAN"
"NVIDIA/pix2pixHD" -> "junyanz/iGAN"
"NVIDIA/pix2pixHD" -> "junyanz/BicycleGAN"
"NVIDIA/pix2pixHD" -> "soumith/ganhacks"
"NVIDIA/pix2pixHD" -> "yunjey/stargan"
"NVIDIA/pix2pixHD" -> "NVlabs/stylegan"
"NVIDIA/pix2pixHD" -> "DmitryUlyanov/deep-image-prior"
"eriklindernoren/PyTorch-GAN" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"eriklindernoren/PyTorch-GAN" -> "hindupuravinash/the-gan-zoo"
"eriklindernoren/PyTorch-GAN" -> "soumith/ganhacks"
"eriklindernoren/PyTorch-GAN" -> "eriklindernoren/Keras-GAN"
"eriklindernoren/PyTorch-GAN" -> "pytorch/examples" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "rwightman/pytorch-image-models" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "lucidrains/vit-pytorch" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "wiseodd/generative-models"
"eriklindernoren/PyTorch-GAN" -> "yunjey/pytorch-tutorial" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "open-mmlab/mmdetection" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "utkuozbulak/pytorch-cnn-visualizations" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "Cadene/pretrained-models.pytorch" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "zhangqianhui/AdversarialNetsPapers"
"eriklindernoren/PyTorch-GAN" -> "pytorch/vision" ["e"=1]
"eriklindernoren/PyTorch-GAN" -> "facebookresearch/detectron2" ["e"=1]
"yunjey/stargan" -> "clovaai/stargan-v2"
"yunjey/stargan" -> "NVIDIA/pix2pixHD"
"yunjey/stargan" -> "albertpumarola/GANimation"
"yunjey/stargan" -> "NVlabs/MUNIT"
"yunjey/stargan" -> "taki0112/StarGAN-Tensorflow"
"yunjey/stargan" -> "mseitzer/pytorch-fid"
"yunjey/stargan" -> "switchablenorms/CelebAMask-HQ"
"yunjey/stargan" -> "heykeetae/Self-Attention-GAN"
"yunjey/stargan" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"yunjey/stargan" -> "NVlabs/FUNIT"
"yunjey/stargan" -> "LynnHo/AttGAN-Tensorflow"
"yunjey/stargan" -> "ajbrock/BigGAN-PyTorch"
"yunjey/stargan" -> "znxlwm/UGATIT-pytorch"
"yunjey/stargan" -> "HsinYingLee/DRIT"
"yunjey/stargan" -> "tamarott/SinGAN"
"PeterL1n/BackgroundMattingV2" -> "ZHKKKe/MODNet"
"PeterL1n/BackgroundMattingV2" -> "PeterL1n/RobustVideoMatting"
"PeterL1n/BackgroundMattingV2" -> "senguptaumd/Background-Matting"
"PeterL1n/BackgroundMattingV2" -> "NathanUA/U-2-Net"
"PeterL1n/BackgroundMattingV2" -> "xuebinqin/U-2-Net"
"PeterL1n/BackgroundMattingV2" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"PeterL1n/BackgroundMattingV2" -> "pymatting/pymatting"
"PeterL1n/BackgroundMattingV2" -> "facebookresearch/pifuhd"
"PeterL1n/BackgroundMattingV2" -> "open-mmlab/mmediting" ["e"=1]
"PeterL1n/BackgroundMattingV2" -> "eladrich/pixel2style2pixel"
"PeterL1n/BackgroundMattingV2" -> "PaddlePaddle/PaddleSeg" ["e"=1]
"PeterL1n/BackgroundMattingV2" -> "zllrunning/face-parsing.PyTorch"
"PeterL1n/BackgroundMattingV2" -> "RangiLyu/nanodet" ["e"=1]
"PeterL1n/BackgroundMattingV2" -> "deepinsight/insightface" ["e"=1]
"PeterL1n/BackgroundMattingV2" -> "jiupinjia/SkyAR"
"baowenbo/DAIN" -> "hzwer/arXiv2020-RIFE"
"baowenbo/DAIN" -> "xinntao/ESRGAN" ["e"=1]
"baowenbo/DAIN" -> "avinashpaliwal/Super-SloMo"
"baowenbo/DAIN" -> "jantic/DeOldify"
"baowenbo/DAIN" -> "BurguerJohn/Dain-App"
"baowenbo/DAIN" -> "thunil/TecoGAN"
"baowenbo/DAIN" -> "k4yt3x/video2x" ["e"=1]
"baowenbo/DAIN" -> "bloc97/Anime4K" ["e"=1]
"baowenbo/DAIN" -> "vt-vl-lab/3d-photo-inpainting"
"baowenbo/DAIN" -> "NVlabs/stylegan2"
"baowenbo/DAIN" -> "facebookresearch/pifuhd"
"baowenbo/DAIN" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"baowenbo/DAIN" -> "AliaksandrSiarohin/first-order-model"
"baowenbo/DAIN" -> "nagadomi/waifu2x" ["e"=1]
"baowenbo/DAIN" -> "AaronFeng753/Waifu2x-Extension-GUI" ["e"=1]
"pavelgonchar/colornet" -> "awentzonline/image-analogies"
"pavelgonchar/colornet" -> "richzhang/colorization"
"pavelgonchar/colornet" -> "alexjc/neural-doodle"
"pavelgonchar/colornet" -> "schollz/find" ["e"=1]
"pavelgonchar/colornet" -> "ryankiros/neural-storyteller"
"pavelgonchar/colornet" -> "satoshiiizuka/siggraph2016_colorization"
"pavelgonchar/colornet" -> "david-gpu/srez"
"pavelgonchar/colornet" -> "yenchenlin1994/DeepLearningFlappyBird" ["e"=1]
"pavelgonchar/colornet" -> "nlp-compromise/nlp_compromise" ["e"=1]
"pavelgonchar/colornet" -> "jisungk/deepjazz" ["e"=1]
"pavelgonchar/colornet" -> "tflearn/tflearn" ["e"=1]
"pavelgonchar/colornet" -> "karpathy/neuraltalk2" ["e"=1]
"pavelgonchar/colornet" -> "reverse-shell/routersploit" ["e"=1]
"pavelgonchar/colornet" -> "airbnb/caravel" ["e"=1]
"pavelgonchar/colornet" -> "jcjohnson/neural-style"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "jantic/DeOldify"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "facebookresearch/pifuhd"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "PeterL1n/BackgroundMattingV2"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "adamian98/pulse"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "TencentARC/GFPGAN" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "xinntao/Real-ESRGAN" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "JaidedAI/EasyOCR" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "iperov/DeepFaceLab"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "beurtschipper/Depix" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "NathanUA/U-2-Net"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "willmcgugan/rich" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "CorentinJ/Real-Time-Voice-Cloning"
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "PaddlePaddle/PaddleOCR" ["e"=1]
"microsoft/Bringing-Old-Photos-Back-to-Life" -> "eladrich/pixel2style2pixel"
"yemount/pose-animator" -> "alievk/avatarify"
"yemount/pose-animator" -> "vt-vl-lab/3d-photo-inpainting"
"yemount/pose-animator" -> "tensorflow/tfjs-models" ["e"=1]
"yemount/pose-animator" -> "facebookresearch/pifuhd"
"yemount/pose-animator" -> "cyrildiagne/ar-cutpaste"
"yemount/pose-animator" -> "metafizzy/zdog" ["e"=1]
"yemount/pose-animator" -> "senguptaumd/Background-Matting"
"yemount/pose-animator" -> "jasonmayes/Real-Time-Person-Removal"
"yemount/pose-animator" -> "anandpawara/Real_Time_Image_Animation"
"yemount/pose-animator" -> "google/mediapipe" ["e"=1]
"yemount/pose-animator" -> "AliaksandrSiarohin/first-order-model"
"yemount/pose-animator" -> "minivision-ai/photo2cartoon"
"yemount/pose-animator" -> "luruke/browser-2020" ["e"=1]
"yemount/pose-animator" -> "manojVivek/responsively-app" ["e"=1]
"yemount/pose-animator" -> "pshihn/rough-notation" ["e"=1]
"NVlabs/SPADE" -> "NVIDIA/pix2pixHD"
"NVlabs/SPADE" -> "NVlabs/stylegan"
"NVlabs/SPADE" -> "NVlabs/imaginaire"
"NVlabs/SPADE" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVlabs/SPADE" -> "NVIDIA/vid2vid"
"NVlabs/SPADE" -> "NVlabs/MUNIT"
"NVlabs/SPADE" -> "ajbrock/BigGAN-PyTorch"
"NVlabs/SPADE" -> "tkarras/progressive_growing_of_gans"
"NVlabs/SPADE" -> "NVlabs/stylegan2"
"NVlabs/SPADE" -> "rosinality/stylegan2-pytorch"
"NVlabs/SPADE" -> "tamarott/SinGAN"
"NVlabs/SPADE" -> "switchablenorms/CelebAMask-HQ"
"NVlabs/SPADE" -> "NVlabs/FUNIT"
"NVlabs/SPADE" -> "clovaai/stargan-v2"
"NVlabs/SPADE" -> "eladrich/pixel2style2pixel"
"NVlabs/stylegan2-ada-pytorch" -> "rosinality/stylegan2-pytorch"
"NVlabs/stylegan2-ada-pytorch" -> "NVlabs/stylegan3"
"NVlabs/stylegan2-ada-pytorch" -> "NVlabs/stylegan2-ada"
"NVlabs/stylegan2-ada-pytorch" -> "eladrich/pixel2style2pixel"
"NVlabs/stylegan2-ada-pytorch" -> "lucidrains/stylegan2-pytorch"
"NVlabs/stylegan2-ada-pytorch" -> "orpatashnik/StyleCLIP"
"NVlabs/stylegan2-ada-pytorch" -> "omertov/encoder4editing"
"NVlabs/stylegan2-ada-pytorch" -> "NVlabs/stylegan2"
"NVlabs/stylegan2-ada-pytorch" -> "CompVis/taming-transformers" ["e"=1]
"NVlabs/stylegan2-ada-pytorch" -> "justinpinkney/awesome-pretrained-stylegan2"
"NVlabs/stylegan2-ada-pytorch" -> "openai/guided-diffusion" ["e"=1]
"NVlabs/stylegan2-ada-pytorch" -> "NVlabs/imaginaire"
"NVlabs/stylegan2-ada-pytorch" -> "weihaox/awesome-gan-inversion"
"NVlabs/stylegan2-ada-pytorch" -> "mseitzer/pytorch-fid"
"NVlabs/stylegan2-ada-pytorch" -> "clovaai/stargan-v2"
"ZPdesu/Barbershop" -> "wty-ustc/HairCLIP"
"ZPdesu/Barbershop" -> "omertov/encoder4editing"
"ZPdesu/Barbershop" -> "tzt101/MichiGAN"
"ZPdesu/Barbershop" -> "nv-tlabs/editGAN_release"
"ZPdesu/Barbershop" -> "rotemtzaban/STIT"
"ZPdesu/Barbershop" -> "danielroich/PTI"
"ZPdesu/Barbershop" -> "ZPdesu/SEAN"
"ZPdesu/Barbershop" -> "dukebw/LOHO"
"ZPdesu/Barbershop" -> "seasonSH/SemanticStyleGAN"
"ZPdesu/Barbershop" -> "weihaox/awesome-gan-inversion"
"ZPdesu/Barbershop" -> "yuval-alaluf/hyperstyle"
"ZPdesu/Barbershop" -> "Tengfei-Wang/HFGI"
"ZPdesu/Barbershop" -> "yuval-alaluf/restyle-encoder"
"ZPdesu/Barbershop" -> "yangxy/GPEN"
"ZPdesu/Barbershop" -> "yuval-alaluf/stylegan3-editing"
"alex04072000/ObstructionRemoval" -> "alex04072000/SingleHDR" ["e"=1]
"alex04072000/ObstructionRemoval" -> "XiaohangZhan/deocclusion"
"alex04072000/ObstructionRemoval" -> "saic-mdal/HiDT"
"alex04072000/ObstructionRemoval" -> "google/portrait-shadow-manipulation"
"alex04072000/ObstructionRemoval" -> "podgorskiy/ALAE"
"alex04072000/ObstructionRemoval" -> "ceciliavision/perceptual-reflection-removal"
"alex04072000/ObstructionRemoval" -> "Vandermode/ERRNet"
"alex04072000/ObstructionRemoval" -> "senguptaumd/Background-Matting"
"alex04072000/ObstructionRemoval" -> "EvgenyKashin/stylegan2-distillation"
"alex04072000/ObstructionRemoval" -> "XingangPan/deep-generative-prior"
"alex04072000/ObstructionRemoval" -> "alex04072000/SOLD"
"alex04072000/ObstructionRemoval" -> "genforce/idinvert"
"alex04072000/ObstructionRemoval" -> "clovaai/stargan-v2"
"alex04072000/ObstructionRemoval" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"alex04072000/ObstructionRemoval" -> "vt-vl-lab/3d-photo-inpainting"
"clovaai/tunit" -> "clovaai/generative-evaluation-prdc" ["e"=1]
"clovaai/tunit" -> "ZPdesu/SEAN"
"clovaai/tunit" -> "clovaai/WCT2"
"clovaai/tunit" -> "naver-ai/GGDR"
"clovaai/tunit" -> "naver-ai/StyleMapGAN"
"clovaai/tunit" -> "boschresearch/OASIS" ["e"=1]
"clovaai/tunit" -> "taesungp/contrastive-unpaired-translation"
"clovaai/tunit" -> "naver-ai/relabel_imagenet" ["e"=1]
"clovaai/tunit" -> "weihaox/awesome-image-translation"
"clovaai/tunit" -> "clovaai/stargan-v2-tensorflow"
"clovaai/tunit" -> "kam1107/RealnessGAN"
"clovaai/tunit" -> "davidbau/rewriting"
"clovaai/tunit" -> "linjx-ustc1106/TuiGAN-PyTorch"
"clovaai/tunit" -> "GaParmar/clean-fid"
"clovaai/tunit" -> "EndlessSora/TSIT" ["e"=1]
"jiupinjia/SkyAR" -> "vt-vl-lab/FGVC" ["e"=1]
"jiupinjia/SkyAR" -> "jiupinjia/stylized-neural-painting"
"jiupinjia/SkyAR" -> "ZHKKKe/MODNet"
"jiupinjia/SkyAR" -> "PeterL1n/BackgroundMattingV2"
"jiupinjia/SkyAR" -> "iPERDance/iPERCore"
"jiupinjia/SkyAR" -> "eladrich/pixel2style2pixel"
"jiupinjia/SkyAR" -> "senguptaumd/Background-Matting"
"jiupinjia/SkyAR" -> "RameenAbdal/StyleFlow"
"jiupinjia/SkyAR" -> "JizhiziLi/animal-matting"
"jiupinjia/SkyAR" -> "SystemErrorWang/White-box-Cartoonization"
"jiupinjia/SkyAR" -> "hzwer/arXiv2020-RIFE"
"jiupinjia/SkyAR" -> "NathanUA/U-2-Net"
"jiupinjia/SkyAR" -> "orpatashnik/StyleCLIP"
"jiupinjia/SkyAR" -> "NVlabs/imaginaire"
"jiupinjia/SkyAR" -> "vt-vl-lab/3d-photo-inpainting"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "moono/stylegan2-tf-2.x"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "taki0112/StyleGAN-Tensorflow"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "rosasalberto/StyleGAN2-TensorFlow-2.x"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "manicman1999/StyleGAN-Keras"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "Puzer/stylegan-encoder"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "pbaylies/stylegan-encoder"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "rolux/stylegan2encoder"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "LynnHo/CycleGAN-Tensorflow-2"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "rosinality/stylegan2-pytorch"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "NVlabs/stylegan2-ada"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "EvgenyKashin/stylegan2-distillation"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "ak9250/stylegan-art"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "ShenYujun/InterFaceGAN"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "taki0112/BigGAN-Tensorflow"
"manicman1999/StyleGAN2-Tensorflow-2.0" -> "lucidrains/stylegan2-pytorch"
"nv-tlabs/editGAN_release" -> "nv-tlabs/datasetGAN_release"
"nv-tlabs/editGAN_release" -> "yuval-alaluf/stylegan3-editing"
"nv-tlabs/editGAN_release" -> "rotemtzaban/STIT"
"nv-tlabs/editGAN_release" -> "ZPdesu/Barbershop"
"nv-tlabs/editGAN_release" -> "Tengfei-Wang/HFGI"
"nv-tlabs/editGAN_release" -> "autonomousvision/stylegan_xl"
"nv-tlabs/editGAN_release" -> "stylegan-human/StyleGAN-Human"
"nv-tlabs/editGAN_release" -> "nv-tlabs/semanticGAN_code"
"nv-tlabs/editGAN_release" -> "danielroich/PTI"
"nv-tlabs/editGAN_release" -> "wty-ustc/HairCLIP"
"nv-tlabs/editGAN_release" -> "rinongal/StyleGAN-nada"
"nv-tlabs/editGAN_release" -> "omertov/encoder4editing"
"nv-tlabs/editGAN_release" -> "wpeebles/gangealing"
"nv-tlabs/editGAN_release" -> "seasonSH/SemanticStyleGAN"
"nv-tlabs/editGAN_release" -> "facebookresearch/StyleNeRF"
"richzhang/PerceptualSimilarity" -> "mseitzer/pytorch-fid"
"richzhang/PerceptualSimilarity" -> "rosinality/stylegan2-pytorch"
"richzhang/PerceptualSimilarity" -> "Po-Hsun-Su/pytorch-ssim"
"richzhang/PerceptualSimilarity" -> "xinntao/BasicSR" ["e"=1]
"richzhang/PerceptualSimilarity" -> "eladrich/pixel2style2pixel"
"richzhang/PerceptualSimilarity" -> "NVlabs/MUNIT"
"richzhang/PerceptualSimilarity" -> "cszn/KAIR" ["e"=1]
"richzhang/PerceptualSimilarity" -> "CompVis/taming-transformers" ["e"=1]
"richzhang/PerceptualSimilarity" -> "yenchenlin/awesome-NeRF" ["e"=1]
"richzhang/PerceptualSimilarity" -> "openai/guided-diffusion" ["e"=1]
"richzhang/PerceptualSimilarity" -> "bioinf-jku/TTUR"
"richzhang/PerceptualSimilarity" -> "yulunzhang/RCAN" ["e"=1]
"richzhang/PerceptualSimilarity" -> "NVlabs/stylegan2-ada-pytorch"
"richzhang/PerceptualSimilarity" -> "switchablenorms/CelebAMask-HQ"
"richzhang/PerceptualSimilarity" -> "xinntao/EDVR" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "raywzy/Bringing-Old-Films-Back-to-Life"
"satoshiiizuka/siggraphasia2019_remastering" -> "ericsujw/InstColorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "msracver/Deep-Exemplar-based-Colorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "ChenyangLEI/Fully-Automatic-Video-Colorization-with-Self-Regularization-and-Diversity"
"satoshiiizuka/siggraphasia2019_remastering" -> "ChenyangLEI/automatic-video-colorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "ChenyangLEI/deep-video-prior" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "xinntao/EDVR" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "m-tassano/fastdvdnet" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "yulunzhang/video-enhancement" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "MarkMoHR/Awesome-Image-Colorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "JingyunLiang/VRT" ["e"=1]
"satoshiiizuka/siggraphasia2019_remastering" -> "junyanz/interactive-deep-colorization"
"satoshiiizuka/siggraphasia2019_remastering" -> "lyh-18/TCVC-Temporally-Consistent-Video-Colorization"
"taesungp/contrastive-unpaired-translation" -> "weihaox/awesome-image-translation"
"taesungp/contrastive-unpaired-translation" -> "rosinality/stylegan2-pytorch"
"taesungp/contrastive-unpaired-translation" -> "mseitzer/pytorch-fid"
"taesungp/contrastive-unpaired-translation" -> "taesungp/swapping-autoencoder-pytorch"
"taesungp/contrastive-unpaired-translation" -> "NVlabs/imaginaire"
"taesungp/contrastive-unpaired-translation" -> "mit-han-lab/data-efficient-gans"
"taesungp/contrastive-unpaired-translation" -> "NVlabs/MUNIT"
"taesungp/contrastive-unpaired-translation" -> "eladrich/pixel2style2pixel"
"taesungp/contrastive-unpaired-translation" -> "NVlabs/stylegan2-ada-pytorch"
"taesungp/contrastive-unpaired-translation" -> "clovaai/stargan-v2"
"taesungp/contrastive-unpaired-translation" -> "Ha0Tang/AttentionGAN"
"taesungp/contrastive-unpaired-translation" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"taesungp/contrastive-unpaired-translation" -> "HsinYingLee/DRIT"
"taesungp/contrastive-unpaired-translation" -> "clovaai/tunit"
"taesungp/contrastive-unpaired-translation" -> "tamarott/SinGAN"
"CQFIO/PhotographicImageSynthesis" -> "junyanz/BicycleGAN"
"CQFIO/PhotographicImageSynthesis" -> "hanzhanggit/StackGAN"
"CQFIO/PhotographicImageSynthesis" -> "yunjey/StarGAN"
"CQFIO/PhotographicImageSynthesis" -> "tkarras/progressive_growing_of_gans"
"CQFIO/PhotographicImageSynthesis" -> "reedscot/icml2016"
"CQFIO/PhotographicImageSynthesis" -> "mingyuliutw/UNIT"
"CQFIO/PhotographicImageSynthesis" -> "martinarjovsky/WassersteinGAN"
"CQFIO/PhotographicImageSynthesis" -> "NVIDIA/pix2pixHD"
"CQFIO/PhotographicImageSynthesis" -> "hanzhanggit/StackGAN-v2"
"CQFIO/PhotographicImageSynthesis" -> "igul222/improved_wgan_training"
"CQFIO/PhotographicImageSynthesis" -> "CQFIO/FastImageProcessing" ["e"=1]
"CQFIO/PhotographicImageSynthesis" -> "carpedm20/BEGAN-tensorflow"
"CQFIO/PhotographicImageSynthesis" -> "pfnet-research/sngan_projection"
"CQFIO/PhotographicImageSynthesis" -> "msracver/FCIS" ["e"=1]
"CQFIO/PhotographicImageSynthesis" -> "openai/improved-gan"
"NVlabs/ffhq-dataset" -> "switchablenorms/CelebAMask-HQ"
"NVlabs/ffhq-dataset" -> "NVlabs/stylegan"
"NVlabs/ffhq-dataset" -> "rosinality/stylegan2-pytorch"
"NVlabs/ffhq-dataset" -> "zllrunning/face-parsing.PyTorch"
"NVlabs/ffhq-dataset" -> "tkarras/progressive_growing_of_gans"
"NVlabs/ffhq-dataset" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/ffhq-dataset" -> "NVlabs/stylegan2"
"NVlabs/ffhq-dataset" -> "genforce/interfacegan"
"NVlabs/ffhq-dataset" -> "eladrich/pixel2style2pixel"
"NVlabs/ffhq-dataset" -> "clovaai/stargan-v2"
"NVlabs/ffhq-dataset" -> "mseitzer/pytorch-fid"
"NVlabs/ffhq-dataset" -> "NVlabs/stylegan3"
"NVlabs/ffhq-dataset" -> "Puzer/stylegan-encoder"
"NVlabs/ffhq-dataset" -> "omertov/encoder4editing"
"NVlabs/ffhq-dataset" -> "rosinality/style-based-gan-pytorch"
"Tetrachrome/subpixel" -> "huangzehao/Super-Resolution.Benckmark" ["e"=1]
"Tetrachrome/subpixel" -> "ajbrock/Neural-Photo-Editor"
"Tetrachrome/subpixel" -> "jakebian/quiver" ["e"=1]
"Tetrachrome/subpixel" -> "david-gpu/srez"
"Tetrachrome/subpixel" -> "huangzehao/caffe-vdsr" ["e"=1]
"Tetrachrome/subpixel" -> "anantzoid/Conditional-PixelCNN-decoder"
"Tetrachrome/subpixel" -> "titu1994/Super-Resolution-using-Generative-Adversarial-Networks" ["e"=1]
"Tetrachrome/subpixel" -> "LeavesBreathe/tensorflow_with_latest_papers" ["e"=1]
"Tetrachrome/subpixel" -> "openai/pixel-cnn"
"Tetrachrome/subpixel" -> "buriburisuri/SRGAN" ["e"=1]
"Tetrachrome/subpixel" -> "tomlepaine/fast-wavenet" ["e"=1]
"Tetrachrome/subpixel" -> "Mostafa-Samir/DNC-tensorflow" ["e"=1]
"Tetrachrome/subpixel" -> "PrajitR/fast-pixel-cnn"
"Tetrachrome/subpixel" -> "gregdurrett/berkeley-doc-summarizer"
"Tetrachrome/subpixel" -> "openai/cleverhans" ["e"=1]
"hwalsuklee/tensorflow-generative-model-collections" -> "znxlwm/pytorch-generative-model-collections"
"hwalsuklee/tensorflow-generative-model-collections" -> "wiseodd/generative-models"
"hwalsuklee/tensorflow-generative-model-collections" -> "carpedm20/DCGAN-tensorflow"
"hwalsuklee/tensorflow-generative-model-collections" -> "igul222/improved_wgan_training"
"hwalsuklee/tensorflow-generative-model-collections" -> "soumith/ganhacks"
"hwalsuklee/tensorflow-generative-model-collections" -> "zhangqianhui/AdversarialNetsPapers"
"hwalsuklee/tensorflow-generative-model-collections" -> "tkarras/progressive_growing_of_gans"
"hwalsuklee/tensorflow-generative-model-collections" -> "google/compare_gan"
"hwalsuklee/tensorflow-generative-model-collections" -> "openai/improved-gan"
"hwalsuklee/tensorflow-generative-model-collections" -> "martinarjovsky/WassersteinGAN"
"hwalsuklee/tensorflow-generative-model-collections" -> "nightrome/really-awesome-gan"
"hwalsuklee/tensorflow-generative-model-collections" -> "hindupuravinash/the-gan-zoo"
"hwalsuklee/tensorflow-generative-model-collections" -> "yunjey/StarGAN"
"hwalsuklee/tensorflow-generative-model-collections" -> "khanrc/tf.gans-comparison"
"hwalsuklee/tensorflow-generative-model-collections" -> "carpedm20/BEGAN-tensorflow"
"junyanz/CycleGAN" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"junyanz/CycleGAN" -> "phillipi/pix2pix"
"junyanz/CycleGAN" -> "hindupuravinash/the-gan-zoo"
"junyanz/CycleGAN" -> "soumith/ganhacks"
"junyanz/CycleGAN" -> "carpedm20/DCGAN-tensorflow"
"junyanz/CycleGAN" -> "tkarras/progressive_growing_of_gans"
"junyanz/CycleGAN" -> "NVIDIA/pix2pixHD"
"junyanz/CycleGAN" -> "luanfujun/deep-photo-styletransfer"
"junyanz/CycleGAN" -> "wiseodd/generative-models"
"junyanz/CycleGAN" -> "lengstrom/fast-style-transfer"
"junyanz/CycleGAN" -> "junyanz/iGAN"
"junyanz/CycleGAN" -> "affinelayer/pix2pix-tensorflow"
"junyanz/CycleGAN" -> "jcjohnson/fast-neural-style"
"junyanz/CycleGAN" -> "zhangqianhui/AdversarialNetsPapers"
"junyanz/CycleGAN" -> "martinarjovsky/WassersteinGAN"
"YadiraF/GAN" -> "wiseodd/generative-models"
"YadiraF/GAN" -> "hindupuravinash/the-gan-zoo"
"YadiraF/GAN" -> "carpedm20/DCGAN-tensorflow"
"YadiraF/GAN" -> "zhangqianhui/AdversarialNetsPapers"
"YadiraF/GAN" -> "soumith/ganhacks"
"YadiraF/GAN" -> "igul222/improved_wgan_training"
"YadiraF/GAN" -> "martinarjovsky/WassersteinGAN"
"YadiraF/GAN" -> "YadiraF/GAN_Theories"
"YadiraF/GAN" -> "eriklindernoren/PyTorch-GAN"
"YadiraF/GAN" -> "eriklindernoren/Keras-GAN"
"YadiraF/GAN" -> "openai/improved-gan"
"YadiraF/GAN" -> "hwalsuklee/tensorflow-generative-model-collections"
"YadiraF/GAN" -> "goodfeli/adversarial"
"YadiraF/GAN" -> "google/compare_gan"
"YadiraF/GAN" -> "znxlwm/pytorch-generative-model-collections"
"adamian98/pulse" -> "thunil/TecoGAN"
"adamian98/pulse" -> "tg-bomze/Face-Depixelizer"
"adamian98/pulse" -> "beurtschipper/Depix" ["e"=1]
"adamian98/pulse" -> "facebookresearch/pifuhd"
"adamian98/pulse" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"adamian98/pulse" -> "eladrich/pixel2style2pixel"
"adamian98/pulse" -> "vt-vl-lab/3d-photo-inpainting"
"adamian98/pulse" -> "PeterL1n/BackgroundMattingV2"
"adamian98/pulse" -> "podgorskiy/ALAE"
"adamian98/pulse" -> "NVlabs/stylegan2"
"adamian98/pulse" -> "xinntao/BasicSR" ["e"=1]
"adamian98/pulse" -> "NVlabs/stylegan"
"adamian98/pulse" -> "iperov/DeepFaceLab"
"adamian98/pulse" -> "jantic/DeOldify"
"adamian98/pulse" -> "NathanUA/U-2-Net"
"NVlabs/stylegan" -> "NVlabs/stylegan2"
"NVlabs/stylegan" -> "tkarras/progressive_growing_of_gans"
"NVlabs/stylegan" -> "NVlabs/ffhq-dataset"
"NVlabs/stylegan" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"NVlabs/stylegan" -> "NVlabs/SPADE"
"NVlabs/stylegan" -> "NVIDIA/pix2pixHD"
"NVlabs/stylegan" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/stylegan" -> "hindupuravinash/the-gan-zoo"
"NVlabs/stylegan" -> "NVIDIA/vid2vid"
"NVlabs/stylegan" -> "junyanz/CycleGAN"
"NVlabs/stylegan" -> "soumith/ganhacks"
"NVlabs/stylegan" -> "eriklindernoren/PyTorch-GAN"
"NVlabs/stylegan" -> "eriklindernoren/Keras-GAN"
"NVlabs/stylegan" -> "phillipi/pix2pix"
"NVlabs/stylegan" -> "deepinsight/insightface" ["e"=1]
"Puzer/stylegan-encoder" -> "pbaylies/stylegan-encoder"
"Puzer/stylegan-encoder" -> "rolux/stylegan2encoder"
"Puzer/stylegan-encoder" -> "genforce/interfacegan"
"Puzer/stylegan-encoder" -> "jacobhallberg/pytorch_stylegan_encoder"
"Puzer/stylegan-encoder" -> "rosinality/stylegan2-pytorch"
"Puzer/stylegan-encoder" -> "rosinality/style-based-gan-pytorch"
"Puzer/stylegan-encoder" -> "EvgenyKashin/stylegan2-distillation"
"Puzer/stylegan-encoder" -> "ak9250/stylegan-art"
"Puzer/stylegan-encoder" -> "ShenYujun/InterFaceGAN"
"Puzer/stylegan-encoder" -> "a312863063/seeprettyface-face_editor"
"Puzer/stylegan-encoder" -> "pacifinapacific/StyleGAN_LatentEditor"
"Puzer/stylegan-encoder" -> "omertov/encoder4editing"
"Puzer/stylegan-encoder" -> "eladrich/pixel2style2pixel"
"Puzer/stylegan-encoder" -> "harskish/ganspace"
"Puzer/stylegan-encoder" -> "NVlabs/FUNIT"
"znxlwm/pytorch-generative-model-collections" -> "hwalsuklee/tensorflow-generative-model-collections"
"znxlwm/pytorch-generative-model-collections" -> "wiseodd/generative-models"
"znxlwm/pytorch-generative-model-collections" -> "martinarjovsky/WassersteinGAN"
"znxlwm/pytorch-generative-model-collections" -> "caogang/wgan-gp"
"znxlwm/pytorch-generative-model-collections" -> "heykeetae/Self-Attention-GAN"
"znxlwm/pytorch-generative-model-collections" -> "igul222/improved_wgan_training"
"znxlwm/pytorch-generative-model-collections" -> "soumith/ganhacks"
"znxlwm/pytorch-generative-model-collections" -> "nightrome/really-awesome-gan"
"znxlwm/pytorch-generative-model-collections" -> "google/compare_gan"
"znxlwm/pytorch-generative-model-collections" -> "lanpa/tensorboard-pytorch" ["e"=1]
"znxlwm/pytorch-generative-model-collections" -> "zhangqianhui/AdversarialNetsPapers"
"znxlwm/pytorch-generative-model-collections" -> "eriklindernoren/PyTorch-GAN"
"znxlwm/pytorch-generative-model-collections" -> "openai/improved-gan"
"znxlwm/pytorch-generative-model-collections" -> "yunjey/StarGAN"
"znxlwm/pytorch-generative-model-collections" -> "tkarras/progressive_growing_of_gans"
"hologerry/AGIS-Net" -> "hologerry/Attr2Font"
"hologerry/AGIS-Net" -> "ShusenTang/FontRNN"
"hologerry/AGIS-Net" -> "williamyang1991/TET-GAN"
"hologerry/AGIS-Net" -> "liweileev/FET-GAN"
"hologerry/AGIS-Net" -> "azadis/MC-GAN"
"hologerry/AGIS-Net" -> "clovaai/lffont"
"mchong6/JoJoGAN" -> "williamyang1991/DualStyleGAN"
"mchong6/JoJoGAN" -> "rinongal/StyleGAN-nada"
"mchong6/JoJoGAN" -> "yuval-alaluf/hyperstyle"
"mchong6/JoJoGAN" -> "omertov/encoder4editing"
"mchong6/JoJoGAN" -> "yuval-alaluf/restyle-encoder"
"mchong6/JoJoGAN" -> "eladrich/pixel2style2pixel"
"mchong6/JoJoGAN" -> "onion-liu/BlendGAN"
"mchong6/JoJoGAN" -> "danielroich/PTI"
"mchong6/JoJoGAN" -> "yuval-alaluf/stylegan3-editing"
"mchong6/JoJoGAN" -> "rosinality/stylegan2-pytorch"
"mchong6/JoJoGAN" -> "openai/glide-text2im" ["e"=1]
"mchong6/JoJoGAN" -> "happy-jihye/Cartoon-StyleGAN"
"mchong6/JoJoGAN" -> "yangxy/GPEN"
"mchong6/JoJoGAN" -> "rotemtzaban/STIT"
"mchong6/JoJoGAN" -> "weihaox/awesome-gan-inversion"
"NVlabs/few-shot-vid2vid" -> "vincent-thevenin/Realistic-Neural-Talking-Head-Models" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "NVlabs/imaginaire"
"NVlabs/few-shot-vid2vid" -> "svip-lab/impersonator"
"NVlabs/few-shot-vid2vid" -> "grey-eye/talking-heads" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "shaoanlu/fewshot-face-translation-GAN" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "NVIDIA/vid2vid"
"NVlabs/few-shot-vid2vid" -> "Hangz-nju-cuhk/Talking-Face-Generation-DAVS" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "NVlabs/FUNIT"
"NVlabs/few-shot-vid2vid" -> "yiranran/Audio-driven-TalkingFace-HeadPose" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "microsoft/Deep3DFaceReconstruction" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "YadiraF/face3d" ["e"=1]
"NVlabs/few-shot-vid2vid" -> "switchablenorms/CelebAMask-HQ"
"NVlabs/few-shot-vid2vid" -> "rosinality/stylegan2-pytorch"
"NVlabs/few-shot-vid2vid" -> "clovaai/stargan-v2"
"NVlabs/few-shot-vid2vid" -> "albertpumarola/GANimation"
"alievk/avatarify-python" -> "alievk/avatarify-desktop"
"alievk/avatarify-python" -> "a312863063/generators-with-stylegan2"
"alievk/avatarify-python" -> "minivision-ai/photo2cartoon"
"alievk/avatarify-python" -> "neuralchen/SimSwap" ["e"=1]
"alievk/avatarify-python" -> "iperov/DeepFaceLive"
"alievk/avatarify-python" -> "TachibanaYoshino/AnimeGAN"
"alievk/avatarify-python" -> "AliaksandrSiarohin/first-order-model"
"alievk/avatarify-python" -> "Rudrabha/Wav2Lip" ["e"=1]
"alievk/avatarify-python" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"alievk/avatarify-python" -> "guofei9987/blind_watermark" ["e"=1]
"alievk/avatarify-python" -> "TachibanaYoshino/AnimeGANv2"
"alievk/avatarify-python" -> "snap-research/articulated-animation" ["e"=1]
"alievk/avatarify-python" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"alievk/avatarify-python" -> "iperov/DeepFaceLab"
"alievk/avatarify-python" -> "adamian98/pulse"
"danielgatis/rembg" -> "xuebinqin/U-2-Net"
"danielgatis/rembg" -> "nadermx/backgroundremover"
"danielgatis/rembg" -> "Sanster/lama-cleaner" ["e"=1]
"danielgatis/rembg" -> "PeterL1n/BackgroundMattingV2"
"danielgatis/rembg" -> "pymatting/pymatting"
"danielgatis/rembg" -> "gradio-app/gradio" ["e"=1]
"danielgatis/rembg" -> "xinntao/Real-ESRGAN" ["e"=1]
"danielgatis/rembg" -> "ZHKKKe/MODNet"
"danielgatis/rembg" -> "xuebinqin/DIS"
"danielgatis/rembg" -> "lllyasviel/ControlNet" ["e"=1]
"danielgatis/rembg" -> "huggingface/diffusers" ["e"=1]
"danielgatis/rembg" -> "invoke-ai/InvokeAI" ["e"=1]
"danielgatis/rembg" -> "upscayl/upscayl" ["e"=1]
"danielgatis/rembg" -> "PeterL1n/RobustVideoMatting"
"danielgatis/rembg" -> "OPHoperHPO/image-background-remove-tool"
"harskish/ganspace" -> "justinpinkney/awesome-pretrained-stylegan2"
"harskish/ganspace" -> "rosinality/stylegan2-pytorch"
"harskish/ganspace" -> "genforce/sefa"
"harskish/ganspace" -> "genforce/interfacegan"
"harskish/ganspace" -> "yuval-alaluf/restyle-encoder"
"harskish/ganspace" -> "RameenAbdal/StyleFlow"
"harskish/ganspace" -> "eladrich/pixel2style2pixel"
"harskish/ganspace" -> "NVlabs/stylegan2-ada-pytorch"
"harskish/ganspace" -> "EvgenyKashin/stylegan2-distillation"
"harskish/ganspace" -> "mit-han-lab/data-efficient-gans"
"harskish/ganspace" -> "orpatashnik/StyleCLIP"
"harskish/ganspace" -> "omertov/encoder4editing"
"harskish/ganspace" -> "anvoynov/GANLatentDiscovery"
"harskish/ganspace" -> "rinongal/StyleGAN-nada"
"harskish/ganspace" -> "pbaylies/stylegan-encoder"
"iperov/DeepFaceLive" -> "iperov/DeepFaceLab"
"iperov/DeepFaceLive" -> "neuralchen/SimSwap" ["e"=1]
"iperov/DeepFaceLive" -> "borisdayma/dalle-mini" ["e"=1]
"iperov/DeepFaceLive" -> "Sanster/lama-cleaner" ["e"=1]
"iperov/DeepFaceLive" -> "babysor/MockingBird"
"iperov/DeepFaceLive" -> "deepfakes/faceswap"
"iperov/DeepFaceLive" -> "neonbjb/tortoise-tts" ["e"=1]
"iperov/DeepFaceLive" -> "CorentinJ/Real-Time-Voice-Cloning"
"iperov/DeepFaceLive" -> "NVlabs/instant-ngp" ["e"=1]
"iperov/DeepFaceLive" -> "coqui-ai/TTS" ["e"=1]
"iperov/DeepFaceLive" -> "Rudrabha/Wav2Lip" ["e"=1]
"iperov/DeepFaceLive" -> "xinntao/Real-ESRGAN" ["e"=1]
"iperov/DeepFaceLive" -> "lllyasviel/ControlNet" ["e"=1]
"iperov/DeepFaceLive" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"iperov/DeepFaceLive" -> "invoke-ai/InvokeAI" ["e"=1]
"martinarjovsky/WassersteinGAN" -> "igul222/improved_wgan_training"
"martinarjovsky/WassersteinGAN" -> "caogang/wgan-gp"
"martinarjovsky/WassersteinGAN" -> "openai/improved-gan"
"martinarjovsky/WassersteinGAN" -> "wiseodd/generative-models"
"martinarjovsky/WassersteinGAN" -> "Zardinality/WGAN-tensorflow"
"martinarjovsky/WassersteinGAN" -> "soumith/ganhacks"
"martinarjovsky/WassersteinGAN" -> "zhangqianhui/AdversarialNetsPapers"
"martinarjovsky/WassersteinGAN" -> "carpedm20/DCGAN-tensorflow"
"martinarjovsky/WassersteinGAN" -> "goodfeli/adversarial"
"martinarjovsky/WassersteinGAN" -> "tkarras/progressive_growing_of_gans"
"martinarjovsky/WassersteinGAN" -> "shekkizh/WassersteinGAN.tensorflow"
"martinarjovsky/WassersteinGAN" -> "znxlwm/pytorch-generative-model-collections"
"martinarjovsky/WassersteinGAN" -> "Newmu/dcgan_code"
"martinarjovsky/WassersteinGAN" -> "soumith/dcgan.torch"
"martinarjovsky/WassersteinGAN" -> "openai/InfoGAN"
"NVlabs/stylegan3" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/stylegan3" -> "rosinality/stylegan2-pytorch"
"NVlabs/stylegan3" -> "NVlabs/eg3d" ["e"=1]
"NVlabs/stylegan3" -> "eladrich/pixel2style2pixel"
"NVlabs/stylegan3" -> "orpatashnik/StyleCLIP"
"NVlabs/stylegan3" -> "NVlabs/stylegan2"
"NVlabs/stylegan3" -> "openai/guided-diffusion" ["e"=1]
"NVlabs/stylegan3" -> "CompVis/latent-diffusion" ["e"=1]
"NVlabs/stylegan3" -> "omertov/encoder4editing"
"NVlabs/stylegan3" -> "CompVis/taming-transformers" ["e"=1]
"NVlabs/stylegan3" -> "weihaox/awesome-gan-inversion"
"NVlabs/stylegan3" -> "yuval-alaluf/stylegan3-editing"
"NVlabs/stylegan3" -> "NVlabs/imaginaire"
"NVlabs/stylegan3" -> "lucidrains/stylegan2-pytorch"
"NVlabs/stylegan3" -> "autonomousvision/stylegan_xl"
"awentzonline/image-analogies" -> "alexjc/neural-doodle"
"awentzonline/image-analogies" -> "chuanli11/CNNMRF"
"awentzonline/image-analogies" -> "pavelgonchar/colornet"
"awentzonline/image-analogies" -> "jcjohnson/neural-style"
"awentzonline/image-analogies" -> "msracver/Deep-Image-Analogy"
"awentzonline/image-analogies" -> "ryankiros/neural-storyteller"
"awentzonline/image-analogies" -> "ascribe/image-match"
"awentzonline/image-analogies" -> "DmitryUlyanov/texture_nets"
"awentzonline/image-analogies" -> "david-gpu/srez"
"awentzonline/image-analogies" -> "ajbrock/Neural-Photo-Editor"
"awentzonline/image-analogies" -> "autumnai/leaf" ["e"=1]
"awentzonline/image-analogies" -> "jcjohnson/fast-neural-style"
"awentzonline/image-analogies" -> "Newmu/dcgan_code"
"awentzonline/image-analogies" -> "kaishengtai/neuralart"
"awentzonline/image-analogies" -> "manuelruder/artistic-videos"
"thunil/TecoGAN" -> "adamian98/pulse"
"thunil/TecoGAN" -> "xinntao/ESRGAN" ["e"=1]
"thunil/TecoGAN" -> "LoSealL/VideoSuperResolution" ["e"=1]
"thunil/TecoGAN" -> "xinntao/EDVR" ["e"=1]
"thunil/TecoGAN" -> "xinntao/BasicSR" ["e"=1]
"thunil/TecoGAN" -> "baowenbo/DAIN"
"thunil/TecoGAN" -> "jantic/DeOldify"
"thunil/TecoGAN" -> "idealo/image-super-resolution" ["e"=1]
"thunil/TecoGAN" -> "tensorlayer/srgan" ["e"=1]
"thunil/TecoGAN" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"thunil/TecoGAN" -> "vt-vl-lab/3d-photo-inpainting"
"thunil/TecoGAN" -> "alterzero/RBPN-PyTorch" ["e"=1]
"thunil/TecoGAN" -> "NVlabs/stylegan2"
"thunil/TecoGAN" -> "open-mmlab/mmsr" ["e"=1]
"thunil/TecoGAN" -> "open-mmlab/mmediting" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "Code-Bullet/PacNeat"
"ssusnic/Machine-Learning-Flappy-Bird" -> "Code-Bullet/PacmanGame"
"ssusnic/Machine-Learning-Flappy-Bird" -> "ArztSamuel/Applying_EANNs"
"ssusnic/Machine-Learning-Flappy-Bird" -> "kaishengtai/neuralart"
"ssusnic/Machine-Learning-Flappy-Bird" -> "cazala/synaptic" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "nicholas-ochoa/OpenSC2K" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "yenchenlin/DeepLearningFlappyBird" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "ivanseidel/IAMDinosaur" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "xviniette/FlappyLearning" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "wb14123/seq2seq-couplet" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "minimaxir/person-blocker" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "MorvanZhou/Evolutionary-Algorithm" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "bestony/logoly" ["e"=1]
"ssusnic/Machine-Learning-Flappy-Bird" -> "Code-Bullet/Google-Chrome-Dino-Game-AI"
"ssusnic/Machine-Learning-Flappy-Bird" -> "channingbreeze/games" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "JVictorDias/FlappIA-Bird"
"JVictorDias/Dinossauro-Google" -> "JVictorDias/DeepCars"
"JVictorDias/Dinossauro-Google" -> "JVictorDias/AlgoritmoTecelao"
"JVictorDias/Dinossauro-Google" -> "JVictorDias/ParticulasGravitacionais3D"
"JVictorDias/Dinossauro-Google" -> "JVictorDias/HardestGame"
"JVictorDias/Dinossauro-Google" -> "filipedeschamps/meu-primeiro-jogo-multiplayer" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "filipedeschamps/video-maker" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "JBezerra/YT-Rede-Neural"
"JVictorDias/Dinossauro-Google" -> "PIGDevUff/PigDev"
"JVictorDias/Dinossauro-Google" -> "JVictorDias/Spirograph"
"JVictorDias/Dinossauro-Google" -> "filipedeschamps/doom-fire-algorithm" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "JVictorDias/HardestGameEditor"
"JVictorDias/Dinossauro-Google" -> "ivanseidel/IAMDinosaur" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "sn3fru/datascience_course" ["e"=1]
"JVictorDias/Dinossauro-Google" -> "JVictorDias/PIG"
"kaishengtai/neuralart" -> "andersbll/neural_artistic_style"
"kaishengtai/neuralart" -> "jcjohnson/neural-style"
"kaishengtai/neuralart" -> "chuanli11/CNNMRF"
"kaishengtai/neuralart" -> "manuelruder/artistic-videos"
"kaishengtai/neuralart" -> "torch/torch7" ["e"=1]
"kaishengtai/neuralart" -> "ryankiros/neural-storyteller"
"kaishengtai/neuralart" -> "DmitryUlyanov/texture_nets"
"kaishengtai/neuralart" -> "szagoruyko/loadcaffe" ["e"=1]
"kaishengtai/neuralart" -> "awentzonline/image-analogies"
"kaishengtai/neuralart" -> "Element-Research/rnn" ["e"=1]
"kaishengtai/neuralart" -> "robertsdionne/neural-network-papers" ["e"=1]
"kaishengtai/neuralart" -> "soumith/convnet-benchmarks" ["e"=1]
"kaishengtai/neuralart" -> "mbartoli/neural-animation"
"kaishengtai/neuralart" -> "Newmu/dcgan_code"
"kaishengtai/neuralart" -> "karpathy/neuraltalk2" ["e"=1]
"david-gpu/srez" -> "alexjc/neural-enhance"
"david-gpu/srez" -> "Tetrachrome/subpixel"
"david-gpu/srez" -> "junyanz/iGAN"
"david-gpu/srez" -> "Newmu/dcgan_code"
"david-gpu/srez" -> "carpedm20/DCGAN-tensorflow"
"david-gpu/srez" -> "alexjc/neural-doodle"
"david-gpu/srez" -> "paarthneekhara/text-to-image"
"david-gpu/srez" -> "baidu/Paddle" ["e"=1]
"david-gpu/srez" -> "phillipi/pix2pix"
"david-gpu/srez" -> "YapengTian/Single-Image-Super-Resolution" ["e"=1]
"david-gpu/srez" -> "awentzonline/image-analogies"
"david-gpu/srez" -> "ajbrock/Neural-Photo-Editor"
"david-gpu/srez" -> "pavelgonchar/colornet"
"david-gpu/srez" -> "huangzehao/Super-Resolution.Benckmark" ["e"=1]
"david-gpu/srez" -> "jcjohnson/fast-neural-style"
"luanfujun/deep-painterly-harmonization" -> "luanfujun/deep-photo-styletransfer"
"luanfujun/deep-painterly-harmonization" -> "NVIDIA/FastPhotoStyle"
"luanfujun/deep-painterly-harmonization" -> "NVIDIA/vid2vid"
"luanfujun/deep-painterly-harmonization" -> "tkarras/progressive_growing_of_gans"
"luanfujun/deep-painterly-harmonization" -> "NVlabs/MUNIT"
"luanfujun/deep-painterly-harmonization" -> "CSAILVision/gandissect"
"luanfujun/deep-painterly-harmonization" -> "facebookresearch/DensePose" ["e"=1]
"luanfujun/deep-painterly-harmonization" -> "albertpumarola/GANimation"
"luanfujun/deep-painterly-harmonization" -> "jcjohnson/fast-neural-style"
"luanfujun/deep-painterly-harmonization" -> "NVIDIA/pix2pixHD"
"luanfujun/deep-painterly-harmonization" -> "yunjey/StarGAN"
"luanfujun/deep-painterly-harmonization" -> "junyanz/CycleGAN"
"luanfujun/deep-painterly-harmonization" -> "lengstrom/fast-style-transfer"
"luanfujun/deep-painterly-harmonization" -> "bendangnuksung/Image-OutPainting"
"luanfujun/deep-painterly-harmonization" -> "DmitryUlyanov/deep-image-prior"
"Taeu/Style-Your-Hair" -> "dukebw/LOHO"
"Taeu/Style-Your-Hair" -> "wty-ustc/HairCLIP"
"Taeu/Style-Your-Hair" -> "seasonSH/SemanticStyleGAN"
"Taeu/Style-Your-Hair" -> "oneThousand1000/HairMapper"
"Taeu/Style-Your-Hair" -> "ZPdesu/HairNet"
"YBIGTA/pytorch-hair-segmentation" -> "thangtran480/hair-segmentation"
"YBIGTA/pytorch-hair-segmentation" -> "UmarSpa/HairAnalysis"
"YBIGTA/pytorch-hair-segmentation" -> "ItchyHiker/Hair_Segmentation_Keras"
"YBIGTA/pytorch-hair-segmentation" -> "wonbeomjang/mobile-hair-segmentation-pytorch"
"YBIGTA/pytorch-hair-segmentation" -> "ileniTudor/Face-Hair-Segmentation-Dataset"
"YBIGTA/pytorch-hair-segmentation" -> "zllrunning/face-makeup.PyTorch"
"YBIGTA/pytorch-hair-segmentation" -> "MengZephyr/HairGANs"
"YBIGTA/pytorch-hair-segmentation" -> "takiyu/portrait_matting"
"YBIGTA/pytorch-hair-segmentation" -> "YuvalNirkin/face_segmentation" ["e"=1]
"YBIGTA/pytorch-hair-segmentation" -> "switchablenorms/CelebAMask-HQ"
"YBIGTA/pytorch-hair-segmentation" -> "lizhengwei1992/Semantic_Human_Matting"
"YBIGTA/pytorch-hair-segmentation" -> "JACKYLUO1991/FaceParsing"
"YBIGTA/pytorch-hair-segmentation" -> "zllrunning/face-parsing.PyTorch"
"YBIGTA/pytorch-hair-segmentation" -> "hqqxyy/Context-Aware-Matting"
"YBIGTA/pytorch-hair-segmentation" -> "pielet/HairNet"
"thangtran480/hair-segmentation" -> "YBIGTA/pytorch-hair-segmentation"
"thangtran480/hair-segmentation" -> "wonbeomjang/mobile-hair-segmentation-pytorch"
"thangtran480/hair-segmentation" -> "ItchyHiker/Hair_Segmentation_Keras"
"thangtran480/hair-segmentation" -> "aobo-y/hair-dye"
"thangtran480/hair-segmentation" -> "JACKYLUO1991/FaceParsing"
"thangtran480/hair-segmentation" -> "JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation"
"thangtran480/hair-segmentation" -> "kampta/face-seg"
"wty-ustc/HairCLIP" -> "omertov/encoder4editing"
"wty-ustc/HairCLIP" -> "Taeu/Style-Your-Hair"
"wty-ustc/HairCLIP" -> "oneThousand1000/HairMapper"
"wty-ustc/HairCLIP" -> "Tengfei-Wang/HFGI"
"wty-ustc/HairCLIP" -> "tzt101/MichiGAN"
"wty-ustc/HairCLIP" -> "danielroich/PTI"
"wty-ustc/HairCLIP" -> "seasonSH/SemanticStyleGAN"
"wty-ustc/HairCLIP" -> "ZPdesu/Barbershop"
"wty-ustc/HairCLIP" -> "sapphire497/style-transformer"
"wty-ustc/HairCLIP" -> "betterze/StyleSpace"
"wty-ustc/HairCLIP" -> "yuval-alaluf/stylegan3-editing"
"wty-ustc/HairCLIP" -> "onion-liu/BlendGAN"
"wty-ustc/HairCLIP" -> "rinongal/StyleGAN-nada"
"wty-ustc/HairCLIP" -> "yuval-alaluf/restyle-encoder"
"wty-ustc/HairCLIP" -> "stylegan-human/StyleGAN-Human"
"afruehstueck/tileGAN" -> "jessemelpolio/non-stationary_texture_syn"
"mxgmn/TextureSynthesis" -> "mxgmn/ConvChain"
"mxgmn/TextureSynthesis" -> "rohitrango/Image-Quilting-for-Texture-Synthesis"
"azadis/MC-GAN" -> "hologerry/AGIS-Net"
"azadis/MC-GAN" -> "williamyang1991/TET-GAN"
"azadis/MC-GAN" -> "changebo/HCCG-CycleGAN"
"azadis/MC-GAN" -> "kaonashi-tyc/Rewrite"
"azadis/MC-GAN" -> "hologerry/Attr2Font"
"azadis/MC-GAN" -> "kaonashi-tyc/zi2zi"
"azadis/MC-GAN" -> "yuweiming70/Style_Migration_For_Artistic_Font_With_CNN"
"azadis/MC-GAN" -> "williamyang1991/Text-Effects-Transfer"
"azadis/MC-GAN" -> "TAMU-VITA/ShapeMatchingGAN"
"azadis/MC-GAN" -> "LouieYang/stroke-controllable-fast-style-transfer"
"azadis/MC-GAN" -> "erikbern/deep-fonts" ["e"=1]
"azadis/MC-GAN" -> "LinkWoong/Zeroshot-GAN"
"azadis/MC-GAN" -> "ecnuycxie/DG-Font"
"azadis/MC-GAN" -> "clovaai/lffont"
"azadis/MC-GAN" -> "godisboy/SN-GAN"
"kaonashi-tyc/zi2zi" -> "kaonashi-tyc/Rewrite"
"kaonashi-tyc/zi2zi" -> "azadis/MC-GAN"
"kaonashi-tyc/zi2zi" -> "EuphoriaYan/zi2zi-pytorch"
"kaonashi-tyc/zi2zi" -> "changebo/HCCG-CycleGAN"
"kaonashi-tyc/zi2zi" -> "phillipi/pix2pix"
"kaonashi-tyc/zi2zi" -> "yenchenlin/pix2pix-tensorflow"
"kaonashi-tyc/zi2zi" -> "martinarjovsky/WassersteinGAN"
"kaonashi-tyc/zi2zi" -> "yunjey/domain-transfer-network"
"kaonashi-tyc/zi2zi" -> "affinelayer/pix2pix-tensorflow"
"kaonashi-tyc/zi2zi" -> "NVIDIA/pix2pixHD"
"kaonashi-tyc/zi2zi" -> "carpedm20/DCGAN-tensorflow"
"kaonashi-tyc/zi2zi" -> "NVlabs/MUNIT"
"kaonashi-tyc/zi2zi" -> "ankush-me/SynthText" ["e"=1]
"kaonashi-tyc/zi2zi" -> "hwalsuklee/tensorflow-generative-model-collections"
"kaonashi-tyc/zi2zi" -> "igul222/improved_wgan_training"
"run-youngjoo/SC-FEGAN" -> "switchablenorms/CelebAMask-HQ"
"run-youngjoo/SC-FEGAN" -> "JiahuiYu/generative_inpainting" ["e"=1]
"run-youngjoo/SC-FEGAN" -> "ZPdesu/SEAN"
"run-youngjoo/SC-FEGAN" -> "zllrunning/face-parsing.PyTorch"
"run-youngjoo/SC-FEGAN" -> "Puzer/stylegan-encoder"
"run-youngjoo/SC-FEGAN" -> "lyndonzheng/Pluralistic-Inpainting" ["e"=1]
"run-youngjoo/SC-FEGAN" -> "LynnHo/AttGAN-Tensorflow"
"run-youngjoo/SC-FEGAN" -> "knazeri/edge-connect" ["e"=1]
"run-youngjoo/SC-FEGAN" -> "NVIDIA/partialconv" ["e"=1]
"run-youngjoo/SC-FEGAN" -> "tzt101/MichiGAN"
"run-youngjoo/SC-FEGAN" -> "genforce/interfacegan"
"run-youngjoo/SC-FEGAN" -> "rosinality/stylegan2-pytorch"
"run-youngjoo/SC-FEGAN" -> "clovaai/stargan-v2"
"run-youngjoo/SC-FEGAN" -> "wtjiang98/PSGAN"
"run-youngjoo/SC-FEGAN" -> "csmliu/STGAN"
"xw-hu/Mask-ShadowGAN" -> "naoto0804/SynShadow"
"xw-hu/Mask-ShadowGAN" -> "stevewongv/DSC-PyTorch"
"xw-hu/Mask-ShadowGAN" -> "tsingqguo/exposure-fusion-shadow-removal"
"xw-hu/Mask-ShadowGAN" -> "cvlab-stonybrook/SID"
"xw-hu/Mask-ShadowGAN" -> "hhqweasd/G2R-ShadowNet"
"xw-hu/Mask-ShadowGAN" -> "vinthony/ghost-free-shadow-removal"
"xw-hu/Mask-ShadowGAN" -> "Vivianyzw/DeshadowSTCGANs"
"xw-hu/Mask-ShadowGAN" -> "DeepInsight-PCALab/ST-CGAN"
"xw-hu/Mask-ShadowGAN" -> "xw-hu/DSC"
"xw-hu/Mask-ShadowGAN" -> "zhling2020/RIS-GAN"
"xw-hu/Mask-ShadowGAN" -> "IsHYuhi/ST-CGAN_Stacked_Conditional_Generative_Adversarial_Networks"
"xw-hu/Mask-ShadowGAN" -> "jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal"
"sylefeb/VoxModSynth" -> "emilk/wfc"
"sylefeb/VoxModSynth" -> "math-fehr/fast-wfc"
"sylefeb/VoxModSynth" -> "vasumahesh1/WFC_WebGL"
"zfedoran/pixel-sprite-generator" -> "Shogan/PixelSpriteGenerator-Unity"
"zfedoran/pixel-sprite-generator" -> "tcoxon/metazelda"
"zfedoran/pixel-sprite-generator" -> "blipn/pixel-sprite-generator-nodejs"
"zfedoran/pixel-sprite-generator" -> "abagames/PixelArtGen"
"zfedoran/pixel-sprite-generator" -> "ttencate/jfxr" ["e"=1]
"zfedoran/pixel-sprite-generator" -> "stewsters/shipwright"
"zfedoran/pixel-sprite-generator" -> "mxgmn/ConvChain"
"zfedoran/pixel-sprite-generator" -> "DavidYork/SpriteGenerator"
"zfedoran/pixel-sprite-generator" -> "ArtBIT/pixel-sprite-generator"
"zfedoran/pixel-sprite-generator" -> "tversteeg/sprite-gen"
"zfedoran/pixel-sprite-generator" -> "Zielak/pixel-sprite-generator"
"zfedoran/pixel-sprite-generator" -> "rlguy/FantasyMapGenerator" ["e"=1]
"zfedoran/pixel-sprite-generator" -> "daishihmr/bulletml.js" ["e"=1]
"zfedoran/pixel-sprite-generator" -> "keim/SiON" ["e"=1]
"junrushao1994/fast-neural-style.tf" -> "OlavHN/fast-neural-style"
"tensorflow/magenta" -> "lengstrom/fast-style-transfer"
"tensorflow/magenta" -> "deepmind/sonnet" ["e"=1]
"tensorflow/magenta" -> "ibab/tensorflow-wavenet" ["e"=1]
"tensorflow/magenta" -> "luanfujun/deep-photo-styletransfer"
"tensorflow/magenta" -> "fchollet/keras" ["e"=1]
"tensorflow/magenta" -> "facebookresearch/fastText" ["e"=1]
"tensorflow/magenta" -> "jtoy/awesome-tensorflow" ["e"=1]
"tensorflow/magenta" -> "tensorflow/tensor2tensor" ["e"=1]
"tensorflow/magenta" -> "karpathy/char-rnn" ["e"=1]
"tensorflow/magenta" -> "jcjohnson/neural-style"
"tensorflow/magenta" -> "tensorflow/models" ["e"=1]
"tensorflow/magenta" -> "carpedm20/DCGAN-tensorflow"
"tensorflow/magenta" -> "junyanz/CycleGAN"
"tensorflow/magenta" -> "songrotek/Deep-Learning-Papers-Reading-Roadmap" ["e"=1]
"tensorflow/magenta" -> "openai/gym" ["e"=1]
"JoYoungjoo/SC-FEGAN" -> "NVlabs/FUNIT"
"JoYoungjoo/SC-FEGAN" -> "NVlabs/stylegan"
"JoYoungjoo/SC-FEGAN" -> "NVlabs/SPADE"
"JoYoungjoo/SC-FEGAN" -> "JiahuiYu/generative_inpainting" ["e"=1]
"JoYoungjoo/SC-FEGAN" -> "knazeri/edge-connect" ["e"=1]
"JoYoungjoo/SC-FEGAN" -> "SummitKwan/transparent_latent_gan"
"JoYoungjoo/SC-FEGAN" -> "Luolc/AdaBound" ["e"=1]
"JoYoungjoo/SC-FEGAN" -> "NVIDIA/vid2vid"
"JoYoungjoo/SC-FEGAN" -> "NVlabs/MUNIT"
"JoYoungjoo/SC-FEGAN" -> "tkarras/progressive_growing_of_gans"
"JoYoungjoo/SC-FEGAN" -> "facebookresearch/pythia" ["e"=1]
"JoYoungjoo/SC-FEGAN" -> "NVlabs/ffhq-dataset"
"JoYoungjoo/SC-FEGAN" -> "luanfujun/deep-painterly-harmonization"
"JoYoungjoo/SC-FEGAN" -> "CSAILVision/gandissect"
"JoYoungjoo/SC-FEGAN" -> "shaoanlu/faceswap-GAN" ["e"=1]
"TachibanaYoshino/AnimeGAN" -> "TachibanaYoshino/AnimeGANv2"
"TachibanaYoshino/AnimeGAN" -> "minivision-ai/photo2cartoon"
"TachibanaYoshino/AnimeGAN" -> "TachibanaYoshino/AnimeGANv3"
"TachibanaYoshino/AnimeGAN" -> "SystemErrorWang/White-box-Cartoonization"
"TachibanaYoshino/AnimeGAN" -> "bryandlee/animegan2-pytorch"
"TachibanaYoshino/AnimeGAN" -> "a312863063/generators-with-stylegan2"
"TachibanaYoshino/AnimeGAN" -> "jayleicn/animeGAN" ["e"=1]
"TachibanaYoshino/AnimeGAN" -> "taki0112/UGATIT"
"TachibanaYoshino/AnimeGAN" -> "mnicnc404/CartoonGan-tensorflow"
"TachibanaYoshino/AnimeGAN" -> "vt-vl-lab/3d-photo-inpainting"
"TachibanaYoshino/AnimeGAN" -> "alievk/avatarify-python"
"TachibanaYoshino/AnimeGAN" -> "znxlwm/UGATIT-pytorch"
"TachibanaYoshino/AnimeGAN" -> "NVlabs/stylegan2"
"TachibanaYoshino/AnimeGAN" -> "senguptaumd/Background-Matting"
"TachibanaYoshino/AnimeGAN" -> "bloc97/Anime4K" ["e"=1]
"TachibanaYoshino/AnimeGANv2" -> "bryandlee/animegan2-pytorch"
"TachibanaYoshino/AnimeGANv2" -> "TachibanaYoshino/AnimeGANv3"
"TachibanaYoshino/AnimeGANv2" -> "TachibanaYoshino/AnimeGAN"
"TachibanaYoshino/AnimeGANv2" -> "minivision-ai/photo2cartoon"
"TachibanaYoshino/AnimeGANv2" -> "SystemErrorWang/White-box-Cartoonization"
"TachibanaYoshino/AnimeGANv2" -> "eladrich/pixel2style2pixel"
"TachibanaYoshino/AnimeGANv2" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"TachibanaYoshino/AnimeGANv2" -> "PeterL1n/RobustVideoMatting"
"TachibanaYoshino/AnimeGANv2" -> "neuralchen/SimSwap" ["e"=1]
"TachibanaYoshino/AnimeGANv2" -> "PeterL1n/BackgroundMattingV2"
"TachibanaYoshino/AnimeGANv2" -> "rosinality/stylegan2-pytorch"
"TachibanaYoshino/AnimeGANv2" -> "mchong6/JoJoGAN"
"TachibanaYoshino/AnimeGANv2" -> "orpatashnik/StyleCLIP"
"TachibanaYoshino/AnimeGANv2" -> "xinntao/Real-ESRGAN" ["e"=1]
"TachibanaYoshino/AnimeGANv2" -> "williamyang1991/DualStyleGAN"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "znxlwm/pytorch-CartoonGAN"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "taki0112/CartoonGAN-Tensorflow"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "mnicnc404/CartoonGan-tensorflow"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "FlyingGoblin/CartoonGAN"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "SystemErrorWang/CartoonGAN"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "maciej3031/comixify"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "xunhuang1995/AdaIN-style"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "naoto0804/pytorch-AdaIN"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "ycjing/Neural-Style-Transfer-Papers"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "jerryli27/TwinGAN" ["e"=1]
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "CompVis/adaptive-style-transfer"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "znxlwm/UGATIT-pytorch"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "NVlabs/FUNIT"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "msracver/Deep-Image-Analogy"
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" -> "YBIGTA/pytorch-hair-segmentation"
"eriklindernoren/Keras-GAN" -> "eriklindernoren/PyTorch-GAN"
"eriklindernoren/Keras-GAN" -> "hindupuravinash/the-gan-zoo"
"eriklindernoren/Keras-GAN" -> "soumith/ganhacks"
"eriklindernoren/Keras-GAN" -> "wiseodd/generative-models"
"eriklindernoren/Keras-GAN" -> "carpedm20/DCGAN-tensorflow"
"eriklindernoren/Keras-GAN" -> "zhangqianhui/AdversarialNetsPapers"
"eriklindernoren/Keras-GAN" -> "nashory/gans-awesome-applications"
"eriklindernoren/Keras-GAN" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"eriklindernoren/Keras-GAN" -> "matterport/Mask_RCNN" ["e"=1]
"eriklindernoren/Keras-GAN" -> "tkarras/progressive_growing_of_gans"
"eriklindernoren/Keras-GAN" -> "junyanz/CycleGAN"
"eriklindernoren/Keras-GAN" -> "keras-team/keras" ["e"=1]
"eriklindernoren/Keras-GAN" -> "qqwweee/keras-yolo3" ["e"=1]
"eriklindernoren/Keras-GAN" -> "fchollet/deep-learning-models" ["e"=1]
"eriklindernoren/Keras-GAN" -> "hwalsuklee/tensorflow-generative-model-collections"
"RameenAbdal/StyleFlow" -> "eladrich/pixel2style2pixel"
"RameenAbdal/StyleFlow" -> "rosinality/stylegan2-pytorch"
"RameenAbdal/StyleFlow" -> "omertov/encoder4editing"
"RameenAbdal/StyleFlow" -> "genforce/interfacegan"
"RameenAbdal/StyleFlow" -> "orpatashnik/StyleCLIP"
"RameenAbdal/StyleFlow" -> "harskish/ganspace"
"RameenAbdal/StyleFlow" -> "yuval-alaluf/restyle-encoder"
"RameenAbdal/StyleFlow" -> "danielroich/PTI"
"RameenAbdal/StyleFlow" -> "NVlabs/stylegan2-ada-pytorch"
"RameenAbdal/StyleFlow" -> "yuval-alaluf/stylegan3-editing"
"RameenAbdal/StyleFlow" -> "rotemtzaban/STIT"
"RameenAbdal/StyleFlow" -> "yuval-alaluf/hyperstyle"
"RameenAbdal/StyleFlow" -> "switchablenorms/CelebAMask-HQ"
"RameenAbdal/StyleFlow" -> "zllrunning/face-parsing.PyTorch"
"RameenAbdal/StyleFlow" -> "justinpinkney/awesome-pretrained-stylegan2"
"maurock/snake-ga" -> "YuriyGuts/snake-ai-reinforcement"
"lucidrains/lightweight-gan" -> "lucidrains/stylegan2-pytorch"
"lucidrains/lightweight-gan" -> "odegeasslbc/FastGAN-pytorch"
"lucidrains/lightweight-gan" -> "rosinality/stylegan2-pytorch"
"lucidrains/lightweight-gan" -> "mit-han-lab/data-efficient-gans"
"lucidrains/lightweight-gan" -> "NVlabs/stylegan2-ada"
"lucidrains/lightweight-gan" -> "autonomousvision/projected_gan"
"lucidrains/lightweight-gan" -> "justinpinkney/awesome-pretrained-stylegan2"
"lucidrains/lightweight-gan" -> "NVlabs/stylegan2-ada-pytorch"
"lucidrains/lightweight-gan" -> "harskish/ganspace"
"lucidrains/lightweight-gan" -> "NVlabs/stylegan2"
"lucidrains/lightweight-gan" -> "rinongal/StyleGAN-nada"
"lucidrains/lightweight-gan" -> "lucidrains/gigagan-pytorch" ["e"=1]
"lucidrains/lightweight-gan" -> "lucidrains/unet-stylegan2"
"lucidrains/lightweight-gan" -> "facebookresearch/ic_gan"
"lucidrains/lightweight-gan" -> "NVlabs/alias-free-gan"
"nolan-dev/GANInterface" -> "nolan-dev/stylegan_reimplementation"
"nolan-dev/GANInterface" -> "rolux/stylegan2encoder"
"nolan-dev/GANInterface" -> "k-l-lambda/stylegan-web"
"nolan-dev/GANInterface" -> "taki0112/StyleGAN-Tensorflow"
"nolan-dev/GANInterface" -> "qhgz2013/anime-face-detector" ["e"=1]
"nolan-dev/GANInterface" -> "reidsanders/danbooru-utility" ["e"=1]
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "caogang/wgan-gp"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "znxlwm/pytorch-generative-model-collections"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "togheppi/DCGAN"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "bioinf-jku/TTUR"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "ptrblck/prog_gans_pytorch_inference"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "mseitzer/pytorch-fid"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "igul222/improved_wgan_training"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "jalola/improved-wgan-pytorch"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "Zeleni9/pytorch-wgan"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "malzantot/Pytorch-conditional-GANs"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "znxlwm/tensorflow-MNIST-cGAN-cDCGAN"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "znxlwm/pytorch-CycleGAN"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "pfnet-research/sngan_projection"
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" -> "znxlwm/tensorflow-MNIST-GAN-DCGAN"
"appbrewery/100-days-of-python" -> "guardicore/monkey" ["e"=1]
"appbrewery/100-days-of-python" -> "jofpin/trape" ["e"=1]
"appbrewery/100-days-of-python" -> "thenewboston-developers/Account-Manager"
"appbrewery/100-days-of-python" -> "thenewboston-developers/Website"
"appbrewery/100-days-of-python" -> "cmu-snap/pigasus"
"appbrewery/100-days-of-python" -> "lightspin-tech/red-kube"
"appbrewery/100-days-of-python" -> "harisqazi1/Cybersecurity" ["e"=1]
"appbrewery/100-days-of-python" -> "facebookresearch/pifuhd"
"appbrewery/100-days-of-python" -> "talkpython/100daysofcode-with-python-course" ["e"=1]
"appbrewery/100-days-of-python" -> "tdlib/telegram-bot-api" ["e"=1]
"appbrewery/100-days-of-python" -> "koutto/pi-pwnbox-rogueap" ["e"=1]
"appbrewery/100-days-of-python" -> "TiendaNube/php-programming-best-practices"
"appbrewery/100-days-of-python" -> "mxrch/GHunt" ["e"=1]
"appbrewery/100-days-of-python" -> "cjph8914/2020_benfords"
"appbrewery/100-days-of-python" -> "l1ving/youtube-dl" ["e"=1]
"lightspin-tech/red-kube" -> "cmu-snap/pigasus"
"lightspin-tech/red-kube" -> "TiendaNube/php-programming-best-practices"
"lightspin-tech/red-kube" -> "vchinnipilli/kubestriker" ["e"=1]
"lightspin-tech/red-kube" -> "cyberark/kubesploit" ["e"=1]
"lightspin-tech/red-kube" -> "inguardians/peirates" ["e"=1]
"lightspin-tech/red-kube" -> "optiv/ScareCrow" ["e"=1]
"lightspin-tech/red-kube" -> "thenewboston-developers/Website"
"lightspin-tech/red-kube" -> "OpenCSPM/opencspm" ["e"=1]
"lightspin-tech/red-kube" -> "DataDog/stratus-red-team" ["e"=1]
"lightspin-tech/red-kube" -> "cyberark/KubiScan" ["e"=1]
"lightspin-tech/red-kube" -> "Azure/Stormspotter" ["e"=1]
"lightspin-tech/red-kube" -> "outflanknl/RedELK" ["e"=1]
"lightspin-tech/red-kube" -> "fox-it/Invoke-ACLPwn" ["e"=1]
"lightspin-tech/red-kube" -> "NetSPI/MicroBurst" ["e"=1]
"lightspin-tech/red-kube" -> "klezVirus/CheeseTools" ["e"=1]
"joel-simon/ganbreeder" -> "justinpinkney/awesome-pretrained-stylegan2"
"joel-simon/ganbreeder" -> "harskish/ganspace"
"joel-simon/ganbreeder" -> "robbiebarrat/art-DCGAN"
"joel-simon/ganbreeder" -> "rolux/stylegan2encoder"
"joel-simon/ganbreeder" -> "Puzer/stylegan-encoder"
"joel-simon/ganbreeder" -> "ak9250/stylegan-art"
"joel-simon/ganbreeder" -> "dvschultz/ml-art-colabs"
"joel-simon/ganbreeder" -> "nerdyrodent/VQGAN-CLIP" ["e"=1]
"joel-simon/ganbreeder" -> "eps696/aphantasia" ["e"=1]
"joel-simon/ganbreeder" -> "memo/webcam-pix2pix-tensorflow" ["e"=1]
"joel-simon/ganbreeder" -> "pbaylies/stylegan-encoder"
"joel-simon/ganbreeder" -> "lucidrains/big-sleep" ["e"=1]
"joel-simon/ganbreeder" -> "EvgenyKashin/stylegan2-distillation"
"joel-simon/ganbreeder" -> "NVlabs/stylegan2"
"joel-simon/ganbreeder" -> "ajbrock/BigGAN-PyTorch"
"SystemErrorWang/White-box-Cartoonization" -> "experience-ml/cartoonize"
"SystemErrorWang/White-box-Cartoonization" -> "minivision-ai/photo2cartoon"
"SystemErrorWang/White-box-Cartoonization" -> "TachibanaYoshino/AnimeGAN"
"SystemErrorWang/White-box-Cartoonization" -> "SystemErrorWang/FacialCartoonization"
"SystemErrorWang/White-box-Cartoonization" -> "TachibanaYoshino/AnimeGANv2"
"SystemErrorWang/White-box-Cartoonization" -> "eladrich/pixel2style2pixel"
"SystemErrorWang/White-box-Cartoonization" -> "mnicnc404/CartoonGan-tensorflow"
"SystemErrorWang/White-box-Cartoonization" -> "senguptaumd/Background-Matting"
"SystemErrorWang/White-box-Cartoonization" -> "ZHKKKe/MODNet"
"SystemErrorWang/White-box-Cartoonization" -> "NathanUA/U-2-Net"
"SystemErrorWang/White-box-Cartoonization" -> "clovaai/stargan-v2"
"SystemErrorWang/White-box-Cartoonization" -> "vt-vl-lab/3d-photo-inpainting"
"SystemErrorWang/White-box-Cartoonization" -> "vijishmadhavan/ArtLine"
"SystemErrorWang/White-box-Cartoonization" -> "bryandlee/animegan2-pytorch"
"SystemErrorWang/White-box-Cartoonization" -> "PeterL1n/BackgroundMattingV2"
"graphific/DeepDreamVideo" -> "samim23/DeepDreamAnim"
"graphific/DeepDreamVideo" -> "google/deepdream"
"graphific/DeepDreamVideo" -> "VISIONAI/clouddream"
"graphific/DeepDreamVideo" -> "kesara/deepdreamer"
"graphific/DeepDreamVideo" -> "manuelruder/artistic-videos"
"graphific/DeepDreamVideo" -> "ryankennedyio/deep-dream-generator"
"graphific/DeepDreamVideo" -> "JohnMount/CaffeECSExample"
"graphific/DeepDreamVideo" -> "jcjohnson/cnn-vis"
"graphific/DeepDreamVideo" -> "jrosebr1/bat-country"
"graphific/DeepDreamVideo" -> "rasguanabana/ytfs" ["e"=1]
"graphific/DeepDreamVideo" -> "alexjc/neural-doodle"
"graphific/DeepDreamVideo" -> "jeffThompson/PixelSorting" ["e"=1]
"graphific/DeepDreamVideo" -> "jcjohnson/neural-style"
"graphific/DeepDreamVideo" -> "awentzonline/image-analogies"
"graphific/DeepDreamVideo" -> "Newmu/dcgan_code"
"yusuketomoto/chainer-fast-neuralstyle" -> "gafr/chainer-fast-neuralstyle-models"
"yusuketomoto/chainer-fast-neuralstyle" -> "DmitryUlyanov/texture_nets"
"yusuketomoto/chainer-fast-neuralstyle" -> "chuanli11/CNNMRF"
"yusuketomoto/chainer-fast-neuralstyle" -> "manuelruder/artistic-videos"
"yusuketomoto/chainer-fast-neuralstyle" -> "genekogan/CubistMirror"
"yusuketomoto/chainer-fast-neuralstyle" -> "jcjohnson/fast-neural-style"
"yusuketomoto/chainer-fast-neuralstyle" -> "OlavHN/fast-neural-style"
"yusuketomoto/chainer-fast-neuralstyle" -> "mattya/chainer-gogh" ["e"=1]
"yusuketomoto/chainer-fast-neuralstyle" -> "rtqichen/style-swap"
"yusuketomoto/chainer-fast-neuralstyle" -> "titu1994/Fast-Neural-Style"
"yusuketomoto/chainer-fast-neuralstyle" -> "pavelgonchar/neural-art-mini"
"yusuketomoto/chainer-fast-neuralstyle" -> "chuanli11/MGANs"
"yusuketomoto/chainer-fast-neuralstyle" -> "titu1994/Neural-Style-Transfer"
"yusuketomoto/chainer-fast-neuralstyle" -> "andersbll/neural_artistic_style"
"yusuketomoto/chainer-fast-neuralstyle" -> "junrushao1994/fast-neural-style.tf"
"goodfeli/dlbook_notation" -> "goodfeli/dlbook_exercises" ["e"=1]
"goodfeli/dlbook_notation" -> "lanpa/tensorboard-pytorch" ["e"=1]
"goodfeli/dlbook_notation" -> "dustinvtran/latex-templates" ["e"=1]
"goodfeli/dlbook_notation" -> "ermongroup/cs228-notes" ["e"=1]
"goodfeli/dlbook_notation" -> "goodfeli/adversarial"
"goodfeli/dlbook_notation" -> "google-research/arxiv-latex-cleaner" ["e"=1]
"goodfeli/dlbook_notation" -> "uber/pyro" ["e"=1]
"goodfeli/dlbook_notation" -> "abhshkdz/ai-deadlines" ["e"=1]
"goodfeli/dlbook_notation" -> "wiseodd/generative-models"
"goodfeli/dlbook_notation" -> "facebookresearch/visdom" ["e"=1]
"goodfeli/dlbook_notation" -> "zackchase/mxnet-the-straight-dope" ["e"=1]
"goodfeli/dlbook_notation" -> "mila-udem/welcome_tutorials" ["e"=1]
"goodfeli/dlbook_notation" -> "pfnet-research/sngan_projection"
"goodfeli/dlbook_notation" -> "rll/rllab" ["e"=1]
"goodfeli/dlbook_notation" -> "google/compare_gan"
"wtjiang98/BeautyGAN_pytorch" -> "wangguanzhi/LADN"
"wtjiang98/BeautyGAN_pytorch" -> "wtjiang98/PSGAN"
"wtjiang98/BeautyGAN_pytorch" -> "Honlan/BeautyGAN"
"wtjiang98/BeautyGAN_pytorch" -> "thaoshibe/BeautyGAN-PyTorch-reimplementation"
"wtjiang98/BeautyGAN_pytorch" -> "baldFemale/beautyGAN-tf-Implement"
"wtjiang98/BeautyGAN_pytorch" -> "BeautyGlow/BeautyGlow.github.io"
"wtjiang98/BeautyGAN_pytorch" -> "jingyut/PairedCycleGan"
"wtjiang98/BeautyGAN_pytorch" -> "VinAIResearch/CPM"
"wtjiang98/BeautyGAN_pytorch" -> "Honlan/DMT"
"wtjiang98/BeautyGAN_pytorch" -> "Snowfallingplum/SSAT"
"wtjiang98/BeautyGAN_pytorch" -> "makeuptransfer/SCGAN"
"wtjiang98/BeautyGAN_pytorch" -> "huangzhikun1995/IPM-Net" ["e"=1]
"wtjiang98/BeautyGAN_pytorch" -> "thaoshibe/awesome-makeup-transfer"
"wtjiang98/BeautyGAN_pytorch" -> "ssarfraz/SPL"
"wtjiang98/BeautyGAN_pytorch" -> "baldFemale/MakeupEmbeddingGAN-tf-Implement"
"wtjiang98/PSGAN" -> "wtjiang98/BeautyGAN_pytorch"
"wtjiang98/PSGAN" -> "VinAIResearch/CPM"
"wtjiang98/PSGAN" -> "Honlan/BeautyGAN"
"wtjiang98/PSGAN" -> "wangguanzhi/LADN"
"wtjiang98/PSGAN" -> "Honlan/DMT"
"wtjiang98/PSGAN" -> "huangzhikun1995/IPM-Net" ["e"=1]
"wtjiang98/PSGAN" -> "zllrunning/face-parsing.PyTorch"
"wtjiang98/PSGAN" -> "makeuptransfer/SCGAN"
"wtjiang98/PSGAN" -> "ZPdesu/SEAN"
"wtjiang98/PSGAN" -> "zllrunning/face-makeup.PyTorch"
"wtjiang98/PSGAN" -> "switchablenorms/CelebAMask-HQ"
"wtjiang98/PSGAN" -> "thaoshibe/awesome-makeup-transfer"
"wtjiang98/PSGAN" -> "microsoft/CoCosNet" ["e"=1]
"wtjiang98/PSGAN" -> "genforce/interfacegan"
"wtjiang98/PSGAN" -> "Hangz-nju-cuhk/Rotate-and-Render" ["e"=1]
"JizhiziLi/GFM" -> "JizhiziLi/P3M"
"JizhiziLi/GFM" -> "JizhiziLi/AIM"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"JizhiziLi/GFM" -> "JizhiziLi/RIM"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTAE-VSA"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTAE-Transformer"
"JizhiziLi/GFM" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTDet"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"JizhiziLi/GFM" -> "ViTAE-Transformer/ViTPose"
"JizhiziLi/GFM" -> "michaelowenliu/awesome-image-matting"
"JizhiziLi/GFM" -> "nowsyn/SIM"
"JizhiziLi/GFM" -> "yucornetto/MGMatting"
"JizhiziLi/GFM" -> "webtoon/matteformer"
"orpatashnik/StyleCLIP" -> "omertov/encoder4editing"
"orpatashnik/StyleCLIP" -> "rosinality/stylegan2-pytorch"
"orpatashnik/StyleCLIP" -> "eladrich/pixel2style2pixel"
"orpatashnik/StyleCLIP" -> "rinongal/StyleGAN-nada"
"orpatashnik/StyleCLIP" -> "NVlabs/stylegan2-ada-pytorch"
"orpatashnik/StyleCLIP" -> "yuval-alaluf/restyle-encoder"
"orpatashnik/StyleCLIP" -> "danielroich/PTI"
"orpatashnik/StyleCLIP" -> "RameenAbdal/StyleFlow"
"orpatashnik/StyleCLIP" -> "CompVis/taming-transformers" ["e"=1]
"orpatashnik/StyleCLIP" -> "NVlabs/stylegan3"
"orpatashnik/StyleCLIP" -> "openai/glide-text2im" ["e"=1]
"orpatashnik/StyleCLIP" -> "lucidrains/DALLE-pytorch" ["e"=1]
"orpatashnik/StyleCLIP" -> "yuval-alaluf/stylegan3-editing"
"orpatashnik/StyleCLIP" -> "yuval-alaluf/hyperstyle"
"orpatashnik/StyleCLIP" -> "harskish/ganspace"
"alexjc/neural-doodle" -> "jcjohnson/neural-style"
"alexjc/neural-doodle" -> "awentzonline/image-analogies"
"alexjc/neural-doodle" -> "alexjc/neural-enhance"
"alexjc/neural-doodle" -> "pavelgonchar/colornet"
"alexjc/neural-doodle" -> "luanfujun/deep-photo-styletransfer"
"alexjc/neural-doodle" -> "lengstrom/fast-style-transfer"
"alexjc/neural-doodle" -> "tensorflow/magenta"
"alexjc/neural-doodle" -> "google/deepdream"
"alexjc/neural-doodle" -> "fchollet/keras" ["e"=1]
"alexjc/neural-doodle" -> "anishathalye/neural-style"
"alexjc/neural-doodle" -> "jcjohnson/fast-neural-style"
"alexjc/neural-doodle" -> "phillipi/pix2pix"
"alexjc/neural-doodle" -> "junyanz/CycleGAN"
"alexjc/neural-doodle" -> "ryankiros/neural-storyteller"
"alexjc/neural-doodle" -> "tflearn/tflearn" ["e"=1]
"genforce/sefa" -> "genforce/interfacegan"
"genforce/sefa" -> "genforce/genforce"
"genforce/sefa" -> "omertov/encoder4editing"
"genforce/sefa" -> "genforce/idinvert"
"genforce/sefa" -> "rosinality/stylegan2-pytorch"
"genforce/sefa" -> "genforce/idinvert_pytorch"
"genforce/sefa" -> "harskish/ganspace"
"genforce/sefa" -> "danielroich/PTI"
"genforce/sefa" -> "weihaox/awesome-gan-inversion"
"genforce/sefa" -> "ZPdesu/SEAN"
"genforce/sefa" -> "anvoynov/GANLatentDiscovery"
"genforce/sefa" -> "yuval-alaluf/restyle-encoder"
"genforce/sefa" -> "eladrich/pixel2style2pixel"
"genforce/sefa" -> "rinongal/StyleGAN-nada"
"genforce/sefa" -> "imlixinyang/HiSD"
"foamliu/Deep-Image-Matting-PyTorch" -> "Yaoyi-Li/GCA-Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "foamliu/Deep-Image-Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "MarcoForte/FBA_Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "lizhengwei1992/Semantic_Human_Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "huochaitiantang/pytorch-deep-image-matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "poppinace/indexnet_matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "yunkezhang/FusionMatting"
"foamliu/Deep-Image-Matting-PyTorch" -> "aisegmentcn/matting_human_datasets"
"foamliu/Deep-Image-Matting-PyTorch" -> "wukaoliu/CVPR2020-HAttMatting"
"foamliu/Deep-Image-Matting-PyTorch" -> "nowsyn/SIM"
"foamliu/Deep-Image-Matting-PyTorch" -> "lnugraha/trimap_generator"
"foamliu/Deep-Image-Matting-PyTorch" -> "pymatting/pymatting"
"foamliu/Deep-Image-Matting-PyTorch" -> "hqqxyy/Context-Aware-Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "wchstrife/Awesome-Image-Matting"
"foamliu/Deep-Image-Matting-PyTorch" -> "yucornetto/MGMatting"
"pymatting/pymatting" -> "foamliu/Deep-Image-Matting-PyTorch"
"pymatting/pymatting" -> "MarcoForte/FBA_Matting"
"pymatting/pymatting" -> "Yaoyi-Li/GCA-Matting"
"pymatting/pymatting" -> "senguptaumd/Background-Matting"
"pymatting/pymatting" -> "wukaoliu/CVPR2020-HAttMatting"
"pymatting/pymatting" -> "lizhengwei1992/Semantic_Human_Matting"
"pymatting/pymatting" -> "ZHKKKe/MODNet"
"pymatting/pymatting" -> "poppinace/indexnet_matting"
"pymatting/pymatting" -> "aisegmentcn/matting_human_datasets"
"pymatting/pymatting" -> "xuebinqin/U-2-Net"
"pymatting/pymatting" -> "yunkezhang/FusionMatting"
"pymatting/pymatting" -> "MarcoForte/closed-form-matting"
"pymatting/pymatting" -> "foamliu/Deep-Image-Matting"
"pymatting/pymatting" -> "nowsyn/SIM"
"pymatting/pymatting" -> "JizhiziLi/animal-matting"
"cyrildiagne/ar-cutpaste" -> "yemount/pose-animator"
"cyrildiagne/ar-cutpaste" -> "alievk/avatarify"
"cyrildiagne/ar-cutpaste" -> "vt-vl-lab/3d-photo-inpainting"
"cyrildiagne/ar-cutpaste" -> "NathanUA/U-2-Net"
"cyrildiagne/ar-cutpaste" -> "google/mediapipe" ["e"=1]
"cyrildiagne/ar-cutpaste" -> "facebookresearch/pifuhd"
"cyrildiagne/ar-cutpaste" -> "jantic/DeOldify"
"cyrildiagne/ar-cutpaste" -> "CorentinJ/Real-Time-Voice-Cloning"
"cyrildiagne/ar-cutpaste" -> "iperov/DeepFaceLab"
"cyrildiagne/ar-cutpaste" -> "AliaksandrSiarohin/first-order-model"
"cyrildiagne/ar-cutpaste" -> "tensorflow/tfjs-models" ["e"=1]
"cyrildiagne/ar-cutpaste" -> "senguptaumd/Background-Matting"
"cyrildiagne/ar-cutpaste" -> "jasonmayes/Real-Time-Person-Removal"
"cyrildiagne/ar-cutpaste" -> "cyrildiagne/basnet-http" ["e"=1]
"cyrildiagne/ar-cutpaste" -> "willmcgugan/rich" ["e"=1]
"iPERDance/iPERCore" -> "svip-lab/impersonator"
"iPERDance/iPERCore" -> "snap-research/articulated-animation" ["e"=1]
"iPERDance/iPERCore" -> "orpatashnik/StyleCLIP"
"iPERDance/iPERCore" -> "NVlabs/few-shot-vid2vid"
"iPERDance/iPERCore" -> "jiupinjia/SkyAR"
"iPERDance/iPERCore" -> "NVlabs/imaginaire"
"iPERDance/iPERCore" -> "eladrich/pixel2style2pixel"
"iPERDance/iPERCore" -> "ZHKKKe/MODNet"
"iPERDance/iPERCore" -> "jiupinjia/stylized-neural-painting"
"iPERDance/iPERCore" -> "carolineec/EverybodyDanceNow" ["e"=1]
"iPERDance/iPERCore" -> "Kenzie-Academy-Brasil/portfolio-start-sua-carreira" ["e"=1]
"iPERDance/iPERCore" -> "RameenAbdal/StyleFlow"
"iPERDance/iPERCore" -> "Rudrabha/Wav2Lip" ["e"=1]
"iPERDance/iPERCore" -> "neuralchen/SimSwap" ["e"=1]
"iPERDance/iPERCore" -> "vt-vl-lab/FGVC" ["e"=1]
"BurguerJohn/Dain-App" -> "hzwer/arXiv2020-RIFE"
"BurguerJohn/Dain-App" -> "nihui/dain-ncnn-vulkan" ["e"=1]
"BurguerJohn/Dain-App" -> "baowenbo/DAIN"
"BurguerJohn/Dain-App" -> "nihui/rife-ncnn-vulkan" ["e"=1]
"BurguerJohn/Dain-App" -> "n00mkrad/flowframes" ["e"=1]
"BurguerJohn/Dain-App" -> "Justin62628/Squirrel-RIFE" ["e"=1]
"BurguerJohn/Dain-App" -> "YiWeiHuang-stack/Squirrel-RIFE"
"BurguerJohn/Dain-App" -> "megvii-research/ECCV2022-RIFE" ["e"=1]
"BurguerJohn/Dain-App" -> "n00mkrad/cupscale" ["e"=1]
"BurguerJohn/Dain-App" -> "tarun005/FLAVR" ["e"=1]
"BurguerJohn/Dain-App" -> "TianZerL/Anime4KCPP" ["e"=1]
"BurguerJohn/Dain-App" -> "BurguerJohn/FlowBlur-App"
"BurguerJohn/Dain-App" -> "k4yt3x/video2x" ["e"=1]
"BurguerJohn/Dain-App" -> "google-research/frame-interpolation" ["e"=1]
"BurguerJohn/Dain-App" -> "nihui/waifu2x-ncnn-vulkan" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "baowenbo/DAIN"
"hzwer/arXiv2020-RIFE" -> "n00mkrad/flowframes" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "nihui/rife-ncnn-vulkan" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "sniklaus/softmax-splatting" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "tarun005/FLAVR" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "myungsub/CAIN" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "YiWeiHuang-stack/Squirrel-RIFE"
"hzwer/arXiv2020-RIFE" -> "BurguerJohn/Dain-App"
"hzwer/arXiv2020-RIFE" -> "hzwer/Practical-RIFE" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "princeton-vl/RAFT" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "avinashpaliwal/Super-SloMo"
"hzwer/arXiv2020-RIFE" -> "lisiyao21/AnimeInterp" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "xinntao/EDVR" ["e"=1]
"hzwer/arXiv2020-RIFE" -> "nihui/dain-ncnn-vulkan" ["e"=1]
"goodfeli/adversarial" -> "carpedm20/DCGAN-tensorflow"
"goodfeli/adversarial" -> "zhangqianhui/AdversarialNetsPapers"
"goodfeli/adversarial" -> "martinarjovsky/WassersteinGAN"
"goodfeli/adversarial" -> "openai/improved-gan"
"goodfeli/adversarial" -> "Newmu/dcgan_code"
"goodfeli/adversarial" -> "wiseodd/generative-models"
"goodfeli/adversarial" -> "soumith/ganhacks"
"goodfeli/adversarial" -> "igul222/improved_wgan_training"
"goodfeli/adversarial" -> "hindupuravinash/the-gan-zoo"
"goodfeli/adversarial" -> "KaimingHe/deep-residual-networks" ["e"=1]
"goodfeli/adversarial" -> "phillipi/pix2pix"
"goodfeli/adversarial" -> "nightrome/really-awesome-gan"
"goodfeli/adversarial" -> "soumith/dcgan.torch"
"goodfeli/adversarial" -> "liuzhuang13/DenseNet" ["e"=1]
"goodfeli/adversarial" -> "tkarras/progressive_growing_of_gans"
"avinashpaliwal/Super-SloMo" -> "baowenbo/DAIN"
"avinashpaliwal/Super-SloMo" -> "xinntao/EDVR" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "hzwer/arXiv2020-RIFE"
"avinashpaliwal/Super-SloMo" -> "sniklaus/pytorch-sepconv" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "NVlabs/PWC-Net" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "NVIDIA/flownet2-pytorch" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "sniklaus/sepconv-slomo" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "sniklaus/softmax-splatting" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "xinntao/ESRGAN" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "princeton-vl/RAFT" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "sniklaus/pytorch-pwc" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "thstkdgus35/EDSR-PyTorch" ["e"=1]
"avinashpaliwal/Super-SloMo" -> "NVIDIA/vid2vid"
"avinashpaliwal/Super-SloMo" -> "xinntao/BasicSR" ["e"=1]
"bryandlee/animegan2-pytorch" -> "TachibanaYoshino/AnimeGANv2"
"bryandlee/animegan2-pytorch" -> "TachibanaYoshino/AnimeGANv3"
"bryandlee/animegan2-pytorch" -> "TachibanaYoshino/AnimeGAN"
"bryandlee/animegan2-pytorch" -> "mchong6/JoJoGAN"
"bryandlee/animegan2-pytorch" -> "williamyang1991/DualStyleGAN"
"bryandlee/animegan2-pytorch" -> "minivision-ai/photo2cartoon"
"bryandlee/animegan2-pytorch" -> "eladrich/pixel2style2pixel"
"bryandlee/animegan2-pytorch" -> "SystemErrorWang/White-box-Cartoonization"
"bryandlee/animegan2-pytorch" -> "rosinality/stylegan2-pytorch"
"bryandlee/animegan2-pytorch" -> "saic-mdal/lama"
"bryandlee/animegan2-pytorch" -> "NVlabs/stylegan3"
"bryandlee/animegan2-pytorch" -> "orpatashnik/StyleCLIP"
"bryandlee/animegan2-pytorch" -> "Sxela/ArcaneGAN"
"bryandlee/animegan2-pytorch" -> "yangxy/GPEN"
"bryandlee/animegan2-pytorch" -> "PeterL1n/RobustVideoMatting"
"AlexiaJM/RelativisticGAN" -> "pfnet-research/sngan_projection"
"AlexiaJM/RelativisticGAN" -> "LMescheder/GAN_stability"
"AlexiaJM/RelativisticGAN" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"AlexiaJM/RelativisticGAN" -> "akanimax/BMSG-GAN"
"AlexiaJM/RelativisticGAN" -> "google/compare_gan"
"AlexiaJM/RelativisticGAN" -> "bioinf-jku/TTUR"
"AlexiaJM/RelativisticGAN" -> "NVlabs/MUNIT"
"AlexiaJM/RelativisticGAN" -> "junyanz/BicycleGAN"
"AlexiaJM/RelativisticGAN" -> "HsinYingLee/DRIT"
"AlexiaJM/RelativisticGAN" -> "godisboy/SN-GAN"
"AlexiaJM/RelativisticGAN" -> "roimehrez/contextualLoss" ["e"=1]
"AlexiaJM/RelativisticGAN" -> "AlexiaJM/relativistic-f-divergences"
"AlexiaJM/RelativisticGAN" -> "heykeetae/Self-Attention-GAN"
"AlexiaJM/RelativisticGAN" -> "caogang/wgan-gp"
"AlexiaJM/RelativisticGAN" -> "mseitzer/pytorch-fid"
"bamos/dcgan-completion.tensorflow" -> "carpedm20/DCGAN-tensorflow"
"bamos/dcgan-completion.tensorflow" -> "pathak22/context-encoder" ["e"=1]
"bamos/dcgan-completion.tensorflow" -> "Newmu/dcgan_code"
"bamos/dcgan-completion.tensorflow" -> "carpedm20/BEGAN-tensorflow"
"bamos/dcgan-completion.tensorflow" -> "openai/improved-gan"
"bamos/dcgan-completion.tensorflow" -> "jacobgil/keras-dcgan"
"bamos/dcgan-completion.tensorflow" -> "soumith/dcgan.torch"
"bamos/dcgan-completion.tensorflow" -> "moodoki/semantic_image_inpainting" ["e"=1]
"bamos/dcgan-completion.tensorflow" -> "affinelayer/pix2pix-tensorflow"
"bamos/dcgan-completion.tensorflow" -> "hanzhanggit/StackGAN"
"bamos/dcgan-completion.tensorflow" -> "jazzsaxmafia/Inpainting" ["e"=1]
"bamos/dcgan-completion.tensorflow" -> "paarthneekhara/text-to-image"
"bamos/dcgan-completion.tensorflow" -> "igul222/improved_wgan_training"
"bamos/dcgan-completion.tensorflow" -> "junyanz/iGAN"
"bamos/dcgan-completion.tensorflow" -> "leehomyc/Faster-High-Res-Neural-Inpainting" ["e"=1]
"bioinf-jku/SNNs" -> "shaohua0116/Activation-Visualization-Histogram"
"bioinf-jku/SNNs" -> "kimhc6028/relational-networks" ["e"=1]
"bioinf-jku/SNNs" -> "deepmind/dnc" ["e"=1]
"bioinf-jku/SNNs" -> "lanpa/tensorboard-pytorch" ["e"=1]
"bioinf-jku/SNNs" -> "taolei87/sru" ["e"=1]
"bioinf-jku/SNNs" -> "deepmind/learning-to-learn" ["e"=1]
"bioinf-jku/SNNs" -> "ppwwyyxx/tensorpack" ["e"=1]
"bioinf-jku/SNNs" -> "pauli-space/foundations_for_deep_learning" ["e"=1]
"bioinf-jku/SNNs" -> "openai/pixel-cnn"
"bioinf-jku/SNNs" -> "openai/improved-gan"
"bioinf-jku/SNNs" -> "martinarjovsky/WassersteinGAN"
"bioinf-jku/SNNs" -> "chiphuyen/tf-stanford-tutorials" ["e"=1]
"bioinf-jku/SNNs" -> "williamFalcon/DeepRLHacks" ["e"=1]
"bioinf-jku/SNNs" -> "salesforce/pytorch-qrnn" ["e"=1]
"bioinf-jku/SNNs" -> "matthiasplappert/keras-rl" ["e"=1]
"coupriec/VideoPredictionICLR2016" -> "dyelax/Adversarial_Video_Generation"
"coupriec/VideoPredictionICLR2016" -> "rubenvillegas/iclr2017mcnet"
"coupriec/VideoPredictionICLR2016" -> "edenton/drnet"
"dyelax/Adversarial_Video_Generation" -> "coupriec/VideoPredictionICLR2016"
"dyelax/Adversarial_Video_Generation" -> "coxlab/prednet"
"dyelax/Adversarial_Video_Generation" -> "alexlee-gk/video_prediction"
"dyelax/Adversarial_Video_Generation" -> "cvondrick/videogan"
"dyelax/Adversarial_Video_Generation" -> "rubenvillegas/iclr2017mcnet"
"dyelax/Adversarial_Video_Generation" -> "alokwhitewolf/Video-frame-prediction-by-multi-scale-GAN"
"dyelax/Adversarial_Video_Generation" -> "carpedm20/pixel-rnn-tensorflow"
"dyelax/Adversarial_Video_Generation" -> "openai/InfoGAN"
"dyelax/Adversarial_Video_Generation" -> "reedscot/icml2016"
"dyelax/Adversarial_Video_Generation" -> "sergeytulyakov/mocogan"
"dyelax/Adversarial_Video_Generation" -> "openai/pixel-cnn"
"dyelax/Adversarial_Video_Generation" -> "openai/improved-gan"
"dyelax/Adversarial_Video_Generation" -> "emansim/text2image"
"dyelax/Adversarial_Video_Generation" -> "junhyukoh/nips2015-action-conditional-video-prediction"
"dyelax/Adversarial_Video_Generation" -> "emansim/unsupervised-videos"
"google/compare_gan" -> "ajbrock/BigGAN-PyTorch"
"google/compare_gan" -> "pfnet-research/sngan_projection"
"google/compare_gan" -> "bioinf-jku/TTUR"
"google/compare_gan" -> "hwalsuklee/tensorflow-generative-model-collections"
"google/compare_gan" -> "heykeetae/Self-Attention-GAN"
"google/compare_gan" -> "facebookresearch/pytorch_GAN_zoo"
"google/compare_gan" -> "igul222/improved_wgan_training"
"google/compare_gan" -> "LMescheder/GAN_stability"
"google/compare_gan" -> "openai/improved-gan"
"google/compare_gan" -> "mseitzer/pytorch-fid"
"google/compare_gan" -> "openai/glow"
"google/compare_gan" -> "tkarras/progressive_growing_of_gans"
"google/compare_gan" -> "znxlwm/pytorch-generative-model-collections"
"google/compare_gan" -> "brain-research/self-attention-gan"
"google/compare_gan" -> "CSAILVision/gandissect"
"jcjohnson/fast-neural-style" -> "lengstrom/fast-style-transfer"
"jcjohnson/fast-neural-style" -> "DmitryUlyanov/texture_nets"
"jcjohnson/fast-neural-style" -> "jcjohnson/neural-style"
"jcjohnson/fast-neural-style" -> "anishathalye/neural-style"
"jcjohnson/fast-neural-style" -> "cysmith/neural-style-tf"
"jcjohnson/fast-neural-style" -> "ycjing/Neural-Style-Transfer-Papers"
"jcjohnson/fast-neural-style" -> "xunhuang1995/AdaIN-style"
"jcjohnson/fast-neural-style" -> "junyanz/CycleGAN"
"jcjohnson/fast-neural-style" -> "phillipi/pix2pix"
"jcjohnson/fast-neural-style" -> "manuelruder/artistic-videos"
"jcjohnson/fast-neural-style" -> "titu1994/Neural-Style-Transfer"
"jcjohnson/fast-neural-style" -> "yusuketomoto/chainer-fast-neuralstyle"
"jcjohnson/fast-neural-style" -> "luanfujun/deep-photo-styletransfer"
"jcjohnson/fast-neural-style" -> "tkarras/progressive_growing_of_gans"
"jcjohnson/fast-neural-style" -> "Newmu/dcgan_code"
"sergeytulyakov/mocogan" -> "DLHacks/mocogan"
"sergeytulyakov/mocogan" -> "snap-research/MoCoGAN-HD" ["e"=1]
"sergeytulyakov/mocogan" -> "alexlee-gk/video_prediction"
"sergeytulyakov/mocogan" -> "pfnet-research/tgan"
"sergeytulyakov/mocogan" -> "AliaksandrSiarohin/monkey-net" ["e"=1]
"sergeytulyakov/mocogan" -> "edenton/svg"
"sergeytulyakov/mocogan" -> "universome/stylegan-v" ["e"=1]
"sergeytulyakov/mocogan" -> "balakg/posewarp-cvpr2018" ["e"=1]
"sergeytulyakov/mocogan" -> "cvondrick/videogan"
"sergeytulyakov/mocogan" -> "rubenvillegas/icml2017hierchvid"
"sergeytulyakov/mocogan" -> "rubenvillegas/iclr2017mcnet"
"sergeytulyakov/mocogan" -> "pfnet-research/sngan_projection"
"sergeytulyakov/mocogan" -> "bioinf-jku/TTUR"
"sergeytulyakov/mocogan" -> "AliaksandrSiarohin/pose-gan" ["e"=1]
"sergeytulyakov/mocogan" -> "edenton/drnet"
"tdeboissiere/DeepLearningImplementations" -> "jacobgil/keras-dcgan"
"tdeboissiere/DeepLearningImplementations" -> "bstriner/keras-adversarial"
"tdeboissiere/DeepLearningImplementations" -> "titu1994/DenseNet" ["e"=1]
"tdeboissiere/DeepLearningImplementations" -> "liuzhuang13/DenseNet" ["e"=1]
"tdeboissiere/DeepLearningImplementations" -> "martinarjovsky/WassersteinGAN"
"tdeboissiere/DeepLearningImplementations" -> "affinelayer/pix2pix-tensorflow"
"tdeboissiere/DeepLearningImplementations" -> "igul222/improved_wgan_training"
"tdeboissiere/DeepLearningImplementations" -> "fchollet/keras-resources" ["e"=1]
"tdeboissiere/DeepLearningImplementations" -> "yenchenlin/pix2pix-tensorflow"
"tdeboissiere/DeepLearningImplementations" -> "raghakot/keras-vis" ["e"=1]
"tdeboissiere/DeepLearningImplementations" -> "openai/improved-gan"
"tdeboissiere/DeepLearningImplementations" -> "ppwwyyxx/tensorpack" ["e"=1]
"tdeboissiere/DeepLearningImplementations" -> "openai/InfoGAN"
"tdeboissiere/DeepLearningImplementations" -> "wiseodd/generative-models"
"tdeboissiere/DeepLearningImplementations" -> "raghakot/keras-resnet" ["e"=1]
"xhujoy/CycleGAN-tensorflow" -> "vanhuyz/CycleGAN-TensorFlow"
"xhujoy/CycleGAN-tensorflow" -> "architrathore/CycleGAN"
"xhujoy/CycleGAN-tensorflow" -> "yenchenlin/pix2pix-tensorflow"
"xhujoy/CycleGAN-tensorflow" -> "leehomyc/cyclegan-1"
"xhujoy/CycleGAN-tensorflow" -> "hardikbansal/CycleGAN"
"xhujoy/CycleGAN-tensorflow" -> "JoinWei-PKU/PTGAN" ["e"=1]
"xhujoy/CycleGAN-tensorflow" -> "LynnHo/CycleGAN-Tensorflow-2"
"xhujoy/CycleGAN-tensorflow" -> "taki0112/Self-Attention-GAN-Tensorflow"
"xhujoy/CycleGAN-tensorflow" -> "LynnHo/CycleGAN-Tensorflow-PyTorch"
"xhujoy/CycleGAN-tensorflow" -> "taki0112/MUNIT-Tensorflow"
"xhujoy/CycleGAN-tensorflow" -> "carpedm20/BEGAN-tensorflow"
"xhujoy/CycleGAN-tensorflow" -> "taki0112/StarGAN-Tensorflow"
"xhujoy/CycleGAN-tensorflow" -> "luoxier/CycleGAN_Tensorlayer"
"xhujoy/CycleGAN-tensorflow" -> "openai/improved-gan"
"xhujoy/CycleGAN-tensorflow" -> "igul222/improved_wgan_training"
"xinario/SAGAN" -> "houguanqun/Low-Dose-CT-denoising"
"xinario/SAGAN" -> "eunh/low_dose_CT"
"xinario/SAGAN" -> "hyeongyuy/CT-WGAN_VGG_tensorflow"
"xinario/SAGAN" -> "SSinyu/WGAN_VGG"
"xinario/SAGAN" -> "hmshan/CPCE-3D"
"xinario/SAGAN" -> "SSinyu/CT-Denoising-Review"
"xinario/SAGAN" -> "SSinyu/RED_CNN"
"dvschultz/stylegan2" -> "dvschultz/ai"
"tugstugi/dl-colab-notebooks" -> "firmai/awesome-google-colab"
"tugstugi/dl-colab-notebooks" -> "mrm8488/shared_colab_notebooks"
"tugstugi/dl-colab-notebooks" -> "dvschultz/ml-art-colabs"
"tugstugi/dl-colab-notebooks" -> "amrzv/awesome-colab-notebooks"
"tugstugi/dl-colab-notebooks" -> "justinpinkney/awesome-pretrained-stylegan2"
"tugstugi/dl-colab-notebooks" -> "chervonij/DFL-Colab" ["e"=1]
"tugstugi/dl-colab-notebooks" -> "sgrvinod/Deep-Tutorials-for-PyTorch" ["e"=1]
"tugstugi/dl-colab-notebooks" -> "harskish/ganspace"
"tugstugi/dl-colab-notebooks" -> "dvschultz/ai"
"tugstugi/dl-colab-notebooks" -> "facebookresearch/VideoPose3D" ["e"=1]
"tugstugi/dl-colab-notebooks" -> "NVlabs/imaginaire"
"tugstugi/dl-colab-notebooks" -> "resemble-ai/Resemblyzer" ["e"=1]
"tugstugi/dl-colab-notebooks" -> "dvschultz/dataset-tools"
"tugstugi/dl-colab-notebooks" -> "NVlabs/few-shot-vid2vid"
"tugstugi/dl-colab-notebooks" -> "svip-lab/impersonator"
"taki0112/UGATIT" -> "znxlwm/UGATIT-pytorch"
"taki0112/UGATIT" -> "NVlabs/stylegan"
"taki0112/UGATIT" -> "lllyasviel/style2paints" ["e"=1]
"taki0112/UGATIT" -> "NVlabs/stylegan2"
"taki0112/UGATIT" -> "minivision-ai/photo2cartoon"
"taki0112/UGATIT" -> "SystemErrorWang/White-box-Cartoonization"
"taki0112/UGATIT" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"taki0112/UGATIT" -> "clovaai/stargan-v2"
"taki0112/UGATIT" -> "NVlabs/SPADE"
"taki0112/UGATIT" -> "bloc97/Anime4K" ["e"=1]
"taki0112/UGATIT" -> "tamarott/SinGAN"
"taki0112/UGATIT" -> "NVIDIA/pix2pixHD"
"taki0112/UGATIT" -> "TachibanaYoshino/AnimeGAN"
"taki0112/UGATIT" -> "podgorskiy/ALAE"
"taki0112/UGATIT" -> "NVlabs/FUNIT"
"generative-intelligence-lab/modelverse" -> "adobe-research/sam_inversion"
"generative-intelligence-lab/modelverse" -> "nupurkmr9/vision-aided-gan"
"generative-intelligence-lab/modelverse" -> "PeterWang512/GANWarping"
"generative-intelligence-lab/modelverse" -> "lmxyy/sige"
"svip-lab/impersonator" -> "NVlabs/few-shot-vid2vid"
"svip-lab/impersonator" -> "tengteng95/Pose-Transfer" ["e"=1]
"svip-lab/impersonator" -> "iPERDance/iPERCore"
"svip-lab/impersonator" -> "RenYurui/Global-Flow-Local-Attention" ["e"=1]
"svip-lab/impersonator" -> "CUHKSZ-TQL/EverybodyDanceNow_reproduce_pytorch" ["e"=1]
"svip-lab/impersonator" -> "carolineec/EverybodyDanceNow" ["e"=1]
"svip-lab/impersonator" -> "menyifang/ADGAN" ["e"=1]
"svip-lab/impersonator" -> "snap-research/articulated-animation" ["e"=1]
"svip-lab/impersonator" -> "apchenstu/Facial_Details_Synthesis" ["e"=1]
"svip-lab/impersonator" -> "daniilidis-group/neural_renderer" ["e"=1]
"svip-lab/impersonator" -> "switchablenorms/CelebAMask-HQ"
"svip-lab/impersonator" -> "Lotayou/everybody_dance_now_pytorch" ["e"=1]
"svip-lab/impersonator" -> "AliaksandrSiarohin/monkey-net" ["e"=1]
"svip-lab/impersonator" -> "vchoutas/smplify-x" ["e"=1]
"svip-lab/impersonator" -> "ly015/intrinsic_flow" ["e"=1]
"kesara/deepdreamer" -> "samim23/DeepDreamAnim"
"QuantumLiu/AIMakeup" -> "PerpetualSmile/BeautyCamera"
"QuantumLiu/AIMakeup" -> "Honlan/BeautyGAN"
"tg-bomze/Face-Depixelizer" -> "adamian98/pulse"
"tg-bomze/Face-Depixelizer" -> "tg-bomze/Face-Image-Motion-Model"
"tg-bomze/Face-Depixelizer" -> "harskish/ganspace"
"tg-bomze/Face-Depixelizer" -> "tg-bomze/StyleGAN2-Face-Modificator"
"tg-bomze/Face-Depixelizer" -> "vt-vl-lab/3d-photo-inpainting"
"tg-bomze/Face-Depixelizer" -> "facebookresearch/pifuhd"
"tg-bomze/Face-Depixelizer" -> "SystemErrorWang/White-box-Cartoonization"
"tg-bomze/Face-Depixelizer" -> "anopara/genetic-drawing"
"tg-bomze/Face-Depixelizer" -> "alievk/avatarify"
"tg-bomze/Face-Depixelizer" -> "EvgenyKashin/stylegan2-distillation"
"tg-bomze/Face-Depixelizer" -> "eladrich/pixel2style2pixel"
"tg-bomze/Face-Depixelizer" -> "yuval-alaluf/restyle-encoder"
"tg-bomze/Face-Depixelizer" -> "NathanUA/U-2-Net"
"tg-bomze/Face-Depixelizer" -> "NVlabs/stylegan2-ada"
"tg-bomze/Face-Depixelizer" -> "shunsukesaito/PIFu" ["e"=1]
"thenewboston-developers/Website" -> "thenewboston-developers/Account-Manager"
"thenewboston-developers/Website" -> "thenewboston-developers/thenewboston-python"
"thenewboston-developers/Website" -> "thenewboston-developers/Website-API"
"thenewboston-developers/Website" -> "thenewboston-developers/Bank"
"thenewboston-developers/Website" -> "thenewboston-developers/Payment-Processor"
"thenewboston-developers/Website" -> "thenewboston-developers/Validator"
"thenewboston-developers/Website" -> "cmu-snap/pigasus"
"thenewboston-developers/Website" -> "thenewboston-developers/Project-Proposals"
"thenewboston-developers/Website" -> "thenewboston-developers/thenewboston-js"
"thenewboston-developers/Website" -> "thenewboston-developers/thenewboston-python-client"
"thenewboston-developers/Website" -> "lightspin-tech/red-kube"
"thenewboston-developers/Website" -> "thenewboston-developers/Developer-Portal"
"thenewboston-developers/Website" -> "cjph8914/2020_benfords"
"thenewboston-developers/Website" -> "appbrewery/100-days-of-python"
"thenewboston-developers/Website" -> "thenewboston-developers/Kotlin-SDK"
"MingSun-Tse/Collaborative-Distillation" -> "GlebBrykin/SANET"
"MingSun-Tse/Collaborative-Distillation" -> "czczup/URST"
"MingSun-Tse/Collaborative-Distillation" -> "irasin/Pytorch_WCT"
"MingSun-Tse/Collaborative-Distillation" -> "JianqiangRen/AAMS"
"naoto0804/pytorch-AdaIN" -> "xunhuang1995/AdaIN-style"
"naoto0804/pytorch-AdaIN" -> "sunshineatnoon/PytorchWCT"
"naoto0804/pytorch-AdaIN" -> "clovaai/WCT2"
"naoto0804/pytorch-AdaIN" -> "sunshineatnoon/LinearStyleTransfer"
"naoto0804/pytorch-AdaIN" -> "tomguluson92/StyleGAN_PyTorch"
"naoto0804/pytorch-AdaIN" -> "irasin/Pytorch_AdaIN"
"naoto0804/pytorch-AdaIN" -> "NVlabs/MUNIT"
"naoto0804/pytorch-AdaIN" -> "rosinality/style-based-gan-pytorch"
"naoto0804/pytorch-AdaIN" -> "HsinYingLee/DRIT"
"naoto0804/pytorch-AdaIN" -> "rosinality/stylegan2-pytorch"
"naoto0804/pytorch-AdaIN" -> "rgeirhos/Stylized-ImageNet" ["e"=1]
"naoto0804/pytorch-AdaIN" -> "ycjing/Neural-Style-Transfer-Papers"
"naoto0804/pytorch-AdaIN" -> "mseitzer/pytorch-fid"
"naoto0804/pytorch-AdaIN" -> "NVlabs/FUNIT"
"naoto0804/pytorch-AdaIN" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"justinpinkney/awesome-pretrained-stylegan2" -> "justinpinkney/awesome-pretrained-stylegan"
"justinpinkney/awesome-pretrained-stylegan2" -> "justinpinkney/awesome-pretrained-stylegan3"
"justinpinkney/awesome-pretrained-stylegan2" -> "rosinality/stylegan2-pytorch"
"justinpinkney/awesome-pretrained-stylegan2" -> "harskish/ganspace"
"justinpinkney/awesome-pretrained-stylegan2" -> "omertov/encoder4editing"
"justinpinkney/awesome-pretrained-stylegan2" -> "eladrich/pixel2style2pixel"
"justinpinkney/awesome-pretrained-stylegan2" -> "dvschultz/ml-art-colabs"
"justinpinkney/awesome-pretrained-stylegan2" -> "NVlabs/stylegan2-ada-pytorch"
"justinpinkney/awesome-pretrained-stylegan2" -> "justinpinkney/stylegan2"
"justinpinkney/awesome-pretrained-stylegan2" -> "NVlabs/stylegan2-ada"
"justinpinkney/awesome-pretrained-stylegan2" -> "EvgenyKashin/stylegan2-distillation"
"justinpinkney/awesome-pretrained-stylegan2" -> "mikaelalafriz/lucid-sonic-dreams"
"justinpinkney/awesome-pretrained-stylegan2" -> "weihaox/awesome-gan-inversion"
"justinpinkney/awesome-pretrained-stylegan2" -> "yuval-alaluf/restyle-encoder"
"justinpinkney/awesome-pretrained-stylegan2" -> "orpatashnik/StyleCLIP"
"cysmith/neural-style-tf" -> "anishathalye/neural-style"
"cysmith/neural-style-tf" -> "lengstrom/fast-style-transfer"
"cysmith/neural-style-tf" -> "jcjohnson/fast-neural-style"
"cysmith/neural-style-tf" -> "titu1994/Neural-Style-Transfer"
"cysmith/neural-style-tf" -> "manuelruder/artistic-videos"
"cysmith/neural-style-tf" -> "ycjing/Neural-Style-Transfer-Papers"
"cysmith/neural-style-tf" -> "DmitryUlyanov/texture_nets"
"cysmith/neural-style-tf" -> "jcjohnson/neural-style"
"cysmith/neural-style-tf" -> "hzy46/fast-neural-style-tensorflow"
"cysmith/neural-style-tf" -> "LouieYang/deep-photo-styletransfer-tf"
"cysmith/neural-style-tf" -> "msracver/Deep-Image-Analogy"
"cysmith/neural-style-tf" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"cysmith/neural-style-tf" -> "xunhuang1995/AdaIN-style"
"cysmith/neural-style-tf" -> "chuanli11/CNNMRF"
"cysmith/neural-style-tf" -> "junyanz/iGAN"
"lizhengwei1992/Semantic_Human_Matting" -> "aisegmentcn/matting_human_datasets"
"lizhengwei1992/Semantic_Human_Matting" -> "tsing90/pytorch_semantic_human_matting"
"lizhengwei1992/Semantic_Human_Matting" -> "Yaoyi-Li/GCA-Matting"
"lizhengwei1992/Semantic_Human_Matting" -> "foamliu/Deep-Image-Matting"
"lizhengwei1992/Semantic_Human_Matting" -> "takiyu/portrait_matting"
"lizhengwei1992/Semantic_Human_Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"lizhengwei1992/Semantic_Human_Matting" -> "yunkezhang/FusionMatting"
"lizhengwei1992/Semantic_Human_Matting" -> "poppinace/indexnet_matting"
"lizhengwei1992/Semantic_Human_Matting" -> "lizhengwei1992/mobile_phone_human_matting"
"lizhengwei1992/Semantic_Human_Matting" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"lizhengwei1992/Semantic_Human_Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"lizhengwei1992/Semantic_Human_Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"lizhengwei1992/Semantic_Human_Matting" -> "lnugraha/trimap_generator"
"lizhengwei1992/Semantic_Human_Matting" -> "thuyngch/Human-Segmentation-PyTorch"
"lizhengwei1992/Semantic_Human_Matting" -> "PetroWu/AutoPortraitMatting"
"nowsyn/SIM" -> "yucornetto/MGMatting"
"nowsyn/SIM" -> "wchstrife/Awesome-Image-Matting"
"nowsyn/SIM" -> "Yaoyi-Li/GCA-Matting"
"nowsyn/SIM" -> "hqqxyy/Context-Aware-Matting"
"nowsyn/SIM" -> "JizhiziLi/AIM"
"nowsyn/SIM" -> "yunkezhang/TCVOM"
"nowsyn/SIM" -> "kelisiya/TIMI-Net"
"nowsyn/SIM" -> "webtoon/matteformer"
"nowsyn/SIM" -> "MarcoForte/FBA_Matting"
"nowsyn/SIM" -> "michaelowenliu/awesome-image-matting"
"nowsyn/SIM" -> "yunkezhang/FusionMatting"
"nowsyn/SIM" -> "JizhiziLi/GFM"
"nowsyn/SIM" -> "wukaoliu/CVPR2020-HAttMatting"
"nowsyn/SIM" -> "foamliu/Deep-Image-Matting-PyTorch"
"nowsyn/SIM" -> "nowsyn/DVM"
"carpedm20/DCGAN-tensorflow" -> "zhangqianhui/AdversarialNetsPapers"
"carpedm20/DCGAN-tensorflow" -> "Newmu/dcgan_code"
"carpedm20/DCGAN-tensorflow" -> "wiseodd/generative-models"
"carpedm20/DCGAN-tensorflow" -> "soumith/ganhacks"
"carpedm20/DCGAN-tensorflow" -> "openai/improved-gan"
"carpedm20/DCGAN-tensorflow" -> "martinarjovsky/WassersteinGAN"
"carpedm20/DCGAN-tensorflow" -> "igul222/improved_wgan_training"
"carpedm20/DCGAN-tensorflow" -> "hindupuravinash/the-gan-zoo"
"carpedm20/DCGAN-tensorflow" -> "affinelayer/pix2pix-tensorflow"
"carpedm20/DCGAN-tensorflow" -> "goodfeli/adversarial"
"carpedm20/DCGAN-tensorflow" -> "hwalsuklee/tensorflow-generative-model-collections"
"carpedm20/DCGAN-tensorflow" -> "tkarras/progressive_growing_of_gans"
"carpedm20/DCGAN-tensorflow" -> "phillipi/pix2pix"
"carpedm20/DCGAN-tensorflow" -> "junyanz/CycleGAN"
"carpedm20/DCGAN-tensorflow" -> "bamos/dcgan-completion.tensorflow"
"gustavla/autocolorize" -> "aditya12agd5/iccv15_lscolorization"
"gustavla/autocolorize" -> "zeruniverse/neural-colorization"
"gustavla/autocolorize" -> "nilboy/colorization-tf"
"gustavla/autocolorize" -> "aditya12agd5/divcolor"
"GANs-in-Action/gans-in-action" -> "davidADSP/GDL_code"
"GANs-in-Action/gans-in-action" -> "eriklindernoren/Keras-GAN"
"GANs-in-Action/gans-in-action" -> "nashory/gans-awesome-applications"
"GANs-in-Action/gans-in-action" -> "google/compare_gan"
"GANs-in-Action/gans-in-action" -> "PacktPublishing/Generative-Adversarial-Networks-Projects"
"GANs-in-Action/gans-in-action" -> "nightrome/really-awesome-gan"
"GANs-in-Action/gans-in-action" -> "PacktPublishing/Advanced-Deep-Learning-with-Keras" ["e"=1]
"GANs-in-Action/gans-in-action" -> "sheqi/GAN_Review" ["e"=1]
"GANs-in-Action/gans-in-action" -> "PacktPublishing/Hands-On-Generative-Adversarial-Networks-with-Keras"
"GANs-in-Action/gans-in-action" -> "kozistr/Awesome-GANs"
"GANs-in-Action/gans-in-action" -> "PacktPublishing/Generative-Adversarial-Networks-Cookbook"
"GANs-in-Action/gans-in-action" -> "timsainb/tensorflow2-generative-models"
"GANs-in-Action/gans-in-action" -> "yunjey/stargan"
"GANs-in-Action/gans-in-action" -> "machinelearningmindset/Generative-Adversarial-Networks-Roadmap"
"GANs-in-Action/gans-in-action" -> "soumith/ganhacks"
"googlecreativelab/quickdraw-dataset" -> "tensorflow/magenta"
"googlecreativelab/quickdraw-dataset" -> "danmacnish/cartoonify" ["e"=1]
"googlecreativelab/quickdraw-dataset" -> "phillipi/pix2pix"
"googlecreativelab/quickdraw-dataset" -> "affinelayer/pix2pix-tensorflow"
"googlecreativelab/quickdraw-dataset" -> "tkarras/progressive_growing_of_gans"
"googlecreativelab/quickdraw-dataset" -> "soumith/ganhacks"
"googlecreativelab/quickdraw-dataset" -> "junyanz/CycleGAN"
"googlecreativelab/quickdraw-dataset" -> "carpedm20/DCGAN-tensorflow"
"googlecreativelab/quickdraw-dataset" -> "zalandoresearch/fashion-mnist" ["e"=1]
"googlecreativelab/quickdraw-dataset" -> "PAIR-code/facets" ["e"=1]
"googlecreativelab/quickdraw-dataset" -> "yunjey/StarGAN"
"googlecreativelab/quickdraw-dataset" -> "lengstrom/fast-style-transfer"
"googlecreativelab/quickdraw-dataset" -> "tensorflow/lucid" ["e"=1]
"googlecreativelab/quickdraw-dataset" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"googlecreativelab/quickdraw-dataset" -> "facebookresearch/visdom" ["e"=1]
"Joker316701882/Deep-Image-Matting" -> "PetroWu/AutoPortraitMatting"
"Joker316701882/Deep-Image-Matting" -> "foamliu/Deep-Image-Matting"
"Joker316701882/Deep-Image-Matting" -> "MarcoForte/closed-form-matting"
"Joker316701882/Deep-Image-Matting" -> "np-csu/AlphaMatting"
"Joker316701882/Deep-Image-Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"Joker316701882/Deep-Image-Matting" -> "yaksoy/AffinityBasedMattingToolbox"
"Joker316701882/Deep-Image-Matting" -> "takiyu/portrait_matting"
"Joker316701882/Deep-Image-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"Joker316701882/Deep-Image-Matting" -> "MarcoForte/knn-matting"
"Joker316701882/Deep-Image-Matting" -> "atilimcetin/global-matting"
"Joker316701882/Deep-Image-Matting" -> "Joker316701882/Salient-Object-Detection" ["e"=1]
"Joker316701882/Deep-Image-Matting" -> "aisegmentcn/matting_human_datasets"
"Joker316701882/Deep-Image-Matting" -> "iyah4888/SIGGRAPH18SSS"
"Joker316701882/Deep-Image-Matting" -> "yaksoy/SemanticSoftSegmentation"
"Joker316701882/Deep-Image-Matting" -> "dingzeyuli/knn-matting"
"MarcoForte/closed-form-matting" -> "MarcoForte/knn-matting"
"MarcoForte/closed-form-matting" -> "np-csu/AlphaMatting"
"MarcoForte/closed-form-matting" -> "Joker316701882/Deep-Image-Matting"
"MarcoForte/closed-form-matting" -> "dingzeyuli/knn-matting"
"MarcoForte/closed-form-matting" -> "PetroWu/AutoPortraitMatting"
"MarcoForte/closed-form-matting" -> "Yaoyi-Li/GCA-Matting"
"MarcoForte/closed-form-matting" -> "atilimcetin/global-matting"
"MarcoForte/closed-form-matting" -> "takiyu/portrait_matting"
"MarcoForte/closed-form-matting" -> "yaksoy/AffinityBasedMattingToolbox"
"MarcoForte/closed-form-matting" -> "MarcoForte/bayesian-matting"
"MarcoForte/closed-form-matting" -> "lizhengwei1992/Semantic_Human_Matting"
"MarcoForte/closed-form-matting" -> "foamliu/Deep-Image-Matting"
"MarcoForte/closed-form-matting" -> "yunkezhang/FusionMatting"
"MarcoForte/closed-form-matting" -> "aisegmentcn/matting_human_datasets"
"MarcoForte/closed-form-matting" -> "huochaitiantang/pytorch-deep-image-matting"
"dingzeyuli/knn-matting" -> "MarcoForte/knn-matting"
"dingzeyuli/knn-matting" -> "atilimcetin/global-matting"
"dingzeyuli/knn-matting" -> "np-csu/AlphaMatting"
"dingzeyuli/knn-matting" -> "volvet/AlphaMatting"
"dingzeyuli/knn-matting" -> "MarcoForte/closed-form-matting"
"dingzeyuli/knn-matting" -> "supitalp/Comprehensive-Sample-Set-Image-Matting"
"dingzeyuli/knn-matting" -> "yaksoy/AffinityBasedMattingToolbox"
"dingzeyuli/knn-matting" -> "MarcoForte/bayesian-matting"
"foamliu/Deep-Image-Matting" -> "Joker316701882/Deep-Image-Matting"
"foamliu/Deep-Image-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"foamliu/Deep-Image-Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"foamliu/Deep-Image-Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"foamliu/Deep-Image-Matting" -> "aisegmentcn/matting_human_datasets"
"foamliu/Deep-Image-Matting" -> "poppinace/indexnet_matting"
"foamliu/Deep-Image-Matting" -> "takiyu/portrait_matting"
"foamliu/Deep-Image-Matting" -> "PetroWu/AutoPortraitMatting"
"foamliu/Deep-Image-Matting" -> "MarcoForte/closed-form-matting"
"foamliu/Deep-Image-Matting" -> "yunkezhang/FusionMatting"
"foamliu/Deep-Image-Matting" -> "foamliu/Deep-Image-Matting-v2"
"foamliu/Deep-Image-Matting" -> "yaksoy/SemanticSoftSegmentation"
"foamliu/Deep-Image-Matting" -> "iyah4888/SIGGRAPH18SSS"
"foamliu/Deep-Image-Matting" -> "Yaoyi-Li/GCA-Matting"
"foamliu/Deep-Image-Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"yaksoy/AffinityBasedMattingToolbox" -> "hqqxyy/Context-Aware-Matting"
"yaksoy/AffinityBasedMattingToolbox" -> "atilimcetin/global-matting"
"yaksoy/AffinityBasedMattingToolbox" -> "dingzeyuli/knn-matting"
"yaksoy/AffinityBasedMattingToolbox" -> "Joker316701882/Deep-Image-Matting"
"yaksoy/AffinityBasedMattingToolbox" -> "np-csu/AlphaMatting"
"yaksoy/AffinityBasedMattingToolbox" -> "MarcoForte/closed-form-matting"
"yaksoy/AffinityBasedMattingToolbox" -> "yunkezhang/FusionMatting"
"yaksoy/AffinityBasedMattingToolbox" -> "PetroWu/AutoPortraitMatting"
"yaksoy/AffinityBasedMattingToolbox" -> "huochaitiantang/pytorch-deep-image-matting"
"yaksoy/AffinityBasedMattingToolbox" -> "volvet/AlphaMatting"
"yaksoy/AffinityBasedMattingToolbox" -> "poppinace/indexnet_matting"
"yaksoy/AffinityBasedMattingToolbox" -> "owang/BilateralVideoSegmentation"
"alievk/avatarify" -> "AliaksandrSiarohin/first-order-model"
"alievk/avatarify" -> "iperov/DeepFaceLab"
"alievk/avatarify" -> "yemount/pose-animator"
"alievk/avatarify" -> "CorentinJ/Real-Time-Voice-Cloning"
"alievk/avatarify" -> "vt-vl-lab/3d-photo-inpainting"
"alievk/avatarify" -> "jantic/DeOldify"
"alievk/avatarify" -> "deepfakes/faceswap"
"alievk/avatarify" -> "senguptaumd/Background-Matting"
"alievk/avatarify" -> "facebookresearch/pifuhd"
"alievk/avatarify" -> "cyrildiagne/ar-cutpaste"
"alievk/avatarify" -> "NVlabs/stylegan2"
"alievk/avatarify" -> "google/mediapipe" ["e"=1]
"alievk/avatarify" -> "jasonmayes/Real-Time-Person-Removal"
"alievk/avatarify" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"alievk/avatarify" -> "adamian98/pulse"
"TachibanaYoshino/AnimeGANv3" -> "TachibanaYoshino/AnimeGANv2"
"TachibanaYoshino/AnimeGANv3" -> "bryandlee/animegan2-pytorch"
"TachibanaYoshino/AnimeGANv3" -> "TachibanaYoshino/AnimeGAN"
"TachibanaYoshino/AnimeGANv3" -> "menyifang/DCT-Net"
"TachibanaYoshino/AnimeGANv3" -> "williamyang1991/DualStyleGAN"
"TachibanaYoshino/AnimeGANv3" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"TachibanaYoshino/AnimeGANv3" -> "yuval-alaluf/restyle-encoder"
"TachibanaYoshino/AnimeGANv3" -> "rinongal/StyleGAN-nada"
"TachibanaYoshino/AnimeGANv3" -> "mchong6/JoJoGAN"
"TachibanaYoshino/AnimeGANv3" -> "rotemtzaban/STIT"
"TachibanaYoshino/AnimeGANv3" -> "Sxela/ArcaneGAN"
"TachibanaYoshino/AnimeGANv3" -> "ptran1203/pytorch-animeGAN"
"TachibanaYoshino/AnimeGANv3" -> "wyhsirius/LIA" ["e"=1]
"TachibanaYoshino/AnimeGANv3" -> "snap-research/articulated-animation" ["e"=1]
"TachibanaYoshino/AnimeGANv3" -> "williamyang1991/VToonify" ["e"=1]
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-generator-star"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-face_editor"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-generator-model"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-generator-wanghong"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-ganerator-dongman"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/generators-with-stylegan2"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-generator-babies"
"a312863063/seeprettyface-generator-yellow" -> "Puzer/stylegan-encoder"
"a312863063/seeprettyface-generator-yellow" -> "taotaonice/FaceShifter" ["e"=1]
"a312863063/seeprettyface-generator-yellow" -> "rolux/stylegan2encoder"
"a312863063/seeprettyface-generator-yellow" -> "a312863063/seeprettyface-dataset"
"odegeasslbc/FastGAN-pytorch" -> "lucidrains/lightweight-gan"
"odegeasslbc/FastGAN-pytorch" -> "autonomousvision/projected_gan"
"odegeasslbc/FastGAN-pytorch" -> "utkarshojha/few-shot-gan-adaptation"
"odegeasslbc/FastGAN-pytorch" -> "gaborvecsei/SLE-GAN"
"odegeasslbc/FastGAN-pytorch" -> "autonomousvision/stylegan_xl"
"odegeasslbc/FastGAN-pytorch" -> "e-271/few-shot-gan"
"odegeasslbc/FastGAN-pytorch" -> "facebookresearch/ic_gan"
"odegeasslbc/FastGAN-pytorch" -> "nupurkmr9/vision-aided-gan"
"odegeasslbc/FastGAN-pytorch" -> "mit-han-lab/data-efficient-gans"
"odegeasslbc/FastGAN-pytorch" -> "rosinality/alias-free-gan-pytorch"
"odegeasslbc/FastGAN-pytorch" -> "bes-dev/MobileStyleGAN.pytorch"
"odegeasslbc/FastGAN-pytorch" -> "phizaz/diffae" ["e"=1]
"odegeasslbc/FastGAN-pytorch" -> "rosinality/stylegan2-pytorch"
"odegeasslbc/FastGAN-pytorch" -> "dvschultz/stylegan2-ada-pytorch"
"odegeasslbc/FastGAN-pytorch" -> "genforce/sefa"
"openai/glow" -> "chaiyujin/glow-pytorch" ["e"=1]
"openai/glow" -> "rosinality/glow-pytorch" ["e"=1]
"openai/glow" -> "tkarras/progressive_growing_of_gans"
"openai/glow" -> "NVlabs/MUNIT"
"openai/glow" -> "google/compare_gan"
"openai/glow" -> "LMescheder/GAN_stability"
"openai/glow" -> "pfnet-research/sngan_projection"
"openai/glow" -> "albertpumarola/GANimation"
"openai/glow" -> "yunjey/StarGAN"
"openai/glow" -> "NVIDIA/vid2vid"
"openai/glow" -> "martinarjovsky/WassersteinGAN"
"openai/glow" -> "wiseodd/generative-models"
"openai/glow" -> "NVIDIA/pix2pixHD"
"openai/glow" -> "rtqichen/torchdiffeq" ["e"=1]
"openai/glow" -> "heykeetae/Self-Attention-GAN"
"VITA-Group/TransGAN" -> "dorarad/gansformer"
"VITA-Group/TransGAN" -> "CompVis/taming-transformers" ["e"=1]
"VITA-Group/TransGAN" -> "NVlabs/stylegan2-ada-pytorch"
"VITA-Group/TransGAN" -> "rosinality/stylegan2-pytorch"
"VITA-Group/TransGAN" -> "eladrich/pixel2style2pixel"
"VITA-Group/TransGAN" -> "openai/guided-diffusion" ["e"=1]
"VITA-Group/TransGAN" -> "yitu-opensource/T2T-ViT" ["e"=1]
"VITA-Group/TransGAN" -> "taesungp/contrastive-unpaired-translation"
"VITA-Group/TransGAN" -> "POSTECH-CVLab/PyTorch-StudioGAN"
"VITA-Group/TransGAN" -> "mit-han-lab/data-efficient-gans"
"VITA-Group/TransGAN" -> "mit-han-lab/anycost-gan"
"VITA-Group/TransGAN" -> "richzhang/PerceptualSimilarity"
"VITA-Group/TransGAN" -> "ZhendongWang6/Uformer" ["e"=1]
"VITA-Group/TransGAN" -> "raywzy/ICT" ["e"=1]
"VITA-Group/TransGAN" -> "mseitzer/pytorch-fid"
"ImagingLab/Colorizing-with-GANs" -> "zeruniverse/neural-colorization"
"ImagingLab/Colorizing-with-GANs" -> "Armour/Automatic-Image-Colorization"
"ImagingLab/Colorizing-with-GANs" -> "pdrabinski/GAN_Colorizer"
"ImagingLab/Colorizing-with-GANs" -> "baldassarreFe/deep-koalarization"
"ImagingLab/Colorizing-with-GANs" -> "pvitoria/ChromaGAN"
"ImagingLab/Colorizing-with-GANs" -> "msracver/Deep-Exemplar-based-Colorization"
"ImagingLab/Colorizing-with-GANs" -> "shekkizh/Colorization.tensorflow"
"ImagingLab/Colorizing-with-GANs" -> "richzhang/colorization-pytorch"
"ImagingLab/Colorizing-with-GANs" -> "nilboy/colorization-tf"
"ImagingLab/Colorizing-with-GANs" -> "emilwallner/Coloring-greyscale-images"
"ImagingLab/Colorizing-with-GANs" -> "ccyyatnet/COLORGAN"
"ImagingLab/Colorizing-with-GANs" -> "TengdaHan/Image-Colorization"
"sunshineatnoon/LinearStyleTransfer" -> "sunshineatnoon/PytorchWCT"
"sunshineatnoon/LinearStyleTransfer" -> "clovaai/WCT2"
"sunshineatnoon/LinearStyleTransfer" -> "LucasSheng/avatar-net"
"sunshineatnoon/LinearStyleTransfer" -> "Yijunmaverick/UniversalStyleTransfer"
"sunshineatnoon/LinearStyleTransfer" -> "JianqiangRen/AAMS"
"sunshineatnoon/LinearStyleTransfer" -> "safwankdb/ReCoNet-PyTorch"
"sunshineatnoon/LinearStyleTransfer" -> "nkolkin13/STROTSS"
"sunshineatnoon/LinearStyleTransfer" -> "GlebBrykin/SANET"
"sunshineatnoon/LinearStyleTransfer" -> "CompVis/adaptive-style-transfer"
"sunshineatnoon/LinearStyleTransfer" -> "pkuanjie/ArtFlow"
"sunshineatnoon/LinearStyleTransfer" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"sunshineatnoon/LinearStyleTransfer" -> "naoto0804/pytorch-AdaIN"
"sunshineatnoon/LinearStyleTransfer" -> "curaai00/RT-StyleTransfer-forVideo"
"sunshineatnoon/LinearStyleTransfer" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"sunshineatnoon/LinearStyleTransfer" -> "MingSun-Tse/Collaborative-Distillation"
"zeruniverse/neural-colorization" -> "ImagingLab/Colorizing-with-GANs"
"zeruniverse/neural-colorization" -> "shufanwu/colorNet-pytorch"
"zeruniverse/neural-colorization" -> "ccyyatnet/COLORGAN"
"zeruniverse/neural-colorization" -> "nilboy/colorization-tf"
"zeruniverse/neural-colorization" -> "TengdaHan/Image-Colorization"
"zeruniverse/neural-colorization" -> "Armour/Automatic-Image-Colorization"
"greerviau/SnakeAI" -> "ArztSamuel/Applying_EANNs"
"greerviau/SnakeAI" -> "Chrispresso/SnakeAI"
"greerviau/SnakeAI" -> "Code-Bullet/SnakeFusion"
"greerviau/SnakeAI" -> "maurock/snake-ga"
"greerviau/SnakeAI" -> "techwithtim/NEAT-Flappy-Bird" ["e"=1]
"greerviau/SnakeAI" -> "greerviau/TetrisAI"
"greerviau/SnakeAI" -> "chuyangliu/snake" ["e"=1]
"greerviau/SnakeAI" -> "Sentdex/NNfSiX" ["e"=1]
"greerviau/SnakeAI" -> "neeru1207/AI_Sudoku" ["e"=1]
"greerviau/SnakeAI" -> "streamlit/demo-self-driving" ["e"=1]
"greerviau/SnakeAI" -> "mnielsen/neural-networks-and-deep-learning" ["e"=1]
"greerviau/SnakeAI" -> "JVictorDias/Dinossauro-Google"
"greerviau/SnakeAI" -> "greerviau/DoodleJumpAI"
"greerviau/SnakeAI" -> "openai/multi-agent-emergence-environments" ["e"=1]
"greerviau/SnakeAI" -> "lexfridman/mit-deep-learning" ["e"=1]
"NathanUA/U-2-Net" -> "NathanUA/BASNet" ["e"=1]
"NathanUA/U-2-Net" -> "ZHKKKe/MODNet"
"NathanUA/U-2-Net" -> "yiranran/APDrawingGAN"
"NathanUA/U-2-Net" -> "senguptaumd/Background-Matting"
"NathanUA/U-2-Net" -> "PeterL1n/BackgroundMattingV2"
"NathanUA/U-2-Net" -> "eladrich/pixel2style2pixel"
"NathanUA/U-2-Net" -> "pymatting/pymatting"
"NathanUA/U-2-Net" -> "RangiLyu/nanodet" ["e"=1]
"NathanUA/U-2-Net" -> "vijishmadhavan/ArtLine"
"NathanUA/U-2-Net" -> "HRNet/HRNet-Semantic-Segmentation" ["e"=1]
"NathanUA/U-2-Net" -> "zhanghang1989/ResNeSt" ["e"=1]
"NathanUA/U-2-Net" -> "dbolya/yolact" ["e"=1]
"NathanUA/U-2-Net" -> "SystemErrorWang/White-box-Cartoonization"
"NathanUA/U-2-Net" -> "facebookresearch/pifuhd"
"NathanUA/U-2-Net" -> "JizhiziLi/animal-matting"
"yuval-alaluf/restyle-encoder" -> "omertov/encoder4editing"
"yuval-alaluf/restyle-encoder" -> "yuval-alaluf/hyperstyle"
"yuval-alaluf/restyle-encoder" -> "yuval-alaluf/stylegan3-editing"
"yuval-alaluf/restyle-encoder" -> "eladrich/pixel2style2pixel"
"yuval-alaluf/restyle-encoder" -> "rinongal/StyleGAN-nada"
"yuval-alaluf/restyle-encoder" -> "danielroich/PTI"
"yuval-alaluf/restyle-encoder" -> "weihaox/awesome-gan-inversion"
"yuval-alaluf/restyle-encoder" -> "yuval-alaluf/SAM"
"yuval-alaluf/restyle-encoder" -> "Tengfei-Wang/HFGI"
"yuval-alaluf/restyle-encoder" -> "rosinality/stylegan2-pytorch"
"yuval-alaluf/restyle-encoder" -> "betterze/StyleSpace"
"yuval-alaluf/restyle-encoder" -> "genforce/interfacegan"
"yuval-alaluf/restyle-encoder" -> "orpatashnik/StyleCLIP"
"yuval-alaluf/restyle-encoder" -> "rotemtzaban/STIT"
"yuval-alaluf/restyle-encoder" -> "naver-ai/StyleMapGAN"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Pool_AI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Enigma-Simulator"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/PacNeat"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Google-Chrome-Dino-Game-AI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/PacmanGame"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Chess-AI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/RubiksCubeAI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/2048-AI"
"Code-Bullet/SnakeFusion" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"jasonmayes/Real-Time-Person-Removal" -> "amzn/computer-vision-basics-in-microsoft-excel"
"jasonmayes/Real-Time-Person-Removal" -> "yemount/pose-animator"
"jasonmayes/Real-Time-Person-Removal" -> "alievk/avatarify"
"jasonmayes/Real-Time-Person-Removal" -> "tensorflow/tfjs-models" ["e"=1]
"jasonmayes/Real-Time-Person-Removal" -> "zllrunning/video-object-removal" ["e"=1]
"jasonmayes/Real-Time-Person-Removal" -> "senguptaumd/Background-Matting"
"jasonmayes/Real-Time-Person-Removal" -> "vt-vl-lab/3d-photo-inpainting"
"jasonmayes/Real-Time-Person-Removal" -> "microsoft/computervision-recipes" ["e"=1]
"jasonmayes/Real-Time-Person-Removal" -> "cyrildiagne/ar-cutpaste"
"jasonmayes/Real-Time-Person-Removal" -> "luruke/browser-2020" ["e"=1]
"jasonmayes/Real-Time-Person-Removal" -> "facebookresearch/pifuhd"
"jasonmayes/Real-Time-Person-Removal" -> "anandpawara/Real_Time_Image_Animation"
"jasonmayes/Real-Time-Person-Removal" -> "anvaka/city-roads" ["e"=1]
"jasonmayes/Real-Time-Person-Removal" -> "jantic/DeOldify"
"jasonmayes/Real-Time-Person-Removal" -> "alyssaxuu/flowy" ["e"=1]
"nashory/gans-awesome-applications" -> "soumith/ganhacks"
"nashory/gans-awesome-applications" -> "nightrome/really-awesome-gan"
"nashory/gans-awesome-applications" -> "hindupuravinash/the-gan-zoo"
"nashory/gans-awesome-applications" -> "eriklindernoren/PyTorch-GAN"
"nashory/gans-awesome-applications" -> "wiseodd/generative-models"
"nashory/gans-awesome-applications" -> "eriklindernoren/Keras-GAN"
"nashory/gans-awesome-applications" -> "zhangqianhui/AdversarialNetsPapers"
"nashory/gans-awesome-applications" -> "tkarras/progressive_growing_of_gans"
"nashory/gans-awesome-applications" -> "NVIDIA/pix2pixHD"
"nashory/gans-awesome-applications" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"nashory/gans-awesome-applications" -> "znxlwm/pytorch-generative-model-collections"
"nashory/gans-awesome-applications" -> "hwalsuklee/tensorflow-generative-model-collections"
"nashory/gans-awesome-applications" -> "pytorch/examples" ["e"=1]
"nashory/gans-awesome-applications" -> "junyanz/CycleGAN"
"nashory/gans-awesome-applications" -> "kjw0612/awesome-deep-vision" ["e"=1]
"nightrome/really-awesome-gan" -> "zhangqianhui/AdversarialNetsPapers"
"nightrome/really-awesome-gan" -> "soumith/ganhacks"
"nightrome/really-awesome-gan" -> "wiseodd/generative-models"
"nightrome/really-awesome-gan" -> "nashory/gans-awesome-applications"
"nightrome/really-awesome-gan" -> "xinario/awesome-gan-for-medical-imaging" ["e"=1]
"nightrome/really-awesome-gan" -> "hindupuravinash/the-gan-zoo"
"nightrome/really-awesome-gan" -> "tkarras/progressive_growing_of_gans"
"nightrome/really-awesome-gan" -> "hwalsuklee/tensorflow-generative-model-collections"
"nightrome/really-awesome-gan" -> "openai/improved-gan"
"nightrome/really-awesome-gan" -> "znxlwm/pytorch-generative-model-collections"
"nightrome/really-awesome-gan" -> "kjw0612/awesome-deep-vision" ["e"=1]
"nightrome/really-awesome-gan" -> "GKalliatakis/Delving-deep-into-GANs"
"nightrome/really-awesome-gan" -> "martinarjovsky/WassersteinGAN"
"nightrome/really-awesome-gan" -> "carpedm20/DCGAN-tensorflow"
"nightrome/really-awesome-gan" -> "aikorea/awesome-rl" ["e"=1]
"diegoalejogm/gans" -> "nashory/gans-awesome-applications"
"diegoalejogm/gans" -> "devnag/pytorch-generative-adversarial-networks"
"diegoalejogm/gans" -> "higgsfield/Capsule-Network-Tutorial" ["e"=1]
"diegoalejogm/gans" -> "altosaar/variational-autoencoder" ["e"=1]
"diegoalejogm/gans" -> "diegoalejogm/deep-q-learning"
"diegoalejogm/gans" -> "astorfi/TensorFlow-World-Resources" ["e"=1]
"diegoalejogm/gans" -> "shayneobrien/generative-models"
"diegoalejogm/gans" -> "savan77/The-GAN-World"
"diegoalejogm/gans" -> "soumith/ganhacks"
"diegoalejogm/gans" -> "dnouri/skorch" ["e"=1]
"diegoalejogm/gans" -> "mlberkeley/Creative-Adversarial-Networks"
"diegoalejogm/gans" -> "openai/improved-gan"
"diegoalejogm/gans" -> "dorajam/Convolutional-Network" ["e"=1]
"diegoalejogm/gans" -> "andrewgordonwilson/bayesgan" ["e"=1]
"diegoalejogm/gans" -> "ajbrock/BigGAN-PyTorch"
"openai/improved-gan" -> "openai/InfoGAN"
"openai/improved-gan" -> "martinarjovsky/WassersteinGAN"
"openai/improved-gan" -> "igul222/improved_wgan_training"
"openai/improved-gan" -> "Newmu/dcgan_code"
"openai/improved-gan" -> "carpedm20/DCGAN-tensorflow"
"openai/improved-gan" -> "bioinf-jku/TTUR"
"openai/improved-gan" -> "wiseodd/generative-models"
"openai/improved-gan" -> "goodfeli/adversarial"
"openai/improved-gan" -> "openai/pixel-cnn"
"openai/improved-gan" -> "tkarras/progressive_growing_of_gans"
"openai/improved-gan" -> "soumith/ganhacks"
"openai/improved-gan" -> "hwalsuklee/tensorflow-generative-model-collections"
"openai/improved-gan" -> "soumith/dcgan.torch"
"openai/improved-gan" -> "hanzhanggit/StackGAN"
"openai/improved-gan" -> "zhangqianhui/AdversarialNetsPapers"
"richzhang/colorization" -> "junyanz/interactive-deep-colorization"
"richzhang/colorization" -> "satoshiiizuka/siggraph2016_colorization"
"richzhang/colorization" -> "richzhang/colorization-pytorch"
"richzhang/colorization" -> "pavelgonchar/colornet"
"richzhang/colorization" -> "MarkMoHR/Awesome-Image-Colorization"
"richzhang/colorization" -> "msracver/Deep-Exemplar-based-Colorization"
"richzhang/colorization" -> "ericsujw/InstColorization"
"richzhang/colorization" -> "gustavla/autocolorize"
"richzhang/colorization" -> "emilwallner/Coloring-greyscale-images"
"richzhang/colorization" -> "phillipi/pix2pix"
"richzhang/colorization" -> "jantic/DeOldify"
"richzhang/colorization" -> "baldassarreFe/deep-koalarization"
"richzhang/colorization" -> "jcjohnson/fast-neural-style"
"richzhang/colorization" -> "ImagingLab/Colorizing-with-GANs"
"richzhang/colorization" -> "NVIDIA/pix2pixHD"
"sbarratt/inception-score-pytorch" -> "mseitzer/pytorch-fid"
"sbarratt/inception-score-pytorch" -> "bioinf-jku/TTUR"
"sbarratt/inception-score-pytorch" -> "hanzhanggit/StackGAN-Pytorch"
"sbarratt/inception-score-pytorch" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"sbarratt/inception-score-pytorch" -> "pfnet-research/sngan_projection"
"sbarratt/inception-score-pytorch" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"sbarratt/inception-score-pytorch" -> "openai/improved-gan"
"sbarratt/inception-score-pytorch" -> "caogang/wgan-gp"
"sbarratt/inception-score-pytorch" -> "HelenMao/MSGAN"
"sbarratt/inception-score-pytorch" -> "taki0112/GAN_Metrics-Tensorflow"
"sbarratt/inception-score-pytorch" -> "xuqiantong/GAN-Metrics"
"sbarratt/inception-score-pytorch" -> "ajbrock/BigGAN-PyTorch"
"sbarratt/inception-score-pytorch" -> "nashory/pggan-pytorch"
"sbarratt/inception-score-pytorch" -> "lzhbrian/metrics"
"sbarratt/inception-score-pytorch" -> "google/compare_gan"
"soumith/ganhacks" -> "hindupuravinash/the-gan-zoo"
"soumith/ganhacks" -> "wiseodd/generative-models"
"soumith/ganhacks" -> "zhangqianhui/AdversarialNetsPapers"
"soumith/ganhacks" -> "eriklindernoren/PyTorch-GAN"
"soumith/ganhacks" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"soumith/ganhacks" -> "carpedm20/DCGAN-tensorflow"
"soumith/ganhacks" -> "martinarjovsky/WassersteinGAN"
"soumith/ganhacks" -> "vdumoulin/conv_arithmetic" ["e"=1]
"soumith/ganhacks" -> "nashory/gans-awesome-applications"
"soumith/ganhacks" -> "eriklindernoren/Keras-GAN"
"soumith/ganhacks" -> "tkarras/progressive_growing_of_gans"
"soumith/ganhacks" -> "pytorch/examples" ["e"=1]
"soumith/ganhacks" -> "nightrome/really-awesome-gan"
"soumith/ganhacks" -> "junyanz/CycleGAN"
"soumith/ganhacks" -> "hwalsuklee/tensorflow-generative-model-collections"
"uclaacmai/Generative-Adversarial-Network-Tutorial" -> "jonbruner/generative-adversarial-networks"
"uclaacmai/Generative-Adversarial-Network-Tutorial" -> "adeshpande3/Generative-Adversarial-Networks" ["e"=1]
"uclaacmai/Generative-Adversarial-Network-Tutorial" -> "awjuliani/TF-Tutorials"
"uclaacmai/Generative-Adversarial-Network-Tutorial" -> "uclaacmai/tf-workshop-series"
"uclaacmai/Generative-Adversarial-Network-Tutorial" -> "wagamamaz/tensorflow-tutorial" ["e"=1]
"znxlwm/tensorflow-MNIST-GAN-DCGAN" -> "znxlwm/tensorflow-MNIST-cGAN-cDCGAN"
"znxlwm/tensorflow-MNIST-GAN-DCGAN" -> "shaohua0116/DCGAN-Tensorflow"
"ShenYujun/InterFaceGAN" -> "pbaylies/stylegan-encoder"
"ShenYujun/InterFaceGAN" -> "Puzer/stylegan-encoder"
"ShenYujun/InterFaceGAN" -> "microsoft/DisentangledFaceGAN" ["e"=1]
"ShenYujun/InterFaceGAN" -> "csmliu/STGAN"
"ShenYujun/InterFaceGAN" -> "royorel/FFHQ-Aging-Dataset" ["e"=1]
"ShenYujun/InterFaceGAN" -> "ak9250/stylegan-art"
"ShenYujun/InterFaceGAN" -> "wdyin/GeoGAN"
"ShenYujun/InterFaceGAN" -> "anvoynov/GANLatentDiscovery"
"ShenYujun/InterFaceGAN" -> "ali-design/gan_steerability"
"ShenYujun/InterFaceGAN" -> "IVRL/GANLocalEditing"
"ShenYujun/InterFaceGAN" -> "ZPdesu/SEAN"
"ShenYujun/InterFaceGAN" -> "XingangPan/deep-generative-prior"
"TAMU-VITA/ShapeMatchingGAN" -> "williamyang1991/TET-GAN"
"TAMU-VITA/ShapeMatchingGAN" -> "hologerry/AGIS-Net"
"TAMU-VITA/ShapeMatchingGAN" -> "assafshocher/InGAN"
"ZHKKKe/MODNet" -> "PeterL1n/BackgroundMattingV2"
"ZHKKKe/MODNet" -> "senguptaumd/Background-Matting"
"ZHKKKe/MODNet" -> "PeterL1n/RobustVideoMatting"
"ZHKKKe/MODNet" -> "xuebinqin/U-2-Net"
"ZHKKKe/MODNet" -> "foamliu/Deep-Image-Matting-PyTorch"
"ZHKKKe/MODNet" -> "pymatting/pymatting"
"ZHKKKe/MODNet" -> "zllrunning/face-parsing.PyTorch"
"ZHKKKe/MODNet" -> "NathanUA/U-2-Net"
"ZHKKKe/MODNet" -> "aisegmentcn/matting_human_datasets"
"ZHKKKe/MODNet" -> "JizhiziLi/animal-matting"
"ZHKKKe/MODNet" -> "cleardusk/3DDFA_V2" ["e"=1]
"ZHKKKe/MODNet" -> "anilsathyan7/Portrait-Segmentation"
"ZHKKKe/MODNet" -> "eladrich/pixel2style2pixel"
"ZHKKKe/MODNet" -> "YadiraF/DECA" ["e"=1]
"ZHKKKe/MODNet" -> "MarcoForte/FBA_Matting"
"abhiskk/fast-neural-style" -> "ceshine/fast-neural-style"
"abhiskk/fast-neural-style" -> "rrmina/fast-neural-style-pytorch"
"abhiskk/fast-neural-style" -> "leongatys/PytorchNeuralStyleTransfer"
"abhiskk/fast-neural-style" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"abhiskk/fast-neural-style" -> "rtqichen/style-swap"
"abhiskk/fast-neural-style" -> "dxyang/StyleTransfer"
"abhiskk/fast-neural-style" -> "LucasSheng/avatar-net"
"abhiskk/fast-neural-style" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"albertpumarola/GANimation" -> "bendangnuksung/Image-OutPainting"
"albertpumarola/GANimation" -> "yunjey/stargan"
"albertpumarola/GANimation" -> "donydchen/ganimation_replicate"
"albertpumarola/GANimation" -> "CSAILVision/gandissect"
"albertpumarola/GANimation" -> "NVlabs/MUNIT"
"albertpumarola/GANimation" -> "openai/glow"
"albertpumarola/GANimation" -> "switchablenorms/CelebAMask-HQ"
"albertpumarola/GANimation" -> "NVIDIA/vid2vid"
"albertpumarola/GANimation" -> "nyoki-mtl/pytorch-EverybodyDanceNow" ["e"=1]
"albertpumarola/GANimation" -> "tranluan/Nonlinear_Face_3DMM" ["e"=1]
"albertpumarola/GANimation" -> "YadiraF/face3d" ["e"=1]
"albertpumarola/GANimation" -> "apchenstu/Facial_Details_Synthesis" ["e"=1]
"albertpumarola/GANimation" -> "shaoanlu/faceswap-GAN" ["e"=1]
"albertpumarola/GANimation" -> "cleardusk/3DDFA" ["e"=1]
"albertpumarola/GANimation" -> "grey-eye/talking-heads" ["e"=1]
"anvoynov/GANLatentDiscovery" -> "genforce/idinvert_pytorch"
"anvoynov/GANLatentDiscovery" -> "IVRL/GANLocalEditing"
"anvoynov/GANLatentDiscovery" -> "ali-design/gan_steerability"
"anvoynov/GANLatentDiscovery" -> "yandex-research/navigan"
"anvoynov/GANLatentDiscovery" -> "genforce/idinvert"
"anvoynov/GANLatentDiscovery" -> "genforce/sefa"
"anvoynov/GANLatentDiscovery" -> "weihaox/awesome-gan-inversion"
"anvoynov/GANLatentDiscovery" -> "jacobhallberg/pytorch_stylegan_encoder"
"anvoynov/GANLatentDiscovery" -> "harskish/ganspace"
"anvoynov/GANLatentDiscovery" -> "mit-han-lab/data-efficient-gans"
"anvoynov/GANLatentDiscovery" -> "rosinality/stylegan2-pytorch"
"anvoynov/GANLatentDiscovery" -> "davidbau/rewriting"
"anvoynov/GANLatentDiscovery" -> "wpeebles/hessian_penalty"
"anvoynov/GANLatentDiscovery" -> "genforce/interfacegan"
"anvoynov/GANLatentDiscovery" -> "ShenYujun/InterFaceGAN"
"eladrich/pixel2style2pixel" -> "rosinality/stylegan2-pytorch"
"eladrich/pixel2style2pixel" -> "omertov/encoder4editing"
"eladrich/pixel2style2pixel" -> "yuval-alaluf/restyle-encoder"
"eladrich/pixel2style2pixel" -> "orpatashnik/StyleCLIP"
"eladrich/pixel2style2pixel" -> "NVlabs/stylegan2-ada-pytorch"
"eladrich/pixel2style2pixel" -> "genforce/interfacegan"
"eladrich/pixel2style2pixel" -> "weihaox/awesome-gan-inversion"
"eladrich/pixel2style2pixel" -> "RameenAbdal/StyleFlow"
"eladrich/pixel2style2pixel" -> "switchablenorms/CelebAMask-HQ"
"eladrich/pixel2style2pixel" -> "yuval-alaluf/hyperstyle"
"eladrich/pixel2style2pixel" -> "zllrunning/face-parsing.PyTorch"
"eladrich/pixel2style2pixel" -> "justinpinkney/awesome-pretrained-stylegan2"
"eladrich/pixel2style2pixel" -> "clovaai/stargan-v2"
"eladrich/pixel2style2pixel" -> "williamyang1991/DualStyleGAN"
"eladrich/pixel2style2pixel" -> "rinongal/StyleGAN-nada"
"genforce/idinvert" -> "genforce/idinvert_pytorch"
"genforce/idinvert" -> "genforce/interfacegan"
"genforce/idinvert" -> "genforce/genforce"
"genforce/idinvert" -> "genforce/mganprior"
"genforce/idinvert" -> "genforce/sefa"
"genforce/idinvert" -> "IVRL/GANLocalEditing"
"genforce/idinvert" -> "jacobhallberg/pytorch_stylegan_encoder"
"genforce/idinvert" -> "omertov/encoder4editing"
"genforce/idinvert" -> "rosinality/swapping-autoencoder-pytorch"
"genforce/idinvert" -> "pacifinapacific/StyleGAN_LatentEditor"
"genforce/idinvert" -> "anvoynov/GANLatentDiscovery"
"genforce/idinvert" -> "pbaylies/stylegan-encoder"
"genforce/idinvert" -> "EvgenyKashin/stylegan2-distillation"
"genforce/idinvert" -> "genforce/lia"
"genforce/idinvert" -> "danielroich/PTI"
"genforce/idinvert_pytorch" -> "genforce/idinvert"
"genforce/idinvert_pytorch" -> "bryandlee/stylegan2-encoder-pytorch"
"genforce/idinvert_pytorch" -> "genforce/genforce"
"genforce/idinvert_pytorch" -> "genforce/interfacegan"
"genforce/idinvert_pytorch" -> "weihaox/awesome-gan-inversion"
"genforce/idinvert_pytorch" -> "genforce/mganprior"
"genforce/idinvert_pytorch" -> "anvoynov/GANLatentDiscovery"
"genforce/idinvert_pytorch" -> "omertov/encoder4editing"
"genforce/idinvert_pytorch" -> "genforce/sefa"
"genforce/idinvert_pytorch" -> "Hsintien-Ng/idinvert_pytorch-reproduced"
"genforce/idinvert_pytorch" -> "Tengfei-Wang/HFGI"
"genforce/idinvert_pytorch" -> "jacobhallberg/pytorch_stylegan_encoder"
"genforce/idinvert_pytorch" -> "betterze/StyleSpace"
"genforce/idinvert_pytorch" -> "bes-dev/MobileStyleGAN.pytorch"
"genforce/idinvert_pytorch" -> "woctezuma/stylegan2-projecting-images"
"intel-isl/FreeViewSynthesis" -> "intel-isl/StableViewSynthesis"
"intel-isl/FreeViewSynthesis" -> "alievk/npbg"
"intel-isl/FreeViewSynthesis" -> "NVlabs/extreme-view-synth" ["e"=1]
"intel-isl/FreeViewSynthesis" -> "zhengqili/Crowdsampling-the-Plenoptic-Function"
"intel-isl/FreeViewSynthesis" -> "jchibane/srf"
"intel-isl/FreeViewSynthesis" -> "facebookresearch/nonrigid_nerf" ["e"=1]
"intel-isl/StableViewSynthesis" -> "intel-isl/FreeViewSynthesis"
"jacobhallberg/pytorch_stylegan_encoder" -> "Puzer/stylegan-encoder"
"jacobhallberg/pytorch_stylegan_encoder" -> "genforce/interfacegan"
"jacobhallberg/pytorch_stylegan_encoder" -> "genforce/idinvert"
"jacobhallberg/pytorch_stylegan_encoder" -> "pbaylies/stylegan-encoder"
"jacobhallberg/pytorch_stylegan_encoder" -> "huangzh13/StyleGAN.pytorch"
"jacobhallberg/pytorch_stylegan_encoder" -> "bryandlee/stylegan2-encoder-pytorch"
"jacobhallberg/pytorch_stylegan_encoder" -> "rolux/stylegan2encoder"
"jacobhallberg/pytorch_stylegan_encoder" -> "genforce/idinvert_pytorch"
"jacobhallberg/pytorch_stylegan_encoder" -> "pacifinapacific/StyleGAN_LatentEditor"
"jacobhallberg/pytorch_stylegan_encoder" -> "anvoynov/GANLatentDiscovery"
"kwotsin/mimicry" -> "anvoynov/GANLatentDiscovery"
"kwotsin/mimicry" -> "torchgan/torchgan"
"kwotsin/mimicry" -> "genforce/genforce"
"kwotsin/mimicry" -> "toshas/torch-fidelity" ["e"=1]
"kwotsin/mimicry" -> "pfnet-research/sngan_projection"
"kwotsin/mimicry" -> "kam1107/RealnessGAN"
"kwotsin/mimicry" -> "davidbau/rewriting"
"kwotsin/mimicry" -> "cc-hpc-itwm/UpConv" ["e"=1]
"kwotsin/mimicry" -> "mit-han-lab/data-efficient-gans"
"kwotsin/mimicry" -> "GaParmar/clean-fid"
"kwotsin/mimicry" -> "POSTECH-CVLab/PyTorch-StudioGAN"
"kwotsin/mimicry" -> "szymonmaszke/torchlayers" ["e"=1]
"kwotsin/mimicry" -> "jh-jeong/ContraD" ["e"=1]
"kwotsin/mimicry" -> "yang-song/score_sde" ["e"=1]
"kwotsin/mimicry" -> "w86763777/pytorch-gan-collections"
"lernapparat/lernapparat" -> "tomguluson92/StyleGAN_PyTorch"
"lernapparat/lernapparat" -> "huangzh13/StyleGAN.pytorch"
"lernapparat/lernapparat" -> "rosinality/style-based-gan-pytorch"
"lernapparat/lernapparat" -> "pacifinapacific/StyleGAN_LatentEditor"
"lernapparat/lernapparat" -> "akanimax/pro_gan_pytorch"
"lernapparat/lernapparat" -> "jacobhallberg/pytorch_stylegan_encoder"
"lernapparat/lernapparat" -> "Puzer/stylegan-encoder"
"lernapparat/lernapparat" -> "SiskonEmilia/StyleGAN-PyTorch"
"lernapparat/lernapparat" -> "anvoynov/GANLatentDiscovery"
"lernapparat/lernapparat" -> "pbaylies/stylegan-encoder"
"lucidrains/stylegan2-pytorch" -> "lucidrains/lightweight-gan"
"lucidrains/stylegan2-pytorch" -> "rosinality/stylegan2-pytorch"
"lucidrains/stylegan2-pytorch" -> "NVlabs/stylegan2"
"lucidrains/stylegan2-pytorch" -> "NVlabs/stylegan2-ada-pytorch"
"lucidrains/stylegan2-pytorch" -> "eladrich/pixel2style2pixel"
"lucidrains/stylegan2-pytorch" -> "NVlabs/stylegan3"
"lucidrains/stylegan2-pytorch" -> "rosinality/style-based-gan-pytorch"
"lucidrains/stylegan2-pytorch" -> "justinpinkney/awesome-pretrained-stylegan2"
"lucidrains/stylegan2-pytorch" -> "NVlabs/stylegan2-ada"
"lucidrains/stylegan2-pytorch" -> "mseitzer/pytorch-fid"
"lucidrains/stylegan2-pytorch" -> "genforce/interfacegan"
"lucidrains/stylegan2-pytorch" -> "mit-han-lab/data-efficient-gans"
"lucidrains/stylegan2-pytorch" -> "orpatashnik/StyleCLIP"
"lucidrains/stylegan2-pytorch" -> "CompVis/taming-transformers" ["e"=1]
"lucidrains/stylegan2-pytorch" -> "clovaai/stargan-v2"
"lzhbrian/image-to-image-papers" -> "HsinYingLee/DRIT"
"lzhbrian/image-to-image-papers" -> "NVlabs/MUNIT"
"lzhbrian/image-to-image-papers" -> "weihaox/awesome-image-translation"
"lzhbrian/image-to-image-papers" -> "sangwoomo/instagan"
"lzhbrian/image-to-image-papers" -> "NVlabs/FUNIT"
"lzhbrian/image-to-image-papers" -> "Ha0Tang/AttentionGAN"
"lzhbrian/image-to-image-papers" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"lzhbrian/image-to-image-papers" -> "HelenMao/MSGAN"
"lzhbrian/image-to-image-papers" -> "Ha0Tang/SelectionGAN"
"lzhbrian/image-to-image-papers" -> "junyanz/BicycleGAN"
"lzhbrian/image-to-image-papers" -> "csmliu/STGAN"
"lzhbrian/image-to-image-papers" -> "Prinsphield/ELEGANT"
"lzhbrian/image-to-image-papers" -> "mingyuliutw/UNIT"
"lzhbrian/image-to-image-papers" -> "mseitzer/pytorch-fid"
"lzhbrian/image-to-image-papers" -> "albertpumarola/GANimation"
"mseitzer/pytorch-fid" -> "sbarratt/inception-score-pytorch"
"mseitzer/pytorch-fid" -> "bioinf-jku/TTUR"
"mseitzer/pytorch-fid" -> "richzhang/PerceptualSimilarity"
"mseitzer/pytorch-fid" -> "rosinality/stylegan2-pytorch"
"mseitzer/pytorch-fid" -> "GaParmar/clean-fid"
"mseitzer/pytorch-fid" -> "heykeetae/Self-Attention-GAN"
"mseitzer/pytorch-fid" -> "toshas/torch-fidelity" ["e"=1]
"mseitzer/pytorch-fid" -> "ajbrock/BigGAN-PyTorch"
"mseitzer/pytorch-fid" -> "pfnet-research/sngan_projection"
"mseitzer/pytorch-fid" -> "NVlabs/stylegan2-ada-pytorch"
"mseitzer/pytorch-fid" -> "openai/guided-diffusion" ["e"=1]
"mseitzer/pytorch-fid" -> "taesungp/contrastive-unpaired-translation"
"mseitzer/pytorch-fid" -> "NVlabs/MUNIT"
"mseitzer/pytorch-fid" -> "switchablenorms/CelebAMask-HQ"
"mseitzer/pytorch-fid" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"rosinality/style-based-gan-pytorch" -> "rosinality/stylegan2-pytorch"
"rosinality/style-based-gan-pytorch" -> "tomguluson92/StyleGAN_PyTorch"
"rosinality/style-based-gan-pytorch" -> "huangzh13/StyleGAN.pytorch"
"rosinality/style-based-gan-pytorch" -> "lernapparat/lernapparat"
"rosinality/style-based-gan-pytorch" -> "ajbrock/BigGAN-PyTorch"
"rosinality/style-based-gan-pytorch" -> "Puzer/stylegan-encoder"
"rosinality/style-based-gan-pytorch" -> "facebookresearch/pytorch_GAN_zoo"
"rosinality/style-based-gan-pytorch" -> "nashory/pggan-pytorch"
"rosinality/style-based-gan-pytorch" -> "mseitzer/pytorch-fid"
"rosinality/style-based-gan-pytorch" -> "LMescheder/GAN_stability"
"rosinality/style-based-gan-pytorch" -> "NVlabs/FUNIT"
"rosinality/style-based-gan-pytorch" -> "switchablenorms/CelebAMask-HQ"
"rosinality/style-based-gan-pytorch" -> "lucidrains/stylegan2-pytorch"
"rosinality/style-based-gan-pytorch" -> "naoto0804/pytorch-AdaIN"
"rosinality/style-based-gan-pytorch" -> "eladrich/pixel2style2pixel"
"senguptaumd/Background-Matting" -> "PeterL1n/BackgroundMattingV2"
"senguptaumd/Background-Matting" -> "ZHKKKe/MODNet"
"senguptaumd/Background-Matting" -> "pymatting/pymatting"
"senguptaumd/Background-Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"senguptaumd/Background-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"senguptaumd/Background-Matting" -> "NathanUA/U-2-Net"
"senguptaumd/Background-Matting" -> "foamliu/Deep-Image-Matting"
"senguptaumd/Background-Matting" -> "vt-vl-lab/3d-photo-inpainting"
"senguptaumd/Background-Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"senguptaumd/Background-Matting" -> "Yaoyi-Li/GCA-Matting"
"senguptaumd/Background-Matting" -> "podgorskiy/ALAE"
"senguptaumd/Background-Matting" -> "aisegmentcn/matting_human_datasets"
"senguptaumd/Background-Matting" -> "dbolya/yolact" ["e"=1]
"senguptaumd/Background-Matting" -> "PeterL1n/RobustVideoMatting"
"senguptaumd/Background-Matting" -> "NVlabs/few-shot-vid2vid"
"tomguluson92/StyleGAN_PyTorch" -> "lernapparat/lernapparat"
"tomguluson92/StyleGAN_PyTorch" -> "rosinality/style-based-gan-pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "huangzh13/StyleGAN.pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "rosinality/stylegan2-pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "SiskonEmilia/StyleGAN-PyTorch"
"tomguluson92/StyleGAN_PyTorch" -> "naoto0804/pytorch-AdaIN"
"tomguluson92/StyleGAN_PyTorch" -> "akanimax/pro_gan_pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "HsinYingLee/DRIT"
"tomguluson92/StyleGAN_PyTorch" -> "nashory/pggan-pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"tomguluson92/StyleGAN_PyTorch" -> "tomguluson92/StyleGAN2_PyTorch"
"tomguluson92/StyleGAN_PyTorch" -> "lucidrains/stylegan2-pytorch"
"tomguluson92/StyleGAN_PyTorch" -> "weihaox/awesome-gan-inversion"
"tomguluson92/StyleGAN_PyTorch" -> "Puzer/stylegan-encoder"
"tomguluson92/StyleGAN_PyTorch" -> "mseitzer/pytorch-fid"
"vt-vl-lab/3d-photo-inpainting" -> "bmild/nerf" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "facebookresearch/pifuhd"
"vt-vl-lab/3d-photo-inpainting" -> "senguptaumd/Background-Matting"
"vt-vl-lab/3d-photo-inpainting" -> "sniklaus/3d-ken-burns" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "intel-isl/MiDaS" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "AliaksandrSiarohin/first-order-model"
"vt-vl-lab/3d-photo-inpainting" -> "NVlabs/instant-ngp" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "minivision-ai/photo2cartoon"
"vt-vl-lab/3d-photo-inpainting" -> "facebookresearch/consistent_depth" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "PeterL1n/BackgroundMattingV2"
"vt-vl-lab/3d-photo-inpainting" -> "JiahuiYu/generative_inpainting" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "baowenbo/DAIN"
"vt-vl-lab/3d-photo-inpainting" -> "facebookresearch/one_shot_3d_photography" ["e"=1]
"vt-vl-lab/3d-photo-inpainting" -> "SystemErrorWang/White-box-Cartoonization"
"vt-vl-lab/3d-photo-inpainting" -> "NVlabs/imaginaire"
"weihaox/awesome-gan-inversion" -> "omertov/encoder4editing"
"weihaox/awesome-gan-inversion" -> "danielroich/PTI"
"weihaox/awesome-gan-inversion" -> "Tengfei-Wang/HFGI"
"weihaox/awesome-gan-inversion" -> "yuval-alaluf/hyperstyle"
"weihaox/awesome-gan-inversion" -> "rosinality/stylegan2-pytorch"
"weihaox/awesome-gan-inversion" -> "genforce/idinvert_pytorch"
"weihaox/awesome-gan-inversion" -> "yuval-alaluf/stylegan3-editing"
"weihaox/awesome-gan-inversion" -> "yuval-alaluf/restyle-encoder"
"weihaox/awesome-gan-inversion" -> "genforce/interfacegan"
"weihaox/awesome-gan-inversion" -> "weihaox/awesome-image-translation"
"weihaox/awesome-gan-inversion" -> "eladrich/pixel2style2pixel"
"weihaox/awesome-gan-inversion" -> "stylegan-human/StyleGAN-Human"
"weihaox/awesome-gan-inversion" -> "autonomousvision/stylegan_xl"
"weihaox/awesome-gan-inversion" -> "nupurkmr9/vision-aided-gan"
"weihaox/awesome-gan-inversion" -> "genforce/genforce"
"weihaox/awesome-image-translation" -> "weihaox/awesome-gan-inversion"
"weihaox/awesome-image-translation" -> "taesungp/contrastive-unpaired-translation"
"weihaox/awesome-image-translation" -> "lzhbrian/image-to-image-papers"
"weihaox/awesome-image-translation" -> "ZPdesu/SEAN"
"weihaox/awesome-image-translation" -> "microsoft/CoCosNet" ["e"=1]
"weihaox/awesome-image-translation" -> "rosinality/stylegan2-pytorch"
"weihaox/awesome-image-translation" -> "omertov/encoder4editing"
"weihaox/awesome-image-translation" -> "GaParmar/clean-fid"
"weihaox/awesome-image-translation" -> "Ha0Tang/AttentionGAN"
"weihaox/awesome-image-translation" -> "wpeebles/gangealing"
"weihaox/awesome-image-translation" -> "autonomousvision/stylegan_xl"
"weihaox/awesome-image-translation" -> "genforce/genforce"
"weihaox/awesome-image-translation" -> "PITI-Synthesis/PITI" ["e"=1]
"weihaox/awesome-image-translation" -> "Janspiry/Palette-Image-to-Image-Diffusion-Models" ["e"=1]
"weihaox/awesome-image-translation" -> "eladrich/pixel2style2pixel"
"saic-mdal/lama" -> "CompVis/latent-diffusion" ["e"=1]
"saic-mdal/lama" -> "andreas128/RePaint" ["e"=1]
"saic-mdal/lama" -> "yangxy/GPEN"
"saic-mdal/lama" -> "Sanster/lama-cleaner" ["e"=1]
"saic-mdal/lama" -> "JiahuiYu/generative_inpainting" ["e"=1]
"saic-mdal/lama" -> "eladrich/pixel2style2pixel"
"saic-mdal/lama" -> "JingyunLiang/SwinIR" ["e"=1]
"saic-mdal/lama" -> "PeterL1n/RobustVideoMatting"
"saic-mdal/lama" -> "open-mmlab/mmediting" ["e"=1]
"saic-mdal/lama" -> "xinntao/Real-ESRGAN" ["e"=1]
"saic-mdal/lama" -> "fenglinglwb/MAT" ["e"=1]
"saic-mdal/lama" -> "kestra-io/kestra" ["e"=1]
"saic-mdal/lama" -> "ZHKKKe/MODNet"
"saic-mdal/lama" -> "openai/guided-diffusion" ["e"=1]
"saic-mdal/lama" -> "openai/glide-text2im" ["e"=1]
"hanzhanggit/StackGAN-v2" -> "hanzhanggit/StackGAN-Pytorch"
"hanzhanggit/StackGAN-v2" -> "taoxugit/AttnGAN"
"hanzhanggit/StackGAN-v2" -> "hanzhanggit/StackGAN"
"hanzhanggit/StackGAN-v2" -> "reedscot/icml2016"
"hanzhanggit/StackGAN-v2" -> "aelnouby/Text-to-Image-Synthesis"
"hanzhanggit/StackGAN-v2" -> "zsdonghao/text-to-image"
"hanzhanggit/StackGAN-v2" -> "ypxie/HDGan"
"hanzhanggit/StackGAN-v2" -> "MinfengZhu/DM-GAN"
"hanzhanggit/StackGAN-v2" -> "reedscot/cvpr2016"
"hanzhanggit/StackGAN-v2" -> "qiaott/MirrorGAN"
"hanzhanggit/StackGAN-v2" -> "mrlibw/ControlGAN"
"hanzhanggit/StackGAN-v2" -> "lzhbrian/arbitrary-text-to-image-papers"
"hanzhanggit/StackGAN-v2" -> "hanzhanggit/StackGAN-inception-model"
"hanzhanggit/StackGAN-v2" -> "bioinf-jku/TTUR"
"hanzhanggit/StackGAN-v2" -> "ptrblck/prog_gans_pytorch_inference"
"roatienza/Deep-Learning-Experiments" -> "osh/KerasGAN"
"roatienza/Deep-Learning-Experiments" -> "jacobgil/keras-dcgan"
"roatienza/Deep-Learning-Experiments" -> "bstriner/keras-adversarial"
"roatienza/Deep-Learning-Experiments" -> "PacktPublishing/Advanced-Deep-Learning-with-Keras" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "roatienza/ml"
"roatienza/Deep-Learning-Experiments" -> "tdeboissiere/DeepLearningImplementations"
"roatienza/Deep-Learning-Experiments" -> "rockingdingo/deepnlp" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "ilivans/tf-rnn-attention" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "meereeum/lda2vec-tf" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "adeshpande3/Tensorflow-Programs-and-Tutorials" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "leriomaggio/deep-learning-keras-tensorflow" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "uclaacmai/Generative-Adversarial-Network-Tutorial"
"roatienza/Deep-Learning-Experiments" -> "tjwei/GANotebooks"
"roatienza/Deep-Learning-Experiments" -> "yhenon/keras-frcnn" ["e"=1]
"roatienza/Deep-Learning-Experiments" -> "eriklindernoren/Keras-GAN"
"robbiebarrat/rapping-neural-network" -> "robbiebarrat/art-DCGAN"
"robbiebarrat/rapping-neural-network" -> "robbiebarrat/plant-art"
"robbiebarrat/rapping-neural-network" -> "robbiebarrat/Bach_AI"
"robbiebarrat/rapping-neural-network" -> "robbiebarrat/twitter-contest-enterer"
"robbiebarrat/rapping-neural-network" -> "ryankiros/neural-storyteller"
"robbiebarrat/rapping-neural-network" -> "johnwmillr/LyricsGenius" ["e"=1]
"robbiebarrat/rapping-neural-network" -> "robbiebarrat/Sculpture-GAN"
"robbiebarrat/rapping-neural-network" -> "tonybeltramelli/Deep-Lyrics"
"robbiebarrat/rapping-neural-network" -> "jostmey/rwa" ["e"=1]
"robbiebarrat/rapping-neural-network" -> "saurabhmathur96/clickbait-detector"
"robbiebarrat/rapping-neural-network" -> "Hugo-Nattagh/2017-Hip-Hop" ["e"=1]
"robbiebarrat/rapping-neural-network" -> "jsvine/markovify" ["e"=1]
"robbiebarrat/rapping-neural-network" -> "zxytim/neural-painter" ["e"=1]
"robbiebarrat/rapping-neural-network" -> "rkjones4/GANGogh"
"robbiebarrat/rapping-neural-network" -> "jcjohnson/torch-rnn" ["e"=1]
"Ha0Tang/EdgeGAN" -> "Ha0Tang/ASGAN"
"mit-han-lab/data-efficient-gans" -> "rosinality/stylegan2-pytorch"
"mit-han-lab/data-efficient-gans" -> "NVlabs/stylegan2-ada"
"mit-han-lab/data-efficient-gans" -> "GaParmar/clean-fid"
"mit-han-lab/data-efficient-gans" -> "mit-han-lab/anycost-gan"
"mit-han-lab/data-efficient-gans" -> "davidbau/rewriting"
"mit-han-lab/data-efficient-gans" -> "genforce/genforce"
"mit-han-lab/data-efficient-gans" -> "mit-han-lab/gan-compression"
"mit-han-lab/data-efficient-gans" -> "weihaox/awesome-gan-inversion"
"mit-han-lab/data-efficient-gans" -> "NVlabs/stylegan2-ada-pytorch"
"mit-han-lab/data-efficient-gans" -> "harskish/ganspace"
"mit-han-lab/data-efficient-gans" -> "genforce/sefa"
"mit-han-lab/data-efficient-gans" -> "autonomousvision/projected_gan"
"mit-han-lab/data-efficient-gans" -> "taesungp/swapping-autoencoder-pytorch"
"mit-han-lab/data-efficient-gans" -> "ajbrock/BigGAN-PyTorch"
"mit-han-lab/data-efficient-gans" -> "taesungp/contrastive-unpaired-translation"
"podgorskiy/ALAE" -> "clovaai/stargan-v2"
"podgorskiy/ALAE" -> "rosinality/stylegan2-pytorch"
"podgorskiy/ALAE" -> "eladrich/pixel2style2pixel"
"podgorskiy/ALAE" -> "tamarott/SinGAN"
"podgorskiy/ALAE" -> "genforce/interfacegan"
"podgorskiy/ALAE" -> "NVlabs/imaginaire"
"podgorskiy/ALAE" -> "NVlabs/stylegan2"
"podgorskiy/ALAE" -> "RameenAbdal/StyleFlow"
"podgorskiy/ALAE" -> "senguptaumd/Background-Matting"
"podgorskiy/ALAE" -> "lucidrains/stylegan2-pytorch"
"podgorskiy/ALAE" -> "ajbrock/BigGAN-PyTorch"
"podgorskiy/ALAE" -> "switchablenorms/CelebAMask-HQ"
"podgorskiy/ALAE" -> "harskish/ganspace"
"podgorskiy/ALAE" -> "NVlabs/stylegan2-ada-pytorch"
"podgorskiy/ALAE" -> "Puzer/stylegan-encoder"
"reedscot/icml2016" -> "reedscot/cvpr2016"
"reedscot/icml2016" -> "hanzhanggit/StackGAN"
"reedscot/icml2016" -> "reedscot/nips2016"
"reedscot/icml2016" -> "paarthneekhara/text-to-image"
"reedscot/icml2016" -> "aelnouby/Text-to-Image-Synthesis"
"reedscot/icml2016" -> "zsdonghao/text-to-image"
"reedscot/icml2016" -> "hanzhanggit/StackGAN-v2"
"reedscot/icml2016" -> "soumith/dcgan.torch"
"reedscot/icml2016" -> "taoxugit/AttnGAN"
"reedscot/icml2016" -> "emansim/text2image"
"reedscot/icml2016" -> "hanzhanggit/StackGAN-Pytorch"
"reedscot/icml2016" -> "openai/improved-gan"
"reedscot/icml2016" -> "facebook/eyescream"
"reedscot/icml2016" -> "cvondrick/videogan"
"reedscot/icml2016" -> "Evolving-AI-Lab/ppgn"
"JVictorDias/ParticulasGravitacionais3D" -> "JVictorDias/Spirograph"
"JVictorDias/ParticulasGravitacionais3D" -> "JVictorDias/HardestGameEditor"
"axinc-ai/ailia-models" -> "PINTO0309/PINTO_model_zoo" ["e"=1]
"axinc-ai/ailia-models" -> "xuebinqin/U-2-Net"
"axinc-ai/ailia-models" -> "nadermx/backgroundremover"
"axinc-ai/ailia-models" -> "xuebinqin/DIS"
"axinc-ai/ailia-models" -> "ZHKKKe/MODNet"
"axinc-ai/ailia-models" -> "danielgatis/rembg"
"axinc-ai/ailia-models" -> "OPHoperHPO/image-background-remove-tool"
"axinc-ai/ailia-models" -> "mchong6/JoJoGAN"
"axinc-ai/ailia-models" -> "DefTruth/lite.ai.toolkit" ["e"=1]
"axinc-ai/ailia-models" -> "mikel-brostrom/Yolov5_StrongSORT_OSNet" ["e"=1]
"axinc-ai/ailia-models" -> "wmcnally/kapao" ["e"=1]
"axinc-ai/ailia-models" -> "ppogg/YOLOv5-Lite" ["e"=1]
"axinc-ai/ailia-models" -> "jinfagang/yolov7" ["e"=1]
"axinc-ai/ailia-models" -> "nihui/opencv-mobile" ["e"=1]
"axinc-ai/ailia-models" -> "williamyang1991/DualStyleGAN"
"EuphoriaYan/zi2zi-pytorch" -> "ecnuycxie/DG-Font"
"EuphoriaYan/zi2zi-pytorch" -> "JeanWU/CalliGAN"
"EuphoriaYan/zi2zi-pytorch" -> "Arctanxy/W-Net-PyTorch"
"EuphoriaYan/zi2zi-pytorch" -> "jasonlo0509/Font2Font"
"anishathalye/neural-style" -> "lengstrom/fast-style-transfer"
"anishathalye/neural-style" -> "andersbll/neural_artistic_style"
"anishathalye/neural-style" -> "fzliu/style-transfer"
"anishathalye/neural-style" -> "cysmith/neural-style-tf"
"anishathalye/neural-style" -> "jcjohnson/neural-style"
"anishathalye/neural-style" -> "jcjohnson/fast-neural-style"
"anishathalye/neural-style" -> "titu1994/Neural-Style-Transfer"
"anishathalye/neural-style" -> "carpedm20/DCGAN-tensorflow"
"anishathalye/neural-style" -> "alexjc/neural-doodle"
"anishathalye/neural-style" -> "tensorflow/magenta"
"anishathalye/neural-style" -> "ycjing/Neural-Style-Transfer-Papers"
"anishathalye/neural-style" -> "hzy46/fast-neural-style-tensorflow"
"anishathalye/neural-style" -> "luanfujun/deep-photo-styletransfer"
"anishathalye/neural-style" -> "ethereon/caffe-tensorflow" ["e"=1]
"anishathalye/neural-style" -> "affinelayer/pix2pix-tensorflow"
"saic-mdal/HiDT" -> "EvgenyKashin/stylegan2-distillation"
"saic-mdal/HiDT" -> "sunniesuhyoung/DST"
"saic-mdal/HiDT" -> "Onr/Council-GAN"
"saic-mdal/HiDT" -> "lzhbrian/image-to-image-papers"
"saic-mdal/HiDT" -> "clovaai/stargan-v2"
"saic-mdal/HiDT" -> "ZPdesu/SEAN"
"saic-mdal/HiDT" -> "Seanseattle/SMIS" ["e"=1]
"saic-mdal/HiDT" -> "mit-han-lab/gan-compression"
"saic-mdal/HiDT" -> "menyifang/ADGAN" ["e"=1]
"saic-mdal/HiDT" -> "EndlessSora/TSIT" ["e"=1]
"saic-mdal/HiDT" -> "Ha0Tang/AttentionGAN"
"saic-mdal/HiDT" -> "clovaai/tunit"
"saic-mdal/HiDT" -> "eliahuhorwitz/DeepSIM"
"saic-mdal/HiDT" -> "clovaai/WCT2"
"saic-mdal/HiDT" -> "microsoft/CoCosNet-v2" ["e"=1]
"fzliu/style-transfer" -> "andersbll/neural_artistic_style"
"fzliu/style-transfer" -> "anishathalye/neural-style"
"fzliu/style-transfer" -> "titu1994/Neural-Style-Transfer"
"fzliu/style-transfer" -> "jcjohnson/fast-neural-style"
"fzliu/style-transfer" -> "ycjing/Neural-Style-Transfer-Papers"
"fzliu/style-transfer" -> "lengstrom/fast-style-transfer"
"fzliu/style-transfer" -> "woodrush/neural-art-tf"
"fzliu/style-transfer" -> "manuelruder/artistic-videos"
"fzliu/style-transfer" -> "chuanli11/CNNMRF"
"fzliu/style-transfer" -> "yusuketomoto/chainer-fast-neuralstyle"
"fzliu/style-transfer" -> "hzy46/fast-neural-style-tensorflow"
"fzliu/style-transfer" -> "DmitryUlyanov/texture_nets"
"fzliu/style-transfer" -> "jcjohnson/neural-style"
"fzliu/style-transfer" -> "kaishengtai/neuralart"
"fzliu/style-transfer" -> "rtqichen/style-swap"
"zllrunning/face-parsing.PyTorch" -> "switchablenorms/CelebAMask-HQ"
"zllrunning/face-parsing.PyTorch" -> "zllrunning/face-makeup.PyTorch"
"zllrunning/face-parsing.PyTorch" -> "cleardusk/3DDFA_V2" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "microsoft/Deep3DFaceReconstruction" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "YadiraF/DECA" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "YadiraF/face3d" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "sicxu/Deep3DFaceRecon_pytorch" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "omertov/encoder4editing"
"zllrunning/face-parsing.PyTorch" -> "YuvalNirkin/face_segmentation" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "rosinality/stylegan2-pytorch"
"zllrunning/face-parsing.PyTorch" -> "CoinCheung/BiSeNet" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "genforce/interfacegan"
"zllrunning/face-parsing.PyTorch" -> "cleardusk/3DDFA" ["e"=1]
"zllrunning/face-parsing.PyTorch" -> "wtjiang98/PSGAN"
"zllrunning/face-parsing.PyTorch" -> "zhuhao-nju/facescape" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "NVIDIA/pix2pixHD"
"DmitryUlyanov/deep-image-prior" -> "yunjey/StarGAN"
"DmitryUlyanov/deep-image-prior" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"DmitryUlyanov/deep-image-prior" -> "tkarras/progressive_growing_of_gans"
"DmitryUlyanov/deep-image-prior" -> "luanfujun/deep-photo-styletransfer"
"DmitryUlyanov/deep-image-prior" -> "JiahuiYu/generative_inpainting" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "junyanz/iGAN"
"DmitryUlyanov/deep-image-prior" -> "lengstrom/fast-style-transfer"
"DmitryUlyanov/deep-image-prior" -> "KupynOrest/DeblurGAN" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "alexjc/neural-enhance"
"DmitryUlyanov/deep-image-prior" -> "xinntao/BasicSR" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "oarriaga/face_classification" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "NVIDIA/vid2vid"
"DmitryUlyanov/deep-image-prior" -> "andabi/deep-voice-conversion" ["e"=1]
"DmitryUlyanov/deep-image-prior" -> "soumith/ganhacks"
"tg-bomze/Face-Image-Motion-Model" -> "tg-bomze/StyleGAN2-Face-Modificator"
"tg-bomze/Face-Image-Motion-Model" -> "tg-bomze/ENTAR"
"tg-bomze/Face-Image-Motion-Model" -> "rolux/stylegan2encoder"
"tg-bomze/Face-Image-Motion-Model" -> "AliaksandrSiarohin/motion-cosegmentation" ["e"=1]
"tg-bomze/Face-Image-Motion-Model" -> "EvgenyKashin/stylegan2-distillation"
"tg-bomze/Face-Image-Motion-Model" -> "NVlabs/few-shot-vid2vid"
"tg-bomze/Face-Image-Motion-Model" -> "yiranran/Audio-driven-TalkingFace-HeadPose" ["e"=1]
"tg-bomze/Face-Image-Motion-Model" -> "yzhq97/transmomo.pytorch" ["e"=1]
"tg-bomze/StyleGAN2-Face-Modificator" -> "tg-bomze/Face-Image-Motion-Model"
"tg-bomze/StyleGAN2-Face-Modificator" -> "rolux/stylegan2encoder"
"tg-bomze/StyleGAN2-Face-Modificator" -> "justinpinkney/awesome-pretrained-stylegan"
"tg-bomze/StyleGAN2-Face-Modificator" -> "woctezuma/stylegan2-projecting-images"
"tg-bomze/StyleGAN2-Face-Modificator" -> "EvgenyKashin/stylegan2-distillation"
"tg-bomze/StyleGAN2-Face-Modificator" -> "tg-bomze/ENTAR"
"oneThousand1000/HairMapper" -> "oneThousand1000/non-hair-FFHQ"
"oneThousand1000/HairMapper" -> "wty-ustc/HairCLIP"
"oneThousand1000/HairMapper" -> "Taeu/Style-Your-Hair"
"oneThousand1000/HairMapper" -> "dukebw/LOHO"
"oneThousand1000/HairMapper" -> "seasonSH/SemanticStyleGAN"
"oneThousand1000/HairMapper" -> "HavenFeng/TRUST" ["e"=1]
"oneThousand1000/HairMapper" -> "foivospar/NED" ["e"=1]
"oneThousand1000/HairMapper" -> "jiaxinxie97/HFGI3D" ["e"=1]
"vinthony/ghost-free-shadow-removal" -> "cvlab-stonybrook/SID"
"vinthony/ghost-free-shadow-removal" -> "tsingqguo/exposure-fusion-shadow-removal"
"vinthony/ghost-free-shadow-removal" -> "naoto0804/SynShadow"
"vinthony/ghost-free-shadow-removal" -> "stevewongv/DSC-PyTorch"
"vinthony/ghost-free-shadow-removal" -> "xw-hu/Mask-ShadowGAN"
"vinthony/ghost-free-shadow-removal" -> "jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal"
"vinthony/ghost-free-shadow-removal" -> "google/portrait-shadow-manipulation"
"vinthony/ghost-free-shadow-removal" -> "hhqweasd/G2R-ShadowNet"
"vinthony/ghost-free-shadow-removal" -> "DeepInsight-PCALab/ST-CGAN"
"vinthony/ghost-free-shadow-removal" -> "zijundeng/BDRAR"
"vinthony/ghost-free-shadow-removal" -> "xw-hu/DSC"
"vinthony/ghost-free-shadow-removal" -> "zhling2020/RIS-GAN"
"vinthony/ghost-free-shadow-removal" -> "Xiaoming-Yu/ShadowRemoval"
"vinthony/ghost-free-shadow-removal" -> "GuoLanqing/ShadowFormer"
"vinthony/ghost-free-shadow-removal" -> "GuoLanqing/Awesome-Shadow-Removal"
"AaronJny/nerual_style_change" -> "AaronJny/DeepLearningExamples"
"AaronJny/nerual_style_change" -> "CortexFoundation/StyleTransferTrilogy"
"edenton/drnet-py" -> "edenton/drnet"
"edenton/drnet-py" -> "ap229997/DRNET"
"NVlabs/alias-free-gan" -> "rosinality/alias-free-gan-pytorch"
"NVlabs/alias-free-gan" -> "rinongal/StyleGAN-nada"
"NVlabs/alias-free-gan" -> "rosinality/stylegan2-pytorch"
"NVlabs/alias-free-gan" -> "danielroich/PTI"
"NVlabs/alias-free-gan" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/alias-free-gan" -> "yuval-alaluf/restyle-encoder"
"NVlabs/alias-free-gan" -> "mit-han-lab/data-efficient-gans"
"NVlabs/alias-free-gan" -> "NVlabs/stylegan2-ada"
"NVlabs/alias-free-gan" -> "weihaox/awesome-gan-inversion"
"NVlabs/alias-free-gan" -> "autonomousvision/stylegan_xl"
"NVlabs/alias-free-gan" -> "dorarad/gansformer"
"NVlabs/alias-free-gan" -> "justinpinkney/awesome-pretrained-stylegan2"
"NVlabs/alias-free-gan" -> "eladrich/pixel2style2pixel"
"NVlabs/alias-free-gan" -> "orpatashnik/StyleCLIP"
"NVlabs/alias-free-gan" -> "genforce/genforce"
"anopara/genetic-drawing" -> "EmbarkStudios/texture-synthesis" ["e"=1]
"anopara/genetic-drawing" -> "IRCSS/Procedural-painting" ["e"=1]
"anopara/genetic-drawing" -> "jasonwebb/morphogenesis-resources" ["e"=1]
"anopara/genetic-drawing" -> "yemount/pose-animator"
"anopara/genetic-drawing" -> "penrose/penrose" ["e"=1]
"anopara/genetic-drawing" -> "jiupinjia/stylized-neural-painting"
"anopara/genetic-drawing" -> "senguptaumd/Background-Matting"
"anopara/genetic-drawing" -> "facebookresearch/pifuhd"
"anopara/genetic-drawing" -> "SystemErrorWang/White-box-Cartoonization"
"anopara/genetic-drawing" -> "LingDong-/shan-shui-inf" ["e"=1]
"anopara/genetic-drawing" -> "Fewes/MinimalAtmosphere" ["e"=1]
"anopara/genetic-drawing" -> "vt-vl-lab/3d-photo-inpainting"
"anopara/genetic-drawing" -> "vijishmadhavan/ArtLine"
"anopara/genetic-drawing" -> "carlini/printf-tac-toe" ["e"=1]
"anopara/genetic-drawing" -> "tg-bomze/Face-Depixelizer"
"manuelruder/fast-artistic-videos" -> "manuelruder/artistic-videos"
"manuelruder/fast-artistic-videos" -> "zeruniverse/fast-artistic-videos"
"manuelruder/fast-artistic-videos" -> "sunshineatnoon/LinearStyleTransfer"
"manuelruder/fast-artistic-videos" -> "CompVis/adaptive-style-transfer"
"manuelruder/fast-artistic-videos" -> "phoenix104104/fast_blind_video_consistency" ["e"=1]
"manuelruder/fast-artistic-videos" -> "NameRX/artistic-videos"
"manuelruder/fast-artistic-videos" -> "ProGamerGov/Neural-Zoom"
"ali-design/gan_steerability" -> "anvoynov/GANLatentDiscovery"
"tamarott/SinGAN" -> "ajbrock/BigGAN-PyTorch"
"tamarott/SinGAN" -> "clovaai/stargan-v2"
"tamarott/SinGAN" -> "mseitzer/pytorch-fid"
"tamarott/SinGAN" -> "NVlabs/MUNIT"
"tamarott/SinGAN" -> "rosinality/stylegan2-pytorch"
"tamarott/SinGAN" -> "tohinz/ConSinGAN"
"tamarott/SinGAN" -> "NVlabs/FUNIT"
"tamarott/SinGAN" -> "heykeetae/Self-Attention-GAN"
"tamarott/SinGAN" -> "FriedRonaldo/SinGAN"
"tamarott/SinGAN" -> "NVIDIA/pix2pixHD"
"tamarott/SinGAN" -> "richzhang/PerceptualSimilarity"
"tamarott/SinGAN" -> "JiahuiYu/generative_inpainting" ["e"=1]
"tamarott/SinGAN" -> "open-mmlab/mmsr" ["e"=1]
"tamarott/SinGAN" -> "NVlabs/SPADE"
"tamarott/SinGAN" -> "taesungp/contrastive-unpaired-translation"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Flappy-Bird-AI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/RubiksCubeAI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Pool_AI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/Google-Chrome-Dino-Game-AI" -> "Code-Bullet/MarbleCalculator"
"xuebinqin/U-2-Net" -> "xuebinqin/DIS"
"xuebinqin/U-2-Net" -> "danielgatis/rembg"
"xuebinqin/U-2-Net" -> "ZHKKKe/MODNet"
"xuebinqin/U-2-Net" -> "pymatting/pymatting"
"xuebinqin/U-2-Net" -> "xuebinqin/BASNet" ["e"=1]
"xuebinqin/U-2-Net" -> "PeterL1n/BackgroundMattingV2"
"xuebinqin/U-2-Net" -> "nadermx/backgroundremover"
"xuebinqin/U-2-Net" -> "saic-mdal/lama"
"xuebinqin/U-2-Net" -> "PeterL1n/RobustVideoMatting"
"xuebinqin/U-2-Net" -> "PaddlePaddle/PaddleSeg" ["e"=1]
"xuebinqin/U-2-Net" -> "open-mmlab/mmsegmentation" ["e"=1]
"xuebinqin/U-2-Net" -> "qubvel/segmentation_models.pytorch" ["e"=1]
"xuebinqin/U-2-Net" -> "milesial/Pytorch-UNet" ["e"=1]
"xuebinqin/U-2-Net" -> "microsoft/Swin-Transformer" ["e"=1]
"xuebinqin/U-2-Net" -> "zllrunning/face-parsing.PyTorch"
"brilam/remove-bg" -> "pymatting/pymatting"
"brilam/remove-bg" -> "foamliu/Deep-Image-Matting"
"brilam/remove-bg" -> "remove-bg/go"
"brilam/remove-bg" -> "foamliu/Deep-Image-Matting-PyTorch"
"brilam/remove-bg" -> "takiyu/portrait_matting"
"brilam/remove-bg" -> "susheelsk/image-background-removal"
"brilam/remove-bg" -> "eti-p-doray/unet-gan-matting"
"brilam/remove-bg" -> "poppinace/indexnet_matting"
"brilam/remove-bg" -> "mtownsend5512/remove-bg"
"dunnousername/yanderifier" -> "AliaksandrSiarohin/first-order-model"
"dunnousername/yanderifier" -> "Rudrabha/Wav2Lip" ["e"=1]
"dunnousername/yanderifier" -> "anandpawara/Real_Time_Image_Animation"
"dunnousername/yanderifier" -> "neuralchen/SimSwap" ["e"=1]
"dunnousername/yanderifier" -> "xfgryujk/blivechat" ["e"=1]
"dunnousername/yanderifier" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"dunnousername/yanderifier" -> "alievk/avatarify-python"
"dunnousername/yanderifier" -> "iPERDance/iPERCore"
"dunnousername/yanderifier" -> "SteamTools-Team/SteamTools" ["e"=1]
"dunnousername/yanderifier" -> "itorr/nbnhhsh" ["e"=1]
"dunnousername/yanderifier" -> "DinoMan/speech-driven-animation" ["e"=1]
"dunnousername/yanderifier" -> "PantsuDango/Dango-Translator" ["e"=1]
"dunnousername/yanderifier" -> "rmbadmin/SteamTools" ["e"=1]
"dunnousername/yanderifier" -> "KuangDD/zhrtvc" ["e"=1]
"dunnousername/yanderifier" -> "pkhungurn/talking-head-anime-demo" ["e"=1]
"rinongal/StyleGAN-nada" -> "yuval-alaluf/restyle-encoder"
"rinongal/StyleGAN-nada" -> "yuval-alaluf/hyperstyle"
"rinongal/StyleGAN-nada" -> "autonomousvision/stylegan_xl"
"rinongal/StyleGAN-nada" -> "omertov/encoder4editing"
"rinongal/StyleGAN-nada" -> "danielroich/PTI"
"rinongal/StyleGAN-nada" -> "yuval-alaluf/stylegan3-editing"
"rinongal/StyleGAN-nada" -> "orpatashnik/StyleCLIP"
"rinongal/StyleGAN-nada" -> "stylegan-human/StyleGAN-Human"
"rinongal/StyleGAN-nada" -> "rosinality/stylegan2-pytorch"
"rinongal/StyleGAN-nada" -> "weihaox/awesome-gan-inversion"
"rinongal/StyleGAN-nada" -> "eladrich/pixel2style2pixel"
"rinongal/StyleGAN-nada" -> "mchong6/JoJoGAN"
"rinongal/StyleGAN-nada" -> "NVlabs/alias-free-gan"
"rinongal/StyleGAN-nada" -> "wty-ustc/HairCLIP"
"rinongal/StyleGAN-nada" -> "onion-liu/BlendGAN"
"davidADSP/GDL_code" -> "GANs-in-Action/gans-in-action"
"davidADSP/GDL_code" -> "davidADSP/Generative_Deep_Learning_2nd_Edition"
"davidADSP/GDL_code" -> "MLSlayer/Generative-Deep-Learning-Code-in-Pytorch"
"davidADSP/GDL_code" -> "eriklindernoren/Keras-GAN"
"davidADSP/GDL_code" -> "hundredblocks/ml-powered-applications" ["e"=1]
"davidADSP/GDL_code" -> "PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition" ["e"=1]
"davidADSP/GDL_code" -> "PacktPublishing/Advanced-Deep-Learning-with-Keras" ["e"=1]
"davidADSP/GDL_code" -> "nlp-with-transformers/notebooks" ["e"=1]
"davidADSP/GDL_code" -> "timsainb/tensorflow2-generative-models"
"davidADSP/GDL_code" -> "williamFalcon/pytorch-lightning" ["e"=1]
"davidADSP/GDL_code" -> "dsgiitr/d2l-pytorch" ["e"=1]
"davidADSP/GDL_code" -> "tensorflow/gan"
"davidADSP/GDL_code" -> "PacktPublishing/Deep-Reinforcement-Learning-Hands-On" ["e"=1]
"davidADSP/GDL_code" -> "joosthub/PyTorchNLPBook" ["e"=1]
"davidADSP/GDL_code" -> "PacktPublishing/Generative-Adversarial-Networks-Projects"
"JeremyCCHsu/tf-vaegan" -> "anitan0925/vaegan"
"JeremyCCHsu/tf-vaegan" -> "zhangqianhui/vae-gan-tensorflow"
"carpedm20/pixel-rnn-tensorflow" -> "openai/pixel-cnn"
"carpedm20/pixel-rnn-tensorflow" -> "anantzoid/Conditional-PixelCNN-decoder"
"carpedm20/pixel-rnn-tensorflow" -> "kundan2510/pixelCNN"
"carpedm20/pixel-rnn-tensorflow" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"carpedm20/pixel-rnn-tensorflow" -> "igul222/pixel_rnn"
"carpedm20/pixel-rnn-tensorflow" -> "ericjang/draw"
"carpedm20/pixel-rnn-tensorflow" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"carpedm20/pixel-rnn-tensorflow" -> "shiretzet/PixelRNN"
"carpedm20/pixel-rnn-tensorflow" -> "facebook/eyescream"
"carpedm20/pixel-rnn-tensorflow" -> "PrajitR/fast-pixel-cnn"
"carpedm20/pixel-rnn-tensorflow" -> "LeavesBreathe/tensorflow_with_latest_papers" ["e"=1]
"carpedm20/pixel-rnn-tensorflow" -> "yueatsprograms/Stochastic_Depth" ["e"=1]
"carpedm20/pixel-rnn-tensorflow" -> "carpedm20/simulated-unsupervised-tensorflow"
"carpedm20/pixel-rnn-tensorflow" -> "openai/InfoGAN"
"carpedm20/pixel-rnn-tensorflow" -> "andersbll/autoencoding_beyond_pixels"
"ericjang/draw" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"ericjang/draw" -> "jbornschein/draw" ["e"=1]
"ericjang/draw" -> "kvfrans/draw-color"
"ericjang/draw" -> "carpedm20/pixel-rnn-tensorflow"
"ericjang/draw" -> "vivanov879/draw" ["e"=1]
"ericjang/draw" -> "chenzhaomin123/draw_pytorch"
"ericjang/draw" -> "emansim/text2image"
"ericjang/draw" -> "hardmaru/cppn-gan-vae-tensorflow"
"ericjang/draw" -> "reedscot/icml2016"
"ericjang/draw" -> "shekkizh/WassersteinGAN.tensorflow"
"ericjang/draw" -> "openai/InfoGAN"
"ericjang/draw" -> "openai/pixel-cnn"
"ericjang/draw" -> "reedscot/nips2016"
"ericjang/draw" -> "qassemoquab/stnbhwd" ["e"=1]
"ericjang/draw" -> "facebook/eyescream"
"zhangqianhui/vae-gan-tensorflow" -> "JeremyCCHsu/tf-vaegan"
"zhangqianhui/vae-gan-tensorflow" -> "anitan0925/vaegan"
"zhangqianhui/vae-gan-tensorflow" -> "andersbll/autoencoding_beyond_pixels"
"zhangqianhui/vae-gan-tensorflow" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"zhangqianhui/vae-gan-tensorflow" -> "baudm/vaegan-celebs-keras"
"zhangqianhui/vae-gan-tensorflow" -> "lucabergamini/VAEGAN-PYTORCH"
"facebookresearch/pytorch_GAN_zoo" -> "ajbrock/BigGAN-PyTorch"
"facebookresearch/pytorch_GAN_zoo" -> "rosinality/stylegan2-pytorch"
"facebookresearch/pytorch_GAN_zoo" -> "google/compare_gan"
"facebookresearch/pytorch_GAN_zoo" -> "rosinality/style-based-gan-pytorch"
"facebookresearch/pytorch_GAN_zoo" -> "nashory/pggan-pytorch"
"facebookresearch/pytorch_GAN_zoo" -> "mseitzer/pytorch-fid"
"facebookresearch/pytorch_GAN_zoo" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"facebookresearch/pytorch_GAN_zoo" -> "tkarras/progressive_growing_of_gans"
"facebookresearch/pytorch_GAN_zoo" -> "znxlwm/pytorch-generative-model-collections"
"facebookresearch/pytorch_GAN_zoo" -> "LMescheder/GAN_stability"
"facebookresearch/pytorch_GAN_zoo" -> "torchgan/torchgan"
"facebookresearch/pytorch_GAN_zoo" -> "pfnet-research/sngan_projection"
"facebookresearch/pytorch_GAN_zoo" -> "NVlabs/MUNIT"
"facebookresearch/pytorch_GAN_zoo" -> "POSTECH-CVLab/PyTorch-StudioGAN"
"facebookresearch/pytorch_GAN_zoo" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"minivision-ai/photo2cartoon" -> "TachibanaYoshino/AnimeGAN"
"minivision-ai/photo2cartoon" -> "a312863063/generators-with-stylegan2"
"minivision-ai/photo2cartoon" -> "SystemErrorWang/White-box-Cartoonization"
"minivision-ai/photo2cartoon" -> "TachibanaYoshino/AnimeGANv2"
"minivision-ai/photo2cartoon" -> "znxlwm/UGATIT-pytorch"
"minivision-ai/photo2cartoon" -> "alievk/avatarify-python"
"minivision-ai/photo2cartoon" -> "eladrich/pixel2style2pixel"
"minivision-ai/photo2cartoon" -> "bryandlee/animegan2-pytorch"
"minivision-ai/photo2cartoon" -> "vt-vl-lab/3d-photo-inpainting"
"minivision-ai/photo2cartoon" -> "mnicnc404/CartoonGan-tensorflow"
"minivision-ai/photo2cartoon" -> "zllrunning/face-parsing.PyTorch"
"minivision-ai/photo2cartoon" -> "taki0112/UGATIT"
"minivision-ai/photo2cartoon" -> "ouyanghuiyu/chineseocr_lite" ["e"=1]
"minivision-ai/photo2cartoon" -> "NathanUA/U-2-Net"
"minivision-ai/photo2cartoon" -> "PaddlePaddle/PaddleGAN" ["e"=1]
"Blueteak/Unity-Neural-Network" -> "CarsonRoscoe/MachineWars"
"Evolving-AI-Lab/ppgn" -> "Evolving-AI-Lab/synthesizing"
"Evolving-AI-Lab/ppgn" -> "reedscot/nips2016"
"Evolving-AI-Lab/ppgn" -> "guojunq/lsgan"
"Evolving-AI-Lab/ppgn" -> "xunhuang1995/SGAN"
"Evolving-AI-Lab/ppgn" -> "Guim3/IcGAN"
"Evolving-AI-Lab/ppgn" -> "reedscot/icml2016"
"Evolving-AI-Lab/ppgn" -> "buriburisuri/ebgan"
"Evolving-AI-Lab/ppgn" -> "chuanli11/CNNMRF"
"Evolving-AI-Lab/ppgn" -> "buriburisuri/ac-gan"
"Evolving-AI-Lab/ppgn" -> "carpedm20/DiscoGAN-pytorch"
"Evolving-AI-Lab/ppgn" -> "carpedm20/BEGAN-tensorflow"
"Evolving-AI-Lab/ppgn" -> "openai/improved-gan"
"Evolving-AI-Lab/ppgn" -> "skaae/torch-gan" ["e"=1]
"Evolving-AI-Lab/ppgn" -> "facebook/eyescream"
"Evolving-AI-Lab/ppgn" -> "mingyuliutw/CoGAN"
"IshmaelBelghazi/ALI" -> "jeffdonahue/bigan"
"IshmaelBelghazi/ALI" -> "andersbll/autoencoding_beyond_pixels"
"IshmaelBelghazi/ALI" -> "yujiali/gmmn" ["e"=1]
"IshmaelBelghazi/ALI" -> "ChunyuanLI/ALICE"
"IshmaelBelghazi/ALI" -> "edgarriba/ali-pytorch"
"IshmaelBelghazi/ALI" -> "skaae/torch-gan" ["e"=1]
"IshmaelBelghazi/ALI" -> "coupriec/VideoPredictionICLR2016"
"Newmu/dcgan_code" -> "carpedm20/DCGAN-tensorflow"
"Newmu/dcgan_code" -> "soumith/dcgan.torch"
"Newmu/dcgan_code" -> "openai/improved-gan"
"Newmu/dcgan_code" -> "goodfeli/adversarial"
"Newmu/dcgan_code" -> "martinarjovsky/WassersteinGAN"
"Newmu/dcgan_code" -> "junyanz/iGAN"
"Newmu/dcgan_code" -> "jacobgil/keras-dcgan"
"Newmu/dcgan_code" -> "igul222/improved_wgan_training"
"Newmu/dcgan_code" -> "zhangqianhui/AdversarialNetsPapers"
"Newmu/dcgan_code" -> "soumith/ganhacks"
"Newmu/dcgan_code" -> "openai/InfoGAN"
"Newmu/dcgan_code" -> "bamos/dcgan-completion.tensorflow"
"Newmu/dcgan_code" -> "facebook/eyescream"
"Newmu/dcgan_code" -> "wiseodd/generative-models"
"Newmu/dcgan_code" -> "phillipi/pix2pix"
"PrajitR/fast-pixel-cnn" -> "anantzoid/Conditional-PixelCNN-decoder"
"PrajitR/fast-pixel-cnn" -> "openai/pixel-cnn"
"PrajitR/fast-pixel-cnn" -> "kundan2510/pixelCNN"
"PrajitR/fast-pixel-cnn" -> "tomlepaine/fast-wavenet" ["e"=1]
"PrajitR/fast-pixel-cnn" -> "pclucas14/pixel-cnn-pp" ["e"=1]
"PrajitR/fast-pixel-cnn" -> "carpedm20/pixel-rnn-tensorflow"
"PrajitR/fast-pixel-cnn" -> "kkleidal/GatedPixelCNNPyTorch" ["e"=1]
"PrajitR/fast-pixel-cnn" -> "tonywu95/eval_gen"
"PrajitR/fast-pixel-cnn" -> "facebook/eyescream"
"PrajitR/fast-pixel-cnn" -> "zuoxingdong/VIN_PyTorch_Visdom" ["e"=1]
"PrajitR/fast-pixel-cnn" -> "TheAbhiKumar/tensorflow-value-iteration-networks" ["e"=1]
"PrajitR/fast-pixel-cnn" -> "emansim/text2image"
"PrajitR/fast-pixel-cnn" -> "nilboy/pixel-recursive-super-resolution" ["e"=1]
"andersbll/autoencoding_beyond_pixels" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"andersbll/autoencoding_beyond_pixels" -> "IshmaelBelghazi/ALI"
"andersbll/autoencoding_beyond_pixels" -> "lucabergamini/VAEGAN-PYTORCH"
"andersbll/autoencoding_beyond_pixels" -> "zhangqianhui/vae-gan-tensorflow"
"andersbll/autoencoding_beyond_pixels" -> "anitan0925/vaegan"
"andersbll/autoencoding_beyond_pixels" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"andersbll/autoencoding_beyond_pixels" -> "y0ast/VAE-Torch" ["e"=1]
"andersbll/autoencoding_beyond_pixels" -> "musyoku/adversarial-autoencoder" ["e"=1]
"andersbll/autoencoding_beyond_pixels" -> "openai/InfoGAN"
"andersbll/autoencoding_beyond_pixels" -> "JeremyCCHsu/tf-vaegan"
"andersbll/autoencoding_beyond_pixels" -> "openai/iaf"
"andersbll/autoencoding_beyond_pixels" -> "openai/improved-gan"
"andersbll/autoencoding_beyond_pixels" -> "igul222/improved_wgan_training"
"andersbll/autoencoding_beyond_pixels" -> "carpedm20/pixel-rnn-tensorflow"
"andersbll/autoencoding_beyond_pixels" -> "stitchfix/fauxtograph" ["e"=1]
"emansim/text2image" -> "reedscot/icml2016"
"emansim/text2image" -> "reedscot/nips2016"
"emansim/text2image" -> "ryankiros/visual-semantic-embedding" ["e"=1]
"emansim/text2image" -> "jbornschein/draw" ["e"=1]
"emansim/text2image" -> "facebook/eyescream"
"emansim/text2image" -> "yaoli/arctic-capgen-vid" ["e"=1]
"emansim/text2image" -> "kelvinxu/arctic-captions" ["e"=1]
"emansim/text2image" -> "cvondrick/videogan"
"emansim/text2image" -> "coupriec/VideoPredictionICLR2016"
"emansim/text2image" -> "ericjang/draw"
"emansim/text2image" -> "paarthneekhara/text-to-image"
"emansim/text2image" -> "jazzsaxmafia/video_to_sequence" ["e"=1]
"emansim/text2image" -> "carpedm20/variational-text-tensorflow" ["e"=1]
"emansim/text2image" -> "ryankiros/skip-thoughts" ["e"=1]
"emansim/text2image" -> "jazzsaxmafia/show_attend_and_tell.tensorflow" ["e"=1]
"igul222/improved_wgan_training" -> "martinarjovsky/WassersteinGAN"
"igul222/improved_wgan_training" -> "caogang/wgan-gp"
"igul222/improved_wgan_training" -> "openai/improved-gan"
"igul222/improved_wgan_training" -> "Zardinality/WGAN-tensorflow"
"igul222/improved_wgan_training" -> "pfnet-research/sngan_projection"
"igul222/improved_wgan_training" -> "carpedm20/DCGAN-tensorflow"
"igul222/improved_wgan_training" -> "tkarras/progressive_growing_of_gans"
"igul222/improved_wgan_training" -> "wiseodd/generative-models"
"igul222/improved_wgan_training" -> "LantaoYu/SeqGAN" ["e"=1]
"igul222/improved_wgan_training" -> "hwalsuklee/tensorflow-generative-model-collections"
"igul222/improved_wgan_training" -> "shekkizh/WassersteinGAN.tensorflow"
"igul222/improved_wgan_training" -> "znxlwm/pytorch-generative-model-collections"
"igul222/improved_wgan_training" -> "soumith/ganhacks"
"igul222/improved_wgan_training" -> "zhangqianhui/AdversarialNetsPapers"
"igul222/improved_wgan_training" -> "google/compare_gan"
"igul222/pixel_rnn" -> "igul222/speech"
"openai/InfoGAN" -> "openai/improved-gan"
"openai/InfoGAN" -> "JonathanRaiman/tensorflow-infogan"
"openai/InfoGAN" -> "openai/iaf"
"openai/InfoGAN" -> "martinarjovsky/WassersteinGAN"
"openai/InfoGAN" -> "openai/imitation" ["e"=1]
"openai/InfoGAN" -> "igul222/improved_wgan_training"
"openai/InfoGAN" -> "openai/vime" ["e"=1]
"openai/InfoGAN" -> "Natsu6767/InfoGAN-PyTorch" ["e"=1]
"openai/InfoGAN" -> "Newmu/dcgan_code"
"openai/InfoGAN" -> "openai/pixel-cnn"
"openai/InfoGAN" -> "buriburisuri/supervised_infogan"
"openai/InfoGAN" -> "andersbll/autoencoding_beyond_pixels"
"openai/InfoGAN" -> "facebook/eyescream"
"openai/InfoGAN" -> "carpedm20/BEGAN-tensorflow"
"openai/InfoGAN" -> "hanzhanggit/StackGAN"
"openai/iaf" -> "openai/vime" ["e"=1]
"openai/iaf" -> "openai/InfoGAN"
"openai/iaf" -> "riannevdberg/sylvester-flows" ["e"=1]
"openai/iaf" -> "yburda/iwae" ["e"=1]
"openai/iaf" -> "dpkingma/nips14-ssl" ["e"=1]
"openai/iaf" -> "jmtomczak/vae_vpflows" ["e"=1]
"openai/iaf" -> "ericjang/normalizing-flows-tutorial" ["e"=1]
"openai/iaf" -> "openai/imitation" ["e"=1]
"openai/iaf" -> "openai/improved-gan"
"openai/iaf" -> "pclucas14/iaf-vae"
"openai/iaf" -> "openai/pixel-cnn"
"openai/iaf" -> "casperkaae/parmesan" ["e"=1]
"openai/iaf" -> "casperkaae/LVAE" ["e"=1]
"openai/iaf" -> "jmtomczak/vae_vampprior" ["e"=1]
"openai/iaf" -> "carpedm20/variational-text-tensorflow" ["e"=1]
"openai/pixel-cnn" -> "carpedm20/pixel-rnn-tensorflow"
"openai/pixel-cnn" -> "anantzoid/Conditional-PixelCNN-decoder"
"openai/pixel-cnn" -> "openai/improved-gan"
"openai/pixel-cnn" -> "PrajitR/fast-pixel-cnn"
"openai/pixel-cnn" -> "tomlepaine/fast-wavenet" ["e"=1]
"openai/pixel-cnn" -> "openai/InfoGAN"
"openai/pixel-cnn" -> "openai/iaf"
"openai/pixel-cnn" -> "martinarjovsky/WassersteinGAN"
"openai/pixel-cnn" -> "pclucas14/pixel-cnn-pp" ["e"=1]
"openai/pixel-cnn" -> "ibab/tensorflow-wavenet" ["e"=1]
"openai/pixel-cnn" -> "igul222/improved_wgan_training"
"openai/pixel-cnn" -> "deepmind/learning-to-learn" ["e"=1]
"openai/pixel-cnn" -> "openai/glow"
"openai/pixel-cnn" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"openai/pixel-cnn" -> "pfnet-research/sngan_projection"
"paarthneekhara/text-to-image" -> "reedscot/icml2016"
"paarthneekhara/text-to-image" -> "zsdonghao/text-to-image"
"paarthneekhara/text-to-image" -> "hanzhanggit/StackGAN"
"paarthneekhara/text-to-image" -> "ryankiros/skip-thoughts" ["e"=1]
"paarthneekhara/text-to-image" -> "junyanz/iGAN"
"paarthneekhara/text-to-image" -> "reedscot/nips2016"
"paarthneekhara/text-to-image" -> "taoxugit/AttnGAN"
"paarthneekhara/text-to-image" -> "Newmu/dcgan_code"
"paarthneekhara/text-to-image" -> "carpedm20/DCGAN-tensorflow"
"paarthneekhara/text-to-image" -> "emansim/text2image"
"paarthneekhara/text-to-image" -> "openai/improved-gan"
"paarthneekhara/text-to-image" -> "hanzhanggit/StackGAN-v2"
"paarthneekhara/text-to-image" -> "aelnouby/Text-to-Image-Synthesis"
"paarthneekhara/text-to-image" -> "bamos/dcgan-completion.tensorflow"
"paarthneekhara/text-to-image" -> "igul222/improved_wgan_training"
"dongjun-Lee/text-classification-models-tf" -> "bendangnuksung/Image-OutPainting"
"dongjun-Lee/text-classification-models-tf" -> "dongjun-Lee/transfer-learning-text-tf"
"dongjun-Lee/text-classification-models-tf" -> "faneshion/MatchZoo" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "TobiasLee/Text-Classification" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "zackhy/TextClassification" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "LMescheder/GAN_stability"
"dongjun-Lee/text-classification-models-tf" -> "chenyuntc/PyTorchText" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "richliao/textClassifier" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "albertpumarola/GANimation"
"dongjun-Lee/transfer-learning-text-tf" -> "dongjun-Lee/rnn-text-classification-tf"
"hanzhanggit/StackGAN" -> "hanzhanggit/StackGAN-v2"
"hanzhanggit/StackGAN" -> "reedscot/icml2016"
"hanzhanggit/StackGAN" -> "taoxugit/AttnGAN"
"hanzhanggit/StackGAN" -> "hanzhanggit/StackGAN-Pytorch"
"hanzhanggit/StackGAN" -> "paarthneekhara/text-to-image"
"hanzhanggit/StackGAN" -> "openai/improved-gan"
"hanzhanggit/StackGAN" -> "zsdonghao/text-to-image"
"hanzhanggit/StackGAN" -> "igul222/improved_wgan_training"
"hanzhanggit/StackGAN" -> "martinarjovsky/WassersteinGAN"
"hanzhanggit/StackGAN" -> "tkarras/progressive_growing_of_gans"
"hanzhanggit/StackGAN" -> "carpedm20/DCGAN-tensorflow"
"hanzhanggit/StackGAN" -> "openai/InfoGAN"
"hanzhanggit/StackGAN" -> "reedscot/cvpr2016"
"hanzhanggit/StackGAN" -> "junyanz/iGAN"
"hanzhanggit/StackGAN" -> "soumith/dcgan.torch"
"junyanz/interactive-deep-colorization" -> "richzhang/colorization"
"junyanz/interactive-deep-colorization" -> "richzhang/colorization-pytorch"
"junyanz/interactive-deep-colorization" -> "msracver/Deep-Exemplar-based-Colorization"
"junyanz/interactive-deep-colorization" -> "MarkMoHR/Awesome-Image-Colorization"
"junyanz/interactive-deep-colorization" -> "ericsujw/InstColorization"
"junyanz/interactive-deep-colorization" -> "junyanz/BicycleGAN"
"junyanz/interactive-deep-colorization" -> "satoshiiizuka/siggraph2016_colorization"
"junyanz/interactive-deep-colorization" -> "satoshiiizuka/siggraphasia2019_remastering"
"junyanz/interactive-deep-colorization" -> "msracver/Deep-Image-Analogy"
"junyanz/interactive-deep-colorization" -> "junyanz/iGAN"
"junyanz/interactive-deep-colorization" -> "junyanz/CycleGAN"
"junyanz/interactive-deep-colorization" -> "junyanz/CatPapers"
"junyanz/interactive-deep-colorization" -> "phillipi/pix2pix"
"junyanz/interactive-deep-colorization" -> "NVIDIA/pix2pixHD"
"junyanz/interactive-deep-colorization" -> "jcjohnson/fast-neural-style"
"taoxugit/AttnGAN" -> "hanzhanggit/StackGAN-v2"
"taoxugit/AttnGAN" -> "hanzhanggit/StackGAN-Pytorch"
"taoxugit/AttnGAN" -> "hanzhanggit/StackGAN"
"taoxugit/AttnGAN" -> "MinfengZhu/DM-GAN"
"taoxugit/AttnGAN" -> "reedscot/icml2016"
"taoxugit/AttnGAN" -> "aelnouby/Text-to-Image-Synthesis"
"taoxugit/AttnGAN" -> "google/sg2im" ["e"=1]
"taoxugit/AttnGAN" -> "mrlibw/ControlGAN"
"taoxugit/AttnGAN" -> "jamesli1618/Obj-GAN"
"taoxugit/AttnGAN" -> "zsdonghao/text-to-image"
"taoxugit/AttnGAN" -> "qiaott/MirrorGAN"
"taoxugit/AttnGAN" -> "tobran/DF-GAN"
"taoxugit/AttnGAN" -> "lzhbrian/arbitrary-text-to-image-papers"
"taoxugit/AttnGAN" -> "ypxie/HDGan"
"taoxugit/AttnGAN" -> "heykeetae/Self-Attention-GAN"
"visioncortex/vtracer" -> "tomayac/SVGcode" ["e"=1]
"visioncortex/vtracer" -> "preddy5/Im2Vec"
"visioncortex/vtracer" -> "fromtheexchange/image2svg-awesome"
"visioncortex/vtracer" -> "antfu/iroiro" ["e"=1]
"visioncortex/vtracer" -> "BachiLi/diffvg"
"visioncortex/vtracer" -> "visioncortex/visioncortex"
"visioncortex/vtracer" -> "autotrace/autotrace" ["e"=1]
"visioncortex/vtracer" -> "merico-dev/lake" ["e"=1]
"visioncortex/vtracer" -> "logancyang/my-cs-degree" ["e"=1]
"visioncortex/vtracer" -> "GeorgLegato/Txt2Vectorgraphics" ["e"=1]
"visioncortex/vtracer" -> "Picsart-AI-Research/LIVE-Layerwise-Image-Vectorization"
"visioncortex/vtracer" -> "methodofaction/Method-Draw" ["e"=1]
"visioncortex/vtracer" -> "DanielSWolf/rhubarb-lip-sync" ["e"=1]
"visioncortex/vtracer" -> "zmister2016/MrDoc" ["e"=1]
"visioncortex/vtracer" -> "Yqnn/svg-path-editor" ["e"=1]
"ajbrock/BigGAN-PyTorch" -> "huggingface/pytorch-pretrained-BigGAN"
"ajbrock/BigGAN-PyTorch" -> "heykeetae/Self-Attention-GAN"
"ajbrock/BigGAN-PyTorch" -> "google/compare_gan"
"ajbrock/BigGAN-PyTorch" -> "rosinality/stylegan2-pytorch"
"ajbrock/BigGAN-PyTorch" -> "rosinality/style-based-gan-pytorch"
"ajbrock/BigGAN-PyTorch" -> "facebookresearch/pytorch_GAN_zoo"
"ajbrock/BigGAN-PyTorch" -> "pfnet-research/sngan_projection"
"ajbrock/BigGAN-PyTorch" -> "mseitzer/pytorch-fid"
"ajbrock/BigGAN-PyTorch" -> "tamarott/SinGAN"
"ajbrock/BigGAN-PyTorch" -> "tkarras/progressive_growing_of_gans"
"ajbrock/BigGAN-PyTorch" -> "NVlabs/stylegan2-ada-pytorch"
"ajbrock/BigGAN-PyTorch" -> "LMescheder/GAN_stability"
"ajbrock/BigGAN-PyTorch" -> "clovaai/stargan-v2"
"ajbrock/BigGAN-PyTorch" -> "mit-han-lab/data-efficient-gans"
"ajbrock/BigGAN-PyTorch" -> "NVlabs/FUNIT"
"SummitKwan/transparent_latent_gan" -> "Puzer/stylegan-encoder"
"SummitKwan/transparent_latent_gan" -> "tkarras/progressive_growing_of_gans"
"SummitKwan/transparent_latent_gan" -> "LynnHo/AttGAN-Tensorflow"
"SummitKwan/transparent_latent_gan" -> "CSAILVision/gandissect"
"SummitKwan/transparent_latent_gan" -> "openai/glow"
"SummitKwan/transparent_latent_gan" -> "albertpumarola/GANimation"
"SummitKwan/transparent_latent_gan" -> "switchablenorms/CelebAMask-HQ"
"SummitKwan/transparent_latent_gan" -> "yunjey/stargan"
"SummitKwan/transparent_latent_gan" -> "NVlabs/FUNIT"
"SummitKwan/transparent_latent_gan" -> "JoYoungjoo/SC-FEGAN"
"SummitKwan/transparent_latent_gan" -> "NVlabs/MUNIT"
"SummitKwan/transparent_latent_gan" -> "pbaylies/stylegan-encoder"
"SummitKwan/transparent_latent_gan" -> "run-youngjoo/SC-FEGAN"
"SummitKwan/transparent_latent_gan" -> "shaoanlu/faceswap-GAN" ["e"=1]
"SummitKwan/transparent_latent_gan" -> "csmliu/STGAN"
"giventofly/pixelit" -> "sedthh/pyxelate"
"giventofly/pixelit" -> "rgab1508/PixelCraft" ["e"=1]
"giventofly/pixelit" -> "Siilwyn/awesome-pixel-art" ["e"=1]
"giventofly/pixelit" -> "Chleba/PIXELARTOR"
"giventofly/pixelit" -> "lospec/pixel-editor" ["e"=1]
"giventofly/pixelit" -> "KilledByAPixel/ZzSprite"
"giventofly/pixelit" -> "Deep-Fold/PixelSpace" ["e"=1]
"POSTECH-CVLab/PyTorch-StudioGAN" -> "NVlabs/stylegan2-ada-pytorch"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "rosinality/stylegan2-pytorch"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "CompVis/taming-transformers" ["e"=1]
"POSTECH-CVLab/PyTorch-StudioGAN" -> "NVlabs/imaginaire"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "mit-han-lab/data-efficient-gans"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "mseitzer/pytorch-fid"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "openai/guided-diffusion" ["e"=1]
"POSTECH-CVLab/PyTorch-StudioGAN" -> "dorarad/gansformer"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "ajbrock/BigGAN-PyTorch"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "orpatashnik/StyleCLIP"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "eladrich/pixel2style2pixel"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "weihaox/awesome-gan-inversion"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "VITA-Group/TransGAN"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "GaParmar/clean-fid"
"POSTECH-CVLab/PyTorch-StudioGAN" -> "heejkoo/Awesome-Diffusion-Models" ["e"=1]
"bryandlee/malnyun_faces" -> "bryandlee/FreezeG"
"bryandlee/malnyun_faces" -> "krta2/awesome-nonsan" ["e"=1]
"bryandlee/malnyun_faces" -> "hahnlee/hwp.js" ["e"=1]
"bryandlee/malnyun_faces" -> "sangwoomo/FreezeD"
"bryandlee/malnyun_faces" -> "SKT-AI/KoGPT2" ["e"=1]
"bryandlee/malnyun_faces" -> "bryandlee/naver-webtoon-faces"
"bryandlee/malnyun_faces" -> "teddylee777/machine-learning" ["e"=1]
"bryandlee/malnyun_faces" -> "songys/AwesomeKorean_Data" ["e"=1]
"bryandlee/malnyun_faces" -> "zzsza/Kaggle-knowhow" ["e"=1]
"bryandlee/malnyun_faces" -> "sesang06/awesome-alternative-military-service" ["e"=1]
"bryandlee/malnyun_faces" -> "jungwoo-ha/WeeklyArxivTalk" ["e"=1]
"bryandlee/malnyun_faces" -> "kakaobrain/kogpt" ["e"=1]
"bryandlee/malnyun_faces" -> "justiceHui/Unknown-To-Wellknown" ["e"=1]
"bryandlee/malnyun_faces" -> "leehosung/awesome-devteam" ["e"=1]
"bryandlee/malnyun_faces" -> "kakaobrain/pororo" ["e"=1]
"hardikbansal/CycleGAN" -> "vanhuyz/CycleGAN-TensorFlow"
"hardikbansal/CycleGAN" -> "architrathore/CycleGAN"
"hardikbansal/CycleGAN" -> "xhujoy/CycleGAN-tensorflow"
"hardikbansal/CycleGAN" -> "LynnHo/CycleGAN-Tensorflow-2"
"hardikbansal/CycleGAN" -> "XHUJOY/CycleGAN-tensorflow"
"hardikbansal/CycleGAN" -> "leehomyc/cyclegan-1"
"hardikbansal/CycleGAN" -> "taki0112/MUNIT-Tensorflow"
"hardikbansal/CycleGAN" -> "yenchenlin/pix2pix-tensorflow"
"hardikbansal/CycleGAN" -> "Zardinality/WGAN-tensorflow"
"justinpinkney/toonify" -> "wonwizard/stylgan2-toonify"
"justinpinkney/toonify" -> "justinpinkney/stylegan2"
"justinpinkney/toonify" -> "happy-jihye/Cartoon-StyleGAN"
"justinpinkney/toonify" -> "williamyang1991/DualStyleGAN"
"justinpinkney/toonify" -> "omertov/encoder4editing"
"justinpinkney/toonify" -> "GuoxianSong/AgileGAN"
"justinpinkney/toonify" -> "danielroich/PTI"
"justinpinkney/toonify" -> "justinpinkney/awesome-pretrained-stylegan2"
"justinpinkney/toonify" -> "yuval-alaluf/restyle-encoder"
"justinpinkney/toonify" -> "yuval-alaluf/SAM"
"justinpinkney/toonify" -> "bes-dev/MobileStyleGAN.pytorch"
"justinpinkney/toonify" -> "genforce/interfacegan"
"justinpinkney/toonify" -> "eladrich/pixel2style2pixel"
"justinpinkney/toonify" -> "rinongal/StyleGAN-nada"
"justinpinkney/toonify" -> "betterze/StyleSpace"
"firmai/awesome-google-colab" -> "toxtli/awesome-machine-learning-jupyter-notebooks-for-colab"
"firmai/awesome-google-colab" -> "tugstugi/dl-colab-notebooks"
"firmai/awesome-google-colab" -> "amrzv/awesome-colab-notebooks"
"firmai/awesome-google-colab" -> "andrewekhalel/MLQuestions" ["e"=1]
"firmai/awesome-google-colab" -> "firmai/python-business-analytics" ["e"=1]
"firmai/awesome-google-colab" -> "chervonij/DFL-Colab" ["e"=1]
"firmai/awesome-google-colab" -> "dvschultz/ml-art-colabs"
"firmai/awesome-google-colab" -> "yassouali/ML_paper_notes" ["e"=1]
"firmai/awesome-google-colab" -> "firmai/business-machine-learning" ["e"=1]
"firmai/awesome-google-colab" -> "firmai/industry-machine-learning" ["e"=1]
"firmai/awesome-google-colab" -> "mrm8488/shared_colab_notebooks"
"firmai/awesome-google-colab" -> "FinMind/FinMind" ["e"=1]
"firmai/awesome-google-colab" -> "biplobsd/OneClickRun" ["e"=1]
"firmai/awesome-google-colab" -> "googlecolab/colabtools" ["e"=1]
"firmai/awesome-google-colab" -> "microsoft/nlp-recipes" ["e"=1]
"kurozael/twitter-contest-bot" -> "robbiebarrat/twitter-contest-enterer"
"kurozael/twitter-contest-bot" -> "raulrene/twitter-contest-js-bot"
"kurozael/twitter-contest-bot" -> "buluba89/Yatcobot"
"kurozael/twitter-contest-bot" -> "ModusVivendi/twitter-contest"
"kurozael/twitter-contest-bot" -> "rhiever/reddit-twitter-bot" ["e"=1]
"kurozael/twitter-contest-bot" -> "joaquinlpereyra/twitterImgBot"
"OPHoperHPO/image-background-remove-tool" -> "susheelsk/image-background-removal"
"OPHoperHPO/image-background-remove-tool" -> "eti-p-doray/unet-gan-matting"
"OPHoperHPO/image-background-remove-tool" -> "nadermx/backgroundremover"
"OPHoperHPO/image-background-remove-tool" -> "aquadzn/background-removal"
"OPHoperHPO/image-background-remove-tool" -> "danielgatis/rembg"
"OPHoperHPO/image-background-remove-tool" -> "xuebinqin/U-2-Net"
"OPHoperHPO/image-background-remove-tool" -> "pymatting/pymatting"
"OPHoperHPO/image-background-remove-tool" -> "MarcoForte/FBA_Matting"
"OPHoperHPO/image-background-remove-tool" -> "foamliu/Deep-Image-Matting-PyTorch"
"OPHoperHPO/image-background-remove-tool" -> "FarjaalAhmad/django_bgRemoverML"
"OPHoperHPO/image-background-remove-tool" -> "DDemmer1/ai-background-remove"
"OPHoperHPO/image-background-remove-tool" -> "xuebinqin/DIS"
"OPHoperHPO/image-background-remove-tool" -> "ZHKKKe/MODNet"
"OPHoperHPO/image-background-remove-tool" -> "lnugraha/trimap_generator"
"OPHoperHPO/image-background-remove-tool" -> "JizhiziLi/GFM"
"eti-p-doray/unet-gan-matting" -> "susheelsk/image-background-removal"
"eti-p-doray/unet-gan-matting" -> "rorodata/background-removal"
"eti-p-doray/unet-gan-matting" -> "aadityavikram/Background-Removal"
"eti-p-doray/unet-gan-matting" -> "SaoYan/bgsCNN" ["e"=1]
"eti-p-doray/unet-gan-matting" -> "takiyu/portrait_matting"
"eti-p-doray/unet-gan-matting" -> "CDOTAD/AlphaGAN-Matting"
"eti-p-doray/unet-gan-matting" -> "OPHoperHPO/image-background-remove-tool"
"eti-p-doray/unet-gan-matting" -> "huochaitiantang/pytorch-deep-image-matting"
"eti-p-doray/unet-gan-matting" -> "foamliu/Deep-Image-Matting-v2"
"susheelsk/image-background-removal" -> "eti-p-doray/unet-gan-matting"
"susheelsk/image-background-removal" -> "rorodata/background-removal"
"susheelsk/image-background-removal" -> "OPHoperHPO/image-background-remove-tool"
"susheelsk/image-background-removal" -> "aadityavikram/Background-Removal"
"susheelsk/image-background-removal" -> "SaoYan/bgsCNN" ["e"=1]
"hzy46/fast-neural-style-tensorflow" -> "OlavHN/fast-neural-style"
"hzy46/fast-neural-style-tensorflow" -> "jcjohnson/fast-neural-style"
"hzy46/fast-neural-style-tensorflow" -> "anishathalye/neural-style"
"hzy46/fast-neural-style-tensorflow" -> "junrushao1994/fast-neural-style.tf"
"hzy46/fast-neural-style-tensorflow" -> "cysmith/neural-style-tf"
"hzy46/fast-neural-style-tensorflow" -> "ycjing/Neural-Style-Transfer-Papers"
"hzy46/fast-neural-style-tensorflow" -> "vanhuyz/CycleGAN-TensorFlow"
"hzy46/fast-neural-style-tensorflow" -> "yusuketomoto/chainer-fast-neuralstyle"
"hzy46/fast-neural-style-tensorflow" -> "rtqichen/style-swap"
"hzy46/fast-neural-style-tensorflow" -> "LouieYang/deep-photo-styletransfer-tf"
"hzy46/fast-neural-style-tensorflow" -> "ghwatson/faststyle"
"hzy46/fast-neural-style-tensorflow" -> "LDOUBLEV/style_transfer-perceptual_loss"
"hzy46/fast-neural-style-tensorflow" -> "mrxlz/ImageStyleTransform"
"hzy46/fast-neural-style-tensorflow" -> "lengstrom/fast-style-transfer"
"hzy46/fast-neural-style-tensorflow" -> "fzliu/style-transfer"
"minhnhat93/tf-SNDCGAN" -> "pfnet-research/chainer-gan-lib" ["e"=1]
"minhnhat93/tf-SNDCGAN" -> "taki0112/Spectral_Normalization-Tensorflow"
"minhnhat93/tf-SNDCGAN" -> "pfnet-research/sngan_projection"
"minhnhat93/tf-SNDCGAN" -> "godisboy/SN-GAN"
"minhnhat93/tf-SNDCGAN" -> "kodalinaveen3/DRAGAN"
"minhnhat93/tf-SNDCGAN" -> "nnUyi/SNGAN"
"minhnhat93/tf-SNDCGAN" -> "khanrc/tf.gans-comparison"
"minhnhat93/tf-SNDCGAN" -> "taki0112/Self-Attention-GAN-Tensorflow"
"tensorlayer/dcgan" -> "zsdonghao/text-to-image"
"tjwei/GANotebooks" -> "igul222/improved_wgan_training"
"tjwei/GANotebooks" -> "caogang/wgan-gp"
"tjwei/GANotebooks" -> "vanhuyz/CycleGAN-TensorFlow"
"tjwei/GANotebooks" -> "tdeboissiere/DeepLearningImplementations"
"tjwei/GANotebooks" -> "martinarjovsky/WassersteinGAN"
"tjwei/GANotebooks" -> "znxlwm/pytorch-generative-model-collections"
"tjwei/GANotebooks" -> "eriklindernoren/Keras-GAN"
"tjwei/GANotebooks" -> "shaoanlu/faceswap-GAN" ["e"=1]
"tjwei/GANotebooks" -> "jacobgil/keras-dcgan"
"tjwei/GANotebooks" -> "hwalsuklee/tensorflow-generative-model-collections"
"tjwei/GANotebooks" -> "openai/glow"
"tjwei/GANotebooks" -> "zhangqianhui/AdversarialNetsPapers"
"tjwei/GANotebooks" -> "NVIDIA/pix2pixHD"
"tjwei/GANotebooks" -> "nightrome/really-awesome-gan"
"tjwei/GANotebooks" -> "google/compare_gan"
"NVlabs/stylegan2-ada" -> "NVlabs/stylegan2-ada-pytorch"
"NVlabs/stylegan2-ada" -> "rosinality/stylegan2-pytorch"
"NVlabs/stylegan2-ada" -> "mit-han-lab/data-efficient-gans"
"NVlabs/stylegan2-ada" -> "justinpinkney/awesome-pretrained-stylegan2"
"NVlabs/stylegan2-ada" -> "eladrich/pixel2style2pixel"
"NVlabs/stylegan2-ada" -> "NVlabs/imaginaire"
"NVlabs/stylegan2-ada" -> "NVlabs/stylegan2"
"NVlabs/stylegan2-ada" -> "NVlabs/alias-free-gan"
"NVlabs/stylegan2-ada" -> "lucidrains/stylegan2-pytorch"
"NVlabs/stylegan2-ada" -> "rolux/stylegan2encoder"
"NVlabs/stylegan2-ada" -> "harskish/ganspace"
"NVlabs/stylegan2-ada" -> "clovaai/stargan-v2"
"NVlabs/stylegan2-ada" -> "NVlabs/stylegan3"
"NVlabs/stylegan2-ada" -> "orpatashnik/StyleCLIP"
"NVlabs/stylegan2-ada" -> "rinongal/StyleGAN-nada"
"titu1994/Neural-Style-Transfer" -> "ycjing/Neural-Style-Transfer-Papers"
"titu1994/Neural-Style-Transfer" -> "jcjohnson/fast-neural-style"
"titu1994/Neural-Style-Transfer" -> "anishathalye/neural-style"
"titu1994/Neural-Style-Transfer" -> "cysmith/neural-style-tf"
"titu1994/Neural-Style-Transfer" -> "lengstrom/fast-style-transfer"
"titu1994/Neural-Style-Transfer" -> "fzliu/style-transfer"
"titu1994/Neural-Style-Transfer" -> "ProGamerGov/neural-style-pt"
"titu1994/Neural-Style-Transfer" -> "DmitryUlyanov/texture_nets"
"titu1994/Neural-Style-Transfer" -> "yusuketomoto/chainer-fast-neuralstyle"
"titu1994/Neural-Style-Transfer" -> "manuelruder/artistic-videos"
"titu1994/Neural-Style-Transfer" -> "xunhuang1995/AdaIN-style"
"titu1994/Neural-Style-Transfer" -> "LouieYang/deep-photo-styletransfer-tf"
"titu1994/Neural-Style-Transfer" -> "jcjohnson/neural-style"
"titu1994/Neural-Style-Transfer" -> "rtqichen/style-swap"
"titu1994/Neural-Style-Transfer" -> "msracver/Deep-Image-Analogy"
"BorisTheBrave/DeBroglie" -> "selfsame/unity-wave-function-collapse"
"BorisTheBrave/DeBroglie" -> "keijiro/WfcMaze"
"BorisTheBrave/DeBroglie" -> "MatveyK/Kazimir"
"BorisTheBrave/DeBroglie" -> "Scrawk/Hull-Delaunay-Voronoi" ["e"=1]
"BorisTheBrave/DeBroglie" -> "oddmax/unity-wave-function-collapse-3d"
"BorisTheBrave/DeBroglie" -> "BorisTheBrave/chiseled-random-paths"
"luanfujun/deep-photo-styletransfer" -> "lengstrom/fast-style-transfer"
"luanfujun/deep-photo-styletransfer" -> "junyanz/CycleGAN"
"luanfujun/deep-photo-styletransfer" -> "jcjohnson/neural-style"
"luanfujun/deep-photo-styletransfer" -> "tensorflow/magenta"
"luanfujun/deep-photo-styletransfer" -> "NVIDIA/FastPhotoStyle"
"luanfujun/deep-photo-styletransfer" -> "luanfujun/deep-painterly-harmonization"
"luanfujun/deep-photo-styletransfer" -> "lllyasviel/style2paints" ["e"=1]
"luanfujun/deep-photo-styletransfer" -> "deepmind/sonnet" ["e"=1]
"luanfujun/deep-photo-styletransfer" -> "DmitryUlyanov/deep-image-prior"
"luanfujun/deep-photo-styletransfer" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"luanfujun/deep-photo-styletransfer" -> "jcjohnson/fast-neural-style"
"luanfujun/deep-photo-styletransfer" -> "facebookresearch/fastText" ["e"=1]
"luanfujun/deep-photo-styletransfer" -> "junyanz/iGAN"
"luanfujun/deep-photo-styletransfer" -> "alexjc/neural-doodle"
"luanfujun/deep-photo-styletransfer" -> "alexjc/neural-enhance"
"robbiebarrat/art-DCGAN" -> "soumith/dcgan.torch"
"robbiebarrat/art-DCGAN" -> "rkjones4/GANGogh"
"robbiebarrat/art-DCGAN" -> "robbiebarrat/rapping-neural-network"
"robbiebarrat/art-DCGAN" -> "robbiebarrat/plant-art"
"robbiebarrat/art-DCGAN" -> "vibertthio/awesome-machine-learning-art" ["e"=1]
"robbiebarrat/art-DCGAN" -> "dvschultz/ml-art-colabs"
"robbiebarrat/art-DCGAN" -> "tkarras/progressive_growing_of_gans"
"robbiebarrat/art-DCGAN" -> "kosmos/awesome-generative-art" ["e"=1]
"robbiebarrat/art-DCGAN" -> "joel-simon/ganbreeder"
"robbiebarrat/art-DCGAN" -> "ml4a/ml4a-guides" ["e"=1]
"robbiebarrat/art-DCGAN" -> "aaronpenne/generative_art" ["e"=1]
"robbiebarrat/art-DCGAN" -> "mlberkeley/Creative-Adversarial-Networks"
"robbiebarrat/art-DCGAN" -> "justinpinkney/awesome-pretrained-stylegan2"
"robbiebarrat/art-DCGAN" -> "Puzer/stylegan-encoder"
"robbiebarrat/art-DCGAN" -> "tensorflow/lucid" ["e"=1]
"255BITS/HyperGAN" -> "openai/pixel-cnn"
"255BITS/HyperGAN" -> "openai/improved-gan"
"255BITS/HyperGAN" -> "guojunq/lsgan"
"255BITS/HyperGAN" -> "martinarjovsky/WassersteinGAN"
"255BITS/HyperGAN" -> "Evolving-AI-Lab/ppgn"
"255BITS/HyperGAN" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"255BITS/HyperGAN" -> "openai/InfoGAN"
"255BITS/HyperGAN" -> "igul222/improved_wgan_training"
"255BITS/HyperGAN" -> "carpedm20/BEGAN-tensorflow"
"255BITS/HyperGAN" -> "carpedm20/DiscoGAN-pytorch"
"255BITS/HyperGAN" -> "hanzhanggit/StackGAN"
"255BITS/HyperGAN" -> "buriburisuri/ac-gan"
"255BITS/HyperGAN" -> "DmitryUlyanov/texture_nets"
"255BITS/HyperGAN" -> "Evolving-AI-Lab/synthesizing"
"255BITS/HyperGAN" -> "openai/cleverhans" ["e"=1]
"xuebinqin/DIS" -> "xuebinqin/U-2-Net"
"xuebinqin/DIS" -> "plemeri/InSPyReNet" ["e"=1]
"xuebinqin/DIS" -> "hkchengrex/XMem" ["e"=1]
"xuebinqin/DIS" -> "hkchengrex/CascadePSP" ["e"=1]
"xuebinqin/DIS" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"xuebinqin/DIS" -> "damo-vilab/composer" ["e"=1]
"xuebinqin/DIS" -> "ZHKKKe/MODNet"
"xuebinqin/DIS" -> "john-rocky/CoreML-Models" ["e"=1]
"xuebinqin/DIS" -> "bloc97/CrossAttentionControl" ["e"=1]
"xuebinqin/DIS" -> "gligen/GLIGEN" ["e"=1]
"xuebinqin/DIS" -> "xuebinqin/BASNet" ["e"=1]
"xuebinqin/DIS" -> "danielgatis/rembg"
"xuebinqin/DIS" -> "google-research/frame-interpolation" ["e"=1]
"xuebinqin/DIS" -> "JizhiziLi/GFM"
"xuebinqin/DIS" -> "TencentARC/T2I-Adapter" ["e"=1]
"Honlan/BeautyGAN" -> "wtjiang98/PSGAN"
"Honlan/BeautyGAN" -> "wtjiang98/BeautyGAN_pytorch"
"Honlan/BeautyGAN" -> "Honlan/DMT"
"Honlan/BeautyGAN" -> "baldFemale/beautyGAN-tf-Implement"
"Honlan/BeautyGAN" -> "wangguanzhi/LADN"
"Honlan/BeautyGAN" -> "zllrunning/face-makeup.PyTorch"
"Honlan/BeautyGAN" -> "BeautyGlow/BeautyGlow.github.io"
"Honlan/BeautyGAN" -> "srivatsan-ramesh/Virtual-Makeup"
"Honlan/BeautyGAN" -> "thaoshibe/BeautyGAN-PyTorch-reimplementation"
"Honlan/BeautyGAN" -> "baldFemale/MakeupEmbeddingGAN-tf-Implement"
"Honlan/BeautyGAN" -> "switchablenorms/CelebAMask-HQ"
"Honlan/BeautyGAN" -> "zllrunning/face-parsing.PyTorch"
"Honlan/BeautyGAN" -> "huangzhikun1995/IPM-Net" ["e"=1]
"Honlan/BeautyGAN" -> "VinAIResearch/CPM"
"Honlan/BeautyGAN" -> "makeuptransfer/SCGAN"
"google/portrait-shadow-manipulation" -> "google/neural-light-transport"
"google/portrait-shadow-manipulation" -> "zhhoper/DPR"
"google/portrait-shadow-manipulation" -> "vinthony/ghost-free-shadow-removal"
"google/portrait-shadow-manipulation" -> "WangLiwen1994/DeepRelight"
"google/portrait-shadow-manipulation" -> "zhhoper/RI_render_DPR"
"google/portrait-shadow-manipulation" -> "naoto0804/SynShadow"
"google/portrait-shadow-manipulation" -> "xw-hu/Mask-ShadowGAN"
"google/portrait-shadow-manipulation" -> "senguptaumd/SfSNet" ["e"=1]
"google/portrait-shadow-manipulation" -> "YingqingHe/Shadow-Removal-via-Generative-Priors"
"makeuptransfer/SCGAN" -> "VinAIResearch/CPM"
"makeuptransfer/SCGAN" -> "Chenyu-Yang-2000/EleGANt"
"makeuptransfer/SCGAN" -> "Snowfallingplum/SSAT"
"makeuptransfer/SCGAN" -> "Yutong-Zhou-cv/Awesome-AI-in-Beauty-Industry"
"makeuptransfer/SCGAN" -> "Jian-danai/Decompose-Distill-BeautyGAN"
"makeuptransfer/SCGAN" -> "wtjiang98/BeautyGAN_pytorch"
"makeuptransfer/SCGAN" -> "wtjiang98/PSGAN"
"wpeebles/gangealing" -> "yuval-alaluf/stylegan3-editing"
"wpeebles/gangealing" -> "nupurkmr9/vision-aided-gan"
"wpeebles/gangealing" -> "royorel/StyleSDF" ["e"=1]
"wpeebles/gangealing" -> "facebookresearch/StyleNeRF"
"wpeebles/gangealing" -> "NVlabs/eg3d" ["e"=1]
"wpeebles/gangealing" -> "danielroich/PTI"
"wpeebles/gangealing" -> "mit-han-lab/anycost-gan"
"wpeebles/gangealing" -> "stylegan-human/StyleGAN-Human"
"wpeebles/gangealing" -> "autonomousvision/stylegan_xl"
"wpeebles/gangealing" -> "yuval-alaluf/hyperstyle"
"wpeebles/gangealing" -> "weihaox/awesome-gan-inversion"
"wpeebles/gangealing" -> "GaParmar/clean-fid"
"wpeebles/gangealing" -> "rotemtzaban/STIT"
"wpeebles/gangealing" -> "yuval-alaluf/restyle-encoder"
"wpeebles/gangealing" -> "rinongal/StyleGAN-nada"
"w86763777/pytorch-gan-collections" -> "w86763777/pytorch-gan-metrics"
"ArztSamuel/Applying_EANNs" -> "greerviau/SnakeAI"
"ArztSamuel/Applying_EANNs" -> "ssusnic/Machine-Learning-Flappy-Bird"
"ArztSamuel/Applying_EANNs" -> "Sentdex/pygta5" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "hamuchiwa/AutoRCCar" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "tawnkramer/sdsandbox" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "Unity-Technologies/ml-agents" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "Blueteak/Unity-Neural-Network"
"ArztSamuel/Applying_EANNs" -> "harvitronix/reinforcement-learning-car" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "techwithtim/NEAT-Flappy-Bird" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "aleju/mario-ai" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "CodeReclaimers/neat-python" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "lexfridman/deeptraffic" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "Unity-Technologies/FPSSample" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "yenchenlin/DeepLearningFlappyBird" ["e"=1]
"ArztSamuel/Applying_EANNs" -> "uber-research/PyTorch-NEAT" ["e"=1]
"apchenstu/sofgan" -> "omertov/encoder4editing"
"apchenstu/sofgan" -> "seasonSH/SemanticStyleGAN"
"apchenstu/sofgan" -> "danielroich/PTI"
"apchenstu/sofgan" -> "yuval-alaluf/stylegan3-editing"
"apchenstu/sofgan" -> "ZPdesu/SEAN"
"apchenstu/sofgan" -> "weihaox/awesome-gan-inversion"
"apchenstu/sofgan" -> "yuval-alaluf/hyperstyle"
"apchenstu/sofgan" -> "facebookresearch/StyleNeRF"
"apchenstu/sofgan" -> "RenYurui/PIRender" ["e"=1]
"apchenstu/sofgan" -> "betterze/StyleSpace"
"apchenstu/sofgan" -> "genforce/interfacegan"
"apchenstu/sofgan" -> "stylegan-human/StyleGAN-Human"
"apchenstu/sofgan" -> "Tengfei-Wang/HFGI"
"apchenstu/sofgan" -> "rotemtzaban/STIT"
"apchenstu/sofgan" -> "ZPdesu/Barbershop"
"maciej3031/comixify" -> "taki0112/CartoonGAN-Tensorflow"
"maciej3031/comixify" -> "znxlwm/pytorch-CartoonGAN"
"maciej3031/comixify" -> "Yijunmaverick/CartoonGAN-Test-Pytorch-Torch"
"maciej3031/comixify" -> "nijuyr/comixGAN"
"taki0112/CartoonGAN-Tensorflow" -> "znxlwm/pytorch-CartoonGAN"
"taki0112/CartoonGAN-Tensorflow" -> "Yijunmaverick/CartoonGAN-Test-Pytorch-Torch"
"taki0112/CartoonGAN-Tensorflow" -> "SystemErrorWang/CartoonGAN"
"taki0112/CartoonGAN-Tensorflow" -> "pradeeplam/Anime-Sketch-Coloring-with-Swish-Gated-Residual-UNet" ["e"=1]
"taki0112/CartoonGAN-Tensorflow" -> "maciej3031/comixify"
"taki0112/CartoonGAN-Tensorflow" -> "mnicnc404/CartoonGan-tensorflow"
"sedthh/pyxelate" -> "giventofly/pixelit"
"sedthh/pyxelate" -> "google-research/frame-interpolation" ["e"=1]
"sedthh/pyxelate" -> "TotallyNotChase/glitch-this" ["e"=1]
"sedthh/pyxelate" -> "mchong6/JoJoGAN"
"sedthh/pyxelate" -> "rinongal/StyleGAN-nada"
"sedthh/pyxelate" -> "yuval-alaluf/hyperstyle"
"sedthh/pyxelate" -> "sberbank-ai/ru-dalle" ["e"=1]
"sedthh/pyxelate" -> "manuelruder/fast-artistic-videos"
"sedthh/pyxelate" -> "OndrejTexler/Few-Shot-Patch-Based-Training" ["e"=1]
"sedthh/pyxelate" -> "securas/SealedBite" ["e"=1]
"sedthh/pyxelate" -> "Sxela/ArcaneGAN"
"sedthh/pyxelate" -> "bryandlee/animegan2-pytorch"
"sedthh/pyxelate" -> "dribnet/pixray" ["e"=1]
"sedthh/pyxelate" -> "Mukosame/Anime2Sketch" ["e"=1]
"sedthh/pyxelate" -> "azagaya/laigter" ["e"=1]
"znxlwm/pytorch-CartoonGAN" -> "Yijunmaverick/CartoonGAN-Test-Pytorch-Torch"
"znxlwm/pytorch-CartoonGAN" -> "taki0112/CartoonGAN-Tensorflow"
"znxlwm/pytorch-CartoonGAN" -> "FlyingGoblin/CartoonGAN"
"znxlwm/pytorch-CartoonGAN" -> "mnicnc404/CartoonGan-tensorflow"
"znxlwm/pytorch-CartoonGAN" -> "SystemErrorWang/CartoonGAN"
"znxlwm/pytorch-CartoonGAN" -> "znxlwm/pytorch-Conditional-image-to-image-translation"
"znxlwm/pytorch-CartoonGAN" -> "maciej3031/comixify"
"znxlwm/pytorch-CartoonGAN" -> "HsinYingLee/DRIT"
"znxlwm/pytorch-CartoonGAN" -> "FilipAndersson245/cartoon-gan"
"znxlwm/pytorch-CartoonGAN" -> "seasonSH/WarpGAN"
"znxlwm/pytorch-CartoonGAN" -> "CompVis/adaptive-style-transfer"
"Po-Hsun-Su/pytorch-ssim" -> "jorge-pessoa/pytorch-msssim"
"Po-Hsun-Su/pytorch-ssim" -> "VainF/pytorch-msssim"
"Po-Hsun-Su/pytorch-ssim" -> "richzhang/PerceptualSimilarity"
"Po-Hsun-Su/pytorch-ssim" -> "mseitzer/pytorch-fid"
"Po-Hsun-Su/pytorch-ssim" -> "thstkdgus35/EDSR-PyTorch" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "heykeetae/Self-Attention-GAN"
"Po-Hsun-Su/pytorch-ssim" -> "photosynthesis-team/piq" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "NVlabs/MUNIT"
"Po-Hsun-Su/pytorch-ssim" -> "YapengTian/Single-Image-Super-Resolution" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "xinntao/BasicSR" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "yulunzhang/RCAN" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "NVIDIA/flownet2-pytorch" ["e"=1]
"Po-Hsun-Su/pytorch-ssim" -> "switchablenorms/CelebAMask-HQ"
"Po-Hsun-Su/pytorch-ssim" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"Po-Hsun-Su/pytorch-ssim" -> "utkuozbulak/pytorch-cnn-visualizations" ["e"=1]
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/Pool_AI"
"Code-Bullet/Flappy-Bird-AI" -> "Code-Bullet/RubiksCubeAI"
"VISIONAI/clouddream" -> "jrosebr1/bat-country"
"VISIONAI/clouddream" -> "kesara/deepdreamer"
"VISIONAI/clouddream" -> "mjibson/ddd"
"VISIONAI/clouddream" -> "graphific/DeepDreamVideo"
"VISIONAI/clouddream" -> "ryankennedyio/deep-dream-generator"
"VISIONAI/clouddream" -> "samim23/DeepDreamAnim"
"VISIONAI/clouddream" -> "herval/deepdream-docker"
"VISIONAI/clouddream" -> "JohnMount/CaffeECSExample"
"VISIONAI/clouddream" -> "graphific/dl-machine"
"VISIONAI/clouddream" -> "jcjohnson/cnn-vis"
"seanbell/opensurfaces" -> "seanbell/intrinsic"
"seanbell/opensurfaces" -> "seanbell/opensurfaces-segmentation-ui"
"bytedance/OMGD" -> "snap-research/CAT"
"bytedance/OMGD" -> "SJLeo/DMAD"
"bytedance/OMGD" -> "mit-han-lab/gan-compression"
"bytedance/OMGD" -> "HideUnderBush/UI2I_via_StyleGAN2"
"bytedance/OMGD" -> "ImCharlesY/AdaInt" ["e"=1]
"mit-han-lab/anycost-gan" -> "omertov/encoder4editing"
"mit-han-lab/anycost-gan" -> "taesungp/swapping-autoencoder-pytorch"
"mit-han-lab/anycost-gan" -> "imlixinyang/HiSD"
"mit-han-lab/anycost-gan" -> "weihaox/awesome-gan-inversion"
"mit-han-lab/anycost-gan" -> "genforce/interfacegan"
"mit-han-lab/anycost-gan" -> "mit-han-lab/data-efficient-gans"
"mit-han-lab/anycost-gan" -> "yuval-alaluf/stylegan3-editing"
"mit-han-lab/anycost-gan" -> "bes-dev/MobileStyleGAN.pytorch"
"mit-han-lab/anycost-gan" -> "naver-ai/StyleMapGAN"
"mit-han-lab/anycost-gan" -> "danielroich/PTI"
"mit-han-lab/anycost-gan" -> "wpeebles/gangealing"
"mit-han-lab/anycost-gan" -> "GaParmar/clean-fid"
"mit-han-lab/anycost-gan" -> "betterze/StyleSpace"
"mit-han-lab/anycost-gan" -> "rosinality/stylegan2-pytorch"
"mit-han-lab/anycost-gan" -> "ZPdesu/SEAN"
"HzDmS/gaze_redirection" -> "zhangqianhui/GazeAnimation"
"HzDmS/gaze_redirection" -> "zhangqianhui/GazeCorrection"
"HzDmS/gaze_redirection" -> "BlueWinters/DeepWarp"
"HzDmS/gaze_redirection" -> "chihfanhsu/gaze_correction"
"OlavHN/fast-neural-style" -> "junrushao1994/fast-neural-style.tf"
"OlavHN/fast-neural-style" -> "hzy46/fast-neural-style-tensorflow"
"OlavHN/fast-neural-style" -> "burness/neural_style_tensorflow"
"OlavHN/fast-neural-style" -> "yusuketomoto/chainer-fast-neuralstyle"
"OlavHN/fast-neural-style" -> "awentzonline/keras-rtst"
"SergeyMorugin/ostagram" -> "jcjohnson/neural-style"
"SergeyMorugin/ostagram" -> "manuelruder/artistic-videos"
"SergeyMorugin/ostagram" -> "kaishengtai/neuralart"
"SergeyMorugin/ostagram" -> "yusuketomoto/chainer-fast-neuralstyle"
"SergeyMorugin/ostagram" -> "fzliu/style-transfer"
"SergeyMorugin/ostagram" -> "alexjc/neural-doodle"
"SergeyMorugin/ostagram" -> "andersbll/neural_artistic_style"
"SergeyMorugin/ostagram" -> "awentzonline/image-analogies"
"SergeyMorugin/ostagram" -> "chuanli11/CNNMRF"
"SergeyMorugin/ostagram" -> "Yijunmaverick/UniversalStyleTransfer"
"SergeyMorugin/ostagram" -> "jcjohnson/fast-neural-style"
"SergeyMorugin/ostagram" -> "titu1994/Neural-Style-Transfer"
"SergeyMorugin/ostagram" -> "DmitryUlyanov/fast-neural-doodle"
"SergeyMorugin/ostagram" -> "xunhuang1995/AdaIN-style"
"SergeyMorugin/ostagram" -> "msracver/Deep-Image-Analogy"
"czczup/URST" -> "MingSun-Tse/Collaborative-Distillation"
"reiinakano/fast-style-transfer-deeplearnjs" -> "reiinakano/arbitrary-image-stylization-tfjs"
"reiinakano/fast-style-transfer-deeplearnjs" -> "tipsy/bubbly-bg" ["e"=1]
"reiinakano/fast-style-transfer-deeplearnjs" -> "PAIR-code/deeplearnjs" ["e"=1]
"reiinakano/fast-style-transfer-deeplearnjs" -> "yusuketomoto/chainer-fast-neuralstyle"
"reiinakano/fast-style-transfer-deeplearnjs" -> "jcjohnson/fast-neural-style"
"reiinakano/fast-style-transfer-deeplearnjs" -> "sunshineatnoon/PytorchWCT"
"reiinakano/fast-style-transfer-deeplearnjs" -> "tomepel/Technical_Book_DL" ["e"=1]
"reiinakano/fast-style-transfer-deeplearnjs" -> "msracver/Deep-Image-Analogy"
"reiinakano/fast-style-transfer-deeplearnjs" -> "googlecreativelab/teachable-machine" ["e"=1]
"reiinakano/fast-style-transfer-deeplearnjs" -> "lengstrom/fast-style-transfer"
"reiinakano/fast-style-transfer-deeplearnjs" -> "yining1023/styleTransfer_spell"
"reiinakano/fast-style-transfer-deeplearnjs" -> "csurfer/gitsuggest" ["e"=1]
"reiinakano/fast-style-transfer-deeplearnjs" -> "awentzonline/image-analogies"
"reiinakano/fast-style-transfer-deeplearnjs" -> "javascript-machine-learning/color-accessibility-neural-network-deeplearnjs"
"reiinakano/fast-style-transfer-deeplearnjs" -> "clintonwoo/hackernews-react-graphql" ["e"=1]
"robbiebarrat/plant-art" -> "robbiebarrat/Sculpture-GAN"
"robbiebarrat/plant-art" -> "robbiebarrat/Bach_AI"
"ryankiros/neural-storyteller" -> "ryankiros/skip-thoughts" ["e"=1]
"ryankiros/neural-storyteller" -> "karpathy/neuraltalk2" ["e"=1]
"ryankiros/neural-storyteller" -> "karpathy/neuraltalk" ["e"=1]
"ryankiros/neural-storyteller" -> "facebook/MemNN" ["e"=1]
"ryankiros/neural-storyteller" -> "Newmu/dcgan_code"
"ryankiros/neural-storyteller" -> "Lasagne/Lasagne" ["e"=1]
"ryankiros/neural-storyteller" -> "kjw0612/awesome-rnn" ["e"=1]
"ryankiros/neural-storyteller" -> "harvardnlp/seq2seq-attn" ["e"=1]
"ryankiros/neural-storyteller" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"ryankiros/neural-storyteller" -> "alexjc/neural-doodle"
"ryankiros/neural-storyteller" -> "karpathy/char-rnn" ["e"=1]
"ryankiros/neural-storyteller" -> "awentzonline/image-analogies"
"ryankiros/neural-storyteller" -> "pavelgonchar/colornet"
"ryankiros/neural-storyteller" -> "soumith/convnet-benchmarks" ["e"=1]
"ryankiros/neural-storyteller" -> "paarthneekhara/text-to-image"
"EvgenyKashin/stylegan2-distillation" -> "rolux/stylegan2encoder"
"EvgenyKashin/stylegan2-distillation" -> "omertov/encoder4editing"
"EvgenyKashin/stylegan2-distillation" -> "Puzer/stylegan-encoder"
"EvgenyKashin/stylegan2-distillation" -> "rosinality/stylegan2-pytorch"
"EvgenyKashin/stylegan2-distillation" -> "justinpinkney/awesome-pretrained-stylegan2"
"EvgenyKashin/stylegan2-distillation" -> "pbaylies/stylegan-encoder"
"EvgenyKashin/stylegan2-distillation" -> "genforce/idinvert"
"EvgenyKashin/stylegan2-distillation" -> "eladrich/pixel2style2pixel"
"EvgenyKashin/stylegan2-distillation" -> "harskish/ganspace"
"EvgenyKashin/stylegan2-distillation" -> "genforce/interfacegan"
"EvgenyKashin/stylegan2-distillation" -> "mit-han-lab/gan-compression"
"EvgenyKashin/stylegan2-distillation" -> "danielroich/PTI"
"EvgenyKashin/stylegan2-distillation" -> "yuval-alaluf/restyle-encoder"
"EvgenyKashin/stylegan2-distillation" -> "bes-dev/MobileStyleGAN.pytorch"
"EvgenyKashin/stylegan2-distillation" -> "genforce/sefa"
"PeterouZh/CIPS-3D" -> "marcoamonteiro/pi-GAN" ["e"=1]
"PeterouZh/CIPS-3D" -> "facebookresearch/StyleNeRF"
"PeterouZh/CIPS-3D" -> "royorel/StyleSDF" ["e"=1]
"PeterouZh/CIPS-3D" -> "XingangPan/ShadeGAN" ["e"=1]
"PeterouZh/CIPS-3D" -> "MrTornado24/FENeRF" ["e"=1]
"PeterouZh/CIPS-3D" -> "danielroich/PTI"
"PeterouZh/CIPS-3D" -> "gafniguy/4D-Facial-Avatars" ["e"=1]
"PeterouZh/CIPS-3D" -> "genforce/volumegan" ["e"=1]
"PeterouZh/CIPS-3D" -> "YudongGuo/AD-NeRF" ["e"=1]
"PeterouZh/CIPS-3D" -> "CrisHY1995/headnerf" ["e"=1]
"PeterouZh/CIPS-3D" -> "yuval-alaluf/stylegan3-editing"
"PeterouZh/CIPS-3D" -> "autonomousvision/giraffe" ["e"=1]
"PeterouZh/CIPS-3D" -> "MrTornado24/Next3D" ["e"=1]
"PeterouZh/CIPS-3D" -> "yuval-alaluf/hyperstyle"
"PeterouZh/CIPS-3D" -> "weihaox/awesome-gan-inversion"
"autonomousvision/projected_gan" -> "autonomousvision/stylegan_xl"
"autonomousvision/projected_gan" -> "nupurkmr9/vision-aided-gan"
"autonomousvision/projected_gan" -> "odegeasslbc/FastGAN-pytorch"
"autonomousvision/projected_gan" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"autonomousvision/projected_gan" -> "yuval-alaluf/hyperstyle"
"autonomousvision/projected_gan" -> "rosinality/stylegan2-pytorch"
"autonomousvision/projected_gan" -> "dorarad/gansformer"
"autonomousvision/projected_gan" -> "microsoft/StyleSwin"
"autonomousvision/projected_gan" -> "rosinality/alias-free-gan-pytorch"
"autonomousvision/projected_gan" -> "mit-han-lab/data-efficient-gans"
"autonomousvision/projected_gan" -> "chail/anyres-gan"
"autonomousvision/projected_gan" -> "omertov/encoder4editing"
"autonomousvision/projected_gan" -> "yuval-alaluf/stylegan3-editing"
"autonomousvision/projected_gan" -> "GaParmar/clean-fid"
"autonomousvision/projected_gan" -> "weihaox/awesome-gan-inversion"
"autonomousvision/stylegan_xl" -> "autonomousvision/projected_gan"
"autonomousvision/stylegan_xl" -> "rinongal/StyleGAN-nada"
"autonomousvision/stylegan_xl" -> "yuval-alaluf/stylegan3-editing"
"autonomousvision/stylegan_xl" -> "nupurkmr9/vision-aided-gan"
"autonomousvision/stylegan_xl" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"autonomousvision/stylegan_xl" -> "stylegan-human/StyleGAN-Human"
"autonomousvision/stylegan_xl" -> "autonomousvision/stylegan-t" ["e"=1]
"autonomousvision/stylegan_xl" -> "danielroich/PTI"
"autonomousvision/stylegan_xl" -> "facebookresearch/StyleNeRF"
"autonomousvision/stylegan_xl" -> "weihaox/awesome-gan-inversion"
"autonomousvision/stylegan_xl" -> "self-distilled-stylegan/self-distilled-internet-photos"
"autonomousvision/stylegan_xl" -> "Zhendong-Wang/Diffusion-GAN" ["e"=1]
"autonomousvision/stylegan_xl" -> "phizaz/diffae" ["e"=1]
"autonomousvision/stylegan_xl" -> "omertov/encoder4editing"
"autonomousvision/stylegan_xl" -> "chail/anyres-gan"
"facebookresearch/StyleNeRF" -> "royorel/StyleSDF" ["e"=1]
"facebookresearch/StyleNeRF" -> "yuval-alaluf/stylegan3-editing"
"facebookresearch/StyleNeRF" -> "marcoamonteiro/pi-GAN" ["e"=1]
"facebookresearch/StyleNeRF" -> "PeterouZh/CIPS-3D"
"facebookresearch/StyleNeRF" -> "stylegan-human/StyleGAN-Human"
"facebookresearch/StyleNeRF" -> "danielroich/PTI"
"facebookresearch/StyleNeRF" -> "NVlabs/eg3d" ["e"=1]
"facebookresearch/StyleNeRF" -> "gafniguy/4D-Facial-Avatars" ["e"=1]
"facebookresearch/StyleNeRF" -> "facebookresearch/multiface" ["e"=1]
"facebookresearch/StyleNeRF" -> "CrisHY1995/headnerf" ["e"=1]
"facebookresearch/StyleNeRF" -> "autonomousvision/stylegan_xl"
"facebookresearch/StyleNeRF" -> "apchenstu/TensoRF" ["e"=1]
"facebookresearch/StyleNeRF" -> "autonomousvision/giraffe" ["e"=1]
"facebookresearch/StyleNeRF" -> "weihaox/awesome-gan-inversion"
"facebookresearch/StyleNeRF" -> "zhengyuf/IMavatar" ["e"=1]
"genforce/insgen" -> "jxhuang0508/GenCo"
"genforce/mganprior" -> "XingangPan/deep-generative-prior"
"genforce/mganprior" -> "genforce/idinvert_pytorch"
"genforce/mganprior" -> "genforce/idinvert"
"genforce/mganprior" -> "genforce/higan"
"genforce/mganprior" -> "weihaox/awesome-gan-inversion"
"msracver/Deep-Exemplar-based-Colorization" -> "richzhang/colorization-pytorch"
"msracver/Deep-Exemplar-based-Colorization" -> "MarkMoHR/Awesome-Image-Colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "ericsujw/InstColorization"
"msracver/Deep-Exemplar-based-Colorization" -> "hmmlillian/Gray-Image-Retrieval"
"msracver/Deep-Exemplar-based-Colorization" -> "ImagingLab/Colorizing-with-GANs"
"msracver/Deep-Exemplar-based-Colorization" -> "pvitoria/ChromaGAN"
"msracver/Deep-Exemplar-based-Colorization" -> "xuzhongyou/Colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "Armour/Automatic-Image-Colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "satoshiiizuka/siggraphasia2019_remastering"
"msracver/Deep-Exemplar-based-Colorization" -> "ncianeo/Deep-Exemplar-based-Colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "msracver/Deep-Image-Analogy"
"msracver/Deep-Exemplar-based-Colorization" -> "phoenix104104/fast_blind_video_consistency" ["e"=1]
"msracver/Deep-Exemplar-based-Colorization" -> "junyanz/interactive-deep-colorization"
"msracver/Deep-Exemplar-based-Colorization" -> "gustavla/autocolorize"
"naver-ai/StyleMapGAN" -> "omertov/encoder4editing"
"naver-ai/StyleMapGAN" -> "betterze/StyleSpace"
"naver-ai/StyleMapGAN" -> "yuval-alaluf/stylegan3-editing"
"naver-ai/StyleMapGAN" -> "danielroich/PTI"
"naver-ai/StyleMapGAN" -> "weihaox/awesome-gan-inversion"
"naver-ai/StyleMapGAN" -> "ZPdesu/SEAN"
"naver-ai/StyleMapGAN" -> "IVRL/GANLocalEditing"
"naver-ai/StyleMapGAN" -> "yuval-alaluf/restyle-encoder"
"naver-ai/StyleMapGAN" -> "IIGROUP/TediGAN"
"naver-ai/StyleMapGAN" -> "mit-han-lab/anycost-gan"
"naver-ai/StyleMapGAN" -> "Tengfei-Wang/HFGI"
"naver-ai/StyleMapGAN" -> "imlixinyang/HiSD"
"naver-ai/StyleMapGAN" -> "rosinality/alias-free-gan-pytorch"
"naver-ai/StyleMapGAN" -> "zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["e"=1]
"naver-ai/StyleMapGAN" -> "autonomousvision/stylegan_xl"
"zllrunning/face-makeup.PyTorch" -> "zllrunning/face-parsing.PyTorch"
"zllrunning/face-makeup.PyTorch" -> "srivatsan-ramesh/Virtual-Makeup"
"zllrunning/face-makeup.PyTorch" -> "Honlan/BeautyGAN"
"zllrunning/face-makeup.PyTorch" -> "Honlan/DMT"
"zllrunning/face-makeup.PyTorch" -> "wtjiang98/PSGAN"
"zllrunning/face-makeup.PyTorch" -> "YBIGTA/pytorch-hair-segmentation"
"zllrunning/face-makeup.PyTorch" -> "switchablenorms/CelebAMask-HQ"
"zllrunning/face-makeup.PyTorch" -> "JACKYLUO1991/FaceParsing"
"zllrunning/face-makeup.PyTorch" -> "wangguanzhi/LADN"
"zllrunning/face-makeup.PyTorch" -> "wtjiang98/BeautyGAN_pytorch"
"zllrunning/face-makeup.PyTorch" -> "hriddhidey/visage"
"zllrunning/face-makeup.PyTorch" -> "masterkapilkumar/Digital-Makeup-Transfer"
"zllrunning/face-makeup.PyTorch" -> "BeautyGlow/BeautyGlow.github.io"
"zllrunning/face-makeup.PyTorch" -> "wty-ustc/HairCLIP"
"zllrunning/face-makeup.PyTorch" -> "KAlO2/PerfectShow"
"PKU-IMRE/ChipGAN" -> "yanyangbaobeiIsEmma-zz/ChinsePaintingStyleTransfer"
"aitorzip/PyTorch-CycleGAN" -> "arnab39/cycleGAN-PyTorch"
"aitorzip/PyTorch-CycleGAN" -> "mrzhu-cool/pix2pix-pytorch"
"aitorzip/PyTorch-CycleGAN" -> "togheppi/CycleGAN"
"aitorzip/PyTorch-CycleGAN" -> "junyanz/pytorch-CycleGAN-and-pix2pix"
"aitorzip/PyTorch-CycleGAN" -> "taesungp/contrastive-unpaired-translation"
"aitorzip/PyTorch-CycleGAN" -> "yunjey/mnist-svhn-transfer"
"aitorzip/PyTorch-CycleGAN" -> "NVlabs/MUNIT"
"aitorzip/PyTorch-CycleGAN" -> "Ha0Tang/AttentionGAN"
"aitorzip/PyTorch-CycleGAN" -> "znxlwm/pytorch-CycleGAN"
"aitorzip/PyTorch-CycleGAN" -> "jhoffman/cycada_release" ["e"=1]
"aitorzip/PyTorch-CycleGAN" -> "Lornatang/CycleGAN-PyTorch"
"aitorzip/PyTorch-CycleGAN" -> "caogang/wgan-gp"
"aitorzip/PyTorch-CycleGAN" -> "heykeetae/Self-Attention-GAN"
"aitorzip/PyTorch-CycleGAN" -> "rosinality/style-based-gan-pytorch"
"aitorzip/PyTorch-CycleGAN" -> "Po-Hsun-Su/pytorch-ssim"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "PKU-IMRE/ChipGAN"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "ychen93/Chinese-Painting-Dataset"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "Luxi-Zhao/chinese-landscape-painting-stylization"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "lbsswu/Chinese_style_transfer"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "Xzzit/ChipGAN-PyTorch1.8-"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "paint4poem/paint4poem"
"alicex2020/Chinese-Landscape-Painting-Dataset" -> "justinpinkney/stylegan2"
"vanhuyz/CycleGAN-TensorFlow" -> "xhujoy/CycleGAN-tensorflow"
"vanhuyz/CycleGAN-TensorFlow" -> "hardikbansal/CycleGAN"
"vanhuyz/CycleGAN-TensorFlow" -> "architrathore/CycleGAN"
"vanhuyz/CycleGAN-TensorFlow" -> "yenchenlin/pix2pix-tensorflow"
"vanhuyz/CycleGAN-TensorFlow" -> "leehomyc/cyclegan-1"
"vanhuyz/CycleGAN-TensorFlow" -> "affinelayer/pix2pix-tensorflow"
"vanhuyz/CycleGAN-TensorFlow" -> "junyanz/CycleGAN"
"vanhuyz/CycleGAN-TensorFlow" -> "carpedm20/BEGAN-tensorflow"
"vanhuyz/CycleGAN-TensorFlow" -> "carpedm20/DCGAN-tensorflow"
"vanhuyz/CycleGAN-TensorFlow" -> "LynnHo/CycleGAN-Tensorflow-2"
"vanhuyz/CycleGAN-TensorFlow" -> "tjwei/GANotebooks"
"vanhuyz/CycleGAN-TensorFlow" -> "hwalsuklee/tensorflow-generative-model-collections"
"vanhuyz/CycleGAN-TensorFlow" -> "tkarras/progressive_growing_of_gans"
"vanhuyz/CycleGAN-TensorFlow" -> "igul222/improved_wgan_training"
"vanhuyz/CycleGAN-TensorFlow" -> "taki0112/StarGAN-Tensorflow"
"Zardinality/WGAN-tensorflow" -> "igul222/improved_wgan_training"
"Zardinality/WGAN-tensorflow" -> "martinarjovsky/WassersteinGAN"
"Zardinality/WGAN-tensorflow" -> "shekkizh/WassersteinGAN.tensorflow"
"Zardinality/WGAN-tensorflow" -> "jiamings/wgan"
"Zardinality/WGAN-tensorflow" -> "carpedm20/BEGAN-tensorflow"
"Zardinality/WGAN-tensorflow" -> "buriburisuri/ac-gan"
"Zardinality/WGAN-tensorflow" -> "guojunq/lsgan"
"Zardinality/WGAN-tensorflow" -> "yenchenlin/pix2pix-tensorflow"
"Zardinality/WGAN-tensorflow" -> "openai/improved-gan"
"Zardinality/WGAN-tensorflow" -> "caogang/wgan-gp"
"Zardinality/WGAN-tensorflow" -> "carpedm20/DCGAN-tensorflow"
"Zardinality/WGAN-tensorflow" -> "hwalsuklee/tensorflow-generative-model-collections"
"Zardinality/WGAN-tensorflow" -> "awjuliani/TF-Tutorials"
"Zardinality/WGAN-tensorflow" -> "minhnhat93/tf-SNDCGAN"
"Zardinality/WGAN-tensorflow" -> "openai/InfoGAN"
"hanzhanggit/StackGAN-Pytorch" -> "hanzhanggit/StackGAN-v2"
"hanzhanggit/StackGAN-Pytorch" -> "taoxugit/AttnGAN"
"hanzhanggit/StackGAN-Pytorch" -> "aelnouby/Text-to-Image-Synthesis"
"hanzhanggit/StackGAN-Pytorch" -> "hanzhanggit/StackGAN"
"hanzhanggit/StackGAN-Pytorch" -> "hanzhanggit/StackGAN-inception-model"
"hanzhanggit/StackGAN-Pytorch" -> "reedscot/icml2016"
"hanzhanggit/StackGAN-Pytorch" -> "ypxie/HDGan"
"hanzhanggit/StackGAN-Pytorch" -> "sbarratt/inception-score-pytorch"
"hanzhanggit/StackGAN-Pytorch" -> "lzhbrian/arbitrary-text-to-image-papers"
"hanzhanggit/StackGAN-Pytorch" -> "qiaott/MirrorGAN"
"hanzhanggit/StackGAN-Pytorch" -> "google/sg2im" ["e"=1]
"hanzhanggit/StackGAN-Pytorch" -> "MinfengZhu/DM-GAN"
"hanzhanggit/StackGAN-Pytorch" -> "mrlibw/ControlGAN"
"hanzhanggit/StackGAN-Pytorch" -> "tohinz/multiple-objects-gan"
"hanzhanggit/StackGAN-Pytorch" -> "woozzu/tagan"
"reedscot/nips2016" -> "reedscot/icml2016"
"reedscot/nips2016" -> "reedscot/cvpr2016"
"reedscot/nips2016" -> "Evolving-AI-Lab/ppgn"
"reedscot/nips2016" -> "facebook/eyescream"
"reedscot/nips2016" -> "Guim3/IcGAN"
"reedscot/nips2016" -> "xiaolonw/ss-gan"
"reedscot/nips2016" -> "cvondrick/videogan"
"reedscot/nips2016" -> "guojunq/lsgan"
"reedscot/nips2016" -> "emansim/text2image"
"reedscot/nips2016" -> "skaae/torch-gan" ["e"=1]
"reedscot/nips2016" -> "y0ast/VAE-Torch" ["e"=1]
"reedscot/nips2016" -> "kimiyoung/review_net" ["e"=1]
"reedscot/nips2016" -> "paarthneekhara/text-to-image"
"reedscot/nips2016" -> "SKTBrain/DiscoGAN"
"reedscot/nips2016" -> "iassael/torch-bnlstm" ["e"=1]
"taki0112/StarGAN-Tensorflow" -> "yunjey/stargan"
"taki0112/StarGAN-Tensorflow" -> "taki0112/Self-Attention-GAN-Tensorflow"
"taki0112/StarGAN-Tensorflow" -> "taki0112/MUNIT-Tensorflow"
"taki0112/StarGAN-Tensorflow" -> "yunjey/StarGAN"
"taki0112/StarGAN-Tensorflow" -> "vanhuyz/CycleGAN-TensorFlow"
"taki0112/StarGAN-Tensorflow" -> "taki0112/DRIT-Tensorflow"
"taki0112/StarGAN-Tensorflow" -> "albertpumarola/GANimation"
"taki0112/StarGAN-Tensorflow" -> "xhujoy/CycleGAN-tensorflow"
"taki0112/StarGAN-Tensorflow" -> "csmliu/STGAN"
"taki0112/StarGAN-Tensorflow" -> "google/compare_gan"
"taki0112/StarGAN-Tensorflow" -> "Zardinality/WGAN-tensorflow"
"taki0112/StarGAN-Tensorflow" -> "openai/glow"
"taki0112/StarGAN-Tensorflow" -> "brain-research/self-attention-gan"
"taki0112/StarGAN-Tensorflow" -> "nothinglo/Deep-Photo-Enhancer" ["e"=1]
"taki0112/StarGAN-Tensorflow" -> "pfnet-research/sngan_projection"
"woozzu/tagan" -> "woozzu/dong_iccv_2017"
"woozzu/tagan" -> "mrlibw/ControlGAN"
"woozzu/tagan" -> "mrlibw/ManiGAN"
"ypxie/HDGan" -> "hanzhanggit/StackGAN-inception-model"
"ypxie/HDGan" -> "MinfengZhu/DM-GAN"
"ypxie/HDGan" -> "lzhbrian/arbitrary-text-to-image-papers"
"ypxie/HDGan" -> "qiaott/MirrorGAN"
"ypxie/HDGan" -> "tohinz/multiple-objects-gan"
"ypxie/HDGan" -> "aelnouby/Text-to-Image-Synthesis"
"allthemusicllc/atm-cli" -> "allthemusicllc/libatm"
"allthemusicllc/atm-cli" -> "allthemusicllc/tarsplit"
"allthemusicllc/atm-cli" -> "sergree/matchering" ["e"=1]
"allthemusicllc/atm-cli" -> "amzn/computer-vision-basics-in-microsoft-excel"
"anandpawara/Real_Time_Image_Animation" -> "AliaksandrSiarohin/first-order-model"
"anandpawara/Real_Time_Image_Animation" -> "senguptaumd/Background-Matting"
"anandpawara/Real_Time_Image_Animation" -> "yemount/pose-animator"
"anandpawara/Real_Time_Image_Animation" -> "Rudrabha/Wav2Lip" ["e"=1]
"anandpawara/Real_Time_Image_Animation" -> "vt-vl-lab/3d-photo-inpainting"
"anandpawara/Real_Time_Image_Animation" -> "facebookresearch/pifuhd"
"anandpawara/Real_Time_Image_Animation" -> "iPERDance/iPERCore"
"anandpawara/Real_Time_Image_Animation" -> "minivision-ai/photo2cartoon"
"anandpawara/Real_Time_Image_Animation" -> "PeterL1n/BackgroundMattingV2"
"anandpawara/Real_Time_Image_Animation" -> "SystemErrorWang/White-box-Cartoonization"
"anandpawara/Real_Time_Image_Animation" -> "AliaksandrSiarohin/motion-cosegmentation" ["e"=1]
"anandpawara/Real_Time_Image_Animation" -> "pkhungurn/talking-head-anime-demo" ["e"=1]
"anandpawara/Real_Time_Image_Animation" -> "microsoft/Bringing-Old-Photos-Back-to-Life"
"anandpawara/Real_Time_Image_Animation" -> "alievk/avatarify"
"anandpawara/Real_Time_Image_Animation" -> "ZHKKKe/MODNet"
"assafshocher/InGAN" -> "sefibk/KernelGAN" ["e"=1]
"assafshocher/InGAN" -> "mintanwei/Cycle-IR"
"assafshocher/InGAN" -> "assafshocher/Resizer" ["e"=1]
"assafshocher/InGAN" -> "XingangPan/deep-generative-prior"
"assafshocher/InGAN" -> "tohinz/ConSinGAN"
"anilsathyan7/Portrait-Segmentation" -> "dong-x16/PortraitNet"
"anilsathyan7/Portrait-Segmentation" -> "clovaai/ext_portrait_segmentation"
"anilsathyan7/Portrait-Segmentation" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"anilsathyan7/Portrait-Segmentation" -> "tantara/JejuNet"
"anilsathyan7/Portrait-Segmentation" -> "lizhengwei1992/mobile_phone_human_matting"
"anilsathyan7/Portrait-Segmentation" -> "thuyngch/Human-Segmentation-PyTorch"
"anilsathyan7/Portrait-Segmentation" -> "aisegmentcn/matting_human_datasets"
"anilsathyan7/Portrait-Segmentation" -> "nolanliou/mobile-deeplab-v3-plus"
"anilsathyan7/Portrait-Segmentation" -> "lizhengwei1992/Semantic_Human_Matting"
"anilsathyan7/Portrait-Segmentation" -> "ZHKKKe/MODNet"
"anilsathyan7/Portrait-Segmentation" -> "sercant/mobile-segmentation"
"anilsathyan7/Portrait-Segmentation" -> "hyperconnect/MMNet"
"anilsathyan7/Portrait-Segmentation" -> "wukaoliu/CVPR2020-HAttMatting"
"anilsathyan7/Portrait-Segmentation" -> "akirasosa/mobile-semantic-segmentation"
"anilsathyan7/Portrait-Segmentation" -> "HymEric/Segmentation-Series-Chaos"
"ecsplendid/rembg-greenscreen" -> "dennisbappert/u-2-net-portrait"
"huggingface/pytorch-pretrained-BigGAN" -> "ajbrock/BigGAN-PyTorch"
"huggingface/pytorch-pretrained-BigGAN" -> "LMescheder/GAN_stability"
"huggingface/pytorch-pretrained-BigGAN" -> "pfnet-research/sngan_projection"
"huggingface/pytorch-pretrained-BigGAN" -> "rosinality/style-based-gan-pytorch"
"huggingface/pytorch-pretrained-BigGAN" -> "facebookresearch/pytorch_GAN_zoo"
"huggingface/pytorch-pretrained-BigGAN" -> "taki0112/BigGAN-Tensorflow"
"huggingface/pytorch-pretrained-BigGAN" -> "google/compare_gan"
"huggingface/pytorch-pretrained-BigGAN" -> "rosinality/vq-vae-2-pytorch" ["e"=1]
"huggingface/pytorch-pretrained-BigGAN" -> "akanimax/BMSG-GAN"
"huggingface/pytorch-pretrained-BigGAN" -> "akanimax/pro_gan_pytorch"
"huggingface/pytorch-pretrained-BigGAN" -> "taoxugit/AttnGAN"
"huggingface/pytorch-pretrained-BigGAN" -> "AaronLeong/BigGAN-pytorch"
"huggingface/pytorch-pretrained-BigGAN" -> "mkocabas/EpipolarPose" ["e"=1]
"huggingface/pytorch-pretrained-BigGAN" -> "sxhxliang/BigGAN-pytorch"
"huggingface/pytorch-pretrained-BigGAN" -> "mit-han-lab/data-efficient-gans"
"microsoft/StyleSwin" -> "nupurkmr9/vision-aided-gan"
"microsoft/StyleSwin" -> "yuval-alaluf/stylegan3-editing"
"microsoft/StyleSwin" -> "autonomousvision/stylegan_xl"
"microsoft/StyleSwin" -> "PITI-Synthesis/PITI" ["e"=1]
"microsoft/StyleSwin" -> "yuval-alaluf/hyperstyle"
"microsoft/StyleSwin" -> "autonomousvision/projected_gan"
"microsoft/StyleSwin" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"microsoft/StyleSwin" -> "weihaox/awesome-gan-inversion"
"microsoft/StyleSwin" -> "Tengfei-Wang/HFGI"
"microsoft/StyleSwin" -> "facebookresearch/StyleNeRF"
"microsoft/StyleSwin" -> "microsoft/CoCosNet" ["e"=1]
"microsoft/StyleSwin" -> "omertov/encoder4editing"
"microsoft/StyleSwin" -> "betterze/StyleSpace"
"microsoft/StyleSwin" -> "naver-ai/StyleMapGAN"
"microsoft/StyleSwin" -> "onion-liu/BlendGAN"
"thuyngch/Human-Segmentation-PyTorch" -> "lizhengwei1992/Semantic_Human_Matting"
"thuyngch/Human-Segmentation-PyTorch" -> "anilsathyan7/Portrait-Segmentation"
"thuyngch/Human-Segmentation-PyTorch" -> "dong-x16/PortraitNet"
"thuyngch/Human-Segmentation-PyTorch" -> "aisegmentcn/matting_human_datasets"
"thuyngch/Human-Segmentation-PyTorch" -> "Yaoyi-Li/GCA-Matting"
"thuyngch/Human-Segmentation-PyTorch" -> "foamliu/Deep-Image-Matting-PyTorch"
"thuyngch/Human-Segmentation-PyTorch" -> "JizhiziLi/animal-matting"
"thuyngch/Human-Segmentation-PyTorch" -> "hyk1996/Single-Human-Parsing-LIP" ["e"=1]
"thuyngch/Human-Segmentation-PyTorch" -> "wukaoliu/CVPR2020-HAttMatting"
"thuyngch/Human-Segmentation-PyTorch" -> "kevinlin311tw/CDCL-human-part-segmentation" ["e"=1]
"thuyngch/Human-Segmentation-PyTorch" -> "yunkezhang/FusionMatting"
"thuyngch/Human-Segmentation-PyTorch" -> "lizhengwei1992/mobile_phone_human_matting"
"thuyngch/Human-Segmentation-PyTorch" -> "PeikeLi/Self-Correction-Human-Parsing" ["e"=1]
"thuyngch/Human-Segmentation-PyTorch" -> "MarcoForte/FBA_Matting"
"thuyngch/Human-Segmentation-PyTorch" -> "nolanliou/mobile-deeplab-v3-plus"
"tsing90/pytorch_semantic_human_matting" -> "lizhengwei1992/Semantic_Human_Matting"
"zhhoper/DPR" -> "zhhoper/RI_render_DPR"
"zhhoper/DPR" -> "google/neural-light-transport"
"zhhoper/DPR" -> "andrewhou1/Shadow-Mask-Face-Relighting"
"zhhoper/DPR" -> "senguptaumd/SfSNet" ["e"=1]
"zhhoper/DPR" -> "majedelhelou/VIDIT"
"zhhoper/DPR" -> "waps101/AlbedoMM" ["e"=1]
"zhhoper/DPR" -> "google/portrait-shadow-manipulation"
"zhhoper/DPR" -> "WangLiwen1994/DeepRelight"
"zhhoper/DPR" -> "zexiangxu/Deep-Relighting"
"zhhoper/DPR" -> "andrewhou1/GeomConsistentFR"
"zhhoper/DPR" -> "lattas/AvatarMe" ["e"=1]
"zhhoper/DPR" -> "augmentedperception/total_relighting"
"zhhoper/DPR" -> "Juyong/FacePSNet" ["e"=1]
"zhhoper/DPR" -> "sicxu/Deep3dPortrait" ["e"=1]
"zhhoper/DPR" -> "APikielny/image-relighting"
"cmu-snap/pigasus" -> "thenewboston-developers/Account-Manager"
"cmu-snap/pigasus" -> "lightspin-tech/red-kube"
"cmu-snap/pigasus" -> "thenewboston-developers/Website"
"cmu-snap/pigasus" -> "USTC-Hackergame/hackergame2020-writeups" ["e"=1]
"cmu-snap/pigasus" -> "TiendaNube/php-programming-best-practices"
"cmu-snap/pigasus" -> "hpcn-uam/Limago" ["e"=1]
"cmu-snap/pigasus" -> "Xilinx/xup_vitis_network_example" ["e"=1]
"cmu-snap/pigasus" -> "Xilinx/open-nic" ["e"=1]
"cmu-snap/pigasus" -> "mubix/solarflare" ["e"=1]
"ajbrock/Neural-Photo-Editor" -> "junyanz/iGAN"
"ajbrock/Neural-Photo-Editor" -> "Tetrachrome/subpixel"
"ajbrock/Neural-Photo-Editor" -> "jcjohnson/fast-neural-style"
"ajbrock/Neural-Photo-Editor" -> "Newmu/dcgan_code"
"ajbrock/Neural-Photo-Editor" -> "facebook/eyescream"
"ajbrock/Neural-Photo-Editor" -> "leehomyc/High-Res-Neural-Inpainting"
"ajbrock/Neural-Photo-Editor" -> "reedscot/icml2016"
"ajbrock/Neural-Photo-Editor" -> "awentzonline/image-analogies"
"ajbrock/Neural-Photo-Editor" -> "DmitryUlyanov/texture_nets"
"ajbrock/Neural-Photo-Editor" -> "openai/pixel-cnn"
"ajbrock/Neural-Photo-Editor" -> "paarthneekhara/text-to-image"
"ajbrock/Neural-Photo-Editor" -> "david-gpu/srez"
"ajbrock/Neural-Photo-Editor" -> "openai/improved-gan"
"ajbrock/Neural-Photo-Editor" -> "msracver/Deep-Image-Analogy"
"ajbrock/Neural-Photo-Editor" -> "tomlepaine/fast-wavenet" ["e"=1]
"a312863063/seeprettyface-generator-babies" -> "a312863063/seeprettyface-generator-model"
"yihui-he/GAN-MNIST" -> "znxlwm/tensorflow-MNIST-GAN-DCGAN"
"reiinakano/arbitrary-image-stylization-tfjs" -> "reiinakano/fast-style-transfer-deeplearnjs"
"reiinakano/arbitrary-image-stylization-tfjs" -> "CompVis/adaptive-style-transfer"
"reiinakano/arbitrary-image-stylization-tfjs" -> "ProGamerGov/neural-style-pt"
"reiinakano/arbitrary-image-stylization-tfjs" -> "xunhuang1995/AdaIN-style"
"reiinakano/arbitrary-image-stylization-tfjs" -> "elleryqueenhomels/arbitrary_style_transfer" ["e"=1]
"reiinakano/arbitrary-image-stylization-tfjs" -> "ycjing/Neural-Style-Transfer-Papers"
"reiinakano/arbitrary-image-stylization-tfjs" -> "mnicnc404/CartoonGan-tensorflow"
"reiinakano/arbitrary-image-stylization-tfjs" -> "LouieYang/stroke-controllable-fast-style-transfer"
"reiinakano/arbitrary-image-stylization-tfjs" -> "gsurma/style_transfer"
"reiinakano/arbitrary-image-stylization-tfjs" -> "robbiebarrat/art-DCGAN"
"reiinakano/arbitrary-image-stylization-tfjs" -> "manuelruder/fast-artistic-videos"
"reiinakano/arbitrary-image-stylization-tfjs" -> "jdxyw/generativeart" ["e"=1]
"reiinakano/arbitrary-image-stylization-tfjs" -> "sunshineatnoon/LinearStyleTransfer"
"reiinakano/arbitrary-image-stylization-tfjs" -> "lengstrom/fast-style-transfer"
"reiinakano/arbitrary-image-stylization-tfjs" -> "jcjohnson/fast-neural-style"
"danielroich/PTI" -> "omertov/encoder4editing"
"danielroich/PTI" -> "weihaox/awesome-gan-inversion"
"danielroich/PTI" -> "yuval-alaluf/stylegan3-editing"
"danielroich/PTI" -> "yuval-alaluf/hyperstyle"
"danielroich/PTI" -> "stylegan-human/StyleGAN-Human"
"danielroich/PTI" -> "Tengfei-Wang/HFGI"
"danielroich/PTI" -> "rotemtzaban/STIT"
"danielroich/PTI" -> "rinongal/StyleGAN-nada"
"danielroich/PTI" -> "yuval-alaluf/restyle-encoder"
"danielroich/PTI" -> "seasonSH/SemanticStyleGAN"
"danielroich/PTI" -> "facebookresearch/StyleNeRF"
"danielroich/PTI" -> "genforce/interfacegan"
"danielroich/PTI" -> "betterze/StyleSpace"
"danielroich/PTI" -> "zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis" ["e"=1]
"danielroich/PTI" -> "autonomousvision/stylegan_xl"
"rotemtzaban/STIT" -> "danielroich/PTI"
"rotemtzaban/STIT" -> "yuval-alaluf/stylegan3-editing"
"rotemtzaban/STIT" -> "yuval-alaluf/hyperstyle"
"rotemtzaban/STIT" -> "zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis" ["e"=1]
"rotemtzaban/STIT" -> "Tengfei-Wang/HFGI"
"rotemtzaban/STIT" -> "harlanhong/CVPR2022-DaGAN" ["e"=1]
"rotemtzaban/STIT" -> "FeiiYin/StyleHEAT" ["e"=1]
"rotemtzaban/STIT" -> "yuval-alaluf/restyle-encoder"
"rotemtzaban/STIT" -> "nv-tlabs/editGAN_release"
"rotemtzaban/STIT" -> "stylegan-human/StyleGAN-Human"
"rotemtzaban/STIT" -> "omertov/encoder4editing"
"rotemtzaban/STIT" -> "wyhsirius/LIA" ["e"=1]
"rotemtzaban/STIT" -> "wpeebles/gangealing"
"rotemtzaban/STIT" -> "RenYurui/PIRender" ["e"=1]
"rotemtzaban/STIT" -> "NVlabs/eg3d" ["e"=1]
"yuval-alaluf/stylegan3-editing" -> "omertov/encoder4editing"
"yuval-alaluf/stylegan3-editing" -> "yuval-alaluf/hyperstyle"
"yuval-alaluf/stylegan3-editing" -> "danielroich/PTI"
"yuval-alaluf/stylegan3-editing" -> "yuval-alaluf/restyle-encoder"
"yuval-alaluf/stylegan3-editing" -> "Tengfei-Wang/HFGI"
"yuval-alaluf/stylegan3-editing" -> "autonomousvision/stylegan_xl"
"yuval-alaluf/stylegan3-editing" -> "rotemtzaban/STIT"
"yuval-alaluf/stylegan3-editing" -> "facebookresearch/StyleNeRF"
"yuval-alaluf/stylegan3-editing" -> "rinongal/StyleGAN-nada"
"yuval-alaluf/stylegan3-editing" -> "stylegan-human/StyleGAN-Human"
"yuval-alaluf/stylegan3-editing" -> "wpeebles/gangealing"
"yuval-alaluf/stylegan3-editing" -> "weihaox/awesome-gan-inversion"
"yuval-alaluf/stylegan3-editing" -> "justinpinkney/awesome-pretrained-stylegan3"
"yuval-alaluf/stylegan3-editing" -> "nupurkmr9/vision-aided-gan"
"yuval-alaluf/stylegan3-editing" -> "betterze/StyleSpace"
"amzn/computer-vision-basics-in-microsoft-excel" -> "jasonmayes/Real-Time-Person-Removal"
"amzn/computer-vision-basics-in-microsoft-excel" -> "syscolabs/kasaya" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "VGraupera/1on1-questions" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "microsoft/computervision-recipes" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "plotly/falcon" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "fpereiro/backendlore" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "luruke/browser-2020" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "victorqribeiro/isocity" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "dabreegster/abstreet" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "google/trax" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "thewhitetulip/awk-anti-textbook" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "hediet/vscode-debug-visualizer" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "marcpaq/b1fipl" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "microsoft/ApplicationInspector" ["e"=1]
"amzn/computer-vision-basics-in-microsoft-excel" -> "Kayzaks/HackingNeuralNetworks" ["e"=1]
"junyanz/CatPapers" -> "junyanz/iGAN"
"junyanz/CatPapers" -> "junyanz/BicycleGAN"
"junyanz/CatPapers" -> "Evolving-AI-Lab/ppgn"
"junyanz/CatPapers" -> "yenchenlin/pix2pix-tensorflow"
"junyanz/CatPapers" -> "junyanz/light-field-video" ["e"=1]
"junyanz/CatPapers" -> "junyanz/VON" ["e"=1]
"junyanz/CatPapers" -> "junyanz/interactive-deep-colorization"
"junyanz/CatPapers" -> "openai/improved-gan"
"junyanz/CatPapers" -> "lanpa/tensorboard-pytorch" ["e"=1]
"junyanz/CatPapers" -> "soumith/dcgan.torch"
"junyanz/CatPapers" -> "ptrblck/prog_gans_pytorch_inference"
"junyanz/CatPapers" -> "tinghuiz/appearance-flow" ["e"=1]
"junyanz/CatPapers" -> "yunjey/StarGAN"
"junyanz/CatPapers" -> "junyanz/CycleGAN"
"junyanz/CatPapers" -> "phillipi/pix2pix"
"ChenyangLEI/Fully-Automatic-Video-Colorization-with-Self-Regularization-and-Diversity" -> "ChenyangLEI/CVPR2020-Polarized-Reflection-Removal-with-Perfect-Alignment"
"ericsujw/InstColorization" -> "MarkMoHR/Awesome-Image-Colorization"
"ericsujw/InstColorization" -> "richzhang/colorization-pytorch"
"ericsujw/InstColorization" -> "msracver/Deep-Exemplar-based-Colorization"
"ericsujw/InstColorization" -> "pvitoria/ChromaGAN"
"ericsujw/InstColorization" -> "ChenyangLEI/automatic-video-colorization"
"ericsujw/InstColorization" -> "satoshiiizuka/siggraphasia2019_remastering"
"ericsujw/InstColorization" -> "JingyunLiang/VRT" ["e"=1]
"ericsujw/InstColorization" -> "yrcong/RelTR" ["e"=1]
"ericsujw/InstColorization" -> "dongheehand/MemoPainter-PyTorch"
"ericsujw/InstColorization" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"ericsujw/InstColorization" -> "Mukosame/Zooming-Slow-Mo-CVPR-2020" ["e"=1]
"ericsujw/InstColorization" -> "richzhang/colorization"
"ericsujw/InstColorization" -> "junyanz/interactive-deep-colorization"
"ericsujw/InstColorization" -> "snap-research/articulated-animation" ["e"=1]
"ericsujw/InstColorization" -> "SerialLain3170/Colorization" ["e"=1]
"pvitoria/ChromaGAN" -> "dongheehand/MemoPainter-PyTorch"
"pvitoria/ChromaGAN" -> "MarkMoHR/Awesome-Image-Colorization"
"pvitoria/ChromaGAN" -> "ericsujw/InstColorization"
"pvitoria/ChromaGAN" -> "ImagingLab/Colorizing-with-GANs"
"pvitoria/ChromaGAN" -> "zhaoyuzhi/Semantic-Colorization-GAN"
"pvitoria/ChromaGAN" -> "msracver/Deep-Exemplar-based-Colorization"
"pvitoria/ChromaGAN" -> "richzhang/colorization-pytorch"
"pvitoria/ChromaGAN" -> "chufengxiao/Example-based-Colorization-via-Dense-Encoding-Pyramids"
"pvitoria/ChromaGAN" -> "ChenyangLEI/automatic-video-colorization"
"PDillis/stylegan3-fun" -> "justinpinkney/awesome-pretrained-stylegan3"
"PDillis/stylegan3-fun" -> "CasualGANPapers/StyleGANXL-CLIP"
"PDillis/stylegan3-fun" -> "nerdyrodent/lucid-sonic-dreams"
"PDillis/stylegan3-fun" -> "pbaylies/stylegan2-ada"
"PDillis/stylegan3-fun" -> "yuval-alaluf/stylegan3-editing"
"PDillis/stylegan3-fun" -> "NotNANtoN/lucid-sonic-dreams"
"PDillis/stylegan3-fun" -> "dvschultz/stylegan3"
"PDillis/stylegan3-fun" -> "Sxela/stylegan3_blending"
"dvschultz/ml-art-colabs" -> "dvschultz/dataset-tools"
"dvschultz/ml-art-colabs" -> "dvschultz/ai"
"dvschultz/ml-art-colabs" -> "justinpinkney/awesome-pretrained-stylegan2"
"dvschultz/ml-art-colabs" -> "eps696/aphantasia" ["e"=1]
"dvschultz/ml-art-colabs" -> "JCBrouwer/maua-stylegan2"
"dvschultz/ml-art-colabs" -> "crowsonkb/style-transfer-pytorch" ["e"=1]
"dvschultz/ml-art-colabs" -> "dvschultz/stylegan2-ada-pytorch"
"dvschultz/ml-art-colabs" -> "pbaylies/stylegan2"
"dvschultz/ml-art-colabs" -> "amrzv/awesome-colab-notebooks"
"dvschultz/ml-art-colabs" -> "dvschultz/stylegan2-ada"
"dvschultz/ml-art-colabs" -> "crowsonkb/v-diffusion-pytorch" ["e"=1]
"dvschultz/ml-art-colabs" -> "justinpinkney/awesome-pretrained-stylegan3"
"dvschultz/ml-art-colabs" -> "harskish/ganspace"
"dvschultz/ml-art-colabs" -> "rinongal/StyleGAN-nada"
"dvschultz/ml-art-colabs" -> "eps696/stylegan2"
"mikaelalafriz/lucid-sonic-dreams" -> "justinpinkney/awesome-pretrained-stylegan2"
"mikaelalafriz/lucid-sonic-dreams" -> "JCBrouwer/maua-stylegan2"
"mikaelalafriz/lucid-sonic-dreams" -> "dvschultz/ml-art-colabs"
"mikaelalafriz/lucid-sonic-dreams" -> "msieg/deep-music-visualizer"
"mikaelalafriz/lucid-sonic-dreams" -> "dvschultz/dataset-tools"
"mikaelalafriz/lucid-sonic-dreams" -> "eps696/aphantasia" ["e"=1]
"mikaelalafriz/lucid-sonic-dreams" -> "justinpinkney/awesome-pretrained-stylegan3"
"mikaelalafriz/lucid-sonic-dreams" -> "PDillis/stylegan3-fun"
"mikaelalafriz/lucid-sonic-dreams" -> "dvschultz/stylegan2-ada-pytorch"
"mikaelalafriz/lucid-sonic-dreams" -> "nerdyrodent/lucid-sonic-dreams"
"mikaelalafriz/lucid-sonic-dreams" -> "universome/alis"
"mikaelalafriz/lucid-sonic-dreams" -> "harskish/ganspace"
"mikaelalafriz/lucid-sonic-dreams" -> "rinongal/StyleGAN-nada"
"mikaelalafriz/lucid-sonic-dreams" -> "crowsonkb/v-diffusion-pytorch" ["e"=1]
"mikaelalafriz/lucid-sonic-dreams" -> "pbaylies/stylegan2"
"menyifang/DCT-Net" -> "williamyang1991/DualStyleGAN"
"menyifang/DCT-Net" -> "seasonSH/SemanticStyleGAN"
"menyifang/DCT-Net" -> "danielroich/PTI"
"menyifang/DCT-Net" -> "LeslieZhoa/DCT-NET.Pytorch" ["e"=1]
"menyifang/DCT-Net" -> "facebookresearch/StyleNeRF"
"menyifang/DCT-Net" -> "Tengfei-Wang/HFGI"
"menyifang/DCT-Net" -> "yuval-alaluf/stylegan3-editing"
"menyifang/DCT-Net" -> "royorel/StyleSDF" ["e"=1]
"menyifang/DCT-Net" -> "mchong6/SOAT"
"menyifang/DCT-Net" -> "yuval-alaluf/hyperstyle"
"menyifang/DCT-Net" -> "stylegan-human/StyleGAN-Human"
"menyifang/DCT-Net" -> "jmliu88/HeSer" ["e"=1]
"menyifang/DCT-Net" -> "Qiulin-W/SAFA" ["e"=1]
"menyifang/DCT-Net" -> "zhengyuf/IMavatar" ["e"=1]
"menyifang/DCT-Net" -> "rinongal/StyleGAN-nada"
"initml/cleanup.pictures" -> "antfu/drauu" ["e"=1]
"initml/cleanup.pictures" -> "saic-mdal/lama"
"amrzv/awesome-colab-notebooks" -> "dvschultz/ml-art-colabs"
"amrzv/awesome-colab-notebooks" -> "firmai/awesome-google-colab"
"amrzv/awesome-colab-notebooks" -> "tugstugi/dl-colab-notebooks"
"amrzv/awesome-colab-notebooks" -> "KaliYuga-ai/Pixel-Art-Diffusion" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "mrm8488/shared_colab_notebooks"
"amrzv/awesome-colab-notebooks" -> "eps696/aphantasia" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "shonenkov-AI/rudalle-aspect-ratio" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "justinpinkney/awesome-pretrained-stylegan2"
"amrzv/awesome-colab-notebooks" -> "JD-P/simulacra-aesthetic-captions" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "crowsonkb/style-transfer-pytorch" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "altryne/awesome-ai-art-image-synthesis" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "dvschultz/dataset-tools"
"amrzv/awesome-colab-notebooks" -> "dribnet/clipit" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "sberbank-ai/ru-dalle" ["e"=1]
"amrzv/awesome-colab-notebooks" -> "crowsonkb/v-diffusion-pytorch" ["e"=1]
"clovaai/stargan-v2-tensorflow" -> "taki0112/StarGAN_v2-Tensorflow"
"vijishmadhavan/SkinDeep" -> "orpatashnik/StyleCLIP"
"vijishmadhavan/SkinDeep" -> "vijishmadhavan/ArtLine"
"vijishmadhavan/SkinDeep" -> "vijishmadhavan/Toon-Me"
"vijishmadhavan/SkinDeep" -> "stylegan-human/StyleGAN-Human"
"vijishmadhavan/SkinDeep" -> "rinongal/StyleGAN-nada"
"vijishmadhavan/SkinDeep" -> "danielroich/PTI"
"vijishmadhavan/SkinDeep" -> "loicmagne/air-drawing" ["e"=1]
"vijishmadhavan/SkinDeep" -> "dorarad/gansformer"
"vijishmadhavan/SkinDeep" -> "eladrich/pixel2style2pixel"
"vijishmadhavan/SkinDeep" -> "vijishmadhavan/Crop-CLIP"
"vijishmadhavan/SkinDeep" -> "omertov/encoder4editing"
"vijishmadhavan/SkinDeep" -> "RameenAbdal/StyleFlow"
"vijishmadhavan/SkinDeep" -> "yuval-alaluf/hyperstyle"
"vijishmadhavan/SkinDeep" -> "rotemtzaban/STIT"
"vijishmadhavan/SkinDeep" -> "snap-research/articulated-animation" ["e"=1]
"kvfrans/clipdraw" -> "pschaldenbrand/StyleCLIPDraw"
"emilk/wfc" -> "math-fehr/fast-wfc"
"emilk/wfc" -> "sylefeb/VoxModSynth"
"math-fehr/fast-wfc" -> "emilk/wfc"
"math-fehr/fast-wfc" -> "sylefeb/VoxModSynth"
"math-fehr/fast-wfc" -> "krychu/wfc"
"math-fehr/fast-wfc" -> "ikarth/wfc_python"
"math-fehr/fast-wfc" -> "keijiro/WfcMaze"
"math-fehr/fast-wfc" -> "BorisTheBrave/DeBroglie"
"mewo2/oisin" -> "robert/wavefunction-collapse"
"omerbt/Splice" -> "omriav/blended-diffusion" ["e"=1]
"omerbt/Splice" -> "eliahuhorwitz/DeepSIM"
"onion-liu/BlendGAN" -> "onion-liu/aahq-dataset"
"onion-liu/BlendGAN" -> "Tengfei-Wang/HFGI"
"onion-liu/BlendGAN" -> "zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["e"=1]
"onion-liu/BlendGAN" -> "yuval-alaluf/stylegan3-editing"
"onion-liu/BlendGAN" -> "omertov/encoder4editing"
"onion-liu/BlendGAN" -> "danielroich/PTI"
"onion-liu/BlendGAN" -> "yuval-alaluf/restyle-encoder"
"onion-liu/BlendGAN" -> "wty-ustc/HairCLIP"
"onion-liu/BlendGAN" -> "williamyang1991/DualStyleGAN"
"onion-liu/BlendGAN" -> "rinongal/StyleGAN-nada"
"onion-liu/BlendGAN" -> "seasonSH/SemanticStyleGAN"
"onion-liu/BlendGAN" -> "nupurkmr9/vision-aided-gan"
"onion-liu/BlendGAN" -> "stylegan-human/StyleGAN-Human"
"onion-liu/BlendGAN" -> "mindslab-ai/hififace" ["e"=1]
"onion-liu/BlendGAN" -> "bes-dev/MobileStyleGAN.pytorch"
"sapphire497/style-transformer" -> "adobe-research/sam_inversion"
"sapphire497/style-transformer" -> "sapphire497/query-selected-attention"
"sapphire497/style-transformer" -> "VinAIResearch/HyperInverter"
"sapphire497/style-transformer" -> "Tengfei-Wang/HFGI"
"sapphire497/style-transformer" -> "InterDigitalInc/FeatureStyleEncoder"
"sapphire497/style-transformer" -> "EzioBy/padinv"
"cjph8914/2020_benfords" -> "thenewboston-developers/Account-Manager"
"cjph8914/2020_benfords" -> "cmu-snap/pigasus"
"cjph8914/2020_benfords" -> "thenewboston-developers/Website"
"cjph8914/2020_benfords" -> "BenWirus/ZombieVoters"
"jonbruner/generative-adversarial-networks" -> "uclaacmai/Generative-Adversarial-Network-Tutorial"
"jonbruner/generative-adversarial-networks" -> "jonbruner/ezgan"
"jonbruner/generative-adversarial-networks" -> "osh/KerasGAN"
"jonbruner/generative-adversarial-networks" -> "adeshpande3/Generative-Adversarial-Networks" ["e"=1]
"jonbruner/generative-adversarial-networks" -> "ericjang/genadv_tutorial"
"jonbruner/generative-adversarial-networks" -> "awjuliani/dfp"
"jonbruner/generative-adversarial-networks" -> "devnag/pytorch-generative-adversarial-networks"
"jonbruner/generative-adversarial-networks" -> "Newmu/dcgan_code"
"pbaylies/stylegan-encoder" -> "Puzer/stylegan-encoder"
"pbaylies/stylegan-encoder" -> "rolux/stylegan2encoder"
"pbaylies/stylegan-encoder" -> "robertluxemburg/stylegan2encoder"
"pbaylies/stylegan-encoder" -> "ShenYujun/InterFaceGAN"
"pbaylies/stylegan-encoder" -> "a312863063/seeprettyface-face_editor"
"pbaylies/stylegan-encoder" -> "jacobhallberg/pytorch_stylegan_encoder"
"pbaylies/stylegan-encoder" -> "genforce/interfacegan"
"pbaylies/stylegan-encoder" -> "genforce/idinvert"
"pbaylies/stylegan-encoder" -> "EvgenyKashin/stylegan2-distillation"
"pbaylies/stylegan-encoder" -> "ak9250/stylegan-art"
"pbaylies/stylegan-encoder" -> "omertov/encoder4editing"
"pbaylies/stylegan-encoder" -> "rosinality/stylegan2-pytorch"
"pbaylies/stylegan-encoder" -> "harskish/ganspace"
"pbaylies/stylegan-encoder" -> "eladrich/pixel2style2pixel"
"pbaylies/stylegan-encoder" -> "pbaylies/stylegan2"
"cs-chan/ArtGAN" -> "lucasdavid/wikiart"
"cs-chan/ArtGAN" -> "mlberkeley/Creative-Adversarial-Networks"
"cs-chan/ArtGAN" -> "ak9250/stylegan-art"
"cs-chan/ArtGAN" -> "rkjones4/GANGogh"
"lucasdavid/wikiart" -> "cs-chan/ArtGAN"
"BachiLi/diffvg" -> "preddy5/Im2Vec"
"BachiLi/diffvg" -> "yael-vinker/CLIPasso"
"BachiLi/diffvg" -> "alexandre01/deepsvg" ["e"=1]
"BachiLi/diffvg" -> "Picsart-AI-Research/LIVE-Layerwise-Image-Vectorization"
"BachiLi/diffvg" -> "pschaldenbrand/StyleCLIPDraw"
"BachiLi/diffvg" -> "jonhare/DifferentiableSketching"
"BachiLi/diffvg" -> "NVlabs/nvdiffrast" ["e"=1]
"BachiLi/diffvg" -> "deepmind/arnheim"
"BachiLi/diffvg" -> "rinongal/StyleGAN-nada"
"BachiLi/diffvg" -> "autonomousvision/stylegan_xl"
"BachiLi/diffvg" -> "kvfrans/clipdraw"
"BachiLi/diffvg" -> "crowsonkb/v-diffusion-pytorch" ["e"=1]
"BachiLi/diffvg" -> "lllyasviel/DanbooRegion" ["e"=1]
"BachiLi/diffvg" -> "universome/alis"
"BachiLi/diffvg" -> "MarkMoHR/virtual_sketching" ["e"=1]
"joaquinlpereyra/twitterImgBot" -> "joaquinlpereyra/RedditImageGrab"
"LoyaltyNZ/alchemy-framework" -> "pavlovml/match"
"LoyaltyNZ/alchemy-framework" -> "lsm/micromono"
"Sxela/ArcaneGAN" -> "bryandlee/DeepStudio"
"Sxela/ArcaneGAN" -> "onion-liu/BlendGAN"
"Sxela/ArcaneGAN" -> "mchong6/JoJoGAN"
"Sxela/ArcaneGAN" -> "yuval-alaluf/stylegan3-editing"
"Sxela/ArcaneGAN" -> "Sxela/face2comics"
"Sxela/ArcaneGAN" -> "menyifang/DCT-Net"
"Sxela/ArcaneGAN" -> "williamyang1991/DualStyleGAN"
"Sxela/ArcaneGAN" -> "happy-jihye/Cartoon-StyleGAN"
"Sxela/ArcaneGAN" -> "bryandlee/animegan2-pytorch"
"Sxela/ArcaneGAN" -> "yuval-alaluf/restyle-encoder"
"Sxela/ArcaneGAN" -> "rinongal/StyleGAN-nada"
"Sxela/ArcaneGAN" -> "Sxela/stylegan3_blending"
"Sxela/ArcaneGAN" -> "stylegan-human/StyleGAN-Human"
"Sxela/ArcaneGAN" -> "omertov/encoder4editing"
"Sxela/ArcaneGAN" -> "TachibanaYoshino/AnimeGANv3"
"robert/wavefunction-collapse" -> "mewo2/oisin"
"robert/wavefunction-collapse" -> "ikarth/wfc_2019f"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "satoshiiizuka/siggraphasia2019_remastering"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "bahjat-kawar/ddrm" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "cszn/SCUNet" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "MarkMoHR/Awesome-Image-Colorization"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "JingyunLiang/VRT" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "swz30/Restormer" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "raywzy/ICT" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "csjliang/LDL" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "ckkelvinchan/RealBasicVSR" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "ChenyangLEI/automatic-video-colorization"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "jiaxi-jiang/FBCNN"
"raywzy/Bringing-Old-Films-Back-to-Life" -> "JingyunLiang/RVRT" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "csjliang/DASR" ["e"=1]
"raywzy/Bringing-Old-Films-Back-to-Life" -> "ckkelvinchan/BasicVSR_PlusPlus" ["e"=1]
"williamyang1991/DualStyleGAN" -> "menyifang/DCT-Net"
"williamyang1991/DualStyleGAN" -> "yuval-alaluf/stylegan3-editing"
"williamyang1991/DualStyleGAN" -> "omertov/encoder4editing"
"williamyang1991/DualStyleGAN" -> "mchong6/JoJoGAN"
"williamyang1991/DualStyleGAN" -> "eladrich/pixel2style2pixel"
"williamyang1991/DualStyleGAN" -> "williamyang1991/VToonify" ["e"=1]
"williamyang1991/DualStyleGAN" -> "rosinality/stylegan2-pytorch"
"williamyang1991/DualStyleGAN" -> "danielroich/PTI"
"williamyang1991/DualStyleGAN" -> "yuval-alaluf/hyperstyle"
"williamyang1991/DualStyleGAN" -> "stylegan-human/StyleGAN-Human"
"williamyang1991/DualStyleGAN" -> "weihaox/awesome-gan-inversion"
"williamyang1991/DualStyleGAN" -> "yuval-alaluf/restyle-encoder"
"williamyang1991/DualStyleGAN" -> "onion-liu/BlendGAN"
"williamyang1991/DualStyleGAN" -> "kakaobrain/rq-vae-transformer" ["e"=1]
"williamyang1991/DualStyleGAN" -> "facebookresearch/StyleNeRF"
"kchapelier/wavefunctioncollapse" -> "LingDong-/ndwfc"
"kchapelier/wavefunctioncollapse" -> "kchapelier/convchain"
"kchapelier/wavefunctioncollapse" -> "kchapelier/poisson-disk-sampling"
"kchapelier/wavefunctioncollapse" -> "mewo2/oisin"
"kchapelier/wavefunctioncollapse" -> "vasumahesh1/WFC_WebGL"
"kchapelier/wavefunctioncollapse" -> "mxgmn/ConvChain"
"kchapelier/wavefunctioncollapse" -> "kchapelier/procedural-generation"
"kchapelier/wavefunctioncollapse" -> "ikarth/wfc_python"
"kchapelier/wavefunctioncollapse" -> "kchapelier/cellular-automata-voxel-shader" ["e"=1]
"kchapelier/wavefunctioncollapse" -> "mxgmn/Blog"
"msieg/deep-music-visualizer" -> "HighCWu/anime_biggan_toy" ["e"=1]
"msieg/deep-music-visualizer" -> "mikaelalafriz/lucid-sonic-dreams"
"elerac/polanalyser" -> "tkuri/Awesome-Polarization"
"elerac/polanalyser" -> "ChenyangLEI/awesome-polarization-in-vision"
"aelnouby/Text-to-Image-Synthesis" -> "reedscot/icml2016"
"aelnouby/Text-to-Image-Synthesis" -> "hanzhanggit/StackGAN-Pytorch"
"aelnouby/Text-to-Image-Synthesis" -> "zsdonghao/text-to-image"
"aelnouby/Text-to-Image-Synthesis" -> "hanzhanggit/StackGAN-v2"
"aelnouby/Text-to-Image-Synthesis" -> "lzhbrian/arbitrary-text-to-image-papers"
"aelnouby/Text-to-Image-Synthesis" -> "ypxie/HDGan"
"aelnouby/Text-to-Image-Synthesis" -> "taoxugit/AttnGAN"
"aelnouby/Text-to-Image-Synthesis" -> "reedscot/cvpr2016"
"aelnouby/Text-to-Image-Synthesis" -> "reedscot/nips2016"
"aelnouby/Text-to-Image-Synthesis" -> "crisbodnar/text-to-image"
"aelnouby/Text-to-Image-Synthesis" -> "qiaott/MirrorGAN"
"aelnouby/Text-to-Image-Synthesis" -> "llSourcell/how_to_convert_text_to_images"
"aelnouby/Text-to-Image-Synthesis" -> "paarthneekhara/text-to-image"
"aelnouby/Text-to-Image-Synthesis" -> "prakashpandey9/Text2Image-PyTorch"
"aelnouby/Text-to-Image-Synthesis" -> "davidstap/AttnGAN"
"junyanz/iGAN" -> "ajbrock/Neural-Photo-Editor"
"junyanz/iGAN" -> "NVIDIA/pix2pixHD"
"junyanz/iGAN" -> "phillipi/pix2pix"
"junyanz/iGAN" -> "Newmu/dcgan_code"
"junyanz/iGAN" -> "yunjey/StarGAN"
"junyanz/iGAN" -> "junyanz/CycleGAN"
"junyanz/iGAN" -> "carpedm20/DCGAN-tensorflow"
"junyanz/iGAN" -> "lengstrom/fast-style-transfer"
"junyanz/iGAN" -> "openai/improved-gan"
"junyanz/iGAN" -> "buriburisuri/speech-to-text-wavenet" ["e"=1]
"junyanz/iGAN" -> "martinarjovsky/WassersteinGAN"
"junyanz/iGAN" -> "MrNothing/AI-Blocks" ["e"=1]
"junyanz/iGAN" -> "paarthneekhara/text-to-image"
"junyanz/iGAN" -> "affinelayer/pix2pix-tensorflow"
"junyanz/iGAN" -> "oarriaga/face_classification" ["e"=1]
"JCBrouwer/maua-stylegan2" -> "terrybroad/network-bending"
"JCBrouwer/maua-stylegan2" -> "dvschultz/dataset-tools"
"JCBrouwer/maua-stylegan2" -> "dvschultz/stylegan2"
"JCBrouwer/maua-stylegan2" -> "maua-maua-maua/maua"
"JCBrouwer/maua-stylegan2" -> "dvschultz/stylegan2-ada"
"JCBrouwer/maua-stylegan2" -> "eps696/stylegan2"
"JCBrouwer/maua-stylegan2" -> "aydao/stylegan2-surgery"
"JCBrouwer/maua-stylegan2" -> "nerdyrodent/lucid-sonic-dreams"
"JCBrouwer/maua-stylegan2" -> "dvschultz/stylegan2-ada-pytorch"
"JCBrouwer/maua-stylegan2" -> "hanhung/Creating-Audio-Reactive-Visuals-With-StyleGAN"
"JCBrouwer/maua-stylegan2" -> "PDillis/stylegan2-fun"
"selfsame/unity-wave-function-collapse" -> "BorisTheBrave/DeBroglie"
"selfsame/unity-wave-function-collapse" -> "oddmax/unity-wave-function-collapse-3d"
"selfsame/unity-wave-function-collapse" -> "keijiro/WfcMaze"
"AaronLeong/BigGAN-pytorch" -> "taki0112/BigGAN-Tensorflow"
"AaronLeong/BigGAN-pytorch" -> "ajbrock/BigGAN-PyTorch"
"AaronLeong/BigGAN-pytorch" -> "nashory/pggan-pytorch"
"AaronLeong/BigGAN-pytorch" -> "heykeetae/Self-Attention-GAN"
"AaronLeong/BigGAN-pytorch" -> "google/compare_gan"
"AaronLeong/BigGAN-pytorch" -> "torchgan/torchgan"
"AaronLeong/BigGAN-pytorch" -> "rosinality/style-based-gan-pytorch"
"AaronLeong/BigGAN-pytorch" -> "pfnet-research/sngan_projection"
"AaronLeong/BigGAN-pytorch" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"AaronLeong/BigGAN-pytorch" -> "yunjey/stargan"
"AaronLeong/BigGAN-pytorch" -> "NVlabs/FUNIT"
"AaronLeong/BigGAN-pytorch" -> "huggingface/pytorch-pretrained-BigGAN"
"AaronLeong/BigGAN-pytorch" -> "taki0112/Self-Attention-GAN-Tensorflow"
"AaronLeong/BigGAN-pytorch" -> "ANIME305/Anime-GAN-tensorflow" ["e"=1]
"AaronLeong/BigGAN-pytorch" -> "LMescheder/GAN_stability"
"manuelruder/artistic-videos" -> "manuelruder/fast-artistic-videos"
"manuelruder/artistic-videos" -> "DmitryUlyanov/texture_nets"
"manuelruder/artistic-videos" -> "yusuketomoto/chainer-fast-neuralstyle"
"manuelruder/artistic-videos" -> "jcjohnson/fast-neural-style"
"manuelruder/artistic-videos" -> "chuanli11/CNNMRF"
"manuelruder/artistic-videos" -> "cysmith/neural-style-tf"
"manuelruder/artistic-videos" -> "chuanli11/MGANs"
"manuelruder/artistic-videos" -> "jcjohnson/neural-style"
"manuelruder/artistic-videos" -> "kaishengtai/neuralart"
"manuelruder/artistic-videos" -> "titu1994/Neural-Style-Transfer"
"manuelruder/artistic-videos" -> "zeruniverse/fast-artistic-videos"
"manuelruder/artistic-videos" -> "andersbll/neural_artistic_style"
"manuelruder/artistic-videos" -> "msracver/Deep-Image-Analogy"
"manuelruder/artistic-videos" -> "facebook/eyescream"
"manuelruder/artistic-videos" -> "fzliu/style-transfer"
"jiupinjia/stylized-neural-painting" -> "RameenAbdal/StyleFlow"
"jiupinjia/stylized-neural-painting" -> "megvii-research/ICCV2019-LearningToPaint"
"jiupinjia/stylized-neural-painting" -> "orpatashnik/StyleCLIP"
"jiupinjia/stylized-neural-painting" -> "jiupinjia/SkyAR"
"jiupinjia/stylized-neural-painting" -> "eladrich/pixel2style2pixel"
"jiupinjia/stylized-neural-painting" -> "ZHKKKe/MODNet"
"jiupinjia/stylized-neural-painting" -> "iPERDance/iPERCore"
"jiupinjia/stylized-neural-painting" -> "yiranran/APDrawingGAN"
"jiupinjia/stylized-neural-painting" -> "genforce/sefa"
"jiupinjia/stylized-neural-painting" -> "SystemErrorWang/White-box-Cartoonization"
"jiupinjia/stylized-neural-painting" -> "lllyasviel/PaintingLight" ["e"=1]
"jiupinjia/stylized-neural-painting" -> "NVlabs/stylegan2-ada"
"jiupinjia/stylized-neural-painting" -> "rosinality/stylegan2-pytorch"
"jiupinjia/stylized-neural-painting" -> "ProGamerGov/neural-style-pt"
"jiupinjia/stylized-neural-painting" -> "BachiLi/diffvg"
"megvii-research/ICCV2019-LearningToPaint" -> "jiupinjia/stylized-neural-painting"
"megvii-research/ICCV2019-LearningToPaint" -> "Huage001/PaintTransformer"
"megvii-research/ICCV2019-LearningToPaint" -> "MarkMoHR/virtual_sketching" ["e"=1]
"megvii-research/ICCV2019-LearningToPaint" -> "vexilligera/strokenet" ["e"=1]
"megvii-research/ICCV2019-LearningToPaint" -> "TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale"
"megvii-research/ICCV2019-LearningToPaint" -> "lllyasviel/PaintingLight" ["e"=1]
"megvii-research/ICCV2019-LearningToPaint" -> "MarkMoHR/Awesome-Sketch-Synthesis" ["e"=1]
"megvii-research/ICCV2019-LearningToPaint" -> "wtjiang98/PSGAN"
"megvii-research/ICCV2019-LearningToPaint" -> "omertov/encoder4editing"
"megvii-research/ICCV2019-LearningToPaint" -> "ctmakro/opencv_playground" ["e"=1]
"megvii-research/ICCV2019-LearningToPaint" -> "wzmsltw/PaintTransformer"
"facebookresearch/ic_gan" -> "moscow-technologies/blockchain-voting_2021" ["e"=1]
"facebookresearch/ic_gan" -> "nupurkmr9/vision-aided-gan"
"facebookresearch/ic_gan" -> "rinongal/StyleGAN-nada"
"facebookresearch/ic_gan" -> "autonomousvision/projected_gan"
"facebookresearch/ic_gan" -> "autonomousvision/stylegan_xl"
"facebookresearch/ic_gan" -> "odegeasslbc/FastGAN-pytorch"
"facebookresearch/ic_gan" -> "google/lecam-gan"
"facebookresearch/ic_gan" -> "snap-research/MoCoGAN-HD" ["e"=1]
"facebookresearch/ic_gan" -> "rosinality/alias-free-gan-pytorch"
"facebookresearch/ic_gan" -> "self-distilled-stylegan/self-distilled-internet-photos"
"facebookresearch/ic_gan" -> "eliahuhorwitz/DeepSIM"
"facebookresearch/ic_gan" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"facebookresearch/ic_gan" -> "microsoft/StyleSwin"
"facebookresearch/ic_gan" -> "yuval-alaluf/restyle-encoder"
"facebookresearch/ic_gan" -> "bes-dev/MobileStyleGAN.pytorch"
"eriklindernoren/NapkinML" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/PacNeat"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/2048-AI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Pool_AI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/PacmanGame"
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" -> "Code-Bullet/Hill-Climb-Racing-AI"
"gregdurrett/berkeley-doc-summarizer" -> "Tetrachrome/subpixel"
"gregdurrett/berkeley-doc-summarizer" -> "gregdurrett/berkeley-entity" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "carpedm20/variational-text-tensorflow" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "saiprashanths/dl-setup" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "facebookarchive/NAMAS" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "ceteri/pytextrank" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "deepmind/rc-data" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "zxytim/neural-painter" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "facebook/NAMAS" ["e"=1]
"gregdurrett/berkeley-doc-summarizer" -> "Alex-Fabbri/Multi-News" ["e"=1]
"yuval-alaluf/SAM" -> "yuval-alaluf/restyle-encoder"
"yuval-alaluf/SAM" -> "omertov/encoder4editing"
"yuval-alaluf/SAM" -> "danielroich/PTI"
"yuval-alaluf/SAM" -> "InterDigitalInc/HRFAE" ["e"=1]
"yuval-alaluf/SAM" -> "royorel/FFHQ-Aging-Dataset" ["e"=1]
"yuval-alaluf/SAM" -> "royorel/Lifespan_Age_Transformation_Synthesis" ["e"=1]
"yuval-alaluf/SAM" -> "yuval-alaluf/hyperstyle"
"yuval-alaluf/SAM" -> "yuval-alaluf/stylegan3-editing"
"yuval-alaluf/SAM" -> "YotamNitzan/ID-disentanglement"
"yuval-alaluf/SAM" -> "eladrich/pixel2style2pixel"
"yuval-alaluf/SAM" -> "betterze/StyleSpace"
"yuval-alaluf/SAM" -> "genforce/interfacegan"
"yuval-alaluf/SAM" -> "zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["e"=1]
"yuval-alaluf/SAM" -> "Tengfei-Wang/HFGI"
"yuval-alaluf/SAM" -> "naver-ai/StyleMapGAN"
"ascribe/image-match" -> "pavlovai/match"
"ascribe/image-match" -> "pavlovml/match"
"ascribe/image-match" -> "awentzonline/image-analogies"
"ascribe/image-match" -> "paucarre/tiefvision" ["e"=1]
"ascribe/image-match" -> "AKSHAYUBHAT/DeepVideoAnalytics" ["e"=1]
"ascribe/image-match" -> "dermotte/LIRE" ["e"=1]
"ascribe/image-match" -> "yenchenlin1994/DeepLearningFlappyBird" ["e"=1]
"ascribe/image-match" -> "dsys/match" ["e"=1]
"ascribe/image-match" -> "beniz/deepdetect" ["e"=1]
"ascribe/image-match" -> "dlau/mineye" ["e"=1]
"ascribe/image-match" -> "AKSHAYUBHAT/VisualSearchServer" ["e"=1]
"ascribe/image-match" -> "autumnai/leaf" ["e"=1]
"ascribe/image-match" -> "dellis23/ispy" ["e"=1]
"ascribe/image-match" -> "alexjc/neural-doodle"
"ascribe/image-match" -> "cleargraphinc/match"
"lukedeo/keras-acgan" -> "buriburisuri/ac-gan"
"lukedeo/keras-acgan" -> "King-Of-Knights/Keras-ACGAN-CIFAR10"
"lukedeo/keras-acgan" -> "bobchennan/Wasserstein-GAN-Keras"
"lukedeo/keras-acgan" -> "erilyth/DCGANs"
"rorodata/background-removal" -> "susheelsk/image-background-removal"
"leehomyc/cyclegan-1" -> "architrathore/CycleGAN"
"leehomyc/cyclegan-1" -> "vanhuyz/CycleGAN-TensorFlow"
"leehomyc/cyclegan-1" -> "xhujoy/CycleGAN-tensorflow"
"leehomyc/cyclegan-1" -> "LynnHo/CycleGAN-Tensorflow-PyTorch"
"leehomyc/cyclegan-1" -> "hardikbansal/CycleGAN"
"switchablenorms/CelebAMask-HQ" -> "zllrunning/face-parsing.PyTorch"
"switchablenorms/CelebAMask-HQ" -> "genforce/interfacegan"
"switchablenorms/CelebAMask-HQ" -> "NVlabs/ffhq-dataset"
"switchablenorms/CelebAMask-HQ" -> "rosinality/stylegan2-pytorch"
"switchablenorms/CelebAMask-HQ" -> "ZPdesu/SEAN"
"switchablenorms/CelebAMask-HQ" -> "eladrich/pixel2style2pixel"
"switchablenorms/CelebAMask-HQ" -> "YadiraF/face3d" ["e"=1]
"switchablenorms/CelebAMask-HQ" -> "cleardusk/3DDFA" ["e"=1]
"switchablenorms/CelebAMask-HQ" -> "taki0112/SPADE-Tensorflow"
"switchablenorms/CelebAMask-HQ" -> "microsoft/Deep3DFaceReconstruction" ["e"=1]
"switchablenorms/CelebAMask-HQ" -> "cleardusk/3DDFA_V2" ["e"=1]
"switchablenorms/CelebAMask-HQ" -> "omertov/encoder4editing"
"switchablenorms/CelebAMask-HQ" -> "clovaai/stargan-v2"
"switchablenorms/CelebAMask-HQ" -> "run-youngjoo/SC-FEGAN"
"switchablenorms/CelebAMask-HQ" -> "YuvalNirkin/face_segmentation" ["e"=1]
"nadermx/backgroundremover" -> "danielgatis/rembg"
"nadermx/backgroundremover" -> "xuebinqin/U-2-Net"
"nadermx/backgroundremover" -> "OPHoperHPO/image-background-remove-tool"
"nadermx/backgroundremover" -> "xuebinqin/DIS"
"nadermx/backgroundremover" -> "axinc-ai/ailia-models"
"nadermx/backgroundremover" -> "ecsplendid/rembg-greenscreen"
"nadermx/backgroundremover" -> "pymatting/pymatting"
"nadermx/backgroundremover" -> "FarjaalAhmad/django_bgRemoverML"
"nadermx/backgroundremover" -> "ZHKKKe/MODNet"
"nadermx/backgroundremover" -> "Mazhar004/MODNet-BGRemover"
"nadermx/backgroundremover" -> "Sanster/lama-cleaner" ["e"=1]
"nadermx/backgroundremover" -> "renatoviolin/bg-remove-augment"
"nadermx/backgroundremover" -> "PeterL1n/RobustVideoMatting"
"nadermx/backgroundremover" -> "Djdefrag/QualityScaler" ["e"=1]
"nadermx/backgroundremover" -> "PeterL1n/BackgroundMattingV2"
"ProGamerGov/neural-style-pt" -> "crowsonkb/style-transfer-pytorch" ["e"=1]
"ProGamerGov/neural-style-pt" -> "gordicaleksa/pytorch-neural-style-transfer" ["e"=1]
"ProGamerGov/neural-style-pt" -> "ProGamerGov/neural-dream" ["e"=1]
"ProGamerGov/neural-style-pt" -> "titu1994/Neural-Style-Transfer"
"ProGamerGov/neural-style-pt" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"ProGamerGov/neural-style-pt" -> "CompVis/adaptive-style-transfer"
"ProGamerGov/neural-style-pt" -> "ProGamerGov/Neural-Tools"
"ProGamerGov/neural-style-pt" -> "ycjing/Neural-Style-Transfer-Papers"
"ProGamerGov/neural-style-pt" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"ProGamerGov/neural-style-pt" -> "eps696/aphantasia" ["e"=1]
"ProGamerGov/neural-style-pt" -> "jiupinjia/stylized-neural-painting"
"ProGamerGov/neural-style-pt" -> "LouieYang/stroke-controllable-fast-style-transfer"
"ProGamerGov/neural-style-pt" -> "leongatys/PytorchNeuralStyleTransfer"
"ProGamerGov/neural-style-pt" -> "rrmina/fast-neural-style-pytorch"
"ProGamerGov/neural-style-pt" -> "reiinakano/arbitrary-image-stylization-tfjs"
"carpedm20/DiscoGAN-pytorch" -> "SKTBrain/DiscoGAN"
"carpedm20/DiscoGAN-pytorch" -> "carpedm20/BEGAN-tensorflow"
"carpedm20/DiscoGAN-pytorch" -> "carpedm20/BEGAN-pytorch"
"carpedm20/DiscoGAN-pytorch" -> "carpedm20/simulated-unsupervised-tensorflow"
"carpedm20/DiscoGAN-pytorch" -> "martinarjovsky/WassersteinGAN"
"carpedm20/DiscoGAN-pytorch" -> "openai/improved-gan"
"carpedm20/DiscoGAN-pytorch" -> "sunshineatnoon/Paper-Implementations"
"carpedm20/DiscoGAN-pytorch" -> "devnag/pytorch-generative-adversarial-networks"
"carpedm20/DiscoGAN-pytorch" -> "soumith/dcgan.torch"
"carpedm20/DiscoGAN-pytorch" -> "Evolving-AI-Lab/ppgn"
"carpedm20/DiscoGAN-pytorch" -> "mingyuliutw/UNIT"
"carpedm20/DiscoGAN-pytorch" -> "reedscot/nips2016"
"carpedm20/DiscoGAN-pytorch" -> "yunjey/StarGAN"
"carpedm20/DiscoGAN-pytorch" -> "igul222/improved_wgan_training"
"carpedm20/DiscoGAN-pytorch" -> "fxia22/PixelDTGAN"
"chuanli11/CNNMRF" -> "DmitryUlyanov/texture_nets"
"chuanli11/CNNMRF" -> "chuanli11/MGANs"
"chuanli11/CNNMRF" -> "rtqichen/style-swap"
"chuanli11/CNNMRF" -> "awentzonline/image-analogies"
"chuanli11/CNNMRF" -> "msracver/Deep-Image-Analogy"
"chuanli11/CNNMRF" -> "yusuketomoto/chainer-fast-neuralstyle"
"chuanli11/CNNMRF" -> "skaae/torch-gan" ["e"=1]
"chuanli11/CNNMRF" -> "facebook/eyescream"
"chuanli11/CNNMRF" -> "manuelruder/artistic-videos"
"chuanli11/CNNMRF" -> "leongatys/NeuralImageSynthesis"
"chuanli11/CNNMRF" -> "jcjohnson/fast-neural-style"
"chuanli11/CNNMRF" -> "Evolving-AI-Lab/ppgn"
"chuanli11/CNNMRF" -> "soumith/dcgan.torch"
"chuanli11/CNNMRF" -> "szagoruyko/loadcaffe" ["e"=1]
"chuanli11/CNNMRF" -> "y0ast/VAE-Torch" ["e"=1]
"eriklindernoren/Fast-Neural-Style-Transfer" -> "rrmina/fast-neural-style-pytorch"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "sunshineatnoon/LinearStyleTransfer"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "abhiskk/fast-neural-style"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "hwalsuklee/tensorflow-fast-style-transfer"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "eriklindernoren/PyTorch-Deep-Dream" ["e"=1]
"eriklindernoren/Fast-Neural-Style-Transfer" -> "sunshineatnoon/PytorchWCT"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "CortexFoundation/StyleTransferTrilogy"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "jxcodetw/Stylebank"
"eriklindernoren/Fast-Neural-Style-Transfer" -> "ProGamerGov/neural-style-pt"
"justinpinkney/awesome-pretrained-stylegan3" -> "justinpinkney/awesome-pretrained-stylegan2"
"justinpinkney/awesome-pretrained-stylegan3" -> "PDillis/stylegan3-fun"
"justinpinkney/awesome-pretrained-stylegan3" -> "yuval-alaluf/stylegan3-editing"
"justinpinkney/awesome-pretrained-stylegan3" -> "mehdidc/feed_forward_vqgan_clip" ["e"=1]
"justinpinkney/awesome-pretrained-stylegan3" -> "ouhenio/StyleGAN3-CLIP-notebooks"
"justinpinkney/awesome-pretrained-stylegan3" -> "justinpinkney/awesome-pretrained-stylegan"
"justinpinkney/awesome-pretrained-stylegan3" -> "dvschultz/stylegan3"
"justinpinkney/awesome-pretrained-stylegan3" -> "dvschultz/stylegan2-ada-pytorch"
"justinpinkney/awesome-pretrained-stylegan3" -> "edstoica/lucid_stylegan3_datasets_models"
"justinpinkney/awesome-pretrained-stylegan3" -> "eps696/stargan2" ["e"=1]
"justinpinkney/awesome-pretrained-stylegan3" -> "EndlessSora/DeceiveD"
"justinpinkney/awesome-pretrained-stylegan3" -> "nerdyrodent/lucid-sonic-dreams"
"devnag/pytorch-generative-adversarial-networks" -> "martinarjovsky/WassersteinGAN"
"devnag/pytorch-generative-adversarial-networks" -> "znxlwm/pytorch-generative-model-collections"
"devnag/pytorch-generative-adversarial-networks" -> "carpedm20/DiscoGAN-pytorch"
"devnag/pytorch-generative-adversarial-networks" -> "wiseodd/generative-models"
"devnag/pytorch-generative-adversarial-networks" -> "goodfeli/adversarial"
"devnag/pytorch-generative-adversarial-networks" -> "caogang/wgan-gp"
"devnag/pytorch-generative-adversarial-networks" -> "spro/practical-pytorch" ["e"=1]
"devnag/pytorch-generative-adversarial-networks" -> "openai/improved-gan"
"devnag/pytorch-generative-adversarial-networks" -> "nightrome/really-awesome-gan"
"devnag/pytorch-generative-adversarial-networks" -> "AYLIEN/gan-intro"
"devnag/pytorch-generative-adversarial-networks" -> "jcjohnson/pytorch-examples" ["e"=1]
"devnag/pytorch-generative-adversarial-networks" -> "lanpa/tensorboard-pytorch" ["e"=1]
"devnag/pytorch-generative-adversarial-networks" -> "carpedm20/DCGAN-tensorflow"
"devnag/pytorch-generative-adversarial-networks" -> "igul222/improved_wgan_training"
"devnag/pytorch-generative-adversarial-networks" -> "soumith/dcgan.torch"
"Picsart-AI-Research/LIVE-Layerwise-Image-Vectorization" -> "BachiLi/diffvg"
"zhangqianhui/progressive_growing_of_gans_tensorflow" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"zhangqianhui/progressive_growing_of_gans_tensorflow" -> "preritj/progressive_growing_of_GANs"
"a312863063/generators-with-stylegan2" -> "a312863063/seeprettyface-face_editor"
"a312863063/generators-with-stylegan2" -> "a312863063/seeprettyface-generator-yellow"
"a312863063/generators-with-stylegan2" -> "minivision-ai/photo2cartoon"
"a312863063/generators-with-stylegan2" -> "rolux/stylegan2encoder"
"a312863063/generators-with-stylegan2" -> "rosinality/stylegan2-pytorch"
"a312863063/generators-with-stylegan2" -> "a312863063/seeprettyface-generator-wanghong"
"a312863063/generators-with-stylegan2" -> "eladrich/pixel2style2pixel"
"a312863063/generators-with-stylegan2" -> "genforce/interfacegan"
"a312863063/generators-with-stylegan2" -> "alievk/avatarify-desktop"
"a312863063/generators-with-stylegan2" -> "zllrunning/face-parsing.PyTorch"
"a312863063/generators-with-stylegan2" -> "switchablenorms/CelebAMask-HQ"
"a312863063/generators-with-stylegan2" -> "pbaylies/stylegan-encoder"
"a312863063/generators-with-stylegan2" -> "Puzer/stylegan-encoder"
"a312863063/generators-with-stylegan2" -> "a312863063/Video-Auto-Wipe"
"a312863063/generators-with-stylegan2" -> "RameenAbdal/StyleFlow"
"znxlwm/UGATIT-pytorch" -> "taki0112/UGATIT"
"znxlwm/UGATIT-pytorch" -> "NVlabs/MUNIT"
"znxlwm/UGATIT-pytorch" -> "clovaai/stargan-v2"
"znxlwm/UGATIT-pytorch" -> "rosinality/stylegan2-pytorch"
"znxlwm/UGATIT-pytorch" -> "NVlabs/FUNIT"
"znxlwm/UGATIT-pytorch" -> "minivision-ai/photo2cartoon"
"znxlwm/UGATIT-pytorch" -> "HsinYingLee/DRIT"
"znxlwm/UGATIT-pytorch" -> "yunjey/stargan"
"znxlwm/UGATIT-pytorch" -> "eladrich/pixel2style2pixel"
"znxlwm/UGATIT-pytorch" -> "taesungp/contrastive-unpaired-translation"
"znxlwm/UGATIT-pytorch" -> "tamarott/SinGAN"
"znxlwm/UGATIT-pytorch" -> "mseitzer/pytorch-fid"
"znxlwm/UGATIT-pytorch" -> "Ha0Tang/AttentionGAN"
"znxlwm/UGATIT-pytorch" -> "heykeetae/Self-Attention-GAN"
"znxlwm/UGATIT-pytorch" -> "zllrunning/face-parsing.PyTorch"
"pfnet-research/sngan_projection" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"pfnet-research/sngan_projection" -> "godisboy/SN-GAN"
"pfnet-research/sngan_projection" -> "igul222/improved_wgan_training"
"pfnet-research/sngan_projection" -> "crcrpar/pytorch.sngan_projection"
"pfnet-research/sngan_projection" -> "heykeetae/Self-Attention-GAN"
"pfnet-research/sngan_projection" -> "google/compare_gan"
"pfnet-research/sngan_projection" -> "LMescheder/GAN_stability"
"pfnet-research/sngan_projection" -> "bioinf-jku/TTUR"
"pfnet-research/sngan_projection" -> "brain-research/self-attention-gan"
"pfnet-research/sngan_projection" -> "pfnet-research/chainer-gan-lib" ["e"=1]
"pfnet-research/sngan_projection" -> "AlexiaJM/RelativisticGAN"
"pfnet-research/sngan_projection" -> "caogang/wgan-gp"
"pfnet-research/sngan_projection" -> "ajbrock/BigGAN-PyTorch"
"pfnet-research/sngan_projection" -> "mseitzer/pytorch-fid"
"pfnet-research/sngan_projection" -> "minhnhat93/tf-SNDCGAN"
"wzmsltw/PaintTransformer" -> "Huage001/PaintTransformer"
"satoshiiizuka/siggraph2016_colorization" -> "richzhang/colorization"
"satoshiiizuka/siggraph2016_colorization" -> "junyanz/interactive-deep-colorization"
"satoshiiizuka/siggraph2016_colorization" -> "pavelgonchar/colornet"
"satoshiiizuka/siggraph2016_colorization" -> "gustavla/autocolorize"
"satoshiiizuka/siggraph2016_colorization" -> "pfnet/chainer" ["e"=1]
"satoshiiizuka/siggraph2016_colorization" -> "manuelruder/artistic-videos"
"satoshiiizuka/siggraph2016_colorization" -> "richzhang/colorization-pytorch"
"satoshiiizuka/siggraph2016_colorization" -> "chuanli11/CNNMRF"
"satoshiiizuka/siggraph2016_colorization" -> "DmitryUlyanov/texture_nets"
"satoshiiizuka/siggraph2016_colorization" -> "pfnet/PaintsChainer" ["e"=1]
"satoshiiizuka/siggraph2016_colorization" -> "jcjohnson/densecap" ["e"=1]
"satoshiiizuka/siggraph2016_colorization" -> "jcjohnson/fast-neural-style"
"satoshiiizuka/siggraph2016_colorization" -> "soumith/dcgan.torch"
"satoshiiizuka/siggraph2016_colorization" -> "david-gpu/srez"
"satoshiiizuka/siggraph2016_colorization" -> "Newmu/dcgan_code"
"xunhuang1995/AdaIN-style" -> "naoto0804/pytorch-AdaIN"
"xunhuang1995/AdaIN-style" -> "rtqichen/style-swap"
"xunhuang1995/AdaIN-style" -> "ycjing/Neural-Style-Transfer-Papers"
"xunhuang1995/AdaIN-style" -> "Yijunmaverick/UniversalStyleTransfer"
"xunhuang1995/AdaIN-style" -> "NVlabs/MUNIT"
"xunhuang1995/AdaIN-style" -> "DmitryUlyanov/texture_nets"
"xunhuang1995/AdaIN-style" -> "jcjohnson/fast-neural-style"
"xunhuang1995/AdaIN-style" -> "leongatys/NeuralImageSynthesis"
"xunhuang1995/AdaIN-style" -> "HsinYingLee/DRIT"
"xunhuang1995/AdaIN-style" -> "elleryqueenhomels/arbitrary_style_transfer" ["e"=1]
"xunhuang1995/AdaIN-style" -> "NVlabs/FUNIT"
"xunhuang1995/AdaIN-style" -> "sunshineatnoon/PytorchWCT"
"xunhuang1995/AdaIN-style" -> "junyanz/BicycleGAN"
"xunhuang1995/AdaIN-style" -> "CompVis/adaptive-style-transfer"
"xunhuang1995/AdaIN-style" -> "msracver/Deep-Image-Analogy"
"hollobit/All-About-the-GAN" -> "dongb5/GAN-Timeline"
"hollobit/All-About-the-GAN" -> "GKalliatakis/Delving-deep-into-GANs"
"hollobit/All-About-the-GAN" -> "shawnyuen/GANsPaperCollection"
"hollobit/All-About-the-GAN" -> "znxlwm/pytorch-generative-model-collections"
"hollobit/All-About-the-GAN" -> "xinario/awesome-gan-for-medical-imaging" ["e"=1]
"hollobit/All-About-the-GAN" -> "insurgent92/CS231N_17_KOR_SUB" ["e"=1]
"hollobit/All-About-the-GAN" -> "sjchoi86/bayes-nn" ["e"=1]
"hollobit/All-About-the-GAN" -> "nightrome/really-awesome-gan"
"hollobit/All-About-the-GAN" -> "xinario/SAGAN"
"hollobit/All-About-the-GAN" -> "hwalsuklee/tensorflow-generative-model-collections"
"hollobit/All-About-the-GAN" -> "kozistr/Awesome-GANs"
"hollobit/All-About-the-GAN" -> "lzhbrian/image-to-image-papers"
"hollobit/All-About-the-GAN" -> "google/compare_gan"
"hollobit/All-About-the-GAN" -> "khanrc/tf.gans-comparison"
"hollobit/All-About-the-GAN" -> "pfnet-research/sngan_projection"
"PeterWang512/GANWarping" -> "adobe-research/sam_inversion"
"PeterWang512/GANWarping" -> "DifanLiu/ASSET"
"PeterWang512/GANWarping" -> "chail/anyres-gan"
"PeterWang512/GANWarping" -> "nupurkmr9/vision-aided-gan"
"PeterWang512/GANWarping" -> "chail/gan-ensembling"
"fyu/lsun" -> "bioinf-jku/TTUR"
"fyu/lsun" -> "hubert0527/COCO-GAN" ["e"=1]
"fyu/lsun" -> "sbarratt/inception-score-pytorch"
"fyu/lsun" -> "soumith/dcgan.torch"
"fyu/lsun" -> "mseitzer/pytorch-fid"
"VainF/pytorch-msssim" -> "Po-Hsun-Su/pytorch-ssim"
"VainF/pytorch-msssim" -> "jorge-pessoa/pytorch-msssim"
"VainF/pytorch-msssim" -> "richzhang/PerceptualSimilarity"
"VainF/pytorch-msssim" -> "photosynthesis-team/piq" ["e"=1]
"VainF/pytorch-msssim" -> "InterDigitalInc/CompressAI" ["e"=1]
"VainF/pytorch-msssim" -> "psyrocloud/MS-SSIM_L1_LOSS"
"VainF/pytorch-msssim" -> "tensorflow/compression" ["e"=1]
"VainF/pytorch-msssim" -> "NVlabs/PL4NN"
"VainF/pytorch-msssim" -> "francois-rozet/piqa" ["e"=1]
"VainF/pytorch-msssim" -> "lizhengwei1992/MS_SSIM_pytorch"
"VainF/pytorch-msssim" -> "pkuxmq/Invertible-Image-Rescaling" ["e"=1]
"VainF/pytorch-msssim" -> "mseitzer/pytorch-fid"
"VainF/pytorch-msssim" -> "dingkeyan93/DISTS" ["e"=1]
"VainF/pytorch-msssim" -> "ZhendongWang6/Uformer" ["e"=1]
"VainF/pytorch-msssim" -> "aizvorski/video-quality" ["e"=1]
"kozistr/Awesome-GANs" -> "nightrome/really-awesome-gan"
"kozistr/Awesome-GANs" -> "hwalsuklee/tensorflow-generative-model-collections"
"kozistr/Awesome-GANs" -> "taki0112/Self-Attention-GAN-Tensorflow"
"kozistr/Awesome-GANs" -> "google/compare_gan"
"kozistr/Awesome-GANs" -> "Faldict/awesome-GAN"
"kozistr/Awesome-GANs" -> "hollobit/All-About-the-GAN"
"kozistr/Awesome-GANs" -> "taki0112/BigGAN-Tensorflow"
"kozistr/Awesome-GANs" -> "zhangqianhui/progressive_growing_of_gans_tensorflow"
"kozistr/Awesome-GANs" -> "khanrc/tf.gans-comparison"
"kozistr/Awesome-GANs" -> "carpedm20/BEGAN-tensorflow"
"kozistr/Awesome-GANs" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"kozistr/Awesome-GANs" -> "taki0112/GAN_Metrics-Tensorflow"
"kozistr/Awesome-GANs" -> "pfnet-research/sngan_projection"
"kozistr/Awesome-GANs" -> "nashory/gans-awesome-applications"
"kozistr/Awesome-GANs" -> "GANs-in-Action/gans-in-action"
"CompVis/adaptive-style-transfer" -> "sunshineatnoon/LinearStyleTransfer"
"CompVis/adaptive-style-transfer" -> "Yijunmaverick/UniversalStyleTransfer"
"CompVis/adaptive-style-transfer" -> "xunhuang1995/AdaIN-style"
"CompVis/adaptive-style-transfer" -> "ycjing/Neural-Style-Transfer-Papers"
"CompVis/adaptive-style-transfer" -> "LouieYang/stroke-controllable-fast-style-transfer"
"CompVis/adaptive-style-transfer" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"CompVis/adaptive-style-transfer" -> "sunshineatnoon/PytorchWCT"
"CompVis/adaptive-style-transfer" -> "manuelruder/fast-artistic-videos"
"CompVis/adaptive-style-transfer" -> "eridgd/WCT-TF"
"CompVis/adaptive-style-transfer" -> "HsinYingLee/DRIT"
"CompVis/adaptive-style-transfer" -> "rtqichen/style-swap"
"CompVis/adaptive-style-transfer" -> "sunniesuhyoung/DST"
"CompVis/adaptive-style-transfer" -> "ProGamerGov/neural-style-pt"
"CompVis/adaptive-style-transfer" -> "naoto0804/pytorch-AdaIN"
"CompVis/adaptive-style-transfer" -> "znxlwm/pytorch-CartoonGAN"
"giddyyupp/ganilla" -> "Onr/Council-GAN"
"giddyyupp/ganilla" -> "saic-mdal/HiDT"
"giddyyupp/ganilla" -> "limingcv/Photorealistic-Style-Transfer"
"giddyyupp/ganilla" -> "EvgenyKashin/stylegan2-distillation"
"giddyyupp/ganilla" -> "FilipAndersson245/cartoon-gan"
"giddyyupp/ganilla" -> "linjx-ustc1106/TuiGAN-PyTorch"
"giddyyupp/ganilla" -> "JCBrouwer/maua-stylegan2"
"giddyyupp/ganilla" -> "lllyasviel/PaintingLight" ["e"=1]
"giddyyupp/ganilla" -> "Yijunmaverick/UniversalStyleTransfer"
"giddyyupp/ganilla" -> "Ha0Tang/AttentionGAN"
"giddyyupp/ganilla" -> "zhen8838/AnimeStylized"
"giddyyupp/ganilla" -> "znxlwm/pytorch-CartoonGAN"
"giddyyupp/ganilla" -> "ericsujw/InstColorization"
"giddyyupp/ganilla" -> "lllyasviel/DanbooRegion" ["e"=1]
"giddyyupp/ganilla" -> "anvoynov/GANLatentDiscovery"
"sunshineatnoon/PytorchWCT" -> "Yijunmaverick/UniversalStyleTransfer"
"sunshineatnoon/PytorchWCT" -> "pietrocarbo/deep-transfer"
"sunshineatnoon/PytorchWCT" -> "sunshineatnoon/LinearStyleTransfer"
"sunshineatnoon/PytorchWCT" -> "eridgd/WCT-TF"
"sunshineatnoon/PytorchWCT" -> "LucasSheng/avatar-net"
"sunshineatnoon/PytorchWCT" -> "clovaai/WCT2"
"sunshineatnoon/PytorchWCT" -> "naoto0804/pytorch-AdaIN"
"sunshineatnoon/PytorchWCT" -> "nkolkin13/STROTSS"
"sunshineatnoon/PytorchWCT" -> "irasin/Pytorch_Style_Swap"
"sunshineatnoon/PytorchWCT" -> "WonwoongCho/GDWCT"
"sunshineatnoon/PytorchWCT" -> "JianqiangRen/AAMS"
"sunshineatnoon/PytorchWCT" -> "MingSun-Tse/Collaborative-Distillation"
"sunshineatnoon/PytorchWCT" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"sunshineatnoon/PytorchWCT" -> "GlebBrykin/SANET"
"sunshineatnoon/PytorchWCT" -> "ray075hl/DeepPhotoStyle_pytorch"
"ycjing/Neural-Style-Transfer-Papers" -> "xunhuang1995/AdaIN-style"
"ycjing/Neural-Style-Transfer-Papers" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"ycjing/Neural-Style-Transfer-Papers" -> "jcjohnson/fast-neural-style"
"ycjing/Neural-Style-Transfer-Papers" -> "titu1994/Neural-Style-Transfer"
"ycjing/Neural-Style-Transfer-Papers" -> "Yijunmaverick/UniversalStyleTransfer"
"ycjing/Neural-Style-Transfer-Papers" -> "sunshineatnoon/LinearStyleTransfer"
"ycjing/Neural-Style-Transfer-Papers" -> "msracver/Deep-Image-Analogy"
"ycjing/Neural-Style-Transfer-Papers" -> "rtqichen/style-swap"
"ycjing/Neural-Style-Transfer-Papers" -> "naoto0804/pytorch-AdaIN"
"ycjing/Neural-Style-Transfer-Papers" -> "LouieYang/deep-photo-styletransfer-tf"
"ycjing/Neural-Style-Transfer-Papers" -> "LouieYang/stroke-controllable-fast-style-transfer"
"ycjing/Neural-Style-Transfer-Papers" -> "sunshineatnoon/PytorchWCT"
"ycjing/Neural-Style-Transfer-Papers" -> "NVlabs/MUNIT"
"ycjing/Neural-Style-Transfer-Papers" -> "DmitryUlyanov/texture_nets"
"ycjing/Neural-Style-Transfer-Papers" -> "clovaai/WCT2"
"wukaoliu/CVPR2020-HAttMatting" -> "Yaoyi-Li/GCA-Matting"
"wukaoliu/CVPR2020-HAttMatting" -> "yunkezhang/FusionMatting"
"wukaoliu/CVPR2020-HAttMatting" -> "poppinace/indexnet_matting"
"wukaoliu/CVPR2020-HAttMatting" -> "MarcoForte/FBA_Matting"
"wukaoliu/CVPR2020-HAttMatting" -> "aisegmentcn/matting_human_datasets"
"wukaoliu/CVPR2020-HAttMatting" -> "huochaitiantang/pytorch-deep-image-matting"
"wukaoliu/CVPR2020-HAttMatting" -> "foamliu/Deep-Image-Matting-PyTorch"
"wukaoliu/CVPR2020-HAttMatting" -> "lizhengwei1992/Semantic_Human_Matting"
"wukaoliu/CVPR2020-HAttMatting" -> "hqqxyy/Context-Aware-Matting"
"wukaoliu/CVPR2020-HAttMatting" -> "nowsyn/SIM"
"wukaoliu/CVPR2020-HAttMatting" -> "yucornetto/MGMatting"
"wukaoliu/CVPR2020-HAttMatting" -> "JizhiziLi/animal-matting"
"wukaoliu/CVPR2020-HAttMatting" -> "CDOTAD/AlphaGAN-Matting"
"wukaoliu/CVPR2020-HAttMatting" -> "dong-x16/PortraitNet"
"wukaoliu/CVPR2020-HAttMatting" -> "takiyu/portrait_matting"
"FacePerceiver/facer" -> "FacePerceiver/FaRL"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-generator-yellow"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-face_editor"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-generator-star"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-generator-model"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/generators-with-stylegan2"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-ganerator-dongman"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/seeprettyface-generator-babies"
"a312863063/seeprettyface-generator-wanghong" -> "pbaylies/stylegan-encoder"
"a312863063/seeprettyface-generator-wanghong" -> "rolux/stylegan2encoder"
"a312863063/seeprettyface-generator-wanghong" -> "a312863063/Video-Auto-Wipe"
"a312863063/seeprettyface-generator-wanghong" -> "Puzer/stylegan-encoder"
"a312863063/seeprettyface-generator-wanghong" -> "Honlan/BeautyGAN"
"nashory/pggan-pytorch" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"nashory/pggan-pytorch" -> "akanimax/pro_gan_pytorch"
"nashory/pggan-pytorch" -> "tkarras/progressive_growing_of_gans"
"nashory/pggan-pytorch" -> "ptrblck/prog_gans_pytorch_inference"
"nashory/pggan-pytorch" -> "rosinality/style-based-gan-pytorch"
"nashory/pggan-pytorch" -> "facebookresearch/pytorch_GAN_zoo"
"nashory/pggan-pytorch" -> "tomguluson92/StyleGAN_PyTorch"
"nashory/pggan-pytorch" -> "rosinality/stylegan2-pytorch"
"nashory/pggan-pytorch" -> "bioinf-jku/TTUR"
"nashory/pggan-pytorch" -> "mseitzer/pytorch-fid"
"nashory/pggan-pytorch" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"nashory/pggan-pytorch" -> "sbarratt/inception-score-pytorch"
"nashory/pggan-pytorch" -> "heykeetae/Self-Attention-GAN"
"nashory/pggan-pytorch" -> "pfnet-research/sngan_projection"
"nashory/pggan-pytorch" -> "ajbrock/BigGAN-PyTorch"
"AlexiaJM/Deep-learning-with-cats" -> "AlexiaJM/RelativisticGAN"
"AlexiaJM/Deep-learning-with-cats" -> "openai/improved-gan"
"AlexiaJM/Deep-learning-with-cats" -> "martinarjovsky/WassersteinGAN"
"AlexiaJM/Deep-learning-with-cats" -> "carpedm20/BEGAN-tensorflow"
"AlexiaJM/Deep-learning-with-cats" -> "hanzhanggit/StackGAN"
"AlexiaJM/Deep-learning-with-cats" -> "yunjey/StarGAN"
"AlexiaJM/Deep-learning-with-cats" -> "hwalsuklee/tensorflow-generative-model-collections"
"AlexiaJM/Deep-learning-with-cats" -> "bioinf-jku/SNNs"
"AlexiaJM/Deep-learning-with-cats" -> "caogang/wgan-gp"
"AlexiaJM/Deep-learning-with-cats" -> "CQFIO/PhotographicImageSynthesis"
"AlexiaJM/Deep-learning-with-cats" -> "pfnet-research/chainer-gan-lib" ["e"=1]
"AlexiaJM/Deep-learning-with-cats" -> "hanzhanggit/StackGAN-v2"
"AlexiaJM/Deep-learning-with-cats" -> "igul222/improved_wgan_training"
"AlexiaJM/Deep-learning-with-cats" -> "carpedm20/DCGAN-tensorflow"
"AlexiaJM/Deep-learning-with-cats" -> "khanrc/tf.gans-comparison"
"Arctanxy/W-Net-PyTorch" -> "falconjhc/W-Net"
"changebo/HCCG-CycleGAN" -> "pcgreat/zi2zi"
"changebo/HCCG-CycleGAN" -> "ZC119/Handwritten-CycleGAN"
"changebo/HCCG-CycleGAN" -> "JeanWU/CalliGAN"
"changebo/HCCG-CycleGAN" -> "mhy12345/Chinese-Character-Style-Transfer"
"changebo/HCCG-CycleGAN" -> "MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing"
"clovaai/stargan-v2" -> "yunjey/stargan"
"clovaai/stargan-v2" -> "rosinality/stylegan2-pytorch"
"clovaai/stargan-v2" -> "eladrich/pixel2style2pixel"
"clovaai/stargan-v2" -> "switchablenorms/CelebAMask-HQ"
"clovaai/stargan-v2" -> "podgorskiy/ALAE"
"clovaai/stargan-v2" -> "NVlabs/stylegan2-ada-pytorch"
"clovaai/stargan-v2" -> "tamarott/SinGAN"
"clovaai/stargan-v2" -> "NVlabs/imaginaire"
"clovaai/stargan-v2" -> "NVlabs/stylegan2"
"clovaai/stargan-v2" -> "NVlabs/FUNIT"
"clovaai/stargan-v2" -> "NVlabs/MUNIT"
"clovaai/stargan-v2" -> "mseitzer/pytorch-fid"
"clovaai/stargan-v2" -> "ajbrock/BigGAN-PyTorch"
"clovaai/stargan-v2" -> "orpatashnik/StyleCLIP"
"clovaai/stargan-v2" -> "zllrunning/face-parsing.PyTorch"
"linjx-ustc1106/TuiGAN-PyTorch" -> "Onr/Council-GAN"
"linjx-ustc1106/TuiGAN-PyTorch" -> "acht7111020/DSMAP"
"linjx-ustc1106/TuiGAN-PyTorch" -> "yaxingwang/SEMIT"
"pcgreat/zi2zi" -> "changebo/HCCG-CycleGAN"
"vipermu/ganimation" -> "donydchen/ganimation_replicate"
"vipermu/ganimation" -> "zhangzjn/FReeNet" ["e"=1]
"cvlab-stonybrook/SID" -> "naoto0804/SynShadow"
"cvlab-stonybrook/SID" -> "vinthony/ghost-free-shadow-removal"
"cvlab-stonybrook/SID" -> "tsingqguo/exposure-fusion-shadow-removal"
"cvlab-stonybrook/SID" -> "hhqweasd/LG-ShadowNet"
"cvlab-stonybrook/SID" -> "hhqweasd/G2R-ShadowNet"
"hhqweasd/G2R-ShadowNet" -> "hhqweasd/LG-ShadowNet"
"hhqweasd/G2R-ShadowNet" -> "tsingqguo/exposure-fusion-shadow-removal"
"tsingqguo/exposure-fusion-shadow-removal" -> "naoto0804/SynShadow"
"tsingqguo/exposure-fusion-shadow-removal" -> "cvlab-stonybrook/SID"
"tsingqguo/exposure-fusion-shadow-removal" -> "hhqweasd/G2R-ShadowNet"
"tsingqguo/exposure-fusion-shadow-removal" -> "vinthony/ghost-free-shadow-removal"
"tsingqguo/exposure-fusion-shadow-removal" -> "tsingqguo/efficientderain" ["e"=1]
"tsingqguo/exposure-fusion-shadow-removal" -> "xw-hu/Mask-ShadowGAN"
"tsingqguo/exposure-fusion-shadow-removal" -> "jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal"
"tsingqguo/exposure-fusion-shadow-removal" -> "eraserNut/MTMT"
"tsingqguo/exposure-fusion-shadow-removal" -> "stevewongv/DSC-PyTorch"
"tsingqguo/exposure-fusion-shadow-removal" -> "IsHYuhi/ST-CGAN_Stacked_Conditional_Generative_Adversarial_Networks"
"tsingqguo/exposure-fusion-shadow-removal" -> "DeepInsight-PCALab/ST-CGAN"
"tsingqguo/exposure-fusion-shadow-removal" -> "YingqingHe/Shadow-Removal-via-Generative-Priors"
"JDAI-CV/lapa-dataset" -> "tegusi/EAGRNet"
"JDAI-CV/lapa-dataset" -> "kennyvoo/face-occlusion-generation"
"JDAI-CV/lapa-dataset" -> "Star-Clouds/FRDA" ["e"=1]
"JDAI-CV/lapa-dataset" -> "jhb86253817/PIPNet" ["e"=1]
"JDAI-CV/lapa-dataset" -> "JACKYLUO1991/FaceParsing"
"JDAI-CV/lapa-dataset" -> "hanson-young/nniefacelib" ["e"=1]
"LynnHo/CycleGAN-Tensorflow-2" -> "simontomaskarlsson/CycleGAN-Keras"
"LynnHo/CycleGAN-Tensorflow-2" -> "vanhuyz/CycleGAN-TensorFlow"
"LynnHo/CycleGAN-Tensorflow-2" -> "hardikbansal/CycleGAN"
"LynnHo/CycleGAN-Tensorflow-2" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"LynnHo/CycleGAN-Tensorflow-2" -> "xhujoy/CycleGAN-tensorflow"
"LynnHo/CycleGAN-Tensorflow-2" -> "LynnHo/AttGAN-Tensorflow"
"LynnHo/CycleGAN-Tensorflow-2" -> "manicman1999/StyleGAN2-Tensorflow-2.0"
"NVlabs/MUNIT" -> "mingyuliutw/UNIT"
"NVlabs/MUNIT" -> "HsinYingLee/DRIT"
"NVlabs/MUNIT" -> "junyanz/BicycleGAN"
"NVlabs/MUNIT" -> "NVlabs/FUNIT"
"NVlabs/MUNIT" -> "taki0112/MUNIT-Tensorflow"
"NVlabs/MUNIT" -> "lzhbrian/image-to-image-papers"
"NVlabs/MUNIT" -> "NVIDIA/pix2pixHD"
"NVlabs/MUNIT" -> "tkarras/progressive_growing_of_gans"
"NVlabs/MUNIT" -> "mseitzer/pytorch-fid"
"NVlabs/MUNIT" -> "NVlabs/imaginaire"
"NVlabs/MUNIT" -> "yunjey/stargan"
"NVlabs/MUNIT" -> "xunhuang1995/AdaIN-style"
"NVlabs/MUNIT" -> "pfnet-research/sngan_projection"
"NVlabs/MUNIT" -> "heykeetae/Self-Attention-GAN"
"NVlabs/MUNIT" -> "openai/glow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "heykeetae/Self-Attention-GAN"
"taki0112/Self-Attention-GAN-Tensorflow" -> "brain-research/self-attention-gan"
"taki0112/Self-Attention-GAN-Tensorflow" -> "taki0112/BigGAN-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "pfnet-research/sngan_projection"
"taki0112/Self-Attention-GAN-Tensorflow" -> "taki0112/StarGAN-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "taki0112/Spectral_Normalization-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "minhnhat93/tf-SNDCGAN"
"taki0112/Self-Attention-GAN-Tensorflow" -> "taki0112/MUNIT-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "taki0112/GAN_Metrics-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "google/compare_gan"
"taki0112/Self-Attention-GAN-Tensorflow" -> "bioinf-jku/TTUR"
"taki0112/Self-Attention-GAN-Tensorflow" -> "akanimax/fagan"
"taki0112/Self-Attention-GAN-Tensorflow" -> "xhujoy/CycleGAN-tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "gitlimlab/SSGAN-Tensorflow"
"taki0112/Self-Attention-GAN-Tensorflow" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"tegusi/EAGRNet" -> "JACKYLUO1991/FaceParsing"
"tegusi/EAGRNet" -> "hhj1897/face_parsing"
"tegusi/EAGRNet" -> "isi-vista/structure_via_consensus"
"tegusi/EAGRNet" -> "JDAI-CV/lapa-dataset"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Website"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Bank"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Validator"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/thenewboston-python"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Website-API"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Payment-Processor"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/thenewboston-python-client"
"thenewboston-developers/Account-Manager" -> "cmu-snap/pigasus"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/thenewboston-js"
"thenewboston-developers/Account-Manager" -> "thenewboston-developers/Kotlin-SDK"
"mjdietzx/SimGAN" -> "AlexHex7/SimGAN_pytorch"
"mjdietzx/SimGAN" -> "carpedm20/simulated-unsupervised-tensorflow"
"XiaohangZhan/deocclusion" -> "lkeab/BCNet" ["e"=1]
"XiaohangZhan/deocclusion" -> "open-mmlab/OpenSelfSup" ["e"=1]
"XiaohangZhan/deocclusion" -> "Hangz-nju-cuhk/Rotate-and-Render" ["e"=1]
"XiaohangZhan/deocclusion" -> "XingangPan/deep-generative-prior"
"XiaohangZhan/deocclusion" -> "naoto0804/pytorch-inpainting-with-partial-conv" ["e"=1]
"XiaohangZhan/deocclusion" -> "XiaohangZhan/conditional-motion-propagation" ["e"=1]
"XiaohangZhan/deocclusion" -> "menyifang/ADGAN" ["e"=1]
"XiaohangZhan/deocclusion" -> "IVRL/GANLocalEditing"
"XiaohangZhan/deocclusion" -> "facebookresearch/synsin" ["e"=1]
"XiaohangZhan/deocclusion" -> "XiaohangZhan/deocclusion-demo"
"XiaohangZhan/deocclusion" -> "kam1107/RealnessGAN"
"XiaohangZhan/deocclusion" -> "saic-vul/adaptis" ["e"=1]
"XiaohangZhan/deocclusion" -> "yl-1993/learn-to-cluster" ["e"=1]
"rebuild-123/Python-Head-First-Design-Patterns" -> "jason022085/backup-google-drive"
"rebuild-123/Python-Head-First-Design-Patterns" -> "ChickenBenny/job-platform"
"rebuild-123/Python-Head-First-Design-Patterns" -> "ChickenBenny/Airflow-tutorial"
"rebuild-123/Python-Head-First-Design-Patterns" -> "nicehorse06/se-job" ["e"=1]
"rebuild-123/Python-Head-First-Design-Patterns" -> "yuawn/NTU-Computer-Security" ["e"=1]
"rebuild-123/Python-Head-First-Design-Patterns" -> "William-Yeh/docker-workshop" ["e"=1]
"VinAIResearch/CPM" -> "makeuptransfer/SCGAN"
"VinAIResearch/CPM" -> "wtjiang98/PSGAN"
"VinAIResearch/CPM" -> "thaoshibe/BeautyGAN-PyTorch-reimplementation"
"VinAIResearch/CPM" -> "thaoshibe/awesome-makeup-transfer"
"VinAIResearch/CPM" -> "wangguanzhi/LADN"
"VinAIResearch/CPM" -> "Chenyu-Yang-2000/EleGANt"
"VinAIResearch/CPM" -> "wtjiang98/BeautyGAN_pytorch"
"VinAIResearch/CPM" -> "huangzhikun1995/IPM-Net" ["e"=1]
"VinAIResearch/CPM" -> "Snowfallingplum/SSAT"
"VinAIResearch/CPM" -> "Honlan/DMT"
"huochaitiantang/pytorch-deep-image-matting" -> "Yaoyi-Li/GCA-Matting"
"huochaitiantang/pytorch-deep-image-matting" -> "poppinace/indexnet_matting"
"huochaitiantang/pytorch-deep-image-matting" -> "lizhengwei1992/Semantic_Human_Matting"
"huochaitiantang/pytorch-deep-image-matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"huochaitiantang/pytorch-deep-image-matting" -> "foamliu/Deep-Image-Matting-v2"
"huochaitiantang/pytorch-deep-image-matting" -> "CDOTAD/AlphaGAN-Matting"
"huochaitiantang/pytorch-deep-image-matting" -> "foamliu/Deep-Image-Matting"
"huochaitiantang/pytorch-deep-image-matting" -> "wukaoliu/CVPR2020-HAttMatting"
"huochaitiantang/pytorch-deep-image-matting" -> "takiyu/portrait_matting"
"huochaitiantang/pytorch-deep-image-matting" -> "lnugraha/trimap_generator"
"huochaitiantang/pytorch-deep-image-matting" -> "tsing90/pytorch_semantic_human_matting"
"huochaitiantang/pytorch-deep-image-matting" -> "yunkezhang/FusionMatting"
"huochaitiantang/pytorch-deep-image-matting" -> "hyperconnect/MMNet"
"huochaitiantang/pytorch-deep-image-matting" -> "Joker316701882/Deep-Image-Matting"
"huochaitiantang/pytorch-deep-image-matting" -> "aisegmentcn/matting_human_datasets"
"kam1107/RealnessGAN" -> "XingangPan/deep-generative-prior"
"kam1107/RealnessGAN" -> "Xiaoming-Yu/DMIT"
"kam1107/RealnessGAN" -> "akanimax/BMSG-GAN"
"kam1107/RealnessGAN" -> "akanimax/MSG-GAN"
"kam1107/RealnessGAN" -> "tohinz/ConSinGAN"
"mnicnc404/CartoonGan-tensorflow" -> "Yijunmaverick/CartoonGAN-Test-Pytorch-Torch"
"mnicnc404/CartoonGan-tensorflow" -> "znxlwm/pytorch-CartoonGAN"
"mnicnc404/CartoonGan-tensorflow" -> "taki0112/CartoonGAN-Tensorflow"
"mnicnc404/CartoonGan-tensorflow" -> "SystemErrorWang/White-box-Cartoonization"
"mnicnc404/CartoonGan-tensorflow" -> "experience-ml/cartoonize"
"mnicnc404/CartoonGan-tensorflow" -> "minivision-ai/photo2cartoon"
"mnicnc404/CartoonGan-tensorflow" -> "FilipAndersson245/cartoon-gan"
"mnicnc404/CartoonGan-tensorflow" -> "lutianming/cartoonizer"
"mnicnc404/CartoonGan-tensorflow" -> "maciej3031/comixify"
"mnicnc404/CartoonGan-tensorflow" -> "SystemErrorWang/CartoonGAN"
"mnicnc404/CartoonGan-tensorflow" -> "yiranran/APDrawingGAN"
"mnicnc404/CartoonGan-tensorflow" -> "TachibanaYoshino/AnimeGAN"
"mnicnc404/CartoonGan-tensorflow" -> "seasonSH/WarpGAN"
"mnicnc404/CartoonGan-tensorflow" -> "FlyingGoblin/CartoonGAN"
"mnicnc404/CartoonGan-tensorflow" -> "giddyyupp/ganilla"
"papulke/face-of-art" -> "sunniesuhyoung/DST"
"papulke/face-of-art" -> "seasonSH/WarpGAN"
"papulke/face-of-art" -> "Azmarie/Caricature-Your-Face"
"papulke/face-of-art" -> "wenqingchu/Semantic-CariGANs"
"papulke/face-of-art" -> "soubhiksanyal/FLAME_PyTorch" ["e"=1]
"yiranran/APDrawingGAN2" -> "yiranran/Unpaired-Portrait-Drawing"
"yiranran/APDrawingGAN2" -> "yiranran/APDrawingGAN"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "ycjing/Neural-Style-Transfer-Papers"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "sunshineatnoon/PytorchWCT"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "sunshineatnoon/LinearStyleTransfer"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "leongatys/PytorchNeuralStyleTransfer"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "naoto0804/pytorch-AdaIN"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "CompVis/adaptive-style-transfer"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "Yijunmaverick/UniversalStyleTransfer"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "rrmina/fast-neural-style-pytorch"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "ProGamerGov/neural-style-pt"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "clovaai/WCT2"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "CortexFoundation/StyleTransferTrilogy"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "abhiskk/fast-neural-style"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "floydhub/imagenet"
"zhanghang1989/PyTorch-Multi-Style-Transfer" -> "xunhuang1995/AdaIN-style"
"carpedm20/BEGAN-tensorflow" -> "Heumi/BEGAN-tensorflow"
"carpedm20/BEGAN-tensorflow" -> "carpedm20/BEGAN-pytorch"
"carpedm20/BEGAN-tensorflow" -> "carpedm20/DiscoGAN-pytorch"
"carpedm20/BEGAN-tensorflow" -> "artcg/BEGAN"
"carpedm20/BEGAN-tensorflow" -> "igul222/improved_wgan_training"
"carpedm20/BEGAN-tensorflow" -> "carpedm20/DCGAN-tensorflow"
"carpedm20/BEGAN-tensorflow" -> "openai/improved-gan"
"carpedm20/BEGAN-tensorflow" -> "carpedm20/simulated-unsupervised-tensorflow"
"carpedm20/BEGAN-tensorflow" -> "shekkizh/WassersteinGAN.tensorflow"
"carpedm20/BEGAN-tensorflow" -> "khanrc/tf.gans-comparison"
"carpedm20/BEGAN-tensorflow" -> "Zardinality/WGAN-tensorflow"
"carpedm20/BEGAN-tensorflow" -> "bamos/dcgan-completion.tensorflow"
"carpedm20/BEGAN-tensorflow" -> "yenchenlin/pix2pix-tensorflow"
"carpedm20/BEGAN-tensorflow" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"carpedm20/BEGAN-tensorflow" -> "martinarjovsky/WassersteinGAN"
"sunshineatnoon/Paper-Implementations" -> "carpedm20/DiscoGAN-pytorch"
"sunshineatnoon/Paper-Implementations" -> "znxlwm/pytorch-generative-model-collections"
"sunshineatnoon/Paper-Implementations" -> "carpedm20/BEGAN-pytorch"
"sunshineatnoon/Paper-Implementations" -> "caogang/wgan-gp"
"sunshineatnoon/Paper-Implementations" -> "taey16/pix2pixBEGAN.pytorch"
"sunshineatnoon/Paper-Implementations" -> "SherlockLiao/pytorch-beginner" ["e"=1]
"sunshineatnoon/Paper-Implementations" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"sunshineatnoon/Paper-Implementations" -> "yunjey/mnist-svhn-transfer"
"sunshineatnoon/Paper-Implementations" -> "lanpa/tensorboard-pytorch" ["e"=1]
"sunshineatnoon/Paper-Implementations" -> "carpedm20/BEGAN-tensorflow"
"sunshineatnoon/Paper-Implementations" -> "devnag/pytorch-generative-adversarial-networks"
"sunshineatnoon/Paper-Implementations" -> "leehomyc/Photo-Realistic-Super-Resoluton" ["e"=1]
"sunshineatnoon/Paper-Implementations" -> "martinarjovsky/WassersteinGAN"
"sunshineatnoon/Paper-Implementations" -> "twtygqyy/pytorch-SRResNet" ["e"=1]
"sunshineatnoon/Paper-Implementations" -> "GKalliatakis/Delving-deep-into-GANs"
"yenchenlin/pix2pix-tensorflow" -> "affinelayer/pix2pix-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "xhujoy/CycleGAN-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "vanhuyz/CycleGAN-TensorFlow"
"yenchenlin/pix2pix-tensorflow" -> "carpedm20/BEGAN-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "buriburisuri/ac-gan"
"yenchenlin/pix2pix-tensorflow" -> "Zardinality/WGAN-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "tdeboissiere/DeepLearningImplementations"
"yenchenlin/pix2pix-tensorflow" -> "hanzhanggit/StackGAN"
"yenchenlin/pix2pix-tensorflow" -> "openai/improved-gan"
"yenchenlin/pix2pix-tensorflow" -> "phillipi/pix2pix"
"yenchenlin/pix2pix-tensorflow" -> "carpedm20/DCGAN-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "yunjey/domain-transfer-network"
"yenchenlin/pix2pix-tensorflow" -> "igul222/improved_wgan_training"
"yenchenlin/pix2pix-tensorflow" -> "carpedm20/simulated-unsupervised-tensorflow"
"yenchenlin/pix2pix-tensorflow" -> "shekkizh/WassersteinGAN.tensorflow"
"clovaai/dmfont" -> "clovaai/lffont"
"clovaai/dmfont" -> "clovaai/mxfont"
"clovaai/dmfont" -> "clovaai/fewshot-font-generation"
"hologerry/Attr2Font" -> "hologerry/AGIS-Net"
"hologerry/Attr2Font" -> "yizhiwang96/deepvecfont"
"hologerry/Attr2Font" -> "ecnuycxie/DG-Font"
"hologerry/Attr2Font" -> "ShusenTang/FontRNN"
"hologerry/Attr2Font" -> "clovaai/lffont"
"hologerry/Attr2Font" -> "clovaai/mxfont"
"hologerry/Attr2Font" -> "liweileev/FET-GAN"
"hologerry/Attr2Font" -> "ShusenTang/WriteLikeYou"
"hologerry/Attr2Font" -> "azadis/MC-GAN"
"hologerry/Attr2Font" -> "tlc121/FsFont"
"gsurma/style_transfer" -> "szagoruyko/neural-style-autograd"
"rosinality/stylegan2-pytorch" -> "NVlabs/stylegan2-ada-pytorch"
"rosinality/stylegan2-pytorch" -> "eladrich/pixel2style2pixel"
"rosinality/stylegan2-pytorch" -> "lucidrains/stylegan2-pytorch"
"rosinality/stylegan2-pytorch" -> "omertov/encoder4editing"
"rosinality/stylegan2-pytorch" -> "rosinality/style-based-gan-pytorch"
"rosinality/stylegan2-pytorch" -> "genforce/interfacegan"
"rosinality/stylegan2-pytorch" -> "orpatashnik/StyleCLIP"
"rosinality/stylegan2-pytorch" -> "mseitzer/pytorch-fid"
"rosinality/stylegan2-pytorch" -> "weihaox/awesome-gan-inversion"
"rosinality/stylegan2-pytorch" -> "NVlabs/stylegan3"
"rosinality/stylegan2-pytorch" -> "justinpinkney/awesome-pretrained-stylegan2"
"rosinality/stylegan2-pytorch" -> "switchablenorms/CelebAMask-HQ"
"rosinality/stylegan2-pytorch" -> "yuval-alaluf/restyle-encoder"
"rosinality/stylegan2-pytorch" -> "zllrunning/face-parsing.PyTorch"
"rosinality/stylegan2-pytorch" -> "clovaai/stargan-v2"
"FlyingGoblin/CartoonGAN" -> "znxlwm/pytorch-CartoonGAN"
"FlyingGoblin/CartoonGAN" -> "Yijunmaverick/CartoonGAN-Test-Pytorch-Torch"
"MarkMoHR/Awesome-Image-Colorization" -> "ericsujw/InstColorization"
"MarkMoHR/Awesome-Image-Colorization" -> "richzhang/colorization-pytorch"
"MarkMoHR/Awesome-Image-Colorization" -> "msracver/Deep-Exemplar-based-Colorization"
"MarkMoHR/Awesome-Image-Colorization" -> "SerialLain3170/Colorization" ["e"=1]
"MarkMoHR/Awesome-Image-Colorization" -> "pvitoria/ChromaGAN"
"MarkMoHR/Awesome-Image-Colorization" -> "dongheehand/MemoPainter-PyTorch"
"MarkMoHR/Awesome-Image-Colorization" -> "blandocs/Tag2Pix" ["e"=1]
"MarkMoHR/Awesome-Image-Colorization" -> "orashi/AlacGAN" ["e"=1]
"MarkMoHR/Awesome-Image-Colorization" -> "ChenyangLEI/automatic-video-colorization"
"MarkMoHR/Awesome-Image-Colorization" -> "raywzy/Bringing-Old-Films-Back-to-Life"
"MarkMoHR/Awesome-Image-Colorization" -> "Pengxiao-Wang/Style2Paints_V3" ["e"=1]
"MarkMoHR/Awesome-Image-Colorization" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"MarkMoHR/Awesome-Image-Colorization" -> "emilwallner/Coloring-greyscale-images"
"MarkMoHR/Awesome-Image-Colorization" -> "richzhang/colorization"
"MarkMoHR/Awesome-Image-Colorization" -> "junyanz/interactive-deep-colorization"
"taki0112/GAN_Metrics-Tensorflow" -> "xuqiantong/GAN-Metrics"
"taki0112/GAN_Metrics-Tensorflow" -> "nnUyi/Inception-Score"
"taki0112/GAN_Metrics-Tensorflow" -> "lzhbrian/metrics"
"taki0112/GAN_Metrics-Tensorflow" -> "tsc2017/Frechet-Inception-Distance"
"taki0112/GAN_Metrics-Tensorflow" -> "bioinf-jku/TTUR"
"taki0112/GAN_Metrics-Tensorflow" -> "tsc2017/Inception-Score"
"taki0112/GAN_Metrics-Tensorflow" -> "abdulfatir/gan-metrics-pytorch"
"taki0112/GAN_Metrics-Tensorflow" -> "taki0112/BigGAN-Tensorflow"
"taki0112/GAN_Metrics-Tensorflow" -> "sbarratt/inception-score-pytorch"
"taki0112/GAN_Metrics-Tensorflow" -> "taki0112/SphereGAN-Tensorflow"
"taki0112/GAN_Metrics-Tensorflow" -> "mbinkowski/MMD-GAN" ["e"=1]
"DeepInsight-PCALab/ST-CGAN" -> "Vivianyzw/DeshadowSTCGANs"
"DeepInsight-PCALab/ST-CGAN" -> "zylix666/DeshadowNet"
"DeepInsight-PCALab/ST-CGAN" -> "cvlab-stonybrook/SID"
"DeepInsight-PCALab/ST-CGAN" -> "xw-hu/DSC"
"DeepInsight-PCALab/ST-CGAN" -> "csjfwang/ST-CGAN"
"DeepInsight-PCALab/ST-CGAN" -> "WHUlwb/stcgan"
"stevewongv/DSC-PyTorch" -> "xw-hu/DSC"
"stevewongv/DSC-PyTorch" -> "zijundeng/BDRAR"
"stevewongv/DSC-PyTorch" -> "naoto0804/SynShadow"
"stevewongv/DSC-PyTorch" -> "eraserNut/MTMT"
"stevewongv/DSC-PyTorch" -> "stevewongv/InstanceShadowDetection"
"stevewongv/DSC-PyTorch" -> "xw-hu/Mask-ShadowGAN"
"stevewongv/DSC-PyTorch" -> "vinthony/ghost-free-shadow-removal"
"stevewongv/DSC-PyTorch" -> "cvlab-stonybrook/SID"
"stevewongv/InstanceShadowDetection" -> "stevewongv/DSC-PyTorch"
"stevewongv/InstanceShadowDetection" -> "stevewongv/SSIS"
"stevewongv/InstanceShadowDetection" -> "eraserNut/MTMT"
"stevewongv/InstanceShadowDetection" -> "zijundeng/BDRAR"
"stevewongv/InstanceShadowDetection" -> "naoto0804/SynShadow"
"xw-hu/DSC" -> "stevewongv/DSC-PyTorch"
"xw-hu/DSC" -> "zijundeng/BDRAR"
"xw-hu/DSC" -> "DeepInsight-PCALab/ST-CGAN"
"xw-hu/DSC" -> "xw-hu/CF-Caffe"
"xw-hu/DSC" -> "xw-hu/Mask-ShadowGAN"
"xw-hu/DSC" -> "zhling2020/RIS-GAN"
"xw-hu/DSC" -> "zylix666/DeshadowNet"
"zijundeng/BDRAR" -> "stevewongv/DSC-PyTorch"
"zijundeng/BDRAR" -> "xw-hu/DSC"
"zijundeng/BDRAR" -> "eraserNut/MTMT"
"zijundeng/BDRAR" -> "sepidehhosseinzadeh/Fast-Shadow-Detection"
"zijundeng/BDRAR" -> "stevewongv/InstanceShadowDetection"
"zijundeng/BDRAR" -> "WHUlwb/stcgan"
"zijundeng/BDRAR" -> "kittenish/Image-Shadow-Detection-and-Removal"
"zijundeng/BDRAR" -> "zijundeng/R3Net" ["e"=1]
"zijundeng/BDRAR" -> "Vivianyzw/DeshadowSTCGANs"
"yael-vinker/CLIPasso" -> "BachiLi/diffvg"
"yael-vinker/CLIPasso" -> "carolineec/informative-drawings"
"yael-vinker/CLIPasso" -> "pschaldenbrand/StyleCLIPDraw"
"yael-vinker/CLIPasso" -> "threedle/text2mesh" ["e"=1]
"yael-vinker/CLIPasso" -> "rinongal/StyleGAN-nada"
"yael-vinker/CLIPasso" -> "hongfz16/AvatarCLIP" ["e"=1]
"yael-vinker/CLIPasso" -> "wty-ustc/HairCLIP"
"yael-vinker/CLIPasso" -> "MichalGeyer/plug-and-play" ["e"=1]
"yael-vinker/CLIPasso" -> "PITI-Synthesis/PITI" ["e"=1]
"yael-vinker/CLIPasso" -> "autonomousvision/stylegan_xl"
"yael-vinker/CLIPasso" -> "wpeebles/gangealing"
"yael-vinker/CLIPasso" -> "gwang-kim/DiffusionCLIP" ["e"=1]
"yael-vinker/CLIPasso" -> "THUDM/CogView2" ["e"=1]
"yael-vinker/CLIPasso" -> "yuval-alaluf/stylegan3-editing"
"yael-vinker/CLIPasso" -> "yumingj/Text2Human" ["e"=1]
"CortexFoundation/StyleTransferTrilogy" -> "FalongShen/styletransfer"
"CortexFoundation/StyleTransferTrilogy" -> "sunshineatnoon/LinearStyleTransfer"
"CortexFoundation/StyleTransferTrilogy" -> "AaronJny/nerual_style_change"
"CortexFoundation/StyleTransferTrilogy" -> "ycjing/Neural-Style-Transfer-Papers"
"CortexFoundation/StyleTransferTrilogy" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"CortexFoundation/StyleTransferTrilogy" -> "sunshineatnoon/PytorchWCT"
"CortexFoundation/StyleTransferTrilogy" -> "GlebBrykin/SANET"
"CortexFoundation/StyleTransferTrilogy" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"CortexFoundation/StyleTransferTrilogy" -> "rrmina/fast-neural-style-pytorch"
"CortexFoundation/StyleTransferTrilogy" -> "naoto0804/pytorch-AdaIN"
"CortexFoundation/StyleTransferTrilogy" -> "xunhuang1995/AdaIN-style"
"CortexFoundation/StyleTransferTrilogy" -> "leongatys/PytorchNeuralStyleTransfer"
"CortexFoundation/StyleTransferTrilogy" -> "clovaai/WCT2"
"CortexFoundation/StyleTransferTrilogy" -> "hzy46/fast-neural-style-tensorflow"
"CortexFoundation/StyleTransferTrilogy" -> "WellyZhang/MetaStyle"
"FilipAndersson245/cartoon-gan" -> "TobiasSunderdiek/cartoon-gan"
"FilipAndersson245/cartoon-gan" -> "znxlwm/pytorch-CartoonGAN"
"FilipAndersson245/cartoon-gan" -> "happy-jihye/Cartoon-StyleGAN"
"baldFemale/beautyGAN-tf-Implement" -> "baldFemale/MakeupEmbeddingGAN-tf-Implement"
"baldFemale/beautyGAN-tf-Implement" -> "BeautyGlow/BeautyGlow.github.io"
"baldFemale/beautyGAN-tf-Implement" -> "Honlan/DMT"
"baldFemale/beautyGAN-tf-Implement" -> "wangguanzhi/LADN"
"baldFemale/beautyGAN-tf-Implement" -> "wtjiang98/BeautyGAN_pytorch"
"baldFemale/beautyGAN-tf-Implement" -> "Honlan/BeautyGAN"
"baldFemale/beautyGAN-tf-Implement" -> "masterkapilkumar/Digital-Makeup-Transfer"
"eridgd/WCT-TF" -> "Yijunmaverick/UniversalStyleTransfer"
"eridgd/WCT-TF" -> "sunshineatnoon/PytorchWCT"
"eridgd/WCT-TF" -> "LucasSheng/avatar-net"
"eridgd/WCT-TF" -> "rtqichen/style-swap"
"eridgd/WCT-TF" -> "hwalsuklee/tensorflow-fast-style-transfer"
"eridgd/WCT-TF" -> "LouieYang/stroke-controllable-fast-style-transfer"
"eridgd/WCT-TF" -> "zhangcliff/WCT-based-style-transfer"
"eridgd/WCT-TF" -> "nkolkin13/STROTSS"
"eridgd/WCT-TF" -> "tensorlayer/adaptive-style-transfer"
"eridgd/WCT-TF" -> "sunshineatnoon/LinearStyleTransfer"
"eridgd/WCT-TF" -> "ycjing/Neural-Style-Transfer-Papers"
"eridgd/WCT-TF" -> "CompVis/adaptive-style-transfer"
"quolc/neural-collage" -> "blandocs/Tag2Pix" ["e"=1]
"quolc/neural-collage" -> "NVlabs/FUNIT"
"quolc/neural-collage" -> "LMescheder/GAN_stability"
"quolc/neural-collage" -> "PeterWang512/GANWarping"
"quolc/neural-collage" -> "sangwoomo/instagan"
"quolc/neural-collage" -> "ZPdesu/SEAN"
"quolc/neural-collage" -> "csmliu/STGAN"
"quolc/neural-collage" -> "hubert0527/COCO-GAN" ["e"=1]
"quolc/neural-collage" -> "pfnet-research/chainer-stylegan" ["e"=1]
"quolc/neural-collage" -> "nkolkin13/STROTSS"
"quolc/neural-collage" -> "cientgu/Mask_Guided_Portrait_Editing" ["e"=1]
"quolc/neural-collage" -> "HsinYingLee/DRIT"
"quolc/neural-collage" -> "naver-ai/StyleMapGAN"
"quolc/neural-collage" -> "Puzer/stylegan-encoder"
"rolux/stylegan2encoder" -> "pbaylies/stylegan-encoder"
"rolux/stylegan2encoder" -> "Puzer/stylegan-encoder"
"rolux/stylegan2encoder" -> "robertluxemburg/stylegan2encoder"
"rolux/stylegan2encoder" -> "EvgenyKashin/stylegan2-distillation"
"rolux/stylegan2encoder" -> "skyflynil/stylegan2"
"rolux/stylegan2encoder" -> "tg-bomze/StyleGAN2-Face-Modificator"
"rolux/stylegan2encoder" -> "a312863063/seeprettyface-face_editor"
"rolux/stylegan2encoder" -> "pbaylies/stylegan2"
"rolux/stylegan2encoder" -> "jacobhallberg/pytorch_stylegan_encoder"
"rolux/stylegan2encoder" -> "nolan-dev/GANInterface"
"rolux/stylegan2encoder" -> "a312863063/generators-with-stylegan2"
"rolux/stylegan2encoder" -> "ak9250/stylegan-art"
"rolux/stylegan2encoder" -> "nikhiltiru/stylegan2"
"rolux/stylegan2encoder" -> "genforce/interfacegan"
"rolux/stylegan2encoder" -> "justinpinkney/awesome-pretrained-stylegan2"
"clovaai/lffont" -> "clovaai/dmfont"
"clovaai/lffont" -> "clovaai/mxfont"
"clovaai/lffont" -> "clovaai/fewshot-font-generation"
"clovaai/lffont" -> "ecnuycxie/DG-Font"
"clovaai/lffont" -> "tlc121/FsFont"
"pacifinapacific/StyleGAN_LatentEditor" -> "woctezuma/stylegan2-projecting-images"
"pacifinapacific/StyleGAN_LatentEditor" -> "zaidbhat1234/Image2StyleGAN"
"pacifinapacific/StyleGAN_LatentEditor" -> "lernapparat/lernapparat"
"pacifinapacific/StyleGAN_LatentEditor" -> "spiorf/stylegan-encoder"
"pacifinapacific/StyleGAN_LatentEditor" -> "genforce/idinvert"
"pacifinapacific/StyleGAN_LatentEditor" -> "bryandlee/stylegan2-encoder-pytorch"
"pacifinapacific/StyleGAN_LatentEditor" -> "genforce/interfacegan"
"pacifinapacific/StyleGAN_LatentEditor" -> "Puzer/stylegan-encoder"
"pacifinapacific/StyleGAN_LatentEditor" -> "jacobhallberg/pytorch_stylegan_encoder"
"pacifinapacific/StyleGAN_LatentEditor" -> "pender/stylegan-encoder"
"pacifinapacific/StyleGAN_LatentEditor" -> "omertov/encoder4editing"
"pacifinapacific/StyleGAN_LatentEditor" -> "genforce/idinvert_pytorch"
"pacifinapacific/StyleGAN_LatentEditor" -> "Bartzi/one-model-to-reconstruct-them-all"
"dorarad/gansformer" -> "VITA-Group/TransGAN"
"dorarad/gansformer" -> "autonomousvision/giraffe" ["e"=1]
"dorarad/gansformer" -> "autonomousvision/projected_gan"
"dorarad/gansformer" -> "rosinality/alias-free-gan-pytorch"
"dorarad/gansformer" -> "GaParmar/clean-fid"
"dorarad/gansformer" -> "mit-han-lab/data-efficient-gans"
"dorarad/gansformer" -> "rosinality/stylegan2-pytorch"
"dorarad/gansformer" -> "CompVis/taming-transformers" ["e"=1]
"dorarad/gansformer" -> "NVlabs/alias-free-gan"
"dorarad/gansformer" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"dorarad/gansformer" -> "mit-han-lab/anycost-gan"
"dorarad/gansformer" -> "rinongal/StyleGAN-nada"
"dorarad/gansformer" -> "NVlabs/stylegan2-ada-pytorch"
"dorarad/gansformer" -> "POSTECH-CVLab/PyTorch-StudioGAN"
"dorarad/gansformer" -> "autonomousvision/stylegan_xl"
"google/neural-light-transport" -> "zhhoper/DPR"
"google/neural-light-transport" -> "andrewhou1/Shadow-Mask-Face-Relighting"
"google/neural-light-transport" -> "LansburyCH/relightable-nr"
"google/neural-light-transport" -> "stevliu/editnerf" ["e"=1]
"google/neural-light-transport" -> "google/nerfactor" ["e"=1]
"google/neural-light-transport" -> "google/portrait-shadow-manipulation"
"google/neural-light-transport" -> "ZoneLikeWonderland/Neural-Video-Portrait-Relighting-in-Real-time-via-Consistency-Modeling"
"google/neural-light-transport" -> "ken2576/nelf"
"google/neural-light-transport" -> "WangLiwen1994/DeepRelight"
"google/neural-light-transport" -> "majedelhelou/VIDIT"
"google/neural-light-transport" -> "senguptaumd/SfSNet" ["e"=1]
"google/neural-light-transport" -> "Kai-46/PhySG" ["e"=1]
"rosinality/alias-free-gan-pytorch" -> "NVlabs/alias-free-gan"
"rosinality/alias-free-gan-pytorch" -> "danielroich/PTI"
"rosinality/alias-free-gan-pytorch" -> "yuval-alaluf/stylegan3-editing"
"rosinality/alias-free-gan-pytorch" -> "nupurkmr9/vision-aided-gan"
"rosinality/alias-free-gan-pytorch" -> "chail/anyres-gan"
"rosinality/alias-free-gan-pytorch" -> "self-distilled-stylegan/self-distilled-internet-photos"
"rosinality/alias-free-gan-pytorch" -> "dvschultz/stylegan2-ada-pytorch"
"rosinality/alias-free-gan-pytorch" -> "omertov/encoder4editing"
"rosinality/alias-free-gan-pytorch" -> "autonomousvision/stylegan_xl"
"rosinality/alias-free-gan-pytorch" -> "weihaox/awesome-gan-inversion"
"rosinality/alias-free-gan-pytorch" -> "rosinality/stylegan2-pytorch"
"rosinality/alias-free-gan-pytorch" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"rosinality/alias-free-gan-pytorch" -> "yuval-alaluf/restyle-encoder"
"rosinality/alias-free-gan-pytorch" -> "rinongal/StyleGAN-nada"
"rosinality/alias-free-gan-pytorch" -> "OmerKafri/StyleFusion"
"Vandermode/ERRNet" -> "ceciliavision/perceptual-reflection-removal"
"Vandermode/ERRNet" -> "JHL-HUST/IBCLN"
"Vandermode/ERRNet" -> "fqnchina/CEILNet"
"Vandermode/ERRNet" -> "csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity"
"Vandermode/ERRNet" -> "yangj1e/bdn-refremv"
"Vandermode/ERRNet" -> "NVlabs/ReflectNet"
"Vandermode/ERRNet" -> "ChenyangLEI/flash-reflection-removal"
"Vandermode/ERRNet" -> "wanrenjie/CoRRN"
"Vandermode/ERRNet" -> "ChenyangLEI/polarization-reflection-removal"
"Vandermode/ERRNet" -> "sg-nm/Operation-wise-attention-network" ["e"=1]
"Vandermode/ERRNet" -> "liyucs/RAGNet"
"buriburisuri/timeseries_gan" -> "buriburisuri/supervised_infogan"
"buriburisuri/timeseries_gan" -> "ratschlab/RGAN" ["e"=1]
"buriburisuri/timeseries_gan" -> "buriburisuri/ebgan"
"buriburisuri/timeseries_gan" -> "numancelik34/TimeSeries-GAN" ["e"=1]
"buriburisuri/timeseries_gan" -> "buriburisuri/sugartensor"
"buriburisuri/timeseries_gan" -> "gioramponi/GAN_Time_Series" ["e"=1]
"buriburisuri/timeseries_gan" -> "jeanjerome/semisupervised_timeseries_infogan"
"buriburisuri/timeseries_gan" -> "buriburisuri/ac-gan"
"buriburisuri/timeseries_gan" -> "proceduralia/pytorch-GAN-timeseries" ["e"=1]
"buriburisuri/timeseries_gan" -> "buriburisuri/SRGAN" ["e"=1]
"buriburisuri/timeseries_gan" -> "SongDark/timeseries_infogan"
"buriburisuri/timeseries_gan" -> "starhou/One-dimensional-GAN"
"floydhub/imagenet" -> "czs0x55aa/pytorch-chatbot"
"LynnHo/HD-CelebA-Cropper" -> "csmliu/STGAN"
"LynnHo/HD-CelebA-Cropper" -> "elvisyjlin/AttGAN-PyTorch"
"LynnHo/HD-CelebA-Cropper" -> "Prinsphield/ELEGANT"
"LynnHo/HD-CelebA-Cropper" -> "LynnHo/AttGAN-Tensorflow"
"LynnHo/HD-CelebA-Cropper" -> "willylulu/celeba-hq-modified"
"LynnHo/HD-CelebA-Cropper" -> "wdyin/GeoGAN"
"LynnHo/AttGAN-Tensorflow" -> "csmliu/STGAN"
"LynnHo/AttGAN-Tensorflow" -> "elvisyjlin/AttGAN-PyTorch"
"LynnHo/AttGAN-Tensorflow" -> "Prinsphield/ELEGANT"
"LynnHo/AttGAN-Tensorflow" -> "LynnHo/HD-CelebA-Cropper"
"LynnHo/AttGAN-Tensorflow" -> "bluestyle97/STGAN-pytorch"
"LynnHo/AttGAN-Tensorflow" -> "Guim3/IcGAN"
"LynnHo/AttGAN-Tensorflow" -> "facebookresearch/FaderNetworks"
"LynnHo/AttGAN-Tensorflow" -> "yunjey/stargan"
"LynnHo/AttGAN-Tensorflow" -> "switchablenorms/CelebAMask-HQ"
"LynnHo/AttGAN-Tensorflow" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"LynnHo/AttGAN-Tensorflow" -> "dawei6875797/Face-Aging-with-Identity-Preserved-Conditional-Generative-Adversarial-Networks" ["e"=1]
"LynnHo/AttGAN-Tensorflow" -> "ShenYujun/InterFaceGAN"
"LynnHo/AttGAN-Tensorflow" -> "run-youngjoo/SC-FEGAN"
"LynnHo/AttGAN-Tensorflow" -> "genforce/interfacegan"
"LynnHo/AttGAN-Tensorflow" -> "LynnHo/EigenGAN-Tensorflow"
"tzt101/MichiGAN" -> "dukebw/LOHO"
"tzt101/MichiGAN" -> "HyelinNAM/Hair-synthesis-using-GAN"
"tzt101/MichiGAN" -> "wty-ustc/HairCLIP"
"tzt101/MichiGAN" -> "ZPdesu/Barbershop"
"tzt101/MichiGAN" -> "ZPdesu/SEAN"
"tzt101/MichiGAN" -> "Azmarie/Hairstyle-Transfer"
"tzt101/MichiGAN" -> "ZPdesu/II2S"
"aisegmentcn/matting_human_datasets" -> "lizhengwei1992/Semantic_Human_Matting"
"aisegmentcn/matting_human_datasets" -> "poppinace/indexnet_matting"
"aisegmentcn/matting_human_datasets" -> "Yaoyi-Li/GCA-Matting"
"aisegmentcn/matting_human_datasets" -> "yunkezhang/FusionMatting"
"aisegmentcn/matting_human_datasets" -> "wukaoliu/CVPR2020-HAttMatting"
"aisegmentcn/matting_human_datasets" -> "dong-x16/PortraitNet"
"aisegmentcn/matting_human_datasets" -> "foamliu/Deep-Image-Matting-PyTorch"
"aisegmentcn/matting_human_datasets" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"aisegmentcn/matting_human_datasets" -> "foamliu/Deep-Image-Matting"
"aisegmentcn/matting_human_datasets" -> "yucornetto/MGMatting"
"aisegmentcn/matting_human_datasets" -> "hyperconnect/MMNet"
"aisegmentcn/matting_human_datasets" -> "huochaitiantang/pytorch-deep-image-matting"
"aisegmentcn/matting_human_datasets" -> "hqqxyy/Context-Aware-Matting"
"aisegmentcn/matting_human_datasets" -> "MarcoForte/FBA_Matting"
"aisegmentcn/matting_human_datasets" -> "tsing90/pytorch_semantic_human_matting"
"nowsyn/DVM" -> "yunkezhang/TCVOM"
"osh/KerasGAN" -> "bstriner/keras-adversarial"
"osh/KerasGAN" -> "phreeza/keras-GAN"
"osh/KerasGAN" -> "jacobgil/keras-dcgan"
"osh/KerasGAN" -> "wayaai/SimGAN"
"osh/KerasGAN" -> "Zackory/Keras-MNIST-GAN"
"osh/KerasGAN" -> "datalogai/recurrentshop" ["e"=1]
"osh/KerasGAN" -> "osh/kerlym" ["e"=1]
"osh/KerasGAN" -> "heuritech/convnets-keras" ["e"=1]
"osh/KerasGAN" -> "farizrahman4u/keras-contrib" ["e"=1]
"osh/KerasGAN" -> "jonbruner/generative-adversarial-networks"
"osh/KerasGAN" -> "matthiasplappert/keras-rl" ["e"=1]
"osh/KerasGAN" -> "roatienza/Deep-Learning-Experiments"
"osh/KerasGAN" -> "tdeboissiere/DeepLearningImplementations"
"osh/KerasGAN" -> "adeshpande3/Generative-Adversarial-Networks" ["e"=1]
"osh/KerasGAN" -> "carpedm20/BEGAN-tensorflow"
"janesjanes/Pytorch-TextureGAN" -> "Cuiyirui/TextureGAN"
"brain-research/self-attention-gan" -> "heykeetae/Self-Attention-GAN"
"brain-research/self-attention-gan" -> "taki0112/Self-Attention-GAN-Tensorflow"
"brain-research/self-attention-gan" -> "pfnet-research/sngan_projection"
"brain-research/self-attention-gan" -> "bioinf-jku/TTUR"
"brain-research/self-attention-gan" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"brain-research/self-attention-gan" -> "ajbrock/BigGAN-PyTorch"
"brain-research/self-attention-gan" -> "google/compare_gan"
"brain-research/self-attention-gan" -> "voletiv/self-attention-GAN-pytorch"
"brain-research/self-attention-gan" -> "LMescheder/GAN_stability"
"brain-research/self-attention-gan" -> "HsinYingLee/DRIT"
"brain-research/self-attention-gan" -> "igul222/improved_wgan_training"
"brain-research/self-attention-gan" -> "mseitzer/pytorch-fid"
"brain-research/self-attention-gan" -> "openai/improved-gan"
"brain-research/self-attention-gan" -> "junyanz/BicycleGAN"
"brain-research/self-attention-gan" -> "tkarras/progressive_growing_of_gans"
"simontomaskarlsson/CycleGAN-Keras" -> "simontomaskarlsson/GAN-MRI" ["e"=1]
"simontomaskarlsson/CycleGAN-Keras" -> "MingwangLin/cyclegan-keras"
"simontomaskarlsson/CycleGAN-Keras" -> "LynnHo/CycleGAN-Tensorflow-2"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "nashory/pggan-pytorch"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "ptrblck/prog_gans_pytorch_inference"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "zhangqianhui/progressive_growing_of_gans_tensorflow"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "tkarras/progressive_growing_of_gans"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "sbarratt/inception-score-pytorch"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "LMescheder/GAN_stability"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "caogang/wgan-gp"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "pfnet-research/sngan_projection"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "tomguluson92/StyleGAN_PyTorch"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "heykeetae/Self-Attention-GAN"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "godisboy/SN-GAN"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "HsinYingLee/DRIT"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "bioinf-jku/TTUR"
"github-pengge/PyTorch-progressive_growing_of_gans" -> "facebookresearch/pytorch_GAN_zoo"
"pfnet-research/tgan" -> "pfnet-research/tgan2"
"pfnet-research/tgan" -> "DLHacks/mocogan"
"FriedRonaldo/SinGAN" -> "tamarott/SinGAN"
"FriedRonaldo/SinGAN" -> "FriedRonaldo/GANs"
"FriedRonaldo/SinGAN" -> "FriedRonaldo/tunit"
"FriedRonaldo/SinGAN" -> "FriedRonaldo/EditableGAN"
"FriedRonaldo/SinGAN" -> "FriedRonaldo/PsyNet"
"XingangPan/deep-generative-prior" -> "genforce/mganprior"
"XingangPan/deep-generative-prior" -> "kam1107/RealnessGAN"
"XingangPan/deep-generative-prior" -> "sefibk/KernelGAN" ["e"=1]
"XingangPan/deep-generative-prior" -> "JWSoh/MZSR" ["e"=1]
"XingangPan/deep-generative-prior" -> "andreas128/SRFlow" ["e"=1]
"XingangPan/deep-generative-prior" -> "cszn/USRNet" ["e"=1]
"XingangPan/deep-generative-prior" -> "ZPdesu/SEAN"
"XingangPan/deep-generative-prior" -> "assafshocher/InGAN"
"XingangPan/deep-generative-prior" -> "clovaai/cutblur" ["e"=1]
"XingangPan/deep-generative-prior" -> "genforce/idinvert"
"XingangPan/deep-generative-prior" -> "csxmli2016/ASFFNet" ["e"=1]
"XingangPan/deep-generative-prior" -> "XHWXD/DBSN" ["e"=1]
"XingangPan/deep-generative-prior" -> "csmliu/AdaDSR" ["e"=1]
"XingangPan/deep-generative-prior" -> "bahjat-kawar/ddrm" ["e"=1]
"XingangPan/deep-generative-prior" -> "swz30/MIRNet" ["e"=1]
"mit-han-lab/gan-compression" -> "mit-han-lab/data-efficient-gans"
"mit-han-lab/gan-compression" -> "mit-han-lab/once-for-all" ["e"=1]
"mit-han-lab/gan-compression" -> "EvgenyKashin/stylegan2-distillation"
"mit-han-lab/gan-compression" -> "bytedance/OMGD"
"mit-han-lab/gan-compression" -> "snap-research/CAT"
"mit-han-lab/gan-compression" -> "bes-dev/MobileStyleGAN.pytorch"
"mit-han-lab/gan-compression" -> "clovaai/stargan-v2"
"mit-han-lab/gan-compression" -> "rosinality/stylegan2-pytorch"
"mit-han-lab/gan-compression" -> "switchablenorms/CelebAMask-HQ"
"mit-han-lab/gan-compression" -> "ZPdesu/SEAN"
"mit-han-lab/gan-compression" -> "mit-han-lab/anycost-gan"
"mit-han-lab/gan-compression" -> "NVlabs/FUNIT"
"mit-han-lab/gan-compression" -> "VITA-Group/GAN-Slimming"
"mit-han-lab/gan-compression" -> "huawei-noah/GAN-pruning" ["e"=1]
"mit-han-lab/gan-compression" -> "davidbau/rewriting"
"tohinz/ConSinGAN" -> "assafshocher/InGAN"
"tohinz/ConSinGAN" -> "linjx-ustc1106/TuiGAN-PyTorch"
"tohinz/ConSinGAN" -> "alpc91/NICE-GAN-pytorch"
"tohinz/ConSinGAN" -> "tamarott/SinGAN"
"tohinz/ConSinGAN" -> "XingangPan/deep-generative-prior"
"tohinz/ConSinGAN" -> "kam1107/RealnessGAN"
"tohinz/ConSinGAN" -> "genforce/mganprior"
"tohinz/ConSinGAN" -> "ali-design/gan_steerability"
"tohinz/ConSinGAN" -> "chail/anyres-gan"
"tohinz/ConSinGAN" -> "mit-han-lab/data-efficient-gans"
"tohinz/ConSinGAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"tohinz/ConSinGAN" -> "kligvasser/SinGAN"
"buriburisuri/ac-gan" -> "buriburisuri/supervised_infogan"
"buriburisuri/ac-gan" -> "buriburisuri/ebgan"
"buriburisuri/ac-gan" -> "lukedeo/keras-acgan"
"buriburisuri/ac-gan" -> "buriburisuri/sugartensor"
"buriburisuri/ac-gan" -> "buriburisuri/SRGAN" ["e"=1]
"buriburisuri/ac-gan" -> "openai/improved-gan"
"buriburisuri/ac-gan" -> "Zardinality/WGAN-tensorflow"
"buriburisuri/ac-gan" -> "buriburisuri/timeseries_gan"
"buriburisuri/ac-gan" -> "openai/InfoGAN"
"buriburisuri/ac-gan" -> "yenchenlin/pix2pix-tensorflow"
"buriburisuri/ac-gan" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"buriburisuri/ac-gan" -> "Guim3/IcGAN"
"buriburisuri/ac-gan" -> "gitlimlab/SSGAN-Tensorflow"
"buriburisuri/ac-gan" -> "guojunq/lsgan"
"buriburisuri/ac-gan" -> "Evolving-AI-Lab/ppgn"
"soumith/dcgan.torch" -> "Newmu/dcgan_code"
"soumith/dcgan.torch" -> "reedscot/icml2016"
"soumith/dcgan.torch" -> "robbiebarrat/art-DCGAN"
"soumith/dcgan.torch" -> "carpedm20/DCGAN-tensorflow"
"soumith/dcgan.torch" -> "martinarjovsky/WassersteinGAN"
"soumith/dcgan.torch" -> "openai/improved-gan"
"soumith/dcgan.torch" -> "facebook/eyescream"
"soumith/dcgan.torch" -> "facebook/fb.resnet.torch" ["e"=1]
"soumith/dcgan.torch" -> "torch/nn" ["e"=1]
"soumith/dcgan.torch" -> "mattya/chainer-DCGAN" ["e"=1]
"soumith/dcgan.torch" -> "skaae/torch-gan" ["e"=1]
"soumith/dcgan.torch" -> "carpedm20/awesome-torch" ["e"=1]
"soumith/dcgan.torch" -> "y0ast/VAE-Torch" ["e"=1]
"soumith/dcgan.torch" -> "soumith/imagenet-multiGPU.torch" ["e"=1]
"soumith/dcgan.torch" -> "igul222/improved_wgan_training"
"zsdonghao/text-to-image" -> "reedscot/icml2016"
"zsdonghao/text-to-image" -> "aelnouby/Text-to-Image-Synthesis"
"zsdonghao/text-to-image" -> "paarthneekhara/text-to-image"
"zsdonghao/text-to-image" -> "hanzhanggit/StackGAN-v2"
"zsdonghao/text-to-image" -> "taoxugit/AttnGAN"
"zsdonghao/text-to-image" -> "hanzhanggit/StackGAN"
"zsdonghao/text-to-image" -> "reedscot/cvpr2016"
"zsdonghao/text-to-image" -> "tensorlayer/dcgan"
"zsdonghao/text-to-image" -> "hanzhanggit/StackGAN-Pytorch"
"zsdonghao/text-to-image" -> "chen0040/keras-text-to-image"
"zsdonghao/text-to-image" -> "crisbodnar/text-to-image"
"zsdonghao/text-to-image" -> "reedscot/nips2016"
"zsdonghao/text-to-image" -> "mansimov/text2image"
"zsdonghao/text-to-image" -> "llSourcell/how_to_convert_text_to_images"
"zsdonghao/text-to-image" -> "dashayushman/TAC-GAN"
"csmliu/STGAN" -> "LynnHo/AttGAN-Tensorflow"
"csmliu/STGAN" -> "bluestyle97/STGAN-pytorch"
"csmliu/STGAN" -> "elvisyjlin/AttGAN-PyTorch"
"csmliu/STGAN" -> "Prinsphield/ELEGANT"
"csmliu/STGAN" -> "LynnHo/HD-CelebA-Cropper"
"csmliu/STGAN" -> "wdyin/GeoGAN"
"csmliu/STGAN" -> "cientgu/Mask_Guided_Portrait_Editing" ["e"=1]
"csmliu/STGAN" -> "ShenYujun/InterFaceGAN"
"csmliu/STGAN" -> "switchablenorms/CelebAMask-HQ"
"csmliu/STGAN" -> "chenhsuanlin/spatial-transformer-GAN" ["e"=1]
"csmliu/STGAN" -> "facebookresearch/FaderNetworks"
"csmliu/STGAN" -> "bioinf-jku/TTUR"
"csmliu/STGAN" -> "ZPdesu/SEAN"
"csmliu/STGAN" -> "tzt101/MichiGAN"
"csmliu/STGAN" -> "genforce/interfacegan"
"dongheehand/MemoPainter-PyTorch" -> "ccyyatnet/COLORGAN"
"csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity" -> "wanrenjie/CoRRN"
"csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity" -> "ryo-abiko/GCNet"
"IIGROUP/TediGAN" -> "omertov/encoder4editing"
"IIGROUP/TediGAN" -> "IIGROUP/Multi-Modal-CelebA-HQ-Dataset"
"IIGROUP/TediGAN" -> "naver-ai/StyleMapGAN"
"IIGROUP/TediGAN" -> "weihaox/awesome-gan-inversion"
"IIGROUP/TediGAN" -> "tobran/DF-GAN"
"IIGROUP/TediGAN" -> "betterze/StyleSpace"
"IIGROUP/TediGAN" -> "YotamNitzan/ID-disentanglement"
"IIGROUP/TediGAN" -> "danielroich/PTI"
"IIGROUP/TediGAN" -> "mrlibw/ControlGAN"
"IIGROUP/TediGAN" -> "mit-han-lab/anycost-gan"
"IIGROUP/TediGAN" -> "cripac-sjx/SEA-T2F"
"IIGROUP/TediGAN" -> "genforce/idinvert_pytorch"
"wpeebles/G.pt" -> "PeterWang512/GANWarping"
"wpeebles/G.pt" -> "chail/anyres-gan"
"yuval-alaluf/hyperstyle" -> "omertov/encoder4editing"
"yuval-alaluf/hyperstyle" -> "yuval-alaluf/stylegan3-editing"
"yuval-alaluf/hyperstyle" -> "danielroich/PTI"
"yuval-alaluf/hyperstyle" -> "yuval-alaluf/restyle-encoder"
"yuval-alaluf/hyperstyle" -> "weihaox/awesome-gan-inversion"
"yuval-alaluf/hyperstyle" -> "rinongal/StyleGAN-nada"
"yuval-alaluf/hyperstyle" -> "Tengfei-Wang/HFGI"
"yuval-alaluf/hyperstyle" -> "rotemtzaban/STIT"
"yuval-alaluf/hyperstyle" -> "eladrich/pixel2style2pixel"
"yuval-alaluf/hyperstyle" -> "stylegan-human/StyleGAN-Human"
"yuval-alaluf/hyperstyle" -> "mchong6/SOAT"
"yuval-alaluf/hyperstyle" -> "rosinality/stylegan2-pytorch"
"yuval-alaluf/hyperstyle" -> "yuval-alaluf/SAM"
"yuval-alaluf/hyperstyle" -> "williamyang1991/DualStyleGAN"
"yuval-alaluf/hyperstyle" -> "Qiulin-W/SAFA" ["e"=1]
"genforce/genforce" -> "genforce/idinvert_pytorch"
"genforce/genforce" -> "genforce/sefa"
"genforce/genforce" -> "genforce/interfacegan"
"genforce/genforce" -> "genforce/idinvert"
"genforce/genforce" -> "weihaox/awesome-gan-inversion"
"genforce/genforce" -> "rosinality/stylegan2-pytorch"
"genforce/genforce" -> "mit-han-lab/data-efficient-gans"
"genforce/genforce" -> "mit-han-lab/anycost-gan"
"genforce/genforce" -> "omertov/encoder4editing"
"genforce/genforce" -> "eladrich/pixel2style2pixel"
"genforce/genforce" -> "davidbau/rewriting"
"genforce/genforce" -> "weihaox/awesome-image-translation"
"genforce/genforce" -> "harskish/ganspace"
"genforce/genforce" -> "GaParmar/clean-fid"
"genforce/genforce" -> "NVlabs/imaginaire"
"omertov/encoder4editing" -> "danielroich/PTI"
"omertov/encoder4editing" -> "yuval-alaluf/restyle-encoder"
"omertov/encoder4editing" -> "weihaox/awesome-gan-inversion"
"omertov/encoder4editing" -> "yuval-alaluf/hyperstyle"
"omertov/encoder4editing" -> "eladrich/pixel2style2pixel"
"omertov/encoder4editing" -> "yuval-alaluf/stylegan3-editing"
"omertov/encoder4editing" -> "betterze/StyleSpace"
"omertov/encoder4editing" -> "genforce/interfacegan"
"omertov/encoder4editing" -> "rosinality/stylegan2-pytorch"
"omertov/encoder4editing" -> "Tengfei-Wang/HFGI"
"omertov/encoder4editing" -> "wty-ustc/HairCLIP"
"omertov/encoder4editing" -> "naver-ai/StyleMapGAN"
"omertov/encoder4editing" -> "orpatashnik/StyleCLIP"
"omertov/encoder4editing" -> "rinongal/StyleGAN-nada"
"omertov/encoder4editing" -> "mit-han-lab/anycost-gan"
"woctezuma/stylegan2-projecting-images" -> "pacifinapacific/StyleGAN_LatentEditor"
"woctezuma/stylegan2-projecting-images" -> "bryandlee/stylegan2-encoder-pytorch"
"woctezuma/stylegan2-projecting-images" -> "betterze/StyleSpace"
"woctezuma/stylegan2-projecting-images" -> "genforce/idinvert_pytorch"
"woctezuma/stylegan2-projecting-images" -> "omertov/encoder4editing"
"woctezuma/stylegan2-projecting-images" -> "mit-han-lab/anycost-gan"
"woctezuma/stylegan2-projecting-images" -> "rolux/stylegan2encoder"
"woctezuma/stylegan2-projecting-images" -> "justinpinkney/awesome-pretrained-stylegan2"
"woctezuma/stylegan2-projecting-images" -> "xrenaa/StyleSpace-pytorch"
"woctezuma/stylegan2-projecting-images" -> "wty-ustc/StyleGAN-Inversion-Baseline"
"woctezuma/stylegan2-projecting-images" -> "happy-jihye/Cartoon-StyleGAN"
"woctezuma/stylegan2-projecting-images" -> "genforce/idinvert"
"woctezuma/stylegan2-projecting-images" -> "tg-bomze/StyleGAN2-Face-Modificator"
"woctezuma/stylegan2-projecting-images" -> "EvgenyKashin/stylegan2-distillation"
"woctezuma/stylegan2-projecting-images" -> "anvoynov/GANLatentDiscovery"
"SiskonEmilia/StyleGAN-PyTorch" -> "caffeinism/StyleGAN-pytorch"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "pfnet-research/sngan_projection"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "godisboy/SN-GAN"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "heykeetae/Self-Attention-GAN"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "caogang/wgan-gp"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "mseitzer/pytorch-fid"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "sbarratt/inception-score-pytorch"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "bioinf-jku/TTUR"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "brain-research/self-attention-gan"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "LMescheder/GAN_stability"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "znxlwm/pytorch-generative-model-collections"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "google/compare_gan"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "AlexiaJM/RelativisticGAN"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "nashory/pggan-pytorch"
"christiancosgrove/pytorch-spectral-normalization-gan" -> "ajbrock/BigGAN-PyTorch"
"cvondrick/videogan" -> "dyelax/Adversarial_Video_Generation"
"cvondrick/videogan" -> "reedscot/nips2016"
"cvondrick/videogan" -> "GV1028/videogan"
"cvondrick/videogan" -> "facebook/eyescream"
"cvondrick/videogan" -> "reedscot/icml2016"
"cvondrick/videogan" -> "batsa003/videogan"
"cvondrick/videogan" -> "sergeytulyakov/mocogan"
"cvondrick/videogan" -> "emansim/text2image"
"cvondrick/videogan" -> "coupriec/VideoPredictionICLR2016"
"cvondrick/videogan" -> "cvondrick/torch-starter"
"cvondrick/videogan" -> "carpedm20/BEGAN-tensorflow"
"cvondrick/videogan" -> "skaae/torch-gan" ["e"=1]
"cvondrick/videogan" -> "bernhard2202/improved-video-gan"
"cvondrick/videogan" -> "qassemoquab/stnbhwd" ["e"=1]
"cvondrick/videogan" -> "y0ast/VAE-Torch" ["e"=1]
"rubenvillegas/icml2017hierchvid" -> "brain-research/long-term-video-prediction-without-supervision"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/GestureGAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/AttentionGAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/XingGAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/LGGAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/C2GAN"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"Ha0Tang/SelectionGAN" -> "Ha0Tang/DAGAN"
"Ha0Tang/SelectionGAN" -> "HelenMao/MSGAN"
"Ha0Tang/SelectionGAN" -> "tengteng95/Pose-Transfer" ["e"=1]
"Ha0Tang/SelectionGAN" -> "kregmi/cross-view-image-synthesis" ["e"=1]
"Ha0Tang/SelectionGAN" -> "vt-vl-lab/Guided-pix2pix"
"Ha0Tang/SelectionGAN" -> "WonwoongCho/GDWCT"
"Ha0Tang/SelectionGAN" -> "aimagelab/art2real"
"Ha0Tang/SelectionGAN" -> "lzhbrian/image-to-image-papers"
"AlexHex7/SimGAN_pytorch" -> "mjdietzx/SimGAN"
"AlexHex7/SimGAN_pytorch" -> "dmerrick520/Learning-from-Simulated-and-Unsupervised-Images-through-Adversarial-Training-SimGAN-PyTorch"
"Ha0Tang/AttentionGAN" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/AttentionGAN" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"Ha0Tang/AttentionGAN" -> "alpc91/NICE-GAN-pytorch"
"Ha0Tang/AttentionGAN" -> "Ha0Tang/GestureGAN"
"Ha0Tang/AttentionGAN" -> "alokwhitewolf/Pytorch-Attention-Guided-CycleGAN"
"Ha0Tang/AttentionGAN" -> "HsinYingLee/DRIT"
"Ha0Tang/AttentionGAN" -> "weihaox/awesome-image-translation"
"Ha0Tang/AttentionGAN" -> "taesungp/contrastive-unpaired-translation"
"Ha0Tang/AttentionGAN" -> "lzhbrian/image-to-image-papers"
"Ha0Tang/AttentionGAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"Ha0Tang/AttentionGAN" -> "hyperplane-lab/ACL-GAN"
"Ha0Tang/AttentionGAN" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/AttentionGAN" -> "microsoft/CoCosNet" ["e"=1]
"Ha0Tang/AttentionGAN" -> "Ha0Tang/XingGAN"
"Ha0Tang/AttentionGAN" -> "JunlinHan/DCLGAN" ["e"=1]
"ray075hl/DeepPhotoStyle_pytorch" -> "yagudin/PyTorch-deep-photo-styletransfer"
"torchgan/torchgan" -> "ajbrock/BigGAN-PyTorch"
"torchgan/torchgan" -> "facebookresearch/pytorch_GAN_zoo"
"torchgan/torchgan" -> "google/compare_gan"
"torchgan/torchgan" -> "kwotsin/mimicry"
"torchgan/torchgan" -> "heykeetae/Self-Attention-GAN"
"torchgan/torchgan" -> "pfnet-research/sngan_projection"
"torchgan/torchgan" -> "mseitzer/pytorch-fid"
"torchgan/torchgan" -> "znxlwm/pytorch-generative-model-collections"
"torchgan/torchgan" -> "LMescheder/GAN_stability"
"torchgan/torchgan" -> "AaronLeong/BigGAN-pytorch"
"torchgan/torchgan" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"torchgan/torchgan" -> "caogang/wgan-gp"
"torchgan/torchgan" -> "CSAILVision/gandissect"
"torchgan/torchgan" -> "vacancy/Synchronized-BatchNorm-PyTorch" ["e"=1]
"torchgan/torchgan" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"a312863063/seeprettyface-generator-star" -> "a312863063/seeprettyface-generator-model"
"a312863063/seeprettyface-generator-star" -> "a312863063/seeprettyface-generator-babies"
"a312863063/seeprettyface-generator-star" -> "a312863063/seeprettyface-generator-yellow"
"a312863063/seeprettyface-generator-star" -> "a312863063/seeprettyface-dataset"
"wtliao/text2image" -> "tobran/DF-GAN"
"wtliao/text2image" -> "senmaoy/Recurrent-Affine-Transformation-for-Text-to-image-Synthesis"
"wtliao/text2image" -> "MinfengZhu/DM-GAN"
"Azmarie/Hairstyle-Transfer" -> "dukebw/LOHO"
"Azmarie/Hairstyle-Transfer" -> "tzt101/MichiGAN"
"genforce/interfacegan" -> "omertov/encoder4editing"
"genforce/interfacegan" -> "genforce/idinvert"
"genforce/interfacegan" -> "rosinality/stylegan2-pytorch"
"genforce/interfacegan" -> "genforce/sefa"
"genforce/interfacegan" -> "genforce/idinvert_pytorch"
"genforce/interfacegan" -> "switchablenorms/CelebAMask-HQ"
"genforce/interfacegan" -> "danielroich/PTI"
"genforce/interfacegan" -> "genforce/genforce"
"genforce/interfacegan" -> "eladrich/pixel2style2pixel"
"genforce/interfacegan" -> "weihaox/awesome-gan-inversion"
"genforce/interfacegan" -> "Puzer/stylegan-encoder"
"genforce/interfacegan" -> "betterze/StyleSpace"
"genforce/interfacegan" -> "zllrunning/face-parsing.PyTorch"
"genforce/interfacegan" -> "jacobhallberg/pytorch_stylegan_encoder"
"genforce/interfacegan" -> "yuval-alaluf/restyle-encoder"
"akanimax/pro_gan_pytorch" -> "nashory/pggan-pytorch"
"akanimax/pro_gan_pytorch" -> "akanimax/pro_gan_pytorch-examples"
"akanimax/pro_gan_pytorch" -> "akanimax/BMSG-GAN"
"akanimax/pro_gan_pytorch" -> "lernapparat/lernapparat"
"akanimax/pro_gan_pytorch" -> "rosinality/style-based-gan-pytorch"
"akanimax/pro_gan_pytorch" -> "tomguluson92/StyleGAN_PyTorch"
"akanimax/pro_gan_pytorch" -> "pbaylies/stylegan-encoder"
"akanimax/pro_gan_pytorch" -> "tomguluson92/StyleGAN2_PyTorch"
"akanimax/pro_gan_pytorch" -> "ptrblck/prog_gans_pytorch_inference"
"akanimax/pro_gan_pytorch" -> "akanimax/T2F"
"akanimax/pro_gan_pytorch" -> "facebookresearch/pytorch_GAN_zoo"
"akanimax/pro_gan_pytorch" -> "akanimax/msg-stylegan-tf"
"akanimax/pro_gan_pytorch" -> "huangzh13/StyleGAN.pytorch"
"akanimax/pro_gan_pytorch" -> "akanimax/BBMSG-GAN"
"akanimax/pro_gan_pytorch" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"PacktPublishing/Generative-Adversarial-Networks-Projects" -> "PacktPublishing/Generative-Adversarial-Networks-Cookbook"
"PacktPublishing/Generative-Adversarial-Networks-Projects" -> "PacktPublishing/Hands-On-Generative-Adversarial-Networks-with-Keras"
"PacktPublishing/Generative-Adversarial-Networks-Projects" -> "PacktPublishing/Learning-Generative-Adversarial-Networks"
"JizhiziLi/AIM" -> "JizhiziLi/P3M"
"JizhiziLi/AIM" -> "JizhiziLi/GFM"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"JizhiziLi/AIM" -> "JizhiziLi/RIM"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTAE-VSA"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTAE-Transformer"
"JizhiziLi/AIM" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTDet"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"JizhiziLi/AIM" -> "ViTAE-Transformer/ViTPose"
"JizhiziLi/AIM" -> "nowsyn/SIM"
"JizhiziLi/AIM" -> "yucornetto/MGMatting"
"JizhiziLi/AIM" -> "wchstrife/Awesome-Image-Matting"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"JizhiziLi/P3M" -> "JizhiziLi/RIM"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTAE-VSA"
"JizhiziLi/P3M" -> "JizhiziLi/GFM"
"JizhiziLi/P3M" -> "JizhiziLi/AIM"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTAE-Transformer"
"JizhiziLi/P3M" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTDet"
"JizhiziLi/P3M" -> "ViTAE-Transformer/ViTPose"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTAE-VSA"
"JizhiziLi/RIM" -> "JizhiziLi/P3M"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTAE-Transformer"
"JizhiziLi/RIM" -> "JizhiziLi/AIM"
"JizhiziLi/RIM" -> "JizhiziLi/GFM"
"JizhiziLi/RIM" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTDet"
"JizhiziLi/RIM" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "JizhiziLi/RIM"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "JizhiziLi/P3M"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "JizhiziLi/AIM"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "JizhiziLi/GFM"
"ViTAE-Transformer/Remote-Sensing-RVSA" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/ViTAE-Transformer" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTAE-Transformer" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTAE-Transformer" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTAE-Transformer" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTAE-Transformer" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/ViTAE-Transformer-Matting" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" -> "WangLibo1995/GeoSeg" ["e"=1]
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/ViTAE-VSA" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTAE-VSA" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/ViTAE-VSA" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTAE-VSA" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTAE-VSA" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/ViTDet" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTDet" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTDet" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTDet" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTDet" -> "ViTAE-Transformer/ViTPose"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/ViTAE-Transformer"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/ViTAE-VSA"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"ViTAE-Transformer/ViTPose" -> "JizhiziLi/P3M"
"ViTAE-Transformer/ViTPose" -> "JizhiziLi/RIM"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/ViTDet"
"ViTAE-Transformer/ViTPose" -> "JizhiziLi/AIM"
"ViTAE-Transformer/ViTPose" -> "JizhiziLi/GFM"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/Remote-Sensing-RVSA"
"ViTAE-Transformer/ViTPose" -> "ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing"
"ViTAE-Transformer/ViTPose" -> "open-mmlab/mmhuman3d" ["e"=1]
"ViTAE-Transformer/ViTPose" -> "Vegetebird/MHFormer" ["e"=1]
"ViTAE-Transformer/ViTPose" -> "Jeff-sjtu/res-loglikelihood-regression" ["e"=1]
"ViTAE-Transformer/ViTPose" -> "open-mmlab/mmpose" ["e"=1]
"ViTAE-Transformer/ViTPose" -> "zczcwh/PoseFormer" ["e"=1]
"Zeleni9/pytorch-wgan" -> "caogang/wgan-gp"
"Zeleni9/pytorch-wgan" -> "jalola/improved-wgan-pytorch"
"Zeleni9/pytorch-wgan" -> "EmilienDupont/wgan-gp"
"Zeleni9/pytorch-wgan" -> "sbarratt/inception-score-pytorch"
"Zeleni9/pytorch-wgan" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Pytorch"
"Zeleni9/pytorch-wgan" -> "igul222/improved_wgan_training"
"Zeleni9/pytorch-wgan" -> "martinarjovsky/WassersteinGAN"
"Zeleni9/pytorch-wgan" -> "znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN"
"Zeleni9/pytorch-wgan" -> "Yangyangii/GAN-Tutorial"
"Zeleni9/pytorch-wgan" -> "chenyuntc/pytorch-GAN"
"Zeleni9/pytorch-wgan" -> "arturml/pytorch-wgan-gp"
"Zeleni9/pytorch-wgan" -> "facebookresearch/pytorch_GAN_zoo"
"Zeleni9/pytorch-wgan" -> "shayneobrien/generative-models"
"Zeleni9/pytorch-wgan" -> "nashory/pggan-pytorch"
"Zeleni9/pytorch-wgan" -> "godisboy/SN-GAN"
"ChenyangLEI/flash-reflection-removal" -> "ChenyangLEI/polarization-reflection-removal"
"ChenyangLEI/flash-reflection-removal" -> "Vandermode/ERRNet"
"ChenyangLEI/flash-reflection-removal" -> "JHL-HUST/IBCLN"
"ChenyangLEI/flash-reflection-removal" -> "q-zh/absorption"
"ChenyangLEI/flash-reflection-removal" -> "ceciliavision/perceptual-reflection-removal"
"ChenyangLEI/flash-reflection-removal" -> "zdlarr/Location-aware-SIRR"
"ChenyangLEI/flash-reflection-removal" -> "fqnchina/CEILNet"
"ChenyangLEI/flash-reflection-removal" -> "tsingqguo/exposure-fusion-shadow-removal"
"ChenyangLEI/flash-reflection-removal" -> "ChenyangLEI/awesome-reflection-removal"
"basilevh/image-outpainting" -> "dvlab-research/outpainting_srn"
"dvlab-research/outpainting_srn" -> "basilevh/image-outpainting"
"z-x-yang/NS-Outpainting" -> "dvlab-research/outpainting_srn"
"idealwhite/tdanet" -> "idealwhite/VLDeformer"
"Ben-Louis/Deep-Image-Analogy-PyTorch" -> "harveyslash/Deep-Image-Analogy-PyTorch"
"Ben-Louis/Deep-Image-Analogy-PyTorch" -> "msracver/Deep-Image-Analogy"
"msracver/Deep-Image-Analogy" -> "Ben-Louis/Deep-Image-Analogy-PyTorch"
"msracver/Deep-Image-Analogy" -> "chuanli11/CNNMRF"
"msracver/Deep-Image-Analogy" -> "ycjing/Neural-Style-Transfer-Papers"
"msracver/Deep-Image-Analogy" -> "Yijunmaverick/UniversalStyleTransfer"
"msracver/Deep-Image-Analogy" -> "rtqichen/style-swap"
"msracver/Deep-Image-Analogy" -> "harveyslash/Deep-Image-Analogy-PyTorch"
"msracver/Deep-Image-Analogy" -> "msracver/Deep-Exemplar-based-Colorization"
"msracver/Deep-Image-Analogy" -> "xunhuang1995/AdaIN-style"
"msracver/Deep-Image-Analogy" -> "LouieYang/deep-photo-styletransfer-tf"
"msracver/Deep-Image-Analogy" -> "awentzonline/image-analogies"
"msracver/Deep-Image-Analogy" -> "junyanz/BicycleGAN"
"msracver/Deep-Image-Analogy" -> "DmitryUlyanov/texture_nets"
"msracver/Deep-Image-Analogy" -> "martinbenson/deep-photo-styletransfer"
"msracver/Deep-Image-Analogy" -> "jcjohnson/fast-neural-style"
"msracver/Deep-Image-Analogy" -> "mingyuliutw/UNIT"
"ak9250/stylegan-art" -> "Puzer/stylegan-encoder"
"ak9250/stylegan-art" -> "rolux/stylegan2encoder"
"ak9250/stylegan-art" -> "pbaylies/stylegan-encoder"
"ak9250/stylegan-art" -> "ShenYujun/InterFaceGAN"
"ak9250/stylegan-art" -> "pbaylies/stylegan2"
"ak9250/stylegan-art" -> "justinpinkney/awesome-pretrained-stylegan2"
"ak9250/stylegan-art" -> "cs-chan/ArtGAN"
"ak9250/stylegan-art" -> "genekogan/stylegan"
"ak9250/stylegan-art" -> "sinanatra/DCGAN-Art-Tensorflow"
"ak9250/stylegan-art" -> "taki0112/StyleGAN-Tensorflow"
"ak9250/stylegan-art" -> "halcy/stylegan"
"ak9250/stylegan-art" -> "nolan-dev/stylegan_reimplementation"
"ak9250/stylegan-art" -> "aydao/stylegan2-surgery"
"ak9250/stylegan-art" -> "skyflynil/stylegan2"
"ak9250/stylegan-art" -> "taki0112/SPADE-Tensorflow"
"EndlessSora/DeceiveD" -> "VODKA312/IntroToSelf-control" ["e"=1]
"clovaai/ext_portrait_segmentation" -> "HYOJINPARK/ExtPortraitSeg"
"clovaai/ext_portrait_segmentation" -> "dong-x16/PortraitNet"
"clovaai/ext_portrait_segmentation" -> "anilsathyan7/Portrait-Segmentation"
"clovaai/ext_portrait_segmentation" -> "clovaai/c3_sinet"
"clovaai/ext_portrait_segmentation" -> "YexingWan/Fast-Portrait-Segmentation"
"clovaai/ext_portrait_segmentation" -> "hyperconnect/MMNet"
"clovaai/ext_portrait_segmentation" -> "aisegmentcn/matting_human_datasets"
"clovaai/ext_portrait_segmentation" -> "HymEric/Segmentation-Series-Chaos"
"clovaai/ext_portrait_segmentation" -> "lizhengwei1992/mobile_phone_human_matting"
"mingyuliutw/UNIT" -> "NVlabs/MUNIT"
"mingyuliutw/UNIT" -> "HsinYingLee/DRIT"
"mingyuliutw/UNIT" -> "junyanz/BicycleGAN"
"mingyuliutw/UNIT" -> "NVlabs/FUNIT"
"mingyuliutw/UNIT" -> "NVIDIA/pix2pixHD"
"mingyuliutw/UNIT" -> "yunjey/StarGAN"
"mingyuliutw/UNIT" -> "tkarras/progressive_growing_of_gans"
"mingyuliutw/UNIT" -> "mingyuliutw/CoGAN"
"mingyuliutw/UNIT" -> "igul222/improved_wgan_training"
"mingyuliutw/UNIT" -> "lzhbrian/image-to-image-papers"
"mingyuliutw/UNIT" -> "pfnet-research/sngan_projection"
"mingyuliutw/UNIT" -> "xunhuang1995/AdaIN-style"
"mingyuliutw/UNIT" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"mingyuliutw/UNIT" -> "sangwoomo/instagan"
"mingyuliutw/UNIT" -> "heykeetae/Self-Attention-GAN"
"tensorflow/gan" -> "google/compare_gan"
"tensorflow/gan" -> "taki0112/GAN_Metrics-Tensorflow"
"tensorflow/gan" -> "bioinf-jku/TTUR"
"tensorflow/gan" -> "pfnet-research/sngan_projection"
"tensorflow/gan" -> "taki0112/BigGAN-Tensorflow"
"tensorflow/gan" -> "timsainb/tensorflow2-generative-models"
"tensorflow/gan" -> "eriklindernoren/Keras-GAN"
"tensorflow/gan" -> "tensorflow/datasets" ["e"=1]
"tensorflow/gan" -> "torchgan/torchgan"
"tensorflow/gan" -> "justinpinkney/awesome-pretrained-stylegan2"
"tensorflow/gan" -> "facebookresearch/pytorch_GAN_zoo"
"tensorflow/gan" -> "tensorflow/addons" ["e"=1]
"tensorflow/gan" -> "ermongroup/ncsn" ["e"=1]
"tensorflow/gan" -> "manicman1999/StyleGAN2-Tensorflow-2.0"
"tensorflow/gan" -> "kwotsin/mimicry"
"emilwallner/Coloring-greyscale-images-in-Keras" -> "baldassarreFe/deep-koalarization"
"emilwallner/Coloring-greyscale-images-in-Keras" -> "nilboy/colorization-tf"
"hriddhidey/visage" -> "srivatsan-ramesh/Virtual-Makeup"
"hriddhidey/visage" -> "masterkapilkumar/Digital-Makeup-Transfer"
"hriddhidey/visage" -> "badarsh2/Virtual-Makeup"
"hriddhidey/visage" -> "TheMathWizard/Face-Makeup-by-Example"
"hriddhidey/visage" -> "yxding/RealTimeMakeupApplication"
"srivatsan-ramesh/Virtual-Makeup" -> "badarsh2/Virtual-Makeup"
"srivatsan-ramesh/Virtual-Makeup" -> "hriddhidey/visage"
"srivatsan-ramesh/Virtual-Makeup" -> "TheMathWizard/Face-Makeup-by-Example"
"srivatsan-ramesh/Virtual-Makeup" -> "Honlan/DMT"
"srivatsan-ramesh/Virtual-Makeup" -> "yxding/RealTimeMakeupApplication"
"srivatsan-ramesh/Virtual-Makeup" -> "zllrunning/face-makeup.PyTorch"
"srivatsan-ramesh/Virtual-Makeup" -> "Siddharth24Khera/Auto_MakeUp_Transfer"
"srivatsan-ramesh/Virtual-Makeup" -> "masterkapilkumar/Digital-Makeup-Transfer"
"srivatsan-ramesh/Virtual-Makeup" -> "KAlO2/PerfectShow"
"theveloped/ThreadTone" -> "danielvarga/string-art"
"theveloped/ThreadTone" -> "i-make-robots/weaving_algorithm"
"theveloped/ThreadTone" -> "halfmonty/StringArtGenerator"
"theveloped/ThreadTone" -> "christiansiegel/knitter"
"theveloped/ThreadTone" -> "MaloDrougard/knit"
"llSourcell/how_to_convert_text_to_images" -> "llSourcell/GANS-for-style-transfer" ["e"=1]
"llSourcell/how_to_convert_text_to_images" -> "llSourcell/how_to_generate_video" ["e"=1]
"crmaximo/VAEGAN" -> "baudm/vaegan-celebs-keras"
"sugyan/tf-dcgan" -> "sugyan/face-generator"
"phreeza/keras-GAN" -> "osh/KerasGAN"
"Huage001/PaintTransformer" -> "wzmsltw/PaintTransformer"
"Huage001/PaintTransformer" -> "pschaldenbrand/StyleCLIPDraw"
"Huage001/PaintTransformer" -> "eliahuhorwitz/DeepSIM"
"Huage001/PaintTransformer" -> "rinongal/StyleGAN-nada"
"Huage001/PaintTransformer" -> "ermongroup/SDEdit" ["e"=1]
"Huage001/PaintTransformer" -> "CompVis/brushstroke-parameterized-style-transfer"
"Huage001/PaintTransformer" -> "crowsonkb/v-diffusion-jax" ["e"=1]
"Huage001/PaintTransformer" -> "megvii-research/ICCV2019-LearningToPaint"
"Huage001/PaintTransformer" -> "wpeebles/gangealing"
"WangLiwen1994/DeepRelight" -> "mahmoudnafifi/image_relighting"
"WangLiwen1994/DeepRelight" -> "yazdaniamir38/Depth-guided-Image-Relighting"
"WangLiwen1994/DeepRelight" -> "majedelhelou/VIDIT"
"andrewhou1/Shadow-Mask-Face-Relighting" -> "andrewhou1/GeomConsistentFR"
"andrewhou1/Shadow-Mask-Face-Relighting" -> "ZoneLikeWonderland/Neural-Video-Portrait-Relighting-in-Real-time-via-Consistency-Modeling"
"andrewhou1/Shadow-Mask-Face-Relighting" -> "zhhoper/DPR"
"andrewhou1/Shadow-Mask-Face-Relighting" -> "google/neural-light-transport"
"andrewhou1/Shadow-Mask-Face-Relighting" -> "pengbo-learn/python-face-relighting"
"clovaai/fewshot-font-generation" -> "clovaai/mxfont"
"clovaai/fewshot-font-generation" -> "clovaai/lffont"
"clovaai/fewshot-font-generation" -> "clovaai/dmfont"
"clovaai/fewshot-font-generation" -> "ligoudaner377/font_translator_gan"
"clovaai/fewshot-font-generation" -> "ecnuycxie/DG-Font"
"clovaai/fewshot-font-generation" -> "tlc121/FsFont"
"clovaai/fewshot-font-generation" -> "kyxscut/CG-GAN"
"clovaai/fewshot-font-generation" -> "IShengFang/TypographyResearchCollection"
"lisabug/guided-filter" -> "tody411/GuidedFilter"
"tody411/GuidedFilter" -> "lisabug/guided-filter"
"tody411/GuidedFilter" -> "pfchai/GuidedFilter"
"shayneobrien/generative-models" -> "znxlwm/pytorch-generative-model-collections"
"shayneobrien/generative-models" -> "ctallec/pyvarinf" ["e"=1]
"shayneobrien/generative-models" -> "wohlert/semi-supervised-pytorch" ["e"=1]
"shayneobrien/generative-models" -> "probtorch/probtorch" ["e"=1]
"jorge-pessoa/pytorch-msssim" -> "Po-Hsun-Su/pytorch-ssim"
"jorge-pessoa/pytorch-msssim" -> "VainF/pytorch-msssim"
"jorge-pessoa/pytorch-msssim" -> "NVlabs/PL4NN"
"jorge-pessoa/pytorch-msssim" -> "lizhengwei1992/MS_SSIM_pytorch"
"jorge-pessoa/pytorch-msssim" -> "One-sixth/ms_ssim_pytorch"
"jorge-pessoa/pytorch-msssim" -> "Tandon-A/CycleGAN_ssim"
"jorge-pessoa/pytorch-msssim" -> "LMescheder/GAN_stability"
"jorge-pessoa/pytorch-msssim" -> "nashory/pggan-pytorch"
"jorge-pessoa/pytorch-msssim" -> "wuhuikai/DeepGuidedFilter" ["e"=1]
"jorge-pessoa/pytorch-msssim" -> "aiff22/PyNET" ["e"=1]
"lizhengwei1992/MS_SSIM_pytorch" -> "psyrocloud/MS-SSIM_L1_LOSS"
"DreamtaleCore/USI3D" -> "zhengqili/unsupervised-learning-intrinsic-images"
"DreamtaleCore/USI3D" -> "fqnchina/IntrinsicImage"
"DreamtaleCore/USI3D" -> "zhengqili/CGIntrinsics"
"DreamtaleCore/USI3D" -> "zju3dv/NIID-Net"
"DreamtaleCore/USI3D" -> "tnarihi/direct-intrinsics"
"DreamtaleCore/USI3D" -> "kvanhoey/UnsupervisedIntrinsicDecomposition"
"timsainb/tensorflow2-generative-models" -> "google-research/tensor2robot"
"timsainb/tensorflow2-generative-models" -> "ranahanocka/MeshCNN" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "TDAmeritrade/stumpy" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "benedekrozemberczki/awesome-decision-tree-papers" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "microsoft/tensorwatch" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "microsoft/interpret" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"timsainb/tensorflow2-generative-models" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"timsainb/tensorflow2-generative-models" -> "LynnHo/CycleGAN-Tensorflow-2"
"timsainb/tensorflow2-generative-models" -> "Machine-Learning-Tokyo/DL-workshop-series" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "crmaximo/VAEGAN"
"timsainb/tensorflow2-generative-models" -> "tensorflow/gan"
"timsainb/tensorflow2-generative-models" -> "hwalsuklee/tensorflow-generative-model-collections"
"timsainb/tensorflow2-generative-models" -> "huseinzol05/NLP-Models-Tensorflow" ["e"=1]
"timsainb/tensorflow2-generative-models" -> "sheqi/GAN_Review" ["e"=1]
"alievk/avatarify-desktop" -> "alievk/avatarify-python"
"alievk/avatarify-desktop" -> "a312863063/generators-with-stylegan2"
"alievk/avatarify-desktop" -> "eyaler/avatars4all"
"alievk/avatarify-desktop" -> "minivision-ai/photo2cartoon"
"alievk/avatarify-desktop" -> "TachibanaYoshino/AnimeGAN"
"alievk/avatarify-desktop" -> "apchenstu/sofgan"
"alievk/avatarify-desktop" -> "TachibanaYoshino/AnimeGANv3"
"alievk/avatarify-desktop" -> "yoyo-nb/Thin-Plate-Spline-Motion-Model" ["e"=1]
"alievk/avatarify-desktop" -> "snap-research/articulated-animation" ["e"=1]
"alievk/avatarify-desktop" -> "iperov/DeepFaceLive"
"alievk/avatarify-desktop" -> "YuanxunLu/LiveSpeechPortraits" ["e"=1]
"alievk/avatarify-desktop" -> "mindslab-ai/hififace" ["e"=1]
"alievk/avatarify-desktop" -> "neuralchen/SimSwap" ["e"=1]
"boschresearch/unetgan" -> "lucidrains/unet-stylegan2"
"boschresearch/unetgan" -> "akanimax/msg-gan-v1"
"JizhiziLi/animal-matting" -> "Yaoyi-Li/GCA-Matting"
"JizhiziLi/animal-matting" -> "wukaoliu/CVPR2020-HAttMatting"
"JizhiziLi/animal-matting" -> "poppinace/indexnet_matting"
"JizhiziLi/animal-matting" -> "MarcoForte/FBA_Matting"
"JizhiziLi/animal-matting" -> "nowsyn/SIM"
"JizhiziLi/animal-matting" -> "aisegmentcn/matting_human_datasets"
"JizhiziLi/animal-matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"JizhiziLi/animal-matting" -> "yucornetto/MGMatting"
"JizhiziLi/animal-matting" -> "lizhengwei1992/Semantic_Human_Matting"
"JizhiziLi/animal-matting" -> "hqqxyy/Context-Aware-Matting"
"JizhiziLi/animal-matting" -> "ZHKKKe/MODNet"
"JizhiziLi/animal-matting" -> "yunkezhang/FusionMatting"
"JizhiziLi/animal-matting" -> "huochaitiantang/pytorch-deep-image-matting"
"JizhiziLi/animal-matting" -> "pymatting/pymatting"
"JizhiziLi/animal-matting" -> "JizhiziLi/AIM"
"ZPdesu/II2S" -> "wty-ustc/e2style"
"ZPdesu/II2S" -> "ZPdesu/MindTheGap"
"clovaai/WCT2" -> "sunshineatnoon/PytorchWCT"
"clovaai/WCT2" -> "sunshineatnoon/LinearStyleTransfer"
"clovaai/WCT2" -> "naoto0804/pytorch-AdaIN"
"clovaai/WCT2" -> "clovaai/tunit"
"clovaai/WCT2" -> "Yijunmaverick/UniversalStyleTransfer"
"clovaai/WCT2" -> "nkolkin13/STROTSS"
"clovaai/WCT2" -> "ycjing/Neural-Style-Transfer-Papers"
"clovaai/WCT2" -> "clovaai/AdamP" ["e"=1]
"clovaai/WCT2" -> "rosinality/swapping-autoencoder-pytorch"
"clovaai/WCT2" -> "WonwoongCho/GDWCT"
"clovaai/WCT2" -> "taesungp/swapping-autoencoder-pytorch"
"clovaai/WCT2" -> "omertov/encoder4editing"
"clovaai/WCT2" -> "Huage001/AdaAttN"
"clovaai/WCT2" -> "czczup/URST"
"clovaai/WCT2" -> "Kibeom-Hong/Domain-Aware-Style-Transfer"
"seasonSH/SemanticStyleGAN" -> "Tengfei-Wang/HFGI"
"seasonSH/SemanticStyleGAN" -> "Seanseattle/StyleSwap" ["e"=1]
"seasonSH/SemanticStyleGAN" -> "danielroich/PTI"
"seasonSH/SemanticStyleGAN" -> "betterze/StyleSpace"
"seasonSH/SemanticStyleGAN" -> "Taeu/Style-Your-Hair"
"seasonSH/SemanticStyleGAN" -> "RenYurui/PIRender" ["e"=1]
"seasonSH/SemanticStyleGAN" -> "ZPdesu/II2S"
"seasonSH/SemanticStyleGAN" -> "wty-ustc/HairCLIP"
"seasonSH/SemanticStyleGAN" -> "yuval-alaluf/stylegan3-editing"
"seasonSH/SemanticStyleGAN" -> "stylegan-human/StyleGAN-Human"
"Code-Bullet/PacmanGame" -> "Code-Bullet/PacNeat"
"Code-Bullet/PacmanGame" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/PacmanGame" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/PacmanGame" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Chess-AI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Pool_AI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/2048-AI"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/PacmanGame" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"wonbeomjang/mobile-hair-segmentation-pytorch" -> "thangtran480/hair-segmentation"
"wonbeomjang/mobile-hair-segmentation-pytorch" -> "ItchyHiker/Hair_Segmentation_Keras"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/2048-AI"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Piano-Tiles" -> "Code-Bullet/NEAT-Template-JavaScript"
"JianqiangRen/AAMS" -> "GlebBrykin/SANET"
"JianqiangRen/AAMS" -> "LucasSheng/avatar-net"
"CSAILVision/gandissect" -> "albertpumarola/GANimation"
"CSAILVision/gandissect" -> "nyoki-mtl/pytorch-EverybodyDanceNow" ["e"=1]
"CSAILVision/gandissect" -> "bendangnuksung/Image-OutPainting"
"CSAILVision/gandissect" -> "NVlabs/MUNIT"
"CSAILVision/gandissect" -> "google/compare_gan"
"CSAILVision/gandissect" -> "ajbrock/BigGAN-PyTorch"
"CSAILVision/gandissect" -> "LMescheder/GAN_stability"
"CSAILVision/gandissect" -> "heykeetae/Self-Attention-GAN"
"CSAILVision/gandissect" -> "NVIDIA/vid2vid"
"CSAILVision/gandissect" -> "SummitKwan/transparent_latent_gan"
"CSAILVision/gandissect" -> "junyanz/BicycleGAN"
"CSAILVision/gandissect" -> "tkarras/progressive_growing_of_gans"
"CSAILVision/gandissect" -> "sangwoomo/instagan"
"CSAILVision/gandissect" -> "NVIDIA/waveglow" ["e"=1]
"CSAILVision/gandissect" -> "pfnet-research/sngan_projection"
"PerpetualSmile/BeautyCamera" -> "QuantumLiu/AIMakeup"
"PerpetualSmile/BeautyCamera" -> "jinjintang/BeautyLib"
"CDOTAD/AlphaGAN-Matting" -> "poppinace/indexnet_matting"
"CDOTAD/AlphaGAN-Matting" -> "Yaoyi-Li/GCA-Matting"
"CDOTAD/AlphaGAN-Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"CDOTAD/AlphaGAN-Matting" -> "foamliu/Deep-Image-Matting-v2"
"CDOTAD/AlphaGAN-Matting" -> "Ruifeng-Zhou24/AdaMatting"
"CDOTAD/AlphaGAN-Matting" -> "hqqxyy/Context-Aware-Matting"
"CDOTAD/AlphaGAN-Matting" -> "99991/matting"
"CDOTAD/AlphaGAN-Matting" -> "takiyu/portrait_matting"
"CDOTAD/AlphaGAN-Matting" -> "yunkezhang/FusionMatting"
"CDOTAD/AlphaGAN-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"CDOTAD/AlphaGAN-Matting" -> "lnugraha/trimap_generator"
"CDOTAD/AlphaGAN-Matting" -> "MarcoForte/FBA-Matting"
"CDOTAD/AlphaGAN-Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"CDOTAD/AlphaGAN-Matting" -> "Yaoyi-Li/HOP-Matting"
"CDOTAD/AlphaGAN-Matting" -> "foamliu/Mobile-Image-Matting"
"carpedm20/simulated-unsupervised-tensorflow" -> "wayaai/SimGAN"
"carpedm20/simulated-unsupervised-tensorflow" -> "mjdietzx/SimGAN"
"carpedm20/simulated-unsupervised-tensorflow" -> "carpedm20/DiscoGAN-pytorch"
"carpedm20/simulated-unsupervised-tensorflow" -> "carpedm20/BEGAN-tensorflow"
"carpedm20/simulated-unsupervised-tensorflow" -> "AlexHex7/SimGAN_pytorch"
"carpedm20/simulated-unsupervised-tensorflow" -> "shinseung428/simGAN_NYU_Hand"
"carpedm20/simulated-unsupervised-tensorflow" -> "yunjey/dtn-tensorflow"
"carpedm20/simulated-unsupervised-tensorflow" -> "carpedm20/pixel-rnn-tensorflow"
"carpedm20/simulated-unsupervised-tensorflow" -> "buriburisuri/ac-gan"
"carpedm20/simulated-unsupervised-tensorflow" -> "khanrc/tf.gans-comparison"
"carpedm20/simulated-unsupervised-tensorflow" -> "Zardinality/WGAN-tensorflow"
"carpedm20/simulated-unsupervised-tensorflow" -> "buriburisuri/ebgan"
"carpedm20/simulated-unsupervised-tensorflow" -> "openai/improved-gan"
"carpedm20/simulated-unsupervised-tensorflow" -> "yenchenlin/pix2pix-tensorflow"
"carpedm20/simulated-unsupervised-tensorflow" -> "andersbll/autoencoding_beyond_pixels"
"NVlabs/FUNIT" -> "NVlabs/MUNIT"
"NVlabs/FUNIT" -> "lzhbrian/image-to-image-papers"
"NVlabs/FUNIT" -> "HsinYingLee/DRIT"
"NVlabs/FUNIT" -> "mingyuliutw/UNIT"
"NVlabs/FUNIT" -> "sangwoomo/instagan"
"NVlabs/FUNIT" -> "clovaai/stargan-v2"
"NVlabs/FUNIT" -> "switchablenorms/CelebAMask-HQ"
"NVlabs/FUNIT" -> "shaoanlu/fewshot-face-translation-GAN" ["e"=1]
"NVlabs/FUNIT" -> "rosinality/style-based-gan-pytorch"
"NVlabs/FUNIT" -> "ajbrock/BigGAN-PyTorch"
"NVlabs/FUNIT" -> "grey-eye/talking-heads" ["e"=1]
"NVlabs/FUNIT" -> "tamarott/SinGAN"
"NVlabs/FUNIT" -> "junyanz/BicycleGAN"
"NVlabs/FUNIT" -> "NVlabs/few-shot-vid2vid"
"NVlabs/FUNIT" -> "Puzer/stylegan-encoder"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Pool_AI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/2048-AI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/PacNeat"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/SnakeFusion"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/PacmanGame"
"Code-Bullet/Enigma-Simulator" -> "Code-Bullet/NEAT_Template"
"mingyuliutw/CoGAN" -> "andrewliao11/CoGAN-tensorflow"
"mingyuliutw/CoGAN" -> "mingyuliutw/CoGAN_PyTorch"
"mingyuliutw/CoGAN" -> "erictzeng/adda" ["e"=1]
"mingyuliutw/CoGAN" -> "xunhuang1995/SGAN"
"mingyuliutw/CoGAN" -> "mingyuliutw/UNIT"
"mingyuliutw/CoGAN" -> "corenel/pytorch-adda" ["e"=1]
"mingyuliutw/CoGAN" -> "duxingren14/DualGAN"
"IGLICT/NeRF-Editing" -> "IGLICT/TM-NET"
"IGLICT/NeRF-Editing" -> "IGLICT/StylizedNeRF"
"IGLICT/NeRF-Editing" -> "IGLICT/TM-NET-Jittor"
"IGLICT/NeRF-Editing" -> "IGLICT/PRS-Net_stamp"
"IGLICT/NeRF-Editing" -> "IGLICT/Stylemotion"
"IGLICT/NeRF-Editing" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/NeRF-Editing" -> "IGLICT/MeshPooling"
"IGLICT/NeRF-Editing" -> "IGLICT/PRS-Net"
"IGLICT/NeRF-Editing" -> "IGLICT/RisaNET"
"IGLICT/NeRF-Editing" -> "IGLICT/DeepFaceVideoEditing"
"IGLICT/NeRF-Editing" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/NeRF-Editing" -> "IGLICT/Farthestsampling"
"IGLICT/NeRF-Editing" -> "IGLICT/DynamicHumanGeneration_Jittor"
"IGLICT/NeRF-Editing" -> "IGLICT/OctField"
"IGLICT/NeRF-Editing" -> "IGLICT/MT_DE-Jittor"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/DeepCars"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/Dinossauro-Google"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/ParticulasGravitacionais3D"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/HardestGame"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/Spirograph"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/AlgoritmoTecelao"
"JVictorDias/FlappIA-Bird" -> "JVictorDias/HardestGameEditor"
"dongb5/GAN-Timeline" -> "layumi/Person-reID_GAN" ["e"=1]
"dongb5/GAN-Timeline" -> "shawnyuen/GANsPaperCollection"
"dongb5/GAN-Timeline" -> "hollobit/All-About-the-GAN"
"dongb5/GAN-Timeline" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"dongb5/GAN-Timeline" -> "LMescheder/GAN_stability"
"dongb5/GAN-Timeline" -> "xuqiantong/GAN-Metrics"
"dongb5/GAN-Timeline" -> "PaperWeeklyCode/GAN-discussions"
"dongb5/GAN-Timeline" -> "GKalliatakis/Delving-deep-into-GANs"
"godisboy/SN-GAN" -> "pfnet-research/sngan_projection"
"godisboy/SN-GAN" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"godisboy/SN-GAN" -> "minhnhat93/tf-SNDCGAN"
"godisboy/SN-GAN" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"godisboy/SN-GAN" -> "christiancosgrove/pytorch-sagan"
"vijishmadhavan/Toon-Me" -> "vijishmadhavan/ArtLine"
"vijishmadhavan/Toon-Me" -> "yiranran/APDrawingGAN2"
"vijishmadhavan/Toon-Me" -> "vijishmadhavan/Light-Up"
"yandex-research/navigan" -> "anvoynov/GANLatentDiscovery"
"yandex-research/navigan" -> "bmolab/masked-gan-manifold"
"yandex-research/navigan" -> "minyoungg/pix2latent"
"yandex-research/navigan" -> "catlab-team/latentclr"
"nperraud/download-celebA-HQ" -> "willylulu/celeba-hq-modified"
"rrmina/fast-neural-style-pytorch" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"rrmina/fast-neural-style-pytorch" -> "abhiskk/fast-neural-style"
"rrmina/fast-neural-style-pytorch" -> "zhanghang1989/PyTorch-Multi-Style-Transfer"
"rrmina/fast-neural-style-pytorch" -> "sunshineatnoon/LinearStyleTransfer"
"rrmina/fast-neural-style-pytorch" -> "cuicaihao/fast_neural_style"
"rrmina/fast-neural-style-pytorch" -> "safwankdb/ReCoNet-PyTorch"
"rrmina/fast-neural-style-pytorch" -> "hwalsuklee/tensorflow-fast-style-transfer"
"bioinf-jku/TTUR" -> "mseitzer/pytorch-fid"
"bioinf-jku/TTUR" -> "sbarratt/inception-score-pytorch"
"bioinf-jku/TTUR" -> "openai/improved-gan"
"bioinf-jku/TTUR" -> "pfnet-research/sngan_projection"
"bioinf-jku/TTUR" -> "google/compare_gan"
"bioinf-jku/TTUR" -> "taki0112/GAN_Metrics-Tensorflow"
"bioinf-jku/TTUR" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"bioinf-jku/TTUR" -> "LMescheder/GAN_stability"
"bioinf-jku/TTUR" -> "richzhang/PerceptualSimilarity"
"bioinf-jku/TTUR" -> "brain-research/self-attention-gan"
"bioinf-jku/TTUR" -> "HsinYingLee/DRIT"
"bioinf-jku/TTUR" -> "igul222/improved_wgan_training"
"bioinf-jku/TTUR" -> "xuqiantong/GAN-Metrics"
"bioinf-jku/TTUR" -> "heykeetae/Self-Attention-GAN"
"bioinf-jku/TTUR" -> "HelenMao/MSGAN"
"Vivianyzw/DeshadowSTCGANs" -> "WHUlwb/stcgan"
"WHUlwb/stcgan" -> "Vivianyzw/DeshadowSTCGANs"
"hangong/deshadow" -> "hangong/deshadow-curve_solution"
"kittenish/Image-Shadow-Detection-and-Removal" -> "jflalonde/shadowDetection"
"kittenish/Image-Shadow-Detection-and-Removal" -> "hangong/deshadow"
"kittenish/Image-Shadow-Detection-and-Removal" -> "Xiaoming-Yu/ShadowRemoval"
"kittenish/Image-Shadow-Detection-and-Removal" -> "misop/shadow_removal"
"kittenish/Image-Shadow-Detection-and-Removal" -> "naoto0804/SynShadow"
"kittenish/Image-Shadow-Detection-and-Removal" -> "zijundeng/BDRAR"
"GlebBrykin/SANET" -> "tyui592/Avatar-Net_Pytorch"
"GlebBrykin/SANET" -> "JianqiangRen/AAMS"
"GlebBrykin/SANET" -> "zxhuang97/Official-implementation-StyleMixer"
"ZPdesu/SEAN" -> "microsoft/CoCosNet" ["e"=1]
"ZPdesu/SEAN" -> "switchablenorms/CelebAMask-HQ"
"ZPdesu/SEAN" -> "omertov/encoder4editing"
"ZPdesu/SEAN" -> "Seanseattle/SMIS" ["e"=1]
"ZPdesu/SEAN" -> "genforce/interfacegan"
"ZPdesu/SEAN" -> "chaofengc/PSFRGAN" ["e"=1]
"ZPdesu/SEAN" -> "wtjiang98/PSGAN"
"ZPdesu/SEAN" -> "menyifang/ADGAN" ["e"=1]
"ZPdesu/SEAN" -> "naver-ai/StyleMapGAN"
"ZPdesu/SEAN" -> "microsoft/CoCosNet-v2" ["e"=1]
"ZPdesu/SEAN" -> "RenYurui/Global-Flow-Local-Attention" ["e"=1]
"ZPdesu/SEAN" -> "weihaox/awesome-gan-inversion"
"ZPdesu/SEAN" -> "genforce/sefa"
"ZPdesu/SEAN" -> "zllrunning/face-parsing.PyTorch"
"ZPdesu/SEAN" -> "danielroich/PTI"
"davidbau/rewriting" -> "mit-han-lab/data-efficient-gans"
"davidbau/rewriting" -> "davidbau/ganseeing"
"davidbau/rewriting" -> "XingangPan/deep-generative-prior"
"davidbau/rewriting" -> "IVRL/GANLocalEditing"
"davidbau/rewriting" -> "genforce/genforce"
"davidbau/rewriting" -> "terrybroad/network-bending"
"davidbau/rewriting" -> "anvoynov/GANLatentDiscovery"
"davidbau/rewriting" -> "ali-design/gan_steerability"
"davidbau/rewriting" -> "clovaai/tunit"
"davidbau/rewriting" -> "rolux/stylegan2encoder"
"davidbau/rewriting" -> "mit-han-lab/gan-compression"
"davidbau/rewriting" -> "mit-han-lab/anycost-gan"
"davidbau/rewriting" -> "nupurkmr9/vision-aided-gan"
"davidbau/rewriting" -> "stevliu/editnerf" ["e"=1]
"davidbau/rewriting" -> "wpeebles/hessian_penalty"
"diyiiyiii/Arbitrary-Style-Transfer-via-Multi-Adaptation-Network" -> "diyiiyiii/MCCNet"
"irasin/Pytorch_AdaIN" -> "irasin/Structure-emphasized-Multimodal-Style-Transfer"
"irasin/Pytorch_AdaIN" -> "irasin/Pytorch_WCT"
"irasin/Pytorch_AdaIN" -> "Huage001/AdaAttN"
"wchstrife/Awesome-Image-Matting" -> "michaelowenliu/awesome-image-matting"
"wchstrife/Awesome-Image-Matting" -> "nowsyn/SIM"
"wchstrife/Awesome-Image-Matting" -> "Yaoyi-Li/GCA-Matting"
"wchstrife/Awesome-Image-Matting" -> "yucornetto/MGMatting"
"wchstrife/Awesome-Image-Matting" -> "Charch-630/FGI-Matting"
"wchstrife/Awesome-Image-Matting" -> "JizhiziLi/AIM"
"wchstrife/Awesome-Image-Matting" -> "webtoon/matteformer"
"wchstrife/Awesome-Image-Matting" -> "yunkezhang/FusionMatting"
"wchstrife/Awesome-Image-Matting" -> "MarcoForte/FBA_Matting"
"wchstrife/Awesome-Image-Matting" -> "JizhiziLi/GFM"
"wchstrife/Awesome-Image-Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"wchstrife/Awesome-Image-Matting" -> "hqqxyy/Context-Aware-Matting"
"wchstrife/Awesome-Image-Matting" -> "aisegmentcn/matting_human_datasets"
"wchstrife/Awesome-Image-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"wchstrife/Awesome-Image-Matting" -> "poppinace/indexnet_matting"
"nolanliou/mobile-deeplab-v3-plus" -> "nolanliou/PeopleSegmentationDemo"
"nolanliou/mobile-deeplab-v3-plus" -> "dong-x16/PortraitNet"
"nolanliou/mobile-deeplab-v3-plus" -> "anilsathyan7/Portrait-Segmentation"
"nolanliou/mobile-deeplab-v3-plus" -> "dailystudio/ml"
"taesungp/swapping-autoencoder-pytorch" -> "rosinality/swapping-autoencoder-pytorch"
"taesungp/swapping-autoencoder-pytorch" -> "mit-han-lab/anycost-gan"
"taesungp/swapping-autoencoder-pytorch" -> "taesungp/contrastive-unpaired-translation"
"taesungp/swapping-autoencoder-pytorch" -> "omertov/encoder4editing"
"taesungp/swapping-autoencoder-pytorch" -> "mit-han-lab/data-efficient-gans"
"taesungp/swapping-autoencoder-pytorch" -> "rosinality/alias-free-gan-pytorch"
"taesungp/swapping-autoencoder-pytorch" -> "nupurkmr9/vision-aided-gan"
"taesungp/swapping-autoencoder-pytorch" -> "GaParmar/clean-fid"
"taesungp/swapping-autoencoder-pytorch" -> "wpeebles/gangealing"
"taesungp/swapping-autoencoder-pytorch" -> "chail/anyres-gan"
"taesungp/swapping-autoencoder-pytorch" -> "stevliu/editnerf" ["e"=1]
"taesungp/swapping-autoencoder-pytorch" -> "danielroich/PTI"
"taesungp/swapping-autoencoder-pytorch" -> "naver-ai/StyleMapGAN"
"taesungp/swapping-autoencoder-pytorch" -> "PeterWang512/GANSketching"
"taesungp/swapping-autoencoder-pytorch" -> "mahmoudnafifi/HistoGAN"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "hmmlillian/Gray-Image-Retrieval"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "ChenyangLEI/automatic-video-colorization"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "msracver/Deep-Exemplar-based-Colorization"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "raywzy/Bringing-Old-Films-Back-to-Life"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "satoshiiizuka/siggraphasia2019_remastering"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "Jungjaewon/Reference_based_Skectch_Image_Colorization"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "zhaoyuzhi/VCGAN"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "pvitoria/ChromaGAN"
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" -> "csxmli2016/ASFFNet512" ["e"=1]
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/XingGAN"
"Ha0Tang/BiGraphGAN" -> "zhangqianhui/GazeAnimation"
"Ha0Tang/BiGraphGAN" -> "tobran/DF-GAN"
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/GestureGAN"
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/C2GAN"
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/DDLCN"
"Ha0Tang/BiGraphGAN" -> "Ha0Tang/DAGAN"
"Ha0Tang/XingGAN" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/XingGAN" -> "zhangqianhui/GazeAnimation"
"Ha0Tang/XingGAN" -> "tobran/DF-GAN"
"Ha0Tang/XingGAN" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/XingGAN" -> "Ha0Tang/GestureGAN"
"Ha0Tang/XingGAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"Ha0Tang/XingGAN" -> "Ha0Tang/C2GAN"
"Ha0Tang/XingGAN" -> "Ha0Tang/DAGAN"
"Ha0Tang/XingGAN" -> "tengteng95/Pose-Transfer" ["e"=1]
"Ha0Tang/XingGAN" -> "RenYurui/Global-Flow-Local-Attention" ["e"=1]
"Ha0Tang/XingGAN" -> "Ha0Tang/LGGAN"
"Ha0Tang/XingGAN" -> "Seanseattle/SMIS" ["e"=1]
"Ha0Tang/XingGAN" -> "menyifang/ADGAN" ["e"=1]
"Ha0Tang/XingGAN" -> "ly015/intrinsic_flow" ["e"=1]
"taki0112/FusionGAN-Tensorflow" -> "taki0112/SphereGAN-Tensorflow"
"architrathore/CycleGAN" -> "leehomyc/cyclegan-1"
"architrathore/CycleGAN" -> "xhujoy/CycleGAN-tensorflow"
"architrathore/CycleGAN" -> "LynnHo/CycleGAN-Tensorflow-PyTorch"
"architrathore/CycleGAN" -> "hardikbansal/CycleGAN"
"architrathore/CycleGAN" -> "vanhuyz/CycleGAN-TensorFlow"
"architrathore/CycleGAN" -> "luoxier/CycleGAN_Tensorlayer"
"architrathore/CycleGAN" -> "goldkim92/StarGAN-tensorflow"
"MarcoForte/knn-matting" -> "dingzeyuli/knn-matting"
"MarcoForte/knn-matting" -> "MarcoForte/closed-form-matting"
"MarcoForte/knn-matting" -> "MarcoForte/bayesian-matting"
"MarcoForte/knn-matting" -> "PetroWu/AutoPortraitMatting"
"PeterWang512/GANSketching" -> "GaParmar/clean-fid"
"PeterWang512/GANSketching" -> "weihaox/awesome-gan-inversion"
"PeterWang512/GANSketching" -> "mit-han-lab/anycost-gan"
"PeterWang512/GANSketching" -> "PeterWang512/GANWarping"
"PeterWang512/GANSketching" -> "wpeebles/gangealing"
"PeterWang512/GANSketching" -> "rinongal/StyleGAN-nada"
"PeterWang512/GANSketching" -> "ermongroup/SDEdit" ["e"=1]
"PeterWang512/GANSketching" -> "eliahuhorwitz/DeepSIM"
"PeterWang512/GANSketching" -> "taesungp/swapping-autoencoder-pytorch"
"PeterWang512/GANSketching" -> "mit-han-lab/data-efficient-gans"
"PeterWang512/GANSketching" -> "danielroich/PTI"
"PeterWang512/GANSketching" -> "naver-ai/StyleMapGAN"
"PeterWang512/GANSketching" -> "rosinality/alias-free-gan-pytorch"
"PeterWang512/GANSketching" -> "weihaox/awesome-image-translation"
"PeterWang512/GANSketching" -> "PITI-Synthesis/PITI" ["e"=1]
"jalola/improved-wgan-pytorch" -> "caogang/wgan-gp"
"jalola/improved-wgan-pytorch" -> "Zeleni9/pytorch-wgan"
"jalola/improved-wgan-pytorch" -> "igul222/improved_wgan_training"
"jalola/improved-wgan-pytorch" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"jalola/improved-wgan-pytorch" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Pytorch"
"jalola/improved-wgan-pytorch" -> "sbarratt/inception-score-pytorch"
"jalola/improved-wgan-pytorch" -> "EmilienDupont/wgan-gp"
"jalola/improved-wgan-pytorch" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"jalola/improved-wgan-pytorch" -> "LMescheder/GAN_stability"
"jalola/improved-wgan-pytorch" -> "znxlwm/pytorch-generative-model-collections"
"jalola/improved-wgan-pytorch" -> "pfnet-research/sngan_projection"
"jalola/improved-wgan-pytorch" -> "znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN"
"jalola/improved-wgan-pytorch" -> "eveningglow/semi-supervised-CycleGAN"
"aleju/cat-generator" -> "skaae/torch-gan" ["e"=1]
"aleju/cat-generator" -> "jhayes14/GAN"
"aleju/cat-generator" -> "Evolving-AI-Lab/synthesizing"
"aleju/cat-generator" -> "aleju/face-generator"
"aleju/cat-generator" -> "facebook/eyescream"
"preddy5/Im2Vec" -> "BachiLi/diffvg"
"preddy5/Im2Vec" -> "MarkMoHR/virtual_sketching" ["e"=1]
"preddy5/Im2Vec" -> "preddy5/multi_implicit_fonts"
"preddy5/Im2Vec" -> "alexandre01/deepsvg" ["e"=1]
"limingcv/Photorealistic-Style-Transfer" -> "KushajveerSingh/Photorealistic-Style-Transfer"
"limingcv/Photorealistic-Style-Transfer" -> "pkuanjie/StyleNAS"
"keijiro/WfcMaze" -> "keijiro/VectorFieldExamples" ["e"=1]
"keijiro/WfcMaze" -> "keijiro/LaspVfx" ["e"=1]
"keijiro/WfcMaze" -> "selfsame/unity-wave-function-collapse"
"keijiro/WfcMaze" -> "keijiro/BurstWig" ["e"=1]
"keijiro/WfcMaze" -> "radiatoryang/hedera" ["e"=1]
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/PacNeat"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/2048-AI"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Asteroids-with-NEAT" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/PacNeat"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Pool_AI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/PacmanGame"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/2048-AI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/AsteroidsAI" -> "Code-Bullet/WebsiteTest"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Chess-AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Chess-AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/Chess-AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Chess-AI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/PacmanGame"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Chess-AI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/Pool_AI"
"Code-Bullet/Chess-AI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/PacNeat" -> "Code-Bullet/PacmanGame"
"Code-Bullet/PacNeat" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/PacNeat" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/PacNeat" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/PacNeat" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/PacNeat" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/PacNeat" -> "Code-Bullet/Chess-AI"
"Code-Bullet/PacNeat" -> "Code-Bullet/2048-AI"
"Code-Bullet/PacNeat" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/PacNeat" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/PacNeat" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/PacNeat" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/PacNeat" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/PacNeat" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/PacNeat" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Pool_AI" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Pool_AI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/Pool_AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Pool_AI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/PacmanGame"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Pool_AI" -> "Code-Bullet/Piano-Tiles"
"dvschultz/dataset-tools" -> "dvschultz/ai"
"dvschultz/dataset-tools" -> "dvschultz/ml-art-colabs"
"dvschultz/dataset-tools" -> "dvschultz/stylegan2-ada"
"dvschultz/dataset-tools" -> "JCBrouwer/maua-stylegan2"
"dvschultz/dataset-tools" -> "dvschultz/stylegan2"
"dvschultz/dataset-tools" -> "dvschultz/stylegan3"
"dvschultz/dataset-tools" -> "skyflynil/stylegan2"
"dvschultz/dataset-tools" -> "dvschultz/stylegan2-ada-pytorch"
"dvschultz/dataset-tools" -> "terrybroad/network-bending"
"dvschultz/dataset-tools" -> "eps696/stylegan2"
"dvschultz/dataset-tools" -> "PDillis/stylegan3-fun"
"dvschultz/dataset-tools" -> "levindabhi/CLIP-Notebooks"
"dvschultz/dataset-tools" -> "justinpinkney/awesome-pretrained-stylegan2"
"dvschultz/dataset-tools" -> "PDillis/stylegan2-fun"
"dvschultz/dataset-tools" -> "dvschultz/neural-style-tf"
"justinpinkney/stylegan2" -> "justinpinkney/toonify"
"justinpinkney/stylegan2" -> "justinpinkney/awesome-pretrained-stylegan2"
"justinpinkney/stylegan2" -> "happy-jihye/Cartoon-StyleGAN"
"justinpinkney/stylegan2" -> "skyflynil/stylegan2"
"justinpinkney/stylegan2" -> "dvschultz/stylegan2-ada-pytorch"
"justinpinkney/stylegan2" -> "rolux/stylegan2encoder"
"justinpinkney/stylegan2" -> "justinpinkney/pix2pixHD"
"justinpinkney/stylegan2" -> "sunniesuhyoung/DST"
"justinpinkney/stylegan2" -> "EvgenyKashin/stylegan2-distillation"
"justinpinkney/stylegan2" -> "bes-dev/MobileStyleGAN.pytorch"
"justinpinkney/stylegan2" -> "aydao/stylegan2-surgery"
"justinpinkney/stylegan2" -> "bryandlee/naver-webtoon-faces"
"justinpinkney/stylegan2" -> "yuval-alaluf/SAM"
"justinpinkney/stylegan2" -> "justinpinkney/awesome-pretrained-stylegan"
"justinpinkney/stylegan2" -> "eladrich/pixel2style2pixel"
"JarrentWu1031/CCPL" -> "HalbertCH/IEContraAST"
"JarrentWu1031/CCPL" -> "semchan/UPST-NeRF"
"JarrentWu1031/CCPL" -> "zyxElsa/CAST_pytorch"
"JarrentWu1031/CCPL" -> "neuralchen/awesome_style_transfer"
"JarrentWu1031/CCPL" -> "Huage001/AdaAttN"
"mchong6/GANsNRoses" -> "yuval-alaluf/hyperstyle"
"mchong6/GANsNRoses" -> "danielroich/PTI"
"mchong6/GANsNRoses" -> "mchong6/SOAT"
"mchong6/GANsNRoses" -> "rosinality/stylegan2-pytorch"
"mchong6/GANsNRoses" -> "eladrich/pixel2style2pixel"
"mchong6/GANsNRoses" -> "williamyang1991/DualStyleGAN"
"mchong6/GANsNRoses" -> "happy-jihye/Cartoon-StyleGAN"
"mchong6/GANsNRoses" -> "rinongal/StyleGAN-nada"
"mchong6/GANsNRoses" -> "mit-han-lab/anycost-gan"
"mchong6/GANsNRoses" -> "orpatashnik/StyleCLIP"
"mchong6/GANsNRoses" -> "genforce/sefa"
"mchong6/GANsNRoses" -> "yangxy/GPEN"
"mchong6/GANsNRoses" -> "mchong6/JoJoGAN"
"mchong6/GANsNRoses" -> "LynnHo/EigenGAN-Tensorflow"
"mchong6/GANsNRoses" -> "yuval-alaluf/restyle-encoder"
"jacobgil/keras-dcgan" -> "bstriner/keras-adversarial"
"jacobgil/keras-dcgan" -> "osh/KerasGAN"
"jacobgil/keras-dcgan" -> "Newmu/dcgan_code"
"jacobgil/keras-dcgan" -> "tdeboissiere/DeepLearningImplementations"
"jacobgil/keras-dcgan" -> "bamos/dcgan-completion.tensorflow"
"jacobgil/keras-dcgan" -> "carpedm20/DCGAN-tensorflow"
"jacobgil/keras-dcgan" -> "openai/improved-gan"
"jacobgil/keras-dcgan" -> "martinarjovsky/WassersteinGAN"
"jacobgil/keras-dcgan" -> "heuritech/convnets-keras" ["e"=1]
"jacobgil/keras-dcgan" -> "soumith/dcgan.torch"
"jacobgil/keras-dcgan" -> "matthiasplappert/keras-rl" ["e"=1]
"jacobgil/keras-dcgan" -> "igul222/improved_wgan_training"
"jacobgil/keras-dcgan" -> "titu1994/Super-Resolution-using-Generative-Adversarial-Networks" ["e"=1]
"jacobgil/keras-dcgan" -> "basveeling/wavenet" ["e"=1]
"jacobgil/keras-dcgan" -> "raghakot/keras-resnet" ["e"=1]
"mrzhu-cool/pix2pix-pytorch" -> "znxlwm/pytorch-pix2pix"
"mrzhu-cool/pix2pix-pytorch" -> "taey16/pix2pix.pytorch"
"mrzhu-cool/pix2pix-pytorch" -> "taey16/pix2pixBEGAN.pytorch"
"mrzhu-cool/pix2pix-pytorch" -> "togheppi/pix2pix"
"mrzhu-cool/pix2pix-pytorch" -> "aitorzip/PyTorch-CycleGAN"
"mrzhu-cool/pix2pix-pytorch" -> "yunjey/mnist-svhn-transfer"
"mrzhu-cool/pix2pix-pytorch" -> "darkstar112358/fast-neural-style"
"mrzhu-cool/pix2pix-pytorch" -> "sunshineatnoon/Paper-Implementations"
"sapphire497/query-selected-attention" -> "CR-Gjx/SCC"
"sapphire497/query-selected-attention" -> "jcy132/Hneg_SRC"
"YadiraF/GAN_Theories" -> "YadiraF/GAN_Applications"
"YadiraF/GAN_Theories" -> "YadiraF/GAN"
"rtqichen/style-swap" -> "xunhuang1995/AdaIN-style"
"rtqichen/style-swap" -> "leongatys/NeuralImageSynthesis"
"rtqichen/style-swap" -> "DmitryUlyanov/texture_nets"
"rtqichen/style-swap" -> "LucasSheng/avatar-net"
"rtqichen/style-swap" -> "Yijunmaverick/UniversalStyleTransfer"
"rtqichen/style-swap" -> "chuanli11/CNNMRF"
"rtqichen/style-swap" -> "irasin/Pytorch_Style_Swap"
"rtqichen/style-swap" -> "eridgd/WCT-TF"
"rtqichen/style-swap" -> "benbenlijie/style_swap_tensorflow"
"rtqichen/style-swap" -> "sunshineatnoon/PytorchWCT"
"rtqichen/style-swap" -> "zhanghang1989/MSG-Net" ["e"=1]
"rtqichen/style-swap" -> "ycjing/Neural-Style-Transfer-Papers"
"rtqichen/style-swap" -> "msracver/Deep-Image-Analogy"
"rtqichen/style-swap" -> "chuanli11/MGANs"
"rtqichen/style-swap" -> "leehomyc/High-Res-Neural-Inpainting"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "ericjang/draw"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "andersbll/autoencoding_beyond_pixels"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "carpedm20/pixel-rnn-tensorflow"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "y0ast/VAE-TensorFlow" ["e"=1]
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "openai/improved-gan"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "hardmaru/cppn-gan-vae-tensorflow"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "buriburisuri/ebgan"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "jbornschein/draw" ["e"=1]
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "carpedm20/BEGAN-tensorflow"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "shekkizh/WassersteinGAN.tensorflow"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "buriburisuri/ac-gan"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "altosaar/vae" ["e"=1]
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "openai/InfoGAN"
"ikostrikov/TensorFlow-VAE-GAN-DRAW" -> "artcg/BEGAN"
"SKTBrain/DiscoGAN" -> "carpedm20/DiscoGAN-pytorch"
"SKTBrain/DiscoGAN" -> "reedscot/nips2016"
"SKTBrain/DiscoGAN" -> "duxingren14/DualGAN"
"SKTBrain/DiscoGAN" -> "carpedm20/BEGAN-tensorflow"
"SKTBrain/DiscoGAN" -> "fxia22/PixelDTGAN"
"SKTBrain/DiscoGAN" -> "yunjey/domain-transfer-network"
"SKTBrain/DiscoGAN" -> "Guim3/IcGAN"
"SKTBrain/DiscoGAN" -> "junyanz/BicycleGAN"
"SKTBrain/DiscoGAN" -> "Evolving-AI-Lab/ppgn"
"SKTBrain/DiscoGAN" -> "openai/improved-gan"
"SKTBrain/DiscoGAN" -> "martinarjovsky/WassersteinGAN"
"SKTBrain/DiscoGAN" -> "mingyuliutw/UNIT"
"SKTBrain/DiscoGAN" -> "hanzhanggit/StackGAN"
"SKTBrain/DiscoGAN" -> "SKTBrain/awesome-starcraftAI" ["e"=1]
"SKTBrain/DiscoGAN" -> "torrvision/crayon" ["e"=1]
"sangwoomo/instagan" -> "HsinYingLee/DRIT"
"sangwoomo/instagan" -> "lzhbrian/image-to-image-papers"
"sangwoomo/instagan" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"sangwoomo/instagan" -> "NVlabs/FUNIT"
"sangwoomo/instagan" -> "HelenMao/MSGAN"
"sangwoomo/instagan" -> "NVlabs/MUNIT"
"sangwoomo/instagan" -> "junyanz/BicycleGAN"
"sangwoomo/instagan" -> "mingyuliutw/UNIT"
"sangwoomo/instagan" -> "tengteng95/Pose-Transfer" ["e"=1]
"sangwoomo/instagan" -> "pfnet-research/sngan_projection"
"sangwoomo/instagan" -> "bearpaw/clothing-co-parsing" ["e"=1]
"sangwoomo/instagan" -> "Ha0Tang/SelectionGAN"
"sangwoomo/instagan" -> "ZPdesu/SEAN"
"sangwoomo/instagan" -> "yunjey/stargan"
"sangwoomo/instagan" -> "Ha0Tang/AttentionGAN"
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" -> "jinyeying/FogRemoval" ["e"=1]
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" -> "jinwan1994/SG-ShadowNet"
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" -> "KevinJ-Huang/BMNet"
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" -> "YingqingHe/Shadow-Removal-via-Generative-Priors"
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" -> "naoto0804/SynShadow"
"1991viet/QuickDraw" -> "1991viet/Very-deep-cnn-pytorch"
"1991viet/QuickDraw" -> "1991viet/Very-deep-cnn-tensorflow"
"1991viet/QuickDraw" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/QuickDraw" -> "1991viet/Hierarchical-attention-networks-pytorch"
"1991viet/QuickDraw" -> "1991viet/Character-level-cnn-pytorch"
"1991viet/QuickDraw" -> "CSAILVision/gandissect"
"shekkizh/WassersteinGAN.tensorflow" -> "Zardinality/WGAN-tensorflow"
"shekkizh/WassersteinGAN.tensorflow" -> "igul222/improved_wgan_training"
"shekkizh/WassersteinGAN.tensorflow" -> "martinarjovsky/WassersteinGAN"
"shekkizh/WassersteinGAN.tensorflow" -> "jiamings/wgan"
"shekkizh/WassersteinGAN.tensorflow" -> "carpedm20/BEGAN-tensorflow"
"shekkizh/WassersteinGAN.tensorflow" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"shekkizh/WassersteinGAN.tensorflow" -> "guojunq/lsgan"
"shekkizh/WassersteinGAN.tensorflow" -> "openai/improved-gan"
"shekkizh/WassersteinGAN.tensorflow" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"shekkizh/WassersteinGAN.tensorflow" -> "openai/InfoGAN"
"shekkizh/WassersteinGAN.tensorflow" -> "khanrc/tf.gans-comparison"
"shekkizh/WassersteinGAN.tensorflow" -> "buriburisuri/ac-gan"
"shekkizh/WassersteinGAN.tensorflow" -> "awjuliani/TF-Tutorials"
"shekkizh/WassersteinGAN.tensorflow" -> "sugyan/tf-dcgan"
"shekkizh/WassersteinGAN.tensorflow" -> "kuleshov/tf-wgan"
"zhenxuan00/triple-gan" -> "taki0112/TripleGAN-Tensorflow"
"zhenxuan00/triple-gan" -> "taufikxu/Triple-GAN"
"zhenxuan00/triple-gan" -> "LiqunChen0606/Triangle-GAN"
"zhenxuan00/triple-gan" -> "gitlimlab/SSGAN-Tensorflow"
"zhenxuan00/triple-gan" -> "kimiyoung/ssl_bad_gan" ["e"=1]
"zhenxuan00/triple-gan" -> "smlaine2/tempens" ["e"=1]
"dxyang/StyleTransfer" -> "ceshine/fast-neural-style"
"dxyang/StyleTransfer" -> "abhiskk/fast-neural-style"
"dxyang/StyleTransfer" -> "irasin/Pytorch_Style_Swap"
"GuoxianSong/AgileGAN" -> "danielroich/PTI"
"GuoxianSong/AgileGAN" -> "justinpinkney/toonify"
"GuoxianSong/AgileGAN" -> "omertov/encoder4editing"
"GuoxianSong/AgileGAN" -> "flyingbread-elon/AgileGAN"
"GuoxianSong/AgileGAN" -> "Tengfei-Wang/HFGI"
"GuoxianSong/AgileGAN" -> "PeterouZh/CIPS-3D"
"GuoxianSong/AgileGAN" -> "betterze/StyleSpace"
"GuoxianSong/AgileGAN" -> "mit-han-lab/anycost-gan"
"GuoxianSong/AgileGAN" -> "open-mmlab/MMGEN-FaceStylor" ["e"=1]
"GuoxianSong/AgileGAN" -> "naver-ai/StyleMapGAN"
"GuoxianSong/AgileGAN" -> "stylegan-human/StyleGAN-Human"
"bytedance/Hammer" -> "YingqingHe/interclassgan"
"bytedance/Hammer" -> "genforce/volumegan" ["e"=1]
"justinpinkney/awesome-pretrained-stylegan" -> "justinpinkney/awesome-pretrained-stylegan2"
"justinpinkney/awesome-pretrained-stylegan" -> "justinpinkney/awesome-pretrained-stylegan3"
"justinpinkney/awesome-pretrained-stylegan" -> "harskish/ganspace"
"justinpinkney/awesome-pretrained-stylegan" -> "rolux/stylegan2encoder"
"justinpinkney/awesome-pretrained-stylegan" -> "eps696/stylegan2"
"justinpinkney/awesome-pretrained-stylegan" -> "JCBrouwer/maua-stylegan2"
"justinpinkney/awesome-pretrained-stylegan" -> "dvschultz/ai"
"justinpinkney/awesome-pretrained-stylegan" -> "tg-bomze/StyleGAN2-Face-Modificator"
"justinpinkney/awesome-pretrained-stylegan" -> "k-l-lambda/stylegan-web"
"justinpinkney/awesome-pretrained-stylegan" -> "anvoynov/GANLatentDiscovery"
"justinpinkney/awesome-pretrained-stylegan" -> "betterze/StyleSpace"
"justinpinkney/awesome-pretrained-stylegan" -> "weihaox/awesome-gan-inversion"
"justinpinkney/awesome-pretrained-stylegan" -> "omertov/encoder4editing"
"justinpinkney/awesome-pretrained-stylegan" -> "sunniesuhyoung/DST"
"justinpinkney/awesome-pretrained-stylegan" -> "EvgenyKashin/stylegan2-distillation"
"mchong6/SOAT" -> "yuval-alaluf/hyperstyle"
"mchong6/SOAT" -> "omertov/encoder4editing"
"mchong6/SOAT" -> "jmliu88/HeSer" ["e"=1]
"mchong6/SOAT" -> "yuval-alaluf/stylegan3-editing"
"mchong6/SOAT" -> "seasonSH/SemanticStyleGAN"
"mchong6/SOAT" -> "danielroich/PTI"
"mchong6/SOAT" -> "zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["e"=1]
"mchong6/SOAT" -> "menyifang/DCT-Net"
"mchong6/SOAT" -> "onion-liu/BlendGAN"
"mchong6/SOAT" -> "yuval-alaluf/restyle-encoder"
"mchong6/SOAT" -> "betterze/StyleSpace"
"mchong6/SOAT" -> "rinongal/StyleGAN-nada"
"mchong6/SOAT" -> "LynnHo/EigenGAN-Tensorflow"
"mchong6/SOAT" -> "pschaldenbrand/StyleCLIPDraw"
"mchong6/SOAT" -> "stylegan-human/StyleGAN-Human"
"JVictorDias/AlgoritmoTecelao" -> "JVictorDias/ParticulasGravitacionais3D"
"JVictorDias/AlgoritmoTecelao" -> "JVictorDias/Spirograph"
"JVictorDias/AlgoritmoTecelao" -> "JVictorDias/HardestGameEditor"
"JVictorDias/AlgoritmoTecelao" -> "JVictorDias/HardestGame"
"JVictorDias/AlgoritmoTecelao" -> "JVictorDias/FlappIA-Bird"
"bendangnuksung/Image-OutPainting" -> "albertpumarola/GANimation"
"bendangnuksung/Image-OutPainting" -> "nyoki-mtl/pytorch-EverybodyDanceNow" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "CSAILVision/gandissect"
"bendangnuksung/Image-OutPainting" -> "dongjun-Lee/text-classification-models-tf"
"bendangnuksung/Image-OutPainting" -> "diux-dev/imagenet18" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "Pulkit-Khandelwal/Reinforcement-Learning-Notebooks" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "ShinyCode/image-outpainting"
"bendangnuksung/Image-OutPainting" -> "tensorflow/adanet" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "LMescheder/GAN_stability"
"bendangnuksung/Image-OutPainting" -> "NVIDIA/waveglow" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "jhfjhfj1/autokeras" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "luanfujun/deep-painterly-harmonization"
"bendangnuksung/Image-OutPainting" -> "google-research/exoplanet-ml" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "facebookresearch/DensePose" ["e"=1]
"bendangnuksung/Image-OutPainting" -> "NVIDIA/vid2vid"
"halfmonty/StringArtGenerator" -> "danielvarga/string-art"
"halfmonty/StringArtGenerator" -> "i-make-robots/weaving_algorithm"
"halfmonty/StringArtGenerator" -> "Quoteme/img2string"
"halfmonty/StringArtGenerator" -> "midare/string-knitting"
"halfmonty/StringArtGenerator" -> "theveloped/ThreadTone"
"halfmonty/StringArtGenerator" -> "Exception1984/StringArt"
"halfmonty/StringArtGenerator" -> "christiansiegel/knitter"
"halfmonty/StringArtGenerator" -> "piellardj/image-stylization-threading"
"halfmonty/StringArtGenerator" -> "kaspar98/StringArt"
"ckmarkoh/neuralart_tensorflow" -> "log0/neural-style-painting"
"ckmarkoh/neuralart_tensorflow" -> "woodrush/neural-art-tf"
"ckmarkoh/neuralart_tensorflow" -> "ckmarkoh/AcrosticPoem" ["e"=1]
"paulu/deepfeatinterp" -> "yingcong/Facelet_Bank"
"paulu/deepfeatinterp" -> "xcyan/eccv16_attr2img"
"ceciliavision/perceptual-reflection-removal" -> "Vandermode/ERRNet"
"ceciliavision/perceptual-reflection-removal" -> "fqnchina/CEILNet"
"ceciliavision/perceptual-reflection-removal" -> "csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity"
"ceciliavision/perceptual-reflection-removal" -> "JHL-HUST/IBCLN"
"ceciliavision/perceptual-reflection-removal" -> "yangj1e/bdn-refremv"
"ceciliavision/perceptual-reflection-removal" -> "NVlabs/ReflectNet"
"ceciliavision/perceptual-reflection-removal" -> "ChenyangLEI/flash-reflection-removal"
"ceciliavision/perceptual-reflection-removal" -> "zdlarr/Location-aware-SIRR"
"ceciliavision/perceptual-reflection-removal" -> "wanrenjie/CoRRN"
"ceciliavision/perceptual-reflection-removal" -> "ChenyangLEI/polarization-reflection-removal"
"ceciliavision/perceptual-reflection-removal" -> "sookim813/Reflection_removal_rendering"
"ceciliavision/perceptual-reflection-removal" -> "thongnguyendev/single_image"
"ceciliavision/perceptual-reflection-removal" -> "CQFIO/FastImageProcessing" ["e"=1]
"ceciliavision/perceptual-reflection-removal" -> "yyhz76/reflectSuppress"
"znxlwm/tensorflow-MNIST-cGAN-cDCGAN" -> "znxlwm/tensorflow-MNIST-GAN-DCGAN"
"znxlwm/tensorflow-MNIST-cGAN-cDCGAN" -> "zhangqianhui/Conditional-GAN"
"znxlwm/tensorflow-MNIST-cGAN-cDCGAN" -> "znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN"
"leido/pytorch-prednet" -> "zcrwind/PredNet_pytorch"
"bstriner/keras-adversarial" -> "jacobgil/keras-dcgan"
"bstriner/keras-adversarial" -> "osh/KerasGAN"
"bstriner/keras-adversarial" -> "tdeboissiere/DeepLearningImplementations"
"bstriner/keras-adversarial" -> "basveeling/wavenet" ["e"=1]
"bstriner/keras-adversarial" -> "matthiasplappert/keras-rl" ["e"=1]
"bstriner/keras-adversarial" -> "farizrahman4u/keras-contrib" ["e"=1]
"bstriner/keras-adversarial" -> "lukedeo/keras-acgan"
"bstriner/keras-adversarial" -> "jocicmarko/ultrasound-nerve-segmentation" ["e"=1]
"bstriner/keras-adversarial" -> "fchollet/keras-resources" ["e"=1]
"bstriner/keras-adversarial" -> "XifengGuo/CapsNet-Keras" ["e"=1]
"bstriner/keras-adversarial" -> "maxpumperla/hyperas" ["e"=1]
"bstriner/keras-adversarial" -> "bioinf-jku/SNNs"
"bstriner/keras-adversarial" -> "yhenon/keras-frcnn" ["e"=1]
"bstriner/keras-adversarial" -> "rcmalli/keras-squeezenet" ["e"=1]
"bstriner/keras-adversarial" -> "raghakot/keras-vis" ["e"=1]
"taki0112/SPADE-Tensorflow" -> "switchablenorms/CelebAMask-HQ"
"taki0112/SPADE-Tensorflow" -> "taki0112/StyleGAN-Tensorflow"
"taki0112/SPADE-Tensorflow" -> "ZPdesu/SEAN"
"taki0112/SPADE-Tensorflow" -> "taki0112/GAN_Metrics-Tensorflow"
"taki0112/SPADE-Tensorflow" -> "zllrunning/face-parsing.PyTorch"
"taki0112/SPADE-Tensorflow" -> "apchenstu/Facial_Details_Synthesis" ["e"=1]
"SystemErrorWang/FacialCartoonization" -> "zhen8838/AnimeStylized"
"SystemErrorWang/FacialCartoonization" -> "SystemErrorWang/White-box-Cartoonization"
"Chrispresso/SuperMarioBros-AI" -> "Chrispresso/SnakeAI"
"Yangyangii/GAN-Tutorial" -> "znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN"
"Yangyangii/GAN-Tutorial" -> "WICWIU/WICWIU" ["e"=1]
"Yangyangii/GAN-Tutorial" -> "proceduralia/pytorch-GAN-timeseries" ["e"=1]
"Yangyangii/GAN-Tutorial" -> "Yangyangii/pytorch-practice"
"taki0112/MUNIT-Tensorflow" -> "taki0112/DRIT-Tensorflow"
"taki0112/MUNIT-Tensorflow" -> "NVlabs/MUNIT"
"taki0112/MUNIT-Tensorflow" -> "taki0112/UNIT-Tensorflow"
"taki0112/MUNIT-Tensorflow" -> "shaoanlu/MUNIT-keras"
"taki0112/MUNIT-Tensorflow" -> "taki0112/StarGAN-Tensorflow"
"taki0112/MUNIT-Tensorflow" -> "gitlimlab/BicycleGAN-Tensorflow"
"taki0112/MUNIT-Tensorflow" -> "taki0112/Self-Attention-GAN-Tensorflow"
"taki0112/MUNIT-Tensorflow" -> "HsinYingLee/DRIT"
"taki0112/MUNIT-Tensorflow" -> "taki0112/Spectral_Normalization-Tensorflow"
"JonathanRaiman/tensorflow-infogan" -> "openai/InfoGAN"
"JonathanRaiman/tensorflow-infogan" -> "buriburisuri/supervised_infogan"
"YiWeiHuang-stack/Squirrel-RIFE" -> "Justin62628/RIFE_GUI"
"YiWeiHuang-stack/Squirrel-RIFE" -> "hzwer/arXiv2020-RIFE"
"YiWeiHuang-stack/Squirrel-RIFE" -> "nihui/rife-ncnn-vulkan" ["e"=1]
"imlixinyang/HiSD" -> "cv-rits/CoMoGAN"
"imlixinyang/HiSD" -> "mit-han-lab/anycost-gan"
"imlixinyang/HiSD" -> "Zhangjinso/PISE" ["e"=1]
"imlixinyang/HiSD" -> "omertov/encoder4editing"
"imlixinyang/HiSD" -> "naver-ai/StyleMapGAN"
"imlixinyang/HiSD" -> "genforce/sefa"
"imlixinyang/HiSD" -> "BillyXYB/TransEditor"
"imlixinyang/HiSD" -> "microsoft/CoCosNet" ["e"=1]
"imlixinyang/HiSD" -> "dukebw/LOHO"
"imlixinyang/HiSD" -> "genforce/ghfeat"
"imlixinyang/HiSD" -> "HsinYingLee/DRIT"
"imlixinyang/HiSD" -> "LynnHo/EigenGAN-Tensorflow"
"imlixinyang/HiSD" -> "ZPdesu/SEAN"
"imlixinyang/HiSD" -> "IIGROUP/TediGAN"
"imlixinyang/HiSD" -> "betterze/StyleSpace"
"google-research/tensor2robot" -> "timsainb/tensorflow2-generative-models"
"google-research/tensor2robot" -> "ranahanocka/MeshCNN" ["e"=1]
"google-research/tensor2robot" -> "StanfordVL/robosuite" ["e"=1]
"google-research/tensor2robot" -> "stepjam/RLBench" ["e"=1]
"google-research/tensor2robot" -> "google-research/ravens" ["e"=1]
"google-research/tensor2robot" -> "andyzeng/visual-pushing-grasping" ["e"=1]
"google-research/tensor2robot" -> "PKU-MARL/DexterousHands" ["e"=1]
"google-research/tensor2robot" -> "SudeepDasari/RoboNet" ["e"=1]
"google-research/tensor2robot" -> "benedekrozemberczki/awesome-decision-tree-papers" ["e"=1]
"google-research/tensor2robot" -> "araffin/robotics-rl-srl" ["e"=1]
"google-research/tensor2robot" -> "TDAmeritrade/stumpy" ["e"=1]
"google-research/tensor2robot" -> "vimalabs/VIMA" ["e"=1]
"google-research/tensor2robot" -> "microsoft/tensorwatch" ["e"=1]
"google-research/tensor2robot" -> "vitchyr/rlkit" ["e"=1]
"google-research/tensor2robot" -> "NVIDIA-Omniverse/Orbit" ["e"=1]
"bryandlee/naver-webtoon-faces" -> "bryandlee/stylegan2-encoder-pytorch"
"bryandlee/naver-webtoon-faces" -> "bryandlee/naver-webtoon-data"
"bryandlee/naver-webtoon-faces" -> "bryandlee/FreezeG"
"bryandlee/naver-webtoon-faces" -> "sunniesuhyoung/DST"
"bryandlee/naver-webtoon-faces" -> "rosinality/swapping-autoencoder-pytorch"
"bryandlee/naver-webtoon-faces" -> "happy-jihye/Cartoon-StyleGAN"
"oneThousand1000/non-hair-FFHQ" -> "oneThousand1000/HairMapper"
"oneThousand1000/non-hair-FFHQ" -> "CelebV-HQ/CelebV-HQ" ["e"=1]
"oneThousand1000/non-hair-FFHQ" -> "onion-liu/BlendGAN"
"oneThousand1000/non-hair-FFHQ" -> "danielroich/PTI"
"oneThousand1000/non-hair-FFHQ" -> "PeterWang512/GANWarping"
"nv-tlabs/datasetGAN_release" -> "nv-tlabs/editGAN_release"
"nv-tlabs/datasetGAN_release" -> "nv-tlabs/semanticGAN_code"
"nv-tlabs/datasetGAN_release" -> "Tengfei-Wang/HFGI"
"nv-tlabs/datasetGAN_release" -> "weihaox/awesome-gan-inversion"
"nv-tlabs/datasetGAN_release" -> "onion-liu/aahq-dataset"
"nv-tlabs/datasetGAN_release" -> "nupurkmr9/vision-aided-gan"
"nv-tlabs/datasetGAN_release" -> "yuval-alaluf/stylegan3-editing"
"nv-tlabs/datasetGAN_release" -> "InterDigitalInc/latent-transformer"
"BeautyGlow/BeautyGlow.github.io" -> "musyoku/chainer-glow"
"BeautyGlow/BeautyGlow.github.io" -> "sakurayamaki/Generating-makeup-image-with-BeautyGAN-using-web-camra"
"BeautyGlow/BeautyGlow.github.io" -> "baldFemale/beautyGAN-tf-Implement"
"Honlan/DMT" -> "masterkapilkumar/Digital-Makeup-Transfer"
"Honlan/DMT" -> "wangguanzhi/LADN"
"Honlan/DMT" -> "baldFemale/beautyGAN-tf-Implement"
"Honlan/DMT" -> "BeautyGlow/BeautyGlow.github.io"
"Honlan/DMT" -> "baldFemale/MakeupEmbeddingGAN-tf-Implement"
"Honlan/DMT" -> "Honlan/BeautyGAN"
"Honlan/DMT" -> "Siddharth24Khera/Auto_MakeUp_Transfer"
"Honlan/DMT" -> "srivatsan-ramesh/Virtual-Makeup"
"Honlan/DMT" -> "yan86471/DMT-implementation"
"Honlan/DMT" -> "jingyut/PairedCycleGan"
"Honlan/DMT" -> "huangzhikun1995/IPM-Net" ["e"=1]
"Honlan/DMT" -> "wtjiang98/PSGAN"
"Honlan/DMT" -> "wtjiang98/BeautyGAN_pytorch"
"Honlan/DMT" -> "TheMathWizard/Face-Makeup-by-Example"
"IGLICT/StylizedNeRF" -> "IGLICT/NeRF-Editing"
"IGLICT/StylizedNeRF" -> "ztex08010518/Stylizing-3D-Scene"
"IGLICT/StylizedNeRF" -> "IGLICT/TM-NET-Jittor"
"IGLICT/StylizedNeRF" -> "IGLICT/OctField"
"IGLICT/StylizedNeRF" -> "IGLICT/intrinsicSym-Jittor"
"IGLICT/StylizedNeRF" -> "IGLICT/DeepFaceVideoEditing"
"IGLICT/StylizedNeRF" -> "IGLICT/Stylemotion"
"IGLICT/StylizedNeRF" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/StylizedNeRF" -> "IGLICT/PRS-Net_stamp"
"IGLICT/StylizedNeRF" -> "IGLICT/TM-NET"
"IGLICT/StylizedNeRF" -> "IGLICT/DynamicHumanGeneration_Jittor"
"IGLICT/StylizedNeRF" -> "IGLICT/MeshPooling"
"IGLICT/StylizedNeRF" -> "IGLICT/PRS-Net"
"IGLICT/StylizedNeRF" -> "IGLICT/RisaNET"
"IGLICT/StylizedNeRF" -> "IGLICT/PRS-NET-Jittor"
"Snowfallingplum/SSAT" -> "AnonymScholar/SpMT"
"baldFemale/MakeupEmbeddingGAN-tf-Implement" -> "masterkapilkumar/Digital-Makeup-Transfer"
"baldFemale/MakeupEmbeddingGAN-tf-Implement" -> "baldFemale/beautyGAN-tf-Implement"
"diyiiyiii/StyTR-2" -> "HalbertCH/IEContraAST"
"diyiiyiii/StyTR-2" -> "Huage001/AdaAttN"
"diyiiyiii/StyTR-2" -> "pkuanjie/ArtFlow"
"diyiiyiii/StyTR-2" -> "diyiiyiii/Arbitrary-Style-Transfer-via-Multi-Adaptation-Network"
"diyiiyiii/StyTR-2" -> "YBZh/EFDM"
"diyiiyiii/StyTR-2" -> "JarrentWu1031/CCPL"
"diyiiyiii/StyTR-2" -> "Wxl-stars/PytorchStyleFormer"
"diyiiyiii/StyTR-2" -> "diyiiyiii/MCCNet"
"jingyut/PairedCycleGan" -> "zeligism/PairedCycleGAN"
"musyoku/chainer-glow" -> "BeautyGlow/BeautyGlow.github.io"
"musyoku/chainer-glow" -> "d-hacks/BeautyGlow"
"thaoshibe/awesome-makeup-transfer" -> "VinAIResearch/CPM"
"thaoshibe/awesome-makeup-transfer" -> "thaoshibe/BeautyGAN-PyTorch-reimplementation"
"thaoshibe/awesome-makeup-transfer" -> "Chenyu-Yang-2000/EleGANt"
"thaoshibe/awesome-makeup-transfer" -> "jingyut/PairedCycleGan"
"thaoshibe/awesome-makeup-transfer" -> "georgegu1997/makeup-transfer-public"
"wangguanzhi/LADN" -> "wtjiang98/BeautyGAN_pytorch"
"wangguanzhi/LADN" -> "BeautyGlow/BeautyGlow.github.io"
"wangguanzhi/LADN" -> "Honlan/DMT"
"wangguanzhi/LADN" -> "jingyut/PairedCycleGan"
"wangguanzhi/LADN" -> "wtjiang98/PSGAN"
"wangguanzhi/LADN" -> "baldFemale/beautyGAN-tf-Implement"
"wangguanzhi/LADN" -> "Honlan/BeautyGAN"
"wangguanzhi/LADN" -> "VinAIResearch/CPM"
"wangguanzhi/LADN" -> "georgegu1997/makeup-transfer-public"
"wangguanzhi/LADN" -> "ssarfraz/SPL"
"wangguanzhi/LADN" -> "huangzhikun1995/IPM-Net" ["e"=1]
"wangguanzhi/LADN" -> "TencentYoutuResearch/Adv-Makeup" ["e"=1]
"wangguanzhi/LADN" -> "AnonymScholar/SpMT"
"wangguanzhi/LADN" -> "thaoshibe/awesome-makeup-transfer"
"Chenyu-Yang-2000/EleGANt" -> "Yutong-Zhou-cv/Awesome-AI-in-Beauty-Industry"
"Chenyu-Yang-2000/EleGANt" -> "makeuptransfer/SCGAN"
"Chenyu-Yang-2000/EleGANt" -> "Snowfallingplum/SSAT"
"Chenyu-Yang-2000/EleGANt" -> "thaoshibe/awesome-makeup-transfer"
"Huage001/AdaAttN" -> "HalbertCH/IEContraAST"
"Huage001/AdaAttN" -> "GlebSBrykin/SANET"
"Huage001/AdaAttN" -> "Kibeom-Hong/Domain-Aware-Style-Transfer"
"Huage001/AdaAttN" -> "zyxElsa/CAST_pytorch"
"Huage001/AdaAttN" -> "diyiiyiii/StyTR-2"
"Huage001/AdaAttN" -> "diyiiyiii/MCCNet"
"Huage001/AdaAttN" -> "cyclomon/CLIPstyler"
"Huage001/AdaAttN" -> "diyiiyiii/Arbitrary-Style-Transfer-via-Multi-Adaptation-Network"
"Huage001/AdaAttN" -> "wzmsltw/AdaAttN"
"Huage001/AdaAttN" -> "neuralchen/awesome_style_transfer"
"Huage001/AdaAttN" -> "JarrentWu1031/CCPL"
"Huage001/AdaAttN" -> "nnaisense/conditional-style-transfer"
"Huage001/AdaAttN" -> "irasin/Pytorch_AdaIN"
"Huage001/AdaAttN" -> "Aaditya-Singh/SAFIN"
"Huage001/AdaAttN" -> "D1noFuzi/cmd_styletransfer"
"YBZh/EFDM" -> "lslrh/CPSL" ["e"=1]
"YBZh/EFDM" -> "GuoShi28/2StageAlign"
"YBZh/EFDM" -> "MinghanLi/MDQE_CVPR2023"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "togheppi/cDCGAN"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "malzantot/Pytorch-conditional-GANs"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "znxlwm/tensorflow-MNIST-cGAN-cDCGAN"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "znxlwm/pytorch-generative-model-collections"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "znxlwm/pytorch-pix2pix"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "Yangyangii/GAN-Tutorial"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "znxlwm/pytorch-CycleGAN"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "caogang/wgan-gp"
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" -> "facebookresearch/pytorch_GAN_zoo"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "alokwhitewolf/Pytorch-Attention-Guided-CycleGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "Ha0Tang/AttentionGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "HsinYingLee/DRIT"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "sangwoomo/instagan"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "Prinsphield/ELEGANT"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "Xiaoming-Yu/SingleGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "lzhbrian/image-to-image-papers"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "NVlabs/MUNIT"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "Ha0Tang/SelectionGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "yhlleo/uaggan"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "HsinYingLee/MDMM"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "HelenMao/MSGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "mingyuliutw/UNIT"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "junyanz/BicycleGAN"
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" -> "hyperplane-lab/ACL-GAN"
"alokwhitewolf/Pytorch-Attention-Guided-CycleGAN" -> "yhlleo/uaggan"
"alokwhitewolf/Pytorch-Attention-Guided-CycleGAN" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"jcy132/Hneg_SRC" -> "sapphire497/query-selected-attention"
"nkolkin13/STROTSS" -> "futscdav/strotss"
"nkolkin13/STROTSS" -> "sunshineatnoon/PytorchWCT"
"nkolkin13/STROTSS" -> "sunshineatnoon/LinearStyleTransfer"
"nkolkin13/STROTSS" -> "LucasSheng/avatar-net"
"nkolkin13/STROTSS" -> "Yijunmaverick/UniversalStyleTransfer"
"nkolkin13/STROTSS" -> "JianqiangRen/AAMS"
"nkolkin13/STROTSS" -> "sunniesuhyoung/DST"
"nkolkin13/STROTSS" -> "MingSun-Tse/Collaborative-Distillation"
"nkolkin13/STROTSS" -> "clovaai/WCT2"
"nkolkin13/STROTSS" -> "irasin/Pytorch_Style_Swap"
"nkolkin13/STROTSS" -> "LouieYang/stroke-controllable-fast-style-transfer"
"nkolkin13/STROTSS" -> "VinceMarron/style_transfer"
"nkolkin13/STROTSS" -> "WonwoongCho/GDWCT"
"AaronJny/DeepLearningExamples" -> "AaronJny/nerual_style_change"
"AaronJny/DeepLearningExamples" -> "AaronJny/pets_classifer"
"leongatys/DeepTextures" -> "mohamedkeid/Texture-Synthesis"
"leongatys/DeepTextures" -> "DmitryUlyanov/texture_nets"
"leongatys/DeepTextures" -> "leongatys/NeuralImageSynthesis"
"leongatys/DeepTextures" -> "jessemelpolio/non-stationary_texture_syn"
"leongatys/DeepTextures" -> "rtqichen/style-swap"
"huangzh13/StyleGAN.pytorch" -> "tomguluson92/StyleGAN_PyTorch"
"huangzh13/StyleGAN.pytorch" -> "rosinality/style-based-gan-pytorch"
"huangzh13/StyleGAN.pytorch" -> "lernapparat/lernapparat"
"huangzh13/StyleGAN.pytorch" -> "huangzh13/StyleGAN2.pytorch"
"huangzh13/StyleGAN.pytorch" -> "jacobhallberg/pytorch_stylegan_encoder"
"huangzh13/StyleGAN.pytorch" -> "SiskonEmilia/StyleGAN-PyTorch"
"huangzh13/StyleGAN.pytorch" -> "rosinality/stylegan2-pytorch"
"huangzh13/StyleGAN.pytorch" -> "pacifinapacific/StyleGAN_LatentEditor"
"huangzh13/StyleGAN.pytorch" -> "akanimax/pro_gan_pytorch"
"huangzh13/StyleGAN.pytorch" -> "microsoft/StyleSwin"
"huangzh13/StyleGAN.pytorch" -> "bryandlee/stylegan2-encoder-pytorch"
"LMescheder/GAN_stability" -> "pfnet-research/sngan_projection"
"LMescheder/GAN_stability" -> "AlexiaJM/RelativisticGAN"
"LMescheder/GAN_stability" -> "google/compare_gan"
"LMescheder/GAN_stability" -> "bioinf-jku/TTUR"
"LMescheder/GAN_stability" -> "openai/glow"
"LMescheder/GAN_stability" -> "rosinality/style-based-gan-pytorch"
"LMescheder/GAN_stability" -> "ajbrock/BigGAN-PyTorch"
"LMescheder/GAN_stability" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"LMescheder/GAN_stability" -> "HsinYingLee/DRIT"
"LMescheder/GAN_stability" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"LMescheder/GAN_stability" -> "NVlabs/MUNIT"
"LMescheder/GAN_stability" -> "mseitzer/pytorch-fid"
"LMescheder/GAN_stability" -> "tkarras/progressive_growing_of_gans"
"LMescheder/GAN_stability" -> "junyanz/BicycleGAN"
"LMescheder/GAN_stability" -> "huggingface/pytorch-pretrained-BigGAN"
"Lingchen-chen/Dynamic-Hair" -> "KeyuWu-CS/NeuralHDHair"
"Lingchen-chen/Dynamic-Hair" -> "papagina/HairNet_orient2D"
"MengZephyr/HairGANs" -> "papagina/HairNet_DataSetGeneration"
"MengZephyr/HairGANs" -> "suyuan945/HairNet"
"MengZephyr/HairGANs" -> "MrPhD/HairNet"
"MengZephyr/HairGANs" -> "papagina/HairNet_orient2D"
"MengZephyr/HairGANs" -> "Lingchen-chen/Dynamic-Hair"
"MengZephyr/HairGANs" -> "pielet/HairNet"
"MengZephyr/HairGANs" -> "iwanao731/ofxHairModel"
"VinAIResearch/HyperInverter" -> "sapphire497/style-transformer"
"raulrene/twitter-contest-js-bot" -> "analog-nico/twitter-reply-bot"
"Liuhongzhi2018/Image-Extrapolation" -> "zhenglab/spiralnet"
"Liuhongzhi2018/Image-Extrapolation" -> "recong/Boundless-in-Pytorch"
"Liuhongzhi2018/Image-Extrapolation" -> "dvlab-research/outpainting_srn"
"a312863063/Model-Swap-Face" -> "a312863063/Model-Swap-Face_v2"
"neuralchen/ASMAGAN" -> "AceSix/Knowledge_Transfer"
"neuralchen/ASMAGAN" -> "neuralchen/RainNet"
"Guim3/IcGAN" -> "facebookresearch/FaderNetworks"
"Guim3/IcGAN" -> "reedscot/nips2016"
"Guim3/IcGAN" -> "LynnHo/AttGAN-Tensorflow"
"Guim3/IcGAN" -> "guojunq/lsgan"
"Guim3/IcGAN" -> "Evolving-AI-Lab/ppgn"
"Guim3/IcGAN" -> "Prinsphield/ELEGANT"
"Guim3/IcGAN" -> "buriburisuri/ac-gan"
"Guim3/IcGAN" -> "ptrblck/prog_gans_pytorch_inference"
"Guim3/IcGAN" -> "fxia22/PixelDTGAN"
"Guim3/IcGAN" -> "xcyan/eccv16_attr2img"
"dong-x16/PortraitNet" -> "clovaai/ext_portrait_segmentation"
"dong-x16/PortraitNet" -> "anilsathyan7/Portrait-Segmentation"
"dong-x16/PortraitNet" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"dong-x16/PortraitNet" -> "hyperconnect/MMNet"
"dong-x16/PortraitNet" -> "lizhengwei1992/mobile_phone_human_matting"
"dong-x16/PortraitNet" -> "aisegmentcn/matting_human_datasets"
"dong-x16/PortraitNet" -> "HYOJINPARK/ExtPortraitSeg"
"dong-x16/PortraitNet" -> "yunkezhang/FusionMatting"
"dong-x16/PortraitNet" -> "lizhengwei1992/Semantic_Human_Matting"
"dong-x16/PortraitNet" -> "PetroWu/AutoPortraitMatting"
"dong-x16/PortraitNet" -> "Yaoyi-Li/GCA-Matting"
"dong-x16/PortraitNet" -> "wukaoliu/CVPR2020-HAttMatting"
"dong-x16/PortraitNet" -> "nolanliou/mobile-deeplab-v3-plus"
"dong-x16/PortraitNet" -> "poppinace/indexnet_matting"
"dong-x16/PortraitNet" -> "YexingWan/Fast-Portrait-Segmentation"
"assafshocher/ResizeRight" -> "GaParmar/clean-fid"
"assafshocher/ResizeRight" -> "chail/anyres-gan"
"assafshocher/ResizeRight" -> "universome/inr-gan"
"assafshocher/ResizeRight" -> "hubert0527/infinityGAN"
"assafshocher/ResizeRight" -> "jychoi118/ilvr_adm" ["e"=1]
"assafshocher/ResizeRight" -> "assafshocher/Resizer" ["e"=1]
"assafshocher/ResizeRight" -> "rosinality/alias-free-gan-pytorch"
"assafshocher/ResizeRight" -> "lucidrains/x-clip" ["e"=1]
"assafshocher/ResizeRight" -> "teddykoker/torchsort" ["e"=1]
"assafshocher/ResizeRight" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"takiyu/portrait_matting" -> "PetroWu/AutoPortraitMatting"
"takiyu/portrait_matting" -> "lizhengwei1992/Semantic_Human_Matting"
"takiyu/portrait_matting" -> "huochaitiantang/pytorch-deep-image-matting"
"takiyu/portrait_matting" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"takiyu/portrait_matting" -> "Corea/automatic-portrait-tf"
"takiyu/portrait_matting" -> "foamliu/Deep-Image-Matting"
"takiyu/portrait_matting" -> "CDOTAD/AlphaGAN-Matting"
"takiyu/portrait_matting" -> "Joker316701882/Deep-Image-Matting"
"takiyu/portrait_matting" -> "MarcoForte/closed-form-matting"
"takiyu/portrait_matting" -> "poppinace/indexnet_matting"
"takiyu/portrait_matting" -> "MarcoForte/knn-matting"
"takiyu/portrait_matting" -> "aisegmentcn/matting_human_datasets"
"takiyu/portrait_matting" -> "aromazyl/auto-portrait-matting"
"takiyu/portrait_matting" -> "hyperconnect/MMNet"
"takiyu/portrait_matting" -> "yunkezhang/FusionMatting"
"lmxyy/sige" -> "nupurkmr9/vision-aided-gan"
"lmxyy/sige" -> "justinpinkney/clip2latent"
"EzioBy/padinv" -> "YingqingHe/interclassgan"
"EzioBy/padinv" -> "EzioBy/glead"
"EzioBy/padinv" -> "InterDigitalInc/FeatureStyleEncoder"
"InterDigitalInc/FeatureStyleEncoder" -> "EzioBy/padinv"
"InterDigitalInc/FeatureStyleEncoder" -> "caopulan/GANInverter"
"Kibeom-Hong/Domain-Aware-Style-Transfer" -> "HalbertCH/IEContraAST"
"sunniesuhyoung/DST" -> "papulke/face-of-art"
"sunniesuhyoung/DST" -> "seasonSH/WarpGAN"
"sunniesuhyoung/DST" -> "futscdav/strotss"
"sunniesuhyoung/DST" -> "linjx-ustc1106/TuiGAN-PyTorch"
"sunniesuhyoung/DST" -> "HideUnderBush/UI2I_via_StyleGAN2"
"SSinyu/RED_CNN" -> "houguanqun/Low-Dose-CT-denoising"
"SSinyu/RED_CNN" -> "SSinyu/WGAN_VGG"
"SSinyu/RED_CNN" -> "xinario/SAGAN"
"SSinyu/RED_CNN" -> "eunh/low_dose_CT"
"SSinyu/RED_CNN" -> "hyeongyuy/CT-WGAN_VGG_tensorflow"
"hmshan/CPCE-3D" -> "hmshan/MAP-NN"
"i-make-robots/weaving_algorithm" -> "alyyousuf7/Weaver"
"i-make-robots/weaving_algorithm" -> "christiansiegel/knitter"
"i-make-robots/weaving_algorithm" -> "MaloDrougard/knit"
"i-make-robots/weaving_algorithm" -> "bdring/StringArt"
"nupurkmr9/vision-aided-gan" -> "chail/anyres-gan"
"nupurkmr9/vision-aided-gan" -> "PeterWang512/GANWarping"
"nupurkmr9/vision-aided-gan" -> "autonomousvision/stylegan_xl"
"nupurkmr9/vision-aided-gan" -> "lmxyy/sige"
"nupurkmr9/vision-aided-gan" -> "GaParmar/clean-fid"
"nupurkmr9/vision-aided-gan" -> "autonomousvision/projected_gan"
"nupurkmr9/vision-aided-gan" -> "yuval-alaluf/stylegan3-editing"
"nupurkmr9/vision-aided-gan" -> "wpeebles/gangealing"
"nupurkmr9/vision-aided-gan" -> "betterze/StyleAlign"
"nupurkmr9/vision-aided-gan" -> "naver-ai/GGDR"
"nupurkmr9/vision-aided-gan" -> "adobe-research/sam_inversion"
"nupurkmr9/vision-aided-gan" -> "weihaox/awesome-gan-inversion"
"nupurkmr9/vision-aided-gan" -> "microsoft/StyleSwin"
"nupurkmr9/vision-aided-gan" -> "generative-intelligence-lab/modelverse"
"nupurkmr9/vision-aided-gan" -> "phizaz/diffae" ["e"=1]
"SSinyu/WGAN-VGG" -> "SSinyu/RED-CNN"
"SSinyu/WGAN-VGG" -> "SSinyu/CT-Denoising-Review"
"SSinyu/WGAN-VGG" -> "hyeongyuy/CT-WGAN_VGG_tensorflow"
"SSinyu/WGAN-VGG" -> "SSinyu/CycleGAN-CT-Denoising"
"WonwoongCho/GDWCT" -> "taki0112/GDWCT-Tensorflow"
"bluestyle97/STGAN-pytorch" -> "elvisyjlin/AttGAN-PyTorch"
"bluestyle97/STGAN-pytorch" -> "csmliu/STGAN"
"fqnchina/CEILNet" -> "yangj1e/bdn-refremv"
"fqnchina/CEILNet" -> "ceciliavision/perceptual-reflection-removal"
"fqnchina/CEILNet" -> "Vandermode/ERRNet"
"fqnchina/CEILNet" -> "fqnchina/IntrinsicImage"
"fqnchina/CEILNet" -> "thongnguyendev/single_image"
"fqnchina/CEILNet" -> "JHL-HUST/IBCLN"
"fqnchina/CEILNet" -> "csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity"
"fqnchina/CEILNet" -> "NVlabs/ReflectNet"
"yitong91/StoryGAN" -> "jamesli1618/Obj-GAN"
"yitong91/StoryGAN" -> "CrickWu/Clevr-for-StoryGAN"
"yitong91/StoryGAN" -> "uvavision/Text2Scene"
"yitong91/StoryGAN" -> "qiaott/MirrorGAN"
"yitong91/StoryGAN" -> "lzhbrian/arbitrary-text-to-image-papers"
"yitong91/StoryGAN" -> "basiclab/CPCStoryVisualization-Pytorch"
"yitong91/StoryGAN" -> "adymaharana/VLCStoryGan"
"yitong91/StoryGAN" -> "eric-xw/AREL"
"adymaharana/VLCStoryGan" -> "adymaharana/StoryViz"
"kkanshul/finegan" -> "jwyang/lr-gan.pytorch" ["e"=1]
"kkanshul/finegan" -> "Yuheng-Li/MixNMatch"
"kkanshul/finegan" -> "ali-design/gan_steerability"
"GaParmar/clean-fid" -> "nupurkmr9/vision-aided-gan"
"GaParmar/clean-fid" -> "toshas/torch-fidelity" ["e"=1]
"GaParmar/clean-fid" -> "mseitzer/pytorch-fid"
"GaParmar/clean-fid" -> "mit-han-lab/data-efficient-gans"
"GaParmar/clean-fid" -> "weihaox/awesome-gan-inversion"
"GaParmar/clean-fid" -> "chail/anyres-gan"
"GaParmar/clean-fid" -> "ermongroup/SDEdit" ["e"=1]
"GaParmar/clean-fid" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"GaParmar/clean-fid" -> "wpeebles/gangealing"
"GaParmar/clean-fid" -> "mit-han-lab/anycost-gan"
"GaParmar/clean-fid" -> "PeterWang512/GANSketching"
"GaParmar/clean-fid" -> "NVlabs/edm" ["e"=1]
"GaParmar/clean-fid" -> "hubert0527/infinityGAN"
"GaParmar/clean-fid" -> "autonomousvision/projected_gan"
"GaParmar/clean-fid" -> "dorarad/gansformer"
"IVRL/GANLocalEditing" -> "YotamNitzan/ID-disentanglement"
"IVRL/GANLocalEditing" -> "betterze/StyleSpace"
"IVRL/GANLocalEditing" -> "anvoynov/GANLatentDiscovery"
"adobe-research/sam_inversion" -> "PeterWang512/GANWarping"
"adobe-research/sam_inversion" -> "EzioBy/padinv"
"adobe-research/sam_inversion" -> "sapphire497/style-transformer"
"adobe-research/sam_inversion" -> "zhujiapeng/resefa"
"betterze/StyleAlign" -> "thevoidname/Generalized-One-shot-GAN-Adaption"
"khanrc/tf.gans-comparison" -> "GKalliatakis/Delving-deep-into-GANs"
"khanrc/tf.gans-comparison" -> "carpedm20/BEGAN-tensorflow"
"khanrc/tf.gans-comparison" -> "Heumi/BEGAN-tensorflow"
"khanrc/tf.gans-comparison" -> "hwalsuklee/tensorflow-generative-model-collections"
"khanrc/tf.gans-comparison" -> "minhnhat93/tf-SNDCGAN"
"khanrc/tf.gans-comparison" -> "kodalinaveen3/DRAGAN"
"khanrc/tf.gans-comparison" -> "shekkizh/WassersteinGAN.tensorflow"
"khanrc/tf.gans-comparison" -> "pfnet-research/sngan_projection"
"khanrc/tf.gans-comparison" -> "sanghoon/tf-exercise-gan"
"khanrc/tf.gans-comparison" -> "carpedm20/simulated-unsupervised-tensorflow"
"khanrc/tf.gans-comparison" -> "GunhoChoi/Kind_PyTorch_Tutorial" ["e"=1]
"khanrc/tf.gans-comparison" -> "gitlimlab/SSGAN-Tensorflow"
"khanrc/tf.gans-comparison" -> "pfnet-research/chainer-gan-lib" ["e"=1]
"khanrc/tf.gans-comparison" -> "sjchoi86/dl_tutorials_10weeks" ["e"=1]
"khanrc/tf.gans-comparison" -> "google/compare_gan"
"mbartoli/neural-animation" -> "bamos/dream-art"
"mbartoli/neural-animation" -> "memisevic/artify"
"mbartoli/neural-animation" -> "DemetreJou/TeamRocket"
"mbartoli/neural-animation" -> "slakh96/no-mans-land"
"mbartoli/neural-animation" -> "larspars/neural-style-video"
"webtoon/matteformer" -> "yucornetto/MGMatting"
"webtoon/matteformer" -> "nowsyn/SIM"
"webtoon/matteformer" -> "JizhiziLi/GFM"
"webtoon/matteformer" -> "wchstrife/Awesome-Image-Matting"
"webtoon/matteformer" -> "ViTAE-Transformer/ViTAE-Transformer-Matting"
"webtoon/matteformer" -> "nowsyn/InstMatt"
"webtoon/matteformer" -> "Yaoyi-Li/GCA-Matting"
"DashBarkHuss/100-days-of-code" -> "Yuheng-Li/MixNMatch"
"DashBarkHuss/100-days-of-code" -> "abhat222/Data-Science-Tutorials" ["e"=1]
"DashBarkHuss/100-days-of-code" -> "alievk/avatarify-python"
"davidstap/AttnGAN" -> "Kyfafyd/MirrorGAN"
"1991viet/Character-level-cnn-tensorflow" -> "1991viet/Very-deep-cnn-tensorflow"
"1991viet/Character-level-cnn-tensorflow" -> "1991viet/Hierarchical-attention-networks-pytorch"
"1991viet/Character-level-cnn-tensorflow" -> "1991viet/Very-deep-cnn-pytorch"
"1991viet/Character-level-cnn-tensorflow" -> "1991viet/Character-level-cnn-pytorch"
"1991viet/character-level-cnn-pytorch" -> "1991viet/very-deep-cnn-pytorch"
"1991viet/character-level-cnn-pytorch" -> "1991viet/Deeplab-pytorch"
"1991viet/character-level-cnn-pytorch" -> "1991viet/Scalable-image-search-with-deep-image-representation"
"1991viet/very-deep-cnn-pytorch" -> "1991viet/character-level-cnn-pytorch"
"1991viet/very-deep-cnn-pytorch" -> "1991viet/Deeplab-pytorch"
"1991viet/very-deep-cnn-pytorch" -> "1991viet/Scalable-image-search-with-deep-image-representation"
"xcyan/eccv16_attr2img" -> "yt4766269/Attribute2Image"
"Yuheng-Li/MixNMatch" -> "kkanshul/finegan"
"Yuheng-Li/MixNMatch" -> "mit-han-lab/data-efficient-gans"
"Yuheng-Li/MixNMatch" -> "ZPdesu/SEAN"
"Yuheng-Li/MixNMatch" -> "rosinality/stylegan2-pytorch"
"Yuheng-Li/MixNMatch" -> "menyifang/ADGAN" ["e"=1]
"Yuheng-Li/MixNMatch" -> "saic-mdal/HiDT"
"Yuheng-Li/MixNMatch" -> "podgorskiy/ALAE"
"Yuheng-Li/MixNMatch" -> "NVlabs/imaginaire"
"Yuheng-Li/MixNMatch" -> "genforce/interfacegan"
"Yuheng-Li/MixNMatch" -> "RameenAbdal/StyleFlow"
"Yuheng-Li/MixNMatch" -> "NVlabs/MUNIT"
"Yuheng-Li/MixNMatch" -> "Ha0Tang/AttentionGAN"
"Yuheng-Li/MixNMatch" -> "genforce/mganprior"
"Yuheng-Li/MixNMatch" -> "lucidrains/lightweight-gan"
"Yuheng-Li/MixNMatch" -> "eladrich/pixel2style2pixel"
"wayaai/SimGAN" -> "carpedm20/simulated-unsupervised-tensorflow"
"wayaai/SimGAN" -> "wayaai/GAN-Sandbox"
"wayaai/SimGAN" -> "shinseung428/simGAN_NYU_Hand"
"wayaai/SimGAN" -> "rickyhan/SimGAN-Captcha" ["e"=1]
"wayaai/SimGAN" -> "osh/KerasGAN"
"wayaai/SimGAN" -> "buriburisuri/ac-gan"
"emilwallner/Deep-Learning-From-Scratch" -> "emilwallner/Deep-Learning-101"
"lucabergamini/VAEGAN-PYTORCH" -> "ry85/VAE-GAN"
"lucabergamini/VAEGAN-PYTORCH" -> "andersbll/autoencoding_beyond_pixels"
"lucabergamini/VAEGAN-PYTORCH" -> "zhangqianhui/vae-gan-tensorflow"
"lucabergamini/VAEGAN-PYTORCH" -> "anitan0925/vaegan"
"lucabergamini/VAEGAN-PYTORCH" -> "rohithreddy024/VAE-GAN-Pytorch" ["e"=1]
"lucabergamini/VAEGAN-PYTORCH" -> "seangal/dcgan_vae_pytorch" ["e"=1]
"lucabergamini/VAEGAN-PYTORCH" -> "crmaximo/VAEGAN"
"lucabergamini/VAEGAN-PYTORCH" -> "rishabhd786/VAE-GAN-PYTORCH"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "andersbll/autoencoding_beyond_pixels"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "zhangqianhui/vae-gan-tensorflow"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "JeremyCCHsu/tf-vaegan"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "shekkizh/WassersteinGAN.tensorflow"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "carpedm20/pixel-rnn-tensorflow"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "facebook/eyescream"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "anantzoid/Conditional-PixelCNN-decoder"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "IshmaelBelghazi/ALI"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "openai/improved-gan"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "artcg/BEGAN"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "openai/iaf"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "buriburisuri/supervised_infogan"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "carpedm20/BEGAN-tensorflow"
"timsainb/Tensorflow-MultiGPU-VAE-GAN" -> "y0ast/VAE-TensorFlow" ["e"=1]
"yunkezhang/TCVOM" -> "nowsyn/DVM"
"yunkezhang/TCVOM" -> "yunkezhang/TCVOM-TGM"
"thenewboston-developers/Payment-Processor" -> "thenewboston-developers/Validator"
"thenewboston-developers/Payment-Processor" -> "thenewboston-developers/Website-API"
"thenewboston-developers/Payment-Processor" -> "thenewboston-developers/Bank"
"thenewboston-developers/Payment-Processor" -> "thenewboston-developers/thenewboston-python"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/2048-AI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/PacNeat"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Flappy-Bird-AI"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/PacmanGame"
"Code-Bullet/RubiksCubeAI" -> "Code-Bullet/Piano-Tiles"
"harveyslash/Deep-Image-Analogy-PyTorch" -> "Ben-Louis/Deep-Image-Analogy-PyTorch"
"crcrpar/pytorch.sngan_projection" -> "pfnet-research/sngan_projection"
"edouardelasalles/srvp" -> "kaanakan/slamp"
"lzhbrian/arbitrary-text-to-image-papers" -> "qiaott/MirrorGAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "ypxie/HDGan"
"lzhbrian/arbitrary-text-to-image-papers" -> "jamesli1618/Obj-GAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "aelnouby/Text-to-Image-Synthesis"
"lzhbrian/arbitrary-text-to-image-papers" -> "tohinz/multiple-objects-gan"
"lzhbrian/arbitrary-text-to-image-papers" -> "MinfengZhu/DM-GAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "yitong91/StoryGAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"lzhbrian/arbitrary-text-to-image-papers" -> "davidstap/AttnGAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "hanzhanggit/StackGAN-Pytorch"
"lzhbrian/arbitrary-text-to-image-papers" -> "taoxugit/AttnGAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "mrlibw/ControlGAN"
"lzhbrian/arbitrary-text-to-image-papers" -> "woozzu/tagan"
"lzhbrian/arbitrary-text-to-image-papers" -> "hanzhanggit/StackGAN-v2"
"saic-mdal/CIPS" -> "universome/inr-gan"
"saic-mdal/CIPS" -> "universome/alis"
"saic-mdal/CIPS" -> "EmilienDupont/neural-function-distributions"
"saic-mdal/CIPS" -> "vglsd/ScaleParty"
"taki0112/StyleGAN-Tensorflow" -> "moono/stylegan-reproduced"
"taki0112/StyleGAN-Tensorflow" -> "taki0112/SPADE-Tensorflow"
"taki0112/StyleGAN-Tensorflow" -> "FrancescoSaverioZuppichini/PytorchModuleStorage" ["e"=1]
"taki0112/StyleGAN-Tensorflow" -> "manicman1999/StyleGAN2-Tensorflow-2.0"
"taki0112/StyleGAN-Tensorflow" -> "danielkunin/Deeplearning-Visualizations" ["e"=1]
"taki0112/StyleGAN-Tensorflow" -> "nolan-dev/GANInterface"
"taki0112/StyleGAN-Tensorflow" -> "prichemond/imperialmathslides" ["e"=1]
"taki0112/StyleGAN-Tensorflow" -> "btgraham/Batchwise-Dropout" ["e"=1]
"taki0112/StyleGAN-Tensorflow" -> "prichemond/ds3" ["e"=1]
"zhangqianhui/GazeCorrection" -> "zhangqianhui/GazeAnimation"
"zhangqianhui/GazeCorrection" -> "chihfanhsu/gaze_correction"
"zhangqianhui/GazeCorrection" -> "HzDmS/gaze_redirection"
"zhangqianhui/GazeCorrection" -> "zhangqianhui/Exemplar-GAN-Eye-Inpainting-Tensorflow"
"zhangqianhui/GazeCorrection" -> "bdol/exemplar_gans"
"GKalliatakis/Delving-deep-into-GANs" -> "khanrc/tf.gans-comparison"
"GKalliatakis/Delving-deep-into-GANs" -> "nightrome/really-awesome-gan"
"GKalliatakis/Delving-deep-into-GANs" -> "openai/improved-gan"
"GKalliatakis/Delving-deep-into-GANs" -> "carpedm20/BEGAN-tensorflow"
"GKalliatakis/Delving-deep-into-GANs" -> "hollobit/All-About-the-GAN"
"GKalliatakis/Delving-deep-into-GANs" -> "wiseodd/generative-models"
"GKalliatakis/Delving-deep-into-GANs" -> "dongb5/GAN-Timeline"
"GKalliatakis/Delving-deep-into-GANs" -> "tdeboissiere/DeepLearningImplementations"
"GKalliatakis/Delving-deep-into-GANs" -> "hwalsuklee/tensorflow-generative-model-collections"
"GKalliatakis/Delving-deep-into-GANs" -> "buriburisuri/ac-gan"
"GKalliatakis/Delving-deep-into-GANs" -> "zhangqianhui/AdversarialNetsPapers"
"GKalliatakis/Delving-deep-into-GANs" -> "igul222/improved_wgan_training"
"GKalliatakis/Delving-deep-into-GANs" -> "martinarjovsky/WassersteinGAN"
"GKalliatakis/Delving-deep-into-GANs" -> "shekkizh/WassersteinGAN.tensorflow"
"GKalliatakis/Delving-deep-into-GANs" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"zhangqianhui/Exemplar-GAN-Eye-Inpainting-Tensorflow" -> "bdol/exemplar_gans"
"coxlab/prednet" -> "dyelax/Adversarial_Video_Generation"
"coxlab/prednet" -> "rubenvillegas/iclr2017mcnet"
"coxlab/prednet" -> "leido/pytorch-prednet"
"coxlab/prednet" -> "alexlee-gk/video_prediction"
"coxlab/prednet" -> "coupriec/VideoPredictionICLR2016"
"coxlab/prednet" -> "Yunbo426/predrnn-pp" ["e"=1]
"coxlab/prednet" -> "cvondrick/videogan"
"coxlab/prednet" -> "emansim/unsupervised-videos"
"coxlab/prednet" -> "loliverhennigh/Convolutional-LSTM-in-Tensorflow" ["e"=1]
"coxlab/prednet" -> "brain-research/long-term-video-prediction-without-supervision"
"coxlab/prednet" -> "edenton/drnet"
"coxlab/prednet" -> "carlthome/tensorflow-convlstm-cell" ["e"=1]
"coxlab/prednet" -> "StevenLiuWen/ano_pred_cvpr2018" ["e"=1]
"coxlab/prednet" -> "edenton/svg"
"coxlab/prednet" -> "Atcold/pytorch-CortexNet"
"hardmaru/cppn-gan-vae-tensorflow" -> "hardmaru/cppn-tensorflow" ["e"=1]
"hardmaru/cppn-gan-vae-tensorflow" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"hardmaru/cppn-gan-vae-tensorflow" -> "altosaar/vae" ["e"=1]
"hardmaru/cppn-gan-vae-tensorflow" -> "hardmaru/resnet-cppn-gan-tensorflow"
"hardmaru/cppn-gan-vae-tensorflow" -> "ericjang/draw"
"hardmaru/cppn-gan-vae-tensorflow" -> "hardmaru/cppn-gan-vae-cifar-tensorflow"
"hardmaru/cppn-gan-vae-tensorflow" -> "andersbll/autoencoding_beyond_pixels"
"richzhang/colorization-pytorch" -> "MarkMoHR/Awesome-Image-Colorization"
"richzhang/colorization-pytorch" -> "msracver/Deep-Exemplar-based-Colorization"
"richzhang/colorization-pytorch" -> "junyanz/interactive-deep-colorization"
"richzhang/colorization-pytorch" -> "ericsujw/InstColorization"
"richzhang/colorization-pytorch" -> "pvitoria/ChromaGAN"
"richzhang/colorization-pytorch" -> "richzhang/colorization"
"richzhang/colorization-pytorch" -> "ImagingLab/Colorizing-with-GANs"
"richzhang/colorization-pytorch" -> "ChenyangLEI/Fully-Automatic-Video-Colorization-with-Self-Regularization-and-Diversity"
"richzhang/colorization-pytorch" -> "SerialLain3170/Colorization" ["e"=1]
"richzhang/colorization-pytorch" -> "Armour/Automatic-Image-Colorization"
"richzhang/colorization-pytorch" -> "orashi/AlacGAN" ["e"=1]
"richzhang/colorization-pytorch" -> "zeruniverse/neural-colorization"
"richzhang/colorization-pytorch" -> "gustavla/autocolorize"
"richzhang/colorization-pytorch" -> "xuzhongyou/Colorization"
"richzhang/colorization-pytorch" -> "blandocs/Tag2Pix" ["e"=1]
"shaohua0116/Activation-Visualization-Histogram" -> "bioinf-jku/SNNs"
"shaohua0116/Activation-Visualization-Histogram" -> "wookayin/tensorflow-plot"
"shaohua0116/Activation-Visualization-Histogram" -> "shaohua0116/SSGAN-Tensorflow"
"akirasosa/mobile-semantic-segmentation" -> "vfa-tranhv/MobileAILab-HairColor-iOS"
"akirasosa/mobile-semantic-segmentation" -> "MSiam/TFSegmentation" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "ansleliu/LightNet" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "tantara/JejuNet"
"akirasosa/mobile-semantic-segmentation" -> "YuvalNirkin/face_segmentation" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "Tramac/Lightweight-Segmentation" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"akirasosa/mobile-semantic-segmentation" -> "anilsathyan7/Portrait-Segmentation"
"akirasosa/mobile-semantic-segmentation" -> "PetroWu/AutoPortraitMatting"
"akirasosa/mobile-semantic-segmentation" -> "lizhengwei1992/mobile_phone_human_matting"
"akirasosa/mobile-semantic-segmentation" -> "YBIGTA/pytorch-hair-segmentation"
"akirasosa/mobile-semantic-segmentation" -> "wpf535236337/real-time-network" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "bonlime/keras-deeplab-v3-plus" ["e"=1]
"akirasosa/mobile-semantic-segmentation" -> "dong-x16/PortraitNet"
"akirasosa/mobile-semantic-segmentation" -> "hollance/YOLO-CoreML-MPSNNGraph" ["e"=1]
"tobran/DF-GAN" -> "Ha0Tang/BiGraphGAN"
"tobran/DF-GAN" -> "zhangqianhui/GazeAnimation"
"tobran/DF-GAN" -> "Ha0Tang/XingGAN"
"tobran/DF-GAN" -> "MinfengZhu/DM-GAN"
"tobran/DF-GAN" -> "wtliao/text2image"
"tobran/DF-GAN" -> "mrlibw/ControlGAN"
"tobran/DF-GAN" -> "google-research/xmcgan_image_generation"
"tobran/DF-GAN" -> "dongdongdong666/CPGAN"
"tobran/DF-GAN" -> "IIGROUP/TediGAN"
"tobran/DF-GAN" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"tobran/DF-GAN" -> "huiyegit/T2I_CL"
"tobran/DF-GAN" -> "davidstap/AttnGAN"
"tobran/DF-GAN" -> "taoxugit/AttnGAN"
"tobran/DF-GAN" -> "Ha0Tang/GestureGAN"
"mxgmn/SynTex" -> "mxgmn/ConvChain"
"mxgmn/SynTex" -> "rmitton/rjm" ["e"=1]
"mxgmn/SynTex" -> "BrianSharpe/GPU-Noise-Lib" ["e"=1]
"mxgmn/SynTex" -> "karimnaaji/3d-quickhull" ["e"=1]
"mxgmn/SynTex" -> "JodiTheTigger/sewing" ["e"=1]
"mxgmn/SynTex" -> "Auburns/FastNoiseSIMD" ["e"=1]
"mxgmn/SynTex" -> "prideout/par" ["e"=1]
"samim23/DeepDreamAnim" -> "graphific/DeepDreamVideo"
"samim23/DeepDreamAnim" -> "kesara/deepdreamer"
"samim23/DeepDreamAnim" -> "ryankennedyio/deep-dream-generator"
"samim23/DeepDreamAnim" -> "VISIONAI/clouddream"
"samim23/DeepDreamAnim" -> "jcjohnson/cnn-vis"
"samim23/DeepDreamAnim" -> "317070/Twitch-plays-LSD-neural-net"
"samim23/DeepDreamAnim" -> "jrosebr1/bat-country"
"samim23/DeepDreamAnim" -> "facebook/eyescream"
"samim23/DeepDreamAnim" -> "Dhar/image-dreamer"
"samim23/DeepDreamAnim" -> "OverStruck/deep-dream-maker"
"samim23/DeepDreamAnim" -> "samim23/DeepDreamMusicVideo"
"RoyWheels/stylegan2-ada" -> "aydao/stylegan2-surgery"
"pavlovml/match" -> "ascribe/image-match"
"pavlovml/match" -> "LoyaltyNZ/alchemy-framework"
"pavlovml/match" -> "alehander42/pseudo"
"bes-dev/MobileStyleGAN.pytorch" -> "mit-han-lab/anycost-gan"
"bes-dev/MobileStyleGAN.pytorch" -> "ZPdesu/SEAN"
"bes-dev/MobileStyleGAN.pytorch" -> "yuval-alaluf/hyperstyle"
"bes-dev/MobileStyleGAN.pytorch" -> "omertov/encoder4editing"
"bes-dev/MobileStyleGAN.pytorch" -> "danielroich/PTI"
"bes-dev/MobileStyleGAN.pytorch" -> "onion-liu/BlendGAN"
"bes-dev/MobileStyleGAN.pytorch" -> "rosinality/stylegan2-pytorch"
"bes-dev/MobileStyleGAN.pytorch" -> "yuval-alaluf/restyle-encoder"
"bes-dev/MobileStyleGAN.pytorch" -> "genforce/idinvert_pytorch"
"bes-dev/MobileStyleGAN.pytorch" -> "rosinality/alias-free-gan-pytorch"
"bes-dev/MobileStyleGAN.pytorch" -> "eladrich/pixel2style2pixel"
"bes-dev/MobileStyleGAN.pytorch" -> "mit-han-lab/gan-compression"
"bes-dev/MobileStyleGAN.pytorch" -> "chaofengc/PSFRGAN" ["e"=1]
"bes-dev/MobileStyleGAN.pytorch" -> "EvgenyKashin/stylegan2-distillation"
"bes-dev/MobileStyleGAN.pytorch" -> "nupurkmr9/vision-aided-gan"
"Evolving-AI-Lab/synthesizing" -> "Evolving-AI-Lab/ppgn"
"Evolving-AI-Lab/synthesizing" -> "guojunq/lsgan"
"Evolving-AI-Lab/synthesizing" -> "Evolving-AI-Lab/fooling" ["e"=1]
"Evolving-AI-Lab/synthesizing" -> "reedscot/nips2016"
"Evolving-AI-Lab/synthesizing" -> "skaae/torch-gan" ["e"=1]
"Evolving-AI-Lab/synthesizing" -> "facebook/eyescream"
"Evolving-AI-Lab/synthesizing" -> "cvondrick/videogan"
"Evolving-AI-Lab/synthesizing" -> "reedscot/icml2016"
"Evolving-AI-Lab/synthesizing" -> "xiaolonw/ss-gan"
"Evolving-AI-Lab/synthesizing" -> "chuanli11/CNNMRF"
"Evolving-AI-Lab/synthesizing" -> "aleju/cat-generator"
"Evolving-AI-Lab/synthesizing" -> "tonywu95/eval_gen"
"Evolving-AI-Lab/synthesizing" -> "Guim3/IcGAN"
"Evolving-AI-Lab/synthesizing" -> "Evolving-AI-Lab/mfv"
"Evolving-AI-Lab/synthesizing" -> "zo7/facegen"
"gitlimlab/BicycleGAN-Tensorflow" -> "kvmanohar22/img2imgGAN"
"gitlimlab/BicycleGAN-Tensorflow" -> "gitlimlab/FeatureControlHRL-Tensorflow"
"gitlimlab/BicycleGAN-Tensorflow" -> "gitlimlab/CycleGAN-Tensorflow"
"gitlimlab/BicycleGAN-Tensorflow" -> "gitlimlab/DiscoGAN-Tensorflow"
"leongatys/NeuralImageSynthesis" -> "leongatys/fast-neural-style"
"leongatys/NeuralImageSynthesis" -> "rtqichen/style-swap"
"leongatys/NeuralImageSynthesis" -> "ProGamerGov/Neural-Tools"
"leongatys/NeuralImageSynthesis" -> "ProGamerGov/Torch-Models"
"leongatys/NeuralImageSynthesis" -> "chuanli11/MGANs"
"rkjones4/GANGogh" -> "rodrigobdz/GANGogh"
"rkjones4/GANGogh" -> "robbiebarrat/art-DCGAN"
"rkjones4/GANGogh" -> "mlberkeley/Creative-Adversarial-Networks"
"rkjones4/GANGogh" -> "cs-chan/ArtGAN"
"rkjones4/GANGogh" -> "ak9250/stylegan-art"
"martinbenson/deep-photo-styletransfer" -> "ProGamerGov/Neural-Tools"
"martinbenson/deep-photo-styletransfer" -> "szagoruyko/neural-style-autograd"
"DmitryUlyanov/AGE" -> "stormraiser/GAN-weight-norm"
"DmitryUlyanov/AGE" -> "guojunq/lsgan"
"DmitryUlyanov/AGE" -> "alexis-jacq/Pytorch-Tutorials"
"DmitryUlyanov/AGE" -> "victor-shepardson/alpha-GAN"
"DmitryUlyanov/AGE" -> "kimhc6028/forward-thinking-pytorch"
"DmitryUlyanov/AGE" -> "carpedm20/BEGAN-pytorch"
"DmitryUlyanov/texture_nets" -> "chuanli11/CNNMRF"
"DmitryUlyanov/texture_nets" -> "yusuketomoto/chainer-fast-neuralstyle"
"DmitryUlyanov/texture_nets" -> "jcjohnson/fast-neural-style"
"DmitryUlyanov/texture_nets" -> "rtqichen/style-swap"
"DmitryUlyanov/texture_nets" -> "chuanli11/MGANs"
"DmitryUlyanov/texture_nets" -> "manuelruder/artistic-videos"
"DmitryUlyanov/texture_nets" -> "xunhuang1995/AdaIN-style"
"DmitryUlyanov/texture_nets" -> "leongatys/DeepTextures"
"DmitryUlyanov/texture_nets" -> "ycjing/Neural-Style-Transfer-Papers"
"DmitryUlyanov/texture_nets" -> "facebook/eyescream"
"DmitryUlyanov/texture_nets" -> "szagoruyko/loadcaffe" ["e"=1]
"DmitryUlyanov/texture_nets" -> "DmitryUlyanov/fast-neural-doodle"
"DmitryUlyanov/texture_nets" -> "facebook/fb.resnet.torch" ["e"=1]
"DmitryUlyanov/texture_nets" -> "skaae/torch-gan" ["e"=1]
"DmitryUlyanov/texture_nets" -> "soumith/dcgan.torch"
"woozzu/dong_iccv_2017" -> "woozzu/tagan"
"richzhang/webpage-template" -> "stevliu/editnerf" ["e"=1]
"richzhang/webpage-template" -> "chail/anyres-gan"
"richzhang/webpage-template" -> "GaParmar/clean-fid"
"richzhang/webpage-template" -> "PeterWang512/GANWarping"
"richzhang/webpage-template" -> "nupurkmr9/vision-aided-gan"
"richzhang/webpage-template" -> "nerfies/nerfies.github.io" ["e"=1]
"richzhang/webpage-template" -> "wpeebles/G.pt"
"richzhang/webpage-template" -> "TengdaHan/TemporalAlignNet" ["e"=1]
"SSinyu/RED-CNN" -> "SSinyu/WGAN-VGG"
"SSinyu/RED-CNN" -> "SSinyu/CT-Denoising-Review"
"emilwallner/How-to-learn-Deep-Learning" -> "emilwallner/Deep-Learning-101"
"emilwallner/How-to-learn-Deep-Learning" -> "emilwallner/Deep-Learning-From-Scratch"
"emilwallner/How-to-learn-Deep-Learning" -> "emilwallner/Coloring-greyscale-images"
"emilwallner/How-to-learn-Deep-Learning" -> "emilwallner/Screenshot-to-code" ["e"=1]
"emilwallner/How-to-learn-Deep-Learning" -> "zzsza/Kaggle-knowhow" ["e"=1]
"emilwallner/How-to-learn-Deep-Learning" -> "emilwallner/Emil-Wallner-LinkedIn-Resume"
"qiaott/MirrorGAN" -> "MinfengZhu/DM-GAN"
"qiaott/MirrorGAN" -> "komiya-m/MirrorGAN"
"qiaott/MirrorGAN" -> "mrlibw/ControlGAN"
"qiaott/MirrorGAN" -> "qiaott/LeicaGAN"
"qiaott/MirrorGAN" -> "lzhbrian/arbitrary-text-to-image-papers"
"qiaott/MirrorGAN" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"qiaott/MirrorGAN" -> "ypxie/HDGan"
"qiaott/MirrorGAN" -> "jamesli1618/Obj-GAN"
"qiaott/MirrorGAN" -> "tohinz/multiple-objects-gan"
"qiaott/MirrorGAN" -> "woozzu/tagan"
"qiaott/MirrorGAN" -> "yitong91/StoryGAN"
"HelenMao/MSGAN" -> "HsinYingLee/DRIT"
"HelenMao/MSGAN" -> "Ha0Tang/SelectionGAN"
"HelenMao/MSGAN" -> "sangwoomo/instagan"
"HelenMao/MSGAN" -> "Xiaoming-Yu/DMIT"
"HelenMao/MSGAN" -> "sbarratt/inception-score-pytorch"
"HelenMao/MSGAN" -> "lzhbrian/image-to-image-papers"
"HelenMao/MSGAN" -> "bioinf-jku/TTUR"
"HelenMao/MSGAN" -> "WonwoongCho/GDWCT"
"HelenMao/MSGAN" -> "junyanz/BicycleGAN"
"HelenMao/MSGAN" -> "NVlabs/FUNIT"
"HelenMao/MSGAN" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"HelenMao/MSGAN" -> "TAMU-VITA/AutoGAN" ["e"=1]
"HelenMao/MSGAN" -> "ali-design/gan_steerability"
"HelenMao/MSGAN" -> "NVlabs/MUNIT"
"HelenMao/MSGAN" -> "google/compare_gan"
"LynnHo/EigenGAN-Tensorflow" -> "bryandlee/eigengan-pytorch"
"LynnHo/EigenGAN-Tensorflow" -> "genforce/sefa"
"LynnHo/EigenGAN-Tensorflow" -> "imlixinyang/HiSD"
"LynnHo/EigenGAN-Tensorflow" -> "mchong6/SOAT"
"LynnHo/EigenGAN-Tensorflow" -> "omertov/encoder4editing"
"LynnHo/EigenGAN-Tensorflow" -> "zhujiapeng/LowRankGAN"
"LynnHo/EigenGAN-Tensorflow" -> "LynnHo/PA-GAN-Tensorflow"
"LynnHo/EigenGAN-Tensorflow" -> "yuval-alaluf/stylegan3-editing"
"LynnHo/EigenGAN-Tensorflow" -> "IIGROUP/TediGAN"
"LynnHo/EigenGAN-Tensorflow" -> "anvoynov/GANLatentDiscovery"
"gitlimlab/SSGAN-Tensorflow" -> "LDOUBLEV/semi-supervised-GAN" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "zhenxuan00/triple-gan"
"gitlimlab/SSGAN-Tensorflow" -> "openai/improved-gan"
"gitlimlab/SSGAN-Tensorflow" -> "buriburisuri/ac-gan"
"gitlimlab/SSGAN-Tensorflow" -> "gitlimlab/Generative-Latent-Optimization-Tensorflow"
"gitlimlab/SSGAN-Tensorflow" -> "tmadl/semisup-learn" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "kimiyoung/ssl_bad_gan" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "smlaine2/tempens" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "dpkingma/nips14-ssl" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "khanrc/tf.gans-comparison"
"gitlimlab/SSGAN-Tensorflow" -> "larsmaaloee/auxiliary-deep-generative-models" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "yburda/iwae" ["e"=1]
"gitlimlab/SSGAN-Tensorflow" -> "taki0112/Self-Attention-GAN-Tensorflow"
"gitlimlab/SSGAN-Tensorflow" -> "IshmaelBelghazi/ALI"
"gitlimlab/SSGAN-Tensorflow" -> "saemundsson/semisupervised_vae" ["e"=1]
"leehomyc/High-Res-Neural-Inpainting" -> "pathak22/context-encoder" ["e"=1]
"leehomyc/High-Res-Neural-Inpainting" -> "rtqichen/style-swap"
"leehomyc/High-Res-Neural-Inpainting" -> "xiaolonw/ss-gan"
"leehomyc/High-Res-Neural-Inpainting" -> "chuanli11/CNNMRF"
"leehomyc/High-Res-Neural-Inpainting" -> "PrajitR/fast-pixel-cnn"
"leehomyc/High-Res-Neural-Inpainting" -> "moodoki/semantic_image_inpainting" ["e"=1]
"leehomyc/High-Res-Neural-Inpainting" -> "ajbrock/Neural-Photo-Editor"
"leehomyc/High-Res-Neural-Inpainting" -> "david-gpu/deep-makeover"
"leehomyc/High-Res-Neural-Inpainting" -> "Evolving-AI-Lab/ppgn"
"leehomyc/High-Res-Neural-Inpainting" -> "buriburisuri/ebgan"
"leehomyc/High-Res-Neural-Inpainting" -> "leehomyc/Photo-Realistic-Super-Resoluton" ["e"=1]
"leehomyc/High-Res-Neural-Inpainting" -> "fxia22/PixelDTGAN"
"leehomyc/High-Res-Neural-Inpainting" -> "aayushbansal/PixelNet" ["e"=1]
"leehomyc/High-Res-Neural-Inpainting" -> "DmitryUlyanov/texture_nets"
"leehomyc/High-Res-Neural-Inpainting" -> "DmitryUlyanov/AGE"
"GuoLanqing/ShadowFormer" -> "GuoLanqing/Awesome-Shadow-Removal"
"GuoLanqing/ShadowFormer" -> "GuoLanqing/ShadowDiffusion"
"GuoLanqing/ShadowFormer" -> "jinwan1994/SG-ShadowNet"
"cyclomon/CLIPstyler" -> "tsujuifu/pytorch_ldast"
"cyclomon/CLIPstyler" -> "Huage001/AdaAttN"
"cyclomon/CLIPstyler" -> "ztex08010518/Stylizing-3D-Scene"
"cyclomon/CLIPstyler" -> "VITA-Group/INS"
"cyclomon/CLIPstyler" -> "gwang-kim/DiffusionCLIP" ["e"=1]
"Yijunmaverick/UniversalStyleTransfer" -> "eridgd/WCT-TF"
"Yijunmaverick/UniversalStyleTransfer" -> "sunshineatnoon/PytorchWCT"
"Yijunmaverick/UniversalStyleTransfer" -> "sunshineatnoon/LinearStyleTransfer"
"Yijunmaverick/UniversalStyleTransfer" -> "pietrocarbo/deep-transfer"
"Yijunmaverick/UniversalStyleTransfer" -> "xunhuang1995/AdaIN-style"
"Yijunmaverick/UniversalStyleTransfer" -> "rtqichen/style-swap"
"Yijunmaverick/UniversalStyleTransfer" -> "LucasSheng/avatar-net"
"Yijunmaverick/UniversalStyleTransfer" -> "nkolkin13/STROTSS"
"Yijunmaverick/UniversalStyleTransfer" -> "MingSun-Tse/Collaborative-Distillation"
"Yijunmaverick/UniversalStyleTransfer" -> "clovaai/WCT2"
"Yijunmaverick/UniversalStyleTransfer" -> "ycjing/Neural-Style-Transfer-Papers"
"Yijunmaverick/UniversalStyleTransfer" -> "CompVis/adaptive-style-transfer"
"Yijunmaverick/UniversalStyleTransfer" -> "msracver/Deep-Image-Analogy"
"Yijunmaverick/UniversalStyleTransfer" -> "leongatys/NeuralImageSynthesis"
"Yijunmaverick/UniversalStyleTransfer" -> "naoto0804/pytorch-AdaIN"
"tensorlayer/adaptive-style-transfer" -> "tensorlayer/openpose"
"HsinYingLee/MDMM" -> "Xiaoming-Yu/DMIT"
"JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation" -> "JACKYLUO1991/FaceParsing"
"JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation" -> "kampta/face-seg"
"Onr/Council-GAN" -> "linjx-ustc1106/TuiGAN-PyTorch"
"Onr/Council-GAN" -> "hyperplane-lab/ACL-GAN"
"Onr/Council-GAN" -> "microsoft/DisentangledFaceGAN" ["e"=1]
"Onr/Council-GAN" -> "sunniesuhyoung/DST"
"Onr/Council-GAN" -> "alpc91/NICE-GAN-pytorch"
"Onr/Council-GAN" -> "weihaox/awesome-image-translation"
"Onr/Council-GAN" -> "IVRL/GANLocalEditing"
"Onr/Council-GAN" -> "lyndonzheng/F-LSeSim" ["e"=1]
"guojunq/lsgan" -> "guojunq/glsgan"
"guojunq/lsgan" -> "xiaolonw/ss-gan"
"guojunq/lsgan" -> "musyoku/LSGAN"
"guojunq/lsgan" -> "Element-Research/dpnn" ["e"=1]
"xuqiantong/GAN-Metrics" -> "taki0112/GAN_Metrics-Tensorflow"
"xuqiantong/GAN-Metrics" -> "sbarratt/inception-score-pytorch"
"xuqiantong/GAN-Metrics" -> "bioinf-jku/TTUR"
"xuqiantong/GAN-Metrics" -> "lzhbrian/metrics"
"xuqiantong/GAN-Metrics" -> "mseitzer/pytorch-fid"
"xuqiantong/GAN-Metrics" -> "LMescheder/GAN_stability"
"xuqiantong/GAN-Metrics" -> "pfnet-research/sngan_projection"
"xuqiantong/GAN-Metrics" -> "dongb5/GAN-Timeline"
"xuqiantong/GAN-Metrics" -> "christiancosgrove/pytorch-spectral-normalization-gan"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/WebsiteTest"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Flappy-Bird-AI"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Hill-Climb-Racing-AI" -> "Code-Bullet/Chess-AI"
"experience-ml/cartoonize" -> "SystemErrorWang/White-box-Cartoonization"
"experience-ml/cartoonize" -> "SystemErrorWang/FacialCartoonization"
"experience-ml/cartoonize" -> "mnicnc404/CartoonGan-tensorflow"
"experience-ml/cartoonize" -> "Shaashwat05/Cartoonify_reality"
"experience-ml/cartoonize" -> "justinpinkney/stylegan2"
"experience-ml/cartoonize" -> "taki0112/CartoonGAN-Tensorflow"
"experience-ml/cartoonize" -> "FilipAndersson245/cartoon-gan"
"sangwoomo/FreezeD" -> "bryandlee/FreezeG"
"sangwoomo/FreezeD" -> "HideUnderBush/UI2I_via_StyleGAN2"
"sangwoomo/FreezeD" -> "yaxingwang/MineGAN"
"tkuri/Awesome-Polarization" -> "ChenyangLEI/awesome-polarization-in-vision"
"tkuri/Awesome-Polarization" -> "elerac/polanalyser"
"tkuri/Awesome-Polarization" -> "ChenyangLEI/sfp-wild"
"yiranran/APDrawingGAN" -> "yiranran/APDrawingGAN2"
"yiranran/APDrawingGAN" -> "yiranran/Unpaired-Portrait-Drawing"
"yiranran/APDrawingGAN" -> "seasonSH/WarpGAN"
"yiranran/APDrawingGAN" -> "NathanUA/U-2-Net"
"yiranran/APDrawingGAN" -> "switchablenorms/CelebAMask-HQ"
"yiranran/APDrawingGAN" -> "YBIGTA/pytorch-hair-segmentation"
"yiranran/APDrawingGAN" -> "wtjiang98/PSGAN"
"yiranran/APDrawingGAN" -> "ZPdesu/SEAN"
"yiranran/APDrawingGAN" -> "vijishmadhavan/ArtLine"
"yiranran/APDrawingGAN" -> "justinpinkney/toonify"
"yiranran/APDrawingGAN" -> "menyifang/DCT-Net"
"yiranran/APDrawingGAN" -> "apchenstu/sofgan"
"yiranran/APDrawingGAN" -> "csmliu/STGAN"
"yiranran/APDrawingGAN" -> "jiupinjia/stylized-neural-painting"
"yiranran/APDrawingGAN" -> "zllrunning/face-parsing.PyTorch"
"kaonashi-tyc/Rewrite" -> "kaonashi-tyc/zi2zi"
"kaonashi-tyc/Rewrite" -> "azadis/MC-GAN"
"kaonashi-tyc/Rewrite" -> "changebo/HCCG-CycleGAN"
"kaonashi-tyc/Rewrite" -> "MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing"
"kaonashi-tyc/Rewrite" -> "erikbern/deep-fonts" ["e"=1]
"kaonashi-tyc/Rewrite" -> "LinkWoong/Zeroshot-GAN"
"kaonashi-tyc/Rewrite" -> "rtqichen/style-swap"
"kaonashi-tyc/Rewrite" -> "mhy12345/Chinese-Character-Style-Transfer"
"kaonashi-tyc/Rewrite" -> "hologerry/AGIS-Net"
"kaonashi-tyc/Rewrite" -> "zhongzhuoyao/HCCR-GoogLeNet" ["e"=1]
"kaonashi-tyc/Rewrite" -> "chongyangtao/DeepHCCR" ["e"=1]
"kaonashi-tyc/Rewrite" -> "williamyang1991/TET-GAN"
"kaonashi-tyc/Rewrite" -> "DmitryUlyanov/texture_nets"
"kaonashi-tyc/Rewrite" -> "chuanli11/CNNMRF"
"kaonashi-tyc/Rewrite" -> "yenchenlin/pix2pix-tensorflow"
"1991viet/Yolo-pytorch" -> "1991viet/Deeplab-pytorch"
"1991viet/Yolo-pytorch" -> "1991viet/very-deep-cnn-pytorch"
"1991viet/Yolo-pytorch" -> "1991viet/character-level-cnn-pytorch"
"1991viet/Yolo-pytorch" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/Yolo-pytorch" -> "1991viet/Scalable-image-search-with-deep-image-representation"
"1991viet/Yolo-pytorch" -> "1991viet/ASCII-generator"
"1991viet/Yolo-pytorch" -> "1991viet/Hierarchical-attention-networks-pytorch"
"atilimcetin/global-matting" -> "np-csu/AlphaMatting"
"atilimcetin/global-matting" -> "dingzeyuli/knn-matting"
"atilimcetin/global-matting" -> "atilimcetin/guided-filter"
"atilimcetin/global-matting" -> "yaksoy/AffinityBasedMattingToolbox"
"atilimcetin/global-matting" -> "MarcoForte/closed-form-matting"
"atilimcetin/global-matting" -> "PetroWu/AutoPortraitMatting"
"atilimcetin/global-matting" -> "Joker316701882/Deep-Image-Matting"
"atilimcetin/global-matting" -> "supitalp/Comprehensive-Sample-Set-Image-Matting"
"atilimcetin/global-matting" -> "99991/matting"
"atilimcetin/global-matting" -> "volvet/AlphaMatting"
"atilimcetin/global-matting" -> "MarcoForte/knn-matting"
"atilimcetin/global-matting" -> "MarcoForte/bayesian-matting"
"atilimcetin/global-matting" -> "takiyu/portrait_matting"
"atilimcetin/global-matting" -> "huochaitiantang/pytorch-deep-image-matting"
"np-csu/AlphaMatting" -> "atilimcetin/global-matting"
"np-csu/AlphaMatting" -> "volvet/AlphaMatting"
"np-csu/AlphaMatting" -> "dingzeyuli/knn-matting"
"np-csu/AlphaMatting" -> "MarcoForte/closed-form-matting"
"np-csu/AlphaMatting" -> "PetroWu/AutoPortraitMatting"
"np-csu/AlphaMatting" -> "Joker316701882/Deep-Image-Matting"
"np-csu/AlphaMatting" -> "supitalp/Comprehensive-Sample-Set-Image-Matting"
"np-csu/AlphaMatting" -> "yaksoy/AffinityBasedMattingToolbox"
"np-csu/AlphaMatting" -> "takiyu/portrait_matting"
"np-csu/AlphaMatting" -> "MarcoForte/knn-matting"
"np-csu/AlphaMatting" -> "aromazyl/auto-portrait-matting"
"EmilienDupont/wgan-gp" -> "arturml/pytorch-wgan-gp"
"EmilienDupont/wgan-gp" -> "Zeleni9/pytorch-wgan"
"EmilienDupont/wgan-gp" -> "caogang/wgan-gp"
"EmilienDupont/wgan-gp" -> "cameronfabbri/cWGANs"
"EmilienDupont/wgan-gp" -> "jalola/improved-wgan-pytorch"
"onion-liu/aahq-dataset" -> "SelfishGene/SFHQ-dataset"
"Yaoyi-Li/GCA-Matting" -> "poppinace/indexnet_matting"
"Yaoyi-Li/GCA-Matting" -> "yunkezhang/FusionMatting"
"Yaoyi-Li/GCA-Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"Yaoyi-Li/GCA-Matting" -> "MarcoForte/FBA_Matting"
"Yaoyi-Li/GCA-Matting" -> "yucornetto/MGMatting"
"Yaoyi-Li/GCA-Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"Yaoyi-Li/GCA-Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"Yaoyi-Li/GCA-Matting" -> "hqqxyy/Context-Aware-Matting"
"Yaoyi-Li/GCA-Matting" -> "nowsyn/SIM"
"Yaoyi-Li/GCA-Matting" -> "lizhengwei1992/Semantic_Human_Matting"
"Yaoyi-Li/GCA-Matting" -> "aisegmentcn/matting_human_datasets"
"Yaoyi-Li/GCA-Matting" -> "wchstrife/Awesome-Image-Matting"
"Yaoyi-Li/GCA-Matting" -> "Yaoyi-Li/HOP-Matting"
"Yaoyi-Li/GCA-Matting" -> "CDOTAD/AlphaGAN-Matting"
"Yaoyi-Li/GCA-Matting" -> "MarcoForte/FBA-Matting"
"atilimcetin/guided-filter" -> "atilimcetin/global-matting"
"atilimcetin/guided-filter" -> "Sundrops/fast-guided-filter"
"atilimcetin/guided-filter" -> "wuhuikai/DeepGuidedFilter" ["e"=1]
"atilimcetin/guided-filter" -> "tody411/GuidedFilter"
"atilimcetin/guided-filter" -> "dingzeyuli/knn-matting"
"atilimcetin/guided-filter" -> "PRiME-project/PRiMEStereoMatch" ["e"=1]
"atilimcetin/guided-filter" -> "nlamprian/GuidedFilter"
"atilimcetin/guided-filter" -> "tikroeger/OF_DIS" ["e"=1]
"atilimcetin/guided-filter" -> "timothybrooks/hdr-plus" ["e"=1]
"atilimcetin/guided-filter" -> "Mericam/exposure-fusion" ["e"=1]
"atilimcetin/guided-filter" -> "MarcoForte/closed-form-matting"
"atilimcetin/guided-filter" -> "np-csu/AlphaMatting"
"dbbert/dfn" -> "edenton/drnet"
"rosinality/swapping-autoencoder-pytorch" -> "taesungp/swapping-autoencoder-pytorch"
"rosinality/swapping-autoencoder-pytorch" -> "genforce/idinvert"
"rosinality/swapping-autoencoder-pytorch" -> "ZPdesu/SEAN"
"rosinality/swapping-autoencoder-pytorch" -> "sunniesuhyoung/DST"
"rosinality/swapping-autoencoder-pytorch" -> "genforce/idinvert_pytorch"
"rosinality/swapping-autoencoder-pytorch" -> "betterze/StyleSpace"
"rosinality/swapping-autoencoder-pytorch" -> "onion-liu/aahq-dataset"
"brain-research/long-term-video-prediction-without-supervision" -> "rubenvillegas/icml2017hierchvid"
"brain-research/long-term-video-prediction-without-supervision" -> "rubenvillegas/iclr2017mcnet"
"brain-research/long-term-video-prediction-without-supervision" -> "zcrwind/PredNet_pytorch"
"alpc91/NICE-GAN-pytorch" -> "Ha0Tang/AttentionGAN"
"alpc91/NICE-GAN-pytorch" -> "yiranran/Unpaired-Portrait-Drawing"
"alpc91/NICE-GAN-pytorch" -> "linjx-ustc1106/TuiGAN-PyTorch"
"alpc91/NICE-GAN-pytorch" -> "tohinz/ConSinGAN"
"robbiebarrat/twitter-contest-enterer" -> "kurozael/twitter-contest-bot"
"a312863063/seeprettyface-generator-model" -> "a312863063/seeprettyface-generator-star"
"a312863063/seeprettyface-generator-model" -> "a312863063/seeprettyface-generator-babies"
"baldassarreFe/deep-koalarization" -> "emilwallner/Coloring-greyscale-images"
"baldassarreFe/deep-koalarization" -> "emilwallner/Coloring-greyscale-images-in-Keras"
"baldassarreFe/deep-koalarization" -> "shekkizh/Colorization.tensorflow"
"baldassarreFe/deep-koalarization" -> "ImagingLab/Colorizing-with-GANs"
"baldassarreFe/deep-koalarization" -> "nilboy/colorization-tf"
"baldassarreFe/deep-koalarization" -> "Armour/Automatic-Image-Colorization"
"baldassarreFe/deep-koalarization" -> "titu1994/keras-mobile-colorizer"
"baldassarreFe/deep-koalarization" -> "lukemelas/Automatic-Image-Colorization"
"baldassarreFe/deep-koalarization" -> "msracver/Deep-Exemplar-based-Colorization"
"baldassarreFe/deep-koalarization" -> "pvitoria/ChromaGAN"
"baldassarreFe/deep-koalarization" -> "richzhang/colorization-pytorch"
"baldassarreFe/deep-koalarization" -> "pdrabinski/GAN_Colorizer"
"baldassarreFe/deep-koalarization" -> "richzhang/colorization"
"yunjey/domain-transfer-network" -> "taey16/DomainTransferNetwork.pytorch"
"yunjey/domain-transfer-network" -> "davrempe/domain-transfer-net"
"yunjey/domain-transfer-network" -> "duxingren14/DualGAN"
"yunjey/domain-transfer-network" -> "buriburisuri/ac-gan"
"yunjey/domain-transfer-network" -> "sagiebenaim/DistanceGAN"
"yunjey/domain-transfer-network" -> "SKTBrain/DiscoGAN"
"yunjey/domain-transfer-network" -> "yenchenlin/pix2pix-tensorflow"
"yunjey/domain-transfer-network" -> "carpedm20/DiscoGAN-pytorch"
"yunjey/domain-transfer-network" -> "junyanz/BicycleGAN"
"yunjey/domain-transfer-network" -> "mingyuliutw/UNIT"
"yunjey/domain-transfer-network" -> "carpedm20/BEGAN-tensorflow"
"yunjey/domain-transfer-network" -> "fxia22/PixelDTGAN"
"yunjey/domain-transfer-network" -> "msracver/Deep-Image-Analogy"
"yunjey/domain-transfer-network" -> "PetroWu/AutoPortraitMatting"
"yunjey/domain-transfer-network" -> "kaonashi-tyc/zi2zi"
"MarcoForte/bayesian-matting" -> "aromazyl/auto-portrait-matting"
"MarcoForte/bayesian-matting" -> "MarcoForte/knn-matting"
"FacePerceiver/FaRL" -> "FacePerceiver/facer"
"FacePerceiver/FaRL" -> "FacePerceiver/LAION-Face"
"FacePerceiver/FaRL" -> "hhj1897/face_parsing"
"9310gaurav/ali-pytorch" -> "jeffdonahue/bigan"
"9310gaurav/ali-pytorch" -> "fmu2/Wasserstein-BiGAN"
"9310gaurav/ali-pytorch" -> "WilliBee/bigan_SRL"
"jeffdonahue/bigan" -> "IshmaelBelghazi/ALI"
"jeffdonahue/bigan" -> "9310gaurav/ali-pytorch"
"jeffdonahue/bigan" -> "manicman1999/Keras-BiGAN" ["e"=1]
"jeffdonahue/bigan" -> "fmu2/Wasserstein-BiGAN"
"jeffdonahue/bigan" -> "WilliBee/bigan_SRL"
"mxgmn/ConvChain" -> "mxgmn/SynTex"
"mxgmn/ConvChain" -> "mxgmn/TextureSynthesis"
"mxgmn/ConvChain" -> "kchapelier/wavefunctioncollapse"
"mxgmn/ConvChain" -> "heyx3/EasyWFC"
"mxgmn/ConvChain" -> "selfsame/unity-wave-function-collapse"
"mxgmn/ConvChain" -> "ricardojmendez/LibNoise.Unity" ["e"=1]
"mxgmn/ConvChain" -> "sylefeb/VoxModSynth"
"mxgmn/ConvChain" -> "BorisTheBrave/DeBroglie"
"mxgmn/ConvChain" -> "Syomus/ProceduralToolkit" ["e"=1]
"mxgmn/ConvChain" -> "zfedoran/pixel-sprite-generator"
"mxgmn/ConvChain" -> "rlguy/FantasyMapGenerator" ["e"=1]
"mxgmn/ConvChain" -> "emilk/wfc"
"mxgmn/ConvChain" -> "mxgmn/WaveFunctionCollapse" ["e"=1]
"mxgmn/ConvChain" -> "kchapelier/procedural-generation"
"kampta/face-seg" -> "ileniTudor/Face-Hair-Segmentation-Dataset"
"kampta/face-seg" -> "criminalking/face_segmentation"
"kampta/face-seg" -> "JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation"
"kampta/face-seg" -> "JACKYLUO1991/FaceParsing"
"akanimax/T2F" -> "hanzhanggit/StackGAN-v2"
"akanimax/T2F" -> "akanimax/pro_gan_pytorch"
"akanimax/T2F" -> "lzhbrian/arbitrary-text-to-image-papers"
"akanimax/T2F" -> "akanimax/BMSG-GAN"
"akanimax/T2F" -> "taoxugit/AttnGAN"
"akanimax/T2F" -> "reedscot/icml2016"
"akanimax/T2F" -> "google/sg2im" ["e"=1]
"akanimax/T2F" -> "zsdonghao/text-to-image"
"akanimax/T2F" -> "woozzu/tagan"
"akanimax/T2F" -> "ypxie/HDGan"
"akanimax/T2F" -> "qiaott/MirrorGAN"
"akanimax/T2F" -> "chen0040/keras-text-to-image"
"akanimax/T2F" -> "akanimax/msg-stylegan-tf"
"akanimax/T2F" -> "hanzhanggit/StackGAN"
"akanimax/T2F" -> "hanzhanggit/StackGAN-Pytorch"
"happy-jihye/Cartoon-StyleGAN" -> "justinpinkney/toonify"
"happy-jihye/Cartoon-StyleGAN" -> "danielroich/PTI"
"happy-jihye/Cartoon-StyleGAN" -> "williamyang1991/DualStyleGAN"
"happy-jihye/Cartoon-StyleGAN" -> "rinongal/StyleGAN-nada"
"happy-jihye/Cartoon-StyleGAN" -> "bryandlee/FreezeG"
"happy-jihye/Cartoon-StyleGAN" -> "justinpinkney/stylegan2"
"happy-jihye/Cartoon-StyleGAN" -> "woctezuma/stylegan2-projecting-images"
"happy-jihye/Cartoon-StyleGAN" -> "wonwizard/stylgan2-toonify"
"happy-jihye/Cartoon-StyleGAN" -> "HideUnderBush/UI2I_via_StyleGAN2"
"happy-jihye/Cartoon-StyleGAN" -> "betterze/StyleSpace"
"happy-jihye/Cartoon-StyleGAN" -> "bryandlee/naver-webtoon-faces"
"happy-jihye/Cartoon-StyleGAN" -> "yuval-alaluf/stylegan3-editing"
"happy-jihye/Cartoon-StyleGAN" -> "mchong6/JoJoGAN"
"happy-jihye/Cartoon-StyleGAN" -> "yuval-alaluf/restyle-encoder"
"happy-jihye/Cartoon-StyleGAN" -> "yuval-alaluf/hyperstyle"
"moono/stylegan2-tf-2.x" -> "rosasalberto/StyleGAN2-TensorFlow-2.x"
"pschaldenbrand/StyleCLIPDraw" -> "kvfrans/clipdraw"
"pschaldenbrand/StyleCLIPDraw" -> "gnobitab/FuseDream"
"pschaldenbrand/StyleCLIPDraw" -> "carolineec/informative-drawings"
"pschaldenbrand/StyleCLIPDraw" -> "paper11667/CLIPstyler"
"pschaldenbrand/StyleCLIPDraw" -> "sadnow/360Diffusion" ["e"=1]
"naver-ai/GGDR" -> "cyj407/VQ-I2I" ["e"=1]
"toxtli/awesome-machine-learning-jupyter-notebooks-for-colab" -> "firmai/awesome-google-colab"
"genforce/ghfeat" -> "nsping13/GAN-Steerability-without-optimization"
"jcjohnson/cnn-vis" -> "facebook/eyescream"
"jcjohnson/cnn-vis" -> "wojciechz/learning_to_execute" ["e"=1]
"jcjohnson/cnn-vis" -> "jrosebr1/bat-country"
"jcjohnson/cnn-vis" -> "Russell91/apollo"
"jcjohnson/cnn-vis" -> "skaae/lasagne-draw" ["e"=1]
"jcjohnson/cnn-vis" -> "ajtulloch/dnngraph" ["e"=1]
"jcjohnson/cnn-vis" -> "wojzaremba/lstm" ["e"=1]
"jcjohnson/cnn-vis" -> "samim23/DeepDreamAnim"
"jcjohnson/cnn-vis" -> "nivwusquorum/tf-adversarial" ["e"=1]
"jcjohnson/cnn-vis" -> "stitchfix/fauxtograph" ["e"=1]
"jcjohnson/cnn-vis" -> "auduno/deepdraw" ["e"=1]
"jcjohnson/cnn-vis" -> "facebook/fb-caffe-exts" ["e"=1]
"jcjohnson/cnn-vis" -> "chuanli11/CNNMRF"
"jcjohnson/cnn-vis" -> "Russell91/apollocaffe" ["e"=1]
"jcjohnson/cnn-vis" -> "skaae/torch-gan" ["e"=1]
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/DeepFaceEditing-Jittor"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/DeepFaceVideoEditing"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/OctField"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/StylizedNeRF"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/RisaNET"
"IGLICT/DeepFaceDrawing-Jittor" -> "davidbau/rewriting"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/MeshPooling"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/Stylemotion"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/TM-NET-Jittor"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/NeRF-Editing"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/PRS-Net"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/DeepFaceDrawing-Jittor" -> "franknb/Drawing-to-Face"
"IGLICT/DeepFaceDrawing-Jittor" -> "IGLICT/TM-NET"
"allthemusicllc/libatm" -> "allthemusicllc/tarsplit"
"allthemusicllc/libatm" -> "allthemusicllc/atm-cli"
"FalongShen/styletransfer" -> "LouieYang/stroke-controllable-fast-style-transfer"
"FalongShen/styletransfer" -> "curaai00/RT-StyleTransfer-forVideo"
"facebookresearch/FaderNetworks" -> "Guim3/IcGAN"
"facebookresearch/FaderNetworks" -> "Prinsphield/ELEGANT"
"facebookresearch/FaderNetworks" -> "LynnHo/AttGAN-Tensorflow"
"facebookresearch/FaderNetworks" -> "csmliu/STGAN"
"facebookresearch/FaderNetworks" -> "elvisyjlin/AttGAN-PyTorch"
"facebookresearch/FaderNetworks" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"facebookresearch/FaderNetworks" -> "xcyan/eccv16_attr2img"
"facebookresearch/FaderNetworks" -> "junyanz/BicycleGAN"
"facebookresearch/FaderNetworks" -> "yunjey/StarGAN"
"facebookresearch/FaderNetworks" -> "wdyin/GeoGAN"
"facebookresearch/FaderNetworks" -> "paulu/deepfeatinterp"
"facebookresearch/FaderNetworks" -> "c0nn3r/RetinaNet" ["e"=1]
"facebookresearch/FaderNetworks" -> "roimehrez/contextualLoss" ["e"=1]
"kennyvoo/face-occlusion-generation" -> "face3d0725/FaceExtraction"
"buriburisuri/supervised_infogan" -> "buriburisuri/ebgan"
"buriburisuri/supervised_infogan" -> "buriburisuri/ac-gan"
"buriburisuri/supervised_infogan" -> "buriburisuri/timeseries_gan"
"buriburisuri/supervised_infogan" -> "JonathanRaiman/tensorflow-infogan"
"buriburisuri/supervised_infogan" -> "Kyubyong/neural_tokenizer"
"buriburisuri/supervised_infogan" -> "buriburisuri/sugartensor"
"woodrush/neural-art-tf" -> "nivwusquorum/tensorflow-deepq" ["e"=1]
"woodrush/neural-art-tf" -> "Ivaylo-Popov/Theano-Lights" ["e"=1]
"woodrush/neural-art-tf" -> "ckmarkoh/neuralart_tensorflow"
"woodrush/neural-art-tf" -> "jazzsaxmafia/show_and_tell.tensorflow" ["e"=1]
"woodrush/neural-art-tf" -> "DmitryUlyanov/texture_nets"
"woodrush/neural-art-tf" -> "jazzsaxmafia/show_attend_and_tell.tensorflow" ["e"=1]
"woodrush/neural-art-tf" -> "fzliu/style-transfer"
"woodrush/neural-art-tf" -> "andersbll/neural_artistic_style"
"woodrush/neural-art-tf" -> "google/prettytensor" ["e"=1]
"woodrush/neural-art-tf" -> "anishathalye/neural-style"
"woodrush/neural-art-tf" -> "google/skflow" ["e"=1]
"woodrush/neural-art-tf" -> "ericjang/draw"
"woodrush/neural-art-tf" -> "chuanli11/MGANs"
"woodrush/neural-art-tf" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"woodrush/neural-art-tf" -> "facebook/eyescream"
"HYOJINPARK/ExtPortraitSeg" -> "clovaai/ext_portrait_segmentation"
"hubert0527/infinityGAN" -> "yccyenchicheng/InOut"
"hubert0527/infinityGAN" -> "universome/alis"
"hubert0527/infinityGAN" -> "universome/inr-gan"
"hubert0527/infinityGAN" -> "saic-mdal/CIPS"
"hubert0527/infinityGAN" -> "GaParmar/clean-fid"
"hubert0527/infinityGAN" -> "z-x-yang/NS-Outpainting"
"VITA-Group/GAN-Slimming" -> "VITA-Group/AGD"
"lucidrains/unet-stylegan2" -> "boschresearch/unetgan"
"zhhoper/RI_render_DPR" -> "zhhoper/DPR"
"pavelgonchar/color-independent-style-transfer" -> "pavelgonchar/neural-art-mini"
"GuoLanqing/ReLLIE" -> "GuoLanqing/Self-Convolution"
"GuoLanqing/ReLLIE" -> "GuoLanqing/Lane-Detection-with-ERFNet"
"HalbertCH/IEContraAST" -> "Huage001/AdaAttN"
"HalbertCH/IEContraAST" -> "Kibeom-Hong/Domain-Aware-Style-Transfer"
"HalbertCH/IEContraAST" -> "HalbertCH/DualAST"
"ecnuycxie/DG-Font" -> "clovaai/lffont"
"ecnuycxie/DG-Font" -> "clovaai/mxfont"
"ecnuycxie/DG-Font" -> "clovaai/fewshot-font-generation"
"ecnuycxie/DG-Font" -> "kyxscut/CG-GAN"
"ecnuycxie/DG-Font" -> "IShengFang/TypographyResearchCollection"
"ecnuycxie/DG-Font" -> "wangchi95/CF-Font"
"ecnuycxie/DG-Font" -> "JeanWU/CalliGAN"
"ecnuycxie/DG-Font" -> "tlc121/FsFont"
"ecnuycxie/DG-Font" -> "EuphoriaYan/zi2zi-pytorch"
"ecnuycxie/DG-Font" -> "clovaai/dmfont"
"ecnuycxie/DG-Font" -> "hologerry/Attr2Font"
"sagiebenaim/DistanceGAN" -> "sagiebenaim/OneShotTranslation"
"zyxElsa/CAST_pytorch" -> "Huage001/AdaAttN"
"zyxElsa/CAST_pytorch" -> "HalbertCH/IEContraAST"
"poppinace/indexnet_matting" -> "Yaoyi-Li/GCA-Matting"
"poppinace/indexnet_matting" -> "hqqxyy/Context-Aware-Matting"
"poppinace/indexnet_matting" -> "yunkezhang/FusionMatting"
"poppinace/indexnet_matting" -> "huochaitiantang/pytorch-deep-image-matting"
"poppinace/indexnet_matting" -> "CDOTAD/AlphaGAN-Matting"
"poppinace/indexnet_matting" -> "lizhengwei1992/Semantic_Human_Matting"
"poppinace/indexnet_matting" -> "wukaoliu/CVPR2020-HAttMatting"
"poppinace/indexnet_matting" -> "aisegmentcn/matting_human_datasets"
"poppinace/indexnet_matting" -> "MarcoForte/FBA_Matting"
"poppinace/indexnet_matting" -> "Yaoyi-Li/HOP-Matting"
"poppinace/indexnet_matting" -> "foamliu/Deep-Image-Matting-v2"
"poppinace/indexnet_matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"poppinace/indexnet_matting" -> "foamliu/Deep-Image-Matting"
"poppinace/indexnet_matting" -> "JizhiziLi/animal-matting"
"poppinace/indexnet_matting" -> "takiyu/portrait_matting"
"Ha0Tang/AsymmetricGAN" -> "Ha0Tang/ASGAN"
"1991viet/ASCII-generator" -> "1991viet/Yolo-pytorch"
"1991viet/ASCII-generator" -> "1991viet/Hierarchical-attention-networks-pytorch"
"1991viet/ASCII-generator" -> "1991viet/very-deep-cnn-pytorch"
"1991viet/ASCII-generator" -> "1991viet/character-level-cnn-pytorch"
"pillarpond/image-segmenter-android" -> "dailystudio/ml"
"taki0112/Tensorflow-DatasetAPI" -> "taki0112/UNIT-Tensorflow"
"taki0112/Tensorflow-DatasetAPI" -> "taki0112/DCGAN-Tensorflow"
"taki0112/Tensorflow-DatasetAPI" -> "taki0112/pix2pix-Tensorflow"
"awjuliani/TF-Tutorials" -> "awjuliani/oreilly-rl-tutorial"
"awjuliani/TF-Tutorials" -> "shekkizh/WassersteinGAN.tensorflow"
"awjuliani/TF-Tutorials" -> "adeshpande3/Generative-Adversarial-Networks" ["e"=1]
"awjuliani/TF-Tutorials" -> "awjuliani/DeepRL-Agents" ["e"=1]
"awjuliani/TF-Tutorials" -> "Zardinality/WGAN-tensorflow"
"awjuliani/TF-Tutorials" -> "bamos/dcgan-completion.tensorflow"
"awjuliani/TF-Tutorials" -> "uclaacmai/Generative-Adversarial-Network-Tutorial"
"awjuliani/TF-Tutorials" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"awjuliani/TF-Tutorials" -> "khanrc/tf.gans-comparison"
"awjuliani/TF-Tutorials" -> "awjuliani/Pix2Pix-Film"
"awjuliani/TF-Tutorials" -> "ry/tensorflow-resnet" ["e"=1]
"awjuliani/TF-Tutorials" -> "tdeboissiere/DeepLearningImplementations"
"awjuliani/TF-Tutorials" -> "ppwwyyxx/tensorpack" ["e"=1]
"awjuliani/TF-Tutorials" -> "sjchoi86/advanced-tensorflow" ["e"=1]
"awjuliani/TF-Tutorials" -> "carpedm20/BEGAN-tensorflow"
"isl-org/FreeViewSynthesis" -> "isl-org/StableViewSynthesis"
"VinceMarron/style_transfer" -> "nkolkin13/STROTSS"
"VinceMarron/style_transfer" -> "bbdamodaran/deepJDOT" ["e"=1]
"MarcoForte/FBA_Matting" -> "Yaoyi-Li/GCA-Matting"
"MarcoForte/FBA_Matting" -> "poppinace/indexnet_matting"
"MarcoForte/FBA_Matting" -> "yunkezhang/FusionMatting"
"MarcoForte/FBA_Matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"MarcoForte/FBA_Matting" -> "wukaoliu/CVPR2020-HAttMatting"
"MarcoForte/FBA_Matting" -> "nowsyn/SIM"
"MarcoForte/FBA_Matting" -> "JizhiziLi/animal-matting"
"MarcoForte/FBA_Matting" -> "yucornetto/MGMatting"
"MarcoForte/FBA_Matting" -> "aisegmentcn/matting_human_datasets"
"MarcoForte/FBA_Matting" -> "huochaitiantang/pytorch-deep-image-matting"
"MarcoForte/FBA_Matting" -> "Yaoyi-Li/HOP-Matting"
"MarcoForte/FBA_Matting" -> "hqqxyy/Context-Aware-Matting"
"MarcoForte/FBA_Matting" -> "wchstrife/Awesome-Image-Matting"
"MarcoForte/FBA_Matting" -> "pymatting/pymatting"
"MarcoForte/FBA_Matting" -> "lnugraha/trimap_generator"
"alievk/npbg" -> "rakhimovv/npbgpp"
"alievk/npbg" -> "intel-isl/FreeViewSynthesis"
"alievk/npbg" -> "LansburyCH/relightable-nr"
"alievk/npbg" -> "isl-org/StableViewSynthesis"
"alievk/npbg" -> "lioryariv/idr" ["e"=1]
"hqqxyy/Context-Aware-Matting" -> "poppinace/indexnet_matting"
"hqqxyy/Context-Aware-Matting" -> "yunkezhang/FusionMatting"
"hqqxyy/Context-Aware-Matting" -> "Yaoyi-Li/HOP-Matting"
"hqqxyy/Context-Aware-Matting" -> "Yaoyi-Li/GCA-Matting"
"hqqxyy/Context-Aware-Matting" -> "nowsyn/SIM"
"hqqxyy/Context-Aware-Matting" -> "MarcoForte/FBA-Matting"
"hqqxyy/Context-Aware-Matting" -> "yaksoy/AffinityBasedMattingToolbox"
"lnugraha/trimap_generator" -> "huochaitiantang/pytorch-deep-image-matting"
"lnugraha/trimap_generator" -> "lizhengwei1992/Semantic_Human_Matting"
"lnugraha/trimap_generator" -> "foamliu/Deep-Image-Matting-PyTorch"
"lnugraha/trimap_generator" -> "CDOTAD/AlphaGAN-Matting"
"lnugraha/trimap_generator" -> "MarcoForte/FBA_Matting"
"lnugraha/trimap_generator" -> "hqqxyy/Context-Aware-Matting"
"lnugraha/trimap_generator" -> "aromazyl/auto-portrait-matting"
"lnugraha/trimap_generator" -> "yunkezhang/FusionMatting"
"lnugraha/trimap_generator" -> "Yaoyi-Li/GCA-Matting"
"lnugraha/trimap_generator" -> "takiyu/portrait_matting"
"irasin/Pytorch_Style_Swap" -> "irasin/Pytorch_WCT"
"heyx3/EasyWFC" -> "MatveyK/Kazimir"
"a312863063/Video-Auto-Wipe" -> "a312863063/SimSwap-train" ["e"=1]
"a312863063/Video-Auto-Wipe" -> "a312863063/Model-Swap-Face"
"zalandoresearch/spatial_gan" -> "zalandoresearch/psgan"
"zalandoresearch/psgan" -> "zalandoresearch/famos"
"zalandoresearch/psgan" -> "zalandoresearch/spatial_gan"
"Xiaoming-Yu/DMIT" -> "HsinYingLee/MDMM"
"LDOUBLEV/style_transfer-perceptual_loss" -> "ShafeenTejani/fast-style-transfer"
"LDOUBLEV/style_transfer-perceptual_loss" -> "hzy46/fast-neural-style-tensorflow"
"danielvarga/string-art" -> "Exception1984/StringArt"
"danielvarga/string-art" -> "theveloped/ThreadTone"
"tohinz/multiple-objects-gan" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"tohinz/multiple-objects-gan" -> "jamesli1618/Obj-GAN"
"tohinz/multiple-objects-gan" -> "MinfengZhu/DM-GAN"
"tohinz/multiple-objects-gan" -> "ypxie/HDGan"
"tohinz/multiple-objects-gan" -> "qiaott/MirrorGAN"
"tohinz/multiple-objects-gan" -> "maincarry/R-Precision"
"ryankennedyio/deep-dream-generator" -> "kesara/deepdreamer"
"hwalsuklee/awesome-deep-vision-web-demo" -> "hwalsuklee/tensorflow-style-transfer"
"hwalsuklee/awesome-deep-vision-web-demo" -> "sjchoi86/advanced-tensorflow" ["e"=1]
"aquadzn/background-removal" -> "cyrildiagne/u2net-http"
"bjlkeng/sandbox" -> "pclucas14/iaf-vae"
"emilwallner/Coloring-greyscale-images" -> "baldassarreFe/deep-koalarization"
"emilwallner/Coloring-greyscale-images" -> "MarkMoHR/Awesome-Image-Colorization"
"emilwallner/Coloring-greyscale-images" -> "ImagingLab/Colorizing-with-GANs"
"emilwallner/Coloring-greyscale-images" -> "Armour/Automatic-Image-Colorization"
"emilwallner/Coloring-greyscale-images" -> "shekkizh/Colorization.tensorflow"
"emilwallner/Coloring-greyscale-images" -> "zeruniverse/neural-colorization"
"emilwallner/Coloring-greyscale-images" -> "ericsujw/InstColorization"
"emilwallner/Coloring-greyscale-images" -> "richzhang/colorization"
"emilwallner/Coloring-greyscale-images" -> "richzhang/colorization-pytorch"
"emilwallner/Coloring-greyscale-images" -> "pvitoria/ChromaGAN"
"emilwallner/Coloring-greyscale-images" -> "lukemelas/Automatic-Image-Colorization"
"emilwallner/Coloring-greyscale-images" -> "msracver/Deep-Exemplar-based-Colorization"
"emilwallner/Coloring-greyscale-images" -> "emilwallner/How-to-learn-Deep-Learning"
"emilwallner/Coloring-greyscale-images" -> "dongheehand/MemoPainter-PyTorch"
"emilwallner/Coloring-greyscale-images" -> "junyanz/interactive-deep-colorization"
"AYLIEN/gan-intro" -> "ericjang/genadv_tutorial"
"AYLIEN/gan-intro" -> "openai/improved-gan"
"AYLIEN/gan-intro" -> "devnag/pytorch-generative-adversarial-networks"
"AYLIEN/gan-intro" -> "shekkizh/WassersteinGAN.tensorflow"
"AYLIEN/gan-intro" -> "openai/InfoGAN"
"AYLIEN/gan-intro" -> "buriburisuri/ac-gan"
"AYLIEN/gan-intro" -> "carpedm20/BEGAN-tensorflow"
"AYLIEN/gan-intro" -> "zhangqianhui/Conditional-Gans"
"AYLIEN/gan-intro" -> "Zardinality/WGAN-tensorflow"
"AYLIEN/gan-intro" -> "SKTBrain/DiscoGAN"
"AYLIEN/gan-intro" -> "martinarjovsky/WassersteinGAN"
"AYLIEN/gan-intro" -> "poolio/unrolled_gan"
"AYLIEN/gan-intro" -> "bamos/dcgan-completion.tensorflow"
"AYLIEN/gan-intro" -> "igul222/improved_wgan_training"
"AYLIEN/gan-intro" -> "jacobgil/keras-dcgan"
"andrewliao11/CoGAN-tensorflow" -> "mingyuliutw/CoGAN"
"buriburisuri/ebgan" -> "buriburisuri/supervised_infogan"
"buriburisuri/ebgan" -> "buriburisuri/sugartensor"
"buriburisuri/ebgan" -> "buriburisuri/timeseries_gan"
"buriburisuri/ebgan" -> "buriburisuri/ac-gan"
"buriburisuri/ebgan" -> "buriburisuri/SRGAN" ["e"=1]
"dashayushman/TAC-GAN" -> "hamedhemati/TAC-GAN_JeHaYaFa"
"lizhengwei1992/mobile_phone_human_matting" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"lizhengwei1992/mobile_phone_human_matting" -> "hyperconnect/MMNet"
"lizhengwei1992/mobile_phone_human_matting" -> "lizhengwei1992/Semantic_Human_Matting"
"lizhengwei1992/mobile_phone_human_matting" -> "dong-x16/PortraitNet"
"lizhengwei1992/mobile_phone_human_matting" -> "99991/matting"
"lizhengwei1992/mobile_phone_human_matting" -> "aisegmentcn/matting_human_datasets"
"yunkezhang/FusionMatting" -> "Yaoyi-Li/GCA-Matting"
"yunkezhang/FusionMatting" -> "hqqxyy/Context-Aware-Matting"
"yunkezhang/FusionMatting" -> "poppinace/indexnet_matting"
"yunkezhang/FusionMatting" -> "wukaoliu/CVPR2020-HAttMatting"
"yunkezhang/FusionMatting" -> "lizhengwei1992/Semantic_Human_Matting"
"yunkezhang/FusionMatting" -> "MarcoForte/FBA_Matting"
"yunkezhang/FusionMatting" -> "aisegmentcn/matting_human_datasets"
"yunkezhang/FusionMatting" -> "Yaoyi-Li/HOP-Matting"
"yunkezhang/FusionMatting" -> "foamliu/Deep-Image-Matting-PyTorch"
"yunkezhang/FusionMatting" -> "MarcoForte/FBA-Matting"
"yunkezhang/FusionMatting" -> "yucornetto/MGMatting"
"yunkezhang/FusionMatting" -> "huochaitiantang/pytorch-deep-image-matting"
"yunkezhang/FusionMatting" -> "nowsyn/SIM"
"yunkezhang/FusionMatting" -> "dong-x16/PortraitNet"
"yunkezhang/FusionMatting" -> "tsing90/pytorch_semantic_human_matting"
"SaulZhang/Video_Prediction_ZOO" -> "JudyYe/CVP"
"foamliu/Deep-Image-Matting-v2" -> "huochaitiantang/pytorch-deep-image-matting"
"foamliu/Deep-Image-Matting-v2" -> "poppinace/indexnet_matting"
"foamliu/Deep-Image-Matting-v2" -> "CDOTAD/AlphaGAN-Matting"
"foamliu/Deep-Image-Matting-v2" -> "hqqxyy/Context-Aware-Matting"
"foamliu/Deep-Image-Matting-v2" -> "hyperconnect/MMNet"
"foamliu/Deep-Image-Matting-v2" -> "foamliu/Deep-Image-Matting"
"foamliu/Deep-Image-Matting-v2" -> "lizhengwei1992/Semantic_Human_Matting"
"foamliu/Deep-Image-Matting-v2" -> "hudengjunai/Deep-Image-Matting"
"foamliu/Deep-Image-Matting-v2" -> "99991/matting"
"a312863063/Model-Swap-Face_v2" -> "a312863063/Model-Swap-Face"
"akanimax/msg-stylegan-tf" -> "akanimax/BMSG-GAN"
"akanimax/msg-stylegan-tf" -> "akanimax/msg-gan-v1"
"akanimax/msg-stylegan-tf" -> "akanimax/MSG-GAN"
"akanimax/msg-stylegan-tf" -> "kam1107/RealnessGAN"
"akanimax/msg-stylegan-tf" -> "google-research/lag"
"duxingren14/DualGAN" -> "togheppi/DualGAN"
"duxingren14/DualGAN" -> "SKTBrain/DiscoGAN"
"duxingren14/DualGAN" -> "yunjey/domain-transfer-network"
"duxingren14/DualGAN" -> "mingyuliutw/CoGAN"
"ProGamerGov/Neural-Tools" -> "ProGamerGov/Multiscale-Resolution-Scripts"
"ProGamerGov/Neural-Tools" -> "ProGamerGov/Neural-Tile"
"ProGamerGov/Neural-Tools" -> "leongatys/NeuralImageSynthesis"
"ProGamerGov/Neural-Tools" -> "ProGamerGov/Torch-Models"
"justinpinkney/clip2latent" -> "RameenAbdal/CLIP2StyleGAN"
"LouieYang/stroke-controllable-fast-style-transfer" -> "LucasSheng/avatar-net"
"LouieYang/stroke-controllable-fast-style-transfer" -> "FalongShen/styletransfer"
"LouieYang/stroke-controllable-fast-style-transfer" -> "msracver/Style-Feature-Reshuffle"
"LouieYang/stroke-controllable-fast-style-transfer" -> "TroyZhai/adaptive-style-transfer-pytorch"
"YotamNitzan/ID-disentanglement" -> "danielroich/ID-disentanglement-Pytorch"
"YotamNitzan/ID-disentanglement" -> "OmerKafri/StyleFusion"
"YotamNitzan/ID-disentanglement" -> "IVRL/GANLocalEditing"
"YotamNitzan/ID-disentanglement" -> "betterze/StyleSpace"
"eliahuhorwitz/DeepSIM" -> "omerbt/Splice"
"eliahuhorwitz/DeepSIM" -> "PeterWang512/GANSketching"
"eliahuhorwitz/DeepSIM" -> "saic-violet/bilayer-model" ["e"=1]
"eliahuhorwitz/DeepSIM" -> "sunniesuhyoung/DST"
"eliahuhorwitz/DeepSIM" -> "omriav/blended-diffusion" ["e"=1]
"eliahuhorwitz/DeepSIM" -> "wpeebles/gangealing"
"eliahuhorwitz/DeepSIM" -> "mchong6/SOAT"
"eliahuhorwitz/DeepSIM" -> "Huage001/PaintTransformer"
"eliahuhorwitz/DeepSIM" -> "nkolkin13/NeuralNeighborStyleTransfer" ["e"=1]
"eliahuhorwitz/DeepSIM" -> "YangNaruto/FQ-GAN"
"eliahuhorwitz/DeepSIM" -> "autonomousvision/projected_gan"
"seasonSH/WarpGAN" -> "ZJULearning/CariFaceParsing"
"seasonSH/WarpGAN" -> "zhengziqiang/P2C"
"seasonSH/WarpGAN" -> "papulke/face-of-art"
"seasonSH/WarpGAN" -> "sunniesuhyoung/DST"
"seasonSH/WarpGAN" -> "WonwoongCho/GDWCT"
"seasonSH/WarpGAN" -> "wenqingchu/Semantic-CariGANs"
"seasonSH/WarpGAN" -> "yiranran/APDrawingGAN"
"seasonSH/WarpGAN" -> "PaParaZz1/CariGANs"
"self-distilled-stylegan/self-distilled-internet-photos" -> "autonomousvision/stylegan_xl"
"terrybroad/network-bending" -> "JCBrouwer/maua-stylegan2"
"alexlee-gk/video_prediction" -> "edenton/svg"
"alexlee-gk/video_prediction" -> "dyelax/Adversarial_Video_Generation"
"alexlee-gk/video_prediction" -> "edouardelasalles/srvp"
"alexlee-gk/video_prediction" -> "moliusimon/frnn"
"alexlee-gk/video_prediction" -> "liuziwei7/voxel-flow" ["e"=1]
"alexlee-gk/video_prediction" -> "sergeytulyakov/mocogan"
"alexlee-gk/video_prediction" -> "jthsieh/DDPAE-video-prediction"
"alexlee-gk/video_prediction" -> "coxlab/prednet"
"alexlee-gk/video_prediction" -> "rubenvillegas/iclr2017mcnet"
"alexlee-gk/video_prediction" -> "TUM-LMF/FutureGAN"
"alexlee-gk/video_prediction" -> "coupriec/VideoPredictionICLR2016"
"alexlee-gk/video_prediction" -> "alokwhitewolf/Video-frame-prediction-by-multi-scale-GAN"
"alexlee-gk/video_prediction" -> "brain-research/long-term-video-prediction-without-supervision"
"alexlee-gk/video_prediction" -> "SaulZhang/Video_Prediction_ZOO"
"alexlee-gk/video_prediction" -> "vincent-leguen/PhyDNet" ["e"=1]
"FarjaalAhmad/django_bgRemoverML" -> "DDemmer1/ai-background-remove"
"FarjaalAhmad/django_bgRemoverML" -> "aquadzn/background-removal"
"FarjaalAhmad/django_bgRemoverML" -> "Mazhar004/MODNet-BGRemover"
"FarjaalAhmad/django_bgRemoverML" -> "shreyas-bk/U-2-Net-Demo"
"ShafeenTejani/fast-style-transfer" -> "hwalsuklee/tensorflow-fast-style-transfer"
"ShafeenTejani/fast-style-transfer" -> "ShafeenTejani/style-transfer"
"michaelowenliu/awesome-image-matting" -> "wchstrife/Awesome-Image-Matting"
"michaelowenliu/awesome-image-matting" -> "JizhiziLi/GFM"
"michaelowenliu/awesome-image-matting" -> "yucornetto/MGMatting"
"michaelowenliu/awesome-image-matting" -> "nowsyn/SIM"
"michaelowenliu/awesome-image-matting" -> "Charch-630/FGI-Matting"
"michaelowenliu/awesome-image-matting" -> "yunkezhang/TCVOM"
"michaelowenliu/awesome-image-matting" -> "webtoon/matteformer"
"michaelowenliu/awesome-image-matting" -> "JizhiziLi/AIM"
"michaelowenliu/awesome-image-matting" -> "JizhiziLi/P3M"
"michaelowenliu/awesome-image-matting" -> "foamliu/Deep-Image-Matting-PyTorch"
"gnobitab/FuseDream" -> "pschaldenbrand/StyleCLIPDraw"
"Siddharth24Khera/Auto_MakeUp_Transfer" -> "TheMathWizard/Face-Makeup-by-Example"
"Siddharth24Khera/Auto_MakeUp_Transfer" -> "masterkapilkumar/Digital-Makeup-Transfer"
"Siddharth24Khera/Auto_MakeUp_Transfer" -> "yxding/RealTimeMakeupApplication"
"hwalsuklee/tensorflow-style-transfer" -> "hwalsuklee/tensorflow-fast-style-transfer"
"hwalsuklee/tensorflow-style-transfer" -> "ShafeenTejani/fast-style-transfer"
"hwalsuklee/tensorflow-style-transfer" -> "hwalsuklee/awesome-deep-vision-web-demo"
"hwalsuklee/tensorflow-style-transfer" -> "GunhoChoi/Kind_PyTorch_Tutorial" ["e"=1]
"hwalsuklee/tensorflow-style-transfer" -> "devsisters/multi-speaker-tacotron-tensorflow" ["e"=1]
"hwalsuklee/tensorflow-style-transfer" -> "sjchoi86/dl_tutorials_10weeks" ["e"=1]
"carpedm20/BEGAN-pytorch" -> "carpedm20/BEGAN-tensorflow"
"carpedm20/BEGAN-pytorch" -> "Heumi/BEGAN-tensorflow"
"carpedm20/BEGAN-pytorch" -> "carpedm20/DiscoGAN-pytorch"
"carpedm20/BEGAN-pytorch" -> "artcg/BEGAN"
"carpedm20/BEGAN-pytorch" -> "guojunq/lsgan"
"carpedm20/BEGAN-pytorch" -> "DmitryUlyanov/AGE"
"alyyousuf7/Weaver" -> "i-make-robots/weaving_algorithm"
"alyyousuf7/Weaver" -> "JVictorDias/AlgoritmoTecelao"
"MingtaoGuo/DCGAN_WGAN_WGAN-GP_LSGAN_SNGAN_RSGAN_BEGAN_ACGAN_PGGAN_TensorFlow" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"r0nn13/conditional-dcgan-keras" -> "erilyth/DCGANs"
"clovaai/mxfont" -> "clovaai/lffont"
"clovaai/mxfont" -> "clovaai/fewshot-font-generation"
"clovaai/mxfont" -> "clovaai/dmfont"
"clovaai/mxfont" -> "ecnuycxie/DG-Font"
"iyah4888/SIGGRAPH18SSS" -> "yaksoy/SemanticSoftSegmentation"
"iyah4888/SIGGRAPH18SSS" -> "sohutv/cachecloud-client" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "foamliu/Deep-Image-Matting"
"iyah4888/SIGGRAPH18SSS" -> "Joker316701882/Deep-Image-Matting"
"iyah4888/SIGGRAPH18SSS" -> "sohutv/hotcaffeine" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "takiyu/portrait_matting"
"iyah4888/SIGGRAPH18SSS" -> "VincentStory/StompForAndroid" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "lizhengwei1992/Semantic_Human_Matting"
"iyah4888/SIGGRAPH18SSS" -> "Allenkuzma/langhaiblogs" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "baimingxuan/vue3-admin-design" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "MarcoForte/closed-form-matting"
"iyah4888/SIGGRAPH18SSS" -> "Apricity001/High-Level-Data-Structure" ["e"=1]
"iyah4888/SIGGRAPH18SSS" -> "gaoyf/pinpoint" ["e"=1]
"Tengfei-Wang/HFGI" -> "betterze/StyleSpace"
"Tengfei-Wang/HFGI" -> "omertov/encoder4editing"
"Tengfei-Wang/HFGI" -> "danielroich/PTI"
"Tengfei-Wang/HFGI" -> "weihaox/awesome-gan-inversion"
"Tengfei-Wang/HFGI" -> "yuval-alaluf/stylegan3-editing"
"Tengfei-Wang/HFGI" -> "yuval-alaluf/hyperstyle"
"Tengfei-Wang/HFGI" -> "sapphire497/style-transformer"
"Tengfei-Wang/HFGI" -> "seasonSH/SemanticStyleGAN"
"Tengfei-Wang/HFGI" -> "wty-ustc/HairCLIP"
"Tengfei-Wang/HFGI" -> "RenYurui/PIRender" ["e"=1]
"Tengfei-Wang/HFGI" -> "FeiiYin/StyleHEAT" ["e"=1]
"Tengfei-Wang/HFGI" -> "yuval-alaluf/restyle-encoder"
"Tengfei-Wang/HFGI" -> "EzioBy/padinv"
"Tengfei-Wang/HFGI" -> "zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["e"=1]
"Tengfei-Wang/HFGI" -> "rotemtzaban/STIT"
"hyperconnect/MMNet" -> "lizhengwei1992/mobile_phone_human_matting"
"hyperconnect/MMNet" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"hyperconnect/MMNet" -> "dong-x16/PortraitNet"
"hyperconnect/MMNet" -> "huochaitiantang/pytorch-fast-matting-portrait"
"hyperconnect/MMNet" -> "hqqxyy/Context-Aware-Matting"
"hyperconnect/MMNet" -> "99991/matting"
"hyperconnect/MMNet" -> "aisegmentcn/matting_human_datasets"
"hyperconnect/MMNet" -> "huochaitiantang/pytorch-deep-image-matting"
"hyperconnect/MMNet" -> "ofirlevy/FastMattingPortrait"
"hyperconnect/MMNet" -> "foamliu/Deep-Image-Matting-v2"
"hyperconnect/MMNet" -> "yunkezhang/FusionMatting"
"hyperconnect/MMNet" -> "clovaai/ext_portrait_segmentation"
"hyperconnect/MMNet" -> "poppinace/indexnet_matting"
"cameronfabbri/cWGANs" -> "kongyanye/cwgan-gp"
"fmu2/3d_photo_stylization" -> "semchan/UPST-NeRF"
"roomylee/rnn-text-classification-tf" -> "dongjun-Lee/rnn-text-classification-tf"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "lizhengwei1992/mobile_phone_human_matting"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "dong-x16/PortraitNet"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "hyperconnect/MMNet"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "lizhengwei1992/Semantic_Human_Matting"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "aisegmentcn/matting_human_datasets"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "takiyu/portrait_matting"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "anilsathyan7/Portrait-Segmentation"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "PetroWu/AutoPortraitMatting"
"lizhengwei1992/Fast_Portrait_Segmentation" -> "tantara/JejuNet"
"SSinyu/CT-Denoising-Review" -> "houguanqun/Low-Dose-CT-denoising"
"SSinyu/CT-Denoising-Review" -> "SSinyu/CycleGAN-CT-Denoising"
"houguanqun/Low-Dose-CT-denoising" -> "xinario/SAGAN"
"houguanqun/Low-Dose-CT-denoising" -> "SSinyu/CT-Denoising-Review"
"houguanqun/Low-Dose-CT-denoising" -> "eunh/low_dose_CT"
"houguanqun/Low-Dose-CT-denoising" -> "SSinyu/RED_CNN"
"houguanqun/Low-Dose-CT-denoising" -> "SSinyu/WGAN-VGG"
"log0/neural-style-painting" -> "ckmarkoh/neuralart_tensorflow"
"log0/neural-style-painting" -> "iwantooxxoox/Keras-OpenFace" ["e"=1]
"IGLICT/PRS-Net" -> "IGLICT/PRS-Net_stamp"
"IGLICT/PRS-Net" -> "IGLICT/TM-NET"
"IGLICT/PRS-Net" -> "IGLICT/TM-NET-Jittor"
"IGLICT/PRS-Net" -> "IGLICT/Stylemotion"
"IGLICT/PRS-Net" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/PRS-Net" -> "IGLICT/Farthestsampling"
"IGLICT/PRS-Net" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/PRS-Net" -> "IGLICT/RisaNET"
"IGLICT/PRS-Net" -> "IGLICT/intrinsicSym-Jittor"
"TheMathWizard/Face-Makeup-by-Example" -> "Siddharth24Khera/Auto_MakeUp_Transfer"
"TheMathWizard/Face-Makeup-by-Example" -> "srivatsan-ramesh/Virtual-Makeup"
"badarsh2/Virtual-Makeup" -> "srivatsan-ramesh/Virtual-Makeup"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "tohinz/multiple-objects-gan"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "MinfengZhu/DM-GAN"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "dongdongdong666/CPGAN"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "qiaott/MirrorGAN"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "jamesli1618/Obj-GAN"
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" -> "mrlibw/ControlGAN"
"Quoteme/img2string" -> "midare/string-knitting"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Pytorch"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "MingtaoGuo/DCGAN_WGAN_WGAN-GP_LSGAN_SNGAN_RSGAN_BEGAN_ACGAN_PGGAN_TensorFlow"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "LynnHo/AttGAN-Tensorflow"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "LynnHo/CycleGAN-Tensorflow-2"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "marload/GANs-TensorFlow2"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "kuleshov/tf-wgan"
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "ChengBinJin/WGAN-GP-tensorflow" ["e"=1]
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" -> "jesse1029/Fake-Face-Images-Detection-Tensorflow" ["e"=1]
"jessemelpolio/non-stationary_texture_syn" -> "wxs/subjective-functions"
"jessemelpolio/non-stationary_texture_syn" -> "afruehstueck/tileGAN"
"jessemelpolio/non-stationary_texture_syn" -> "zalandoresearch/psgan"
"jessemelpolio/non-stationary_texture_syn" -> "leongatys/DeepTextures"
"jessemelpolio/non-stationary_texture_syn" -> "ningyu1991/TextureMixer"
"jessemelpolio/non-stationary_texture_syn" -> "janesjanes/Pytorch-TextureGAN"
"jessemelpolio/non-stationary_texture_syn" -> "zalandoresearch/famos"
"jessemelpolio/non-stationary_texture_syn" -> "anopara/texture-synthesis-nonparametric-sampling"
"jessemelpolio/non-stationary_texture_syn" -> "afrozalm/Patch-Based-Texture-Synthesis"
"jessemelpolio/non-stationary_texture_syn" -> "ryersonvisionlab/two-stream-dyntex-synth"
"jessemelpolio/non-stationary_texture_syn" -> "anopara/patch-based-texture-synthesis"
"jiamings/wgan" -> "Zardinality/WGAN-tensorflow"
"jiamings/wgan" -> "shekkizh/WassersteinGAN.tensorflow"
"jiamings/wgan" -> "kuleshov/tf-wgan"
"jiamings/wgan" -> "igul222/improved_wgan_training"
"jiamings/wgan" -> "cameronfabbri/Improved-Wasserstein-GAN"
"jiamings/wgan" -> "JonathanRaiman/tensorflow-infogan"
"mlberkeley/Creative-Adversarial-Networks" -> "cs-chan/ArtGAN"
"lzhbrian/metrics" -> "taki0112/GAN_Metrics-Tensorflow"
"aydao/stylegan2-surgery" -> "RoyWheels/stylegan2-ada"
"aydao/stylegan2-surgery" -> "eps696/stylegan2ada"
"aydao/stylegan2-surgery" -> "levindabhi/CLIP-Notebooks"
"aydao/stylegan2-surgery" -> "tals/derivative-works"
"aydao/stylegan2-surgery" -> "skyflynil/stylegan2"
"alexis-jacq/Pytorch-Tutorials" -> "darkstar112358/fast-neural-style"
"dvschultz/stylegan2-ada" -> "dvschultz/stylegan2-ada-pytorch"
"dvschultz/stylegan2-ada" -> "dvschultz/dataset-tools"
"dvschultz/stylegan2-ada" -> "dvschultz/stylegan2-training"
"dvschultz/stylegan2-ada" -> "Hephyrius/Stylegan2-Ada-Google-Colab-Starter-Notebook"
"dvschultz/stylegan2-ada" -> "dvschultz/stylegan2"
"dvschultz/stylegan2-ada" -> "JCBrouwer/maua-stylegan2"
"dvschultz/stylegan2-ada-pytorch" -> "dvschultz/stylegan2-ada"
"dvschultz/stylegan2-ada-pytorch" -> "aydao/stylegan2-surgery"
"dvschultz/stylegan2-ada-pytorch" -> "dvschultz/stylegan2"
"dvschultz/stylegan2-ada-pytorch" -> "l4rz/scaling-up-stylegan2"
"dvschultz/stylegan2-ada-pytorch" -> "dvschultz/dataset-tools"
"dvschultz/stylegan2-ada-pytorch" -> "eps696/stylegan2ada"
"dvschultz/stylegan2-ada-pytorch" -> "rosinality/alias-free-gan-pytorch"
"dvschultz/stylegan2-ada-pytorch" -> "eps696/stylegan2"
"dvschultz/stylegan2-ada-pytorch" -> "JCBrouwer/maua-stylegan2"
"dvschultz/stylegan2-ada-pytorch" -> "dvschultz/ai"
"dvschultz/stylegan2-ada-pytorch" -> "dvschultz/stylegan3"
"dvschultz/stylegan2-ada-pytorch" -> "justinpinkney/awesome-pretrained-stylegan3"
"dvschultz/stylegan2-ada-pytorch" -> "RoyWheels/stylegan2-ada"
"dvschultz/stylegan2-ada-pytorch" -> "omertov/encoder4editing"
"dvschultz/stylegan2-ada-pytorch" -> "danielroich/PTI"
"dvschultz/ai" -> "dvschultz/stylegan2"
"dvschultz/ai" -> "dvschultz/dataset-tools"
"dvschultz/ai" -> "skyflynil/stylegan2"
"dvschultz/ai" -> "dvschultz/ml-art-colabs"
"dvschultz/ai" -> "dvschultz/stylegan2-ada"
"dvschultz/ai" -> "dvschultz/stylegan2-training"
"dvschultz/ai" -> "dvschultz/stylegan2-ada-pytorch"
"dvschultz/ai" -> "dvschultz/neural-style-tf"
"dyelax/encore.ai" -> "tonybeltramelli/Deep-Lyrics"
"dyelax/encore.ai" -> "ivan-liljeqvist/ailyrics"
"titu1994/Fast-Neural-Style" -> "misgod/fast-neural-style-keras"
"facebook/eyescream" -> "skaae/torch-gan" ["e"=1]
"facebook/eyescream" -> "y0ast/VAE-Torch" ["e"=1]
"facebook/eyescream" -> "twitter/torch-autograd" ["e"=1]
"facebook/eyescream" -> "vivanov879/draw" ["e"=1]
"facebook/eyescream" -> "reedscot/nips2016"
"facebook/eyescream" -> "soumith/dcgan.torch"
"facebook/eyescream" -> "xiaolonw/ss-gan"
"facebook/eyescream" -> "reedscot/icml2016"
"facebook/eyescream" -> "nivwusquorum/tf-adversarial" ["e"=1]
"facebook/eyescream" -> "cvondrick/videogan"
"facebook/eyescream" -> "wojzaremba/lstm" ["e"=1]
"facebook/eyescream" -> "Newmu/dcgan_code"
"facebook/eyescream" -> "jcjohnson/cnn-vis"
"facebook/eyescream" -> "chuanli11/CNNMRF"
"facebook/eyescream" -> "kaishengtai/torch-ntm" ["e"=1]
"tcoxon/metazelda" -> "zfedoran/pixel-sprite-generator"
"volvet/AlphaMatting" -> "np-csu/AlphaMatting"
"hhj1897/face_parsing" -> "tegusi/EAGRNet"
"hhj1897/face_parsing" -> "ibug-group/fpage" ["e"=1]
"hhj1897/face_parsing" -> "hhj1897/face_detection"
"hhj1897/face_parsing" -> "JACKYLUO1991/FaceParsing"
"Jungjaewon/Reference_based_Skectch_Image_Colorization" -> "UdonDa/Reference-Based-Sketch-Image-Colorization"
"nv-tlabs/semanticGAN_code" -> "nv-tlabs/datasetGAN_release"
"nv-tlabs/semanticGAN_code" -> "seasonSH/SemanticStyleGAN"
"ouhenio/StyleGAN3-CLIP-notebooks" -> "sadnow/360Diffusion" ["e"=1]
"rohitrango/Image-Quilting-for-Texture-Synthesis" -> "afrozalm/Patch-Based-Texture-Synthesis"
"bdol/exemplar_gans" -> "zhangqianhui/Exemplar-GAN-Eye-Inpainting-Tensorflow"
"buriburisuri/sugartensor" -> "buriburisuri/SRGAN" ["e"=1]
"buriburisuri/sugartensor" -> "buriburisuri/ebgan"
"buriburisuri/sugartensor" -> "buriburisuri/supervised_infogan"
"buriburisuri/sugartensor" -> "buriburisuri/ac-gan"
"buriburisuri/sugartensor" -> "buriburisuri/timeseries_gan"
"buriburisuri/sugartensor" -> "zsdonghao/SRGAN" ["e"=1]
"buriburisuri/sugartensor" -> "titu1994/Super-Resolution-using-Generative-Adversarial-Networks" ["e"=1]
"buriburisuri/sugartensor" -> "buriburisuri/ByteNet" ["e"=1]
"buriburisuri/sugartensor" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"buriburisuri/sugartensor" -> "leehomyc/Photo-Realistic-Super-Resoluton" ["e"=1]
"buriburisuri/sugartensor" -> "artcg/BEGAN"
"Heumi/BEGAN-tensorflow" -> "carpedm20/BEGAN-tensorflow"
"Heumi/BEGAN-tensorflow" -> "artcg/BEGAN"
"Heumi/BEGAN-tensorflow" -> "carpedm20/BEGAN-pytorch"
"Heumi/BEGAN-tensorflow" -> "khanrc/tf.gans-comparison"
"theEricMa/OTAvatar" -> "Wang-pengfei/SAGM"
"theEricMa/OTAvatar" -> "shuaizhengliu/Joint-HDRDN"
"JVictorDias/HardestGame" -> "JVictorDias/HardestGameEditor"
"JVictorDias/HardestGame" -> "JVictorDias/Spirograph"
"JVictorDias/HardestGame" -> "JVictorDias/ParticulasGravitacionais3D"
"oddmax/unity-wave-function-collapse-3d" -> "selfsame/unity-wave-function-collapse"
"nerdyrodent/lucid-sonic-dreams" -> "nerdyrodent/deep-daze"
"a312863063/seeprettyface-face_editor" -> "a312863063/seeprettyface-generator-yellow"
"a312863063/seeprettyface-face_editor" -> "a312863063/generators-with-stylegan2"
"a312863063/seeprettyface-face_editor" -> "a312863063/seeprettyface-generator-wanghong"
"a312863063/seeprettyface-face_editor" -> "pbaylies/stylegan-encoder"
"a312863063/seeprettyface-face_editor" -> "a312863063/seeprettyface-generator-star"
"a312863063/seeprettyface-face_editor" -> "rolux/stylegan2encoder"
"a312863063/seeprettyface-face_editor" -> "Puzer/stylegan-encoder"
"a312863063/seeprettyface-face_editor" -> "genforce/interfacegan"
"a312863063/seeprettyface-face_editor" -> "a312863063/seeprettyface-generator-model"
"a312863063/seeprettyface-face_editor" -> "a312863063/Model-Swap-Face"
"a312863063/seeprettyface-face_editor" -> "InterDigitalInc/HRFAE" ["e"=1]
"a312863063/seeprettyface-face_editor" -> "a312863063/seeprettyface-ganerator-dongman"
"a312863063/seeprettyface-face_editor" -> "csmliu/STGAN"
"a312863063/seeprettyface-face_editor" -> "zllrunning/face-parsing.PyTorch"
"a312863063/seeprettyface-face_editor" -> "Honlan/BeautyGAN"
"a312863063/seeprettyface-ganerator-dongman" -> "a312863063/seeprettyface-generator-yellow"
"a312863063/seeprettyface-ganerator-dongman" -> "a312863063/seeprettyface-generator-model"
"a312863063/seeprettyface-ganerator-dongman" -> "a312863063/seeprettyface-dataset"
"clvrai/ACGAN-PyTorch" -> "kimhc6028/acgan-pytorch"
"clvrai/ACGAN-PyTorch" -> "Hydrino/ACGAN_cifar10"
"clvrai/ACGAN-PyTorch" -> "LynnHo/Conditional-GANs-Pytorch"
"SystemErrorWang/CartoonGAN" -> "taki0112/CartoonGAN-Tensorflow"
"IGLICT/OctField" -> "IGLICT/Stylemotion"
"IGLICT/OctField" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/OctField" -> "IGLICT/TM-NET-Jittor"
"IGLICT/OctField" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/OctField" -> "IGLICT/PRS-Net_stamp"
"IGLICT/OctField" -> "IGLICT/TM-NET"
"IGLICT/OctField" -> "IGLICT/PRS-Net"
"IGLICT/OctField" -> "IGLICT/Farthestsampling"
"IGLICT/OctField" -> "IGLICT/IBSR_jittor"
"IGLICT/OctField" -> "IGLICT/RisaNET"
"IGLICT/OctField" -> "IGLICT/DynamicHumanGeneration_Jittor"
"wookayin/tensorflow-plot" -> "shaohua0116/Activation-Visualization-Histogram"
"wookayin/tensorflow-plot" -> "Zardinality/TF-deformable-conv" ["e"=1]
"wookayin/tensorflow-plot" -> "wookayin/dotfiles" ["e"=1]
"IGLICT/MeshPooling" -> "IGLICT/RisaNET"
"IGLICT/MeshPooling" -> "IGLICT/PRS-Net_stamp"
"IGLICT/MeshPooling" -> "IGLICT/Stylemotion"
"IGLICT/MeshPooling" -> "IGLICT/TM-NET"
"IGLICT/MeshPooling" -> "IGLICT/Farthestsampling"
"IGLICT/MeshPooling" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/MeshPooling" -> "IGLICT/TM-NET-Jittor"
"universome/alis" -> "saic-mdal/CIPS"
"universome/alis" -> "universome/inr-gan"
"universome/alis" -> "hubert0527/infinityGAN"
"universome/alis" -> "chail/anyres-gan"
"PaperWeeklyCode/GAN-discussions" -> "dongb5/GAN-Timeline"
"ghwatson/faststyle" -> "mohamedkeid/Feed-Forward-Style-Transfer"
"misgod/fast-neural-style-keras" -> "titu1994/Fast-Neural-Style"
"misgod/fast-neural-style-keras" -> "robertomest/neural-style-keras"
"sercant/mobile-segmentation" -> "sercant/android-segmentation-app"
"NVlabs/metfaces-dataset" -> "onion-liu/aahq-dataset"
"wonwizard/stylgan2-toonify" -> "justinpinkney/toonify"
"wonwizard/stylgan2-toonify" -> "plutoyuxie/toonify-game-character"
"MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing" -> "jasonlo0509/Font2Font"
"MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing" -> "MingtaoGuo/Calligraphic-Images-Denoising-by-GAN"
"MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing" -> "MingtaoGuo/CNN-for-Chinese-Calligraphy-Styles-classification"
"MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing" -> "LinkWoong/Zeroshot-GAN"
"yunjey/mnist-svhn-transfer" -> "SSARCandy/DeepCORAL" ["e"=1]
"yunjey/mnist-svhn-transfer" -> "corenel/pytorch-adda" ["e"=1]
"yunjey/mnist-svhn-transfer" -> "taey16/pix2pixBEGAN.pytorch"
"yunjey/mnist-svhn-transfer" -> "erictzeng/adda" ["e"=1]
"yunjey/mnist-svhn-transfer" -> "zhenxuan00/triple-gan"
"yunjey/mnist-svhn-transfer" -> "sunshineatnoon/Paper-Implementations"
"yunjey/mnist-svhn-transfer" -> "jhoffman/cycada_release" ["e"=1]
"yunjey/mnist-svhn-transfer" -> "aitorzip/PyTorch-CycleGAN"
"yunjey/mnist-svhn-transfer" -> "mrzhu-cool/pix2pix-pytorch"
"yunjey/mnist-svhn-transfer" -> "sagiebenaim/DistanceGAN"
"yunjey/mnist-svhn-transfer" -> "SKTBrain/DiscoGAN"
"yunjey/mnist-svhn-transfer" -> "carpedm20/DiscoGAN-pytorch"
"yunjey/mnist-svhn-transfer" -> "HsinYingLee/DRIT"
"yunjey/mnist-svhn-transfer" -> "AAnoosheh/ComboGAN"
"yunjey/mnist-svhn-transfer" -> "mingyuliutw/CoGAN"
"DifanLiu/ASSET" -> "PeterWang512/GANWarping"
"Code-Bullet/2048-AI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/2048-AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/2048-AI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/2048-AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/MarbleCalculator" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/MarbleCalculator" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/MarbleCalculator" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/2048-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Flappy-Bird-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/PacNeat"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/Chess-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/NEAT-Template-JavaScript" -> "Code-Bullet/WebsiteTest"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/PacNeat"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/Chess-AI"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/2048-AI"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/NEAT_Template" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/2048-AI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/PacNeat"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Flappy-Bird-AI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/WorldsHardestGameAI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Chess-AI"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/Storm-The-House-Auto-Clicker" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/WebsiteTest" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/2048-AI"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/minesweeper-AI"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/PacNeat"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Storm-The-House-Auto-Clicker"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Piano-Tiles"
"Code-Bullet/WorldsHardestGameAI" -> "Code-Bullet/Pool_AI"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/MarbleCalculator"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/Asteroids-with-NEAT"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/NEAT_Template"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/2048-AI"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/PacNeat"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/Chess-AI"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/AsteroidsAI"
"Code-Bullet/minesweeper-AI" -> "Code-Bullet/WorldsHardestGameAI"
"vt-vl-lab/Guided-pix2pix" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"vt-vl-lab/Guided-pix2pix" -> "ly015/intrinsic_flow" ["e"=1]
"kimhc6028/acgan-pytorch" -> "clvrai/ACGAN-PyTorch"
"deepmind/arnheim" -> "JD-P/cloob-latent-diffusion" ["e"=1]
"chail/anyres-gan" -> "PeterWang512/GANWarping"
"chail/anyres-gan" -> "universome/inr-gan"
"chail/anyres-gan" -> "nupurkmr9/vision-aided-gan"
"chail/anyres-gan" -> "universome/alis"
"chail/anyres-gan" -> "universome/stylegan-v" ["e"=1]
"chail/anyres-gan" -> "DifanLiu/ASSET"
"chail/anyres-gan" -> "autonomousvision/stylegan_xl"
"chail/anyres-gan" -> "NVlabs/denoising-diffusion-gan" ["e"=1]
"chail/anyres-gan" -> "chail/gan-ensembling"
"cxgincsu/SemanticGuidedHumanMatting" -> "SHI-Labs/VMFormer"
"cxgincsu/SemanticGuidedHumanMatting" -> "nowsyn/InstMatt"
"1991viet/Very-deep-cnn-pytorch" -> "1991viet/Very-deep-cnn-tensorflow"
"1991viet/Very-deep-cnn-pytorch" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/Very-deep-cnn-pytorch" -> "1991viet/Hierarchical-attention-networks-pytorch"
"1991viet/Very-deep-cnn-pytorch" -> "1991viet/Character-level-cnn-pytorch"
"ChickenBenny/Airflow-tutorial" -> "ChickenBenny/Airflow-scrapying-ETL-tutorial"
"ChickenBenny/Airflow-tutorial" -> "ChickenBenny/Airflow-Learning-English-tool"
"ChickenBenny/Airflow-tutorial" -> "ChickenBenny/Service-with-Redis-cluster-and-Nginx"
"yizhiwang96/deepvecfont" -> "yizhiwang96/deepvecfont-v2"
"DmitryUlyanov/fast-neural-doodle" -> "DmitryUlyanov/online-neural-doodle"
"DmitryUlyanov/fast-neural-doodle" -> "chuanli11/MGANs"
"DmitryUlyanov/fast-neural-doodle" -> "DmitryUlyanov/texture_nets"
"DmitryUlyanov/online-neural-doodle" -> "DmitryUlyanov/fast-neural-doodle"
"jiaxi-jiang/FBCNN" -> "cszn/SCUNet" ["e"=1]
"chuanli11/MGANs" -> "chuanli11/CNNMRF"
"chuanli11/MGANs" -> "DmitryUlyanov/texture_nets"
"chuanli11/MGANs" -> "leongatys/NeuralImageSynthesis"
"chuanli11/MGANs" -> "pavelgonchar/neural-art-mini"
"chuanli11/MGANs" -> "rtqichen/style-swap"
"chuanli11/MGANs" -> "DmitryUlyanov/fast-neural-doodle"
"awjuliani/oreilly-rl-tutorial" -> "awjuliani/TF-Tutorials"
"MarcoForte/FBA-Matting" -> "MarcoForte/DeepInteractiveSegmentation" ["e"=1]
"MarcoForte/FBA-Matting" -> "Yaoyi-Li/HOP-Matting"
"MarcoForte/FBA-Matting" -> "Ruifeng-Zhou24/AdaMatting"
"yaksoy/SemanticSoftSegmentation" -> "iyah4888/SIGGRAPH18SSS"
"yaksoy/SemanticSoftSegmentation" -> "foamliu/Deep-Image-Matting"
"yaksoy/SemanticSoftSegmentation" -> "Joker316701882/Deep-Image-Matting"
"yaksoy/SemanticSoftSegmentation" -> "lizhengwei1992/Semantic_Human_Matting"
"yaksoy/SemanticSoftSegmentation" -> "yaksoy/AffinityBasedMattingToolbox"
"yaksoy/SemanticSoftSegmentation" -> "MarcoForte/closed-form-matting"
"yaksoy/SemanticSoftSegmentation" -> "poppinace/indexnet_matting"
"yaksoy/SemanticSoftSegmentation" -> "takiyu/portrait_matting"
"yaksoy/SemanticSoftSegmentation" -> "aisegmentcn/matting_human_datasets"
"yaksoy/SemanticSoftSegmentation" -> "hyperconnect/MMNet"
"yaksoy/SemanticSoftSegmentation" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"yaksoy/SemanticSoftSegmentation" -> "Microsoft/human-pose-estimation.pytorch" ["e"=1]
"yaksoy/SemanticSoftSegmentation" -> "PetroWu/AutoPortraitMatting"
"yaksoy/SemanticSoftSegmentation" -> "r-music/chorrrds"
"DLHacks/mocogan" -> "pfnet-research/tgan"
"DLHacks/mocogan" -> "sergeytulyakov/mocogan"
"jamesli1618/Obj-GAN" -> "yitong91/StoryGAN"
"jamesli1618/Obj-GAN" -> "MinfengZhu/DM-GAN"
"jamesli1618/Obj-GAN" -> "tohinz/multiple-objects-gan"
"jamesli1618/Obj-GAN" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"jamesli1618/Obj-GAN" -> "lzhbrian/arbitrary-text-to-image-papers"
"jamesli1618/Obj-GAN" -> "qiaott/MirrorGAN"
"jamesli1618/Obj-GAN" -> "mrlibw/ControlGAN"
"jamesli1618/Obj-GAN" -> "uvavision/Text2Scene"
"jamesli1618/Obj-GAN" -> "taoxugit/AttnGAN"
"jamesli1618/Obj-GAN" -> "dongdongdong666/CPGAN"
"jamesli1618/Obj-GAN" -> "tobran/DF-GAN"
"jamesli1618/Obj-GAN" -> "hanzhanggit/StackGAN-inception-model"
"jamesli1618/Obj-GAN" -> "ypxie/HDGan"
"ericjang/genadv_tutorial" -> "AYLIEN/gan-intro"
"igul222/PixelVAE" -> "ermongroup/Generalized-PixelVAE"
"igul222/PixelVAE" -> "pbloem/pixel-models"
"carolineec/informative-drawings" -> "pschaldenbrand/StyleCLIPDraw"
"carolineec/informative-drawings" -> "yael-vinker/CLIPasso"
"google/lecam-gan" -> "jxhuang0508/GenCo"
"google/lecam-gan" -> "genforce/insgen"
"zhujiapeng/resefa" -> "zhujiapeng/linkgan"
"zhujiapeng/resefa" -> "zhujiapeng/LowRankGAN"
"Pendulibrium/ai-visual-storytelling-seq2seq" -> "eric-xw/AREL"
"yiranran/Unpaired-Portrait-Drawing" -> "yiranran/APDrawingGAN2"
"hwalsuklee/tensorflow-fast-style-transfer" -> "hwalsuklee/tensorflow-style-transfer"
"hwalsuklee/tensorflow-fast-style-transfer" -> "ShafeenTejani/fast-style-transfer"
"hwalsuklee/tensorflow-fast-style-transfer" -> "eridgd/WCT-TF"
"hwalsuklee/tensorflow-fast-style-transfer" -> "robertomest/neural-style-keras"
"hwalsuklee/tensorflow-fast-style-transfer" -> "ghwatson/faststyle"
"hwalsuklee/tensorflow-fast-style-transfer" -> "eriklindernoren/Fast-Neural-Style-Transfer"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/Stylemotion"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/TM-NET"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/DeepFaceEditing-Jittor"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/TM-NET-Jittor"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/PRS-Net_stamp"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/MeshPooling"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/PRS-Net"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/RisaNET"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/OctField"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/NeRF-Editing"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/Farthestsampling"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/intrinsicSym-Jittor"
"IGLICT/DeepFaceVideoEditing" -> "IGLICT/DynamicHumanGeneration_Jittor"
"betterze/StyleSpace" -> "xrenaa/StyleSpace-pytorch"
"betterze/StyleSpace" -> "omertov/encoder4editing"
"betterze/StyleSpace" -> "Tengfei-Wang/HFGI"
"betterze/StyleSpace" -> "danielroich/ID-disentanglement-Pytorch"
"betterze/StyleSpace" -> "OmerKafri/StyleFusion"
"betterze/StyleSpace" -> "danielroich/PTI"
"betterze/StyleSpace" -> "naver-ai/StyleMapGAN"
"betterze/StyleSpace" -> "seasonSH/SemanticStyleGAN"
"betterze/StyleSpace" -> "yuval-alaluf/stylegan3-editing"
"betterze/StyleSpace" -> "genforce/interfacegan"
"betterze/StyleSpace" -> "justinpinkney/pixel2style2pixel"
"betterze/StyleSpace" -> "yuval-alaluf/restyle-encoder"
"betterze/StyleSpace" -> "YotamNitzan/ID-disentanglement"
"betterze/StyleSpace" -> "IVRL/GANLocalEditing"
"betterze/StyleSpace" -> "weihaox/awesome-gan-inversion"
"IGLICT/DSG-Net" -> "IGLICT/MeshPooling"
"IGLICT/DSG-Net" -> "IGLICT/TM-NET"
"IGLICT/DSG-Net" -> "IGLICT/PRS-Net_stamp"
"IGLICT/DSG-Net" -> "IGLICT/Stylemotion"
"IGLICT/DSG-Net" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/DSG-Net" -> "IGLICT/RisaNET"
"IGLICT/DSG-Net" -> "IGLICT/TM-NET-Jittor"
"IGLICT/DSG-Net" -> "IGLICT/Farthestsampling"
"IGLICT/DSG-Net" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/DSG-Net" -> "IGLICT/PRS-Net"
"IGLICT/DSG-Net" -> "IGLICT/MT_DE-Jittor"
"alokwhitewolf/Video-frame-prediction-by-multi-scale-GAN" -> "alokwhitewolf/Class-Activation-Mappings" ["e"=1]
"xunhuang1995/SGAN" -> "yujiali/gmmn" ["e"=1]
"eps696/stylegan2ada" -> "aydao/stylegan2-surgery"
"eps696/stylegan2ada" -> "eps696/stylegan2"
"eps696/stylegan2ada" -> "pbaylies/stylegan2-ada"
"eps696/stylegan2ada" -> "levindabhi/CLIP-Notebooks"
"eps696/stylegan2ada" -> "dvschultz/stylegan2-ada-pytorch"
"eps696/stylegan2ada" -> "EndlessSora/DeceiveD"
"eps696/stylegan2ada" -> "PDillis/stylegan2-fun"
"KAlO2/PerfectShow" -> "srivatsan-ramesh/Virtual-Makeup"
"KAlO2/PerfectShow" -> "hriddhidey/visage"
"KAlO2/PerfectShow" -> "clementf2b/FaceT"
"KAlO2/PerfectShow" -> "badarsh2/Virtual-Makeup"
"KAlO2/PerfectShow" -> "TheMathWizard/Face-Makeup-by-Example"
"utkarshojha/few-shot-gan-adaptation" -> "StevenShaw1999/RSSA"
"utkarshojha/few-shot-gan-adaptation" -> "bcmi/Awesome-Few-Shot-Image-Generation" ["e"=1]
"utkarshojha/few-shot-gan-adaptation" -> "edward3862/LoFGAN-pytorch" ["e"=1]
"utkarshojha/few-shot-gan-adaptation" -> "yaxingwang/MineGAN"
"utkarshojha/few-shot-gan-adaptation" -> "onion-liu/aahq-dataset"
"utkarshojha/few-shot-gan-adaptation" -> "nupurkmr9/vision-aided-gan"
"MingtaoGuo/Calligraphic-Images-Denoising-by-GAN" -> "MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing"
"MingtaoGuo/Calligraphic-Images-Denoising-by-GAN" -> "MingtaoGuo/CNN-for-Chinese-Calligraphy-Styles-classification"
"kodalinaveen3/DRAGAN" -> "jfsantos/dragan-pytorch"
"kodalinaveen3/DRAGAN" -> "pfnet-research/chainer-gan-lib" ["e"=1]
"nolan-dev/stylegan_reimplementation" -> "nolan-dev/GANInterface"
"taki0112/Spectral_Normalization-Tensorflow" -> "MingtaoGuo/sngan_projection_TensorFlow" ["e"=1]
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/Group_Normalization-Tensorflow"
"taki0112/Spectral_Normalization-Tensorflow" -> "minhnhat93/tf-SNDCGAN"
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/Tensorflow-DatasetAPI"
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/DiscoGAN-Tensorflow"
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/pix2pix-Tensorflow"
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/CycleGAN-Tensorflow"
"taki0112/Spectral_Normalization-Tensorflow" -> "taki0112/StableGAN-Tensorflow"
"jfsantos/dragan-pytorch" -> "kodalinaveen3/DRAGAN"
"l4rz/practical-aspects-of-stylegan2-training" -> "l4rz/scaling-up-stylegan2"
"ikarth/wfc_2019f" -> "ikarth/wfc_python"
"ikarth/wfc_2019f" -> "Coac/wave-function-collapse"
"PetroWu/AutoPortraitMatting" -> "Corea/automatic-portrait-tf"
"PetroWu/AutoPortraitMatting" -> "Joker316701882/Deep-Image-Matting"
"PetroWu/AutoPortraitMatting" -> "takiyu/portrait_matting"
"PetroWu/AutoPortraitMatting" -> "np-csu/AlphaMatting"
"PetroWu/AutoPortraitMatting" -> "MarcoForte/closed-form-matting"
"PetroWu/AutoPortraitMatting" -> "foamliu/Deep-Image-Matting"
"PetroWu/AutoPortraitMatting" -> "lizhengwei1992/Semantic_Human_Matting"
"PetroWu/AutoPortraitMatting" -> "MarcoForte/knn-matting"
"PetroWu/AutoPortraitMatting" -> "yaksoy/AffinityBasedMattingToolbox"
"PetroWu/AutoPortraitMatting" -> "dong-x16/PortraitNet"
"PetroWu/AutoPortraitMatting" -> "atilimcetin/global-matting"
"PetroWu/AutoPortraitMatting" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"PetroWu/AutoPortraitMatting" -> "huochaitiantang/pytorch-deep-image-matting"
"PetroWu/AutoPortraitMatting" -> "MattKleinsmith/portraitseg"
"PetroWu/AutoPortraitMatting" -> "dingzeyuli/knn-matting"
"adymaharana/storydalle" -> "Flash-321/ARLDM"
"adymaharana/storydalle" -> "adymaharana/StoryViz"
"futscdav/strotss" -> "nkolkin13/STROTSS"
"disestevez/Twitter-Giveaways-Bot" -> "TobiasPankner/Gleam-giveaway-bot"
"disestevez/Twitter-Giveaways-Bot" -> "robbiebarrat/twitter-contest-enterer"
"ry85/VAE-GAN" -> "lisadunlap/VAE-GAN"
"edenton/svg" -> "alexlee-gk/video_prediction"
"edenton/svg" -> "edouardelasalles/srvp"
"edenton/svg" -> "facebookresearch/improved_vrnn"
"edenton/svg" -> "jthsieh/DDPAE-video-prediction"
"edenton/svg" -> "edenton/drnet"
"edenton/svg" -> "edenton/drnet-py"
"edenton/svg" -> "rubenvillegas/iclr2017mcnet"
"edenton/svg" -> "tfxue/visual-dynamics"
"edenton/svg" -> "vincent-leguen/PhyDNet" ["e"=1]
"edenton/svg" -> "rubenvillegas/icml2017hierchvid"
"edenton/svg" -> "XiYe20/VPTR"
"edenton/svg" -> "brain-research/long-term-video-prediction-without-supervision"
"edenton/svg" -> "SudeepDasari/visual_foresight" ["e"=1]
"edenton/svg" -> "applied-ai-lab/genesis" ["e"=1]
"jthsieh/DDPAE-video-prediction" -> "edenton/svg"
"jthsieh/DDPAE-video-prediction" -> "edouardelasalles/srvp"
"jthsieh/DDPAE-video-prediction" -> "akosiorek/sqair" ["e"=1]
"elvisyjlin/AttGAN-PyTorch" -> "bluestyle97/STGAN-pytorch"
"elvisyjlin/AttGAN-PyTorch" -> "LynnHo/AttGAN-Tensorflow"
"elvisyjlin/AttGAN-PyTorch" -> "csmliu/STGAN"
"elvisyjlin/AttGAN-PyTorch" -> "LynnHo/HD-CelebA-Cropper"
"elvisyjlin/AttGAN-PyTorch" -> "elvisyjlin/SpatialAttentionGAN"
"elvisyjlin/AttGAN-PyTorch" -> "elvisyjlin/RelGAN-PyTorch" ["e"=1]
"Ha0Tang/GestureGAN" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/XingGAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/C2GAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/DDLCN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/HandGestureRecognition" ["e"=1]
"Ha0Tang/GestureGAN" -> "Ha0Tang/AttentionGAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/AsymmetricGAN"
"Ha0Tang/GestureGAN" -> "Ha0Tang/ASGAN"
"tantara/JejuNet" -> "dailystudio/ml"
"tantara/JejuNet" -> "anilsathyan7/Portrait-Segmentation"
"tantara/JejuNet" -> "sercant/mobile-segmentation"
"tantara/JejuNet" -> "lizhengwei1992/Fast_Portrait_Segmentation"
"tantara/JejuNet" -> "akirasosa/mobile-semantic-segmentation"
"tantara/JejuNet" -> "lizhengwei1992/mobile_phone_human_matting"
"tantara/JejuNet" -> "dong-x16/PortraitNet"
"tantara/JejuNet" -> "hyperconnect/MMNet"
"tantara/JejuNet" -> "lizhengwei1992/Semantic_Human_Matting"
"UmarSpa/HairAnalysis" -> "YBIGTA/pytorch-hair-segmentation"
"UmarSpa/HairAnalysis" -> "gaelkt/HairNets"
"UmarSpa/HairAnalysis" -> "sujit25/Human-hair-detection"
"eraserNut/MTMT" -> "zijundeng/BDRAR"
"eraserNut/MTMT" -> "stevewongv/DSC-PyTorch"
"eraserNut/MTMT" -> "eraserNut/ViSha"
"eraserNut/MTMT" -> "stevewongv/InstanceShadowDetection"
"zhangqianhui/GazeAnimation" -> "Ha0Tang/BiGraphGAN"
"zhangqianhui/GazeAnimation" -> "Ha0Tang/XingGAN"
"zhangqianhui/GazeAnimation" -> "tobran/DF-GAN"
"zhangqianhui/GazeAnimation" -> "zhangqianhui/GazeCorrection"
"zhangqianhui/GazeAnimation" -> "HzDmS/gaze_redirection"
"PacktPublishing/Generative-Adversarial-Networks-Cookbook" -> "PacktPublishing/Generative-Adversarial-Networks-Projects"
"PacktPublishing/Generative-Adversarial-Networks-Cookbook" -> "PacktPublishing/Learning-Generative-Adversarial-Networks"
"PacktPublishing/Generative-Adversarial-Networks-Cookbook" -> "PacktPublishing/Hands-On-Generative-Adversarial-Networks-with-Keras"
"yucornetto/MGMatting" -> "nowsyn/SIM"
"yucornetto/MGMatting" -> "Yaoyi-Li/GCA-Matting"
"yucornetto/MGMatting" -> "yunkezhang/TCVOM"
"yucornetto/MGMatting" -> "wchstrife/Awesome-Image-Matting"
"yucornetto/MGMatting" -> "webtoon/matteformer"
"yucornetto/MGMatting" -> "JizhiziLi/AIM"
"yucornetto/MGMatting" -> "kelisiya/TIMI-Net"
"yucornetto/MGMatting" -> "michaelowenliu/awesome-image-matting"
"yucornetto/MGMatting" -> "yunkezhang/FusionMatting"
"yucornetto/MGMatting" -> "nowsyn/DVM"
"yucornetto/MGMatting" -> "aisegmentcn/matting_human_datasets"
"yucornetto/MGMatting" -> "JizhiziLi/GFM"
"yucornetto/MGMatting" -> "wukaoliu/CVPR2020-HAttMatting"
"yucornetto/MGMatting" -> "nowsyn/InstMatt"
"yucornetto/MGMatting" -> "MarcoForte/FBA_Matting"
"jrosebr1/bat-country" -> "OverStruck/deep-dream-maker"
"jrosebr1/bat-country" -> "VISIONAI/clouddream"
"jrosebr1/bat-country" -> "jcjohnson/cnn-vis"
"znxlwm/pytorch-pix2pix" -> "togheppi/pix2pix"
"znxlwm/pytorch-pix2pix" -> "znxlwm/pytorch-CycleGAN"
"znxlwm/pytorch-pix2pix" -> "TeeyoHuang/pix2pix-pytorch"
"znxlwm/pytorch-pix2pix" -> "mrzhu-cool/pix2pix-pytorch"
"snap-research/CAT" -> "lychenyoko/content-aware-gan-compression"
"snap-research/CAT" -> "SJLeo/DMAD"
"snap-research/CAT" -> "bytedance/OMGD"
"snap-research/CAT" -> "SJLeo/GCC"
"tsc2017/Inception-Score" -> "tsc2017/Frechet-Inception-Distance"
"chihfanhsu/gaze_correction" -> "zhangqianhui/GazeCorrection"
"chihfanhsu/gaze_correction" -> "HzDmS/gaze_redirection"
"chihfanhsu/gaze_correction" -> "zhangqianhui/GazeAnimation"
"kfiraberman/neural_best_buddies" -> "sunniesuhyoung/DST"
"Chrispresso/SnakeAI" -> "Chrispresso/SuperMarioBros-AI"
"Chrispresso/SnakeAI" -> "TheAILearner/Training-Snake-Game-With-Genetic-Algorithm"
"eric-xw/AREL" -> "Pendulibrium/ai-visual-storytelling-seq2seq"
"eric-xw/AREL" -> "tkim-snu/GLACNet"
"eric-xw/AREL" -> "zychen423/KE-VIST"
"eric-xw/AREL" -> "lichengunc/vist_api"
"1991viet/Character-level-cnn-pytorch" -> "1991viet/Very-deep-cnn-tensorflow"
"1991viet/Character-level-cnn-pytorch" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/Character-level-cnn-pytorch" -> "1991viet/Hierarchical-attention-networks-pytorch"
"1991viet/Character-level-cnn-pytorch" -> "1991viet/Very-deep-cnn-pytorch"
"1991viet/Hierarchical-attention-networks-pytorch" -> "1991viet/Very-deep-cnn-tensorflow"
"1991viet/Hierarchical-attention-networks-pytorch" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/Hierarchical-attention-networks-pytorch" -> "1991viet/Very-deep-cnn-pytorch"
"1991viet/Hierarchical-attention-networks-pytorch" -> "1991viet/Character-level-cnn-pytorch"
"1991viet/Very-deep-cnn-tensorflow" -> "1991viet/Character-level-cnn-tensorflow"
"1991viet/Very-deep-cnn-tensorflow" -> "1991viet/Hierarchical-attention-networks-pytorch"
"donydchen/ganimation_replicate" -> "vipermu/ganimation"
"donydchen/ganimation_replicate" -> "joffery/GC-GAN"
"donydchen/ganimation_replicate" -> "albertpumarola/GANimation"
"seanbell/intrinsic" -> "zhengqili/CGIntrinsics"
"seanbell/intrinsic" -> "seanbell/opensurfaces"
"seanbell/intrinsic" -> "tinghuiz/learn-reflectance"
"seanbell/intrinsic" -> "kvanhoey/UnsupervisedIntrinsicDecomposition"
"seanbell/intrinsic" -> "shi-jian/shapenet-intrinsics"
"seanbell/intrinsic" -> "zhengqili/unsupervised-learning-intrinsic-images"
"seanbell/intrinsic" -> "fqnchina/IntrinsicImage"
"seanbell/intrinsic" -> "akanazawa/Intrinsic-Image"
"seanbell/intrinsic" -> "tnarihi/direct-intrinsics"
"seanbell/intrinsic" -> "lixx2938/CGIntrinsics"
"seanbell/intrinsic" -> "lixx2938/unsupervised-learning-intrinsic-images"
"seanbell/intrinsic" -> "zhixinshu/NeuralFaceEditing" ["e"=1]
"seanbell/intrinsic" -> "davidstutz/grosse2009-intrinsic-images"
"seanbell/intrinsic" -> "JannerM/intrinsics-network"
"seanbell/intrinsic" -> "DefUs3r/Intrinsic-Image-Decomposition"
"JBezerra/YT-Rede-Neural" -> "filhoweuler/SnakeIA"
"InterDigitalInc/latent-transformer" -> "AnonSubm2021/TransStyleGAN"
"wxs/subjective-functions" -> "jessemelpolio/non-stationary_texture_syn"
"wxs/subjective-functions" -> "Yijunmaverick/MultiTextureSynthesis"
"artcg/BEGAN" -> "Heumi/BEGAN-tensorflow"
"artcg/BEGAN" -> "carpedm20/BEGAN-tensorflow"
"artcg/BEGAN" -> "carpedm20/BEGAN-pytorch"
"kundan2510/pixelCNN" -> "anantzoid/Conditional-PixelCNN-decoder"
"kundan2510/pixelCNN" -> "carpedm20/pixel-rnn-tensorflow"
"kundan2510/pixelCNN" -> "igul222/pixel_rnn"
"skyflynil/stylegan2" -> "dvschultz/stylegan2"
"skyflynil/stylegan2" -> "RoyWheels/stylegan2-ada"
"skyflynil/stylegan2" -> "dvschultz/ai"
"skyflynil/stylegan2" -> "aydao/stylegan2-surgery"
"skyflynil/stylegan2" -> "terrybroad/network-bending"
"skyflynil/stylegan2" -> "rolux/stylegan2encoder"
"pavelgonchar/neural-art-mini" -> "pavelgonchar/color-independent-style-transfer"
"yunjey/dtn-tensorflow" -> "david-gpu/deep-makeover"
"yunjey/dtn-tensorflow" -> "carpedm20/BEGAN-pytorch"
"alehander42/pseudo" -> "alehander42/pseudo-python"
"alehander42/pseudo" -> "pavlovml/match"
"HideUnderBush/UI2I_via_StyleGAN2" -> "sangwoomo/FreezeD"
"mrlibw/ManiGAN" -> "mrlibw/ControlGAN"
"mrlibw/ManiGAN" -> "mrlibw/Lightweight-Manipulation"
"mrlibw/ManiGAN" -> "MinfengZhu/DM-GAN"
"mrlibw/ManiGAN" -> "woozzu/tagan"
"GuoLanqing/Awesome-Shadow-Removal" -> "GuoLanqing/ShadowFormer"
"GuoLanqing/Awesome-Shadow-Removal" -> "GuoLanqing/Self-Convolution"
"GuoLanqing/Awesome-Shadow-Removal" -> "GuoLanqing/ReLLIE"
"GuoLanqing/Awesome-Shadow-Removal" -> "GuoLanqing/ShadowDiffusion"
"GuoLanqing/Awesome-Shadow-Removal" -> "cvlab-stonybrook/SID"
"LingDong-/ndwfc" -> "Bendzae/WFCVoxelModelGenerator"
"LingDong-/ndwfc" -> "kchapelier/wavefunctioncollapse"
"LingDong-/ndwfc" -> "Coac/wave-function-collapse"
"baudm/vaegan-celebs-keras" -> "crmaximo/VAEGAN"
"thenewboston-developers/thenewboston-python-client" -> "thenewboston-developers/Management"
"tsc2017/Frechet-Inception-Distance" -> "tsc2017/Inception-Score"
"thenewboston-developers/Kotlin-SDK" -> "thenewboston-developers/Website-API"
"thenewboston-developers/Kotlin-SDK" -> "thenewboston-developers/Validator"
"thenewboston-developers/thenewboston-python" -> "thenewboston-developers/Bank"
"thenewboston-developers/thenewboston-python" -> "thenewboston-developers/Validator"
"thenewboston-developers/thenewboston-python" -> "thenewboston-developers/Payment-Processor"
"thenewboston-developers/thenewboston-python" -> "thenewboston-developers/Website-API"
"thenewboston-developers/thenewboston-python" -> "thenewboston-developers/Account-Manager"
"1991viet/Deeplab-pytorch" -> "1991viet/very-deep-cnn-pytorch"
"1991viet/Deeplab-pytorch" -> "1991viet/character-level-cnn-pytorch"
"1991viet/Deeplab-pytorch" -> "1991viet/Yolo-pytorch"
"1991viet/Deeplab-pytorch" -> "1991viet/Scalable-image-search-with-deep-image-representation"
"1991viet/Deeplab-pytorch" -> "1991viet/Character-level-cnn-tensorflow"
"Wang-pengfei/SAGM" -> "shuaizhengliu/Joint-HDRDN"
"Wang-pengfei/SAGM" -> "MinghanLi/MDQE_CVPR2023"
"Wang-pengfei/SAGM" -> "strongwolf/o2f"
"Prinsphield/ELEGANT" -> "csmliu/STGAN"
"Prinsphield/ELEGANT" -> "Prinsphield/GeneGAN"
"Prinsphield/ELEGANT" -> "wdyin/GeoGAN"
"Prinsphield/ELEGANT" -> "Prinsphield/DNA-GAN"
"Prinsphield/ELEGANT" -> "LynnHo/HD-CelebA-Cropper"
"Prinsphield/ELEGANT" -> "LynnHo/AttGAN-Tensorflow"
"Prinsphield/ELEGANT" -> "barisgecer/facegan" ["e"=1]
"Prinsphield/ELEGANT" -> "zhangqianhui/Sparsely-Grouped-GAN"
"Prinsphield/ELEGANT" -> "AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation"
"Prinsphield/ELEGANT" -> "yingcong/Facelet_Bank"
"Prinsphield/ELEGANT" -> "facebookresearch/FaderNetworks"
"emansim/unsupervised-videos" -> "kracwarlock/action-recognition-visual-attention" ["e"=1]
"davrempe/domain-transfer-net" -> "taey16/DomainTransferNetwork.pytorch"
"yingcong/Facelet_Bank" -> "paulu/deepfeatinterp"
"pbaylies/stylegan2" -> "aydao/stylegan2-surgery"
"pbaylies/stylegan2" -> "skyflynil/stylegan2"
"pbaylies/stylegan2" -> "rolux/stylegan2encoder"
"pbaylies/stylegan2" -> "RoyWheels/stylegan2-ada"
"pbaylies/stylegan2" -> "dvschultz/ai"
"pbaylies/stylegan2" -> "pbaylies/stylegan2-ada"
"pbaylies/stylegan2" -> "JCBrouwer/maua-stylegan2"
"pbaylies/stylegan2" -> "justinpinkney/awesome-pretrained-stylegan2"
"pbaylies/stylegan2" -> "nikhiltiru/stylegan2"
"pbaylies/stylegan2" -> "dvschultz/stylegan2-ada"
"pbaylies/stylegan2" -> "dvschultz/ml-art-colabs"
"pbaylies/stylegan2" -> "pbaylies/stylegan-encoder"
"pbaylies/stylegan2" -> "dvschultz/stylegan2"
"pbaylies/stylegan2" -> "terrybroad/network-bending"
"pbaylies/stylegan2" -> "justinpinkney/awesome-pretrained-stylegan3"
"ztex08010518/Stylizing-3D-Scene" -> "VITA-Group/INS"
"anopara/multi-resolution-texture-synthesis" -> "anopara/patch-based-texture-synthesis"
"anopara/multi-resolution-texture-synthesis" -> "anopara/texturesynthesisnonparametricsampling"
"pkuanjie/ArtFlow" -> "HalbertCH/IEContraAST"
"shekkizh/Colorization.tensorflow" -> "nilboy/colorization-tf"
"shekkizh/Colorization.tensorflow" -> "Armour/Automatic-Image-Colorization"
"shekkizh/Colorization.tensorflow" -> "boyw165/tensorflow-colornet"
"ChenyangLEI/automatic-video-colorization" -> "zhaoyuzhi/VCGAN"
"ChenyangLEI/automatic-video-colorization" -> "zhangmozhe/Deep-Exemplar-based-Video-Colorization"
"nilboy/colorization-tf" -> "shekkizh/Colorization.tensorflow"
"nilboy/colorization-tf" -> "boyw165/tensorflow-colornet"
"nilboy/colorization-tf" -> "cameronfabbri/Colorful-Image-Colorization"
"thenewboston-developers/Project-Proposals" -> "itsnikhil/tnb-analysis"
"thenewboston-developers/Project-Proposals" -> "thenewboston-developers/KeyGenerator"
"taey16/DomainTransferNetwork.pytorch" -> "davrempe/domain-transfer-net"
"cameronfabbri/Colorful-Image-Colorization" -> "nilboy/colorization-tf"
"cameronfabbri/Colorful-Image-Colorization" -> "shekkizh/Colorization.tensorflow"
"cameronfabbri/Colorful-Image-Colorization" -> "foamliu/Colorful-Image-Colorization"
"cameronfabbri/Colorful-Image-Colorization" -> "Armour/Automatic-Image-Colorization"
"saurabhmathur96/clickbait-detector" -> "peterldowns/clickbait-classifier"
"saurabhmathur96/clickbait-detector" -> "rahulkapoor90/This-is-Clickbait"
"saurabhmathur96/clickbait-detector" -> "abhishekkrthakur/clickbaits_revisited"
"anantzoid/Conditional-PixelCNN-decoder" -> "carpedm20/pixel-rnn-tensorflow"
"anantzoid/Conditional-PixelCNN-decoder" -> "kundan2510/pixelCNN"
"anantzoid/Conditional-PixelCNN-decoder" -> "openai/pixel-cnn"
"anantzoid/Conditional-PixelCNN-decoder" -> "PrajitR/fast-pixel-cnn"
"anantzoid/Conditional-PixelCNN-decoder" -> "jakebelew/gated-pixel-cnn"
"anantzoid/Conditional-PixelCNN-decoder" -> "Mostafa-Samir/DNC-tensorflow" ["e"=1]
"anantzoid/Conditional-PixelCNN-decoder" -> "timsainb/Tensorflow-MultiGPU-VAE-GAN"
"anantzoid/Conditional-PixelCNN-decoder" -> "jzbontar/pixelcnn-pytorch" ["e"=1]
"anantzoid/Conditional-PixelCNN-decoder" -> "ikostrikov/TensorFlow-VAE-GAN-DRAW"
"anantzoid/Conditional-PixelCNN-decoder" -> "rampage644/wavenet"
"anantzoid/Conditional-PixelCNN-decoder" -> "Tetrachrome/subpixel"
"anantzoid/Conditional-PixelCNN-decoder" -> "igul222/PixelVAE"
"anantzoid/Conditional-PixelCNN-decoder" -> "marcofraccaro/srnn" ["e"=1]
"wty-ustc/e2style" -> "ZPdesu/II2S"
"christiansiegel/knitter" -> "MaloDrougard/knit"
"christiansiegel/knitter" -> "i-make-robots/weaving_algorithm"
"christiansiegel/knitter" -> "midare/string-knitting"
"christiansiegel/knitter" -> "wose/Strixel"
"eps696/stylegan2" -> "eps696/stylegan2ada"
"eps696/stylegan2" -> "aydao/stylegan2-surgery"
"eps696/stylegan2" -> "eps696/stargan2" ["e"=1]
"eps696/stylegan2" -> "JCBrouwer/maua-stylegan2"
"eps696/stylegan2" -> "Norod/my-colab-experiments"
"eps696/stylegan2" -> "dvschultz/stylegan2-ada-pytorch"
"eps696/stylegan2" -> "tals/derivative-works"
"eps696/stylegan2" -> "dvschultz/stylegan2-ada"
"eps696/stylegan2" -> "universome/alis"
"JVictorDias/DeepCars" -> "JVictorDias/FlappIA-Bird"
"JVictorDias/DeepCars" -> "JVictorDias/Dinossauro-Google"
"JVictorDias/DeepCars" -> "JVictorDias/ParticulasGravitacionais3D"
"JVictorDias/DeepCars" -> "JVictorDias/AlgoritmoTecelao"
"JVictorDias/DeepCars" -> "JVictorDias/Spirograph"
"JVictorDias/DeepCars" -> "JVictorDias/HardestGame"
"JVictorDias/DeepCars" -> "JVictorDias/HardestGameEditor"
"lukasHoel/stylemesh" -> "ztex08010518/Stylizing-3D-Scene"
"lukasHoel/stylemesh" -> "semchan/UPST-NeRF"
"krychu/wfc" -> "math-fehr/fast-wfc"
"bernhard2202/improved-video-gan" -> "GV1028/videogan"
"bernhard2202/improved-video-gan" -> "alexlee-gk/video_prediction"
"bernhard2202/improved-video-gan" -> "cvondrick/videogan"
"bernhard2202/improved-video-gan" -> "batsa003/videogan"
"Brummi/derender3d" -> "andrewhou1/GeomConsistentFR"
"Ha0Tang/DAGAN" -> "Ha0Tang/LGGAN"
"TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale" -> "neuralchen/ASMAGAN"
"TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale" -> "AceSix/Knowledge_Transfer"
"TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale" -> "TZYSJTU/Im2Oil"
"LucasSheng/avatar-net" -> "tyui592/Avatar-Net_Pytorch"
"LucasSheng/avatar-net" -> "JianqiangRen/AAMS"
"LucasSheng/avatar-net" -> "LouieYang/stroke-controllable-fast-style-transfer"
"LucasSheng/avatar-net" -> "sunshineatnoon/PytorchWCT"
"LucasSheng/avatar-net" -> "sunshineatnoon/LinearStyleTransfer"
"LucasSheng/avatar-net" -> "rtqichen/style-swap"
"LucasSheng/avatar-net" -> "irasin/Pytorch_Style_Swap"
"LucasSheng/avatar-net" -> "GlebBrykin/SANET"
"LucasSheng/avatar-net" -> "nnaisense/conditional-style-transfer"
"ptrblck/prog_gans_pytorch_inference" -> "github-pengge/PyTorch-progressive_growing_of_gans"
"ptrblck/prog_gans_pytorch_inference" -> "stormraiser/GAN-weight-norm"
"ptrblck/prog_gans_pytorch_inference" -> "nashory/pggan-pytorch"
"ptrblck/prog_gans_pytorch_inference" -> "felixgwu/mask_rcnn_pytorch" ["e"=1]
"ptrblck/prog_gans_pytorch_inference" -> "koz4k/dni-pytorch" ["e"=1]
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Pytorch" -> "LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2"
"Flash-321/ARLDM" -> "adymaharana/storydalle"
"anopara/patch-based-texture-synthesis" -> "anopara/multi-resolution-texture-synthesis"
"anopara/patch-based-texture-synthesis" -> "anopara/texturesynthesisnonparametricsampling"
"anopara/patch-based-texture-synthesis" -> "anopara/texture-synthesis-nonparametric-sampling"
"Armour/Automatic-Image-Colorization" -> "shekkizh/Colorization.tensorflow"
"Armour/Automatic-Image-Colorization" -> "lukemelas/Automatic-Image-Colorization"
"Armour/Automatic-Image-Colorization" -> "ImagingLab/Colorizing-with-GANs"
"Armour/Automatic-Image-Colorization" -> "nilboy/colorization-tf"
"Armour/Automatic-Image-Colorization" -> "zeruniverse/neural-colorization"
"Armour/Automatic-Image-Colorization" -> "PrimozGodec/ImageColorization"
"Armour/Automatic-Image-Colorization" -> "msracver/Deep-Exemplar-based-Colorization"
"mahmoudnafifi/HistoGAN" -> "chail/anyres-gan"
"Ha0Tang/LGGAN" -> "Ha0Tang/DAGAN"
"Ha0Tang/LGGAN" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/LGGAN" -> "Ha0Tang/AsymmetricGAN"
"Ha0Tang/LGGAN" -> "Ha0Tang/EdgeGAN"
"Ha0Tang/LGGAN" -> "xh-liu/CC-FPSE" ["e"=1]
"Ha0Tang/LGGAN" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/LGGAN" -> "Ha0Tang/ASGAN"
"Ha0Tang/LGGAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"preritj/progressive_growing_of_GANs" -> "nnUyi/PGGAN"
"Ha0Tang/DDLCN" -> "Ha0Tang/ASGAN"
"Ha0Tang/DDLCN" -> "Ha0Tang/Ha0Tang.github.io"
"CompVis/content-style-disentangled-ST" -> "nnaisense/conditional-style-transfer"
"JannerM/intrinsics-network" -> "fqnchina/IntrinsicImage"
"JannerM/intrinsics-network" -> "lixx2938/unsupervised-learning-intrinsic-images"
"JannerM/intrinsics-network" -> "kvanhoey/UnsupervisedIntrinsicDecomposition"
"JannerM/intrinsics-network" -> "tnarihi/direct-intrinsics"
"JannerM/intrinsics-network" -> "zhengqili/unsupervised-learning-intrinsic-images"
"JannerM/intrinsics-network" -> "kovibalu/saw_release"
"JannerM/intrinsics-network" -> "davidstutz/grosse2009-intrinsic-images"
"naoto0804/SynShadow" -> "tsingqguo/exposure-fusion-shadow-removal"
"naoto0804/SynShadow" -> "cvlab-stonybrook/SID"
"naoto0804/SynShadow" -> "stevewongv/DSC-PyTorch"
"naoto0804/SynShadow" -> "hhqweasd/LG-ShadowNet"
"naoto0804/SynShadow" -> "xw-hu/Mask-ShadowGAN"
"naoto0804/SynShadow" -> "vinthony/ghost-free-shadow-removal"
"papagina/HairNet_DataSetGeneration" -> "pielet/HairNet"
"papagina/HairNet_DataSetGeneration" -> "MengZephyr/HairGANs"
"papagina/HairNet_DataSetGeneration" -> "papagina/HairNet_orient2D"
"papagina/HairNet_DataSetGeneration" -> "MrPhD/HairNet"
"papagina/HairNet_DataSetGeneration" -> "suyuan945/HairNet"
"papagina/HairNet_DataSetGeneration" -> "Lingchen-chen/Dynamic-Hair"
"papagina/HairNet_DataSetGeneration" -> "iwanao731/ofxHairModel"
"JACKYLUO1991/FaceParsing" -> "JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation"
"JACKYLUO1991/FaceParsing" -> "tegusi/EAGRNet"
"JACKYLUO1991/FaceParsing" -> "hhj1897/face_parsing"
"JACKYLUO1991/FaceParsing" -> "kampta/face-seg"
"JACKYLUO1991/FaceParsing" -> "TracelessLe/FaceParsing.PyTorch"
"mintanwei/Cycle-IR" -> "catalina85/wssdcnn"
"mintanwei/Cycle-IR" -> "linchuming/WSSDCNN"
"bryandlee/stylegan2-encoder-pytorch" -> "genforce/idinvert_pytorch"
"bryandlee/stylegan2-encoder-pytorch" -> "soushirou/stylegan3-encoder"
"bryandlee/stylegan2-encoder-pytorch" -> "woctezuma/stylegan2-projecting-images"
"Ha0Tang/C2GAN" -> "Ha0Tang/Guided-I2I-Translation-Papers"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/C2GAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/XingGAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/DAGAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/SelectionGAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "vt-vl-lab/Guided-pix2pix"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/AsymmetricGAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/BiGraphGAN"
"Ha0Tang/Guided-I2I-Translation-Papers" -> "Ha0Tang/LGGAN"
"recong/Boundless-in-Pytorch" -> "zcemycl/Pytorch_Outpainting_SRN"
"recong/Boundless-in-Pytorch" -> "Liuhongzhi2018/Image-Extrapolation"
"poolio/unrolled_gan" -> "andrewliao11/unrolled-gans"
"poolio/unrolled_gan" -> "tonywu95/eval_gen"
"poolio/unrolled_gan" -> "kodalinaveen3/DRAGAN"
"poolio/unrolled_gan" -> "buriburisuri/ebgan"
"poolio/unrolled_gan" -> "anitan0925/vaegan"
"poolio/unrolled_gan" -> "LMescheder/AdversarialVariationalBayes" ["e"=1]
"GuoLanqing/Self-Convolution" -> "GuoLanqing/ReLLIE"
"GuoLanqing/Self-Convolution" -> "GuoLanqing/Lane-Detection-with-ERFNet"
"VITA-Group/INS" -> "ztex08010518/Stylizing-3D-Scene"
"cv-rits/CoMoGAN" -> "cv-rits/ManiFest"
"cv-rits/CoMoGAN" -> "imlixinyang/HiSD"
"cv-rits/CoMoGAN" -> "mu-cai/frequency-domain-image-translation"
"semchan/UPST-NeRF" -> "ztex08010518/Stylizing-3D-Scene"
"universome/inr-gan" -> "saic-mdal/CIPS"
"universome/inr-gan" -> "sihyun-yu/digan" ["e"=1]
"universome/inr-gan" -> "universome/stylegan-v" ["e"=1]
"universome/inr-gan" -> "chail/anyres-gan"
"universome/inr-gan" -> "universome/alis"
"universome/inr-gan" -> "hubert0527/infinityGAN"
"universome/inr-gan" -> "snap-research/MoCoGAN-HD" ["e"=1]
"universome/inr-gan" -> "tamarott/ASAPNet"
"universome/inr-gan" -> "stevenygd/NFGP" ["e"=1]
"universome/inr-gan" -> "EmilienDupont/neural-function-distributions"
"suyuan945/HairNet" -> "pielet/HairNet"
"suyuan945/HairNet" -> "iwanao731/ofxHairModel"
"IGLICT/IBSR_jittor" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/IBSR_jittor" -> "IGLICT/Stylemotion"
"IGLICT/IBSR_jittor" -> "IGLICT/MeshVAE_neural_editing"
"taki0112/UNIT-Tensorflow" -> "taki0112/Tensorflow-DatasetAPI"
"afruehstueck/insetGAN" -> "stylegan-human/StyleGAN-Human"
"dukebw/LOHO" -> "tzt101/MichiGAN"
"dukebw/LOHO" -> "Taeu/Style-Your-Hair"
"dukebw/LOHO" -> "tadangkhoa1999/HairstyleGAN"
"fxia22/PixelDTGAN" -> "guojunq/lsgan"
"fxia22/PixelDTGAN" -> "DmitryUlyanov/AGE"
"willylulu/celeba-hq-modified" -> "nperraud/download-celebA-HQ"
"taki0112/DRIT-Tensorflow" -> "taki0112/MUNIT-Tensorflow"
"shi-jian/shapenet-intrinsics" -> "tnarihi/direct-intrinsics"
"shi-jian/shapenet-intrinsics" -> "fqnchina/IntrinsicImage"
"shi-jian/shapenet-intrinsics" -> "akanazawa/Intrinsic-Image"
"tnarihi/direct-intrinsics" -> "fqnchina/IntrinsicImage"
"tnarihi/direct-intrinsics" -> "shi-jian/shapenet-intrinsics"
"tnarihi/direct-intrinsics" -> "tinghuiz/learn-reflectance"
"tnarihi/direct-intrinsics" -> "zhengqili/unsupervised-learning-intrinsic-images"
"tnarihi/direct-intrinsics" -> "liygcheng/PyrResNet"
"zdlarr/Location-aware-SIRR" -> "JHL-HUST/IBCLN"
"zdlarr/Location-aware-SIRR" -> "wanrenjie/CoRRN"
"rubenvillegas/iclr2017mcnet" -> "edenton/drnet"
"rubenvillegas/iclr2017mcnet" -> "brain-research/long-term-video-prediction-without-supervision"
"rubenvillegas/iclr2017mcnet" -> "edenton/drnet-py"
"rubenvillegas/iclr2017mcnet" -> "moliusimon/frnn"
"rubenvillegas/iclr2017mcnet" -> "rubenvillegas/icml2017hierchvid"
"rubenvillegas/iclr2017mcnet" -> "coupriec/VideoPredictionICLR2016"
"rubenvillegas/iclr2017mcnet" -> "tfxue/visual-dynamics"
"rubenvillegas/iclr2017mcnet" -> "Yuliang-Zou/tf_videogan" ["e"=1]
"safwankdb/ReCoNet-PyTorch" -> "liulai/reconet-torch"
"safwankdb/ReCoNet-PyTorch" -> "changgyhub/reconet"
"safwankdb/ReCoNet-PyTorch" -> "EmptySamurai/pytorch-reconet"
"safwankdb/ReCoNet-PyTorch" -> "irsisyphus/reconet"
"xiaolonw/ss-gan" -> "GYZHikari/semantic-cosegmentation"
"ThreeSRR/Chinese-Painting-Generator" -> "yanyangbaobeiIsEmma-zz/ChinsePaintingStyleTransfer"
"wayaai/GAN-Sandbox" -> "wayaai/SimGAN"
"ofirlevy/FastMattingPortrait" -> "MattKleinsmith/portraitseg"
"ap229997/DRNET" -> "edenton/drnet-py"
"SelfishGene/SFHQ-dataset" -> "onion-liu/aahq-dataset"
"dailystudio/ml" -> "pillarpond/image-segmenter-android"
"dailystudio/ml" -> "tantara/JejuNet"
"dailystudio/ml" -> "wonderit/indoor-segmentation-android"
"dailystudio/ml" -> "Gauravv97/CameraBlur"
"zalandoresearch/famos" -> "zalandoresearch/psgan"
"gitlimlab/ACGAN-PyTorch" -> "gitlimlab/FeatureControlHRL-Tensorflow"
"gitlimlab/ACGAN-PyTorch" -> "kimhc6028/acgan-pytorch"
"JudyYe/CVP" -> "SaulZhang/Video_Prediction_ZOO"
"allthemusicllc/tarsplit" -> "allthemusicllc/libatm"
"taey16/pix2pixBEGAN.pytorch" -> "mrzhu-cool/pix2pix-pytorch"
"ikarth/wfc_python" -> "ikarth/wfc_2019f"
"ikarth/wfc_python" -> "s-ol/gpWFC"
"pielet/HairNet" -> "papagina/HairNet_DataSetGeneration"
"pielet/HairNet" -> "suyuan945/HairNet"
"pielet/HairNet" -> "MrPhD/HairNet"
"pielet/HairNet" -> "papagina/HairNet_orient2D"
"MinfengZhu/DM-GAN" -> "qiaott/MirrorGAN"
"MinfengZhu/DM-GAN" -> "mrlibw/ControlGAN"
"MinfengZhu/DM-GAN" -> "dongdongdong666/CPGAN"
"MinfengZhu/DM-GAN" -> "tobran/DF-GAN"
"MinfengZhu/DM-GAN" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"MinfengZhu/DM-GAN" -> "jamesli1618/Obj-GAN"
"MinfengZhu/DM-GAN" -> "ypxie/HDGan"
"MinfengZhu/DM-GAN" -> "mrlibw/ManiGAN"
"MinfengZhu/DM-GAN" -> "huiyegit/T2I_CL"
"MinfengZhu/DM-GAN" -> "tohinz/multiple-objects-gan"
"MinfengZhu/DM-GAN" -> "taoxugit/AttnGAN"
"MinfengZhu/DM-GAN" -> "google-research/xmcgan_image_generation"
"MinfengZhu/DM-GAN" -> "lzhbrian/arbitrary-text-to-image-papers"
"MinfengZhu/DM-GAN" -> "idealwhite/tdanet"
"MinfengZhu/DM-GAN" -> "qiaott/LeicaGAN"
"thenewboston-developers/Bank" -> "thenewboston-developers/Validator"
"thenewboston-developers/Bank" -> "thenewboston-developers/thenewboston-python"
"thenewboston-developers/Bank" -> "thenewboston-developers/Payment-Processor"
"thenewboston-developers/Bank" -> "thenewboston-developers/Website-API"
"thenewboston-developers/Validator" -> "thenewboston-developers/Bank"
"Prinsphield/GeneGAN" -> "Prinsphield/ELEGANT"
"Prinsphield/GeneGAN" -> "Prinsphield/DNA-GAN"
"IShengFang/TypographyResearchCollection" -> "ecnuycxie/DG-Font"
"IShengFang/TypographyResearchCollection" -> "clovaai/fewshot-font-generation"
"IShengFang/TypographyResearchCollection" -> "JeanWU/CalliGAN"
"IShengFang/TypographyResearchCollection" -> "clovaai/lffont"
"IShengFang/TypographyResearchCollection" -> "clovaai/mxfont"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/DeepFaceVideoEditing"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/NeRF-Editing"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/MeshPooling"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/RisaNET"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/StylizedNeRF"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/Stylemotion"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/TM-NET-Jittor"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/OctField"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/TM-NET"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/PRS-Net"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/MeshVAE_neural_editing"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/PRS-Net_stamp"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/DSG-Net"
"IGLICT/DeepFaceEditing-Jittor" -> "IGLICT/IBSR_jittor"
"zhujiapeng/LowRankGAN" -> "zhujiapeng/resefa"
"kyxscut/CG-GAN" -> "tlc121/FsFont"
"tlc121/FsFont" -> "yjunej/FSFont-pytorch"
"edenton/drnet" -> "edenton/drnet-py"
"edenton/drnet" -> "rubenvillegas/iclr2017mcnet"
"edenton/drnet" -> "ap229997/DRNET"
"edenton/drnet" -> "rubenvillegas/icml2017hierchvid"
"JHL-HUST/IBCLN" -> "Vandermode/ERRNet"
"JHL-HUST/IBCLN" -> "csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity"
"JHL-HUST/IBCLN" -> "mingcv/YTMT-Strategy"
"JHL-HUST/IBCLN" -> "zdlarr/Location-aware-SIRR"
"JHL-HUST/IBCLN" -> "fqnchina/CEILNet"
"JHL-HUST/IBCLN" -> "liyucs/RAGNet"
"JHL-HUST/IBCLN" -> "yangj1e/bdn-refremv"
"JHL-HUST/IBCLN" -> "ceciliavision/perceptual-reflection-removal"
"JHL-HUST/IBCLN" -> "NVlabs/ReflectNet"
"isl-org/StableViewSynthesis" -> "isl-org/FreeViewSynthesis"
"aditya12agd5/divcolor" -> "aditya12agd5/pytorch_divcolor"
"aditya12agd5/divcolor" -> "ccyyatnet/COLORGAN"
"taki0112/TripleGAN-Tensorflow" -> "zhenxuan00/triple-gan"
"dongdongdong666/CPGAN" -> "MinfengZhu/DM-GAN"
"zhengqili/CGIntrinsics" -> "zhengqili/unsupervised-learning-intrinsic-images"
"zhengqili/CGIntrinsics" -> "liygcheng/PyrResNet"
"zhengqili/CGIntrinsics" -> "fqnchina/IntrinsicImage"
"zhengqili/CGIntrinsics" -> "kvanhoey/UnsupervisedIntrinsicDecomposition"
"LansburyCH/relightable-nr" -> "google/neural-light-transport"
"DDemmer1/ai-background-remove" -> "ghowa/dhd2020"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Management"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Payment-Processor"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Discord-Bot"
"thenewboston-developers/Website-API" -> "thenewboston-developers/thenewboston-python-client"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Validator"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Kotlin-SDK"
"thenewboston-developers/Website-API" -> "thenewboston-developers/Bank"
"thevoidname/Generalized-One-shot-GAN-Adaption" -> "zhangzc21/ExSinGAN"
"jxcodetw/Stylebank" -> "ichunyeh/StyleBank"
"jxcodetw/Stylebank" -> "yjc567/StyleBank"
"Coac/wave-function-collapse" -> "lamelizard/GraphWaveFunctionCollapse"
"lamelizard/GraphWaveFunctionCollapse" -> "Coac/wave-function-collapse"
"ChenyangLEI/awesome-polarization-in-vision" -> "tkuri/Awesome-Polarization"
"ChenyangLEI/awesome-polarization-in-vision" -> "ChenyangLEI/sfp-wild"
"ChenyangLEI/awesome-polarization-in-vision" -> "ChenyangLEI/polarization-reflection-removal"
"ChenyangLEI/awesome-polarization-in-vision" -> "YouweiLyu/reflection_separation_with_un-polarized_images"
"ChenyangLEI/awesome-polarization-in-vision" -> "akshatdave/pandora"
"mrlibw/ControlGAN" -> "mrlibw/ManiGAN"
"mrlibw/ControlGAN" -> "MinfengZhu/DM-GAN"
"mrlibw/ControlGAN" -> "qiaott/LeicaGAN"
"mrlibw/ControlGAN" -> "qiaott/MirrorGAN"
"mrlibw/ControlGAN" -> "woozzu/tagan"
"mrlibw/ControlGAN" -> "dongdongdong666/CPGAN"
"mrlibw/ControlGAN" -> "tobran/DF-GAN"
"mrlibw/ControlGAN" -> "tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis"
"mrlibw/ControlGAN" -> "maincarry/R-Precision"
"mrlibw/ControlGAN" -> "hanzhanggit/StackGAN-inception-model"
"mrlibw/ControlGAN" -> "jamesli1618/Obj-GAN"
"guojunq/glsgan" -> "guojunq/lsgan"
"kvmanohar22/img2imgGAN" -> "gitlimlab/BicycleGAN-Tensorflow"
"xrenaa/StyleSpace-pytorch" -> "betterze/StyleSpace"
"anitan0925/vaegan" -> "JeremyCCHsu/tf-vaegan"
"anitan0925/vaegan" -> "crmaximo/VAEGAN"
"anitan0925/vaegan" -> "zhangqianhui/vae-gan-tensorflow"
"w86763777/pytorch-gan-metrics" -> "w86763777/pytorch-gan-collections"
"Code-Bullet/Tetris-AI-Javascript" -> "Code-Bullet/Hill-Climb-Racing-AI"
"Code-Bullet/Tetris-AI-Javascript" -> "Code-Bullet/TheBigCB.com"
"Code-Bullet/Tetris-AI-Javascript" -> "Code-Bullet/2048-AI"
"Code-Bullet/Tetris-AI-Javascript" -> "Code-Bullet/NEAT-Template-JavaScript"
"Code-Bullet/Tetris-AI-Javascript" -> "Code-Bullet/WebsiteTest"
"ceshine/fast-neural-style" -> "abhiskk/fast-neural-style"
"ceshine/fast-neural-style" -> "dxyang/StyleTransfer"
"FriedRonaldo/PsyNet" -> "FriedRonaldo/tunit"
"FriedRonaldo/PsyNet" -> "FriedRonaldo/EditableGAN"
"zhangzc21/ExSinGAN" -> "zhangzc21/PetsGAN"
"ChickenBenny/job-platform" -> "ChickenBenny/Airflow-scrapying-ETL-tutorial"
"YingqingHe/interclassgan" -> "EzioBy/glead"
"genekogan/CubistMirror" -> "gafr/chainer-fast-neuralstyle-models"
"ChickenBenny/Airflow-scrapying-ETL-tutorial" -> "ChickenBenny/Airflow-tutorial"
"ChickenBenny/Airflow-scrapying-ETL-tutorial" -> "ChickenBenny/Airflow-Learning-English-tool"
"zhangzc21/PetsGAN" -> "zhangzc21/ExSinGAN"
"danielroich/ID-disentanglement-Pytorch" -> "YotamNitzan/ID-disentanglement"
"kongyanye/cwgan-gp" -> "cameronfabbri/cWGANs"
"aobo-y/hair-dye" -> "quq99/hair-dye-android"
"PacktPublishing/Hands-On-Generative-Adversarial-Networks-with-Keras" -> "PacktPublishing/Learning-Generative-Adversarial-Networks"
"NVlabs/ReflectNet" -> "yangj1e/bdn-refremv"
"yangj1e/bdn-refremv" -> "fqnchina/CEILNet"
"yangj1e/bdn-refremv" -> "csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity"
"l4rz/scaling-up-stylegan2" -> "l4rz/practical-aspects-of-stylegan2-training"
"l4rz/scaling-up-stylegan2" -> "aydao/stylegan2-surgery"
"Corea/automatic-portrait-tf" -> "PetroWu/AutoPortraitMatting"
"Corea/automatic-portrait-tf" -> "MattKleinsmith/portraitseg"
"Corea/automatic-portrait-tf" -> "ofirlevy/FastMattingPortrait"
"JVictorDias/HardestGameEditor" -> "JVictorDias/Spirograph"
"williamyang1991/TET-GAN" -> "williamyang1991/Text-Effects-Transfer"
"williamyang1991/TET-GAN" -> "hologerry/AGIS-Net"
"williamyang1991/TET-GAN" -> "daooshee/Typography-with-Decor"
"williamyang1991/TET-GAN" -> "daooshee/TE141K"
"ZJULearning/CariFaceParsing" -> "zhengziqiang/P2C"
"catalina85/wssdcnn" -> "mintanwei/Cycle-IR"
"catalina85/wssdcnn" -> "linchuming/WSSDCNN"
"fqnchina/IntrinsicImage" -> "tnarihi/direct-intrinsics"
"fqnchina/IntrinsicImage" -> "liygcheng/PyrResNet"
"fqnchina/IntrinsicImage" -> "zhengqili/unsupervised-learning-intrinsic-images"
"fqnchina/IntrinsicImage" -> "zhengqili/CGIntrinsics"
"fqnchina/IntrinsicImage" -> "shi-jian/shapenet-intrinsics"
"fqnchina/IntrinsicImage" -> "tnestmeyer/reflectance-filtering"
"tkim-snu/GLACNet" -> "dgonzalez-ri/neural-visual-storyteller"
"FriedRonaldo/GANs" -> "FriedRonaldo/tunit"
"gitlimlab/CycleGAN-Tensorflow" -> "gitlimlab/DiscoGAN-Tensorflow"
"FacePerceiver/LAION-Face" -> "FacePerceiver/FaRL"
"IGLICT/DynamicHumanGeneration_Jittor" -> "IGLICT/MT_DE-Jittor"
"IGLICT/MeshVAE_neural_editing" -> "IGLICT/Stylemotion"
"IGLICT/RisaNET" -> "IGLICT/MeshPooling"
"IGLICT/RisaNET" -> "IGLICT/PRS-Net_stamp"
"IGLICT/RisaNET" -> "IGLICT/TM-NET-Jittor"
"IGLICT/RisaNET" -> "IGLICT/Stylemotion"
"IGLICT/RisaNET" -> "IGLICT/PRS-NET-Jittor"
"IGLICT/RisaNET" -> "IGLICT/TM-NET"
"IGLICT/RisaNET" -> "IGLICT/Farthestsampling"
"IGLICT/TM-NET" -> "IGLICT/TM-NET-Jittor"
"IGLICT/TM-NET" -> "IGLICT/PRS-Net_stamp"
"KevinJ-Huang/BMNet" -> "jinwan1994/SG-ShadowNet"
"gafr/chainer-fast-neuralstyle-models" -> "yusuketomoto/chainer-fast-neuralstyle"
"gafr/chainer-fast-neuralstyle-models" -> "rupeshs/neuralstyler"
"gafr/chainer-fast-neuralstyle-models" -> "genekogan/CubistMirror"
"gafr/chainer-fast-neuralstyle-models" -> "6o6o/chainer-fast-neuralstyle"
"rosasalberto/StyleGAN2-TensorFlow-2.x" -> "moono/stylegan2-tf-2.x"
"MaloDrougard/knit" -> "christiansiegel/knitter"
"MattKleinsmith/portraitseg" -> "ofirlevy/FastMattingPortrait"
"akanimax/MSG-GAN" -> "akanimax/BBMSG-GAN"
"Xiaoming-Yu/ShadowRemoval" -> "yanqingan/multiscale-deshadow"
"genforce/dynamicd" -> "EzioBy/glead"
"majedelhelou/VIDIT" -> "WangLiwen1994/DeepRelight"
"majedelhelou/VIDIT" -> "mahmoudnafifi/image_relighting"
"majedelhelou/VIDIT" -> "yazdaniamir38/Depth-guided-Image-Relighting"
"majedelhelou/VIDIT" -> "zhhoper/DPR"
"majedelhelou/VIDIT" -> "majedelhelou/BIGPrior"
"majedelhelou/VIDIT" -> "dectrfov/NTIRE-2021-Depth-Guided-Image-Any-to-Any-relighting"
"majedelhelou/VIDIT" -> "widefield2sim/w2s"
"xuzhongyou/Colorization" -> "chufengxiao/Example-based-Colorization-via-Dense-Encoding-Pyramids"
"andrewhou1/GeomConsistentFR" -> "andrewhou1/Shadow-Mask-Face-Relighting"
"eunh/low_dose_CT" -> "xinario/SAGAN"
"eunh/low_dose_CT" -> "houguanqun/Low-Dose-CT-denoising"
"kvanhoey/UnsupervisedIntrinsicDecomposition" -> "zhengqili/unsupervised-learning-intrinsic-images"
"PaParaZz1/CariGANs" -> "imaccormick275/cariGAN"
"Ruifeng-Zhou24/AdaMatting" -> "Yaoyi-Li/HOP-Matting"
"Ruifeng-Zhou24/AdaMatting" -> "MarcoForte/FBA-Matting"
"SSinyu/WGAN_VGG" -> "xinario/SAGAN"
"diyiiyiii/MCCNet" -> "diyiiyiii/Arbitrary-Style-Transfer-via-Multi-Adaptation-Network"
"zychen423/KE-VIST" -> "ethan5437/PR-VIST"
"tnestmeyer/reflectance-filtering" -> "liygcheng/PyrResNet"
"zhengqili/unsupervised-learning-intrinsic-images" -> "kvanhoey/UnsupervisedIntrinsicDecomposition"
"zhengqili/unsupervised-learning-intrinsic-images" -> "zhengqili/CGIntrinsics"
"zhengqili/unsupervised-learning-intrinsic-images" -> "fqnchina/IntrinsicImage"
"zhengqili/unsupervised-learning-intrinsic-images" -> "liygcheng/PyrResNet"
"zhengqili/unsupervised-learning-intrinsic-images" -> "DreamtaleCore/USI3D"
"zhengqili/unsupervised-learning-intrinsic-images" -> "tnarihi/direct-intrinsics"
"zhengqili/unsupervised-learning-intrinsic-images" -> "DefUs3r/Intrinsic-Image-Decomposition"
"zhengqili/unsupervised-learning-intrinsic-images" -> "tnestmeyer/reflectance-filtering"
"lixx2938/CGIntrinsics" -> "lixx2938/unsupervised-learning-intrinsic-images"
"lixx2938/unsupervised-learning-intrinsic-images" -> "lixx2938/CGIntrinsics"
"lixx2938/unsupervised-learning-intrinsic-images" -> "fqnchina/IntrinsicImage"
"IGLICT/Farthestsampling" -> "IGLICT/PRS-Net_stamp"
"EzioBy/glead" -> "YingqingHe/interclassgan"
"soushirou/stylegan3-encoder" -> "dayu1979/stylegan3encoder"
"1991viet/Scalable-image-search-with-deep-image-representation" -> "1991viet/very-deep-cnn-pytorch"
"pietrocarbo/deep-transfer" -> "sunshineatnoon/PytorchWCT"
"taki0112/CycleGAN-Tensorflow" -> "taki0112/DiscoGAN-Tensorflow"
"taki0112/CycleGAN-Tensorflow" -> "taki0112/StableGAN-Tensorflow"
"adymaharana/StoryViz" -> "adymaharana/VLCStoryGan"
"taki0112/StableGAN-Tensorflow" -> "taki0112/CycleGAN-Tensorflow"
"taki0112/StableGAN-Tensorflow" -> "taki0112/DiscoGAN-Tensorflow"
"EmptySamurai/pytorch-reconet" -> "liulai/reconet-torch"
"yazdaniamir38/Depth-guided-Image-Relighting" -> "weitingchen83/NTIRE2021-Depth-Guided-Image-Relighting-MBNet"
"yazdaniamir38/Depth-guided-Image-Relighting" -> "dectrfov/NTIRE-2021-Depth-Guided-Image-Any-to-Any-relighting"
"yazdaniamir38/Depth-guided-Image-Relighting" -> "mahmoudnafifi/image_relighting"
"gitlimlab/FeatureControlHRL-Tensorflow" -> "gitlimlab/DiscoGAN-Tensorflow"
"majedelhelou/BIGPrior" -> "majedelhelou/ADEFAN"
"strongwolf/o2f" -> "MinghanLi/MDQE_CVPR2023"
"jcjohnson/neural-style" ["l"="33.565,32.372"]
"alexjc/neural-doodle" ["l"="33.595,32.401"]
"google/deepdream" ["l"="33.639,32.27"]
"jcjohnson/fast-neural-style" ["l"="33.542,32.492"]
"anishathalye/neural-style" ["l"="33.54,32.443"]
"luanfujun/deep-photo-styletransfer" ["l"="33.609,32.516"]
"karpathy/char-rnn" ["l"="23.324,31.101"]
"torch/torch7" ["l"="27.062,34.026"]
"fchollet/keras" ["l"="23.498,31.087"]
"lengstrom/fast-style-transfer" ["l"="33.565,32.515"]
"tensorflow/magenta" ["l"="33.66,32.394"]
"kaishengtai/neuralart" ["l"="33.511,32.335"]
"dmlc/mxnet" ["l"="27.064,33.96"]
"BVLC/caffe" ["l"="33.749,35.334"]
"karpathy/neuraltalk2" ["l"="27.197,34.147"]
"junyanz/CycleGAN" ["l"="33.66,32.605"]
"babysor/MockingBird" ["l"="33.357,33.441"]
"CorentinJ/Real-Time-Voice-Cloning" ["l"="33.425,33.375"]
"qier222/YesPlayMusic" ["l"="-27.14,-17.642"]
"fighting41love/funNLP" ["l"="31.715,30.146"]
"ssssssss-team/spider-flow" ["l"="6.839,17.606"]
"xinntao/Real-ESRGAN" ["l"="-29.622,-18.829"]
"ruanyf/weekly" ["l"="6.361,17.284"]
"PlexPt/awesome-chatgpt-prompts-zh" ["l"="26.734,30.913"]
"Baiyuetribe/paper2gui" ["l"="-27.23,-17.92"]
"THUDM/ChatGLM-6B" ["l"="27.085,31"]
"geekan/HowToLiveLonger" ["l"="6.376,17.117"]
"chinese-poetry/chinese-poetry" ["l"="6.187,17.367"]
"mamoe/mirai" ["l"="-32.443,-15.291"]
"iperov/DeepFaceLab" ["l"="33.409,33.299"]
"kon9chunkit/GitHub-Chinese-Top-Charts" ["l"="6.431,17.405"]
"PaddlePaddle/PaddleOCR" ["l"="33.971,35.687"]
"NVIDIA/vid2vid" ["l"="33.639,32.847"]
"NVIDIA/pix2pixHD" ["l"="33.618,32.736"]
"facebookresearch/DensePose" ["l"="36.005,35.214"]
"tkarras/progressive_growing_of_gans" ["l"="33.642,32.721"]
"junyanz/pytorch-CycleGAN-and-pix2pix" ["l"="33.69,32.789"]
"facebookresearch/Detectron" ["l"="34.121,35.392"]
"NVlabs/stylegan" ["l"="33.631,32.904"]
"NVlabs/few-shot-vid2vid" ["l"="33.488,32.95"]
"albertpumarola/GANimation" ["l"="33.606,32.846"]
"NVlabs/SPADE" ["l"="33.54,32.897"]
"NVIDIA/FastPhotoStyle" ["l"="33.654,32.683"]
"openai/glow" ["l"="33.63,32.773"]
"NVlabs/MUNIT" ["l"="33.511,32.781"]
"phillipi/pix2pix" ["l"="33.686,32.623"]
"luanfujun/deep-painterly-harmonization" ["l"="33.651,32.744"]
"YadiraF/PRNet" ["l"="34.684,31.645"]
"bryandlee/FreezeG" ["l"="33.174,32.939"]
"sangwoomo/FreezeD" ["l"="33.08,32.934"]
"bryandlee/malnyun_faces" ["l"="33.055,32.938"]
"bryandlee/naver-webtoon-faces" ["l"="33.162,32.926"]
"happy-jihye/Cartoon-StyleGAN" ["l"="33.231,32.985"]
"NVlabs/metfaces-dataset" ["l"="33.037,32.992"]
"yuval-alaluf/stylegan3-editing" ["l"="33.226,33.008"]
"taesungp/swapping-autoencoder-pytorch" ["l"="33.239,32.906"]
"mit-han-lab/data-efficient-gans" ["l"="33.306,32.911"]
"EvgenyKashin/stylegan2-distillation" ["l"="33.288,32.939"]
"rosinality/swapping-autoencoder-pytorch" ["l"="33.209,32.899"]
"clovaai/tunit" ["l"="33.246,32.84"]
"chail/anyres-gan" ["l"="33.134,32.961"]
"stylegan-human/StyleGAN-Human" ["l"="33.226,33.04"]
"sunniesuhyoung/DST" ["l"="33.209,32.827"]
"rosinality/stylegan2-pytorch" ["l"="33.359,32.941"]
"deepfakes/faceswap" ["l"="33.508,33.375"]
"coqui-ai/TTS" ["l"="0.482,39.991"]
"ageitgey/face_recognition" ["l"="33.833,35.397"]
"sherlock-project/sherlock" ["l"="-7.883,-43.601"]
"huggingface/transformers" ["l"="27.114,30.584"]
"deezer/spleeter" ["l"="0.228,40.224"]
"AliaksandrSiarohin/first-order-model" ["l"="33.547,33.169"]
"ytdl-org/youtube-dl" ["l"="-27.463,-16.959"]
"openai/whisper" ["l"="27.192,30.814"]
"mozilla/DeepSpeech" ["l"="0.673,39.983"]
"CompVis/stable-diffusion" ["l"="27.12,30.707"]
"iptv-org/iptv" ["l"="-27.265,-17.224"]
"mozilla/TTS" ["l"="0.556,40.026"]
"iperov/DeepFaceLive" ["l"="33.333,33.357"]
"alievk/avatarify" ["l"="33.462,33.262"]
"NVlabs/stylegan2" ["l"="33.496,33.003"]
"google/mediapipe" ["l"="33.995,35.51"]
"soimort/you-get" ["l"="-27.021,-17.119"]
"yangxy/GPEN" ["l"="33.322,33.071"]
"neuralchen/SimSwap" ["l"="34.932,31.506"]
"zhanglonghao1992/One-Shot_Free-View_Neural_Talking_Head_Synthesis" ["l"="35.025,31.594"]
"csxmli2016/DFDNet" ["l"="35.772,32.36"]
"eladrich/pixel2style2pixel" ["l"="33.365,33.004"]
"omertov/encoder4editing" ["l"="33.277,32.979"]
"zllrunning/face-parsing.PyTorch" ["l"="33.456,33.02"]
"cszn/BSRGAN" ["l"="35.897,32.351"]
"chaofengc/PSFRGAN" ["l"="35.727,32.384"]
"cszn/KAIR" ["l"="35.946,32.311"]
"harlanhong/CVPR2022-DaGAN" ["l"="35.061,31.585"]
"danielroich/PTI" ["l"="33.242,33.001"]
"yoyo-nb/Thin-Plate-Spline-Motion-Model" ["l"="35.077,31.551"]
"YuanxunLu/LiveSpeechPortraits" ["l"="35.056,31.611"]
"YadiraF/DECA" ["l"="34.841,31.694"]
"yenchenlin/DeepLearningFlappyBird" ["l"="24.828,35.996"]
"cysmith/neural-style-tf" ["l"="33.495,32.484"]
"junyanz/iGAN" ["l"="33.656,32.568"]
"alexjc/neural-enhance" ["l"="33.599,32.463"]
"deepmind/sonnet" ["l"="24.865,35.774"]
"titu1994/Neural-Style-Transfer" ["l"="33.464,32.479"]
"DmitryUlyanov/deep-image-prior" ["l"="33.591,32.663"]
"leongatys/PytorchNeuralStyleTransfer" ["l"="33.333,32.593"]
"leongatys/NeuralImageSynthesis" ["l"="33.395,32.487"]
"abhiskk/fast-neural-style" ["l"="33.284,32.535"]
"zhanghang1989/PyTorch-Multi-Style-Transfer" ["l"="33.313,32.58"]
"sunshineatnoon/PytorchWCT" ["l"="33.313,32.595"]
"sunshineatnoon/LinearStyleTransfer" ["l"="33.292,32.594"]
"naoto0804/pytorch-AdaIN" ["l"="33.361,32.68"]
"xunhuang1995/AdaIN-style" ["l"="33.432,32.598"]
"rtqichen/style-swap" ["l"="33.417,32.509"]
"nkolkin13/STROTSS" ["l"="33.278,32.631"]
"darkstar112358/fast-neural-style" ["l"="33.516,32.63"]
"pietrocarbo/deep-transfer" ["l"="33.293,32.579"]
"leongatys/fast-neural-style" ["l"="33.338,32.524"]
"ycjing/Neural-Style-Transfer-Papers" ["l"="33.401,32.558"]
"eriklindernoren/Fast-Neural-Style-Transfer" ["l"="33.272,32.547"]
"HsinYingLee/DRIT" ["l"="33.467,32.755"]
"HelenMao/MSGAN" ["l"="33.447,32.747"]
"junyanz/BicycleGAN" ["l"="33.527,32.717"]
"mingyuliutw/UNIT" ["l"="33.518,32.702"]
"HsinYingLee/MDMM" ["l"="33.396,32.73"]
"taki0112/DRIT-Tensorflow" ["l"="33.492,32.728"]
"AlamiMejjati/Unsupervised-Attention-guided-Image-to-Image-Translation" ["l"="33.429,32.741"]
"lzhbrian/image-to-image-papers" ["l"="33.437,32.768"]
"sangwoomo/instagan" ["l"="33.458,32.776"]
"jhoffman/cycada_release" ["l"="29.958,34.927"]
"NVlabs/FUNIT" ["l"="33.456,32.82"]
"heykeetae/Self-Attention-GAN" ["l"="33.566,32.771"]
"pfnet-research/sngan_projection" ["l"="33.575,32.745"]
"Ha0Tang/AttentionGAN" ["l"="33.363,32.788"]
"bioinf-jku/TTUR" ["l"="33.554,32.739"]
"LouieYang/deep-photo-styletransfer-tf" ["l"="33.439,32.541"]
"msracver/Deep-Image-Analogy" ["l"="33.492,32.517"]
"Yijunmaverick/UniversalStyleTransfer" ["l"="33.352,32.581"]
"eridgd/WCT-TF" ["l"="33.325,32.545"]
"CompVis/adaptive-style-transfer" ["l"="33.355,32.63"]
"zsdonghao/SRGAN" ["l"="35.809,32.124"]
"LucasSheng/avatar-net" ["l"="33.306,32.563"]
"hzy46/fast-neural-style-tensorflow" ["l"="33.439,32.46"]
"carpedm20/BEGAN-tensorflow" ["l"="33.741,32.597"]
"LouieYang/stroke-controllable-fast-style-transfer" ["l"="33.328,32.559"]
"caogang/wgan-gp" ["l"="33.605,32.713"]
"igul222/improved_wgan_training" ["l"="33.69,32.656"]
"martinarjovsky/WassersteinGAN" ["l"="33.712,32.647"]
"jalola/improved-wgan-pytorch" ["l"="33.579,32.711"]
"Zeleni9/pytorch-wgan" ["l"="33.562,32.684"]
"znxlwm/pytorch-generative-model-collections" ["l"="33.674,32.712"]
"christiancosgrove/pytorch-spectral-normalization-gan" ["l"="33.54,32.764"]
"mseitzer/pytorch-fid" ["l"="33.476,32.829"]
"ajbrock/BigGAN-PyTorch" ["l"="33.5,32.824"]
"openai/improved-gan" ["l"="33.713,32.627"]
"sbarratt/inception-score-pytorch" ["l"="33.53,32.735"]
"github-pengge/PyTorch-progressive_growing_of_gans" ["l"="33.546,32.75"]
"wiseodd/generative-models" ["l"="33.742,32.685"]
"brain-research/self-attention-gan" ["l"="33.586,32.761"]
"taki0112/Self-Attention-GAN-Tensorflow" ["l"="33.594,32.731"]
"junfu1115/DANet" ["l"="31.661,37.058"]
"google/compare_gan" ["l"="33.609,32.756"]
"yunjey/StarGAN" ["l"="33.625,32.692"]
"richzhang/PerceptualSimilarity" ["l"="33.496,32.874"]
"eriklindernoren/PyTorch-GAN" ["l"="33.845,32.765"]
"hindupuravinash/the-gan-zoo" ["l"="33.796,32.723"]
"soumith/ganhacks" ["l"="33.757,32.709"]
"pytorch/examples" ["l"="34.032,35.559"]
"open-mmlab/mmdetection" ["l"="34.286,35.537"]
"rwightman/pytorch-image-models" ["l"="34.304,35.711"]
"facebookresearch/detectron2" ["l"="34.249,35.548"]
"matterport/Mask_RCNN" ["l"="34.179,35.346"]
"facebookresearch/maskrcnn-benchmark" ["l"="34.349,35.43"]
"yunjey/pytorch-tutorial" ["l"="23.801,30.989"]
"reedscot/cvpr2016" ["l"="33.573,32.552"]
"reedscot/icml2016" ["l"="33.619,32.547"]
"reedscot/nips2016" ["l"="33.662,32.527"]
"aelnouby/Text-to-Image-Synthesis" ["l"="33.519,32.561"]
"hanzhanggit/StackGAN-v2" ["l"="33.526,32.593"]
"zsdonghao/text-to-image" ["l"="33.54,32.554"]
"kimiyoung/review_net" ["l"="31.405,34.585"]
"hanzhanggit/StackGAN" ["l"="33.613,32.591"]
"taoxugit/AttnGAN" ["l"="33.483,32.601"]
"facebook/eyescream" ["l"="33.666,32.473"]
"hwalsuklee/tensorflow-generative-model-collections" ["l"="33.712,32.687"]
"zhangqianhui/AdversarialNetsPapers" ["l"="33.773,32.678"]
"carpedm20/DCGAN-tensorflow" ["l"="33.729,32.615"]
"nightrome/really-awesome-gan" ["l"="33.734,32.721"]
"YadiraF/GAN" ["l"="33.811,32.694"]
"lanpa/tensorboard-pytorch" ["l"="34.262,35.363"]
"uber/pyro" ["l"="25.461,33.65"]
"goodfeli/adversarial" ["l"="33.775,32.648"]
"kjw0612/awesome-deep-vision" ["l"="23.42,31"]
"eriklindernoren/Keras-GAN" ["l"="33.795,32.766"]
"nashory/gans-awesome-applications" ["l"="33.757,32.748"]
"jantic/DeOldify" ["l"="33.571,33.101"]
"microsoft/Bringing-Old-Photos-Back-to-Life" ["l"="33.432,33.221"]
"baowenbo/DAIN" ["l"="33.654,33.159"]
"fastai/fastai" ["l"="23.664,30.845"]
"xinntao/ESRGAN" ["l"="35.932,32.171"]
"lllyasviel/style2paints" ["l"="-29.53,-19.012"]
"Rudrabha/Wav2Lip" ["l"="35.005,31.584"]
"1adrianb/face-alignment" ["l"="34.644,31.72"]
"vt-vl-lab/3d-photo-inpainting" ["l"="33.484,33.172"]
"anandpawara/Real_Time_Image_Animation" ["l"="33.496,33.203"]
"facebookresearch/pifuhd" ["l"="33.483,33.23"]
"vijishmadhavan/ArtLine" ["l"="33.423,33.138"]
"vijishmadhavan/Toon-Me" ["l"="33.337,33.167"]
"NathanUA/U-2-Net" ["l"="33.514,33.158"]
"yiranran/APDrawingGAN" ["l"="33.409,33.021"]
"PeterL1n/BackgroundMattingV2" ["l"="33.532,33.2"]
"SystemErrorWang/White-box-Cartoonization" ["l"="33.456,33.095"]
"DevUtilsApp/DevUtils-app" ["l"="-47.38,-1.489"]
"ZHKKKe/MODNet" ["l"="33.602,33.219"]
"owncast/owncast" ["l"="32.686,-26.237"]
"louisfb01/Best_AI_paper_2020" ["l"="23.87,30.429"]
"jiupinjia/stylized-neural-painting" ["l"="33.396,33.032"]
"vijishmadhavan/SkinDeep" ["l"="33.293,33.078"]
"FlaxEngine/FlaxEngine" ["l"="-14.362,26.161"]
"h2oai/wave" ["l"="27.262,-20.187"]
"PeterL1n/RobustVideoMatting" ["l"="33.53,33.247"]
"senguptaumd/Background-Matting" ["l"="33.567,33.217"]
"saic-mdal/lama" ["l"="33.384,33.217"]
"PaddlePaddle/PaddleSeg" ["l"="34.143,35.728"]
"DefTruth/lite.ai.toolkit" ["l"="34.451,35.652"]
"NVlabs/instant-ngp" ["l"="33.418,43.069"]
"xuebinqin/U-2-Net" ["l"="33.609,33.262"]
"open-mmlab/mmediting" ["l"="35.928,32.332"]
"yeemachine/kalidokit" ["l"="35.911,34.973"]
"bryandlee/animegan2-pytorch" ["l"="33.356,33.106"]
"PaddlePaddle/PaddleGAN" ["l"="34.015,35.787"]
"esimov/caire" ["l"="-13.274,2.076"]
"emilwallner/Screenshot-to-code-in-Keras" ["l"="26.177,-26.499"]
"affinelayer/pix2pix-tensorflow" ["l"="33.665,32.638"]
"yenchenlin/pix2pix-tensorflow" ["l"="33.688,32.597"]
"vanhuyz/CycleGAN-TensorFlow" ["l"="33.622,32.632"]
"datitran/face2face-demo" ["l"="34.758,31.538"]
"akanimax/BMSG-GAN" ["l"="33.431,32.783"]
"akanimax/msg-stylegan-tf" ["l"="33.376,32.755"]
"akanimax/MSG-GAN" ["l"="33.348,32.771"]
"akanimax/BBMSG-GAN" ["l"="33.388,32.762"]
"akanimax/pro_gan_pytorch" ["l"="33.413,32.773"]
"kam1107/RealnessGAN" ["l"="33.31,32.81"]
"AlexiaJM/RelativisticGAN" ["l"="33.514,32.749"]
"rosinality/style-based-gan-pytorch" ["l"="33.433,32.839"]
"akanimax/T2F" ["l"="33.464,32.641"]
"akanimax/msg-gan-v1" ["l"="33.432,32.822"]
"LMescheder/GAN_stability" ["l"="33.55,32.785"]
"pbaylies/stylegan-encoder" ["l"="33.325,32.907"]
"taki0112/BigGAN-Tensorflow" ["l"="33.532,32.779"]
"ANIME305/Anime-GAN-tensorflow" ["l"="34.08,30.254"]
"taki0112/GAN_Metrics-Tensorflow" ["l"="33.524,32.765"]
"AaronLeong/BigGAN-pytorch" ["l"="33.531,32.795"]
"taki0112/RelativisticGAN-Tensorflow" ["l"="33.487,32.757"]
"huggingface/pytorch-pretrained-BigGAN" ["l"="33.478,32.786"]
"david-gpu/srez" ["l"="33.656,32.447"]
"idealo/image-super-resolution" ["l"="35.932,32.139"]
"songrotek/Deep-Learning-Papers-Reading-Roadmap" ["l"="23.49,31.046"]
"nagadomi/waifu2x" ["l"="-29.612,-18.948"]
"tensorlayer/srgan" ["l"="35.9,32.161"]
"yumingj/Text2Human" ["l"="35.575,34.97"]
"facebookresearch/StyleNeRF" ["l"="33.21,33.051"]
"autonomousvision/stylegan_xl" ["l"="33.202,33.002"]
"afruehstueck/insetGAN" ["l"="33.174,33.093"]
"weihaox/awesome-gan-inversion" ["l"="33.262,32.972"]
"CelebV-HQ/CelebV-HQ" ["l"="34.724,29.056"]
"hongfz16/EVA3D" ["l"="35.581,34.942"]
"yuval-alaluf/hyperstyle" ["l"="33.264,33.021"]
"hongfz16/AvatarCLIP" ["l"="35.589,35.031"]
"rinongal/StyleGAN-nada" ["l"="33.249,33.014"]
"seasonSH/SemanticStyleGAN" ["l"="33.19,33.032"]
"FeiiYin/StyleHEAT" ["l"="35.06,31.62"]
"andersbll/neural_artistic_style" ["l"="33.487,32.385"]
"fzliu/style-transfer" ["l"="33.48,32.424"]
"andersbll/deeppy" ["l"="23.26,30.761"]
"andersbll/cudarray" ["l"="23.158,30.781"]
"yusuketomoto/chainer-fast-neuralstyle" ["l"="33.451,32.413"]
"manuelruder/artistic-videos" ["l"="33.5,32.435"]
"DmitryUlyanov/texture_nets" ["l"="33.502,32.457"]
"woodrush/neural-art-tf" ["l"="33.516,32.401"]
"mbartoli/neural-animation" ["l"="33.456,32.248"]
"ryankiros/neural-storyteller" ["l"="33.522,32.377"]
"tensorflow/models" ["l"="33.821,35.342"]
"scutan90/DeepLearning-500-questions" ["l"="23.999,30.98"]
"tensorflow/tensorflow" ["l"="33.533,35.343"]
"pytorch/pytorch" ["l"="33.791,35.479"]
"keras-team/keras" ["l"="33.65,35.369"]
"fatedier/frp" ["l"="-27.036,-17.227"]
"CMU-Perceptual-Computing-Lab/openpose" ["l"="33.917,35.42"]
"alexgand/springer_free_books" ["l"="33.554,33.446"]
"renanxcortes/springerQuarantineBooksR" ["l"="33.557,33.512"]
"amzn/computer-vision-basics-in-microsoft-excel" ["l"="33.507,33.482"]
"hathagat/springer_free_german_books" ["l"="33.565,33.487"]
"rebuild-123/Python-Head-First-Design-Patterns" ["l"="33.599,33.586"]
"kotartemiy/newscatcher" ["l"="20.114,2.352"]
"anopara/genetic-drawing" ["l"="33.454,33.19"]
"adilkhash/Data-Engineering-HowTo" ["l"="13.414,23.878"]
"TritonHo/slides" ["l"="11.617,-5.071"]
"chiphuyen/machine-learning-systems-design" ["l"="23.769,30.552"]
"Rubix982/Free-Educational-Resources-During-Corona-Epidemia" ["l"="25.142,17.545"]
"uvipen/Tetris-deep-Q-learning-pytorch" ["l"="25.148,36.098"]
"machinelearningmindset/machine-learning-course" ["l"="23.852,30.933"]
"flavioschneider/ethzcheatsheets" ["l"="33.582,33.502"]
"justmarkham/scikit-learn-tips" ["l"="23.432,30.534"]
"shunsukesaito/PIFu" ["l"="35.751,35.068"]
"facebookresearch/pytorch3d" ["l"="33.28,43.058"]
"mkocabas/VIBE" ["l"="35.85,35.124"]
"bmild/nerf" ["l"="33.353,43.075"]
"adamian98/pulse" ["l"="33.479,33.139"]
"YuliangXiu/ICON" ["l"="35.727,35.008"]
"vchoutas/smplify-x" ["l"="35.812,35.115"]
"facebookresearch/VideoPose3D" ["l"="35.959,35.143"]
"sebastianstarke/AI4Animation" ["l"="35.642,35.147"]
"NVlabs/imaginaire" ["l"="33.424,32.956"]
"NVlabs/stylegan2-ada-pytorch" ["l"="33.392,32.952"]
"CompVis/taming-transformers" ["l"="34.389,28.843"]
"clovaai/stargan-v2" ["l"="33.436,32.924"]
"taesungp/contrastive-unpaired-translation" ["l"="33.4,32.871"]
"orpatashnik/StyleCLIP" ["l"="33.336,32.996"]
"POSTECH-CVLab/PyTorch-StudioGAN" ["l"="33.372,32.917"]
"NVlabs/stylegan2-ada" ["l"="33.36,32.966"]
"NVlabs/stylegan3" ["l"="33.383,32.982"]
"genforce/genforce" ["l"="33.302,32.93"]
"lucidrains/stylegan2-pytorch" ["l"="33.397,32.933"]
"NVlabs/ffhq-dataset" ["l"="33.476,32.926"]
"Newmu/dcgan_code" ["l"="33.7,32.543"]
"graphific/DeepDreamVideo" ["l"="33.589,32.29"]
"karpathy/neuraltalk" ["l"="27.152,34.059"]
"caesar0301/awesome-public-datasets" ["l"="23.272,30.931"]
"Theano/Theano" ["l"="27.133,33.93"]
"karpathy/convnetjs" ["l"="28.16,27.617"]
"cmusatyalab/openface" ["l"="33.917,35.305"]
"yunjey/stargan" ["l"="33.535,32.828"]
"lucidrains/vit-pytorch" ["l"="34.403,35.805"]
"utkuozbulak/pytorch-cnn-visualizations" ["l"="34.241,35.609"]
"Cadene/pretrained-models.pytorch" ["l"="34.264,35.503"]
"pytorch/vision" ["l"="34.155,35.568"]
"taki0112/StarGAN-Tensorflow" ["l"="33.575,32.728"]
"switchablenorms/CelebAMask-HQ" ["l"="33.448,32.941"]
"LynnHo/AttGAN-Tensorflow" ["l"="33.441,32.8"]
"znxlwm/UGATIT-pytorch" ["l"="33.466,32.899"]
"tamarott/SinGAN" ["l"="33.468,32.867"]
"pymatting/pymatting" ["l"="33.69,33.288"]
"RangiLyu/nanodet" ["l"="34.455,35.588"]
"deepinsight/insightface" ["l"="34.075,35.427"]
"jiupinjia/SkyAR" ["l"="33.506,33.109"]
"hzwer/arXiv2020-RIFE" ["l"="33.729,33.158"]
"avinashpaliwal/Super-SloMo" ["l"="33.746,33.093"]
"BurguerJohn/Dain-App" ["l"="33.741,33.19"]
"thunil/TecoGAN" ["l"="33.603,33.148"]
"k4yt3x/video2x" ["l"="-29.709,-18.925"]
"bloc97/Anime4K" ["l"="-29.592,-18.9"]
"Mukosame/Zooming-Slow-Mo-CVPR-2020" ["l"="35.954,32.254"]
"AaronFeng753/Waifu2x-Extension-GUI" ["l"="-29.651,-18.876"]
"pavelgonchar/colornet" ["l"="33.622,32.36"]
"awentzonline/image-analogies" ["l"="33.551,32.404"]
"richzhang/colorization" ["l"="33.716,32.425"]
"schollz/find" ["l"="28.375,-18.921"]
"satoshiiizuka/siggraph2016_colorization" ["l"="33.638,32.421"]
"yenchenlin1994/DeepLearningFlappyBird" ["l"="24.737,35.888"]
"nlp-compromise/nlp_compromise" ["l"="13.876,-34.257"]
"jisungk/deepjazz" ["l"="1.792,38.642"]
"tflearn/tflearn" ["l"="23.478,31.121"]
"reverse-shell/routersploit" ["l"="-7.451,-43.122"]
"airbnb/caravel" ["l"="11.595,24.247"]
"TencentARC/GFPGAN" ["l"="27.181,30.633"]
"JaidedAI/EasyOCR" ["l"="33.941,35.623"]
"beurtschipper/Depix" ["l"="-7.918,-43.711"]
"willmcgugan/rich" ["l"="23.277,4.105"]
"yemount/pose-animator" ["l"="33.503,33.272"]
"tensorflow/tfjs-models" ["l"="27.931,27.663"]
"cyrildiagne/ar-cutpaste" ["l"="33.542,33.301"]
"metafizzy/zdog" ["l"="26.493,-26.222"]
"jasonmayes/Real-Time-Person-Removal" ["l"="33.5,33.316"]
"minivision-ai/photo2cartoon" ["l"="33.441,33.073"]
"luruke/browser-2020" ["l"="26.271,-25.735"]
"manojVivek/responsively-app" ["l"="26.313,-25.729"]
"pshihn/rough-notation" ["l"="26.185,-25.758"]
"justinpinkney/awesome-pretrained-stylegan2" ["l"="33.273,32.926"]
"openai/guided-diffusion" ["l"="34.449,28.889"]
"ZPdesu/Barbershop" ["l"="33.238,33.029"]
"wty-ustc/HairCLIP" ["l"="33.213,33.036"]
"tzt101/MichiGAN" ["l"="33.191,32.996"]
"nv-tlabs/editGAN_release" ["l"="33.191,33.045"]
"rotemtzaban/STIT" ["l"="33.249,33.045"]
"ZPdesu/SEAN" ["l"="33.325,32.934"]
"dukebw/LOHO" ["l"="33.162,33.028"]
"Tengfei-Wang/HFGI" ["l"="33.21,33.016"]
"yuval-alaluf/restyle-encoder" ["l"="33.276,33.002"]
"alex04072000/ObstructionRemoval" ["l"="33.205,33.106"]
"alex04072000/SingleHDR" ["l"="36.218,33.523"]
"XiaohangZhan/deocclusion" ["l"="33.175,32.912"]
"saic-mdal/HiDT" ["l"="33.285,32.864"]
"google/portrait-shadow-manipulation" ["l"="32.67,33.367"]
"podgorskiy/ALAE" ["l"="33.431,33"]
"ceciliavision/perceptual-reflection-removal" ["l"="32.928,33.358"]
"Vandermode/ERRNet" ["l"="32.921,33.345"]
"XingangPan/deep-generative-prior" ["l"="33.242,32.862"]
"alex04072000/SOLD" ["l"="33.163,33.151"]
"genforce/idinvert" ["l"="33.258,32.919"]
"clovaai/generative-evaluation-prdc" ["l"="28.211,32.707"]
"clovaai/WCT2" ["l"="33.27,32.673"]
"naver-ai/GGDR" ["l"="33.155,32.898"]
"naver-ai/StyleMapGAN" ["l"="33.239,32.95"]
"boschresearch/OASIS" ["l"="34.624,32.561"]
"naver-ai/relabel_imagenet" ["l"="44.246,-15.134"]
"weihaox/awesome-image-translation" ["l"="33.312,32.891"]
"clovaai/stargan-v2-tensorflow" ["l"="33.078,32.763"]
"davidbau/rewriting" ["l"="33.222,32.871"]
"linjx-ustc1106/TuiGAN-PyTorch" ["l"="33.234,32.793"]
"GaParmar/clean-fid" ["l"="33.235,32.927"]
"EndlessSora/TSIT" ["l"="21.703,27.396"]
"vt-vl-lab/FGVC" ["l"="35.202,30.785"]
"iPERDance/iPERCore" ["l"="33.471,33.06"]
"RameenAbdal/StyleFlow" ["l"="33.333,33.017"]
"JizhiziLi/animal-matting" ["l"="33.725,33.275"]
"manicman1999/StyleGAN2-Tensorflow-2.0" ["l"="33.373,32.85"]
"moono/stylegan2-tf-2.x" ["l"="33.3,32.797"]
"taki0112/StyleGAN-Tensorflow" ["l"="33.338,32.858"]
"rosasalberto/StyleGAN2-TensorFlow-2.x" ["l"="33.288,32.786"]
"manicman1999/StyleGAN-Keras" ["l"="33.27,32.777"]
"Puzer/stylegan-encoder" ["l"="33.349,32.9"]
"rolux/stylegan2encoder" ["l"="33.29,32.921"]
"LynnHo/CycleGAN-Tensorflow-2" ["l"="33.538,32.703"]
"ak9250/stylegan-art" ["l"="33.272,32.847"]
"ShenYujun/InterFaceGAN" ["l"="33.325,32.866"]
"nv-tlabs/datasetGAN_release" ["l"="33.155,33.046"]
"nv-tlabs/semanticGAN_code" ["l"="33.152,33.077"]
"wpeebles/gangealing" ["l"="33.215,32.994"]
"Po-Hsun-Su/pytorch-ssim" ["l"="33.551,32.866"]
"xinntao/BasicSR" ["l"="35.91,32.245"]
"yenchenlin/awesome-NeRF" ["l"="33.333,43.109"]
"yulunzhang/RCAN" ["l"="35.866,32.236"]
"xinntao/EDVR" ["l"="35.934,32.246"]
"satoshiiizuka/siggraphasia2019_remastering" ["l"="33.777,32.372"]
"zhangmozhe/Deep-Exemplar-based-Video-Colorization" ["l"="33.789,32.349"]
"raywzy/Bringing-Old-Films-Back-to-Life" ["l"="33.821,32.341"]
"ericsujw/InstColorization" ["l"="33.728,32.395"]
"msracver/Deep-Exemplar-based-Colorization" ["l"="33.729,32.369"]
"ChenyangLEI/Fully-Automatic-Video-Colorization-with-Self-Regularization-and-Diversity" ["l"="33.761,32.303"]
"ChenyangLEI/automatic-video-colorization" ["l"="33.797,32.359"]
"ChenyangLEI/deep-video-prior" ["l"="35.269,30.712"]
"m-tassano/fastdvdnet" ["l"="36.057,32.246"]
"yulunzhang/video-enhancement" ["l"="35.97,32.197"]
"MarkMoHR/Awesome-Image-Colorization" ["l"="33.759,32.373"]
"JingyunLiang/VRT" ["l"="35.932,32.377"]
"junyanz/interactive-deep-colorization" ["l"="33.696,32.455"]
"lyh-18/TCVC-Temporally-Consistent-Video-Colorization" ["l"="33.825,32.36"]
"CQFIO/PhotographicImageSynthesis" ["l"="33.627,32.649"]
"CQFIO/FastImageProcessing" ["l"="36.222,33.499"]
"msracver/FCIS" ["l"="34.396,35.121"]
"genforce/interfacegan" ["l"="33.329,32.953"]
"Tetrachrome/subpixel" ["l"="33.779,32.43"]
"huangzehao/Super-Resolution.Benckmark" ["l"="35.838,32.15"]
"ajbrock/Neural-Photo-Editor" ["l"="33.653,32.489"]
"jakebian/quiver" ["l"="30.96,31.56"]
"huangzehao/caffe-vdsr" ["l"="35.799,32.15"]
"anantzoid/Conditional-PixelCNN-decoder" ["l"="33.825,32.478"]
"titu1994/Super-Resolution-using-Generative-Adversarial-Networks" ["l"="35.826,32.118"]
"LeavesBreathe/tensorflow_with_latest_papers" ["l"="27.084,34.3"]
"openai/pixel-cnn" ["l"="33.772,32.54"]
"buriburisuri/SRGAN" ["l"="35.837,32.11"]
"tomlepaine/fast-wavenet" ["l"="0.605,40.152"]
"Mostafa-Samir/DNC-tensorflow" ["l"="27.204,34.352"]
"PrajitR/fast-pixel-cnn" ["l"="33.775,32.482"]
"gregdurrett/berkeley-doc-summarizer" ["l"="33.866,32.366"]
"openai/cleverhans" ["l"="27.204,34.491"]
"khanrc/tf.gans-comparison" ["l"="33.746,32.655"]
"YadiraF/GAN_Theories" ["l"="33.904,32.712"]
"tg-bomze/Face-Depixelizer" ["l"="33.409,33.103"]
"jacobhallberg/pytorch_stylegan_encoder" ["l"="33.293,32.898"]
"a312863063/seeprettyface-face_editor" ["l"="33.361,32.985"]
"pacifinapacific/StyleGAN_LatentEditor" ["l"="33.273,32.882"]
"harskish/ganspace" ["l"="33.304,32.95"]
"hologerry/AGIS-Net" ["l"="33.289,32.438"]
"hologerry/Attr2Font" ["l"="33.257,32.401"]
"ShusenTang/FontRNN" ["l"="33.253,32.418"]
"williamyang1991/TET-GAN" ["l"="33.3,32.456"]
"liweileev/FET-GAN" ["l"="33.237,32.408"]
"azadis/MC-GAN" ["l"="33.346,32.471"]
"clovaai/lffont" ["l"="33.249,32.382"]
"mchong6/JoJoGAN" ["l"="33.284,33.06"]
"williamyang1991/DualStyleGAN" ["l"="33.296,33.047"]
"onion-liu/BlendGAN" ["l"="33.222,33.025"]
"openai/glide-text2im" ["l"="34.391,28.892"]
"vincent-thevenin/Realistic-Neural-Talking-Head-Models" ["l"="34.945,31.565"]
"svip-lab/impersonator" ["l"="33.46,32.991"]
"grey-eye/talking-heads" ["l"="34.925,31.581"]
"shaoanlu/fewshot-face-translation-GAN" ["l"="34.867,31.504"]
"Hangz-nju-cuhk/Talking-Face-Generation-DAVS" ["l"="34.961,31.625"]
"yiranran/Audio-driven-TalkingFace-HeadPose" ["l"="35.009,31.638"]
"microsoft/Deep3DFaceReconstruction" ["l"="34.76,31.691"]
"YadiraF/face3d" ["l"="34.731,31.675"]
"alievk/avatarify-python" ["l"="33.38,33.169"]
"alievk/avatarify-desktop" ["l"="33.334,33.147"]
"a312863063/generators-with-stylegan2" ["l"="33.368,33.035"]
"TachibanaYoshino/AnimeGAN" ["l"="33.412,33.076"]
"guofei9987/blind_watermark" ["l"="-10.131,-46.747"]
"TachibanaYoshino/AnimeGANv2" ["l"="33.383,33.12"]
"snap-research/articulated-animation" ["l"="35.025,31.562"]
"danielgatis/rembg" ["l"="33.638,33.302"]
"nadermx/backgroundremover" ["l"="33.615,33.326"]
"Sanster/lama-cleaner" ["l"="26.91,30.864"]
"gradio-app/gradio" ["l"="27.271,30.741"]
"xuebinqin/DIS" ["l"="33.662,33.279"]
"lllyasviel/ControlNet" ["l"="27.094,30.832"]
"huggingface/diffusers" ["l"="27.252,30.798"]
"invoke-ai/InvokeAI" ["l"="27.05,30.777"]
"upscayl/upscayl" ["l"="32.465,-26.677"]
"OPHoperHPO/image-background-remove-tool" ["l"="33.68,33.335"]
"genforce/sefa" ["l"="33.274,32.954"]
"anvoynov/GANLatentDiscovery" ["l"="33.254,32.894"]
"borisdayma/dalle-mini" ["l"="34.257,28.84"]
"neonbjb/tortoise-tts" ["l"="27.165,30.936"]
"Zardinality/WGAN-tensorflow" ["l"="33.75,32.619"]
"shekkizh/WassersteinGAN.tensorflow" ["l"="33.776,32.604"]
"soumith/dcgan.torch" ["l"="33.63,32.571"]
"openai/InfoGAN" ["l"="33.769,32.565"]
"NVlabs/eg3d" ["l"="33.393,43.049"]
"CompVis/latent-diffusion" ["l"="34.407,28.925"]
"chuanli11/CNNMRF" ["l"="33.531,32.461"]
"ascribe/image-match" ["l"="33.511,32.221"]
"autumnai/leaf" ["l"="-9.524,5.031"]
"LoSealL/VideoSuperResolution" ["l"="35.909,32.203"]
"alterzero/RBPN-PyTorch" ["l"="35.918,32.223"]
"open-mmlab/mmsr" ["l"="35.892,32.231"]
"ssusnic/Machine-Learning-Flappy-Bird" ["l"="33.449,31.749"]
"Code-Bullet/PacNeat" ["l"="33.401,31.628"]
"Code-Bullet/PacmanGame" ["l"="33.413,31.632"]
"ArztSamuel/Applying_EANNs" ["l"="33.48,31.614"]
"cazala/synaptic" ["l"="28.16,27.555"]
"nicholas-ochoa/OpenSC2K" ["l"="-25.07,32.153"]
"ivanseidel/IAMDinosaur" ["l"="12.534,-44.577"]
"xviniette/FlappyLearning" ["l"="28.271,27.607"]
"wb14123/seq2seq-couplet" ["l"="5.918,17.296"]
"minimaxir/person-blocker" ["l"="25.792,33.752"]
"MorvanZhou/Evolutionary-Algorithm" ["l"="24.744,38.346"]
"bestony/logoly" ["l"="5.941,17.273"]
"Code-Bullet/Google-Chrome-Dino-Game-AI" ["l"="33.4,31.647"]
"channingbreeze/games" ["l"="14.008,-32.007"]
"JVictorDias/Dinossauro-Google" ["l"="33.416,31.32"]
"JVictorDias/FlappIA-Bird" ["l"="33.427,31.283"]
"JVictorDias/DeepCars" ["l"="33.401,31.291"]
"JVictorDias/AlgoritmoTecelao" ["l"="33.412,31.269"]
"JVictorDias/ParticulasGravitacionais3D" ["l"="33.423,31.299"]
"JVictorDias/HardestGame" ["l"="33.433,31.294"]
"filipedeschamps/meu-primeiro-jogo-multiplayer" ["l"="12.494,-44.465"]
"filipedeschamps/video-maker" ["l"="12.58,-44.464"]
"JBezerra/YT-Rede-Neural" ["l"="33.369,31.303"]
"PIGDevUff/PigDev" ["l"="33.383,31.333"]
"JVictorDias/Spirograph" ["l"="33.416,31.288"]
"filipedeschamps/doom-fire-algorithm" ["l"="12.515,-44.496"]
"JVictorDias/HardestGameEditor" ["l"="33.413,31.298"]
"sn3fru/datascience_course" ["l"="12.751,-44.567"]
"JVictorDias/PIG" ["l"="33.443,31.325"]
"szagoruyko/loadcaffe" ["l"="26.872,34.295"]
"Element-Research/rnn" ["l"="26.985,34.298"]
"robertsdionne/neural-network-papers" ["l"="27.104,34.17"]
"soumith/convnet-benchmarks" ["l"="27.037,34.104"]
"paarthneekhara/text-to-image" ["l"="33.639,32.536"]
"baidu/Paddle" ["l"="27.045,33.93"]
"YapengTian/Single-Image-Super-Resolution" ["l"="35.885,32.192"]
"CSAILVision/gandissect" ["l"="33.619,32.812"]
"bendangnuksung/Image-OutPainting" ["l"="33.678,32.842"]
"Taeu/Style-Your-Hair" ["l"="33.167,33.062"]
"oneThousand1000/HairMapper" ["l"="33.151,33.06"]
"ZPdesu/HairNet" ["l"="33.136,33.1"]
"YBIGTA/pytorch-hair-segmentation" ["l"="33.713,33.129"]
"thangtran480/hair-segmentation" ["l"="33.827,33.128"]
"UmarSpa/HairAnalysis" ["l"="33.781,33.149"]
"ItchyHiker/Hair_Segmentation_Keras" ["l"="33.785,33.128"]
"wonbeomjang/mobile-hair-segmentation-pytorch" ["l"="33.801,33.121"]
"ileniTudor/Face-Hair-Segmentation-Dataset" ["l"="33.808,33.139"]
"zllrunning/face-makeup.PyTorch" ["l"="33.587,33.056"]
"MengZephyr/HairGANs" ["l"="33.866,33.176"]
"takiyu/portrait_matting" ["l"="33.767,33.35"]
"YuvalNirkin/face_segmentation" ["l"="34.766,31.584"]
"lizhengwei1992/Semantic_Human_Matting" ["l"="33.772,33.324"]
"JACKYLUO1991/FaceParsing" ["l"="33.87,33.118"]
"hqqxyy/Context-Aware-Matting" ["l"="33.777,33.301"]
"pielet/HairNet" ["l"="33.854,33.167"]
"aobo-y/hair-dye" ["l"="33.895,33.144"]
"JACKYLUO1991/Face-skin-hair-segmentaiton-and-skin-color-evaluation" ["l"="33.89,33.124"]
"kampta/face-seg" ["l"="33.87,33.134"]
"sapphire497/style-transformer" ["l"="33.091,33.076"]
"betterze/StyleSpace" ["l"="33.223,32.976"]
"afruehstueck/tileGAN" ["l"="33.607,32.006"]
"jessemelpolio/non-stationary_texture_syn" ["l"="33.579,32.015"]
"mxgmn/TextureSynthesis" ["l"="33.904,31.317"]
"mxgmn/ConvChain" ["l"="33.959,31.198"]
"rohitrango/Image-Quilting-for-Texture-Synthesis" ["l"="33.8,31.545"]
"changebo/HCCG-CycleGAN" ["l"="33.38,32.436"]
"kaonashi-tyc/Rewrite" ["l"="33.421,32.48"]
"kaonashi-tyc/zi2zi" ["l"="33.55,32.578"]
"yuweiming70/Style_Migration_For_Artistic_Font_With_CNN" ["l"="33.278,32.42"]
"williamyang1991/Text-Effects-Transfer" ["l"="33.31,32.437"]
"TAMU-VITA/ShapeMatchingGAN" ["l"="33.265,32.516"]
"erikbern/deep-fonts" ["l"="13.241,-32.454"]
"LinkWoong/Zeroshot-GAN" ["l"="33.361,32.439"]
"ecnuycxie/DG-Font" ["l"="33.262,32.375"]
"godisboy/SN-GAN" ["l"="33.532,32.69"]
"EuphoriaYan/zi2zi-pytorch" ["l"="33.328,32.402"]
"yunjey/domain-transfer-network" ["l"="33.643,32.659"]
"ankush-me/SynthText" ["l"="29.513,34.116"]
"run-youngjoo/SC-FEGAN" ["l"="33.417,32.909"]
"JiahuiYu/generative_inpainting" ["l"="35.124,30.721"]
"lyndonzheng/Pluralistic-Inpainting" ["l"="35.087,30.728"]
"knazeri/edge-connect" ["l"="35.138,30.703"]
"NVIDIA/partialconv" ["l"="35.103,30.718"]
"wtjiang98/PSGAN" ["l"="33.527,33.016"]
"csmliu/STGAN" ["l"="33.405,32.834"]
"xw-hu/Mask-ShadowGAN" ["l"="32.651,33.433"]
"naoto0804/SynShadow" ["l"="32.655,33.444"]
"stevewongv/DSC-PyTorch" ["l"="32.649,33.46"]
"tsingqguo/exposure-fusion-shadow-removal" ["l"="32.675,33.431"]
"cvlab-stonybrook/SID" ["l"="32.641,33.445"]
"hhqweasd/G2R-ShadowNet" ["l"="32.668,33.444"]
"vinthony/ghost-free-shadow-removal" ["l"="32.636,33.432"]
"Vivianyzw/DeshadowSTCGANs" ["l"="32.617,33.459"]
"DeepInsight-PCALab/ST-CGAN" ["l"="32.624,33.446"]
"xw-hu/DSC" ["l"="32.629,33.459"]
"zhling2020/RIS-GAN" ["l"="32.619,33.435"]
"IsHYuhi/ST-CGAN_Stacked_Conditional_Generative_Adversarial_Networks" ["l"="32.688,33.442"]
"jinyeying/DC-ShadowNet-Hard-and-Soft-Shadow-Removal" ["l"="32.648,33.415"]
"sylefeb/VoxModSynth" ["l"="34.002,31.153"]
"emilk/wfc" ["l"="33.983,31.15"]
"math-fehr/fast-wfc" ["l"="34.005,31.122"]
"vasumahesh1/WFC_WebGL" ["l"="34.025,31.16"]
"zfedoran/pixel-sprite-generator" ["l"="33.887,31.182"]
"Shogan/PixelSpriteGenerator-Unity" ["l"="33.848,31.149"]
"tcoxon/metazelda" ["l"="33.88,31.151"]
"blipn/pixel-sprite-generator-nodejs" ["l"="33.864,31.188"]
"abagames/PixelArtGen" ["l"="33.854,31.201"]
"ttencate/jfxr" ["l"="-28.8,31.457"]
"stewsters/shipwright" ["l"="33.862,31.169"]
"DavidYork/SpriteGenerator" ["l"="33.84,31.18"]
"ArtBIT/pixel-sprite-generator" ["l"="33.903,31.165"]
"tversteeg/sprite-gen" ["l"="33.876,31.211"]
"Zielak/pixel-sprite-generator" ["l"="33.899,31.206"]
"rlguy/FantasyMapGenerator" ["l"="-10.993,26.13"]
"daishihmr/bulletml.js" ["l"="-15.137,25.229"]
"keim/SiON" ["l"="-28.871,31.439"]
"junrushao1994/fast-neural-style.tf" ["l"="33.419,32.379"]
"OlavHN/fast-neural-style" ["l"="33.404,32.39"]
"ibab/tensorflow-wavenet" ["l"="0.624,40.098"]
"facebookresearch/fastText" ["l"="30.048,32.705"]
"jtoy/awesome-tensorflow" ["l"="23.475,31.019"]
"tensorflow/tensor2tensor" ["l"="30.047,32.545"]
"openai/gym" ["l"="24.91,36.054"]
"JoYoungjoo/SC-FEGAN" ["l"="33.581,32.857"]
"SummitKwan/transparent_latent_gan" ["l"="33.515,32.85"]
"Luolc/AdaBound" ["l"="34.304,35.575"]
"facebookresearch/pythia" ["l"="29.848,32.531"]
"shaoanlu/faceswap-GAN" ["l"="34.778,31.451"]
"TachibanaYoshino/AnimeGANv3" ["l"="33.301,33.102"]
"jayleicn/animeGAN" ["l"="34.133,30.275"]
"taki0112/UGATIT" ["l"="33.53,32.961"]
"mnicnc404/CartoonGan-tensorflow" ["l"="33.399,32.902"]
"Yijunmaverick/CartoonGAN-Test-Pytorch-Torch" ["l"="33.412,32.791"]
"znxlwm/pytorch-CartoonGAN" ["l"="33.363,32.803"]
"taki0112/CartoonGAN-Tensorflow" ["l"="33.396,32.85"]
"FlyingGoblin/CartoonGAN" ["l"="33.379,32.811"]
"SystemErrorWang/CartoonGAN" ["l"="33.388,32.838"]
"maciej3031/comixify" ["l"="33.387,32.824"]
"jerryli27/TwinGAN" ["l"="34.141,30.233"]
"qqwweee/keras-yolo3" ["l"="34.344,35.271"]
"fchollet/deep-learning-models" ["l"="34.197,35.172"]
"maurock/snake-ga" ["l"="33.419,31.447"]
"YuriyGuts/snake-ai-reinforcement" ["l"="33.399,31.419"]
"lucidrains/lightweight-gan" ["l"="33.324,32.972"]
"odegeasslbc/FastGAN-pytorch" ["l"="33.189,32.975"]
"autonomousvision/projected_gan" ["l"="33.229,32.965"]
"lucidrains/gigagan-pytorch" ["l"="34.57,29.085"]
"lucidrains/unet-stylegan2" ["l"="33.475,32.968"]
"facebookresearch/ic_gan" ["l"="33.175,33.009"]
"NVlabs/alias-free-gan" ["l"="33.296,32.99"]
"nolan-dev/GANInterface" ["l"="33.261,32.858"]
"nolan-dev/stylegan_reimplementation" ["l"="33.231,32.824"]
"k-l-lambda/stylegan-web" ["l"="33.181,32.854"]
"qhgz2013/anime-face-detector" ["l"="34.215,30.201"]
"reidsanders/danbooru-utility" ["l"="34.232,30.166"]
"znxlwm/pytorch-MNIST-CelebA-GAN-DCGAN" ["l"="33.554,32.701"]
"znxlwm/pytorch-MNIST-CelebA-cGAN-cDCGAN" ["l"="33.546,32.719"]
"togheppi/DCGAN" ["l"="33.48,32.686"]
"ptrblck/prog_gans_pytorch_inference" ["l"="33.527,32.676"]
"malzantot/Pytorch-conditional-GANs" ["l"="33.498,32.691"]
"znxlwm/tensorflow-MNIST-cGAN-cDCGAN" ["l"="33.478,32.663"]
"znxlwm/pytorch-CycleGAN" ["l"="33.593,32.774"]
"znxlwm/tensorflow-MNIST-GAN-DCGAN" ["l"="33.439,32.623"]
"appbrewery/100-days-of-python" ["l"="33.383,33.676"]
"guardicore/monkey" ["l"="-7.507,-43.366"]
"jofpin/trape" ["l"="-7.731,-43.465"]
"thenewboston-developers/Account-Manager" ["l"="33.348,33.766"]
"thenewboston-developers/Website" ["l"="33.367,33.761"]
"cmu-snap/pigasus" ["l"="33.368,33.735"]
"lightspin-tech/red-kube" ["l"="33.397,33.739"]
"harisqazi1/Cybersecurity" ["l"="-7.609,-43.381"]
"talkpython/100daysofcode-with-python-course" ["l"="25.37,-20.931"]
"tdlib/telegram-bot-api" ["l"="-31.536,-19.364"]
"koutto/pi-pwnbox-rogueap" ["l"="-7.291,-43.398"]
"TiendaNube/php-programming-best-practices" ["l"="33.388,33.713"]
"mxrch/GHunt" ["l"="-7.845,-43.556"]
"cjph8914/2020_benfords" ["l"="33.338,33.735"]
"l1ving/youtube-dl" ["l"="-31.87,-20.655"]
"vchinnipilli/kubestriker" ["l"="-10.524,0.677"]
"cyberark/kubesploit" ["l"="-10.579,0.656"]
"inguardians/peirates" ["l"="-10.565,0.676"]
"optiv/ScareCrow" ["l"="-6.945,-43.379"]
"OpenCSPM/opencspm" ["l"="-8.784,-1.447"]
"DataDog/stratus-red-team" ["l"="-8.819,-1.585"]
"cyberark/KubiScan" ["l"="-10.596,0.617"]
"Azure/Stormspotter" ["l"="-6.883,-43.464"]
"outflanknl/RedELK" ["l"="-7.115,-43.315"]
"fox-it/Invoke-ACLPwn" ["l"="-6.917,-43.251"]
"NetSPI/MicroBurst" ["l"="-6.895,-43.45"]
"klezVirus/CheeseTools" ["l"="-8.932,-44.071"]
"joel-simon/ganbreeder" ["l"="33.312,32.853"]
"robbiebarrat/art-DCGAN" ["l"="33.322,32.698"]
"dvschultz/ml-art-colabs" ["l"="33.173,32.875"]
"nerdyrodent/VQGAN-CLIP" ["l"="34.267,28.895"]
"eps696/aphantasia" ["l"="34.193,28.922"]
"memo/webcam-pix2pix-tensorflow" ["l"="33.764,-23.498"]
"lucidrains/big-sleep" ["l"="34.297,28.836"]
"experience-ml/cartoonize" ["l"="33.412,32.981"]
"SystemErrorWang/FacialCartoonization" ["l"="33.437,33.037"]
"samim23/DeepDreamAnim" ["l"="33.611,32.245"]
"VISIONAI/clouddream" ["l"="33.589,32.225"]
"kesara/deepdreamer" ["l"="33.617,32.22"]
"ryankennedyio/deep-dream-generator" ["l"="33.605,32.205"]
"JohnMount/CaffeECSExample" ["l"="33.562,32.22"]
"jcjohnson/cnn-vis" ["l"="33.602,32.314"]
"jrosebr1/bat-country" ["l"="33.585,32.249"]
"rasguanabana/ytfs" ["l"="-12.155,-20.258"]
"jeffThompson/PixelSorting" ["l"="32.936,-23.996"]
"gafr/chainer-fast-neuralstyle-models" ["l"="33.421,32.33"]
"genekogan/CubistMirror" ["l"="33.439,32.334"]
"mattya/chainer-gogh" ["l"="34.088,30.41"]
"titu1994/Fast-Neural-Style" ["l"="33.352,32.349"]
"pavelgonchar/neural-art-mini" ["l"="33.395,32.333"]
"chuanli11/MGANs" ["l"="33.445,32.436"]
"goodfeli/dlbook_notation" ["l"="33.75,32.786"]
"goodfeli/dlbook_exercises" ["l"="27.168,34.108"]
"dustinvtran/latex-templates" ["l"="7.184,9.12"]
"ermongroup/cs228-notes" ["l"="25.499,33.524"]
"google-research/arxiv-latex-cleaner" ["l"="27.669,30.103"]
"abhshkdz/ai-deadlines" ["l"="27.677,30.131"]
"facebookresearch/visdom" ["l"="34.137,35.481"]
"zackchase/mxnet-the-straight-dope" ["l"="34.123,35.207"]
"mila-udem/welcome_tutorials" ["l"="30.137,32.518"]
"rll/rllab" ["l"="25.103,35.917"]
"wtjiang98/BeautyGAN_pytorch" ["l"="33.601,33.034"]
"wangguanzhi/LADN" ["l"="33.613,33.032"]
"Honlan/BeautyGAN" ["l"="33.573,33.031"]
"thaoshibe/BeautyGAN-PyTorch-reimplementation" ["l"="33.626,33.029"]
"baldFemale/beautyGAN-tf-Implement" ["l"="33.621,33.047"]
"BeautyGlow/BeautyGlow.github.io" ["l"="33.641,33.045"]
"jingyut/PairedCycleGan" ["l"="33.641,33.034"]
"VinAIResearch/CPM" ["l"="33.598,33.019"]
"Honlan/DMT" ["l"="33.607,33.047"]
"Snowfallingplum/SSAT" ["l"="33.639,33.018"]
"makeuptransfer/SCGAN" ["l"="33.609,33.01"]
"huangzhikun1995/IPM-Net" ["l"="32.961,37.393"]
"thaoshibe/awesome-makeup-transfer" ["l"="33.621,33.018"]
"ssarfraz/SPL" ["l"="33.658,33.039"]
"baldFemale/MakeupEmbeddingGAN-tf-Implement" ["l"="33.609,33.058"]
"microsoft/CoCosNet" ["l"="34.529,32.535"]
"Hangz-nju-cuhk/Rotate-and-Render" ["l"="34.843,31.645"]
"JizhiziLi/GFM" ["l"="33.858,33.297"]
"JizhiziLi/P3M" ["l"="33.888,33.304"]
"JizhiziLi/AIM" ["l"="33.871,33.291"]
"ViTAE-Transformer/ViTAE-Transformer-Matting" ["l"="33.891,33.287"]
"JizhiziLi/RIM" ["l"="33.907,33.294"]
"ViTAE-Transformer/ViTAE-VSA" ["l"="33.895,33.297"]
"ViTAE-Transformer/ViTAE-Transformer" ["l"="33.904,33.303"]
"ViTAE-Transformer/Remote-Sensing-RVSA" ["l"="33.906,33.284"]
"ViTAE-Transformer/ViTDet" ["l"="33.919,33.308"]
"ViTAE-Transformer/ViTAE-Transformer-Remote-Sensing" ["l"="33.903,33.315"]
"ViTAE-Transformer/ViTPose" ["l"="33.924,33.291"]
"michaelowenliu/awesome-image-matting" ["l"="33.832,33.29"]
"nowsyn/SIM" ["l"="33.792,33.284"]
"yucornetto/MGMatting" ["l"="33.807,33.284"]
"webtoon/matteformer" ["l"="33.835,33.279"]
"lucidrains/DALLE-pytorch" ["l"="34.342,28.843"]
"genforce/idinvert_pytorch" ["l"="33.254,32.929"]
"imlixinyang/HiSD" ["l"="33.199,32.928"]
"foamliu/Deep-Image-Matting-PyTorch" ["l"="33.738,33.304"]
"Yaoyi-Li/GCA-Matting" ["l"="33.765,33.298"]
"foamliu/Deep-Image-Matting" ["l"="33.742,33.345"]
"MarcoForte/FBA_Matting" ["l"="33.75,33.291"]
"huochaitiantang/pytorch-deep-image-matting" ["l"="33.764,33.338"]
"poppinace/indexnet_matting" ["l"="33.756,33.327"]
"yunkezhang/FusionMatting" ["l"="33.779,33.313"]
"aisegmentcn/matting_human_datasets" ["l"="33.763,33.315"]
"wukaoliu/CVPR2020-HAttMatting" ["l"="33.755,33.306"]
"lnugraha/trimap_generator" ["l"="33.741,33.327"]
"wchstrife/Awesome-Image-Matting" ["l"="33.804,33.296"]
"MarcoForte/closed-form-matting" ["l"="33.771,33.368"]
"cyrildiagne/basnet-http" ["l"="31.893,32.77"]
"carolineec/EverybodyDanceNow" ["l"="34.544,32.555"]
"Kenzie-Academy-Brasil/portfolio-start-sua-carreira" ["l"="34.16,28.084"]
"nihui/dain-ncnn-vulkan" ["l"="-29.82,-18.9"]
"nihui/rife-ncnn-vulkan" ["l"="-29.831,-18.889"]
"n00mkrad/flowframes" ["l"="-29.839,-18.922"]
"Justin62628/Squirrel-RIFE" ["l"="-29.707,-18.851"]
"YiWeiHuang-stack/Squirrel-RIFE" ["l"="33.78,33.181"]
"megvii-research/ECCV2022-RIFE" ["l"="-29.86,-18.879"]
"n00mkrad/cupscale" ["l"="-29.806,-18.967"]
"tarun005/FLAVR" ["l"="-29.943,-18.877"]
"TianZerL/Anime4KCPP" ["l"="-29.713,-18.884"]
"BurguerJohn/FlowBlur-App" ["l"="33.783,33.208"]
"google-research/frame-interpolation" ["l"="35.154,31.508"]
"nihui/waifu2x-ncnn-vulkan" ["l"="-29.738,-18.897"]
"sniklaus/softmax-splatting" ["l"="-29.991,-18.845"]
"myungsub/CAIN" ["l"="-29.968,-18.85"]
"hzwer/Practical-RIFE" ["l"="-29.912,-18.891"]
"princeton-vl/RAFT" ["l"="31.73,43.166"]
"lisiyao21/AnimeInterp" ["l"="-29.95,-18.862"]
"KaimingHe/deep-residual-networks" ["l"="34.248,35.108"]
"liuzhuang13/DenseNet" ["l"="34.277,35.134"]
"sniklaus/pytorch-sepconv" ["l"="-30.069,-18.792"]
"NVlabs/PWC-Net" ["l"="31.726,43.139"]
"NVIDIA/flownet2-pytorch" ["l"="31.687,43.13"]
"sniklaus/sepconv-slomo" ["l"="-30.019,-18.834"]
"sniklaus/pytorch-pwc" ["l"="31.708,43.147"]
"thstkdgus35/EDSR-PyTorch" ["l"="35.871,32.207"]
"Sxela/ArcaneGAN" ["l"="33.254,33.077"]
"roimehrez/contextualLoss" ["l"="35.873,32.288"]
"AlexiaJM/relativistic-f-divergences" ["l"="33.441,32.713"]
"bamos/dcgan-completion.tensorflow" ["l"="33.736,32.576"]
"pathak22/context-encoder" ["l"="35.083,30.682"]
"jacobgil/keras-dcgan" ["l"="33.797,32.619"]
"moodoki/semantic_image_inpainting" ["l"="35.057,30.667"]
"jazzsaxmafia/Inpainting" ["l"="35.043,30.668"]
"leehomyc/Faster-High-Res-Neural-Inpainting" ["l"="35.06,30.685"]
"bioinf-jku/SNNs" ["l"="33.874,32.628"]
"shaohua0116/Activation-Visualization-Histogram" ["l"="34.037,32.639"]
"kimhc6028/relational-networks" ["l"="31.732,34.429"]
"deepmind/dnc" ["l"="24.891,35.795"]
"taolei87/sru" ["l"="30.094,32.518"]
"deepmind/learning-to-learn" ["l"="24.828,35.787"]
"ppwwyyxx/tensorpack" ["l"="34.217,35.125"]
"pauli-space/foundations_for_deep_learning" ["l"="23.31,31.075"]
"chiphuyen/tf-stanford-tutorials" ["l"="23.364,31.06"]
"williamFalcon/DeepRLHacks" ["l"="25.01,35.879"]
"salesforce/pytorch-qrnn" ["l"="30.115,32.482"]
"matthiasplappert/keras-rl" ["l"="24.894,35.902"]
"coupriec/VideoPredictionICLR2016" ["l"="33.904,32.459"]
"dyelax/Adversarial_Video_Generation" ["l"="33.863,32.471"]
"rubenvillegas/iclr2017mcnet" ["l"="33.957,32.446"]
"edenton/drnet" ["l"="33.986,32.447"]
"coxlab/prednet" ["l"="33.944,32.417"]
"alexlee-gk/video_prediction" ["l"="33.954,32.433"]
"cvondrick/videogan" ["l"="33.788,32.47"]
"alokwhitewolf/Video-frame-prediction-by-multi-scale-GAN" ["l"="33.928,32.446"]
"carpedm20/pixel-rnn-tensorflow" ["l"="33.811,32.509"]
"sergeytulyakov/mocogan" ["l"="33.886,32.497"]
"emansim/text2image" ["l"="33.732,32.492"]
"junhyukoh/nips2015-action-conditional-video-prediction" ["l"="33.915,32.433"]
"emansim/unsupervised-videos" ["l"="33.936,32.392"]
"facebookresearch/pytorch_GAN_zoo" ["l"="33.512,32.799"]
"DLHacks/mocogan" ["l"="33.95,32.486"]
"snap-research/MoCoGAN-HD" ["l"="34.705,29.026"]
"pfnet-research/tgan" ["l"="33.978,32.481"]
"AliaksandrSiarohin/monkey-net" ["l"="34.978,31.57"]
"edenton/svg" ["l"="33.994,32.429"]
"universome/stylegan-v" ["l"="34.654,29.022"]
"balakg/posewarp-cvpr2018" ["l"="34.56,32.455"]
"rubenvillegas/icml2017hierchvid" ["l"="33.971,32.453"]
"AliaksandrSiarohin/pose-gan" ["l"="34.553,32.48"]
"tdeboissiere/DeepLearningImplementations" ["l"="33.813,32.637"]
"bstriner/keras-adversarial" ["l"="33.895,32.642"]
"titu1994/DenseNet" ["l"="34.313,35.001"]
"fchollet/keras-resources" ["l"="23.44,31.02"]
"raghakot/keras-vis" ["l"="25.702,33.779"]
"raghakot/keras-resnet" ["l"="34.265,35.018"]
"xhujoy/CycleGAN-tensorflow" ["l"="33.603,32.645"]
"architrathore/CycleGAN" ["l"="33.583,32.609"]
"leehomyc/cyclegan-1" ["l"="33.577,32.62"]
"hardikbansal/CycleGAN" ["l"="33.585,32.636"]
"JoinWei-PKU/PTGAN" ["l"="33.021,36.782"]
"LynnHo/CycleGAN-Tensorflow-PyTorch" ["l"="33.565,32.604"]
"taki0112/MUNIT-Tensorflow" ["l"="33.514,32.73"]
"luoxier/CycleGAN_Tensorlayer" ["l"="33.551,32.604"]
"xinario/SAGAN" ["l"="33.326,32.329"]
"houguanqun/Low-Dose-CT-denoising" ["l"="33.292,32.287"]
"eunh/low_dose_CT" ["l"="33.309,32.296"]
"hyeongyuy/CT-WGAN_VGG_tensorflow" ["l"="33.277,32.288"]
"SSinyu/WGAN_VGG" ["l"="33.308,32.312"]
"hmshan/CPCE-3D" ["l"="33.29,32.262"]
"SSinyu/CT-Denoising-Review" ["l"="33.274,32.271"]
"SSinyu/RED_CNN" ["l"="33.293,32.303"]
"dvschultz/stylegan2" ["l"="33.139,32.873"]
"dvschultz/ai" ["l"="33.148,32.882"]
"tugstugi/dl-colab-notebooks" ["l"="33.202,32.872"]
"firmai/awesome-google-colab" ["l"="33.083,32.816"]
"mrm8488/shared_colab_notebooks" ["l"="33.111,32.818"]
"amrzv/awesome-colab-notebooks" ["l"="33.138,32.843"]
"chervonij/DFL-Colab" ["l"="34.846,31.431"]
"sgrvinod/Deep-Tutorials-for-PyTorch" ["l"="31.445,34.584"]
"resemble-ai/Resemblyzer" ["l"="0.417,39.999"]
"dvschultz/dataset-tools" ["l"="33.134,32.888"]
"generative-intelligence-lab/modelverse" ["l"="33.086,33.01"]
"adobe-research/sam_inversion" ["l"="33.078,33.04"]
"nupurkmr9/vision-aided-gan" ["l"="33.165,32.981"]
"PeterWang512/GANWarping" ["l"="33.126,32.983"]
"lmxyy/sige" ["l"="33.041,33.011"]
"tengteng95/Pose-Transfer" ["l"="34.555,32.499"]
"RenYurui/Global-Flow-Local-Attention" ["l"="34.524,32.494"]
"CUHKSZ-TQL/EverybodyDanceNow_reproduce_pytorch" ["l"="34.56,32.54"]
"menyifang/ADGAN" ["l"="34.504,32.492"]
"apchenstu/Facial_Details_Synthesis" ["l"="34.783,31.644"]
"daniilidis-group/neural_renderer" ["l"="33.093,43.133"]
"Lotayou/everybody_dance_now_pytorch" ["l"="34.568,32.528"]
"ly015/intrinsic_flow" ["l"="34.524,32.456"]
"QuantumLiu/AIMakeup" ["l"="33.768,33.044"]
"PerpetualSmile/BeautyCamera" ["l"="33.831,33.05"]
"tg-bomze/Face-Image-Motion-Model" ["l"="33.385,33.001"]
"tg-bomze/StyleGAN2-Face-Modificator" ["l"="33.305,32.976"]
"thenewboston-developers/thenewboston-python" ["l"="33.332,33.786"]
"thenewboston-developers/Website-API" ["l"="33.357,33.797"]
"thenewboston-developers/Bank" ["l"="33.345,33.788"]
"thenewboston-developers/Payment-Processor" ["l"="33.34,33.798"]
"thenewboston-developers/Validator" ["l"="33.357,33.784"]
"thenewboston-developers/Project-Proposals" ["l"="33.391,33.816"]
"thenewboston-developers/thenewboston-js" ["l"="33.325,33.771"]
"thenewboston-developers/thenewboston-python-client" ["l"="33.373,33.795"]
"thenewboston-developers/Developer-Portal" ["l"="33.328,33.758"]
"thenewboston-developers/Kotlin-SDK" ["l"="33.372,33.784"]
"MingSun-Tse/Collaborative-Distillation" ["l"="33.254,32.598"]
"GlebBrykin/SANET" ["l"="33.261,32.576"]
"czczup/URST" ["l"="33.225,32.62"]
"irasin/Pytorch_WCT" ["l"="33.205,32.585"]
"JianqiangRen/AAMS" ["l"="33.272,32.587"]
"tomguluson92/StyleGAN_PyTorch" ["l"="33.403,32.813"]
"irasin/Pytorch_AdaIN" ["l"="33.134,32.602"]
"rgeirhos/Stylized-ImageNet" ["l"="21.294,13.97"]
"justinpinkney/awesome-pretrained-stylegan" ["l"="33.218,32.922"]
"justinpinkney/awesome-pretrained-stylegan3" ["l"="33.146,32.933"]
"justinpinkney/stylegan2" ["l"="33.218,32.954"]
"mikaelalafriz/lucid-sonic-dreams" ["l"="33.132,32.926"]
"dennybritz/cnn-text-classification-tf" ["l"="30.101,32.695"]
"tsing90/pytorch_semantic_human_matting" ["l"="33.795,33.325"]
"lizhengwei1992/mobile_phone_human_matting" ["l"="33.825,33.344"]
"lizhengwei1992/Fast_Portrait_Segmentation" ["l"="33.808,33.341"]
"thuyngch/Human-Segmentation-PyTorch" ["l"="33.797,33.311"]
"PetroWu/AutoPortraitMatting" ["l"="33.791,33.339"]
"yunkezhang/TCVOM" ["l"="33.837,33.263"]
"kelisiya/TIMI-Net" ["l"="33.807,33.259"]
"nowsyn/DVM" ["l"="33.824,33.256"]
"gustavla/autocolorize" ["l"="33.729,32.32"]
"aditya12agd5/iccv15_lscolorization" ["l"="33.733,32.28"]
"zeruniverse/neural-colorization" ["l"="33.769,32.29"]
"nilboy/colorization-tf" ["l"="33.792,32.273"]
"aditya12agd5/divcolor" ["l"="33.746,32.263"]
"GANs-in-Action/gans-in-action" ["l"="33.78,32.807"]
"davidADSP/GDL_code" ["l"="33.816,32.848"]
"PacktPublishing/Generative-Adversarial-Networks-Projects" ["l"="33.862,32.858"]
"PacktPublishing/Advanced-Deep-Learning-with-Keras" ["l"="22.552,29.481"]
"sheqi/GAN_Review" ["l"="8.794,17.067"]
"PacktPublishing/Hands-On-Generative-Adversarial-Networks-with-Keras" ["l"="33.862,32.84"]
"kozistr/Awesome-GANs" ["l"="33.682,32.746"]
"PacktPublishing/Generative-Adversarial-Networks-Cookbook" ["l"="33.878,32.845"]
"timsainb/tensorflow2-generative-models" ["l"="33.734,32.763"]
"machinelearningmindset/Generative-Adversarial-Networks-Roadmap" ["l"="33.922,32.843"]
"googlecreativelab/quickdraw-dataset" ["l"="33.704,32.572"]
"danmacnish/cartoonify" ["l"="22.019,2.158"]
"zalandoresearch/fashion-mnist" ["l"="25.669,34.229"]
"PAIR-code/facets" ["l"="25.452,33.857"]
"tensorflow/lucid" ["l"="34.11,35.539"]
"Joker316701882/Deep-Image-Matting" ["l"="33.779,33.379"]
"np-csu/AlphaMatting" ["l"="33.805,33.393"]
"yaksoy/AffinityBasedMattingToolbox" ["l"="33.8,33.372"]
"MarcoForte/knn-matting" ["l"="33.777,33.394"]
"atilimcetin/global-matting" ["l"="33.793,33.394"]
"Joker316701882/Salient-Object-Detection" ["l"="31.946,32.7"]
"iyah4888/SIGGRAPH18SSS" ["l"="33.75,33.376"]
"yaksoy/SemanticSoftSegmentation" ["l"="33.788,33.365"]
"dingzeyuli/knn-matting" ["l"="33.796,33.406"]
"MarcoForte/bayesian-matting" ["l"="33.777,33.415"]
"volvet/AlphaMatting" ["l"="33.817,33.414"]
"supitalp/Comprehensive-Sample-Set-Image-Matting" ["l"="33.805,33.426"]
"foamliu/Deep-Image-Matting-v2" ["l"="33.78,33.353"]
"owang/BilateralVideoSegmentation" ["l"="33.859,33.422"]
"menyifang/DCT-Net" ["l"="33.247,33.059"]
"ptran1203/pytorch-animeGAN" ["l"="33.256,33.175"]
"wyhsirius/LIA" ["l"="35.043,31.59"]
"williamyang1991/VToonify" ["l"="35.176,31.537"]
"a312863063/seeprettyface-generator-yellow" ["l"="33.353,33.025"]
"a312863063/seeprettyface-generator-star" ["l"="33.364,33.051"]
"a312863063/seeprettyface-generator-model" ["l"="33.379,33.048"]
"a312863063/seeprettyface-generator-wanghong" ["l"="33.379,33.018"]
"a312863063/seeprettyface-ganerator-dongman" ["l"="33.349,33.05"]
"a312863063/seeprettyface-generator-babies" ["l"="33.38,33.059"]
"taotaonice/FaceShifter" ["l"="34.893,31.47"]
"a312863063/seeprettyface-dataset" ["l"="33.352,33.065"]
"utkarshojha/few-shot-gan-adaptation" ["l"="33.062,33.002"]
"gaborvecsei/SLE-GAN" ["l"="33.112,33.021"]
"e-271/few-shot-gan" ["l"="33.095,33.031"]
"rosinality/alias-free-gan-pytorch" ["l"="33.207,32.97"]
"bes-dev/MobileStyleGAN.pytorch" ["l"="33.247,32.967"]
"phizaz/diffae" ["l"="34.532,28.934"]
"dvschultz/stylegan2-ada-pytorch" ["l"="33.139,32.911"]
"chaiyujin/glow-pytorch" ["l"="23.19,33.916"]
"rosinality/glow-pytorch" ["l"="23.218,33.925"]
"rtqichen/torchdiffeq" ["l"="23.281,33.842"]
"VITA-Group/TransGAN" ["l"="33.369,32.898"]
"dorarad/gansformer" ["l"="33.292,32.964"]
"yitu-opensource/T2T-ViT" ["l"="34.636,35.913"]
"mit-han-lab/anycost-gan" ["l"="33.257,32.946"]
"ZhendongWang6/Uformer" ["l"="35.973,32.386"]
"raywzy/ICT" ["l"="35.076,30.821"]
"ImagingLab/Colorizing-with-GANs" ["l"="33.765,32.317"]
"Armour/Automatic-Image-Colorization" ["l"="33.783,32.301"]
"pdrabinski/GAN_Colorizer" ["l"="33.805,32.297"]
"baldassarreFe/deep-koalarization" ["l"="33.792,32.318"]
"pvitoria/ChromaGAN" ["l"="33.76,32.344"]
"shekkizh/Colorization.tensorflow" ["l"="33.797,32.285"]
"richzhang/colorization-pytorch" ["l"="33.741,32.356"]
"emilwallner/Coloring-greyscale-images" ["l"="33.777,32.333"]
"ccyyatnet/COLORGAN" ["l"="33.75,32.291"]
"TengdaHan/Image-Colorization" ["l"="33.775,32.272"]
"safwankdb/ReCoNet-PyTorch" ["l"="33.177,32.518"]
"pkuanjie/ArtFlow" ["l"="33.084,32.563"]
"curaai00/RT-StyleTransfer-forVideo" ["l"="33.238,32.574"]
"shufanwu/colorNet-pytorch" ["l"="33.781,32.235"]
"greerviau/SnakeAI" ["l"="33.455,31.496"]
"Chrispresso/SnakeAI" ["l"="33.487,31.441"]
"Code-Bullet/SnakeFusion" ["l"="33.419,31.591"]
"techwithtim/NEAT-Flappy-Bird" ["l"="24.366,36.96"]
"greerviau/TetrisAI" ["l"="33.487,31.48"]
"chuyangliu/snake" ["l"="-12.392,22.161"]
"Sentdex/NNfSiX" ["l"="28.889,37.581"]
"neeru1207/AI_Sudoku" ["l"="27.45,-20.11"]
"streamlit/demo-self-driving" ["l"="22.96,32.042"]
"mnielsen/neural-networks-and-deep-learning" ["l"="23.594,31.116"]
"greerviau/DoodleJumpAI" ["l"="33.452,31.469"]
"openai/multi-agent-emergence-environments" ["l"="25.283,35.935"]
"lexfridman/mit-deep-learning" ["l"="23.736,30.819"]
"NathanUA/BASNet" ["l"="31.978,32.713"]
"HRNet/HRNet-Semantic-Segmentation" ["l"="31.683,37.041"]
"zhanghang1989/ResNeSt" ["l"="34.538,35.573"]
"dbolya/yolact" ["l"="34.542,35.47"]
"yuval-alaluf/SAM" ["l"="33.251,32.988"]
"Code-Bullet/Pool_AI" ["l"="33.393,31.633"]
"Code-Bullet/Enigma-Simulator" ["l"="33.395,31.591"]
"Code-Bullet/AsteroidsAI" ["l"="33.413,31.618"]
"Code-Bullet/Smart-Dots-Genetic-Algorithm-Tutorial" ["l"="33.411,31.609"]
"Code-Bullet/WorldsHardestGameAI" ["l"="33.388,31.605"]
"Code-Bullet/Chess-AI" ["l"="33.395,31.619"]
"Code-Bullet/minesweeper-AI" ["l"="33.4,31.613"]
"Code-Bullet/RubiksCubeAI" ["l"="33.364,31.618"]
"Code-Bullet/Asteroids-with-NEAT" ["l"="33.404,31.62"]
"Code-Bullet/NEAT_Template" ["l"="33.399,31.607"]
"Code-Bullet/2048-AI" ["l"="33.388,31.618"]
"Code-Bullet/Handy-Terminal-Position-Designer-Matrix-Thing" ["l"="33.393,31.611"]
"zllrunning/video-object-removal" ["l"="35.225,30.759"]
"microsoft/computervision-recipes" ["l"="34.252,35.749"]
"anvaka/city-roads" ["l"="27.417,-20.086"]
"alyssaxuu/flowy" ["l"="32.52,-26.009"]
"xinario/awesome-gan-for-medical-imaging" ["l"="29.269,36.622"]
"GKalliatakis/Delving-deep-into-GANs" ["l"="33.728,32.66"]
"aikorea/awesome-rl" ["l"="24.961,36.021"]
"diegoalejogm/gans" ["l"="33.618,32.663"]
"devnag/pytorch-generative-adversarial-networks" ["l"="33.752,32.637"]
"higgsfield/Capsule-Network-Tutorial" ["l"="31.021,32.909"]
"altosaar/variational-autoencoder" ["l"="25.008,32.68"]
"diegoalejogm/deep-q-learning" ["l"="33.578,32.596"]
"astorfi/TensorFlow-World-Resources" ["l"="23.385,31.205"]
"shayneobrien/generative-models" ["l"="33.559,32.641"]
"savan77/The-GAN-World" ["l"="33.681,32.519"]
"dnouri/skorch" ["l"="25.512,33.671"]
"mlberkeley/Creative-Adversarial-Networks" ["l"="33.314,32.677"]
"dorajam/Convolutional-Network" ["l"="22.036,37.451"]
"andrewgordonwilson/bayesgan" ["l"="25.373,33.55"]
"hanzhanggit/StackGAN-Pytorch" ["l"="33.502,32.6"]
"xuqiantong/GAN-Metrics" ["l"="33.53,32.752"]
"nashory/pggan-pytorch" ["l"="33.494,32.774"]
"lzhbrian/metrics" ["l"="33.495,32.745"]
"vdumoulin/conv_arithmetic" ["l"="34.086,35.491"]
"uclaacmai/Generative-Adversarial-Network-Tutorial" ["l"="33.948,32.628"]
"jonbruner/generative-adversarial-networks" ["l"="33.922,32.605"]
"adeshpande3/Generative-Adversarial-Networks" ["l"="23.27,31.035"]
"awjuliani/TF-Tutorials" ["l"="33.851,32.606"]
"uclaacmai/tf-workshop-series" ["l"="34.019,32.622"]
"wagamamaz/tensorflow-tutorial" ["l"="23.44,31.298"]
"shaohua0116/DCGAN-Tensorflow" ["l"="33.375,32.556"]
"microsoft/DisentangledFaceGAN" ["l"="34.875,31.618"]
"royorel/FFHQ-Aging-Dataset" ["l"="34.547,33.24"]
"wdyin/GeoGAN" ["l"="33.385,32.79"]
"ali-design/gan_steerability" ["l"="33.29,32.838"]
"IVRL/GANLocalEditing" ["l"="33.223,32.909"]
"assafshocher/InGAN" ["l"="33.227,32.758"]
"cleardusk/3DDFA_V2" ["l"="34.76,31.718"]
"anilsathyan7/Portrait-Segmentation" ["l"="33.816,33.321"]
"ceshine/fast-neural-style" ["l"="33.226,32.508"]
"rrmina/fast-neural-style-pytorch" ["l"="33.254,32.545"]
"dxyang/StyleTransfer" ["l"="33.234,32.525"]
"donydchen/ganimation_replicate" ["l"="33.713,32.908"]
"nyoki-mtl/pytorch-EverybodyDanceNow" ["l"="34.575,32.589"]
"tranluan/Nonlinear_Face_3DMM" ["l"="34.748,31.659"]
"cleardusk/3DDFA" ["l"="34.704,31.688"]
"yandex-research/navigan" ["l"="33.058,32.847"]
"wpeebles/hessian_penalty" ["l"="33.171,32.839"]
"genforce/mganprior" ["l"="33.239,32.884"]
"genforce/lia" ["l"="33.169,32.9"]
"bryandlee/stylegan2-encoder-pytorch" ["l"="33.226,32.893"]
"Hsintien-Ng/idinvert_pytorch-reproduced" ["l"="33.201,32.912"]
"woctezuma/stylegan2-projecting-images" ["l"="33.239,32.938"]
"intel-isl/FreeViewSynthesis" ["l"="32.318,33.449"]
"intel-isl/StableViewSynthesis" ["l"="32.294,33.44"]
"alievk/npbg" ["l"="32.369,33.437"]
"NVlabs/extreme-view-synth" ["l"="31.962,43.399"]
"zhengqili/Crowdsampling-the-Plenoptic-Function" ["l"="32.298,33.472"]
"jchibane/srf" ["l"="32.275,33.459"]
"facebookresearch/nonrigid_nerf" ["l"="33.351,43.185"]
"huangzh13/StyleGAN.pytorch" ["l"="33.333,32.845"]
"kwotsin/mimicry" ["l"="33.369,32.836"]
"torchgan/torchgan" ["l"="33.547,32.804"]
"toshas/torch-fidelity" ["l"="34.59,28.891"]
"cc-hpc-itwm/UpConv" ["l"="34.803,31.225"]
"szymonmaszke/torchlayers" ["l"="23.474,33.972"]
"jh-jeong/ContraD" ["l"="33.584,36.839"]
"yang-song/score_sde" ["l"="34.567,28.889"]
"w86763777/pytorch-gan-collections" ["l"="33.201,32.755"]
"lernapparat/lernapparat" ["l"="33.35,32.844"]
"SiskonEmilia/StyleGAN-PyTorch" ["l"="33.333,32.804"]
"Ha0Tang/SelectionGAN" ["l"="33.328,32.729"]
"Prinsphield/ELEGANT" ["l"="33.409,32.747"]
"tomguluson92/StyleGAN2_PyTorch" ["l"="33.364,32.766"]
"sniklaus/3d-ken-burns" ["l"="31.77,43.278"]
"intel-isl/MiDaS" ["l"="31.806,43.28"]
"facebookresearch/consistent_depth" ["l"="31.787,43.297"]
"facebookresearch/one_shot_3d_photography" ["l"="33.283,43.216"]
"PITI-Synthesis/PITI" ["l"="34.546,28.984"]
"Janspiry/Palette-Image-to-Image-Diffusion-Models" ["l"="34.528,28.902"]
"andreas128/RePaint" ["l"="34.494,28.938"]
"JingyunLiang/SwinIR" ["l"="35.92,32.353"]
"fenglinglwb/MAT" ["l"="35.104,30.836"]
"kestra-io/kestra" ["l"="-13.497,-44.672"]
"ypxie/HDGan" ["l"="33.458,32.587"]
"MinfengZhu/DM-GAN" ["l"="33.405,32.607"]
"qiaott/MirrorGAN" ["l"="33.431,32.579"]
"mrlibw/ControlGAN" ["l"="33.405,32.623"]
"lzhbrian/arbitrary-text-to-image-papers" ["l"="33.447,32.578"]
"hanzhanggit/StackGAN-inception-model" ["l"="33.455,32.601"]
"roatienza/Deep-Learning-Experiments" ["l"="33.89,32.673"]
"osh/KerasGAN" ["l"="33.91,32.628"]
"roatienza/ml" ["l"="33.944,32.686"]
"rockingdingo/deepnlp" ["l"="32.091,30.044"]
"ilivans/tf-rnn-attention" ["l"="31.457,31.553"]
"meereeum/lda2vec-tf" ["l"="29.652,32.829"]
"adeshpande3/Tensorflow-Programs-and-Tutorials" ["l"="23.321,31.012"]
"leriomaggio/deep-learning-keras-tensorflow" ["l"="23.456,31.037"]
"tjwei/GANotebooks" ["l"="33.712,32.71"]
"yhenon/keras-frcnn" ["l"="34.348,35.069"]
"robbiebarrat/rapping-neural-network" ["l"="33.162,32.535"]
"robbiebarrat/plant-art" ["l"="33.161,32.58"]
"robbiebarrat/Bach_AI" ["l"="33.112,32.536"]
"robbiebarrat/twitter-contest-enterer" ["l"="32.956,32.392"]
"johnwmillr/LyricsGenius" ["l"="-25.753,-18.49"]
"robbiebarrat/Sculpture-GAN" ["l"="33.124,32.549"]
"tonybeltramelli/Deep-Lyrics" ["l"="33.056,32.453"]
"jostmey/rwa" ["l"="26.99,34.478"]
"saurabhmathur96/clickbait-detector" ["l"="32.979,32.454"]
"Hugo-Nattagh/2017-Hip-Hop" ["l"="-25.734,-18.467"]
"jsvine/markovify" ["l"="-4.752,-44.43"]
"zxytim/neural-painter" ["l"="28.273,-18.802"]
"rkjones4/GANGogh" ["l"="33.234,32.683"]
"jcjohnson/torch-rnn" ["l"="27.038,34.304"]
"Ha0Tang/EdgeGAN" ["l"="33.205,32.687"]
"Ha0Tang/ASGAN" ["l"="33.245,32.701"]
"mit-han-lab/gan-compression" ["l"="33.27,32.895"]
"Evolving-AI-Lab/ppgn" ["l"="33.668,32.543"]
"axinc-ai/ailia-models" ["l"="33.571,33.256"]
"PINTO0309/PINTO_model_zoo" ["l"="34.296,35.597"]
"mikel-brostrom/Yolov5_StrongSORT_OSNet" ["l"="32.225,36.263"]
"wmcnally/kapao" ["l"="35.986,34.993"]
"ppogg/YOLOv5-Lite" ["l"="16.149,-7.069"]
"jinfagang/yolov7" ["l"="34.557,35.672"]
"nihui/opencv-mobile" ["l"="31.6,36.303"]
"JeanWU/CalliGAN" ["l"="33.301,32.385"]
"Arctanxy/W-Net-PyTorch" ["l"="33.276,32.334"]
"jasonlo0509/Font2Font" ["l"="33.32,32.383"]
"ethereon/caffe-tensorflow" ["l"="34.278,35.111"]
"Onr/Council-GAN" ["l"="33.258,32.813"]
"Seanseattle/SMIS" ["l"="34.54,32.509"]
"eliahuhorwitz/DeepSIM" ["l"="33.154,32.992"]
"microsoft/CoCosNet-v2" ["l"="34.516,32.523"]
"sicxu/Deep3DFaceRecon_pytorch" ["l"="34.874,31.69"]
"CoinCheung/BiSeNet" ["l"="31.784,37.028"]
"zhuhao-nju/facescape" ["l"="34.822,31.692"]
"KupynOrest/DeblurGAN" ["l"="35.981,32.283"]
"oarriaga/face_classification" ["l"="0.798,40.133"]
"andabi/deep-voice-conversion" ["l"="0.631,40.125"]
"tg-bomze/ENTAR" ["l"="33.322,33.034"]
"AliaksandrSiarohin/motion-cosegmentation" ["l"="34.954,31.529"]
"yzhq97/transmomo.pytorch" ["l"="35.66,35.189"]
"oneThousand1000/non-hair-FFHQ" ["l"="33.134,33.045"]
"HavenFeng/TRUST" ["l"="34.96,31.764"]
"foivospar/NED" ["l"="35.004,31.715"]
"jiaxinxie97/HFGI3D" ["l"="35.099,31.75"]
"zijundeng/BDRAR" ["l"="32.632,33.478"]
"Xiaoming-Yu/ShadowRemoval" ["l"="32.593,33.472"]
"GuoLanqing/ShadowFormer" ["l"="32.595,33.431"]
"GuoLanqing/Awesome-Shadow-Removal" ["l"="32.585,33.447"]
"AaronJny/nerual_style_change" ["l"="33.197,32.489"]
"AaronJny/DeepLearningExamples" ["l"="33.124,32.444"]
"CortexFoundation/StyleTransferTrilogy" ["l"="33.296,32.556"]
"edenton/drnet-py" ["l"="34.01,32.444"]
"ap229997/DRNET" ["l"="34.033,32.444"]
"EmbarkStudios/texture-synthesis" ["l"="-9.395,4.574"]
"IRCSS/Procedural-painting" ["l"="-10.904,39.737"]
"jasonwebb/morphogenesis-resources" ["l"="30.656,-23.495"]
"penrose/penrose" ["l"="-9.406,13.413"]
"LingDong-/shan-shui-inf" ["l"="32.19,-24.557"]
"Fewes/MinimalAtmosphere" ["l"="-12.155,26.435"]
"carlini/printf-tac-toe" ["l"="34.02,27.691"]
"manuelruder/fast-artistic-videos" ["l"="33.363,32.602"]
"zeruniverse/fast-artistic-videos" ["l"="33.396,32.506"]
"phoenix104104/fast_blind_video_consistency" ["l"="35.225,30.727"]
"NameRX/artistic-videos" ["l"="33.334,32.572"]
"ProGamerGov/Neural-Zoom" ["l"="33.345,32.554"]
"tohinz/ConSinGAN" ["l"="33.28,32.821"]
"FriedRonaldo/SinGAN" ["l"="33.561,32.933"]
"Code-Bullet/Flappy-Bird-AI" ["l"="33.369,31.632"]
"Code-Bullet/Storm-The-House-Auto-Clicker" ["l"="33.381,31.611"]
"Code-Bullet/NEAT-Template-JavaScript" ["l"="33.372,31.609"]
"Code-Bullet/MarbleCalculator" ["l"="33.388,31.624"]
"xuebinqin/BASNet" ["l"="32.035,32.654"]
"open-mmlab/mmsegmentation" ["l"="34.499,35.766"]
"qubvel/segmentation_models.pytorch" ["l"="34.344,35.644"]
"milesial/Pytorch-UNet" ["l"="29.163,36.548"]
"microsoft/Swin-Transformer" ["l"="34.463,35.776"]
"brilam/remove-bg" ["l"="33.733,33.395"]
"remove-bg/go" ["l"="33.742,33.455"]
"susheelsk/image-background-removal" ["l"="33.7,33.397"]
"eti-p-doray/unet-gan-matting" ["l"="33.721,33.376"]
"mtownsend5512/remove-bg" ["l"="33.761,33.473"]
"dunnousername/yanderifier" ["l"="33.424,33.178"]
"xfgryujk/blivechat" ["l"="-33.588,-18.125"]
"SteamTools-Team/SteamTools" ["l"="-27.179,-17.742"]
"itorr/nbnhhsh" ["l"="-27.232,-17.696"]
"DinoMan/speech-driven-animation" ["l"="34.974,31.635"]
"PantsuDango/Dango-Translator" ["l"="-29.497,-18.796"]
"rmbadmin/SteamTools" ["l"="-34.75,-15.805"]
"KuangDD/zhrtvc" ["l"="0.423,40.073"]
"pkhungurn/talking-head-anime-demo" ["l"="-0.042,40.352"]
"davidADSP/Generative_Deep_Learning_2nd_Edition" ["l"="33.868,32.886"]
"MLSlayer/Generative-Deep-Learning-Code-in-Pytorch" ["l"="33.903,32.89"]
"hundredblocks/ml-powered-applications" ["l"="23.777,30.291"]
"PacktPublishing/Deep-Reinforcement-Learning-Hands-On-Second-Edition" ["l"="25.19,35.995"]
"nlp-with-transformers/notebooks" ["l"="23.736,30.317"]
"williamFalcon/pytorch-lightning" ["l"="34.242,35.678"]
"dsgiitr/d2l-pytorch" ["l"="23.949,30.972"]
"tensorflow/gan" ["l"="33.578,32.806"]
"PacktPublishing/Deep-Reinforcement-Learning-Hands-On" ["l"="25.124,36.06"]
"joosthub/PyTorchNLPBook" ["l"="29.901,32.687"]
"JeremyCCHsu/tf-vaegan" ["l"="33.899,32.536"]
"anitan0925/vaegan" ["l"="33.915,32.553"]
"zhangqianhui/vae-gan-tensorflow" ["l"="33.898,32.552"]
"kundan2510/pixelCNN" ["l"="33.837,32.463"]
"ikostrikov/TensorFlow-VAE-GAN-DRAW" ["l"="33.8,32.55"]
"igul222/pixel_rnn" ["l"="33.871,32.448"]
"ericjang/draw" ["l"="33.76,32.501"]
"timsainb/Tensorflow-MultiGPU-VAE-GAN" ["l"="33.824,32.554"]
"shiretzet/PixelRNN" ["l"="33.864,32.488"]
"yueatsprograms/Stochastic_Depth" ["l"="26.918,34.293"]
"carpedm20/simulated-unsupervised-tensorflow" ["l"="33.809,32.58"]
"andersbll/autoencoding_beyond_pixels" ["l"="33.855,32.553"]
"jbornschein/draw" ["l"="27.036,34.234"]
"kvfrans/draw-color" ["l"="33.804,32.455"]
"vivanov879/draw" ["l"="26.935,34.352"]
"chenzhaomin123/draw_pytorch" ["l"="33.816,32.446"]
"hardmaru/cppn-gan-vae-tensorflow" ["l"="33.855,32.505"]
"qassemoquab/stnbhwd" ["l"="26.816,34.354"]
"baudm/vaegan-celebs-keras" ["l"="33.923,32.585"]
"lucabergamini/VAEGAN-PYTORCH" ["l"="33.938,32.553"]
"ouyanghuiyu/chineseocr_lite" ["l"="29.56,34.208"]
"Blueteak/Unity-Neural-Network" ["l"="33.522,31.586"]
"CarsonRoscoe/MachineWars" ["l"="33.539,31.573"]
"Evolving-AI-Lab/synthesizing" ["l"="33.697,32.475"]
"guojunq/lsgan" ["l"="33.726,32.533"]
"xunhuang1995/SGAN" ["l"="33.587,32.544"]
"Guim3/IcGAN" ["l"="33.594,32.622"]
"buriburisuri/ebgan" ["l"="33.807,32.533"]
"buriburisuri/ac-gan" ["l"="33.783,32.578"]
"carpedm20/DiscoGAN-pytorch" ["l"="33.706,32.6"]
"skaae/torch-gan" ["l"="26.929,34.324"]
"mingyuliutw/CoGAN" ["l"="33.558,32.62"]
"IshmaelBelghazi/ALI" ["l"="33.947,32.531"]
"jeffdonahue/bigan" ["l"="34.06,32.508"]
"yujiali/gmmn" ["l"="22.937,33.983"]
"ChunyuanLI/ALICE" ["l"="34.022,32.513"]
"edgarriba/ali-pytorch" ["l"="33.997,32.517"]
"pclucas14/pixel-cnn-pp" ["l"="25.016,32.55"]
"kkleidal/GatedPixelCNNPyTorch" ["l"="24.995,32.496"]
"tonywu95/eval_gen" ["l"="33.805,32.487"]
"zuoxingdong/VIN_PyTorch_Visdom" ["l"="24.982,35.814"]
"TheAbhiKumar/tensorflow-value-iteration-networks" ["l"="24.947,35.835"]
"nilboy/pixel-recursive-super-resolution" ["l"="-24.883,23.103"]
"y0ast/VAE-Torch" ["l"="26.917,34.351"]
"musyoku/adversarial-autoencoder" ["l"="24.959,32.671"]
"openai/iaf" ["l"="33.825,32.526"]
"stitchfix/fauxtograph" ["l"="27.115,34.25"]
"ryankiros/visual-semantic-embedding" ["l"="31.9,33.781"]
"yaoli/arctic-capgen-vid" ["l"="31.849,33.939"]
"kelvinxu/arctic-captions" ["l"="31.538,34.527"]
"jazzsaxmafia/video_to_sequence" ["l"="31.876,33.97"]
"carpedm20/variational-text-tensorflow" ["l"="30.7,33.914"]
"ryankiros/skip-thoughts" ["l"="30.01,32.741"]
"jazzsaxmafia/show_attend_and_tell.tensorflow" ["l"="31.5,34.5"]
"LantaoYu/SeqGAN" ["l"="30.043,32.267"]
"igul222/speech" ["l"="33.896,32.412"]
"JonathanRaiman/tensorflow-infogan" ["l"="33.836,32.571"]
"openai/imitation" ["l"="25.018,35.893"]
"openai/vime" ["l"="24.981,35.841"]
"Natsu6767/InfoGAN-PyTorch" ["l"="25.04,32.528"]
"buriburisuri/supervised_infogan" ["l"="33.839,32.547"]
"riannevdberg/sylvester-flows" ["l"="23.242,33.942"]
"yburda/iwae" ["l"="25.142,32.716"]
"dpkingma/nips14-ssl" ["l"="25.064,32.748"]
"jmtomczak/vae_vpflows" ["l"="23.208,34.002"]
"ericjang/normalizing-flows-tutorial" ["l"="23.24,33.956"]
"pclucas14/iaf-vae" ["l"="33.915,32.417"]
"casperkaae/parmesan" ["l"="25.12,32.743"]
"casperkaae/LVAE" ["l"="25.132,32.681"]
"jmtomczak/vae_vampprior" ["l"="25.071,32.631"]
"dongjun-Lee/text-classification-models-tf" ["l"="33.713,32.874"]
"dongjun-Lee/transfer-learning-text-tf" ["l"="33.837,32.925"]
"faneshion/MatchZoo" ["l"="31.986,30.034"]
"TobiasLee/Text-Classification" ["l"="31.51,31.532"]
"zackhy/TextClassification" ["l"="31.515,31.578"]
"chenyuntc/PyTorchText" ["l"="32.024,30.001"]
"richliao/textClassifier" ["l"="31.467,31.54"]
"dongjun-Lee/rnn-text-classification-tf" ["l"="33.918,32.95"]
"junyanz/CatPapers" ["l"="33.638,32.587"]
"google/sg2im" ["l"="31.475,34.529"]
"jamesli1618/Obj-GAN" ["l"="33.407,32.58"]
"tobran/DF-GAN" ["l"="33.341,32.66"]
"visioncortex/vtracer" ["l"="32.905,33.121"]
"tomayac/SVGcode" ["l"="15.902,-31.909"]
"preddy5/Im2Vec" ["l"="32.963,33.103"]
"fromtheexchange/image2svg-awesome" ["l"="32.853,33.125"]
"antfu/iroiro" ["l"="14.876,-11.798"]
"BachiLi/diffvg" ["l"="33.062,33.078"]
"visioncortex/visioncortex" ["l"="32.857,33.143"]
"autotrace/autotrace" ["l"="15.896,-31.943"]
"merico-dev/lake" ["l"="25.652,36.66"]
"logancyang/my-cs-degree" ["l"="27.374,29.923"]
"GeorgLegato/Txt2Vectorgraphics" ["l"="34.507,29.257"]
"Picsart-AI-Research/LIVE-Layerwise-Image-Vectorization" ["l"="32.985,33.107"]
"methodofaction/Method-Draw" ["l"="21.947,-33.531"]
"DanielSWolf/rhubarb-lip-sync" ["l"="35.027,31.708"]
"zmister2016/MrDoc" ["l"="-27.205,-42.632"]
"Yqnn/svg-path-editor" ["l"="21.959,-33.584"]
"giventofly/pixelit" ["l"="33.146,33.195"]
"sedthh/pyxelate" ["l"="33.231,33.086"]
"rgab1508/PixelCraft" ["l"="-23.935,32.733"]
"Siilwyn/awesome-pixel-art" ["l"="27.362,-19.451"]
"Chleba/PIXELARTOR" ["l"="33.119,33.235"]
"lospec/pixel-editor" ["l"="-23.935,32.747"]
"KilledByAPixel/ZzSprite" ["l"="33.098,33.243"]
"Deep-Fold/PixelSpace" ["l"="-23.992,32.503"]
"heejkoo/Awesome-Diffusion-Models" ["l"="34.436,28.855"]
"krta2/awesome-nonsan" ["l"="45.008,-16.751"]
"hahnlee/hwp.js" ["l"="45.104,-16.775"]
"SKT-AI/KoGPT2" ["l"="44.483,-15.048"]
"teddylee777/machine-learning" ["l"="44.59,-15.079"]
"songys/AwesomeKorean_Data" ["l"="44.476,-15.059"]
"zzsza/Kaggle-knowhow" ["l"="44.582,-14.996"]
"sesang06/awesome-alternative-military-service" ["l"="44.934,-16.723"]
"jungwoo-ha/WeeklyArxivTalk" ["l"="44.487,-15.102"]
"kakaobrain/kogpt" ["l"="44.501,-15.081"]
"justiceHui/Unknown-To-Wellknown" ["l"="44.995,-16.943"]
"leehosung/awesome-devteam" ["l"="44.89,-16.716"]
"kakaobrain/pororo" ["l"="44.484,-15.075"]
"XHUJOY/CycleGAN-tensorflow" ["l"="33.536,32.615"]
"justinpinkney/toonify" ["l"="33.26,33.001"]
"wonwizard/stylgan2-toonify" ["l"="33.218,33.065"]
"GuoxianSong/AgileGAN" ["l"="33.191,33.017"]
"toxtli/awesome-machine-learning-jupyter-notebooks-for-colab" ["l"="33.017,32.788"]
"andrewekhalel/MLQuestions" ["l"="23.841,30.5"]
"firmai/python-business-analytics" ["l"="24.066,30.456"]
"yassouali/ML_paper_notes" ["l"="29.298,32.733"]
"firmai/business-machine-learning" ["l"="24.023,30.498"]
"firmai/industry-machine-learning" ["l"="23.769,30.639"]
"FinMind/FinMind" ["l"="11.693,-5.121"]
"biplobsd/OneClickRun" ["l"="-37.647,-17.763"]
"googlecolab/colabtools" ["l"="21.386,28.749"]
"microsoft/nlp-recipes" ["l"="29.713,32.593"]
"kurozael/twitter-contest-bot" ["l"="32.89,32.338"]
"raulrene/twitter-contest-js-bot" ["l"="32.858,32.296"]
"buluba89/Yatcobot" ["l"="32.862,32.321"]
"ModusVivendi/twitter-contest" ["l"="32.885,32.316"]
"rhiever/reddit-twitter-bot" ["l"="-4.708,-45.453"]
"joaquinlpereyra/twitterImgBot" ["l"="32.835,32.315"]
"aquadzn/background-removal" ["l"="33.677,33.427"]
"FarjaalAhmad/django_bgRemoverML" ["l"="33.651,33.401"]
"DDemmer1/ai-background-remove" ["l"="33.67,33.392"]
"rorodata/background-removal" ["l"="33.705,33.424"]
"aadityavikram/Background-Removal" ["l"="33.724,33.425"]
"SaoYan/bgsCNN" ["l"="31.143,36.337"]
"CDOTAD/AlphaGAN-Matting" ["l"="33.779,33.332"]
"ghwatson/faststyle" ["l"="33.305,32.41"]
"LDOUBLEV/style_transfer-perceptual_loss" ["l"="33.341,32.427"]
"mrxlz/ImageStyleTransform" ["l"="33.404,32.418"]
"minhnhat93/tf-SNDCGAN" ["l"="33.627,32.676"]
"pfnet-research/chainer-gan-lib" ["l"="34.096,30.336"]
"taki0112/Spectral_Normalization-Tensorflow" ["l"="33.515,32.664"]
"kodalinaveen3/DRAGAN" ["l"="33.847,32.647"]
"nnUyi/SNGAN" ["l"="33.575,32.648"]
"tensorlayer/dcgan" ["l"="33.518,32.525"]
"ProGamerGov/neural-style-pt" ["l"="33.34,32.616"]
"BorisTheBrave/DeBroglie" ["l"="33.957,31.134"]
"selfsame/unity-wave-function-collapse" ["l"="33.95,31.118"]
"keijiro/WfcMaze" ["l"="33.971,31.102"]
"MatveyK/Kazimir" ["l"="33.938,31.151"]
"Scrawk/Hull-Delaunay-Voronoi" ["l"="-10.939,39.531"]
"oddmax/unity-wave-function-collapse-3d" ["l"="33.938,31.098"]
"BorisTheBrave/chiseled-random-paths" ["l"="33.922,31.119"]
"vibertthio/awesome-machine-learning-art" ["l"="1.998,38.581"]
"kosmos/awesome-generative-art" ["l"="32.876,-24.122"]
"ml4a/ml4a-guides" ["l"="33.818,-23.496"]
"aaronpenne/generative_art" ["l"="32.901,-24.114"]
"255BITS/HyperGAN" ["l"="33.726,32.55"]
"plemeri/InSPyReNet" ["l"="29.485,36.349"]
"hkchengrex/XMem" ["l"="31.866,33.313"]
"hkchengrex/CascadePSP" ["l"="31.748,37.08"]
"damo-vilab/composer" ["l"="34.506,29.133"]
"john-rocky/CoreML-Models" ["l"="-48.765,5.319"]
"bloc97/CrossAttentionControl" ["l"="34.435,29.102"]
"gligen/GLIGEN" ["l"="34.538,29.116"]
"TencentARC/T2I-Adapter" ["l"="34.487,29.188"]
"srivatsan-ramesh/Virtual-Makeup" ["l"="33.637,33.069"]
"google/neural-light-transport" ["l"="32.565,33.37"]
"zhhoper/DPR" ["l"="32.584,33.365"]
"WangLiwen1994/DeepRelight" ["l"="32.585,33.387"]
"zhhoper/RI_render_DPR" ["l"="32.619,33.362"]
"senguptaumd/SfSNet" ["l"="34.772,31.632"]
"YingqingHe/Shadow-Removal-via-Generative-Priors" ["l"="32.668,33.399"]
"Chenyu-Yang-2000/EleGANt" ["l"="33.634,33.005"]
"Yutong-Zhou-cv/Awesome-AI-in-Beauty-Industry" ["l"="33.651,33.002"]
"Jian-danai/Decompose-Distill-BeautyGAN" ["l"="33.665,33.008"]
"royorel/StyleSDF" ["l"="34.973,31.739"]
"w86763777/pytorch-gan-metrics" ["l"="33.162,32.735"]
"Sentdex/pygta5" ["l"="29.163,42.846"]
"hamuchiwa/AutoRCCar" ["l"="29.133,42.806"]
"tawnkramer/sdsandbox" ["l"="29.204,42.835"]
"Unity-Technologies/ml-agents" ["l"="-13.462,40.046"]
"harvitronix/reinforcement-learning-car" ["l"="24.885,35.923"]
"aleju/mario-ai" ["l"="24.902,35.821"]
"CodeReclaimers/neat-python" ["l"="24.614,38.364"]
"lexfridman/deeptraffic" ["l"="23.898,30.772"]
"Unity-Technologies/FPSSample" ["l"="-13.245,40.042"]
"uber-research/PyTorch-NEAT" ["l"="24.588,38.39"]
"apchenstu/sofgan" ["l"="33.272,33.036"]
"RenYurui/PIRender" ["l"="35.031,31.606"]
"nijuyr/comixGAN" ["l"="33.413,32.846"]
"pradeeplam/Anime-Sketch-Coloring-with-Swish-Gated-Residual-UNet" ["l"="34.113,30.15"]
"TotallyNotChase/glitch-this" ["l"="32.989,-24.175"]
"sberbank-ai/ru-dalle" ["l"="34.314,28.907"]
"OndrejTexler/Few-Shot-Patch-Based-Training" ["l"="35.144,31.547"]
"securas/SealedBite" ["l"="-23.754,32.395"]
"dribnet/pixray" ["l"="34.187,28.972"]
"Mukosame/Anime2Sketch" ["l"="34.171,30.137"]
"azagaya/laigter" ["l"="-23.917,32.374"]
"znxlwm/pytorch-Conditional-image-to-image-translation" ["l"="33.302,32.764"]
"FilipAndersson245/cartoon-gan" ["l"="33.344,32.873"]
"seasonSH/WarpGAN" ["l"="33.262,32.829"]
"jorge-pessoa/pytorch-msssim" ["l"="33.601,32.89"]
"VainF/pytorch-msssim" ["l"="33.589,32.915"]
"photosynthesis-team/piq" ["l"="35.304,32.295"]
"Code-Bullet/Hill-Climb-Racing-AI" ["l"="33.377,31.619"]
"Code-Bullet/Piano-Tiles" ["l"="33.38,31.631"]
"mjibson/ddd" ["l"="33.598,32.169"]
"herval/deepdream-docker" ["l"="33.574,32.167"]
"graphific/dl-machine" ["l"="33.581,32.184"]
"seanbell/opensurfaces" ["l"="32.728,33.646"]
"seanbell/intrinsic" ["l"="32.755,33.616"]
"seanbell/opensurfaces-segmentation-ui" ["l"="32.708,33.67"]
"bytedance/OMGD" ["l"="33.123,32.856"]
"snap-research/CAT" ["l"="33.087,32.842"]
"SJLeo/DMAD" ["l"="33.06,32.831"]
"HideUnderBush/UI2I_via_StyleGAN2" ["l"="33.118,32.904"]
"ImCharlesY/AdaInt" ["l"="36.248,33.45"]
"HzDmS/gaze_redirection" ["l"="33.154,32.646"]
"zhangqianhui/GazeAnimation" ["l"="33.223,32.661"]
"zhangqianhui/GazeCorrection" ["l"="33.13,32.643"]
"BlueWinters/DeepWarp" ["l"="33.1,32.634"]
"chihfanhsu/gaze_correction" ["l"="33.144,32.631"]
"burness/neural_style_tensorflow" ["l"="33.381,32.355"]
"awentzonline/keras-rtst" ["l"="33.364,32.317"]
"SergeyMorugin/ostagram" ["l"="33.472,32.443"]
"DmitryUlyanov/fast-neural-doodle" ["l"="33.443,32.394"]
"reiinakano/fast-style-transfer-deeplearnjs" ["l"="33.408,32.464"]
"reiinakano/arbitrary-image-stylization-tfjs" ["l"="33.377,32.577"]
"tipsy/bubbly-bg" ["l"="13.319,-34.195"]
"PAIR-code/deeplearnjs" ["l"="28.121,27.569"]
"tomepel/Technical_Book_DL" ["l"="23.355,31.086"]
"googlecreativelab/teachable-machine" ["l"="28.359,-19.365"]
"yining1023/styleTransfer_spell" ["l"="33.38,32.418"]
"csurfer/gitsuggest" ["l"="22.774,4.349"]
"javascript-machine-learning/color-accessibility-neural-network-deeplearnjs" ["l"="33.363,32.375"]
"clintonwoo/hackernews-react-graphql" ["l"="24.26,-26.145"]
"facebook/MemNN" ["l"="27.113,34.332"]
"Lasagne/Lasagne" ["l"="27.112,34.049"]
"kjw0612/awesome-rnn" ["l"="23.334,30.949"]
"harvardnlp/seq2seq-attn" ["l"="27.07,34.332"]
"sherjilozair/char-rnn-tensorflow" ["l"="27.116,34.364"]
"PeterouZh/CIPS-3D" ["l"="33.191,33.06"]
"marcoamonteiro/pi-GAN" ["l"="33.342,43.123"]
"XingangPan/ShadeGAN" ["l"="33.339,43.05"]
"MrTornado24/FENeRF" ["l"="34.977,31.751"]
"gafniguy/4D-Facial-Avatars" ["l"="34.937,31.692"]
"genforce/volumegan" ["l"="35.071,31.853"]
"YudongGuo/AD-NeRF" ["l"="35.028,31.634"]
"CrisHY1995/headnerf" ["l"="34.953,31.703"]
"autonomousvision/giraffe" ["l"="33.327,43.131"]
"MrTornado24/Next3D" ["l"="35.019,31.728"]
"NVlabs/denoising-diffusion-gan" ["l"="34.54,28.944"]
"microsoft/StyleSwin" ["l"="33.205,32.983"]
"autonomousvision/stylegan-t" ["l"="34.522,29.12"]
"self-distilled-stylegan/self-distilled-internet-photos" ["l"="33.148,33.012"]
"Zhendong-Wang/Diffusion-GAN" ["l"="34.57,28.954"]
"facebookresearch/multiface" ["l"="34.93,31.715"]
"apchenstu/TensoRF" ["l"="33.385,43.186"]
"zhengyuf/IMavatar" ["l"="34.926,31.684"]
"genforce/insgen" ["l"="33.059,33.194"]
"jxhuang0508/GenCo" ["l"="33.072,33.178"]
"genforce/higan" ["l"="33.161,32.824"]
"hmmlillian/Gray-Image-Retrieval" ["l"="33.761,32.331"]
"xuzhongyou/Colorization" ["l"="33.734,32.333"]
"ncianeo/Deep-Exemplar-based-Colorization" ["l"="33.72,32.335"]
"IIGROUP/TediGAN" ["l"="33.253,32.874"]
"zyainfal/One-Shot-Face-Swapping-on-Megapixels" ["l"="34.954,31.496"]
"hriddhidey/visage" ["l"="33.646,33.083"]
"masterkapilkumar/Digital-Makeup-Transfer" ["l"="33.623,33.065"]
"KAlO2/PerfectShow" ["l"="33.676,33.081"]
"PKU-IMRE/ChipGAN" ["l"="32.932,33.199"]
"yanyangbaobeiIsEmma-zz/ChinsePaintingStyleTransfer" ["l"="32.898,33.218"]
"aitorzip/PyTorch-CycleGAN" ["l"="33.595,32.816"]
"arnab39/cycleGAN-PyTorch" ["l"="33.684,32.888"]
"mrzhu-cool/pix2pix-pytorch" ["l"="33.665,32.77"]
"togheppi/CycleGAN" ["l"="33.664,32.874"]
"yunjey/mnist-svhn-transfer" ["l"="33.673,32.729"]
"Lornatang/CycleGAN-PyTorch" ["l"="33.684,32.868"]
"alicex2020/Chinese-Landscape-Painting-Dataset" ["l"="32.992,33.157"]
"ychen93/Chinese-Painting-Dataset" ["l"="32.954,33.185"]
"Luxi-Zhao/chinese-landscape-painting-stylization" ["l"="32.968,33.177"]
"lbsswu/Chinese_style_transfer" ["l"="32.953,33.171"]
"Xzzit/ChipGAN-PyTorch1.8-" ["l"="32.981,33.185"]
"paint4poem/paint4poem" ["l"="32.968,33.195"]
"jiamings/wgan" ["l"="33.813,32.607"]
"tohinz/multiple-objects-gan" ["l"="33.42,32.587"]
"woozzu/tagan" ["l"="33.421,32.615"]
"xiaolonw/ss-gan" ["l"="33.702,32.49"]
"SKTBrain/DiscoGAN" ["l"="33.638,32.615"]
"iassael/torch-bnlstm" ["l"="26.923,34.364"]
"nothinglo/Deep-Photo-Enhancer" ["l"="36.139,33.469"]
"woozzu/dong_iccv_2017" ["l"="33.385,32.633"]
"mrlibw/ManiGAN" ["l"="33.384,32.62"]
"allthemusicllc/atm-cli" ["l"="33.514,33.625"]
"allthemusicllc/libatm" ["l"="33.52,33.659"]
"allthemusicllc/tarsplit" ["l"="33.502,33.656"]
"sergree/matchering" ["l"="1.757,37.677"]
"sefibk/KernelGAN" ["l"="35.863,32.307"]
"mintanwei/Cycle-IR" ["l"="33.135,32.732"]
"assafshocher/Resizer" ["l"="35.776,32.325"]
"dong-x16/PortraitNet" ["l"="33.817,33.334"]
"clovaai/ext_portrait_segmentation" ["l"="33.843,33.359"]
"tantara/JejuNet" ["l"="33.854,33.348"]
"nolanliou/mobile-deeplab-v3-plus" ["l"="33.87,33.344"]
"sercant/mobile-segmentation" ["l"="33.899,33.365"]
"hyperconnect/MMNet" ["l"="33.807,33.351"]
"akirasosa/mobile-semantic-segmentation" ["l"="33.848,33.318"]
"HymEric/Segmentation-Series-Chaos" ["l"="33.878,33.36"]
"ecsplendid/rembg-greenscreen" ["l"="33.627,33.44"]
"dennisbappert/u-2-net-portrait" ["l"="33.638,33.493"]
"rosinality/vq-vae-2-pytorch" ["l"="25.007,32.534"]
"mkocabas/EpipolarPose" ["l"="35.938,35.16"]
"sxhxliang/BigGAN-pytorch" ["l"="33.42,32.727"]
"hyk1996/Single-Human-Parsing-LIP" ["l"="34.409,32.357"]
"kevinlin311tw/CDCL-human-part-segmentation" ["l"="34.378,32.385"]
"PeikeLi/Self-Correction-Human-Parsing" ["l"="16.204,-7.065"]
"andrewhou1/Shadow-Mask-Face-Relighting" ["l"="32.553,33.351"]
"majedelhelou/VIDIT" ["l"="32.557,33.392"]
"waps101/AlbedoMM" ["l"="34.822,31.668"]
"zexiangxu/Deep-Relighting" ["l"="32.544,33.364"]
"andrewhou1/GeomConsistentFR" ["l"="32.528,33.347"]
"lattas/AvatarMe" ["l"="34.802,31.691"]
"augmentedperception/total_relighting" ["l"="32.521,33.368"]
"Juyong/FacePSNet" ["l"="34.803,31.642"]
"sicxu/Deep3dPortrait" ["l"="34.846,31.662"]
"APikielny/image-relighting" ["l"="32.544,33.378"]
"USTC-Hackergame/hackergame2020-writeups" ["l"="27.352,29.778"]
"hpcn-uam/Limago" ["l"="-9.892,46.511"]
"Xilinx/xup_vitis_network_example" ["l"="-9.932,46.512"]
"Xilinx/open-nic" ["l"="-9.948,46.509"]
"mubix/solarflare" ["l"="-13.291,-46.305"]
"leehomyc/High-Res-Neural-Inpainting" ["l"="33.63,32.486"]
"yihui-he/GAN-MNIST" ["l"="33.363,32.539"]
"elleryqueenhomels/arbitrary_style_transfer" ["l"="21.933,27.595"]
"gsurma/style_transfer" ["l"="33.293,32.488"]
"jdxyw/generativeart" ["l"="32.908,-24.228"]
"syscolabs/kasaya" ["l"="-24.693,-20.631"]
"VGraupera/1on1-questions" ["l"="27.825,-19.709"]
"plotly/falcon" ["l"="26.333,-25.541"]
"fpereiro/backendlore" ["l"="27.679,-19.857"]
"victorqribeiro/isocity" ["l"="26.178,-25.63"]
"dabreegster/abstreet" ["l"="-9.211,4.788"]
"google/trax" ["l"="30.039,32.448"]
"thewhitetulip/awk-anti-textbook" ["l"="36.951,32.377"]
"hediet/vscode-debug-visualizer" ["l"="26.857,-25.833"]
"marcpaq/b1fipl" ["l"="-6.685,13.608"]
"microsoft/ApplicationInspector" ["l"="25.245,17.804"]
"Kayzaks/HackingNeuralNetworks" ["l"="23.875,30.627"]
"junyanz/light-field-video" ["l"="32.015,43.588"]
"junyanz/VON" ["l"="33.026,43.163"]
"tinghuiz/appearance-flow" ["l"="32.894,43.257"]
"ChenyangLEI/CVPR2020-Polarized-Reflection-Removal-with-Perfect-Alignment" ["l"="33.771,32.257"]
"yrcong/RelTR" ["l"="31.263,34.506"]
"dongheehand/MemoPainter-PyTorch" ["l"="33.749,32.334"]
"SerialLain3170/Colorization" ["l"="34.129,30.157"]
"zhaoyuzhi/Semantic-Colorization-GAN" ["l"="33.757,32.28"]
"chufengxiao/Example-based-Colorization-via-Dense-Encoding-Pyramids" ["l"="33.746,32.312"]
"PDillis/stylegan3-fun" ["l"="33.1,32.944"]
"CasualGANPapers/StyleGANXL-CLIP" ["l"="33.008,32.948"]
"nerdyrodent/lucid-sonic-dreams" ["l"="33.091,32.912"]
"pbaylies/stylegan2-ada" ["l"="33.082,32.904"]
"NotNANtoN/lucid-sonic-dreams" ["l"="33.032,32.949"]
"dvschultz/stylegan3" ["l"="33.104,32.917"]
"Sxela/stylegan3_blending" ["l"="33.146,33.027"]
"JCBrouwer/maua-stylegan2" ["l"="33.126,32.874"]
"crowsonkb/style-transfer-pytorch" ["l"="34.143,28.925"]
"pbaylies/stylegan2" ["l"="33.189,32.893"]
"dvschultz/stylegan2-ada" ["l"="33.111,32.88"]
"crowsonkb/v-diffusion-pytorch" ["l"="34.282,28.973"]
"eps696/stylegan2" ["l"="33.099,32.894"]
"msieg/deep-music-visualizer" ["l"="33.029,32.915"]
"universome/alis" ["l"="33.062,32.968"]
"LeslieZhoa/DCT-NET.Pytorch" ["l"="30.898,44.569"]
"mchong6/SOAT" ["l"="33.205,33.026"]
"jmliu88/HeSer" ["l"="35.02,31.535"]
"Qiulin-W/SAFA" ["l"="35.009,31.608"]
"initml/cleanup.pictures" ["l"="33.27,33.301"]
"antfu/drauu" ["l"="14.722,-11.975"]
"KaliYuga-ai/Pixel-Art-Diffusion" ["l"="34.209,29.018"]
"shonenkov-AI/rudalle-aspect-ratio" ["l"="35.192,31.37"]
"JD-P/simulacra-aesthetic-captions" ["l"="34.296,29.04"]
"altryne/awesome-ai-art-image-synthesis" ["l"="34.284,29.112"]
"dribnet/clipit" ["l"="34.15,28.955"]
"taki0112/StarGAN_v2-Tensorflow" ["l"="33.005,32.737"]
"loicmagne/air-drawing" ["l"="35.917,34.345"]
"vijishmadhavan/Crop-CLIP" ["l"="33.221,33.186"]
"kvfrans/clipdraw" ["l"="33.052,33.125"]
"pschaldenbrand/StyleCLIPDraw" ["l"="33.094,33.119"]
"krychu/wfc" ["l"="34.017,31.089"]
"ikarth/wfc_python" ["l"="34.061,31.125"]
"mewo2/oisin" ["l"="34.112,31.16"]
"robert/wavefunction-collapse" ["l"="34.132,31.141"]
"omerbt/Splice" ["l"="33.068,33.025"]
"omriav/blended-diffusion" ["l"="34.504,28.998"]
"onion-liu/aahq-dataset" ["l"="33.103,33.011"]
"mindslab-ai/hififace" ["l"="34.969,31.499"]
"sapphire497/query-selected-attention" ["l"="33.003,33.133"]
"VinAIResearch/HyperInverter" ["l"="33.052,33.105"]
"InterDigitalInc/FeatureStyleEncoder" ["l"="33.023,33.107"]
"EzioBy/padinv" ["l"="33.041,33.09"]
"BenWirus/ZombieVoters" ["l"="33.304,33.742"]
"jonbruner/ezgan" ["l"="33.994,32.609"]
"ericjang/genadv_tutorial" ["l"="33.88,32.597"]
"awjuliani/dfp" ["l"="34.034,32.597"]
"robertluxemburg/stylegan2encoder" ["l"="33.289,32.882"]
"cs-chan/ArtGAN" ["l"="33.227,32.728"]
"lucasdavid/wikiart" ["l"="33.171,32.704"]
"yael-vinker/CLIPasso" ["l"="33.127,33.072"]
"alexandre01/deepsvg" ["l"="25.638,36.872"]
"jonhare/DifferentiableSketching" ["l"="32.988,33.085"]
"NVlabs/nvdiffrast" ["l"="33.26,43.195"]
"deepmind/arnheim" ["l"="32.948,33.082"]
"lllyasviel/DanbooRegion" ["l"="34.151,30.173"]
"MarkMoHR/virtual_sketching" ["l"="33.986,30.135"]
"joaquinlpereyra/RedditImageGrab" ["l"="32.813,32.304"]
"LoyaltyNZ/alchemy-framework" ["l"="33.448,32.016"]
"pavlovml/match" ["l"="33.463,32.09"]
"lsm/micromono" ["l"="33.425,31.951"]
"bryandlee/DeepStudio" ["l"="33.193,33.148"]
"Sxela/face2comics" ["l"="33.193,33.168"]
"ikarth/wfc_2019f" ["l"="34.094,31.122"]
"bahjat-kawar/ddrm" ["l"="34.603,28.912"]
"cszn/SCUNet" ["l"="35.961,32.362"]
"swz30/Restormer" ["l"="35.953,32.38"]
"csjliang/LDL" ["l"="35.822,32.423"]
"ckkelvinchan/RealBasicVSR" ["l"="35.906,32.377"]
"jiaxi-jiang/FBCNN" ["l"="33.903,32.274"]
"JingyunLiang/RVRT" ["l"="35.952,32.45"]
"csjliang/DASR" ["l"="35.823,32.443"]
"ckkelvinchan/BasicVSR_PlusPlus" ["l"="35.925,32.408"]
"kakaobrain/rq-vae-transformer" ["l"="34.477,28.967"]
"kchapelier/wavefunctioncollapse" ["l"="34.042,31.176"]
"LingDong-/ndwfc" ["l"="34.082,31.165"]
"kchapelier/convchain" ["l"="34.069,31.19"]
"kchapelier/poisson-disk-sampling" ["l"="34.058,31.151"]
"kchapelier/procedural-generation" ["l"="34.007,31.199"]
"kchapelier/cellular-automata-voxel-shader" ["l"="-13.808,25.56"]
"mxgmn/Blog" ["l"="34.058,31.207"]
"HighCWu/anime_biggan_toy" ["l"="-0.232,39.373"]
"elerac/polanalyser" ["l"="32.809,33.479"]
"tkuri/Awesome-Polarization" ["l"="32.823,33.47"]
"ChenyangLEI/awesome-polarization-in-vision" ["l"="32.834,33.454"]
"crisbodnar/text-to-image" ["l"="33.51,32.541"]
"llSourcell/how_to_convert_text_to_images" ["l"="33.491,32.541"]
"prakashpandey9/Text2Image-PyTorch" ["l"="33.48,32.551"]
"davidstap/AttnGAN" ["l"="33.419,32.569"]
"buriburisuri/speech-to-text-wavenet" ["l"="0.681,40.05"]
"MrNothing/AI-Blocks" ["l"="0.755,40.138"]
"terrybroad/network-bending" ["l"="33.151,32.865"]
"maua-maua-maua/maua" ["l"="33.025,32.844"]
"aydao/stylegan2-surgery" ["l"="33.122,32.89"]
"hanhung/Creating-Audio-Reactive-Visuals-With-StyleGAN" ["l"="33.044,32.864"]
"PDillis/stylegan2-fun" ["l"="33.08,32.87"]
"megvii-research/ICCV2019-LearningToPaint" ["l"="33.35,33.079"]
"lllyasviel/PaintingLight" ["l"="34.133,30.173"]
"Huage001/PaintTransformer" ["l"="33.198,33.086"]
"vexilligera/strokenet" ["l"="35.295,30.475"]
"TZYSJTU/Sketch-Generation-with-Drawing-Process-Guided-by-Vector-Flow-and-Grayscale" ["l"="33.613,33.112"]
"MarkMoHR/Awesome-Sketch-Synthesis" ["l"="34.013,30.149"]
"ctmakro/opencv_playground" ["l"="-13.151,27.56"]
"wzmsltw/PaintTransformer" ["l"="33.229,33.132"]
"moscow-technologies/blockchain-voting_2021" ["l"="-11.274,-3.742"]
"google/lecam-gan" ["l"="33.092,33.144"]
"eriklindernoren/NapkinML" ["l"="33.161,32.461"]
"gregdurrett/berkeley-entity" ["l"="25.411,30.924"]
"saiprashanths/dl-setup" ["l"="27.155,34.135"]
"facebookarchive/NAMAS" ["l"="28.364,33.609"]
"ceteri/pytextrank" ["l"="28.462,33.554"]
"deepmind/rc-data" ["l"="27.103,34.315"]
"facebook/NAMAS" ["l"="27.089,34.344"]
"Alex-Fabbri/Multi-News" ["l"="28.307,33.727"]
"InterDigitalInc/HRFAE" ["l"="34.603,33.25"]
"royorel/Lifespan_Age_Transformation_Synthesis" ["l"="34.549,33.258"]
"YotamNitzan/ID-disentanglement" ["l"="33.19,32.941"]
"pavlovai/match" ["l"="33.498,32.158"]
"paucarre/tiefvision" ["l"="32.906,34.141"]
"AKSHAYUBHAT/DeepVideoAnalytics" ["l"="0.805,40.167"]
"dermotte/LIRE" ["l"="32.878,34.222"]
"dsys/match" ["l"="32.818,34.107"]
"beniz/deepdetect" ["l"="34.43,35.017"]
"dlau/mineye" ["l"="32.93,34.156"]
"AKSHAYUBHAT/VisualSearchServer" ["l"="33.016,34.349"]
"dellis23/ispy" ["l"="13.581,24.464"]
"cleargraphinc/match" ["l"="33.504,32.185"]
"lukedeo/keras-acgan" ["l"="33.943,32.579"]
"King-Of-Knights/Keras-ACGAN-CIFAR10" ["l"="34.011,32.565"]
"bobchennan/Wasserstein-GAN-Keras" ["l"="34.006,32.578"]
"erilyth/DCGANs" ["l"="34.053,32.569"]
"taki0112/SPADE-Tensorflow" ["l"="33.408,32.886"]
"Mazhar004/MODNet-BGRemover" ["l"="33.631,33.385"]
"renatoviolin/bg-remove-augment" ["l"="33.609,33.38"]
"Djdefrag/QualityScaler" ["l"="-29.778,-19.021"]
"gordicaleksa/pytorch-neural-style-transfer" ["l"="33.973,28.893"]
"ProGamerGov/neural-dream" ["l"="34.015,28.947"]
"ProGamerGov/Neural-Tools" ["l"="33.334,32.491"]
"carpedm20/BEGAN-pytorch" ["l"="33.752,32.56"]
"sunshineatnoon/Paper-Implementations" ["l"="33.692,32.68"]
"fxia22/PixelDTGAN" ["l"="33.678,32.558"]
"hwalsuklee/tensorflow-fast-style-transfer" ["l"="33.25,32.469"]
"eriklindernoren/PyTorch-Deep-Dream" ["l"="33.9,28.916"]
"jxcodetw/Stylebank" ["l"="33.171,32.49"]
"mehdidc/feed_forward_vqgan_clip" ["l"="34.215,28.985"]
"ouhenio/StyleGAN3-CLIP-notebooks" ["l"="33.001,32.928"]
"edstoica/lucid_stylegan3_datasets_models" ["l"="33.074,32.921"]
"eps696/stargan2" ["l"="34.139,28.944"]
"EndlessSora/DeceiveD" ["l"="33.028,32.891"]
"spro/practical-pytorch" ["l"="30.067,32.568"]
"AYLIEN/gan-intro" ["l"="33.793,32.6"]
"jcjohnson/pytorch-examples" ["l"="33.961,35.55"]
"zhangqianhui/progressive_growing_of_gans_tensorflow" ["l"="33.641,32.797"]
"preritj/progressive_growing_of_GANs" ["l"="33.732,32.85"]
"a312863063/Video-Auto-Wipe" ["l"="33.326,33.097"]
"crcrpar/pytorch.sngan_projection" ["l"="33.597,32.79"]
"pfnet/chainer" ["l"="27.058,34.064"]
"pfnet/PaintsChainer" ["l"="34.167,30.279"]
"jcjohnson/densecap" ["l"="31.566,34.521"]
"hollobit/All-About-the-GAN" ["l"="33.607,32.682"]
"dongb5/GAN-Timeline" ["l"="33.582,32.694"]
"shawnyuen/GANsPaperCollection" ["l"="33.543,32.65"]
"insurgent92/CS231N_17_KOR_SUB" ["l"="44.622,-14.962"]
"sjchoi86/bayes-nn" ["l"="24.051,34.614"]
"DifanLiu/ASSET" ["l"="33.09,32.994"]
"chail/gan-ensembling" ["l"="33.076,32.983"]
"fyu/lsun" ["l"="33.492,32.705"]
"hubert0527/COCO-GAN" ["l"="22.844,-25.144"]
"InterDigitalInc/CompressAI" ["l"="-26.658,14.442"]
"psyrocloud/MS-SSIM_L1_LOSS" ["l"="33.635,32.955"]
"tensorflow/compression" ["l"="-26.657,14.407"]
"NVlabs/PL4NN" ["l"="33.647,32.939"]
"francois-rozet/piqa" ["l"="35.308,32.322"]
"lizhengwei1992/MS_SSIM_pytorch" ["l"="33.625,32.938"]
"pkuxmq/Invertible-Image-Rescaling" ["l"="35.894,32.323"]
"dingkeyan93/DISTS" ["l"="35.261,32.291"]
"aizvorski/video-quality" ["l"="35.322,32.27"]
"Faldict/awesome-GAN" ["l"="33.744,32.809"]
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Tensorflow-2" ["l"="33.562,32.713"]
"giddyyupp/ganilla" ["l"="33.316,32.783"]
"limingcv/Photorealistic-Style-Transfer" ["l"="33.135,32.714"]
"zhen8838/AnimeStylized" ["l"="33.372,32.88"]
"irasin/Pytorch_Style_Swap" ["l"="33.28,32.567"]
"WonwoongCho/GDWCT" ["l"="33.296,32.685"]
"ray075hl/DeepPhotoStyle_pytorch" ["l"="33.207,32.568"]
"FacePerceiver/facer" ["l"="34.102,33.193"]
"FacePerceiver/FaRL" ["l"="34.077,33.175"]
"AlexiaJM/Deep-learning-with-cats" ["l"="33.67,32.659"]
"falconjhc/W-Net" ["l"="33.249,32.305"]
"pcgreat/zi2zi" ["l"="33.368,32.404"]
"ZC119/Handwritten-CycleGAN" ["l"="33.355,32.393"]
"mhy12345/Chinese-Character-Style-Transfer" ["l"="33.395,32.443"]
"MingtaoGuo/Chinese-Character-and-Calligraphic-Image-Processing" ["l"="33.35,32.405"]
"acht7111020/DSMAP" ["l"="33.154,32.756"]
"yaxingwang/SEMIT" ["l"="33.178,32.764"]
"vipermu/ganimation" ["l"="33.749,32.929"]
"zhangzjn/FReeNet" ["l"="34.958,31.556"]
"hhqweasd/LG-ShadowNet" ["l"="32.667,33.456"]
"tsingqguo/efficientderain" ["l"="36.019,32.921"]
"eraserNut/MTMT" ["l"="32.662,33.474"]
"JDAI-CV/lapa-dataset" ["l"="33.974,33.119"]
"tegusi/EAGRNet" ["l"="33.944,33.125"]
"kennyvoo/face-occlusion-generation" ["l"="34.035,33.125"]
"Star-Clouds/FRDA" ["l"="35.006,33.298"]
"jhb86253817/PIPNet" ["l"="34.932,33.231"]
"hanson-young/nniefacelib" ["l"="34.963,33.343"]
"simontomaskarlsson/CycleGAN-Keras" ["l"="33.458,32.684"]
"akanimax/fagan" ["l"="33.662,32.815"]
"gitlimlab/SSGAN-Tensorflow" ["l"="33.808,32.659"]
"hhj1897/face_parsing" ["l"="33.962,33.142"]
"isi-vista/structure_via_consensus" ["l"="33.997,33.132"]
"mjdietzx/SimGAN" ["l"="33.866,32.572"]
"AlexHex7/SimGAN_pytorch" ["l"="33.887,32.569"]
"lkeab/BCNet" ["l"="34.878,35.752"]
"open-mmlab/OpenSelfSup" ["l"="34.495,36.074"]
"naoto0804/pytorch-inpainting-with-partial-conv" ["l"="35.079,30.715"]
"XiaohangZhan/conditional-motion-propagation" ["l"="32.887,36.883"]
"facebookresearch/synsin" ["l"="33.28,43.201"]
"XiaohangZhan/deocclusion-demo" ["l"="33.115,32.919"]
"saic-vul/adaptis" ["l"="31.824,36.922"]
"yl-1993/learn-to-cluster" ["l"="35.228,33.355"]
"jason022085/backup-google-drive" ["l"="33.615,33.609"]
"ChickenBenny/job-platform" ["l"="33.606,33.63"]
"ChickenBenny/Airflow-tutorial" ["l"="33.626,33.642"]
"nicehorse06/se-job" ["l"="11.606,-4.94"]
"yuawn/NTU-Computer-Security" ["l"="-11.643,-45.164"]
"William-Yeh/docker-workshop" ["l"="11.593,-5.48"]
"Xiaoming-Yu/DMIT" ["l"="33.365,32.741"]
"lutianming/cartoonizer" ["l"="33.459,32.962"]
"papulke/face-of-art" ["l"="33.186,32.799"]
"Azmarie/Caricature-Your-Face" ["l"="33.139,32.775"]
"wenqingchu/Semantic-CariGANs" ["l"="33.195,32.784"]
"soubhiksanyal/FLAME_PyTorch" ["l"="34.863,31.703"]
"yiranran/APDrawingGAN2" ["l"="33.373,33.076"]
"yiranran/Unpaired-Portrait-Drawing" ["l"="33.342,33.035"]
"floydhub/imagenet" ["l"="33.201,32.53"]
"Heumi/BEGAN-tensorflow" ["l"="33.772,32.588"]
"artcg/BEGAN" ["l"="33.797,32.566"]
"taey16/pix2pixBEGAN.pytorch" ["l"="33.705,32.755"]
"SherlockLiao/pytorch-beginner" ["l"="31.166,32.83"]
"leehomyc/Photo-Realistic-Super-Resoluton" ["l"="35.817,32.103"]
"twtygqyy/pytorch-SRResNet" ["l"="35.798,32.179"]
"clovaai/dmfont" ["l"="33.242,32.347"]
"clovaai/mxfont" ["l"="33.238,32.366"]
"clovaai/fewshot-font-generation" ["l"="33.229,32.352"]
"yizhiwang96/deepvecfont" ["l"="33.177,32.35"]
"ShusenTang/WriteLikeYou" ["l"="33.217,32.385"]
"tlc121/FsFont" ["l"="33.223,32.367"]
"szagoruyko/neural-style-autograd" ["l"="33.316,32.453"]
"blandocs/Tag2Pix" ["l"="34.1,30.159"]
"orashi/AlacGAN" ["l"="34.097,30.174"]
"Pengxiao-Wang/Style2Paints_V3" ["l"="34.088,30.168"]
"nnUyi/Inception-Score" ["l"="33.479,32.74"]
"tsc2017/Frechet-Inception-Distance" ["l"="33.566,32.831"]
"tsc2017/Inception-Score" ["l"="33.562,32.821"]
"abdulfatir/gan-metrics-pytorch" ["l"="33.475,32.721"]
"taki0112/SphereGAN-Tensorflow" ["l"="33.427,32.703"]
"mbinkowski/MMD-GAN" ["l"="22.931,33.947"]
"zylix666/DeshadowNet" ["l"="32.601,33.46"]
"csjfwang/ST-CGAN" ["l"="32.601,33.446"]
"WHUlwb/stcgan" ["l"="32.613,33.471"]
"stevewongv/InstanceShadowDetection" ["l"="32.651,33.485"]
"stevewongv/SSIS" ["l"="32.648,33.519"]
"xw-hu/CF-Caffe" ["l"="32.603,33.482"]
"sepidehhosseinzadeh/Fast-Shadow-Detection" ["l"="32.625,33.507"]
"kittenish/Image-Shadow-Detection-and-Removal" ["l"="32.607,33.495"]
"zijundeng/R3Net" ["l"="31.948,32.663"]
"carolineec/informative-drawings" ["l"="33.079,33.107"]
"threedle/text2mesh" ["l"="33.571,43.262"]
"MichalGeyer/plug-and-play" ["l"="34.555,29.119"]
"gwang-kim/DiffusionCLIP" ["l"="34.526,28.966"]
"THUDM/CogView2" ["l"="34.384,28.968"]
"FalongShen/styletransfer" ["l"="33.266,32.56"]
"WellyZhang/MetaStyle" ["l"="33.247,32.506"]
"TobiasSunderdiek/cartoon-gan" ["l"="33.318,32.829"]
"zhangcliff/WCT-based-style-transfer" ["l"="33.304,32.51"]
"tensorlayer/adaptive-style-transfer" ["l"="33.235,32.486"]
"quolc/neural-collage" ["l"="33.349,32.824"]
"pfnet-research/chainer-stylegan" ["l"="33.975,30.392"]
"cientgu/Mask_Guided_Portrait_Editing" ["l"="34.643,32.527"]
"skyflynil/stylegan2" ["l"="33.175,32.891"]
"nikhiltiru/stylegan2" ["l"="33.214,32.888"]
"zaidbhat1234/Image2StyleGAN" ["l"="33.219,32.839"]
"spiorf/stylegan-encoder" ["l"="33.198,32.843"]
"pender/stylegan-encoder" ["l"="33.223,32.849"]
"Bartzi/one-model-to-reconstruct-them-all" ["l"="33.191,32.83"]
"LansburyCH/relightable-nr" ["l"="32.484,33.396"]
"stevliu/editnerf" ["l"="33.387,43.155"]
"google/nerfactor" ["l"="33.341,43.237"]
"ZoneLikeWonderland/Neural-Video-Portrait-Relighting-in-Real-time-via-Consistency-Modeling" ["l"="32.549,33.339"]
"ken2576/nelf" ["l"="32.571,33.34"]
"Kai-46/PhySG" ["l"="33.315,43.275"]
"OmerKafri/StyleFusion" ["l"="33.161,32.965"]
"JHL-HUST/IBCLN" ["l"="32.894,33.369"]
"fqnchina/CEILNet" ["l"="32.894,33.395"]
"csqiangwen/Single-Image-Reflection-Removal-Beyond-Linearity" ["l"="32.904,33.38"]
"yangj1e/bdn-refremv" ["l"="32.916,33.38"]
"NVlabs/ReflectNet" ["l"="32.91,33.369"]
"ChenyangLEI/flash-reflection-removal" ["l"="32.862,33.376"]
"wanrenjie/CoRRN" ["l"="32.902,33.357"]
"ChenyangLEI/polarization-reflection-removal" ["l"="32.88,33.391"]
"sg-nm/Operation-wise-attention-network" ["l"="35.981,33.505"]
"liyucs/RAGNet" ["l"="32.89,33.346"]
"buriburisuri/timeseries_gan" ["l"="33.87,32.53"]
"ratschlab/RGAN" ["l"="22.808,35.311"]
"numancelik34/TimeSeries-GAN" ["l"="22.828,35.342"]
"buriburisuri/sugartensor" ["l"="33.847,32.534"]
"gioramponi/GAN_Time_Series" ["l"="22.843,35.329"]
"jeanjerome/semisupervised_timeseries_infogan" ["l"="33.918,32.504"]
"proceduralia/pytorch-GAN-timeseries" ["l"="22.82,35.366"]
"SongDark/timeseries_infogan" ["l"="33.928,32.513"]
"starhou/One-dimensional-GAN" ["l"="33.963,32.507"]
"czs0x55aa/pytorch-chatbot" ["l"="33.161,32.507"]
"LynnHo/HD-CelebA-Cropper" ["l"="33.375,32.775"]
"elvisyjlin/AttGAN-PyTorch" ["l"="33.393,32.78"]
"willylulu/celeba-hq-modified" ["l"="33.202,32.711"]
"bluestyle97/STGAN-pytorch" ["l"="33.396,32.801"]
"facebookresearch/FaderNetworks" ["l"="33.46,32.729"]
"dawei6875797/Face-Aging-with-Identity-Preserved-Conditional-Generative-Adversarial-Networks" ["l"="34.587,33.266"]
"LynnHo/EigenGAN-Tensorflow" ["l"="33.199,32.957"]
"HyelinNAM/Hair-synthesis-using-GAN" ["l"="33.11,33.044"]
"Azmarie/Hairstyle-Transfer" ["l"="33.131,33.025"]
"ZPdesu/II2S" ["l"="33.086,33.057"]
"phreeza/keras-GAN" ["l"="33.979,32.637"]
"wayaai/SimGAN" ["l"="33.9,32.587"]
"Zackory/Keras-MNIST-GAN" ["l"="34.009,32.654"]
"datalogai/recurrentshop" ["l"="31.181,31.592"]
"osh/kerlym" ["l"="24.803,35.837"]
"heuritech/convnets-keras" ["l"="30.99,31.574"]
"farizrahman4u/keras-contrib" ["l"="31.059,31.606"]
"janesjanes/Pytorch-TextureGAN" ["l"="33.631,31.979"]
"Cuiyirui/TextureGAN" ["l"="33.651,31.96"]
"voletiv/self-attention-GAN-pytorch" ["l"="33.709,32.843"]
"simontomaskarlsson/GAN-MRI" ["l"="29.302,36.756"]
"MingwangLin/cyclegan-keras" ["l"="33.412,32.667"]
"pfnet-research/tgan2" ["l"="34.035,32.472"]
"FriedRonaldo/GANs" ["l"="33.59,32.959"]
"FriedRonaldo/tunit" ["l"="33.589,32.946"]
"FriedRonaldo/EditableGAN" ["l"="33.585,32.952"]
"FriedRonaldo/PsyNet" ["l"="33.601,32.955"]
"JWSoh/MZSR" ["l"="35.822,32.305"]
"andreas128/SRFlow" ["l"="35.842,32.351"]
"cszn/USRNet" ["l"="35.881,32.301"]
"clovaai/cutblur" ["l"="35.825,32.316"]
"csxmli2016/ASFFNet" ["l"="35.712,32.391"]
"XHWXD/DBSN" ["l"="36.065,32.328"]
"csmliu/AdaDSR" ["l"="35.845,32.396"]
"swz30/MIRNet" ["l"="35.964,32.341"]
"mit-han-lab/once-for-all" ["l"="28.388,34.373"]
"VITA-Group/GAN-Slimming" ["l"="33.139,32.815"]
"huawei-noah/GAN-pruning" ["l"="28.504,34.493"]
"alpc91/NICE-GAN-pytorch" ["l"="33.301,32.828"]
"Ha0Tang/Guided-I2I-Translation-Papers" ["l"="33.282,32.732"]
"kligvasser/SinGAN" ["l"="33.243,32.781"]
"facebook/fb.resnet.torch" ["l"="34.268,35.084"]
"torch/nn" ["l"="26.922,34.251"]
"mattya/chainer-DCGAN" ["l"="34.129,30.342"]
"carpedm20/awesome-torch" ["l"="26.911,34.308"]
"soumith/imagenet-multiGPU.torch" ["l"="26.892,34.282"]
"chen0040/keras-text-to-image" ["l"="33.482,32.57"]
"mansimov/text2image" ["l"="33.466,32.518"]
"dashayushman/TAC-GAN" ["l"="33.468,32.533"]
"chenhsuanlin/spatial-transformer-GAN" ["l"="26.617,34.474"]
"ryo-abiko/GCNet" ["l"="32.897,33.412"]
"IIGROUP/Multi-Modal-CelebA-HQ-Dataset" ["l"="33.178,32.817"]
"cripac-sjx/SEA-T2F" ["l"="33.209,32.848"]
"wpeebles/G.pt" ["l"="33.059,32.983"]
"xrenaa/StyleSpace-pytorch" ["l"="33.179,32.962"]
"wty-ustc/StyleGAN-Inversion-Baseline" ["l"="33.147,32.948"]
"caffeinism/StyleGAN-pytorch" ["l"="33.3,32.776"]
"GV1028/videogan" ["l"="33.845,32.427"]
"batsa003/videogan" ["l"="33.843,32.414"]
"cvondrick/torch-starter" ["l"="33.824,32.419"]
"bernhard2202/improved-video-gan" ["l"="33.87,32.42"]
"brain-research/long-term-video-prediction-without-supervision" ["l"="33.977,32.426"]
"Ha0Tang/GestureGAN" ["l"="33.298,32.72"]
"Ha0Tang/XingGAN" ["l"="33.29,32.705"]
"Ha0Tang/BiGraphGAN" ["l"="33.286,32.696"]
"Ha0Tang/LGGAN" ["l"="33.265,32.712"]
"Ha0Tang/C2GAN" ["l"="33.28,32.718"]
"Ha0Tang/DAGAN" ["l"="33.266,32.699"]
"kregmi/cross-view-image-synthesis" ["l"="33.235,37.009"]
"vt-vl-lab/Guided-pix2pix" ["l"="33.254,32.73"]
"aimagelab/art2real" ["l"="33.234,32.708"]
"dmerrick520/Learning-from-Simulated-and-Unsupervised-Images-through-Adversarial-Training-SimGAN-PyTorch" ["l"="33.926,32.565"]
"alokwhitewolf/Pytorch-Attention-Guided-CycleGAN" ["l"="33.385,32.74"]
"hyperplane-lab/ACL-GAN" ["l"="33.325,32.765"]
"JunlinHan/DCLGAN" ["l"="35.992,33.566"]
"yagudin/PyTorch-deep-photo-styletransfer" ["l"="33.171,32.56"]
"vacancy/Synchronized-BatchNorm-PyTorch" ["l"="31.632,37.03"]
"wtliao/text2image" ["l"="33.317,32.641"]
"senmaoy/Recurrent-Affine-Transformation-for-Text-to-image-Synthesis" ["l"="33.288,32.642"]
"akanimax/pro_gan_pytorch-examples" ["l"="33.352,32.752"]
"PacktPublishing/Learning-Generative-Adversarial-Networks" ["l"="33.892,32.859"]
"WangLibo1995/GeoSeg" ["l"="20.185,26.937"]
"open-mmlab/mmhuman3d" ["l"="35.776,35.04"]
"Vegetebird/MHFormer" ["l"="35.807,35.026"]
"Jeff-sjtu/res-loglikelihood-regression" ["l"="35.983,35.016"]
"open-mmlab/mmpose" ["l"="35.982,35.09"]
"zczcwh/PoseFormer" ["l"="35.87,35.043"]
"EmilienDupont/wgan-gp" ["l"="33.544,32.666"]
"LynnHo/DCGAN-LSGAN-WGAN-GP-DRAGAN-Pytorch" ["l"="33.546,32.681"]
"Yangyangii/GAN-Tutorial" ["l"="33.49,32.674"]
"chenyuntc/pytorch-GAN" ["l"="33.496,32.583"]
"arturml/pytorch-wgan-gp" ["l"="33.53,32.658"]
"q-zh/absorption" ["l"="32.834,33.377"]
"zdlarr/Location-aware-SIRR" ["l"="32.88,33.36"]
"ChenyangLEI/awesome-reflection-removal" ["l"="32.833,33.393"]
"basilevh/image-outpainting" ["l"="33.54,33.071"]
"dvlab-research/outpainting_srn" ["l"="33.518,33.065"]
"z-x-yang/NS-Outpainting" ["l"="33.314,33.048"]
"idealwhite/tdanet" ["l"="33.282,32.609"]
"idealwhite/VLDeformer" ["l"="33.231,32.597"]
"Ben-Louis/Deep-Image-Analogy-PyTorch" ["l"="33.449,32.504"]
"harveyslash/Deep-Image-Analogy-PyTorch" ["l"="33.435,32.497"]
"martinbenson/deep-photo-styletransfer" ["l"="33.367,32.461"]
"genekogan/stylegan" ["l"="33.241,32.813"]
"sinanatra/DCGAN-Art-Tensorflow" ["l"="33.23,32.811"]
"halcy/stylegan" ["l"="33.21,32.807"]
"VODKA312/IntroToSelf-control" ["l"="31.674,35.131"]
"HYOJINPARK/ExtPortraitSeg" ["l"="33.863,33.37"]
"clovaai/c3_sinet" ["l"="33.89,33.401"]
"YexingWan/Fast-Portrait-Segmentation" ["l"="33.871,33.38"]
"tensorflow/datasets" ["l"="25.647,34.194"]
"tensorflow/addons" ["l"="25.59,34.156"]
"ermongroup/ncsn" ["l"="34.639,28.849"]
"emilwallner/Coloring-greyscale-images-in-Keras" ["l"="33.835,32.266"]
"badarsh2/Virtual-Makeup" ["l"="33.662,33.091"]
"TheMathWizard/Face-Makeup-by-Example" ["l"="33.657,33.068"]
"yxding/RealTimeMakeupApplication" ["l"="33.662,33.076"]
"Siddharth24Khera/Auto_MakeUp_Transfer" ["l"="33.65,33.059"]
"theveloped/ThreadTone" ["l"="33.357,31.1"]
"danielvarga/string-art" ["l"="33.345,31.078"]
"i-make-robots/weaving_algorithm" ["l"="33.381,31.132"]
"halfmonty/StringArtGenerator" ["l"="33.376,31.08"]
"christiansiegel/knitter" ["l"="33.387,31.108"]
"MaloDrougard/knit" ["l"="33.369,31.117"]
"llSourcell/GANS-for-style-transfer" ["l"="30.935,32.948"]
"llSourcell/how_to_generate_video" ["l"="24.546,29.333"]
"crmaximo/VAEGAN" ["l"="33.895,32.611"]
"sugyan/tf-dcgan" ["l"="33.953,32.658"]
"sugyan/face-generator" ["l"="34.019,32.68"]
"ermongroup/SDEdit" ["l"="34.546,28.955"]
"CompVis/brushstroke-parameterized-style-transfer" ["l"="33.135,33.151"]
"crowsonkb/v-diffusion-jax" ["l"="34.183,28.953"]
"mahmoudnafifi/image_relighting" ["l"="32.565,33.405"]
"yazdaniamir38/Depth-guided-Image-Relighting" ["l"="32.545,33.403"]
"pengbo-learn/python-face-relighting" ["l"="32.529,33.329"]
"ligoudaner377/font_translator_gan" ["l"="33.193,32.315"]
"kyxscut/CG-GAN" ["l"="33.214,32.341"]
"IShengFang/TypographyResearchCollection" ["l"="33.256,32.358"]
"lisabug/guided-filter" ["l"="33.9,33.538"]
"tody411/GuidedFilter" ["l"="33.879,33.521"]
"pfchai/GuidedFilter" ["l"="33.891,33.553"]
"ctallec/pyvarinf" ["l"="24.097,34.62"]
"wohlert/semi-supervised-pytorch" ["l"="25.078,32.701"]
"probtorch/probtorch" ["l"="25.405,33.587"]
"One-sixth/ms_ssim_pytorch" ["l"="33.676,32.924"]
"Tandon-A/CycleGAN_ssim" ["l"="33.677,32.939"]
"wuhuikai/DeepGuidedFilter" ["l"="36.191,33.497"]
"aiff22/PyNET" ["l"="36.132,32.215"]
"DreamtaleCore/USI3D" ["l"="32.801,33.605"]
"zhengqili/unsupervised-learning-intrinsic-images" ["l"="32.781,33.603"]
"fqnchina/IntrinsicImage" ["l"="32.786,33.576"]
"zhengqili/CGIntrinsics" ["l"="32.789,33.595"]
"zju3dv/NIID-Net" ["l"="32.815,33.626"]
"tnarihi/direct-intrinsics" ["l"="32.769,33.598"]
"kvanhoey/UnsupervisedIntrinsicDecomposition" ["l"="32.786,33.616"]
"google-research/tensor2robot" ["l"="33.837,32.817"]
"ranahanocka/MeshCNN" ["l"="33.106,43.109"]
"TDAmeritrade/stumpy" ["l"="22.465,36.059"]
"benedekrozemberczki/awesome-decision-tree-papers" ["l"="22.069,38.81"]
"microsoft/tensorwatch" ["l"="34.19,35.667"]
"microsoft/interpret" ["l"="25.623,33.969"]
"Machine-Learning-Tokyo/DL-workshop-series" ["l"="23.899,30.657"]
"huseinzol05/NLP-Models-Tensorflow" ["l"="32.094,30.101"]
"eyaler/avatars4all" ["l"="33.261,33.227"]
"boschresearch/unetgan" ["l"="33.512,32.927"]
"wty-ustc/e2style" ["l"="33.04,33.067"]
"ZPdesu/MindTheGap" ["l"="33.021,33.076"]
"clovaai/AdamP" ["l"="44.357,-15.12"]
"Huage001/AdaAttN" ["l"="33.024,32.583"]
"Kibeom-Hong/Domain-Aware-Style-Transfer" ["l"="33.082,32.598"]
"Seanseattle/StyleSwap" ["l"="35.005,31.515"]
"NVIDIA/waveglow" ["l"="0.513,40.096"]
"jinjintang/BeautyLib" ["l"="33.883,33.055"]
"Ruifeng-Zhou24/AdaMatting" ["l"="33.828,33.308"]
"99991/matting" ["l"="33.815,33.366"]
"MarcoForte/FBA-Matting" ["l"="33.811,33.307"]
"Yaoyi-Li/HOP-Matting" ["l"="33.789,33.299"]
"foamliu/Mobile-Image-Matting" ["l"="33.839,33.376"]
"shinseung428/simGAN_NYU_Hand" ["l"="33.878,32.579"]
"yunjey/dtn-tensorflow" ["l"="33.831,32.499"]
"andrewliao11/CoGAN-tensorflow" ["l"="33.52,32.612"]
"mingyuliutw/CoGAN_PyTorch" ["l"="33.512,32.576"]
"erictzeng/adda" ["l"="29.99,34.963"]
"corenel/pytorch-adda" ["l"="30.005,34.983"]
"duxingren14/DualGAN" ["l"="33.603,32.611"]
"IGLICT/NeRF-Editing" ["l"="32.755,32.7"]
"IGLICT/TM-NET" ["l"="32.779,32.71"]
"IGLICT/StylizedNeRF" ["l"="32.779,32.689"]
"IGLICT/TM-NET-Jittor" ["l"="32.783,32.704"]
"IGLICT/PRS-Net_stamp" ["l"="32.758,32.693"]
"IGLICT/Stylemotion" ["l"="32.769,32.716"]
"IGLICT/PRS-NET-Jittor" ["l"="32.775,32.717"]
"IGLICT/MeshPooling" ["l"="32.77,32.708"]
"IGLICT/PRS-Net" ["l"="32.766,32.703"]
"IGLICT/RisaNET" ["l"="32.775,32.701"]
"IGLICT/DeepFaceVideoEditing" ["l"="32.767,32.694"]
"IGLICT/MeshVAE_neural_editing" ["l"="32.769,32.72"]
"IGLICT/Farthestsampling" ["l"="32.746,32.695"]
"IGLICT/DynamicHumanGeneration_Jittor" ["l"="32.747,32.685"]
"IGLICT/OctField" ["l"="32.761,32.71"]
"IGLICT/MT_DE-Jittor" ["l"="32.728,32.693"]
"layumi/Person-reID_GAN" ["l"="33.057,36.785"]
"PaperWeeklyCode/GAN-discussions" ["l"="33.522,32.647"]
"christiancosgrove/pytorch-sagan" ["l"="33.471,32.675"]
"vijishmadhavan/Light-Up" ["l"="33.296,33.212"]
"bmolab/masked-gan-manifold" ["l"="32.956,32.835"]
"minyoungg/pix2latent" ["l"="32.975,32.816"]
"catlab-team/latentclr" ["l"="32.993,32.835"]
"nperraud/download-celebA-HQ" ["l"="33.15,32.689"]
"cuicaihao/fast_neural_style" ["l"="33.217,32.54"]
"hangong/deshadow" ["l"="32.573,33.523"]
"hangong/deshadow-curve_solution" ["l"="32.557,33.539"]
"jflalonde/shadowDetection" ["l"="32.596,33.526"]
"misop/shadow_removal" ["l"="32.584,33.51"]
"tyui592/Avatar-Net_Pytorch" ["l"="33.242,32.559"]
"zxhuang97/Official-implementation-StyleMixer" ["l"="33.223,32.562"]
"davidbau/ganseeing" ["l"="33.126,32.797"]
"diyiiyiii/Arbitrary-Style-Transfer-via-Multi-Adaptation-Network" ["l"="32.997,32.551"]
"diyiiyiii/MCCNet" ["l"="32.988,32.561"]
"irasin/Structure-emphasized-Multimodal-Style-Transfer" ["l"="33.103,32.591"]
"Charch-630/FGI-Matting" ["l"="33.852,33.272"]
"nolanliou/PeopleSegmentationDemo" ["l"="33.93,33.365"]
"dailystudio/ml" ["l"="33.919,33.388"]
"PeterWang512/GANSketching" ["l"="33.209,32.944"]
"mahmoudnafifi/HistoGAN" ["l"="33.118,32.939"]
"Jungjaewon/Reference_based_Skectch_Image_Colorization" ["l"="33.854,32.309"]
"zhaoyuzhi/VCGAN" ["l"="33.816,32.329"]
"csxmli2016/ASFFNet512" ["l"="35.73,32.515"]
"Ha0Tang/DDLCN" ["l"="33.251,32.69"]
"taki0112/FusionGAN-Tensorflow" ["l"="33.385,32.667"]
"goldkim92/StarGAN-tensorflow" ["l"="33.571,32.575"]
"eveningglow/semi-supervised-CycleGAN" ["l"="33.609,32.784"]
"aleju/cat-generator" ["l"="33.702,32.365"]
"jhayes14/GAN" ["l"="33.708,32.285"]
"aleju/face-generator" ["l"="33.722,32.246"]
"preddy5/multi_implicit_fonts" ["l"="32.93,33.109"]
"KushajveerSingh/Photorealistic-Style-Transfer" ["l"="33.092,32.692"]
"pkuanjie/StyleNAS" ["l"="33.083,32.703"]
"keijiro/VectorFieldExamples" ["l"="-11.059,39.778"]
"keijiro/LaspVfx" ["l"="-11.056,39.789"]
"keijiro/BurstWig" ["l"="-11,39.83"]
"radiatoryang/hedera" ["l"="-13.159,40.346"]
"Code-Bullet/WebsiteTest" ["l"="33.371,31.594"]
"levindabhi/CLIP-Notebooks" ["l"="33.091,32.876"]
"dvschultz/neural-style-tf" ["l"="33.104,32.865"]
"justinpinkney/pix2pixHD" ["l"="33.147,32.971"]
"JarrentWu1031/CCPL" ["l"="32.967,32.569"]
"HalbertCH/IEContraAST" ["l"="33.028,32.568"]
"semchan/UPST-NeRF" ["l"="32.865,32.575"]
"zyxElsa/CAST_pytorch" ["l"="32.997,32.574"]
"neuralchen/awesome_style_transfer" ["l"="32.98,32.579"]
"mchong6/GANsNRoses" ["l"="33.29,33.019"]
"basveeling/wavenet" ["l"="0.629,40.156"]
"znxlwm/pytorch-pix2pix" ["l"="33.656,32.795"]
"taey16/pix2pix.pytorch" ["l"="33.725,32.817"]
"togheppi/pix2pix" ["l"="33.697,32.818"]
"CR-Gjx/SCC" ["l"="32.968,33.156"]
"jcy132/Hneg_SRC" ["l"="32.972,33.144"]
"YadiraF/GAN_Applications" ["l"="33.948,32.716"]
"benbenlijie/style_swap_tensorflow" ["l"="33.373,32.481"]
"zhanghang1989/MSG-Net" ["l"="15.545,-35.988"]
"y0ast/VAE-TensorFlow" ["l"="25.02,32.753"]
"altosaar/vae" ["l"="25.016,32.781"]
"SKTBrain/awesome-starcraftAI" ["l"="24.199,37.535"]
"torrvision/crayon" ["l"="34.236,35.333"]
"bearpaw/clothing-co-parsing" ["l"="34.538,32.341"]
"jinyeying/FogRemoval" ["l"="36.209,33.276"]
"jinwan1994/SG-ShadowNet" ["l"="32.617,33.415"]
"KevinJ-Huang/BMNet" ["l"="32.628,33.403"]
"1991viet/QuickDraw" ["l"="34.066,32.895"]
"1991viet/Very-deep-cnn-pytorch" ["l"="34.146,32.9"]
"1991viet/Very-deep-cnn-tensorflow" ["l"="34.133,32.908"]
"1991viet/Character-level-cnn-tensorflow" ["l"="34.161,32.92"]
"1991viet/Hierarchical-attention-networks-pytorch" ["l"="34.167,32.907"]
"1991viet/Character-level-cnn-pytorch" ["l"="34.141,32.918"]
"kuleshov/tf-wgan" ["l"="33.736,32.641"]
"zhenxuan00/triple-gan" ["l"="33.879,32.716"]
"taki0112/TripleGAN-Tensorflow" ["l"="33.926,32.726"]
"taufikxu/Triple-GAN" ["l"="33.935,32.738"]
"LiqunChen0606/Triangle-GAN" ["l"="33.959,32.734"]
"kimiyoung/ssl_bad_gan" ["l"="23.385,29.555"]
"smlaine2/tempens" ["l"="33.822,36.83"]
"flyingbread-elon/AgileGAN" ["l"="33.142,33.087"]
"open-mmlab/MMGEN-FaceStylor" ["l"="34.815,35.802"]
"bytedance/Hammer" ["l"="32.896,33.166"]
"YingqingHe/interclassgan" ["l"="32.956,33.132"]
"diux-dev/imagenet18" ["l"="34.609,32.649"]
"Pulkit-Khandelwal/Reinforcement-Learning-Notebooks" ["l"="34.588,32.666"]
"ShinyCode/image-outpainting" ["l"="33.749,32.884"]
"tensorflow/adanet" ["l"="25.583,33.899"]
"jhfjhfj1/autokeras" ["l"="25.619,33.813"]
"google-research/exoplanet-ml" ["l"="34.572,32.644"]
"Quoteme/img2string" ["l"="33.399,31.072"]
"midare/string-knitting" ["l"="33.399,31.087"]
"Exception1984/StringArt" ["l"="33.352,31.061"]
"piellardj/image-stylization-threading" ["l"="33.391,31.056"]
"kaspar98/StringArt" ["l"="33.372,31.053"]
"ckmarkoh/neuralart_tensorflow" ["l"="33.459,32.296"]
"log0/neural-style-painting" ["l"="33.427,32.252"]
"ckmarkoh/AcrosticPoem" ["l"="29.022,28.759"]
"paulu/deepfeatinterp" ["l"="33.401,32.685"]
"yingcong/Facelet_Bank" ["l"="33.376,32.694"]
"xcyan/eccv16_attr2img" ["l"="33.454,32.666"]
"sookim813/Reflection_removal_rendering" ["l"="32.946,33.376"]
"thongnguyendev/single_image" ["l"="32.918,33.393"]
"yyhz76/reflectSuppress" ["l"="32.937,33.394"]
"zhangqianhui/Conditional-GAN" ["l"="33.419,32.643"]
"leido/pytorch-prednet" ["l"="33.983,32.381"]
"zcrwind/PredNet_pytorch" ["l"="33.997,32.394"]
"jocicmarko/ultrasound-nerve-segmentation" ["l"="29.115,36.577"]
"XifengGuo/CapsNet-Keras" ["l"="30.999,32.939"]
"maxpumperla/hyperas" ["l"="25.623,33.787"]
"rcmalli/keras-squeezenet" ["l"="30.954,31.717"]
"Chrispresso/SuperMarioBros-AI" ["l"="33.494,31.414"]
"WICWIU/WICWIU" ["l"="-0.132,40.043"]
"Yangyangii/pytorch-practice" ["l"="33.445,32.65"]
"taki0112/UNIT-Tensorflow" ["l"="33.433,32.682"]
"shaoanlu/MUNIT-keras" ["l"="33.451,32.702"]
"gitlimlab/BicycleGAN-Tensorflow" ["l"="33.565,32.962"]
"Justin62628/RIFE_GUI" ["l"="33.816,33.194"]
"cv-rits/CoMoGAN" ["l"="33.059,32.913"]
"Zhangjinso/PISE" ["l"="34.497,32.517"]
"BillyXYB/TransEditor" ["l"="33.06,32.894"]
"genforce/ghfeat" ["l"="33.021,32.934"]
"StanfordVL/robosuite" ["l"="25.372,35.848"]
"stepjam/RLBench" ["l"="25.39,35.841"]
"google-research/ravens" ["l"="25.499,35.823"]
"andyzeng/visual-pushing-grasping" ["l"="31.598,42.365"]
"PKU-MARL/DexterousHands" ["l"="25.492,35.837"]
"SudeepDasari/RoboNet" ["l"="25.469,35.872"]
"araffin/robotics-rl-srl" ["l"="25.339,35.87"]
"vimalabs/VIMA" ["l"="25.527,35.787"]
"vitchyr/rlkit" ["l"="25.152,35.881"]
"NVIDIA-Omniverse/Orbit" ["l"="25.511,35.814"]
"bryandlee/naver-webtoon-data" ["l"="33.095,32.926"]
"InterDigitalInc/latent-transformer" ["l"="33.07,33.136"]
"musyoku/chainer-glow" ["l"="33.694,33.041"]
"sakurayamaki/Generating-makeup-image-with-BeautyGAN-using-web-camra" ["l"="33.689,33.053"]
"yan86471/DMT-implementation" ["l"="33.637,33.056"]
"ztex08010518/Stylizing-3D-Scene" ["l"="32.847,32.611"]
"IGLICT/intrinsicSym-Jittor" ["l"="32.759,32.677"]
"AnonymScholar/SpMT" ["l"="33.661,33.023"]
"diyiiyiii/StyTR-2" ["l"="32.98,32.547"]
"YBZh/EFDM" ["l"="32.865,32.5"]
"Wxl-stars/PytorchStyleFormer" ["l"="32.945,32.53"]
"zeligism/PairedCycleGAN" ["l"="33.681,33.03"]
"d-hacks/BeautyGlow" ["l"="33.725,33.04"]
"georgegu1997/makeup-transfer-public" ["l"="33.647,33.026"]
"TencentYoutuResearch/Adv-Makeup" ["l"="21.608,14.188"]
"GlebSBrykin/SANET" ["l"="32.969,32.592"]
"cyclomon/CLIPstyler" ["l"="32.925,32.589"]
"wzmsltw/AdaAttN" ["l"="33,32.592"]
"nnaisense/conditional-style-transfer" ["l"="33.126,32.562"]
"Aaditya-Singh/SAFIN" ["l"="33.009,32.559"]
"D1noFuzi/cmd_styletransfer" ["l"="32.985,32.601"]
"lslrh/CPSL" ["l"="29.861,34.819"]
"GuoShi28/2StageAlign" ["l"="32.835,32.488"]
"MinghanLi/MDQE_CVPR2023" ["l"="32.799,32.473"]
"togheppi/cDCGAN" ["l"="33.471,32.701"]
"Xiaoming-Yu/SingleGAN" ["l"="33.388,32.707"]
"yhlleo/uaggan" ["l"="33.396,32.718"]
"futscdav/strotss" ["l"="33.222,32.694"]
"VinceMarron/style_transfer" ["l"="33.202,32.61"]
"AaronJny/pets_classifer" ["l"="33.086,32.417"]
"leongatys/DeepTextures" ["l"="33.491,32.299"]
"mohamedkeid/Texture-Synthesis" ["l"="33.484,32.259"]
"huangzh13/StyleGAN2.pytorch" ["l"="33.277,32.801"]
"Lingchen-chen/Dynamic-Hair" ["l"="33.915,33.191"]
"KeyuWu-CS/NeuralHDHair" ["l"="33.954,33.2"]
"papagina/HairNet_orient2D" ["l"="33.887,33.191"]
"papagina/HairNet_DataSetGeneration" ["l"="33.89,33.18"]
"suyuan945/HairNet" ["l"="33.879,33.17"]
"MrPhD/HairNet" ["l"="33.888,33.165"]
"iwanao731/ofxHairModel" ["l"="33.904,33.175"]
"analog-nico/twitter-reply-bot" ["l"="32.838,32.274"]
"Liuhongzhi2018/Image-Extrapolation" ["l"="33.673,33.063"]
"zhenglab/spiralnet" ["l"="33.705,33.071"]
"recong/Boundless-in-Pytorch" ["l"="33.718,33.062"]
"a312863063/Model-Swap-Face" ["l"="33.284,33.114"]
"a312863063/Model-Swap-Face_v2" ["l"="33.26,33.15"]
"neuralchen/ASMAGAN" ["l"="33.693,33.12"]
"AceSix/Knowledge_Transfer" ["l"="33.668,33.119"]
"neuralchen/RainNet" ["l"="33.74,33.124"]
"assafshocher/ResizeRight" ["l"="33.09,32.959"]
"universome/inr-gan" ["l"="33.035,32.971"]
"hubert0527/infinityGAN" ["l"="33.094,32.979"]
"jychoi118/ilvr_adm" ["l"="34.564,28.922"]
"lucidrains/x-clip" ["l"="31.8,34.796"]
"teddykoker/torchsort" ["l"="34.141,35.999"]
"Corea/automatic-portrait-tf" ["l"="33.821,33.375"]
"aromazyl/auto-portrait-matting" ["l"="33.763,33.389"]
"justinpinkney/clip2latent" ["l"="32.922,33.032"]
"EzioBy/glead" ["l"="32.968,33.125"]
"caopulan/GANInverter" ["l"="32.985,33.13"]
"hmshan/MAP-NN" ["l"="33.27,32.226"]
"alyyousuf7/Weaver" ["l"="33.392,31.18"]
"bdring/StringArt" ["l"="33.361,31.144"]
"betterze/StyleAlign" ["l"="33.009,33.004"]
"SSinyu/WGAN-VGG" ["l"="33.258,32.259"]
"SSinyu/RED-CNN" ["l"="33.241,32.244"]
"SSinyu/CycleGAN-CT-Denoising" ["l"="33.258,32.242"]
"taki0112/GDWCT-Tensorflow" ["l"="33.239,32.649"]
"yitong91/StoryGAN" ["l"="33.372,32.504"]
"CrickWu/Clevr-for-StoryGAN" ["l"="33.324,32.481"]
"uvavision/Text2Scene" ["l"="33.355,32.519"]
"basiclab/CPCStoryVisualization-Pytorch" ["l"="33.322,32.469"]
"adymaharana/VLCStoryGan" ["l"="33.278,32.381"]
"eric-xw/AREL" ["l"="33.326,32.295"]
"adymaharana/StoryViz" ["l"="33.229,32.324"]
"kkanshul/finegan" ["l"="33.306,32.873"]
"jwyang/lr-gan.pytorch" ["l"="26.575,34.521"]
"Yuheng-Li/MixNMatch" ["l"="33.342,32.926"]
"NVlabs/edm" ["l"="34.558,28.944"]
"zhujiapeng/resefa" ["l"="33.012,33.047"]
"thevoidname/Generalized-One-shot-GAN-Adaption" ["l"="32.929,33.009"]
"sanghoon/tf-exercise-gan" ["l"="33.858,32.68"]
"GunhoChoi/Kind_PyTorch_Tutorial" ["l"="44.711,-14.873"]
"sjchoi86/dl_tutorials_10weeks" ["l"="44.689,-14.887"]
"bamos/dream-art" ["l"="33.445,32.195"]
"memisevic/artify" ["l"="33.441,32.213"]
"DemetreJou/TeamRocket" ["l"="33.455,32.225"]
"slakh96/no-mans-land" ["l"="33.439,32.227"]
"larspars/neural-style-video" ["l"="33.42,32.199"]
"nowsyn/InstMatt" ["l"="33.891,33.269"]
"DashBarkHuss/100-days-of-code" ["l"="33.292,33.143"]
"abhat222/Data-Science-Tutorials" ["l"="-33.632,-20.344"]
"Kyfafyd/MirrorGAN" ["l"="33.385,32.533"]
"1991viet/character-level-cnn-pytorch" ["l"="34.252,32.931"]
"1991viet/very-deep-cnn-pytorch" ["l"="34.239,32.929"]
"1991viet/Deeplab-pytorch" ["l"="34.225,32.938"]
"1991viet/Scalable-image-search-with-deep-image-representation" ["l"="34.243,32.943"]
"yt4766269/Attribute2Image" ["l"="33.424,32.656"]
"wayaai/GAN-Sandbox" ["l"="33.969,32.572"]
"rickyhan/SimGAN-Captcha" ["l"="-18.696,-29.34"]
"emilwallner/Deep-Learning-From-Scratch" ["l"="33.916,32.171"]
"emilwallner/Deep-Learning-101" ["l"="33.906,32.192"]
"ry85/VAE-GAN" ["l"="34.023,32.542"]
"rohithreddy024/VAE-GAN-Pytorch" ["l"="24.854,32.633"]
"seangal/dcgan_vae_pytorch" ["l"="24.885,32.64"]
"rishabhd786/VAE-GAN-PYTORCH" ["l"="33.997,32.542"]
"yunkezhang/TCVOM-TGM" ["l"="33.866,33.249"]
"edouardelasalles/srvp" ["l"="34.027,32.404"]
"kaanakan/slamp" ["l"="34.074,32.389"]
"tohinz/semantic-object-accuracy-for-generative-text-to-image-synthesis" ["l"="33.399,32.598"]
"saic-mdal/CIPS" ["l"="33.001,32.977"]
"EmilienDupont/neural-function-distributions" ["l"="32.965,32.977"]
"vglsd/ScaleParty" ["l"="32.941,32.986"]
"moono/stylegan-reproduced" ["l"="33.357,32.862"]
"FrancescoSaverioZuppichini/PytorchModuleStorage" ["l"="28.135,32.649"]
"danielkunin/Deeplearning-Visualizations" ["l"="28.148,32.657"]
"prichemond/imperialmathslides" ["l"="28.143,32.659"]
"btgraham/Batchwise-Dropout" ["l"="28.173,32.667"]
"prichemond/ds3" ["l"="28.173,32.662"]
"zhangqianhui/Exemplar-GAN-Eye-Inpainting-Tensorflow" ["l"="33.07,32.627"]
"bdol/exemplar_gans" ["l"="33.053,32.636"]
"Yunbo426/predrnn-pp" ["l"="18.574,28.286"]
"loliverhennigh/Convolutional-LSTM-in-Tensorflow" ["l"="18.567,28.225"]
"carlthome/tensorflow-convlstm-cell" ["l"="18.557,28.242"]
"StevenLiuWen/ano_pred_cvpr2018" ["l"="22.589,35.018"]
"Atcold/pytorch-CortexNet" ["l"="34.03,32.344"]
"hardmaru/cppn-tensorflow" ["l"="30.904,32.071"]
"hardmaru/resnet-cppn-gan-tensorflow" ["l"="33.934,32.473"]
"hardmaru/cppn-gan-vae-cifar-tensorflow" ["l"="33.91,32.481"]
"wookayin/tensorflow-plot" ["l"="34.098,32.65"]
"shaohua0116/SSGAN-Tensorflow" ["l"="34.101,32.628"]
"vfa-tranhv/MobileAILab-HairColor-iOS" ["l"="33.918,33.346"]
"MSiam/TFSegmentation" ["l"="31.705,36.893"]
"ansleliu/LightNet" ["l"="31.689,36.937"]
"Tramac/Lightweight-Segmentation" ["l"="31.794,36.963"]
"wpf535236337/real-time-network" ["l"="31.783,36.954"]
"bonlime/keras-deeplab-v3-plus" ["l"="31.547,36.877"]
"hollance/YOLO-CoreML-MPSNNGraph" ["l"="-48.66,5.405"]
"google-research/xmcgan_image_generation" ["l"="33.32,32.625"]
"dongdongdong666/CPGAN" ["l"="33.38,32.61"]
"huiyegit/T2I_CL" ["l"="33.365,32.642"]
"mxgmn/SynTex" ["l"="33.963,31.229"]
"rmitton/rjm" ["l"="-12.199,26.022"]
"BrianSharpe/GPU-Noise-Lib" ["l"="-12.085,26.247"]
"karimnaaji/3d-quickhull" ["l"="-12.107,26.243"]
"JodiTheTigger/sewing" ["l"="-12.147,26.155"]
"Auburns/FastNoiseSIMD" ["l"="-14.057,25.463"]
"prideout/par" ["l"="-12.249,26.011"]
"317070/Twitch-plays-LSD-neural-net" ["l"="33.631,32.162"]
"Dhar/image-dreamer" ["l"="33.645,32.184"]
"OverStruck/deep-dream-maker" ["l"="33.585,32.206"]
"samim23/DeepDreamMusicVideo" ["l"="33.635,32.21"]
"RoyWheels/stylegan2-ada" ["l"="33.136,32.898"]
"alehander42/pseudo" ["l"="33.428,32.048"]
"Evolving-AI-Lab/fooling" ["l"="25.952,33.291"]
"Evolving-AI-Lab/mfv" ["l"="33.75,32.421"]
"zo7/facegen" ["l"="33.696,32.327"]
"kvmanohar22/img2imgGAN" ["l"="33.599,32.977"]
"gitlimlab/FeatureControlHRL-Tensorflow" ["l"="33.492,33.077"]
"gitlimlab/CycleGAN-Tensorflow" ["l"="33.575,32.994"]
"gitlimlab/DiscoGAN-Tensorflow" ["l"="33.55,33.016"]
"ProGamerGov/Torch-Models" ["l"="33.34,32.454"]
"rodrigobdz/GANGogh" ["l"="33.181,32.661"]
"DmitryUlyanov/AGE" ["l"="33.701,32.512"]
"stormraiser/GAN-weight-norm" ["l"="33.589,32.57"]
"alexis-jacq/Pytorch-Tutorials" ["l"="33.598,32.556"]
"victor-shepardson/alpha-GAN" ["l"="33.745,32.449"]
"kimhc6028/forward-thinking-pytorch" ["l"="33.748,32.466"]
"richzhang/webpage-template" ["l"="33.112,32.973"]
"nerfies/nerfies.github.io" ["l"="33.434,43.226"]
"TengdaHan/TemporalAlignNet" ["l"="31.698,33.78"]
"emilwallner/How-to-learn-Deep-Learning" ["l"="33.867,32.227"]
"emilwallner/Screenshot-to-code" ["l"="13.804,-8.144"]
"emilwallner/Emil-Wallner-LinkedIn-Resume" ["l"="33.882,32.188"]
"komiya-m/MirrorGAN" ["l"="33.403,32.535"]
"qiaott/LeicaGAN" ["l"="33.393,32.591"]
"TAMU-VITA/AutoGAN" ["l"="28.48,34.434"]
"bryandlee/eigengan-pytorch" ["l"="33.118,32.957"]
"zhujiapeng/LowRankGAN" ["l"="33.045,33.029"]
"LynnHo/PA-GAN-Tensorflow" ["l"="33.115,32.995"]
"LDOUBLEV/semi-supervised-GAN" ["l"="23.392,29.537"]
"gitlimlab/Generative-Latent-Optimization-Tensorflow" ["l"="33.912,32.686"]
"tmadl/semisup-learn" ["l"="25.14,32.798"]
"larsmaaloee/auxiliary-deep-generative-models" ["l"="25.103,32.745"]
"saemundsson/semisupervised_vae" ["l"="25.041,32.744"]
"david-gpu/deep-makeover" ["l"="33.768,32.451"]
"aayushbansal/PixelNet" ["l"="31.677,36.773"]
"GuoLanqing/ShadowDiffusion" ["l"="32.569,33.439"]
"tsujuifu/pytorch_ldast" ["l"="32.898,32.579"]
"VITA-Group/INS" ["l"="32.868,32.598"]
"tensorlayer/openpose" ["l"="33.21,32.465"]
"lyndonzheng/F-LSeSim" ["l"="35.964,33.584"]
"guojunq/glsgan" ["l"="33.745,32.512"]
"musyoku/LSGAN" ["l"="33.784,32.503"]
"Element-Research/dpnn" ["l"="26.888,34.366"]
"Shaashwat05/Cartoonify_reality" ["l"="33.484,33.035"]
"yaxingwang/MineGAN" ["l"="33.016,32.967"]
"ChenyangLEI/sfp-wild" ["l"="32.834,33.482"]
"zhongzhuoyao/HCCR-GoogLeNet" ["l"="29.238,34.13"]
"chongyangtao/DeepHCCR" ["l"="29.277,34.126"]
"1991viet/Yolo-pytorch" ["l"="34.217,32.924"]
"1991viet/ASCII-generator" ["l"="34.237,32.91"]
"atilimcetin/guided-filter" ["l"="33.823,33.445"]
"cameronfabbri/cWGANs" ["l"="33.476,32.583"]
"SelfishGene/SFHQ-dataset" ["l"="33.047,33.045"]
"Sundrops/fast-guided-filter" ["l"="33.855,33.483"]
"PRiME-project/PRiMEStereoMatch" ["l"="32.088,43.151"]
"nlamprian/GuidedFilter" ["l"="33.835,33.479"]
"tikroeger/OF_DIS" ["l"="36.162,33.597"]
"timothybrooks/hdr-plus" ["l"="36.173,33.561"]
"Mericam/exposure-fusion" ["l"="36.122,33.567"]
"dbbert/dfn" ["l"="34.072,32.429"]
"titu1994/keras-mobile-colorizer" ["l"="33.836,32.29"]
"lukemelas/Automatic-Image-Colorization" ["l"="33.82,32.3"]
"taey16/DomainTransferNetwork.pytorch" ["l"="33.68,32.69"]
"davrempe/domain-transfer-net" ["l"="33.688,32.696"]
"sagiebenaim/DistanceGAN" ["l"="33.565,32.658"]
"FacePerceiver/LAION-Face" ["l"="34.11,33.175"]
"9310gaurav/ali-pytorch" ["l"="34.098,32.506"]
"fmu2/Wasserstein-BiGAN" ["l"="34.112,32.498"]
"WilliBee/bigan_SRL" ["l"="34.093,32.492"]
"manicman1999/Keras-BiGAN" ["l"="28.181,32.67"]
"heyx3/EasyWFC" ["l"="33.943,31.174"]
"ricardojmendez/LibNoise.Unity" ["l"="-13.491,40.304"]
"Syomus/ProceduralToolkit" ["l"="-13.241,40.199"]
"mxgmn/WaveFunctionCollapse" ["l"="-12.818,26.029"]
"criminalking/face_segmentation" ["l"="33.918,33.138"]
"gnobitab/FuseDream" ["l"="33.062,33.161"]
"paper11667/CLIPstyler" ["l"="33.04,33.155"]
"sadnow/360Diffusion" ["l"="34.203,28.973"]
"cyj407/VQ-I2I" ["l"="35.901,33.605"]
"nsping13/GAN-Steerability-without-optimization" ["l"="32.971,32.933"]
"wojciechz/learning_to_execute" ["l"="26.989,34.28"]
"Russell91/apollo" ["l"="33.561,32.261"]
"skaae/lasagne-draw" ["l"="27.025,34.185"]
"ajtulloch/dnngraph" ["l"="-8.321,12.313"]
"wojzaremba/lstm" ["l"="27.004,34.299"]
"nivwusquorum/tf-adversarial" ["l"="31.717,34.339"]
"auduno/deepdraw" ["l"="32.502,34.829"]
"facebook/fb-caffe-exts" ["l"="26.89,34.187"]
"Russell91/apollocaffe" ["l"="26.796,34.158"]
"IGLICT/DeepFaceDrawing-Jittor" ["l"="32.81,32.723"]
"IGLICT/DeepFaceEditing-Jittor" ["l"="32.754,32.718"]
"franknb/Drawing-to-Face" ["l"="32.811,32.7"]
"c0nn3r/RetinaNet" ["l"="34.523,35.207"]
"face3d0725/FaceExtraction" ["l"="34.066,33.129"]
"Kyubyong/neural_tokenizer" ["l"="33.911,32.519"]
"nivwusquorum/tensorflow-deepq" ["l"="24.832,35.894"]
"Ivaylo-Popov/Theano-Lights" ["l"="27.04,34.179"]
"jazzsaxmafia/show_and_tell.tensorflow" ["l"="31.539,34.48"]
"google/prettytensor" ["l"="27.107,34.226"]
"google/skflow" ["l"="27.14,34.153"]
"yccyenchicheng/InOut" ["l"="32.988,32.998"]
"VITA-Group/AGD" ["l"="33.071,32.784"]
"pavelgonchar/color-independent-style-transfer" ["l"="33.373,32.289"]
"GuoLanqing/ReLLIE" ["l"="32.545,33.459"]
"GuoLanqing/Self-Convolution" ["l"="32.557,33.466"]
"GuoLanqing/Lane-Detection-with-ERFNet" ["l"="32.537,33.472"]
"HalbertCH/DualAST" ["l"="33.015,32.542"]
"wangchi95/CF-Font" ["l"="33.213,32.359"]
"sagiebenaim/OneShotTranslation" ["l"="33.496,32.624"]
"Ha0Tang/AsymmetricGAN" ["l"="33.25,32.714"]
"pillarpond/image-segmenter-android" ["l"="33.948,33.403"]
"taki0112/Tensorflow-DatasetAPI" ["l"="33.436,32.661"]
"taki0112/DCGAN-Tensorflow" ["l"="33.405,32.654"]
"taki0112/pix2pix-Tensorflow" ["l"="33.463,32.656"]
"awjuliani/oreilly-rl-tutorial" ["l"="33.948,32.602"]
"awjuliani/DeepRL-Agents" ["l"="24.945,35.912"]
"awjuliani/Pix2Pix-Film" ["l"="33.977,32.597"]
"ry/tensorflow-resnet" ["l"="34.276,35.062"]
"sjchoi86/advanced-tensorflow" ["l"="44.683,-14.863"]
"isl-org/FreeViewSynthesis" ["l"="32.338,33.487"]
"isl-org/StableViewSynthesis" ["l"="32.35,33.47"]
"bbdamodaran/deepJDOT" ["l"="22.794,33.839"]
"rakhimovv/npbgpp" ["l"="32.344,33.425"]
"lioryariv/idr" ["l"="33.308,43.2"]
"a312863063/SimSwap-train" ["l"="34.957,31.476"]
"zalandoresearch/spatial_gan" ["l"="33.55,31.929"]
"zalandoresearch/psgan" ["l"="33.558,31.954"]
"zalandoresearch/famos" ["l"="33.565,31.97"]
"ShafeenTejani/fast-style-transfer" ["l"="33.225,32.427"]
"maincarry/R-Precision" ["l"="33.385,32.598"]
"hwalsuklee/awesome-deep-vision-web-demo" ["l"="33.127,32.379"]
"hwalsuklee/tensorflow-style-transfer" ["l"="33.177,32.414"]
"cyrildiagne/u2net-http" ["l"="33.692,33.48"]
"bjlkeng/sandbox" ["l"="33.978,32.353"]
"zhangqianhui/Conditional-Gans" ["l"="33.907,32.571"]
"poolio/unrolled_gan" ["l"="33.88,32.552"]
"hamedhemati/TAC-GAN_JeHaYaFa" ["l"="33.445,32.521"]
"SaulZhang/Video_Prediction_ZOO" ["l"="34.039,32.381"]
"JudyYe/CVP" ["l"="34.07,32.364"]
"hudengjunai/Deep-Image-Matting" ["l"="33.823,33.397"]
"google-research/lag" ["l"="33.273,32.746"]
"togheppi/DualGAN" ["l"="33.581,32.584"]
"ProGamerGov/Multiscale-Resolution-Scripts" ["l"="33.3,32.471"]
"ProGamerGov/Neural-Tile" ["l"="33.282,32.466"]
"RameenAbdal/CLIP2StyleGAN" ["l"="32.869,33.041"]
"msracver/Style-Feature-Reshuffle" ["l"="33.29,32.516"]
"TroyZhai/adaptive-style-transfer-pytorch" ["l"="33.309,32.527"]
"danielroich/ID-disentanglement-Pytorch" ["l"="33.163,32.954"]
"saic-violet/bilayer-model" ["l"="34.992,31.562"]
"nkolkin13/NeuralNeighborStyleTransfer" ["l"="34.027,28.895"]
"YangNaruto/FQ-GAN" ["l"="33.019,33.029"]
"ZJULearning/CariFaceParsing" ["l"="33.211,32.783"]
"zhengziqiang/P2C" ["l"="33.219,32.797"]
"PaParaZz1/CariGANs" ["l"="33.173,32.783"]
"moliusimon/frnn" ["l"="33.981,32.412"]
"liuziwei7/voxel-flow" ["l"="-30.043,-18.8"]
"jthsieh/DDPAE-video-prediction" ["l"="34.01,32.41"]
"TUM-LMF/FutureGAN" ["l"="34.009,32.385"]
"vincent-leguen/PhyDNet" ["l"="18.555,28.328"]
"shreyas-bk/U-2-Net-Demo" ["l"="33.662,33.464"]
"ShafeenTejani/style-transfer" ["l"="33.187,32.395"]
"devsisters/multi-speaker-tacotron-tensorflow" ["l"="44.697,-14.839"]
"MingtaoGuo/DCGAN_WGAN_WGAN-GP_LSGAN_SNGAN_RSGAN_BEGAN_ACGAN_PGGAN_TensorFlow" ["l"="33.508,32.681"]
"r0nn13/conditional-dcgan-keras" ["l"="34.11,32.566"]
"sohutv/cachecloud-client" ["l"="-24.823,23.12"]
"sohutv/hotcaffeine" ["l"="-24.827,23.114"]
"VincentStory/StompForAndroid" ["l"="-24.819,23.109"]
"Allenkuzma/langhaiblogs" ["l"="-24.846,23.121"]
"baimingxuan/vue3-admin-design" ["l"="-24.832,23.116"]
"Apricity001/High-Level-Data-Structure" ["l"="-24.795,23.117"]
"gaoyf/pinpoint" ["l"="-24.791,22.982"]
"huochaitiantang/pytorch-fast-matting-portrait" ["l"="33.855,33.398"]
"ofirlevy/FastMattingPortrait" ["l"="33.847,33.385"]
"kongyanye/cwgan-gp" ["l"="33.46,32.56"]
"fmu2/3d_photo_stylization" ["l"="32.825,32.556"]
"roomylee/rnn-text-classification-tf" ["l"="33.974,32.968"]
"iwantooxxoox/Keras-OpenFace" ["l"="35.072,33.621"]
"marload/GANs-TensorFlow2" ["l"="33.5,32.657"]
"ChengBinJin/WGAN-GP-tensorflow" ["l"="29.225,36.823"]
"jesse1029/Fake-Face-Images-Detection-Tensorflow" ["l"="34.76,31.257"]
"wxs/subjective-functions" ["l"="33.599,31.983"]
"ningyu1991/TextureMixer" ["l"="33.567,31.991"]
"anopara/texture-synthesis-nonparametric-sampling" ["l"="33.591,31.964"]
"afrozalm/Patch-Based-Texture-Synthesis" ["l"="33.69,31.776"]
"ryersonvisionlab/two-stream-dyntex-synth" ["l"="33.54,31.987"]
"anopara/patch-based-texture-synthesis" ["l"="33.599,31.934"]
"cameronfabbri/Improved-Wasserstein-GAN" ["l"="33.858,32.591"]
"eps696/stylegan2ada" ["l"="33.08,32.889"]
"tals/derivative-works" ["l"="33.067,32.876"]
"dvschultz/stylegan2-training" ["l"="33.091,32.859"]
"Hephyrius/Stylegan2-Ada-Google-Colab-Starter-Notebook" ["l"="33.024,32.863"]
"l4rz/scaling-up-stylegan2" ["l"="33.003,32.888"]
"dyelax/encore.ai" ["l"="33,32.393"]
"ivan-liljeqvist/ailyrics" ["l"="32.981,32.369"]
"misgod/fast-neural-style-keras" ["l"="33.309,32.346"]
"twitter/torch-autograd" ["l"="26.939,34.298"]
"kaishengtai/torch-ntm" ["l"="26.987,34.313"]
"ibug-group/fpage" ["l"="26.585,-20.728"]
"hhj1897/face_detection" ["l"="33.994,33.155"]
"UdonDa/Reference-Based-Sketch-Image-Colorization" ["l"="33.879,32.29"]
"buriburisuri/ByteNet" ["l"="23.338,31.184"]
"theEricMa/OTAvatar" ["l"="32.723,32.439"]
"Wang-pengfei/SAGM" ["l"="32.754,32.455"]
"shuaizhengliu/Joint-HDRDN" ["l"="32.73,32.452"]
"nerdyrodent/deep-daze" ["l"="33.043,32.901"]
"clvrai/ACGAN-PyTorch" ["l"="33.191,33.375"]
"kimhc6028/acgan-pytorch" ["l"="33.23,33.334"]
"Hydrino/ACGAN_cifar10" ["l"="33.166,33.395"]
"LynnHo/Conditional-GANs-Pytorch" ["l"="33.17,33.411"]
"IGLICT/IBSR_jittor" ["l"="32.748,32.729"]
"Zardinality/TF-deformable-conv" ["l"="34.565,35.124"]
"wookayin/dotfiles" ["l"="28.077,33.703"]
"mohamedkeid/Feed-Forward-Style-Transfer" ["l"="33.282,32.357"]
"robertomest/neural-style-keras" ["l"="33.273,32.396"]
"sercant/android-segmentation-app" ["l"="33.939,33.38"]
"plutoyuxie/toonify-game-character" ["l"="33.179,33.107"]
"MingtaoGuo/Calligraphic-Images-Denoising-by-GAN" ["l"="33.336,32.378"]
"MingtaoGuo/CNN-for-Chinese-Calligraphy-Styles-classification" ["l"="33.325,32.368"]
"SSARCandy/DeepCORAL" ["l"="29.981,35"]
"AAnoosheh/ComboGAN" ["l"="33.759,32.826"]
"JD-P/cloob-latent-diffusion" ["l"="34.261,28.982"]
"cxgincsu/SemanticGuidedHumanMatting" ["l"="33.983,33.29"]
"SHI-Labs/VMFormer" ["l"="34.03,33.303"]
"ChickenBenny/Airflow-scrapying-ETL-tutorial" ["l"="33.617,33.656"]
"ChickenBenny/Airflow-Learning-English-tool" ["l"="33.631,33.666"]
"ChickenBenny/Service-with-Redis-cluster-and-Nginx" ["l"="33.642,33.655"]
"yizhiwang96/deepvecfont-v2" ["l"="33.152,32.331"]
"DmitryUlyanov/online-neural-doodle" ["l"="33.416,32.351"]
"MarcoForte/DeepInteractiveSegmentation" ["l"="31.689,33.285"]
"Microsoft/human-pose-estimation.pytorch" ["l"="36.077,35.139"]
"r-music/chorrrds" ["l"="33.839,33.426"]
"igul222/PixelVAE" ["l"="33.915,32.374"]
"ermongroup/Generalized-PixelVAE" ["l"="33.95,32.333"]
"pbloem/pixel-models" ["l"="33.939,32.347"]
"zhujiapeng/linkgan" ["l"="32.971,33.054"]
"Pendulibrium/ai-visual-storytelling-seq2seq" ["l"="33.324,32.266"]
"justinpinkney/pixel2style2pixel" ["l"="33.132,33.003"]
"IGLICT/DSG-Net" ["l"="32.746,32.707"]
"alokwhitewolf/Class-Activation-Mappings" ["l"="28.565,34.843"]
"clementf2b/FaceT" ["l"="33.71,33.09"]
"StevenShaw1999/RSSA" ["l"="32.993,33.02"]
"bcmi/Awesome-Few-Shot-Image-Generation" ["l"="35.189,32.61"]
"edward3862/LoFGAN-pytorch" ["l"="35.236,32.628"]
"jfsantos/dragan-pytorch" ["l"="33.915,32.659"]
"MingtaoGuo/sngan_projection_TensorFlow" ["l"="36.086,32.694"]
"taki0112/Group_Normalization-Tensorflow" ["l"="33.476,32.63"]
"taki0112/DiscoGAN-Tensorflow" ["l"="33.496,32.643"]
"taki0112/CycleGAN-Tensorflow" ["l"="33.484,32.648"]
"taki0112/StableGAN-Tensorflow" ["l"="33.487,32.638"]
"l4rz/practical-aspects-of-stylegan2-training" ["l"="32.938,32.883"]
"Coac/wave-function-collapse" ["l"="34.113,31.129"]
"MattKleinsmith/portraitseg" ["l"="33.835,33.391"]
"adymaharana/storydalle" ["l"="33.158,32.248"]
"Flash-321/ARLDM" ["l"="33.136,32.226"]
"disestevez/Twitter-Giveaways-Bot" ["l"="32.893,32.37"]
"TobiasPankner/Gleam-giveaway-bot" ["l"="32.854,32.36"]
"lisadunlap/VAE-GAN" ["l"="34.065,32.54"]
"facebookresearch/improved_vrnn" ["l"="34.045,32.42"]
"tfxue/visual-dynamics" ["l"="34.019,32.428"]
"XiYe20/VPTR" ["l"="34.05,32.403"]
"SudeepDasari/visual_foresight" ["l"="25.457,35.854"]
"applied-ai-lab/genesis" ["l"="31.551,34.203"]
"akosiorek/sqair" ["l"="25.859,31.89"]
"elvisyjlin/SpatialAttentionGAN" ["l"="33.324,32.749"]
"elvisyjlin/RelGAN-PyTorch" ["l"="30.046,32.037"]
"Ha0Tang/HandGestureRecognition" ["l"="36.074,34.441"]
"gaelkt/HairNets" ["l"="33.812,33.166"]
"sujit25/Human-hair-detection" ["l"="33.827,33.158"]
"eraserNut/ViSha" ["l"="32.675,33.497"]
"TeeyoHuang/pix2pix-pytorch" ["l"="33.721,32.831"]
"lychenyoko/content-aware-gan-compression" ["l"="33.017,32.817"]
"SJLeo/GCC" ["l"="33.036,32.824"]
"kfiraberman/neural_best_buddies" ["l"="33.107,32.772"]
"TheAILearner/Training-Snake-Game-With-Genetic-Algorithm" ["l"="33.515,31.433"]
"tkim-snu/GLACNet" ["l"="33.318,32.238"]
"zychen423/KE-VIST" ["l"="33.297,32.235"]
"lichengunc/vist_api" ["l"="33.312,32.256"]
"joffery/GC-GAN" ["l"="33.769,32.936"]
"tinghuiz/learn-reflectance" ["l"="32.732,33.607"]
"shi-jian/shapenet-intrinsics" ["l"="32.758,33.587"]
"akanazawa/Intrinsic-Image" ["l"="32.738,33.595"]
"lixx2938/CGIntrinsics" ["l"="32.735,33.619"]
"lixx2938/unsupervised-learning-intrinsic-images" ["l"="32.75,33.603"]
"zhixinshu/NeuralFaceEditing" ["l"="34.803,31.593"]
"davidstutz/grosse2009-intrinsic-images" ["l"="32.754,33.636"]
"JannerM/intrinsics-network" ["l"="32.771,33.619"]
"DefUs3r/Intrinsic-Image-Decomposition" ["l"="32.775,33.631"]
"filhoweuler/SnakeIA" ["l"="33.346,31.288"]
"AnonSubm2021/TransStyleGAN" ["l"="33.029,33.179"]
"Yijunmaverick/MultiTextureSynthesis" ["l"="33.621,31.954"]
"alehander42/pseudo-python" ["l"="33.399,32.016"]
"mrlibw/Lightweight-Manipulation" ["l"="33.337,32.633"]
"Bendzae/WFCVoxelModelGenerator" ["l"="34.1,31.18"]
"thenewboston-developers/Management" ["l"="33.367,33.816"]
"strongwolf/o2f" ["l"="32.773,32.463"]
"Prinsphield/GeneGAN" ["l"="33.371,32.721"]
"Prinsphield/DNA-GAN" ["l"="33.356,32.712"]
"barisgecer/facegan" ["l"="34.75,31.636"]
"zhangqianhui/Sparsely-Grouped-GAN" ["l"="33.353,32.727"]
"kracwarlock/action-recognition-visual-attention" ["l"="32.549,34.789"]
"anopara/multi-resolution-texture-synthesis" ["l"="33.613,31.911"]
"anopara/texturesynthesisnonparametricsampling" ["l"="33.599,31.896"]
"boyw165/tensorflow-colornet" ["l"="33.801,32.254"]
"cameronfabbri/Colorful-Image-Colorization" ["l"="33.813,32.239"]
"itsnikhil/tnb-analysis" ["l"="33.404,33.838"]
"thenewboston-developers/KeyGenerator" ["l"="33.387,33.838"]
"foamliu/Colorful-Image-Colorization" ["l"="33.828,32.202"]
"peterldowns/clickbait-classifier" ["l"="32.928,32.447"]
"rahulkapoor90/This-is-Clickbait" ["l"="32.946,32.428"]
"abhishekkrthakur/clickbaits_revisited" ["l"="32.914,32.424"]
"jakebelew/gated-pixel-cnn" ["l"="33.855,32.443"]
"jzbontar/pixelcnn-pytorch" ["l"="25.012,32.5"]
"rampage644/wavenet" ["l"="33.887,32.438"]
"marcofraccaro/srnn" ["l"="25.152,32.728"]
"wose/Strixel" ["l"="33.409,31.106"]
"Norod/my-colab-experiments" ["l"="33.003,32.87"]
"lukasHoel/stylemesh" ["l"="32.826,32.586"]
"Brummi/derender3d" ["l"="32.485,33.34"]
"TZYSJTU/Im2Oil" ["l"="33.649,33.118"]
"felixgwu/mask_rcnn_pytorch" ["l"="34.419,35.179"]
"koz4k/dni-pytorch" ["l"="27.458,34.361"]
"PrimozGodec/ImageColorization" ["l"="33.809,32.266"]
"xh-liu/CC-FPSE" ["l"="34.608,32.573"]
"nnUyi/PGGAN" ["l"="33.772,32.875"]
"Ha0Tang/Ha0Tang.github.io" ["l"="33.218,32.676"]
"CompVis/content-style-disentangled-ST" ["l"="33.07,32.534"]
"kovibalu/saw_release" ["l"="32.773,33.65"]
"TracelessLe/FaceParsing.PyTorch" ["l"="33.91,33.109"]
"catalina85/wssdcnn" ["l"="33.107,32.727"]
"linchuming/WSSDCNN" ["l"="33.106,32.717"]
"soushirou/stylegan3-encoder" ["l"="33.11,32.836"]
"zcemycl/Pytorch_Outpainting_SRN" ["l"="33.749,33.06"]
"andrewliao11/unrolled-gans" ["l"="33.959,32.545"]
"LMescheder/AdversarialVariationalBayes" ["l"="25.104,32.699"]
"cv-rits/ManiFest" ["l"="32.993,32.907"]
"mu-cai/frequency-domain-image-translation" ["l"="32.975,32.91"]
"sihyun-yu/digan" ["l"="34.693,29.014"]
"tamarott/ASAPNet" ["l"="32.942,32.963"]
"stevenygd/NFGP" ["l"="33.234,43.107"]
"tadangkhoa1999/HairstyleGAN" ["l"="33.118,33.055"]
"liygcheng/PyrResNet" ["l"="32.778,33.587"]
"Yuliang-Zou/tf_videogan" ["l"="26.474,-20.541"]
"liulai/reconet-torch" ["l"="33.147,32.501"]
"changgyhub/reconet" ["l"="33.135,32.51"]
"EmptySamurai/pytorch-reconet" ["l"="33.134,32.495"]
"irsisyphus/reconet" ["l"="33.114,32.497"]
"GYZHikari/semantic-cosegmentation" ["l"="33.729,32.463"]
"ThreeSRR/Chinese-Painting-Generator" ["l"="32.876,33.231"]
"wonderit/indoor-segmentation-android" ["l"="33.939,33.417"]
"Gauravv97/CameraBlur" ["l"="33.966,33.418"]
"gitlimlab/ACGAN-PyTorch" ["l"="33.332,33.231"]
"s-ol/gpWFC" ["l"="34.072,31.098"]
"yjunej/FSFont-pytorch" ["l"="33.195,32.347"]
"mingcv/YTMT-Strategy" ["l"="32.864,33.398"]
"aditya12agd5/pytorch_divcolor" ["l"="33.756,32.225"]
"ghowa/dhd2020" ["l"="33.665,33.417"]
"thenewboston-developers/Discord-Bot" ["l"="33.349,33.822"]
"zhangzc21/ExSinGAN" ["l"="32.88,33.011"]
"ichunyeh/StyleBank" ["l"="33.146,32.479"]
"yjc567/StyleBank" ["l"="33.127,32.472"]
"lamelizard/GraphWaveFunctionCollapse" ["l"="34.129,31.112"]
"YouweiLyu/reflection_separation_with_un-polarized_images" ["l"="32.849,33.47"]
"akshatdave/pandora" ["l"="32.806,33.455"]
"Code-Bullet/Tetris-AI-Javascript" ["l"="33.345,31.591"]
"Code-Bullet/TheBigCB.com" ["l"="33.314,31.566"]
"zhangzc21/PetsGAN" ["l"="32.856,33.011"]
"quq99/hair-dye-android" ["l"="33.928,33.155"]
"daooshee/Typography-with-Decor" ["l"="33.25,32.437"]
"daooshee/TE141K" ["l"="33.266,32.442"]
"tnestmeyer/reflectance-filtering" ["l"="32.77,33.577"]
"dgonzalez-ri/neural-visual-storyteller" ["l"="33.31,32.211"]
"rupeshs/neuralstyler" ["l"="33.4,32.277"]
"6o6o/chainer-fast-neuralstyle" ["l"="33.407,32.295"]
"yanqingan/multiscale-deshadow" ["l"="32.569,33.488"]
"genforce/dynamicd" ["l"="32.926,33.151"]
"majedelhelou/BIGPrior" ["l"="32.525,33.415"]
"dectrfov/NTIRE-2021-Depth-Guided-Image-Any-to-Any-relighting" ["l"="32.529,33.397"]
"widefield2sim/w2s" ["l"="32.541,33.415"]
"imaccormick275/cariGAN" ["l"="33.132,32.761"]
"ethan5437/PR-VIST" ["l"="33.284,32.204"]
"dayu1979/stylegan3encoder" ["l"="33.051,32.809"]
"weitingchen83/NTIRE2021-Depth-Guided-Image-Relighting-MBNet" ["l"="32.514,33.407"]
"majedelhelou/ADEFAN" ["l"="32.506,33.425"]
}