digraph G {
"proycon/pynlpl" -> "proycon/folia"
"proycon/pynlpl" -> "interrogator/corpkit"
"proycon/pynlpl" -> "proycon/clam"
"fighting41love/funNLP" -> "hankcs/HanLP"
"fighting41love/funNLP" -> "Embedding/Chinese-Word-Vectors"
"fighting41love/funNLP" -> "google-research/bert" ["e"=1]
"fighting41love/funNLP" -> "scutan90/DeepLearning-500-questions" ["e"=1]
"fighting41love/funNLP" -> "fxsjy/jieba"
"fighting41love/funNLP" -> "ymcui/Chinese-BERT-wwm"
"fighting41love/funNLP" -> "brightmart/nlp_chinese_corpus"
"fighting41love/funNLP" -> "apachecn/AiLearning" ["e"=1]
"fighting41love/funNLP" -> "chinese-poetry/chinese-poetry" ["e"=1]
"fighting41love/funNLP" -> "NLP-LOVE/ML-NLP" ["e"=1]
"fighting41love/funNLP" -> "d2l-ai/d2l-zh" ["e"=1]
"fighting41love/funNLP" -> "huggingface/transformers" ["e"=1]
"fighting41love/funNLP" -> "kon9chunkit/GitHub-Chinese-Top-Charts" ["e"=1]
"fighting41love/funNLP" -> "imhuay/Algorithm_Interview_Notes-Chinese" ["e"=1]
"fighting41love/funNLP" -> "crownpku/Awesome-Chinese-NLP"
"hankcs/HanLP" -> "fxsjy/jieba"
"hankcs/HanLP" -> "fighting41love/funNLP"
"hankcs/HanLP" -> "Embedding/Chinese-Word-Vectors"
"hankcs/HanLP" -> "looly/hutool" ["e"=1]
"hankcs/HanLP" -> "google-research/bert" ["e"=1]
"hankcs/HanLP" -> "sqshq/piggymetrics" ["e"=1]
"hankcs/HanLP" -> "halo-dev/halo" ["e"=1]
"hankcs/HanLP" -> "ymcui/Chinese-BERT-wwm"
"hankcs/HanLP" -> "brightmart/nlp_chinese_corpus"
"hankcs/HanLP" -> "crownpku/Awesome-Chinese-NLP"
"hankcs/HanLP" -> "NLPchina/ansj_seg"
"hankcs/HanLP" -> "hankcs/pyhanlp"
"hankcs/HanLP" -> "alibaba/arthas" ["e"=1]
"hankcs/HanLP" -> "medcl/elasticsearch-analysis-ik" ["e"=1]
"hankcs/HanLP" -> "HIT-SCIR/ltp"
"msgi/nlp-journey" -> "yongzhuo/nlp_xiaojiang"
"msgi/nlp-journey" -> "zhpmatrix/nlp-competitions-list-review"
"msgi/nlp-journey" -> "songyingxin/NLPer-Interview"
"msgi/nlp-journey" -> "didi/ChineseNLP"
"msgi/nlp-journey" -> "brightmart/albert_zh"
"msgi/nlp-journey" -> "yongzhuo/Keras-TextClassification"
"msgi/nlp-journey" -> "macanv/BERT-BiLSTM-CRF-NER"
"msgi/nlp-journey" -> "BrikerMan/Kashgari"
"msgi/nlp-journey" -> "jiangxinyang227/textClassifier"
"msgi/nlp-journey" -> "InsaneLife/ChineseNLPCorpus"
"msgi/nlp-journey" -> "brightmart/roberta_zh"
"msgi/nlp-journey" -> "zibuyu/research_tao"
"msgi/nlp-journey" -> "huseinzol05/NLP-Models-Tensorflow"
"msgi/nlp-journey" -> "Jiakui/awesome-bert"
"msgi/nlp-journey" -> "FudanNLP/nlp-beginner"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "649453932/Chinese-Text-Classification-Pytorch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "Embedding/Chinese-Word-Vectors"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "yongzhuo/Keras-TextClassification"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "bojone/bert4keras"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "lonePatient/BERT-NER-Pytorch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "brightmart/roberta_zh"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUE"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "DA-southampton/NLP_ability"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "brightmart/albert_zh"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "gaussic/text-classification-cnn-rnn"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUEDatasetSearch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "InsaneLife/ChineseNLPCorpus"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "km1994/nlp_paper_study"
"649453932/Chinese-Text-Classification-Pytorch" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"649453932/Chinese-Text-Classification-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"649453932/Chinese-Text-Classification-Pytorch" -> "Embedding/Chinese-Word-Vectors"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/text_classification" ["e"=1]
"649453932/Chinese-Text-Classification-Pytorch" -> "yongzhuo/Keras-TextClassification"
"649453932/Chinese-Text-Classification-Pytorch" -> "bojone/bert4keras"
"649453932/Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUEDatasetSearch"
"649453932/Chinese-Text-Classification-Pytorch" -> "DA-southampton/NLP_ability"
"649453932/Chinese-Text-Classification-Pytorch" -> "SophonPlus/ChineseNlpCorpus"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/albert_zh"
"649453932/Chinese-Text-Classification-Pytorch" -> "gaussic/text-classification-cnn-rnn"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/nlp_chinese_corpus"
"649453932/Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUE"
"649453932/Chinese-Text-Classification-Pytorch" -> "InsaneLife/ChineseNLPCorpus"
"649453932/Chinese-Text-Classification-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"DA-southampton/Read_Bert_Code" -> "ChineseGLUE/ChineseGLUE"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/TRM_tutorial"
"DA-southampton/Read_Bert_Code" -> "loujie0822/Pre-trained-Models"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/Tech_Aarticle"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/ner"
"DA-southampton/Read_Bert_Code" -> "rsanshierli/EasyBert"
"DA-southampton/Read_Bert_Code" -> "HIT-SCIR/plm-nlp-code"
"DA-southampton/Read_Bert_Code" -> "leerumor/nlp_tutorial"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/NLP_ability"
"DA-southampton/Read_Bert_Code" -> "wmathor/nlp-tutorial"
"DA-southampton/Read_Bert_Code" -> "km1994/nlp_paper_study"
"DA-southampton/Read_Bert_Code" -> "MuQiuJun-AI/bert4pytorch"
"DA-southampton/Read_Bert_Code" -> "TingFree/NLPer-Arsenal"
"DA-southampton/Read_Bert_Code" -> "z814081807/DeepNER"
"DA-southampton/Read_Bert_Code" -> "aespresso/a_journey_into_math_of_ml"
"NLPScott/bert-Chinese-classification-task" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"NLPScott/bert-Chinese-classification-task" -> "ProHiryu/bert-chinese-ner"
"NLPScott/bert-Chinese-classification-task" -> "brightmart/sentiment_analysis_fine_grain"
"NLPScott/bert-Chinese-classification-task" -> "terrifyzhao/bert-utils"
"NLPScott/bert-Chinese-classification-task" -> "Y1ran/NLP-BERT--ChineseVersion"
"NLPScott/bert-Chinese-classification-task" -> "ymcui/Chinese-PreTrained-XLNet"
"NLPScott/bert-Chinese-classification-task" -> "renxingkai/BERT_Chinese_Classification"
"NLPScott/bert-Chinese-classification-task" -> "Jiakui/awesome-bert"
"NLPScott/bert-Chinese-classification-task" -> "brightmart/bert_language_understanding"
"NLPScott/bert-Chinese-classification-task" -> "kyzhouhzau/BERT-NER"
"NLPScott/bert-Chinese-classification-task" -> "brightmart/roberta_zh"
"NLPScott/bert-Chinese-classification-task" -> "bojone/bert_in_keras"
"NLPScott/bert-Chinese-classification-task" -> "zhpmatrix/bert-sequence-tagging"
"NLPScott/bert-Chinese-classification-task" -> "liyibo/text-classification-demos"
"NLPScott/bert-Chinese-classification-task" -> "SunYanCN/BERT-chinese-text-classification-and-deployment"
"jasonwei20/eda_nlp" -> "zhanlaoban/EDA_NLP_for_Chinese"
"jasonwei20/eda_nlp" -> "makcedward/nlpaug" ["e"=1]
"jasonwei20/eda_nlp" -> "google-research/uda"
"jasonwei20/eda_nlp" -> "princeton-nlp/SimCSE"
"jasonwei20/eda_nlp" -> "QData/TextAttack" ["e"=1]
"jasonwei20/eda_nlp" -> "namisan/mt-dnn" ["e"=1]
"jasonwei20/eda_nlp" -> "brightmart/roberta_zh"
"jasonwei20/eda_nlp" -> "styfeng/DataAug4NLP" ["e"=1]
"jasonwei20/eda_nlp" -> "brightmart/albert_zh"
"jasonwei20/eda_nlp" -> "ZhuiyiTechnology/pretrained-models"
"jasonwei20/eda_nlp" -> "pfnet-research/contextual_augmentation"
"jasonwei20/eda_nlp" -> "yongzhuo/nlp_xiaojiang"
"jasonwei20/eda_nlp" -> "Tencent/NeuralNLP-NeuralClassifier"
"jasonwei20/eda_nlp" -> "huawei-noah/Pretrained-Language-Model"
"jasonwei20/eda_nlp" -> "dbiir/UER-py"
"kk7nc/Text_Classification" -> "brightmart/text_classification" ["e"=1]
"kk7nc/Text_Classification" -> "yongzhuo/Keras-TextClassification"
"kk7nc/Text_Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"kk7nc/Text_Classification" -> "ShawnyXiao/TextClassification-Keras" ["e"=1]
"kk7nc/Text_Classification" -> "Separius/awesome-sentence-embedding" ["e"=1]
"kk7nc/Text_Classification" -> "TobiasLee/Text-Classification" ["e"=1]
"kk7nc/Text_Classification" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"kk7nc/Text_Classification" -> "richliao/textClassifier" ["e"=1]
"kk7nc/Text_Classification" -> "zhpmatrix/nlp-competitions-list-review"
"kk7nc/Text_Classification" -> "huseinzol05/NLP-Models-Tensorflow"
"kk7nc/Text_Classification" -> "zibuyu/research_tao"
"kk7nc/Text_Classification" -> "castorini/hedwig" ["e"=1]
"kk7nc/Text_Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"kk7nc/Text_Classification" -> "kaushaltrivedi/fast-bert" ["e"=1]
"kk7nc/Text_Classification" -> "BrikerMan/Kashgari"
"nltk/nltk_data" -> "nltk/nltk_book" ["e"=1]
"nltk/nltk_data" -> "explosion/spacy-models" ["e"=1]
"nltk/nltk_data" -> "zlsdu/Word-Embedding"
"nltk/nltk_data" -> "nltk/nltk_contrib" ["e"=1]
"nltk/nltk_data" -> "zhanlaoban/EDA_NLP_for_Chinese"
"nltk/nltk_data" -> "goto456/stopwords"
"nltk/nltk_data" -> "nltk/nltk" ["e"=1]
"nltk/nltk_data" -> "nltk/nltk.github.com" ["e"=1]
"nltk/nltk_data" -> "ZhuiyiTechnology/simbert"
"nltk/nltk_data" -> "Embedding/Chinese-Word-Vectors"
"nltk/nltk_data" -> "luopeixiang/named_entity_recognition"
"nltk/nltk_data" -> "ymcui/Chinese-BERT-wwm"
"nltk/nltk_data" -> "CLUEbenchmark/CLUEDatasetSearch"
"nltk/nltk_data" -> "yongzhuo/Keras-TextClassification"
"nltk/nltk_data" -> "lonePatient/BERT-NER-Pytorch"
"Franck-Dernoncourt/NeuroNER" -> "glample/tagger"
"Franck-Dernoncourt/NeuroNER" -> "guillaumegenthial/sequence_tagging"
"Franck-Dernoncourt/NeuroNER" -> "monikkinom/ner-lstm"
"Franck-Dernoncourt/NeuroNER" -> "Hironsan/anago"
"Franck-Dernoncourt/NeuroNER" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"Franck-Dernoncourt/NeuroNER" -> "zjy-ucas/ChineseNER"
"Franck-Dernoncourt/NeuroNER" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"Franck-Dernoncourt/NeuroNER" -> "guillaumegenthial/tf_ner"
"Franck-Dernoncourt/NeuroNER" -> "kyzhouhzau/BERT-NER"
"Franck-Dernoncourt/NeuroNER" -> "jiesutd/NCRFpp"
"Franck-Dernoncourt/NeuroNER" -> "shiyybua/NER"
"Franck-Dernoncourt/NeuroNER" -> "allenai/bilm-tf" ["e"=1]
"Franck-Dernoncourt/NeuroNER" -> "clab/stack-lstm-ner"
"Franck-Dernoncourt/NeuroNER" -> "nlplab/brat"
"Franck-Dernoncourt/NeuroNER" -> "macanv/BERT-BiLSTM-CRF-NER"
"bojone/bert4keras" -> "ymcui/Chinese-BERT-wwm"
"bojone/bert4keras" -> "CyberZHG/keras-bert"
"bojone/bert4keras" -> "brightmart/albert_zh"
"bojone/bert4keras" -> "CLUEbenchmark/CLUE"
"bojone/bert4keras" -> "brightmart/roberta_zh"
"bojone/bert4keras" -> "macanv/BERT-BiLSTM-CRF-NER"
"bojone/bert4keras" -> "loujie0822/DeepIE"
"bojone/bert4keras" -> "brightmart/nlp_chinese_corpus"
"bojone/bert4keras" -> "Embedding/Chinese-Word-Vectors"
"bojone/bert4keras" -> "huawei-noah/Pretrained-Language-Model"
"bojone/bert4keras" -> "dbiir/UER-py"
"bojone/bert4keras" -> "shibing624/pycorrector"
"bojone/bert4keras" -> "ZhuiyiTechnology/pretrained-models"
"bojone/bert4keras" -> "CLUEbenchmark/CLUEDatasetSearch"
"bojone/bert4keras" -> "BrikerMan/Kashgari"
"loujie0822/DeepIE" -> "lonePatient/BERT-NER-Pytorch"
"loujie0822/DeepIE" -> "LeeSureman/Flat-Lattice-Transformer"
"loujie0822/DeepIE" -> "z814081807/DeepNER"
"loujie0822/DeepIE" -> "ShannonAI/mrc-for-flat-nested-ner"
"loujie0822/DeepIE" -> "weizhepei/CasRel"
"loujie0822/DeepIE" -> "jiesutd/LatticeLSTM"
"loujie0822/DeepIE" -> "bojone/bert4keras"
"loujie0822/DeepIE" -> "GanjinZero/awesome_Chinese_medical_NLP"
"loujie0822/DeepIE" -> "thunlp/OpenNRE"
"loujie0822/DeepIE" -> "yuanxiaosc/Entity-Relation-Extraction"
"loujie0822/DeepIE" -> "CLUEbenchmark/CLUENER2020"
"loujie0822/DeepIE" -> "km1994/nlp_paper_study"
"loujie0822/DeepIE" -> "dbiir/UER-py"
"loujie0822/DeepIE" -> "brightmart/albert_zh"
"loujie0822/DeepIE" -> "princeton-nlp/PURE"
"macanv/BERT-BiLSTM-CRF-NER" -> "ymcui/Chinese-BERT-wwm"
"macanv/BERT-BiLSTM-CRF-NER" -> "Determined22/zh-NER-TF"
"macanv/BERT-BiLSTM-CRF-NER" -> "brightmart/albert_zh"
"macanv/BERT-BiLSTM-CRF-NER" -> "hanxiao/bert-as-service" ["e"=1]
"macanv/BERT-BiLSTM-CRF-NER" -> "zjy-ucas/ChineseNER"
"macanv/BERT-BiLSTM-CRF-NER" -> "kyzhouhzau/BERT-NER"
"macanv/BERT-BiLSTM-CRF-NER" -> "crownpku/Information-Extraction-Chinese"
"macanv/BERT-BiLSTM-CRF-NER" -> "Embedding/Chinese-Word-Vectors"
"macanv/BERT-BiLSTM-CRF-NER" -> "bojone/bert4keras"
"macanv/BERT-BiLSTM-CRF-NER" -> "thunlp/OpenNRE"
"macanv/BERT-BiLSTM-CRF-NER" -> "jiesutd/LatticeLSTM"
"macanv/BERT-BiLSTM-CRF-NER" -> "brightmart/roberta_zh"
"macanv/BERT-BiLSTM-CRF-NER" -> "brightmart/nlp_chinese_corpus"
"macanv/BERT-BiLSTM-CRF-NER" -> "BrikerMan/Kashgari"
"macanv/BERT-BiLSTM-CRF-NER" -> "lonePatient/BERT-NER-Pytorch"
"brightmart/nlp_chinese_corpus" -> "Embedding/Chinese-Word-Vectors"
"brightmart/nlp_chinese_corpus" -> "ymcui/Chinese-BERT-wwm"
"brightmart/nlp_chinese_corpus" -> "SophonPlus/ChineseNlpCorpus"
"brightmart/nlp_chinese_corpus" -> "crownpku/Awesome-Chinese-NLP"
"brightmart/nlp_chinese_corpus" -> "brightmart/albert_zh"
"brightmart/nlp_chinese_corpus" -> "CLUEbenchmark/CLUE"
"brightmart/nlp_chinese_corpus" -> "InsaneLife/ChineseNLPCorpus"
"brightmart/nlp_chinese_corpus" -> "Morizeyao/GPT2-Chinese"
"brightmart/nlp_chinese_corpus" -> "brightmart/text_classification" ["e"=1]
"brightmart/nlp_chinese_corpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/nlp_chinese_corpus" -> "hanxiao/bert-as-service" ["e"=1]
"brightmart/nlp_chinese_corpus" -> "brightmart/roberta_zh"
"brightmart/nlp_chinese_corpus" -> "bojone/bert4keras"
"brightmart/nlp_chinese_corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"brightmart/nlp_chinese_corpus" -> "shibing624/pycorrector"
"goto456/stopwords" -> "Embedding/Chinese-Word-Vectors"
"goto456/stopwords" -> "ymcui/Chinese-BERT-wwm"
"goto456/stopwords" -> "SophonPlus/ChineseNlpCorpus"
"goto456/stopwords" -> "brightmart/nlp_chinese_corpus"
"goto456/stopwords" -> "brightmart/albert_zh"
"goto456/stopwords" -> "CLUEbenchmark/CLUEDatasetSearch"
"goto456/stopwords" -> "InsaneLife/ChineseNLPCorpus"
"goto456/stopwords" -> "bojone/bert4keras"
"goto456/stopwords" -> "lancopku/pkuseg-python"
"goto456/stopwords" -> "brightmart/roberta_zh"
"goto456/stopwords" -> "macanv/BERT-BiLSTM-CRF-NER"
"goto456/stopwords" -> "CLUEbenchmark/CLUE"
"goto456/stopwords" -> "shibing624/pycorrector"
"goto456/stopwords" -> "brightmart/text_classification" ["e"=1]
"goto456/stopwords" -> "crownpku/Awesome-Chinese-NLP"
"PaddlePaddle/PaddleNLP" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/ERNIE"
"PaddlePaddle/PaddleNLP" -> "bojone/bert4keras"
"PaddlePaddle/PaddleNLP" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/PaddleNLP" -> "baidu/lac"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/Paddle" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "Embedding/Chinese-Word-Vectors"
"PaddlePaddle/PaddleNLP" -> "brightmart/nlp_chinese_corpus"
"PaddlePaddle/PaddleNLP" -> "shibing624/pycorrector"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/PaddleHub" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"PaddlePaddle/PaddleNLP" -> "km1994/nlp_paper_study"
"PaddlePaddle/PaddleNLP" -> "doccano/doccano"
"PaddlePaddle/PaddleNLP" -> "THUDM/ChatGLM-6B" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "loujie0822/DeepIE"
"baidu/lac" -> "baidu/AnyQ"
"baidu/lac" -> "baidu/Senta"
"baidu/lac" -> "baidu/DDParser"
"baidu/lac" -> "ymcui/Chinese-BERT-wwm"
"baidu/lac" -> "HIT-SCIR/ltp"
"baidu/lac" -> "CLUEbenchmark/CLUE"
"baidu/lac" -> "baidu/Familia"
"baidu/lac" -> "PaddlePaddle/ERNIE"
"baidu/lac" -> "shibing624/pycorrector"
"baidu/lac" -> "Embedding/Chinese-Word-Vectors"
"baidu/lac" -> "lancopku/pkuseg-python"
"baidu/lac" -> "brightmart/nlp_chinese_corpus"
"baidu/lac" -> "PaddlePaddle/PaddleNLP"
"baidu/lac" -> "InsaneLife/ChineseNLPCorpus"
"baidu/lac" -> "bojone/bert4keras"
"ChineseGLUE/ChineseGLUE" -> "CLUEbenchmark/CLUE"
"ChineseGLUE/ChineseGLUE" -> "brightmart/albert_zh"
"ChineseGLUE/ChineseGLUE" -> "brightmart/roberta_zh"
"ChineseGLUE/ChineseGLUE" -> "ymcui/Chinese-BERT-wwm"
"ChineseGLUE/ChineseGLUE" -> "ymcui/Chinese-ELECTRA"
"ChineseGLUE/ChineseGLUE" -> "CLUEbenchmark/CLUEPretrainedModels"
"ChineseGLUE/ChineseGLUE" -> "brightmart/nlp_chinese_corpus"
"ChineseGLUE/ChineseGLUE" -> "huawei-noah/Pretrained-Language-Model"
"ChineseGLUE/ChineseGLUE" -> "InsaneLife/ChineseNLPCorpus"
"ChineseGLUE/ChineseGLUE" -> "CyberZHG/keras-bert"
"ChineseGLUE/ChineseGLUE" -> "CLUEbenchmark/CLUENER2020"
"ChineseGLUE/ChineseGLUE" -> "loujie0822/DeepIE"
"ChineseGLUE/ChineseGLUE" -> "bojone/bert4keras"
"ChineseGLUE/ChineseGLUE" -> "terrifyzhao/bert-utils"
"ChineseGLUE/ChineseGLUE" -> "ZhuiyiTechnology/simbert"
"Babelscape/rebel" -> "Babelscape/crocodile"
"Babelscape/rebel" -> "SapienzaNLP/extend"
"Babelscape/rebel" -> "Coopercoppers/PFN"
"Babelscape/rebel" -> "DianboWork/SPN4RE"
"Babelscape/rebel" -> "Pandora-Intelligence/crosslingual-coreference" ["e"=1]
"Babelscape/rebel" -> "thunlp/PL-Marker"
"Babelscape/rebel" -> "princeton-nlp/PURE"
"Babelscape/rebel" -> "lavis-nlp/spert"
"Babelscape/rebel" -> "epfl-dlab/GenIE"
"Babelscape/rebel" -> "thunlp/DocRED" ["e"=1]
"Babelscape/rebel" -> "LorrinWWW/two-are-better-than-one"
"Babelscape/rebel" -> "plkmo/BERT-Relation-Extraction" ["e"=1]
"Babelscape/rebel" -> "michiyasunaga/LinkBERT" ["e"=1]
"BYVoid/OpenCC" -> "fxsjy/jieba"
"BYVoid/OpenCC" -> "mozillazg/python-pinyin"
"BYVoid/OpenCC" -> "brightmart/nlp_chinese_corpus"
"BYVoid/OpenCC" -> "rime/home" ["e"=1]
"BYVoid/OpenCC" -> "Embedding/Chinese-Word-Vectors"
"BYVoid/OpenCC" -> "adobe-fonts/source-han-sans" ["e"=1]
"BYVoid/OpenCC" -> "rime/librime" ["e"=1]
"BYVoid/OpenCC" -> "osfans/trime" ["e"=1]
"BYVoid/OpenCC" -> "hankcs/HanLP"
"BYVoid/OpenCC" -> "HIT-SCIR/ltp"
"BYVoid/OpenCC" -> "isnowfy/snownlp"
"BYVoid/OpenCC" -> "ymcui/Chinese-BERT-wwm"
"BYVoid/OpenCC" -> "adobe-fonts/source-han-serif" ["e"=1]
"BYVoid/OpenCC" -> "studyzy/imewlconverter" ["e"=1]
"BYVoid/OpenCC" -> "yichen0831/opencc-python" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "chenghuige/wenzheng"
"AIChallenger/AI_Challenger_2018" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"AIChallenger/AI_Challenger_2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"AIChallenger/AI_Challenger_2018" -> "brightmart/sentiment_analysis_fine_grain"
"AIChallenger/AI_Challenger_2018" -> "zengbin93/jddc_solution_4th" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "pengshuang/AI-Comp"
"AIChallenger/AI_Challenger_2018" -> "chenyuntc/PyTorchText"
"AIChallenger/AI_Challenger_2018" -> "yilirin/BDCI_Car_2018"
"AIChallenger/AI_Challenger_2018" -> "PaddlePaddle/LARK"
"AIChallenger/AI_Challenger_2018" -> "ymcui/Chinese-PreTrained-XLNet"
"AIChallenger/AI_Challenger_2018" -> "NLPScott/bert-Chinese-classification-task"
"AIChallenger/AI_Challenger_2018" -> "xueyouluo/fsauor2018"
"AIChallenger/AI_Challenger_2018" -> "baidu/DuReader" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "HouJP/kaggle-quora-question-pairs" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"thunlp/OpenNRE" -> "thunlp/NREPapers" ["e"=1]
"thunlp/OpenNRE" -> "crownpku/Information-Extraction-Chinese"
"thunlp/OpenNRE" -> "macanv/BERT-BiLSTM-CRF-NER"
"thunlp/OpenNRE" -> "loujie0822/DeepIE"
"thunlp/OpenNRE" -> "thunlp/OpenKE" ["e"=1]
"thunlp/OpenNRE" -> "qq547276542/Agriculture_KnowledgeGraph"
"thunlp/OpenNRE" -> "ymcui/Chinese-BERT-wwm"
"thunlp/OpenNRE" -> "yuanxiaosc/Entity-Relation-Extraction"
"thunlp/OpenNRE" -> "thunlp/NRE" ["e"=1]
"thunlp/OpenNRE" -> "brightmart/albert_zh"
"thunlp/OpenNRE" -> "liuhuanyong/QASystemOnMedicalKG"
"thunlp/OpenNRE" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"thunlp/OpenNRE" -> "Embedding/Chinese-Word-Vectors"
"thunlp/OpenNRE" -> "roomylee/awesome-relation-extraction" ["e"=1]
"thunlp/OpenNRE" -> "CLUEbenchmark/CLUE"
"zjy-ucas/ChineseNER" -> "Determined22/zh-NER-TF"
"zjy-ucas/ChineseNER" -> "crownpku/Information-Extraction-Chinese"
"zjy-ucas/ChineseNER" -> "shiyybua/NER"
"zjy-ucas/ChineseNER" -> "macanv/BERT-BiLSTM-CRF-NER"
"zjy-ucas/ChineseNER" -> "jiesutd/LatticeLSTM"
"zjy-ucas/ChineseNER" -> "guillaumegenthial/sequence_tagging"
"zjy-ucas/ChineseNER" -> "buppt/ChineseNER"
"zjy-ucas/ChineseNER" -> "kyzhouhzau/BERT-NER"
"zjy-ucas/ChineseNER" -> "ProHiryu/bert-chinese-ner"
"zjy-ucas/ChineseNER" -> "yuanxiaosc/Entity-Relation-Extraction"
"zjy-ucas/ChineseNER" -> "thunlp/OpenNRE"
"zjy-ucas/ChineseNER" -> "yumath/bertNER"
"zjy-ucas/ChineseNER" -> "brightmart/albert_zh"
"zjy-ucas/ChineseNER" -> "jiesutd/NCRFpp"
"zjy-ucas/ChineseNER" -> "luopeixiang/named_entity_recognition"
"microsoft/Recognizers-Text" -> "curiosity-ai/catalyst" ["e"=1]
"microsoft/Recognizers-Text" -> "zhanzecheng/Time_NLP"
"microsoft/Recognizers-Text" -> "microsoft/FeatureManagement-Dotnet" ["e"=1]
"microsoft/Recognizers-Text" -> "microsoft/vert-papers" ["e"=1]
"microsoft/Recognizers-Text" -> "microsoft/botbuilder-dotnet" ["e"=1]
"microsoft/Recognizers-Text" -> "shinyke/Time-NLP"
"microsoft/Recognizers-Text" -> "microsoft/RulesEngine" ["e"=1]
"microsoft/Recognizers-Text" -> "fighting41love/cocoNLP"
"microsoft/Recognizers-Text" -> "thu-coai/CrossWOZ" ["e"=1]
"microsoft/Recognizers-Text" -> "microsoft/Microsoft.IO.RecyclableMemoryStream" ["e"=1]
"microsoft/Recognizers-Text" -> "AlexPoint/OpenNlp" ["e"=1]
"microsoft/Recognizers-Text" -> "sergey-tihon/Stanford.NLP.NET" ["e"=1]
"microsoft/Recognizers-Text" -> "RehanSaeed/Schema.NET" ["e"=1]
"microsoft/Recognizers-Text" -> "amis92/csharp-source-generators" ["e"=1]
"microsoft/Recognizers-Text" -> "baidu/AnyQ"
"jiangnanboy/albert_lstm_crf_ner" -> "grallage/ALBERT-BiLSTM-CRF-NER"
"jiangnanboy/albert_lstm_crf_ner" -> "MarsRoger/albert_ner"
"jiangnanboy/albert_lstm_crf_ner" -> "percent4/ALBERT_NER_KERAS"
"jiangnanboy/albert_lstm_crf_ner" -> "jiangnanboy/text_grapher"
"km1994/nlp_paper_study" -> "km1994/NLP-Interview-Notes"
"km1994/nlp_paper_study" -> "DA-southampton/NLP_ability"
"km1994/nlp_paper_study" -> "TingFree/NLPer-Arsenal"
"km1994/nlp_paper_study" -> "songyingxin/NLPer-Interview"
"km1994/nlp_paper_study" -> "loujie0822/DeepIE"
"km1994/nlp_paper_study" -> "zhpmatrix/nlp-competitions-list-review"
"km1994/nlp_paper_study" -> "leerumor/nlp_tutorial"
"km1994/nlp_paper_study" -> "ymcui/Chinese-BERT-wwm"
"km1994/nlp_paper_study" -> "CLUEbenchmark/CLUE"
"km1994/nlp_paper_study" -> "bojone/bert4keras"
"km1994/nlp_paper_study" -> "lonePatient/BERT-NER-Pytorch"
"km1994/nlp_paper_study" -> "DA-southampton/Tech_Aarticle"
"km1994/nlp_paper_study" -> "princeton-nlp/SimCSE"
"km1994/nlp_paper_study" -> "CLUEbenchmark/CLUEDatasetSearch"
"km1994/nlp_paper_study" -> "FudanNLP/nlp-beginner"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "dbiir/UER-py"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "google/sentencepiece" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "first20hours/google-10000-english" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "thunlp/OpenPrompt" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "yizhongw/self-instruct" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "brightmart/roberta_zh"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "CLUEbenchmark/CLUE"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "facebookresearch/cc_net" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "huawei-noah/Pretrained-Language-Model"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "zacanger/profane-words"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "bigscience-workshop/promptsource" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "rsennrich/subword-nmt" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "LianjiaTech/BELLE" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "allenai/RL4LMs" ["e"=1]
"fxsjy/jieba" -> "hankcs/HanLP"
"fxsjy/jieba" -> "fighting41love/funNLP"
"fxsjy/jieba" -> "Embedding/Chinese-Word-Vectors"
"fxsjy/jieba" -> "isnowfy/snownlp"
"fxsjy/jieba" -> "google-research/bert" ["e"=1]
"fxsjy/jieba" -> "exacity/deeplearningbook-chinese" ["e"=1]
"fxsjy/jieba" -> "littlecodersh/ItChat" ["e"=1]
"fxsjy/jieba" -> "facebookresearch/fastText" ["e"=1]
"fxsjy/jieba" -> "lancopku/pkuseg-python"
"fxsjy/jieba" -> "ymcui/Chinese-BERT-wwm"
"fxsjy/jieba" -> "brightmart/nlp_chinese_corpus"
"fxsjy/jieba" -> "crownpku/Awesome-Chinese-NLP"
"fxsjy/jieba" -> "scrapy/scrapy" ["e"=1]
"fxsjy/jieba" -> "dmlc/xgboost" ["e"=1]
"fxsjy/jieba" -> "binux/pyspider" ["e"=1]
"2shou/TextGrocery" -> "isnowfy/snownlp"
"2shou/TextGrocery" -> "someus/TextRank4ZH"
"2shou/TextGrocery" -> "guestwalk/kaggle-2014-criteo" ["e"=1]
"2shou/TextGrocery" -> "memect/hao" ["e"=1]
"2shou/TextGrocery" -> "cjlin1/liblinear" ["e"=1]
"2shou/TextGrocery" -> "salestock/fastText.py" ["e"=1]
"2shou/TextGrocery" -> "sing1ee/dict_build"
"2shou/TextGrocery" -> "baidu/Familia"
"2shou/TextGrocery" -> "xpqiu/fnlp"
"2shou/TextGrocery" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"2shou/TextGrocery" -> "tsroten/pynlpir"
"2shou/TextGrocery" -> "koth/kcws"
"2shou/TextGrocery" -> "huyingxi/Synonyms"
"2shou/TextGrocery" -> "thunlp/THULAC-Python"
"2shou/TextGrocery" -> "saffsd/langid.py" ["e"=1]
"amazon-research/sccl" -> "rashadulrakib/short-text-clustering-enhancement"
"amazon-research/sccl" -> "hadifar/stc_clustering"
"amazon-research/sccl" -> "amazon-research/sentence-representations"
"amazon-research/sccl" -> "murray-z/text_clustering"
"amazon-research/sccl" -> "Yunfan-Li/Contrastive-Clustering" ["e"=1]
"amazon-research/sccl" -> "bojone/SimCSE"
"amazon-research/sccl" -> "yym6472/ConSERT"
"skydark/nstools" -> "HIT-SCIR/pyltp"
"skydark/nstools" -> "csdz/nstools"
"skydark/nstools" -> "smoothnlp/SmoothNLP"
"skydark/nstools" -> "ZhuiyiTechnology/pretrained-models"
"skydark/nstools" -> "rainarch/SentiBridge"
"skydark/nstools" -> "baidu/information-extraction"
"skydark/nstools" -> "ProHiryu/bert-chinese-ner"
"skydark/nstools" -> "CLUEbenchmark/CLUEPretrainedModels"
"skydark/nstools" -> "Determined22/zh-NER-TF"
"skydark/nstools" -> "yichen0831/opencc-python" ["e"=1]
"skydark/nstools" -> "Wall-ee/chinese2digits"
"skydark/nstools" -> "brightmart/roberta_zh"
"skydark/nstools" -> "HIT-SCIR/ltp"
"skydark/nstools" -> "ZhuiyiTechnology/simbert"
"skydark/nstools" -> "thunlp/THULAC-Python"
"EssayKillerBrain/EssayKiller_V2" -> "Morizeyao/GPT2-Chinese"
"EssayKillerBrain/EssayKiller_V2" -> "imcaspar/gpt2-ml"
"EssayKillerBrain/EssayKiller_V2" -> "babysor/MockingBird" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "kwai/DouZero" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "kangvcar/InfoSpider" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "yangjianxin1/GPT2-chitchat"
"EssayKillerBrain/EssayKiller_V2" -> "brightmart/nlp_chinese_corpus"
"EssayKillerBrain/EssayKiller_V2" -> "ssssssss-team/spider-flow" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "menzi11/BullshitGenerator" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "thunlp/WantWords" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "Baiyuetribe/paper2gui" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "Wechat-ggGitHub/Awesome-GitHub-Repo" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "fighting41love/funNLP"
"EssayKillerBrain/EssayKiller_V2" -> "itorr/nbnhhsh" ["e"=1]
"EssayKillerBrain/EssayKiller_V2" -> "bilibili/ailab" ["e"=1]
"gaussic/text-classification-cnn-rnn" -> "brightmart/text_classification" ["e"=1]
"gaussic/text-classification-cnn-rnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"gaussic/text-classification-cnn-rnn" -> "Embedding/Chinese-Word-Vectors"
"gaussic/text-classification-cnn-rnn" -> "macanv/BERT-BiLSTM-CRF-NER"
"gaussic/text-classification-cnn-rnn" -> "Determined22/zh-NER-TF"
"gaussic/text-classification-cnn-rnn" -> "brightmart/nlp_chinese_corpus"
"gaussic/text-classification-cnn-rnn" -> "yongzhuo/Keras-TextClassification"
"gaussic/text-classification-cnn-rnn" -> "ymcui/Chinese-BERT-wwm"
"gaussic/text-classification-cnn-rnn" -> "cjymz886/text-cnn"
"gaussic/text-classification-cnn-rnn" -> "SophonPlus/ChineseNlpCorpus"
"gaussic/text-classification-cnn-rnn" -> "649453932/Chinese-Text-Classification-Pytorch"
"gaussic/text-classification-cnn-rnn" -> "brightmart/albert_zh"
"gaussic/text-classification-cnn-rnn" -> "crownpku/Awesome-Chinese-NLP"
"gaussic/text-classification-cnn-rnn" -> "jiangxinyang227/textClassifier"
"gaussic/text-classification-cnn-rnn" -> "terrifyzhao/bert-utils"
"crownpku/Awesome-Chinese-NLP" -> "brightmart/nlp_chinese_corpus"
"crownpku/Awesome-Chinese-NLP" -> "Embedding/Chinese-Word-Vectors"
"crownpku/Awesome-Chinese-NLP" -> "SophonPlus/ChineseNlpCorpus"
"crownpku/Awesome-Chinese-NLP" -> "ymcui/Chinese-BERT-wwm"
"crownpku/Awesome-Chinese-NLP" -> "brightmart/text_classification" ["e"=1]
"crownpku/Awesome-Chinese-NLP" -> "brightmart/albert_zh"
"crownpku/Awesome-Chinese-NLP" -> "hanxiao/bert-as-service" ["e"=1]
"crownpku/Awesome-Chinese-NLP" -> "crownpku/Information-Extraction-Chinese"
"crownpku/Awesome-Chinese-NLP" -> "macanv/BERT-BiLSTM-CRF-NER"
"crownpku/Awesome-Chinese-NLP" -> "InsaneLife/ChineseNLPCorpus"
"crownpku/Awesome-Chinese-NLP" -> "lancopku/pkuseg-python"
"crownpku/Awesome-Chinese-NLP" -> "zhpmatrix/nlp-competitions-list-review"
"crownpku/Awesome-Chinese-NLP" -> "graykode/nlp-tutorial" ["e"=1]
"crownpku/Awesome-Chinese-NLP" -> "HIT-SCIR/ltp"
"crownpku/Awesome-Chinese-NLP" -> "hankcs/HanLP"
"aespresso/a_journey_into_math_of_ml" -> "ymcui/Chinese-BERT-wwm"
"aespresso/a_journey_into_math_of_ml" -> "luopeixiang/named_entity_recognition"
"aespresso/a_journey_into_math_of_ml" -> "SophonPlus/ChineseNlpCorpus"
"aespresso/a_journey_into_math_of_ml" -> "songyingxin/NLPer-Interview"
"aespresso/a_journey_into_math_of_ml" -> "km1994/nlp_paper_study"
"aespresso/a_journey_into_math_of_ml" -> "brightmart/albert_zh"
"aespresso/a_journey_into_math_of_ml" -> "bojone/bert4keras"
"aespresso/a_journey_into_math_of_ml" -> "macanv/BERT-BiLSTM-CRF-NER"
"aespresso/a_journey_into_math_of_ml" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"aespresso/a_journey_into_math_of_ml" -> "lonePatient/BERT-NER-Pytorch"
"aespresso/a_journey_into_math_of_ml" -> "DA-southampton/NLP_ability"
"aespresso/a_journey_into_math_of_ml" -> "yongzhuo/nlp_xiaojiang"
"aespresso/a_journey_into_math_of_ml" -> "InsaneLife/ChineseNLPCorpus"
"aespresso/a_journey_into_math_of_ml" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"aespresso/a_journey_into_math_of_ml" -> "649453932/Chinese-Text-Classification-Pytorch"
"PaddlePaddle/ERNIE" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/ERNIE" -> "brightmart/albert_zh"
"PaddlePaddle/ERNIE" -> "brightmart/roberta_zh"
"PaddlePaddle/ERNIE" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/ERNIE" -> "zihangdai/xlnet" ["e"=1]
"PaddlePaddle/ERNIE" -> "macanv/BERT-BiLSTM-CRF-NER"
"PaddlePaddle/ERNIE" -> "brightmart/nlp_chinese_corpus"
"PaddlePaddle/ERNIE" -> "bojone/bert4keras"
"PaddlePaddle/ERNIE" -> "Embedding/Chinese-Word-Vectors"
"PaddlePaddle/ERNIE" -> "hanxiao/bert-as-service" ["e"=1]
"PaddlePaddle/ERNIE" -> "PaddlePaddle/PaddleNLP"
"PaddlePaddle/ERNIE" -> "huawei-noah/Pretrained-Language-Model"
"PaddlePaddle/ERNIE" -> "PaddlePaddle/models" ["e"=1]
"PaddlePaddle/ERNIE" -> "dbiir/UER-py"
"PaddlePaddle/ERNIE" -> "thunlp/ERNIE"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/nlp_chinese_corpus"
"SophonPlus/ChineseNlpCorpus" -> "ymcui/Chinese-BERT-wwm"
"SophonPlus/ChineseNlpCorpus" -> "InsaneLife/ChineseNLPCorpus"
"SophonPlus/ChineseNlpCorpus" -> "Embedding/Chinese-Word-Vectors"
"SophonPlus/ChineseNlpCorpus" -> "crownpku/Awesome-Chinese-NLP"
"SophonPlus/ChineseNlpCorpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/albert_zh"
"SophonPlus/ChineseNlpCorpus" -> "CLUEbenchmark/CLUE"
"SophonPlus/ChineseNlpCorpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/roberta_zh"
"SophonPlus/ChineseNlpCorpus" -> "bojone/bert4keras"
"SophonPlus/ChineseNlpCorpus" -> "shibing624/pycorrector"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/text_classification" ["e"=1]
"SophonPlus/ChineseNlpCorpus" -> "codemayq/chinese_chatbot_corpus"
"SophonPlus/ChineseNlpCorpus" -> "goto456/stopwords"
"Tencent/TurboTransformers" -> "bytedance/lightseq"
"Tencent/TurboTransformers" -> "NVIDIA/FasterTransformer" ["e"=1]
"Tencent/TurboTransformers" -> "bytedance/effective_transformer"
"Tencent/TurboTransformers" -> "airaria/TextBrewer"
"Tencent/TurboTransformers" -> "autoliuweijie/FastBERT"
"Tencent/TurboTransformers" -> "zhihu/cuBERT"
"Tencent/TurboTransformers" -> "ymcui/Chinese-ELECTRA"
"Tencent/TurboTransformers" -> "huawei-noah/Pretrained-Language-Model"
"Tencent/TurboTransformers" -> "Tencent/Forward" ["e"=1]
"Tencent/TurboTransformers" -> "microsoft/nnfusion" ["e"=1]
"Tencent/TurboTransformers" -> "brightmart/roberta_zh"
"Tencent/TurboTransformers" -> "ShannonAI/service-streamer"
"Tencent/TurboTransformers" -> "ELS-RD/transformer-deploy" ["e"=1]
"Tencent/TurboTransformers" -> "OpenNMT/CTranslate2" ["e"=1]
"Tencent/TurboTransformers" -> "brightmart/albert_zh"
"brightmart/albert_zh" -> "brightmart/roberta_zh"
"brightmart/albert_zh" -> "ymcui/Chinese-BERT-wwm"
"brightmart/albert_zh" -> "CLUEbenchmark/CLUE"
"brightmart/albert_zh" -> "bojone/bert4keras"
"brightmart/albert_zh" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/albert_zh" -> "brightmart/nlp_chinese_corpus"
"brightmart/albert_zh" -> "huawei-noah/Pretrained-Language-Model"
"brightmart/albert_zh" -> "lonePatient/albert_pytorch"
"brightmart/albert_zh" -> "zihangdai/xlnet" ["e"=1]
"brightmart/albert_zh" -> "dbiir/UER-py"
"brightmart/albert_zh" -> "Embedding/Chinese-Word-Vectors"
"brightmart/albert_zh" -> "ymcui/Chinese-PreTrained-XLNet"
"brightmart/albert_zh" -> "shibing624/pycorrector"
"brightmart/albert_zh" -> "CyberZHG/keras-bert"
"brightmart/albert_zh" -> "hanxiao/bert-as-service" ["e"=1]
"brightmart/roberta_zh" -> "brightmart/albert_zh"
"brightmart/roberta_zh" -> "ymcui/Chinese-BERT-wwm"
"brightmart/roberta_zh" -> "ymcui/Chinese-PreTrained-XLNet"
"brightmart/roberta_zh" -> "CLUEbenchmark/CLUE"
"brightmart/roberta_zh" -> "dbiir/UER-py"
"brightmart/roberta_zh" -> "bojone/bert4keras"
"brightmart/roberta_zh" -> "ymcui/Chinese-ELECTRA"
"brightmart/roberta_zh" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/roberta_zh" -> "huawei-noah/Pretrained-Language-Model"
"brightmart/roberta_zh" -> "brightmart/nlp_chinese_corpus"
"brightmart/roberta_zh" -> "ZhuiyiTechnology/pretrained-models"
"brightmart/roberta_zh" -> "zihangdai/xlnet" ["e"=1]
"brightmart/roberta_zh" -> "airaria/TextBrewer"
"brightmart/roberta_zh" -> "PaddlePaddle/ERNIE"
"brightmart/roberta_zh" -> "loujie0822/DeepIE"
"google-research/albert" -> "brightmart/albert_zh"
"google-research/albert" -> "lonePatient/albert_pytorch"
"google-research/albert" -> "brightmart/roberta_zh"
"google-research/albert" -> "CLUEbenchmark/CLUE"
"google-research/albert" -> "google-research/electra" ["e"=1]
"google-research/albert" -> "huawei-noah/Pretrained-Language-Model"
"google-research/albert" -> "ymcui/Chinese-ELECTRA"
"google-research/albert" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"google-research/albert" -> "zihangdai/xlnet" ["e"=1]
"google-research/albert" -> "ymcui/Chinese-BERT-wwm"
"google-research/albert" -> "ChineseGLUE/ChineseGLUE"
"google-research/albert" -> "ZhuiyiTechnology/simbert"
"google-research/albert" -> "macanv/BERT-BiLSTM-CRF-NER"
"google-research/albert" -> "bojone/bert4keras"
"google-research/albert" -> "PaddlePaddle/ERNIE"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/albert_zh"
"huawei-noah/Pretrained-Language-Model" -> "CLUEbenchmark/CLUE"
"huawei-noah/Pretrained-Language-Model" -> "ymcui/Chinese-BERT-wwm"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/roberta_zh"
"huawei-noah/Pretrained-Language-Model" -> "dbiir/UER-py"
"huawei-noah/Pretrained-Language-Model" -> "airaria/TextBrewer"
"huawei-noah/Pretrained-Language-Model" -> "bojone/bert4keras"
"huawei-noah/Pretrained-Language-Model" -> "princeton-nlp/SimCSE"
"huawei-noah/Pretrained-Language-Model" -> "ymcui/Chinese-ELECTRA"
"huawei-noah/Pretrained-Language-Model" -> "ZhuiyiTechnology/pretrained-models"
"huawei-noah/Pretrained-Language-Model" -> "loujie0822/DeepIE"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/nlp_chinese_corpus"
"huawei-noah/Pretrained-Language-Model" -> "macanv/BERT-BiLSTM-CRF-NER"
"huawei-noah/Pretrained-Language-Model" -> "CLUEbenchmark/CLUEDatasetSearch"
"huawei-noah/Pretrained-Language-Model" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"songyingxin/Bert-TextClassification" -> "songyingxin/TextClassification-Pytorch"
"songyingxin/Bert-TextClassification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"songyingxin/Bert-TextClassification" -> "yaleimeng/TextClassify_with_BERT"
"songyingxin/Bert-TextClassification" -> "yongzhuo/Keras-TextClassification"
"songyingxin/Bert-TextClassification" -> "zhanlaoban/Transformers_for_Text_Classification"
"songyingxin/Bert-TextClassification" -> "yongzhuo/nlp_xiaojiang"
"songyingxin/Bert-TextClassification" -> "songyingxin/TextClassification"
"songyingxin/Bert-TextClassification" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"songyingxin/Bert-TextClassification" -> "renxingkai/BERT_Chinese_Classification"
"songyingxin/Bert-TextClassification" -> "songyingxin/NLPer-Interview"
"songyingxin/Bert-TextClassification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"songyingxin/Bert-TextClassification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"songyingxin/Bert-TextClassification" -> "zhpmatrix/nlp-competitions-list-review"
"songyingxin/Bert-TextClassification" -> "NLPScott/bert-Chinese-classification-task"
"songyingxin/Bert-TextClassification" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"songyingxin/TextClassification" -> "songyingxin/Bert-TextClassification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "wshuyi/demo_chinese_text_classification_bert_fastai"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "wshuyi/demo-fastbert-multi-label-classification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "real-brilliant/bert_chinese_pytorch"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "songyingxin/Bert-TextClassification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "yongzhuo/Keras-TextClassification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "ymcui/Chinese-PreTrained-XLNet"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "bojone/bert_in_keras"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "SunYanCN/BERT-chinese-text-classification-and-deployment"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "terrifyzhao/bert-utils"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "NLPScott/bert-Chinese-classification-task"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "jiangxinyang227/textClassifier"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"ymcui/Chinese-BERT-wwm" -> "brightmart/albert_zh"
"ymcui/Chinese-BERT-wwm" -> "Embedding/Chinese-Word-Vectors"
"ymcui/Chinese-BERT-wwm" -> "brightmart/nlp_chinese_corpus"
"ymcui/Chinese-BERT-wwm" -> "bojone/bert4keras"
"ymcui/Chinese-BERT-wwm" -> "brightmart/roberta_zh"
"ymcui/Chinese-BERT-wwm" -> "CLUEbenchmark/CLUE"
"ymcui/Chinese-BERT-wwm" -> "macanv/BERT-BiLSTM-CRF-NER"
"ymcui/Chinese-BERT-wwm" -> "hanxiao/bert-as-service" ["e"=1]
"ymcui/Chinese-BERT-wwm" -> "SophonPlus/ChineseNlpCorpus"
"ymcui/Chinese-BERT-wwm" -> "InsaneLife/ChineseNLPCorpus"
"ymcui/Chinese-BERT-wwm" -> "PaddlePaddle/ERNIE"
"ymcui/Chinese-BERT-wwm" -> "google-research/bert" ["e"=1]
"ymcui/Chinese-BERT-wwm" -> "dbiir/UER-py"
"ymcui/Chinese-BERT-wwm" -> "CLUEbenchmark/CLUEDatasetSearch"
"ymcui/Chinese-BERT-wwm" -> "shibing624/pycorrector"
"huaban/jieba-analysis" -> "NLPchina/ansj_seg"
"huaban/jieba-analysis" -> "ysc/word"
"huaban/jieba-analysis" -> "NLPchina/nlp-lang"
"huaban/jieba-analysis" -> "ysc/cws_evaluation"
"huaban/jieba-analysis" -> "fxsjy/jieba"
"huaban/jieba-analysis" -> "NLPchina/Word2VEC_java"
"huaban/jieba-analysis" -> "sing1ee/elasticsearch-jieba-plugin" ["e"=1]
"huaban/jieba-analysis" -> "huaban/elasticsearch-analysis-jieba" ["e"=1]
"huaban/jieba-analysis" -> "hankcs/HanLP"
"huaban/jieba-analysis" -> "thunlp/THULAC-Java"
"huaban/jieba-analysis" -> "lionsoul2014/jcseg"
"huaban/jieba-analysis" -> "wks/ik-analyzer"
"huaban/jieba-analysis" -> "ysc/QuestionAnsweringSystem"
"huaban/jieba-analysis" -> "medcl/elasticsearch-analysis-ik" ["e"=1]
"huaban/jieba-analysis" -> "FudanNLP/fnlp"
"fastnlp/fastNLP" -> "FudanNLP/fnlp"
"fastnlp/fastNLP" -> "fastnlp/fastHan"
"fastnlp/fastNLP" -> "ymcui/Chinese-BERT-wwm"
"fastnlp/fastNLP" -> "brightmart/albert_zh"
"fastnlp/fastNLP" -> "CLUEbenchmark/CLUE"
"fastnlp/fastNLP" -> "loujie0822/DeepIE"
"fastnlp/fastNLP" -> "dbiir/UER-py"
"fastnlp/fastNLP" -> "FudanNLP/nlp-beginner"
"fastnlp/fastNLP" -> "brightmart/nlp_chinese_corpus"
"fastnlp/fastNLP" -> "Embedding/Chinese-Word-Vectors"
"fastnlp/fastNLP" -> "InsaneLife/ChineseNLPCorpus"
"fastnlp/fastNLP" -> "didi/ChineseNLP"
"fastnlp/fastNLP" -> "brightmart/roberta_zh"
"fastnlp/fastNLP" -> "jiesutd/LatticeLSTM"
"fastnlp/fastNLP" -> "bojone/bert4keras"
"IDEA-CCNL/Fengshenbang-LM" -> "LianjiaTech/BELLE" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "dbiir/UER-py"
"IDEA-CCNL/Fengshenbang-LM" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"IDEA-CCNL/Fengshenbang-LM" -> "OFA-Sys/Chinese-CLIP" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "thu-coai/CDial-GPT"
"IDEA-CCNL/Fengshenbang-LM" -> "CLUEbenchmark/CLUE"
"IDEA-CCNL/Fengshenbang-LM" -> "clue-ai/PromptCLUE" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "alibaba/EasyNLP"
"IDEA-CCNL/Fengshenbang-LM" -> "mymusise/ChatGLM-Tuning" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "princeton-nlp/SimCSE"
"IDEA-CCNL/Fengshenbang-LM" -> "clue-ai/ChatYuan" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "shibing624/pycorrector"
"IDEA-CCNL/Fengshenbang-LM" -> "huawei-noah/Pretrained-Language-Model"
"IDEA-CCNL/Fengshenbang-LM" -> "thunlp/OpenPrompt" ["e"=1]
"IDEA-CCNL/Fengshenbang-LM" -> "alibaba/AliceMind"
"fighting41love/Chinese_from_dongxiexidian" -> "thunlp/THUOCL"
"fighting41love/Chinese_from_dongxiexidian" -> "zhangyics/Chinese-abbreviation-dataset"
"fighting41love/Chinese_from_dongxiexidian" -> "guotong1988/chinese_dictionary"
"fighting41love/Chinese_from_dongxiexidian" -> "foowaa/Chinese_from_dongxiexidian"
"Lightning-AI/deep-learning-project-template" -> "Lightning-AI/lightning-transformers"
"jiesutd/LatticeLSTM" -> "LeeSureman/Flat-Lattice-Transformer"
"jiesutd/LatticeLSTM" -> "luopeixiang/named_entity_recognition"
"jiesutd/LatticeLSTM" -> "jiesutd/NCRFpp"
"jiesutd/LatticeLSTM" -> "zjy-ucas/ChineseNER"
"jiesutd/LatticeLSTM" -> "v-mipeng/LexiconAugmentedNER"
"jiesutd/LatticeLSTM" -> "Determined22/zh-NER-TF"
"jiesutd/LatticeLSTM" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/LatticeLSTM" -> "loujie0822/DeepIE"
"jiesutd/LatticeLSTM" -> "buppt/ChineseNER"
"jiesutd/LatticeLSTM" -> "hltcoe/golden-horse"
"jiesutd/LatticeLSTM" -> "lonePatient/BERT-NER-Pytorch"
"jiesutd/LatticeLSTM" -> "CLUEbenchmark/CLUENER2020"
"jiesutd/LatticeLSTM" -> "crownpku/Information-Extraction-Chinese"
"jiesutd/LatticeLSTM" -> "FuYanzhe2/Name-Entity-Recognition"
"jiesutd/LatticeLSTM" -> "guillaumegenthial/sequence_tagging"
"xieyufei1993/Bert-Pytorch-Chinese-TextClassification" -> "real-brilliant/bert_chinese_pytorch"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "lorenmt/mtan"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "Manchery/awesome-multi-task-learning"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "mbs0221/Multitask-Learning"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "hosseinshn/Basic-Multi-task-Learning"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "Mikoto10032/AutomaticWeightedLoss"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "yaringal/multi-task-learning-example"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "brianlan/pytorch-grad-norm"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "median-research-group/LibMTL"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "facebookresearch/astmt"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "isl-org/MultiObjectiveOptimization"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "ranandalon/mtl"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "Hui-Li/multi-task-learning-example-PyTorch"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "intel-isl/MultiObjectiveOptimization"
"SimonVandenhende/Multi-Task-Learning-PyTorch" -> "sunxm2357/AdaShare"
"mozillazg/python-pinyin" -> "shibing624/pycorrector"
"mozillazg/python-pinyin" -> "hotoo/pinyin" ["e"=1]
"mozillazg/python-pinyin" -> "brightmart/nlp_chinese_corpus"
"mozillazg/python-pinyin" -> "ymcui/Chinese-BERT-wwm"
"mozillazg/python-pinyin" -> "mozillazg/pinyin-data" ["e"=1]
"mozillazg/python-pinyin" -> "wainshine/Chinese-Names-Corpus"
"mozillazg/python-pinyin" -> "hankcs/pyhanlp"
"mozillazg/python-pinyin" -> "fxsjy/jieba"
"mozillazg/python-pinyin" -> "brightmart/albert_zh"
"mozillazg/python-pinyin" -> "InsaneLife/ChineseNLPCorpus"
"mozillazg/python-pinyin" -> "Embedding/Chinese-Word-Vectors"
"mozillazg/python-pinyin" -> "lancopku/pkuseg-python"
"mozillazg/python-pinyin" -> "huyingxi/Synonyms"
"mozillazg/python-pinyin" -> "isnowfy/snownlp"
"mozillazg/python-pinyin" -> "espnet/espnet" ["e"=1]
"songyingxin/python-algorithm" -> "songyingxin/NLPer-Interview"
"songyingxin/python-algorithm" -> "songyingxin/TextClassification-Pytorch"
"songyingxin/python-algorithm" -> "yanqiangmiffy/NLP-Interview-Notes"
"songyingxin/python-algorithm" -> "songyingxin/Bert-TextClassification"
"songyingxin/python-algorithm" -> "shenweichen/coding_interviews" ["e"=1]
"HIT-SCIR/pyltp" -> "HIT-SCIR/ltp"
"HIT-SCIR/pyltp" -> "thunlp/THULAC-Python"
"HIT-SCIR/pyltp" -> "hankcs/pyhanlp"
"HIT-SCIR/pyltp" -> "crownpku/Information-Extraction-Chinese"
"HIT-SCIR/pyltp" -> "huyingxi/Synonyms"
"HIT-SCIR/pyltp" -> "zjy-ucas/ChineseNER"
"HIT-SCIR/pyltp" -> "FudanNLP/fnlp"
"HIT-SCIR/pyltp" -> "liuhuanyong/EventTriplesExtraction"
"HIT-SCIR/pyltp" -> "isnowfy/snownlp"
"HIT-SCIR/pyltp" -> "NLPIR-team/NLPIR"
"HIT-SCIR/pyltp" -> "rockingdingo/deepnlp"
"HIT-SCIR/pyltp" -> "Lynten/stanford-corenlp" ["e"=1]
"HIT-SCIR/pyltp" -> "ymcui/Chinese-BERT-wwm"
"HIT-SCIR/pyltp" -> "tsroten/pynlpir"
"HIT-SCIR/pyltp" -> "Embedding/Chinese-Word-Vectors"
"hankcs/pyhanlp" -> "ymcui/Chinese-BERT-wwm"
"hankcs/pyhanlp" -> "hankcs/HanLP"
"hankcs/pyhanlp" -> "HIT-SCIR/ltp"
"hankcs/pyhanlp" -> "ownthink/Jiagu"
"hankcs/pyhanlp" -> "Embedding/Chinese-Word-Vectors"
"hankcs/pyhanlp" -> "brightmart/nlp_chinese_corpus"
"hankcs/pyhanlp" -> "lancopku/pkuseg-python"
"hankcs/pyhanlp" -> "macanv/BERT-BiLSTM-CRF-NER"
"hankcs/pyhanlp" -> "brightmart/albert_zh"
"hankcs/pyhanlp" -> "crownpku/Awesome-Chinese-NLP"
"hankcs/pyhanlp" -> "HIT-SCIR/pyltp"
"hankcs/pyhanlp" -> "letiantian/TextRank4ZH"
"hankcs/pyhanlp" -> "CLUEbenchmark/CLUE"
"hankcs/pyhanlp" -> "huyingxi/Synonyms"
"hankcs/pyhanlp" -> "InsaneLife/ChineseNLPCorpus"
"DA-southampton/ner" -> "lonePatient/BERT-NER-Pytorch"
"DA-southampton/ner" -> "yanwii/ChinsesNER-pytorch"
"DA-southampton/ner" -> "z814081807/DeepNER"
"DA-southampton/ner" -> "wavewangyue/ner"
"DA-southampton/ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"DA-southampton/ner" -> "luopeixiang/named_entity_recognition"
"DA-southampton/ner" -> "loujie0822/DeepIE"
"DA-southampton/ner" -> "hemingkx/CLUENER2020"
"DA-southampton/ner" -> "CLUEbenchmark/CLUENER2020"
"DA-southampton/ner" -> "FuYanzhe2/Name-Entity-Recognition"
"DA-southampton/ner" -> "yanqiangmiffy/NLP-Interview-Notes"
"DA-southampton/ner" -> "DA-southampton/Read_Bert_Code"
"DA-southampton/ner" -> "Jacen789/relation-extraction"
"DA-southampton/ner" -> "qiufengyuyi/sequence_tagging"
"DA-southampton/ner" -> "StanleyLsx/entity_extractor_by_ner"
"Embedding/Chinese-Word-Vectors" -> "ymcui/Chinese-BERT-wwm"
"Embedding/Chinese-Word-Vectors" -> "brightmart/nlp_chinese_corpus"
"Embedding/Chinese-Word-Vectors" -> "brightmart/text_classification" ["e"=1]
"Embedding/Chinese-Word-Vectors" -> "crownpku/Awesome-Chinese-NLP"
"Embedding/Chinese-Word-Vectors" -> "SophonPlus/ChineseNlpCorpus"
"Embedding/Chinese-Word-Vectors" -> "hanxiao/bert-as-service" ["e"=1]
"Embedding/Chinese-Word-Vectors" -> "brightmart/albert_zh"
"Embedding/Chinese-Word-Vectors" -> "google-research/bert" ["e"=1]
"Embedding/Chinese-Word-Vectors" -> "macanv/BERT-BiLSTM-CRF-NER"
"Embedding/Chinese-Word-Vectors" -> "InsaneLife/ChineseNLPCorpus"
"Embedding/Chinese-Word-Vectors" -> "bojone/bert4keras"
"Embedding/Chinese-Word-Vectors" -> "649453932/Chinese-Text-Classification-Pytorch"
"Embedding/Chinese-Word-Vectors" -> "CLUEbenchmark/CLUE"
"Embedding/Chinese-Word-Vectors" -> "hankcs/HanLP"
"Embedding/Chinese-Word-Vectors" -> "fighting41love/funNLP"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/nlp_chinese_corpus"
"InsaneLife/ChineseNLPCorpus" -> "SophonPlus/ChineseNlpCorpus"
"InsaneLife/ChineseNLPCorpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"InsaneLife/ChineseNLPCorpus" -> "ymcui/Chinese-BERT-wwm"
"InsaneLife/ChineseNLPCorpus" -> "CLUEbenchmark/CLUE"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/albert_zh"
"InsaneLife/ChineseNLPCorpus" -> "Embedding/Chinese-Word-Vectors"
"InsaneLife/ChineseNLPCorpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/roberta_zh"
"InsaneLife/ChineseNLPCorpus" -> "shibing624/pycorrector"
"InsaneLife/ChineseNLPCorpus" -> "dbiir/UER-py"
"InsaneLife/ChineseNLPCorpus" -> "zhpmatrix/nlp-competitions-list-review"
"InsaneLife/ChineseNLPCorpus" -> "crownpku/Awesome-Chinese-NLP"
"InsaneLife/ChineseNLPCorpus" -> "jiesutd/LatticeLSTM"
"InsaneLife/ChineseNLPCorpus" -> "bojone/bert4keras"
"liucongg/NLPDataSet" -> "pluto-junzeng/CNSD"
"liucongg/NLPDataSet" -> "TingFree/NLPer-Arsenal"
"liucongg/NLPDataSet" -> "ZhuiyiTechnology/pretrained-models"
"liucongg/NLPDataSet" -> "loujie0822/DeepIE"
"liucongg/NLPDataSet" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"liucongg/NLPDataSet" -> "CLUEbenchmark/CLUEDatasetSearch"
"liucongg/NLPDataSet" -> "zejunwang1/CSTS"
"liucongg/NLPDataSet" -> "Tongjilibo/bert4torch" ["e"=1]
"liucongg/NLPDataSet" -> "CLUEbenchmark/CLUE"
"liucongg/NLPDataSet" -> "ymcui/MacBERT"
"liucongg/NLPDataSet" -> "universal-ie/UIE"
"liucongg/NLPDataSet" -> "CLUEbenchmark/SimCLUE"
"liucongg/NLPDataSet" -> "gaohongkui/GlobalPointer_pytorch"
"liucongg/NLPDataSet" -> "JunnYu/RoFormer_pytorch"
"liucongg/NLPDataSet" -> "clue-ai/PromptCLUE" ["e"=1]
"lonePatient/albert_pytorch" -> "brightmart/albert_zh"
"lonePatient/albert_pytorch" -> "ymcui/Chinese-PreTrained-XLNet"
"lonePatient/albert_pytorch" -> "nghuyong/ERNIE-Pytorch"
"lonePatient/albert_pytorch" -> "brightmart/roberta_zh"
"lonePatient/albert_pytorch" -> "ZhuiyiTechnology/pretrained-models"
"lonePatient/albert_pytorch" -> "ymcui/Chinese-ELECTRA"
"lonePatient/albert_pytorch" -> "graykode/ALBERT-Pytorch" ["e"=1]
"lonePatient/albert_pytorch" -> "google-research/albert"
"lonePatient/albert_pytorch" -> "autoliuweijie/FastBERT"
"lonePatient/albert_pytorch" -> "chineseGLUE/chineseGLUE"
"lonePatient/albert_pytorch" -> "dbiir/UER-py"
"lonePatient/albert_pytorch" -> "huawei-noah/Pretrained-Language-Model"
"lonePatient/albert_pytorch" -> "lonePatient/BERT-NER-Pytorch"
"lonePatient/albert_pytorch" -> "ZhuiyiTechnology/simbert"
"lonePatient/albert_pytorch" -> "thunlp/ERNIE"
"luopeixiang/named_entity_recognition" -> "jiesutd/LatticeLSTM"
"luopeixiang/named_entity_recognition" -> "buppt/ChineseNER"
"luopeixiang/named_entity_recognition" -> "lonePatient/BERT-NER-Pytorch"
"luopeixiang/named_entity_recognition" -> "CLUEbenchmark/CLUENER2020"
"luopeixiang/named_entity_recognition" -> "macanv/BERT-BiLSTM-CRF-NER"
"luopeixiang/named_entity_recognition" -> "Determined22/zh-NER-TF"
"luopeixiang/named_entity_recognition" -> "loujie0822/DeepIE"
"luopeixiang/named_entity_recognition" -> "crownpku/Information-Extraction-Chinese"
"luopeixiang/named_entity_recognition" -> "zjy-ucas/ChineseNER"
"luopeixiang/named_entity_recognition" -> "ymcui/Chinese-BERT-wwm"
"luopeixiang/named_entity_recognition" -> "InsaneLife/ChineseNLPCorpus"
"luopeixiang/named_entity_recognition" -> "z814081807/DeepNER"
"luopeixiang/named_entity_recognition" -> "LeeSureman/Flat-Lattice-Transformer"
"luopeixiang/named_entity_recognition" -> "yuanxiaosc/Entity-Relation-Extraction"
"luopeixiang/named_entity_recognition" -> "wavewangyue/ner"
"quincyliang/nlp-public-dataset" -> "yaleimeng/NER_corpus_chinese"
"quincyliang/nlp-public-dataset" -> "LeeSureman/Flat-Lattice-Transformer"
"quincyliang/nlp-public-dataset" -> "v-mipeng/LexiconAugmentedNER"
"quincyliang/nlp-public-dataset" -> "foamliu/Machine-Translation"
"quincyliang/nlp-public-dataset" -> "OYE93/Chinese-NLP-Corpus"
"yizhen20133868/NLP-Conferences-Code" -> "loujie0822/DeepIE"
"yizhen20133868/NLP-Conferences-Code" -> "km1994/nlp_paper_study"
"yizhen20133868/NLP-Conferences-Code" -> "changwookjun/nlp-paper"
"yizhen20133868/NLP-Conferences-Code" -> "loujie0822/Pre-trained-Models"
"yizhen20133868/NLP-Conferences-Code" -> "ymcui/Chinese-BERT-wwm"
"yizhen20133868/NLP-Conferences-Code" -> "didi/ChineseNLP"
"yizhen20133868/NLP-Conferences-Code" -> "CLUEbenchmark/CLUE"
"yizhen20133868/NLP-Conferences-Code" -> "songyingxin/NLPer-Interview"
"yizhen20133868/NLP-Conferences-Code" -> "zhpmatrix/nlp-competitions-list-review"
"yizhen20133868/NLP-Conferences-Code" -> "fastnlp/fastNLP"
"yizhen20133868/NLP-Conferences-Code" -> "brightmart/roberta_zh"
"yizhen20133868/NLP-Conferences-Code" -> "InsaneLife/ChineseNLPCorpus"
"yizhen20133868/NLP-Conferences-Code" -> "dbiir/UER-py"
"yizhen20133868/NLP-Conferences-Code" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yizhen20133868/NLP-Conferences-Code" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"ymcui/Chinese-ELECTRA" -> "google-research/electra" ["e"=1]
"ymcui/Chinese-ELECTRA" -> "brightmart/roberta_zh"
"ymcui/Chinese-ELECTRA" -> "airaria/TextBrewer"
"ymcui/Chinese-ELECTRA" -> "ymcui/Chinese-XLNet"
"ymcui/Chinese-ELECTRA" -> "brightmart/albert_zh"
"ymcui/Chinese-ELECTRA" -> "ymcui/MacBERT"
"ymcui/Chinese-ELECTRA" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/Chinese-ELECTRA" -> "ZhuiyiTechnology/simbert"
"ymcui/Chinese-ELECTRA" -> "CLUEbenchmark/CLUE"
"ymcui/Chinese-ELECTRA" -> "ymcui/Chinese-BERT-wwm"
"ymcui/Chinese-ELECTRA" -> "dbiir/UER-py"
"ymcui/Chinese-ELECTRA" -> "huawei-noah/Pretrained-Language-Model"
"ymcui/Chinese-ELECTRA" -> "CLUEbenchmark/CLUEPretrainedModels"
"ymcui/Chinese-ELECTRA" -> "ymcui/Chinese-PreTrained-XLNet"
"ymcui/Chinese-ELECTRA" -> "loujie0822/DeepIE"
"ymcui/Chinese-XLNet" -> "ymcui/Chinese-ELECTRA"
"ymcui/Chinese-XLNet" -> "ymcui/MacBERT"
"ymcui/Chinese-XLNet" -> "brightmart/roberta_zh"
"ymcui/Chinese-XLNet" -> "ymcui/Chinese-BERT-wwm"
"ymcui/Chinese-XLNet" -> "brightmart/albert_zh"
"ymcui/Chinese-XLNet" -> "airaria/TextBrewer"
"ymcui/Chinese-XLNet" -> "brightmart/xlnet_zh"
"ymcui/Chinese-XLNet" -> "bojone/SimCSE"
"ymcui/Chinese-XLNet" -> "zhaogaofeng611/TextMatch"
"ymcui/Chinese-XLNet" -> "ZhuiyiTechnology/simbert"
"ymcui/Chinese-XLNet" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"ymcui/Chinese-XLNet" -> "zihangdai/xlnet" ["e"=1]
"ymcui/Chinese-XLNet" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/Chinese-XLNet" -> "CLUEbenchmark/CLUEDatasetSearch"
"ymcui/Chinese-XLNet" -> "CLUEbenchmark/CLUE"
"HorieYuan/TransformerTextSummarization" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"HorieYuan/TransformerTextSummarization" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" ["e"=1]
"HorieYuan/TransformerTextSummarization" -> "yamonc/New-Pytorch-Chinese"
"TingFree/NLPer-Arsenal" -> "zhpmatrix/nlp-competitions-list-review"
"TingFree/NLPer-Arsenal" -> "km1994/NLP-Interview-Notes"
"TingFree/NLPer-Arsenal" -> "km1994/nlp_paper_study"
"TingFree/NLPer-Arsenal" -> "loujie0822/DeepIE"
"TingFree/NLPer-Arsenal" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"TingFree/NLPer-Arsenal" -> "z814081807/DeepNER"
"TingFree/NLPer-Arsenal" -> "songyingxin/NLPer-Interview"
"TingFree/NLPer-Arsenal" -> "lonePatient/BERT-NER-Pytorch"
"TingFree/NLPer-Arsenal" -> "DA-southampton/NLP_ability"
"TingFree/NLPer-Arsenal" -> "leerumor/nlp_tutorial"
"TingFree/NLPer-Arsenal" -> "425776024/nlpcda"
"TingFree/NLPer-Arsenal" -> "dbiir/UER-py"
"TingFree/NLPer-Arsenal" -> "GanjinZero/awesome_Chinese_medical_NLP"
"TingFree/NLPer-Arsenal" -> "CLUEbenchmark/CLUE"
"TingFree/NLPer-Arsenal" -> "princeton-nlp/SimCSE"
"bytedance/lightseq" -> "NVIDIA/FasterTransformer" ["e"=1]
"bytedance/lightseq" -> "Tencent/TurboTransformers"
"bytedance/lightseq" -> "bytedance/byteps" ["e"=1]
"bytedance/lightseq" -> "dbiir/UER-py"
"bytedance/lightseq" -> "huawei-noah/Pretrained-Language-Model"
"bytedance/lightseq" -> "princeton-nlp/SimCSE"
"bytedance/lightseq" -> "airaria/TextBrewer"
"bytedance/lightseq" -> "NVIDIA/Megatron-LM" ["e"=1]
"bytedance/lightseq" -> "CLUEbenchmark/CLUE"
"bytedance/lightseq" -> "alibaba/AliceMind"
"bytedance/lightseq" -> "Oneflow-Inc/oneflow" ["e"=1]
"bytedance/lightseq" -> "facebookresearch/fairscale" ["e"=1]
"bytedance/lightseq" -> "IDEA-CCNL/Fengshenbang-LM"
"bytedance/lightseq" -> "brightmart/albert_zh"
"bytedance/lightseq" -> "thunlp/PromptPapers" ["e"=1]
"codemayq/chinese_chatbot_corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"codemayq/chinese_chatbot_corpus" -> "yangjianxin1/GPT2-chitchat"
"codemayq/chinese_chatbot_corpus" -> "thu-coai/CDial-GPT"
"codemayq/chinese_chatbot_corpus" -> "zhaoyingjun/chatbot" ["e"=1]
"codemayq/chinese_chatbot_corpus" -> "brightmart/nlp_chinese_corpus"
"codemayq/chinese_chatbot_corpus" -> "SophonPlus/ChineseNlpCorpus"
"codemayq/chinese_chatbot_corpus" -> "brightmart/albert_zh"
"codemayq/chinese_chatbot_corpus" -> "InsaneLife/ChineseNLPCorpus"
"codemayq/chinese_chatbot_corpus" -> "ymcui/Chinese-BERT-wwm"
"codemayq/chinese_chatbot_corpus" -> "CLUEbenchmark/CLUE"
"codemayq/chinese_chatbot_corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"codemayq/chinese_chatbot_corpus" -> "Doragd/Chinese-Chatbot-PyTorch-Implementation" ["e"=1]
"codemayq/chinese_chatbot_corpus" -> "Morizeyao/GPT2-Chinese"
"codemayq/chinese_chatbot_corpus" -> "Embedding/Chinese-Word-Vectors"
"codemayq/chinese_chatbot_corpus" -> "crownpku/Awesome-Chinese-NLP"
"liuhuanyong/QASystemOnMedicalKG" -> "qq547276542/Agriculture_KnowledgeGraph"
"liuhuanyong/QASystemOnMedicalKG" -> "husthuke/awesome-knowledge-graph"
"liuhuanyong/QASystemOnMedicalKG" -> "zhihao-chen/QASystemOnMedicalGraph"
"liuhuanyong/QASystemOnMedicalKG" -> "npubird/KnowledgeGraphCourse"
"liuhuanyong/QASystemOnMedicalKG" -> "ymcui/Chinese-BERT-wwm"
"liuhuanyong/QASystemOnMedicalKG" -> "WenRichard/KBQA-BERT"
"liuhuanyong/QASystemOnMedicalKG" -> "wangle1218/KBQA-for-Diagnosis"
"liuhuanyong/QASystemOnMedicalKG" -> "macanv/BERT-BiLSTM-CRF-NER"
"liuhuanyong/QASystemOnMedicalKG" -> "ownthink/KnowledgeGraphData"
"liuhuanyong/QASystemOnMedicalKG" -> "GanjinZero/awesome_Chinese_medical_NLP"
"liuhuanyong/QASystemOnMedicalKG" -> "YeYzheng/KGQA-Based-On-medicine"
"liuhuanyong/QASystemOnMedicalKG" -> "thunlp/OpenNRE"
"liuhuanyong/QASystemOnMedicalKG" -> "Embedding/Chinese-Word-Vectors"
"liuhuanyong/QASystemOnMedicalKG" -> "bojone/bert4keras"
"liuhuanyong/QASystemOnMedicalKG" -> "ownthink/Jiagu"
"NLPchina/ansj_seg" -> "NLPchina/nlp-lang"
"NLPchina/ansj_seg" -> "hankcs/HanLP"
"NLPchina/ansj_seg" -> "huaban/jieba-analysis"
"NLPchina/ansj_seg" -> "ysc/word"
"NLPchina/ansj_seg" -> "NLPIR-team/NLPIR"
"NLPchina/ansj_seg" -> "medcl/elasticsearch-analysis-ik" ["e"=1]
"NLPchina/ansj_seg" -> "HIT-SCIR/ltp"
"NLPchina/ansj_seg" -> "fxsjy/jieba"
"NLPchina/ansj_seg" -> "code4craft/webmagic" ["e"=1]
"NLPchina/ansj_seg" -> "FudanNLP/fnlp"
"NLPchina/ansj_seg" -> "alibaba/dubbo" ["e"=1]
"NLPchina/ansj_seg" -> "stanfordnlp/CoreNLP" ["e"=1]
"NLPchina/ansj_seg" -> "NLPchina/elasticsearch-sql" ["e"=1]
"NLPchina/ansj_seg" -> "NLPchina/elasticsearch-analysis-ansj" ["e"=1]
"NLPchina/ansj_seg" -> "NLPchina/Word2VEC_java"
"baidu/Familia" -> "baidu/AnyQ"
"baidu/Familia" -> "baidu/lac"
"baidu/Familia" -> "huyingxi/Synonyms"
"baidu/Familia" -> "brightmart/text_classification" ["e"=1]
"baidu/Familia" -> "Embedding/Chinese-Word-Vectors"
"baidu/Familia" -> "crownpku/Awesome-Chinese-NLP"
"baidu/Familia" -> "NTMC-Community/MatchZoo"
"baidu/Familia" -> "HIT-SCIR/ltp"
"baidu/Familia" -> "brightmart/albert_zh"
"baidu/Familia" -> "faneshion/MatchZoo"
"baidu/Familia" -> "baidu/Senta"
"baidu/Familia" -> "ymcui/Chinese-BERT-wwm"
"baidu/Familia" -> "koth/kcws"
"baidu/Familia" -> "brightmart/nlp_chinese_corpus"
"baidu/Familia" -> "PaddlePaddle/LARK"
"lancopku/pkuseg-python" -> "Embedding/Chinese-Word-Vectors"
"lancopku/pkuseg-python" -> "brightmart/nlp_chinese_corpus"
"lancopku/pkuseg-python" -> "ymcui/Chinese-BERT-wwm"
"lancopku/pkuseg-python" -> "crownpku/Awesome-Chinese-NLP"
"lancopku/pkuseg-python" -> "thunlp/THULAC-Python"
"lancopku/pkuseg-python" -> "brightmart/albert_zh"
"lancopku/pkuseg-python" -> "hankcs/pyhanlp"
"lancopku/pkuseg-python" -> "HIT-SCIR/ltp"
"lancopku/pkuseg-python" -> "macanv/BERT-BiLSTM-CRF-NER"
"lancopku/pkuseg-python" -> "fxsjy/jieba"
"lancopku/pkuseg-python" -> "baidu/lac"
"lancopku/pkuseg-python" -> "isnowfy/snownlp"
"lancopku/pkuseg-python" -> "SophonPlus/ChineseNlpCorpus"
"lancopku/pkuseg-python" -> "hanxiao/bert-as-service" ["e"=1]
"lancopku/pkuseg-python" -> "shibing624/pycorrector"
"zhpmatrix/nlp-competitions-list-review" -> "TingFree/NLPer-Arsenal"
"zhpmatrix/nlp-competitions-list-review" -> "songyingxin/NLPer-Interview"
"zhpmatrix/nlp-competitions-list-review" -> "ymcui/Chinese-BERT-wwm"
"zhpmatrix/nlp-competitions-list-review" -> "geekinglcq/CDCS"
"zhpmatrix/nlp-competitions-list-review" -> "loujie0822/DeepIE"
"zhpmatrix/nlp-competitions-list-review" -> "brightmart/albert_zh"
"zhpmatrix/nlp-competitions-list-review" -> "brightmart/roberta_zh"
"zhpmatrix/nlp-competitions-list-review" -> "km1994/nlp_paper_study"
"zhpmatrix/nlp-competitions-list-review" -> "bojone/bert4keras"
"zhpmatrix/nlp-competitions-list-review" -> "InsaneLife/ChineseNLPCorpus"
"zhpmatrix/nlp-competitions-list-review" -> "macanv/BERT-BiLSTM-CRF-NER"
"zhpmatrix/nlp-competitions-list-review" -> "dbiir/UER-py"
"zhpmatrix/nlp-competitions-list-review" -> "yongzhuo/nlp_xiaojiang"
"zhpmatrix/nlp-competitions-list-review" -> "CLUEbenchmark/CLUE"
"zhpmatrix/nlp-competitions-list-review" -> "Jiakui/awesome-bert"
"CLUEbenchmark/CLUEDatasetSearch" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUEDatasetSearch" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "ymcui/Chinese-BERT-wwm"
"CLUEbenchmark/CLUEDatasetSearch" -> "SophonPlus/ChineseNlpCorpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUEDatasetSearch" -> "bojone/bert4keras"
"CLUEbenchmark/CLUEDatasetSearch" -> "Embedding/Chinese-Word-Vectors"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUEDatasetSearch" -> "dbiir/UER-py"
"CLUEbenchmark/CLUEDatasetSearch" -> "loujie0822/DeepIE"
"CLUEbenchmark/CLUEDatasetSearch" -> "zhpmatrix/nlp-competitions-list-review"
"CLUEbenchmark/CLUEDatasetSearch" -> "shibing624/pycorrector"
"CLUEbenchmark/CLUEDatasetSearch" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"CLUEbenchmark/CLUEDatasetSearch" -> "huawei-noah/Pretrained-Language-Model"
"SeanLee97/xmnlp" -> "ownthink/Jiagu"
"SeanLee97/xmnlp" -> "blmoistawinde/HarvestText"
"SeanLee97/xmnlp" -> "shibing624/pycorrector"
"SeanLee97/xmnlp" -> "ccheng16/correction" ["e"=1]
"SeanLee97/xmnlp" -> "liuhuanyong/ChineseSemanticKB"
"SeanLee97/xmnlp" -> "Roshanson/TextInfoExp"
"SeanLee97/xmnlp" -> "beyondacm/Autochecker4Chinese" ["e"=1]
"SeanLee97/xmnlp" -> "hankcs/pyhanlp"
"SeanLee97/xmnlp" -> "yongzhuo/nlp_xiaojiang"
"SeanLee97/xmnlp" -> "yongzhuo/Macropodus"
"SeanLee97/xmnlp" -> "fighting41love/cocoNLP"
"SeanLee97/xmnlp" -> "taozhijiang/chinese_correct_wsd" ["e"=1]
"SeanLee97/xmnlp" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"SeanLee97/xmnlp" -> "iqiyi/FASPell"
"SeanLee97/xmnlp" -> "murray-z/text_analysis_tools"
"dongrixinyu/JioNLP" -> "dongrixinyu/chinese_keyphrase_extractor"
"dongrixinyu/JioNLP" -> "425776024/nlpcda"
"dongrixinyu/JioNLP" -> "blmoistawinde/HarvestText"
"dongrixinyu/JioNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"dongrixinyu/JioNLP" -> "shibing624/pycorrector"
"dongrixinyu/JioNLP" -> "CLUEbenchmark/CLUE"
"dongrixinyu/JioNLP" -> "dbiir/UER-py"
"dongrixinyu/JioNLP" -> "ZhuiyiTechnology/pretrained-models"
"dongrixinyu/JioNLP" -> "loujie0822/DeepIE"
"dongrixinyu/JioNLP" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"dongrixinyu/JioNLP" -> "zhanlaoban/EDA_NLP_for_Chinese"
"dongrixinyu/JioNLP" -> "ymcui/Chinese-BERT-wwm"
"dongrixinyu/JioNLP" -> "km1994/NLP-Interview-Notes"
"dongrixinyu/JioNLP" -> "lonePatient/BERT-NER-Pytorch"
"dongrixinyu/JioNLP" -> "ownthink/Jiagu"
"thu-coai/CDial-GPT" -> "yangjianxin1/GPT2-chitchat"
"thu-coai/CDial-GPT" -> "thu-coai/EVA"
"thu-coai/CDial-GPT" -> "thu-coai/CrossWOZ" ["e"=1]
"thu-coai/CDial-GPT" -> "codemayq/chinese_chatbot_corpus"
"thu-coai/CDial-GPT" -> "thu-coai/KdConv" ["e"=1]
"thu-coai/CDial-GPT" -> "microsoft/DialoGPT" ["e"=1]
"thu-coai/CDial-GPT" -> "lemon234071/clean-dialog"
"thu-coai/CDial-GPT" -> "CLUEbenchmark/CLUE"
"thu-coai/CDial-GPT" -> "dbiir/UER-py"
"thu-coai/CDial-GPT" -> "Morizeyao/GPT2-Chinese"
"thu-coai/CDial-GPT" -> "imcaspar/gpt2-ml"
"thu-coai/CDial-GPT" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"thu-coai/CDial-GPT" -> "PaddlePaddle/Knover"
"thu-coai/CDial-GPT" -> "thu-coai/ConvLab-2" ["e"=1]
"thu-coai/CDial-GPT" -> "princeton-nlp/SimCSE"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer-sim"
"JunnYu/RoFormer_pytorch" -> "gaohongkui/GlobalPointer_pytorch"
"JunnYu/RoFormer_pytorch" -> "renmada/t5-pegasus-pytorch"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer-v2"
"JunnYu/RoFormer_pytorch" -> "dropreg/R-Drop"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/simbert"
"JunnYu/RoFormer_pytorch" -> "lonePatient/NeZha_Chinese_PyTorch"
"JunnYu/RoFormer_pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"JunnYu/RoFormer_pytorch" -> "shawroad/CoSENT_Pytorch"
"JunnYu/RoFormer_pytorch" -> "zhengyanzhao1997/NLP-model"
"JunnYu/RoFormer_pytorch" -> "universal-ie/UIE"
"JunnYu/RoFormer_pytorch" -> "xhw205/GPLinker_torch"
"airaria/TextBrewer" -> "ymcui/Chinese-ELECTRA"
"airaria/TextBrewer" -> "huawei-noah/Pretrained-Language-Model"
"airaria/TextBrewer" -> "dbiir/UER-py"
"airaria/TextBrewer" -> "brightmart/roberta_zh"
"airaria/TextBrewer" -> "airaria/TextPruner"
"airaria/TextBrewer" -> "autoliuweijie/FastBERT"
"airaria/TextBrewer" -> "loujie0822/DeepIE"
"airaria/TextBrewer" -> "CLUEbenchmark/CLUE"
"airaria/TextBrewer" -> "ZhuiyiTechnology/simbert"
"airaria/TextBrewer" -> "princeton-nlp/SimCSE"
"airaria/TextBrewer" -> "brightmart/albert_zh"
"airaria/TextBrewer" -> "ZhuiyiTechnology/pretrained-models"
"airaria/TextBrewer" -> "nghuyong/ERNIE-Pytorch"
"airaria/TextBrewer" -> "ymcui/Chinese-BERT-wwm"
"airaria/TextBrewer" -> "ymcui/MacBERT"
"lionsoul2014/jcseg" -> "ysc/word"
"lionsoul2014/jcseg" -> "lionsoul2014/friso"
"lionsoul2014/jcseg" -> "NLPchina/ansj_seg"
"lionsoul2014/jcseg" -> "chenlb/mmseg4j-solr"
"lionsoul2014/jcseg" -> "chenlb/mmseg4j-core"
"lionsoul2014/jcseg" -> "huaban/jieba-analysis"
"lionsoul2014/jcseg" -> "NLPchina/nlp-lang"
"lionsoul2014/jcseg" -> "wks/ik-analyzer"
"lionsoul2014/jcseg" -> "NLPchina/elasticsearch-analysis-ansj" ["e"=1]
"lionsoul2014/jcseg" -> "hankcs/hanlp-lucene-plugin"
"lionsoul2014/jcseg" -> "ysc/cws_evaluation"
"lionsoul2014/jcseg" -> "mayabot/mynlp"
"lionsoul2014/jcseg" -> "thunlp/THULAC-Java"
"lionsoul2014/jcseg" -> "sing1ee/dict_build"
"lionsoul2014/jcseg" -> "medcl/elasticsearch-analysis-pinyin" ["e"=1]
"Determined22/zh-NER-TF" -> "zjy-ucas/ChineseNER"
"Determined22/zh-NER-TF" -> "guillaumegenthial/sequence_tagging"
"Determined22/zh-NER-TF" -> "macanv/BERT-BiLSTM-CRF-NER"
"Determined22/zh-NER-TF" -> "shiyybua/NER"
"Determined22/zh-NER-TF" -> "buppt/ChineseNER"
"Determined22/zh-NER-TF" -> "crownpku/Information-Extraction-Chinese"
"Determined22/zh-NER-TF" -> "jiesutd/LatticeLSTM"
"Determined22/zh-NER-TF" -> "luopeixiang/named_entity_recognition"
"Determined22/zh-NER-TF" -> "qq547276542/Agriculture_KnowledgeGraph"
"Determined22/zh-NER-TF" -> "brightmart/albert_zh"
"Determined22/zh-NER-TF" -> "ProHiryu/bert-chinese-ner"
"Determined22/zh-NER-TF" -> "Embedding/Chinese-Word-Vectors"
"Determined22/zh-NER-TF" -> "gaussic/text-classification-cnn-rnn"
"Determined22/zh-NER-TF" -> "thunlp/OpenNRE"
"Determined22/zh-NER-TF" -> "crownpku/Awesome-Chinese-NLP"
"FuYanzhe2/Name-Entity-Recognition" -> "ProHiryu/bert-chinese-ner"
"FuYanzhe2/Name-Entity-Recognition" -> "jiesutd/LatticeLSTM"
"FuYanzhe2/Name-Entity-Recognition" -> "kyzhouhzau/BERT-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "yumath/bertNER"
"FuYanzhe2/Name-Entity-Recognition" -> "macanv/BERT-BiLSTM-CRF-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "zjy-ucas/ChineseNER"
"FuYanzhe2/Name-Entity-Recognition" -> "yuanxiaosc/Entity-Relation-Extraction"
"FuYanzhe2/Name-Entity-Recognition" -> "Determined22/zh-NER-TF"
"FuYanzhe2/Name-Entity-Recognition" -> "shiyybua/NER"
"FuYanzhe2/Name-Entity-Recognition" -> "xuanzebi/BERT-CH-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "crownpku/Information-Extraction-Chinese"
"FuYanzhe2/Name-Entity-Recognition" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"FuYanzhe2/Name-Entity-Recognition" -> "buppt/ChineseNER"
"FuYanzhe2/Name-Entity-Recognition" -> "luopeixiang/named_entity_recognition"
"FuYanzhe2/Name-Entity-Recognition" -> "bojone/bert_in_keras"
"GlassyWing/bi-lstm-crf" -> "GlassyWing/transformer-word-segmenter"
"GlassyWing/bi-lstm-crf" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"GlassyWing/bi-lstm-crf" -> "EricLingRui/NLP-tools"
"GlassyWing/bi-lstm-crf" -> "stephen-v/zh-NER-keras" ["e"=1]
"GlassyWing/bi-lstm-crf" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"GlassyWing/bi-lstm-crf" -> "CLOVEXCWZ/NER_DEMO"
"GlassyWing/bi-lstm-crf" -> "ProHiryu/bert-chinese-ner"
"GlassyWing/bi-lstm-crf" -> "FuYanzhe2/Name-Entity-Recognition"
"GlassyWing/bi-lstm-crf" -> "lpty/nlp_base"
"GlassyWing/bi-lstm-crf" -> "Determined22/zh-NER-TF"
"GlassyWing/bi-lstm-crf" -> "shen1994/chinese_bilstm_cnn_crf"
"GlassyWing/bi-lstm-crf" -> "WhiteGive-Boy/CWS-Hmm_BiLSTM-CRF"
"GlassyWing/bi-lstm-crf" -> "smilelight/lightNLP"
"GlassyWing/bi-lstm-crf" -> "liuhuanyong/ChineseNLPCorpus"
"LeeSureman/Flat-Lattice-Transformer" -> "v-mipeng/LexiconAugmentedNER"
"LeeSureman/Flat-Lattice-Transformer" -> "jiesutd/LatticeLSTM"
"LeeSureman/Flat-Lattice-Transformer" -> "loujie0822/DeepIE"
"LeeSureman/Flat-Lattice-Transformer" -> "ShannonAI/mrc-for-flat-nested-ner"
"LeeSureman/Flat-Lattice-Transformer" -> "lonePatient/BERT-NER-Pytorch"
"LeeSureman/Flat-Lattice-Transformer" -> "CLUEbenchmark/CLUENER2020"
"LeeSureman/Flat-Lattice-Transformer" -> "fastnlp/TENER"
"LeeSureman/Flat-Lattice-Transformer" -> "OYE93/Chinese-NLP-Corpus"
"LeeSureman/Flat-Lattice-Transformer" -> "liuwei1206/LEBERT"
"LeeSureman/Flat-Lattice-Transformer" -> "z814081807/DeepNER"
"LeeSureman/Flat-Lattice-Transformer" -> "ljynlp/W2NER"
"LeeSureman/Flat-Lattice-Transformer" -> "qiufengyuyi/sequence_tagging"
"LeeSureman/Flat-Lattice-Transformer" -> "airaria/TextBrewer"
"LeeSureman/Flat-Lattice-Transformer" -> "wavewangyue/ner"
"LeeSureman/Flat-Lattice-Transformer" -> "brightmart/roberta_zh"
"ProHiryu/albert-chinese-ner" -> "ProHiryu/bert-chinese-ner"
"ProHiryu/albert-chinese-ner" -> "EOA-AILab/NER-Chinese"
"ProHiryu/albert-chinese-ner" -> "MarsRoger/albert_ner"
"ProHiryu/albert-chinese-ner" -> "yumath/bertNER"
"ProHiryu/albert-chinese-ner" -> "jiangnanboy/albert_lstm_crf_ner"
"ProHiryu/albert-chinese-ner" -> "lonePatient/BERT-NER-Pytorch"
"ProHiryu/albert-chinese-ner" -> "xuanzebi/BERT-CH-NER"
"ProHiryu/albert-chinese-ner" -> "CLUEbenchmark/CLUENER2020"
"ProHiryu/albert-chinese-ner" -> "kyzhouhzau/BERT-NER"
"ProHiryu/albert-chinese-ner" -> "brightmart/albert_zh"
"ProHiryu/albert-chinese-ner" -> "qiufengyuyi/sequence_tagging"
"ProHiryu/albert-chinese-ner" -> "macanv/BERT-BiLSTM-CRF-NER"
"ProHiryu/albert-chinese-ner" -> "yuanxiaosc/Entity-Relation-Extraction"
"ProHiryu/albert-chinese-ner" -> "yongzhuo/Macadam"
"ProHiryu/albert-chinese-ner" -> "percent4/ALBERT_NER_KERAS"
"ProHiryu/bert-chinese-ner" -> "ProHiryu/albert-chinese-ner"
"ProHiryu/bert-chinese-ner" -> "kyzhouhzau/BERT-NER"
"ProHiryu/bert-chinese-ner" -> "macanv/BERT-BiLSTM-CRF-NER"
"ProHiryu/bert-chinese-ner" -> "NLPScott/bert-Chinese-classification-task"
"ProHiryu/bert-chinese-ner" -> "FuYanzhe2/Name-Entity-Recognition"
"ProHiryu/bert-chinese-ner" -> "xuanzebi/BERT-CH-NER"
"ProHiryu/bert-chinese-ner" -> "zjy-ucas/ChineseNER"
"ProHiryu/bert-chinese-ner" -> "buppt/ChineseNER"
"ProHiryu/bert-chinese-ner" -> "shiyybua/NER"
"ProHiryu/bert-chinese-ner" -> "Determined22/zh-NER-TF"
"ProHiryu/bert-chinese-ner" -> "crownpku/Information-Extraction-Chinese"
"ProHiryu/bert-chinese-ner" -> "terrifyzhao/bert-utils"
"ProHiryu/bert-chinese-ner" -> "yumath/bertNER"
"ProHiryu/bert-chinese-ner" -> "yuanxiaosc/Entity-Relation-Extraction"
"ProHiryu/bert-chinese-ner" -> "jiesutd/LatticeLSTM"
"UKPLab/elmo-bilstm-cnn-crf" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"UKPLab/elmo-bilstm-cnn-crf" -> "strongio/keras-elmo" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "allenai/bilm-tf" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "searobbersduck/ELMo_Chin"
"UKPLab/elmo-bilstm-cnn-crf" -> "Rokid/ELMo-chinese"
"UKPLab/elmo-bilstm-cnn-crf" -> "PrashantRanjan09/Elmo-Tutorial" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "Hironsan/anago"
"UKPLab/elmo-bilstm-cnn-crf" -> "kermitt2/delft" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "jiesutd/NCRFpp"
"Langboat/Mengzi" -> "Langboat/mengzi-zero-shot"
"Langboat/Mengzi" -> "shawroad/CoSENT_Pytorch"
"Langboat/Mengzi" -> "renmada/t5-pegasus-pytorch"
"Langboat/Mengzi" -> "zejunwang1/CSTS"
"Langboat/Mengzi" -> "fastnlp/CPT"
"Langboat/Mengzi" -> "yym6472/ConSERT"
"Langboat/Mengzi" -> "JunnYu/RoFormer_pytorch"
"Langboat/Mengzi" -> "thu-coai/CDial-GPT"
"Langboat/Mengzi" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"Langboat/Mengzi" -> "CLUEbenchmark/CLUECorpus2020"
"Langboat/Mengzi" -> "IDEA-CCNL/Fengshenbang-LM"
"Langboat/Mengzi" -> "clue-ai/PromptCLUE" ["e"=1]
"DA-southampton/NLP_ability" -> "DA-southampton/Tech_Aarticle"
"DA-southampton/NLP_ability" -> "km1994/nlp_paper_study"
"DA-southampton/NLP_ability" -> "songyingxin/NLPer-Interview"
"DA-southampton/NLP_ability" -> "km1994/NLP-Interview-Notes"
"DA-southampton/NLP_ability" -> "ymcui/Chinese-BERT-wwm"
"DA-southampton/NLP_ability" -> "graykode/nlp-tutorial" ["e"=1]
"DA-southampton/NLP_ability" -> "NLP-LOVE/ML-NLP" ["e"=1]
"DA-southampton/NLP_ability" -> "bojone/bert4keras"
"DA-southampton/NLP_ability" -> "loujie0822/DeepIE"
"DA-southampton/NLP_ability" -> "Embedding/Chinese-Word-Vectors"
"DA-southampton/NLP_ability" -> "zhpmatrix/nlp-competitions-list-review"
"DA-southampton/NLP_ability" -> "FudanNLP/nlp-beginner"
"DA-southampton/NLP_ability" -> "brightmart/albert_zh"
"DA-southampton/NLP_ability" -> "CLUEbenchmark/CLUEDatasetSearch"
"DA-southampton/NLP_ability" -> "TingFree/NLPer-Arsenal"
"DA-southampton/Tech_Aarticle" -> "DA-southampton/NLP_ability"
"DA-southampton/Tech_Aarticle" -> "km1994/nlp_paper_study"
"DA-southampton/Tech_Aarticle" -> "zhpmatrix/nlp-competitions-list-review"
"DA-southampton/Tech_Aarticle" -> "songyingxin/NLPer-Interview"
"DA-southampton/Tech_Aarticle" -> "km1994/NLP-Interview-Notes"
"DA-southampton/Tech_Aarticle" -> "loujie0822/DeepIE"
"DA-southampton/Tech_Aarticle" -> "leerumor/nlp_tutorial"
"DA-southampton/Tech_Aarticle" -> "CLUEbenchmark/CLUEDatasetSearch"
"DA-southampton/Tech_Aarticle" -> "ymcui/Chinese-BERT-wwm"
"DA-southampton/Tech_Aarticle" -> "lonePatient/BERT-NER-Pytorch"
"DA-southampton/Tech_Aarticle" -> "brightmart/albert_zh"
"DA-southampton/Tech_Aarticle" -> "CLUEbenchmark/CLUE"
"DA-southampton/Tech_Aarticle" -> "brightmart/roberta_zh"
"DA-southampton/Tech_Aarticle" -> "BDBC-KG-NLP/QA-Survey"
"DA-southampton/Tech_Aarticle" -> "TingFree/NLPer-Arsenal"
"yanyiwu/cppjieba" -> "yanyiwu/simhash" ["e"=1]
"yanyiwu/cppjieba" -> "thunlp/THULAC"
"yanyiwu/cppjieba" -> "yanyiwu/gojieba" ["e"=1]
"yanyiwu/cppjieba" -> "HIT-SCIR/ltp"
"yanyiwu/cppjieba" -> "yanyiwu/nodejieba" ["e"=1]
"yanyiwu/cppjieba" -> "koth/kcws"
"yanyiwu/cppjieba" -> "baidu/lac"
"yanyiwu/cppjieba" -> "NLPIR-team/NLPIR"
"yanyiwu/cppjieba" -> "fxsjy/jieba"
"yanyiwu/cppjieba" -> "yanyiwu/limonp"
"yanyiwu/cppjieba" -> "dmlc/ps-lite" ["e"=1]
"yanyiwu/cppjieba" -> "huaban/jieba-analysis"
"yanyiwu/cppjieba" -> "open-source-parsers/jsoncpp" ["e"=1]
"yanyiwu/cppjieba" -> "baidu/Familia"
"yanyiwu/cppjieba" -> "NLPchina/ansj_seg"
"isnowfy/snownlp" -> "fxsjy/jieba"
"isnowfy/snownlp" -> "HIT-SCIR/ltp"
"isnowfy/snownlp" -> "letiantian/TextRank4ZH"
"isnowfy/snownlp" -> "crownpku/Awesome-Chinese-NLP"
"isnowfy/snownlp" -> "sloria/TextBlob" ["e"=1]
"isnowfy/snownlp" -> "Embedding/Chinese-Word-Vectors"
"isnowfy/snownlp" -> "lancopku/pkuseg-python"
"isnowfy/snownlp" -> "thunlp/THULAC-Python"
"isnowfy/snownlp" -> "brightmart/nlp_chinese_corpus"
"isnowfy/snownlp" -> "hankcs/pyhanlp"
"isnowfy/snownlp" -> "hankcs/HanLP"
"isnowfy/snownlp" -> "HIT-SCIR/pyltp"
"isnowfy/snownlp" -> "NLPIR-team/NLPIR"
"isnowfy/snownlp" -> "huyingxi/Synonyms"
"isnowfy/snownlp" -> "brightmart/text_classification" ["e"=1]
"liuhuanyong/liuhuanyong.github.io" -> "liuhuanyong/CognitiveInference"
"liuhuanyong/liuhuanyong.github.io" -> "liuhuanyong/EventTriplesExtraction"
"autoliuweijie/FastBERT" -> "BitVoyage/FastBERT"
"autoliuweijie/FastBERT" -> "autoliuweijie/K-BERT"
"autoliuweijie/FastBERT" -> "airaria/TextBrewer"
"autoliuweijie/FastBERT" -> "JetRunner/BERT-of-Theseus"
"autoliuweijie/FastBERT" -> "huawei-noah/Pretrained-Language-Model"
"autoliuweijie/FastBERT" -> "brightmart/roberta_zh"
"autoliuweijie/FastBERT" -> "ymcui/Chinese-PreTrained-XLNet"
"autoliuweijie/FastBERT" -> "ymcui/Chinese-ELECTRA"
"autoliuweijie/FastBERT" -> "CLUEbenchmark/CLUEPretrainedModels"
"autoliuweijie/FastBERT" -> "ZhuiyiTechnology/simbert"
"autoliuweijie/FastBERT" -> "DataTerminatorX/Keyword-BERT"
"autoliuweijie/FastBERT" -> "ZhuiyiTechnology/pretrained-models"
"autoliuweijie/FastBERT" -> "bohanli/BERT-flow"
"autoliuweijie/FastBERT" -> "Tencent/TurboTransformers"
"autoliuweijie/FastBERT" -> "brightmart/albert_zh"
"km1994/NLP-Interview-Notes" -> "km1994/nlp_paper_study"
"km1994/NLP-Interview-Notes" -> "songyingxin/NLPer-Interview"
"km1994/NLP-Interview-Notes" -> "DA-southampton/NLP_ability"
"km1994/NLP-Interview-Notes" -> "TingFree/NLPer-Arsenal"
"km1994/NLP-Interview-Notes" -> "loujie0822/DeepIE"
"km1994/NLP-Interview-Notes" -> "leerumor/nlp_tutorial"
"km1994/NLP-Interview-Notes" -> "zhpmatrix/nlp-competitions-list-review"
"km1994/NLP-Interview-Notes" -> "princeton-nlp/SimCSE"
"km1994/NLP-Interview-Notes" -> "lonePatient/BERT-NER-Pytorch"
"km1994/NLP-Interview-Notes" -> "CLUEbenchmark/CLUE"
"km1994/NLP-Interview-Notes" -> "DA-southampton/Tech_Aarticle"
"km1994/NLP-Interview-Notes" -> "bojone/bert4keras"
"km1994/NLP-Interview-Notes" -> "dbiir/UER-py"
"km1994/NLP-Interview-Notes" -> "ymcui/Chinese-BERT-wwm"
"km1994/NLP-Interview-Notes" -> "CLUEbenchmark/CLUEDatasetSearch"
"songyingxin/NLPer-Interview" -> "km1994/NLP-Interview-Notes"
"songyingxin/NLPer-Interview" -> "DA-southampton/NLP_ability"
"songyingxin/NLPer-Interview" -> "km1994/nlp_paper_study"
"songyingxin/NLPer-Interview" -> "zhpmatrix/nlp-competitions-list-review"
"songyingxin/NLPer-Interview" -> "loujie0822/DeepIE"
"songyingxin/NLPer-Interview" -> "yanqiangmiffy/NLP-Interview-Notes"
"songyingxin/NLPer-Interview" -> "ymcui/Chinese-BERT-wwm"
"songyingxin/NLPer-Interview" -> "NLP-LOVE/ML-NLP" ["e"=1]
"songyingxin/NLPer-Interview" -> "brightmart/albert_zh"
"songyingxin/NLPer-Interview" -> "TingFree/NLPer-Arsenal"
"songyingxin/NLPer-Interview" -> "DarLiner/Algorithm_Interview_Notes-Chinese" ["e"=1]
"songyingxin/NLPer-Interview" -> "DA-southampton/Tech_Aarticle"
"songyingxin/NLPer-Interview" -> "brightmart/roberta_zh"
"songyingxin/NLPer-Interview" -> "yongzhuo/nlp_xiaojiang"
"songyingxin/NLPer-Interview" -> "songyingxin/python-algorithm"
"shibing624/similarity" -> "jsksxs360/AHANLP"
"shibing624/similarity" -> "NLPchina/Word2VEC_java"
"shibing624/similarity" -> "NLPchina/nlp-lang"
"shibing624/similarity" -> "mayabot/mynlp"
"shibing624/similarity" -> "yaleimeng/Final_word_Similarity"
"shibing624/similarity" -> "tdebatty/java-string-similarity" ["e"=1]
"shibing624/similarity" -> "shinyke/Time-NLP"
"shibing624/similarity" -> "NLPchina/ansj_seg"
"shibing624/similarity" -> "ysc/word"
"shibing624/similarity" -> "terrifyzhao/bert-utils"
"shibing624/similarity" -> "jsksxs360/Word2Vec"
"shibing624/similarity" -> "yongzhuo/nlp_xiaojiang"
"shibing624/similarity" -> "huaban/jieba-analysis"
"shibing624/similarity" -> "huyingxi/Synonyms"
"shibing624/similarity" -> "shibing624/text2vec"
"husthuke/awesome-knowledge-graph" -> "npubird/KnowledgeGraphCourse"
"husthuke/awesome-knowledge-graph" -> "liuhuanyong/QASystemOnMedicalKG"
"husthuke/awesome-knowledge-graph" -> "qq547276542/Agriculture_KnowledgeGraph"
"husthuke/awesome-knowledge-graph" -> "lemonhu/stock-knowledge-graph"
"husthuke/awesome-knowledge-graph" -> "ownthink/KnowledgeGraphData"
"husthuke/awesome-knowledge-graph" -> "lihanghang/NLP-Knowledge-Graph"
"husthuke/awesome-knowledge-graph" -> "thunlp/OpenKE" ["e"=1]
"husthuke/awesome-knowledge-graph" -> "memect/kg-beijing"
"husthuke/awesome-knowledge-graph" -> "jm199504/Financial-Knowledge-Graphs"
"husthuke/awesome-knowledge-graph" -> "loujie0822/DeepIE"
"husthuke/awesome-knowledge-graph" -> "ymcui/Chinese-BERT-wwm"
"husthuke/awesome-knowledge-graph" -> "thunlp/OpenNRE"
"husthuke/awesome-knowledge-graph" -> "InsaneLife/ChineseNLPCorpus"
"husthuke/awesome-knowledge-graph" -> "macanv/BERT-BiLSTM-CRF-NER"
"husthuke/awesome-knowledge-graph" -> "SimmerChan/KG-demo-for-movie"
"sing1ee/dict_build" -> "Moonshile/ChineseWordSegmentation"
"sing1ee/dict_build" -> "GeorgeBourne/grid"
"sing1ee/dict_build" -> "bojone/word-discovery"
"sing1ee/dict_build" -> "smoothnlp/SmoothNLP"
"sing1ee/dict_build" -> "zhanzecheng/Chinese_segment_augment"
"sing1ee/dict_build" -> "jannson/yaha"
"sing1ee/dict_build" -> "yanghanxy/New-Word-Detection"
"sing1ee/dict_build" -> "shangjingbo1226/AutoPhrase"
"sing1ee/dict_build" -> "baidu/Familia"
"sing1ee/dict_build" -> "rockingdingo/deepnlp"
"sing1ee/dict_build" -> "koth/kcws"
"sing1ee/dict_build" -> "Rayarrow/New-Word-Discovery"
"sing1ee/dict_build" -> "izisong/new-words-discovery"
"sing1ee/dict_build" -> "chilynn/sequence-labeling"
"sing1ee/dict_build" -> "faneshion/MatchZoo"
"jm199504/Financial-Knowledge-Graphs" -> "lemonhu/stock-knowledge-graph"
"jm199504/Financial-Knowledge-Graphs" -> "husthuke/awesome-knowledge-graph"
"jm199504/Financial-Knowledge-Graphs" -> "npubird/KnowledgeGraphCourse"
"jm199504/Financial-Knowledge-Graphs" -> "liuhuanyong/QASystemOnMedicalKG"
"jm199504/Financial-Knowledge-Graphs" -> "qq547276542/Agriculture_KnowledgeGraph"
"jm199504/Financial-Knowledge-Graphs" -> "ownthink/KnowledgeGraphData"
"jm199504/Financial-Knowledge-Graphs" -> "lihanghang/NLP-Knowledge-Graph"
"jm199504/Financial-Knowledge-Graphs" -> "SimmerChan/KG-demo-for-movie"
"jm199504/Financial-Knowledge-Graphs" -> "wangle1218/KBQA-for-Diagnosis"
"jm199504/Financial-Knowledge-Graphs" -> "zhihao-chen/QASystemOnMedicalGraph"
"jm199504/Financial-Knowledge-Graphs" -> "YeYzheng/KGQA-Based-On-medicine"
"jm199504/Financial-Knowledge-Graphs" -> "ownthink/Jiagu"
"jm199504/Financial-Knowledge-Graphs" -> "myhhub/zero_knowledge_graph"
"jm199504/Financial-Knowledge-Graphs" -> "loujie0822/DeepIE"
"jm199504/Financial-Knowledge-Graphs" -> "WenRichard/KBQA-BERT"
"letiantian/TextRank4ZH" -> "isnowfy/snownlp"
"letiantian/TextRank4ZH" -> "blmoistawinde/HarvestText"
"letiantian/TextRank4ZH" -> "ownthink/Jiagu"
"letiantian/TextRank4ZH" -> "hankcs/pyhanlp"
"letiantian/TextRank4ZH" -> "Embedding/Chinese-Word-Vectors"
"letiantian/TextRank4ZH" -> "ArtistScript/FastTextRank"
"letiantian/TextRank4ZH" -> "ymcui/Chinese-BERT-wwm"
"letiantian/TextRank4ZH" -> "Determined22/zh-NER-TF"
"letiantian/TextRank4ZH" -> "brightmart/nlp_chinese_corpus"
"letiantian/TextRank4ZH" -> "AimeeLee77/keyword_extraction"
"letiantian/TextRank4ZH" -> "Roshanson/TextInfoExp"
"letiantian/TextRank4ZH" -> "brightmart/albert_zh"
"letiantian/TextRank4ZH" -> "macanv/BERT-BiLSTM-CRF-NER"
"letiantian/TextRank4ZH" -> "gaussic/text-classification-cnn-rnn"
"letiantian/TextRank4ZH" -> "terrifyzhao/bert-utils"
"FXLP/MarkTool" -> "deepwel/Chinese-Annotator"
"FXLP/MarkTool" -> "jiesutd/YEDDA"
"FXLP/MarkTool" -> "loujie0822/DeepIE"
"FXLP/MarkTool" -> "chosendai/MarkTool"
"FXLP/MarkTool" -> "panchunguang/ccks_baidu_entity_link"
"FXLP/MarkTool" -> "universal-ie/UIE"
"FXLP/MarkTool" -> "yongzhuo/Pytorch-NLU"
"FXLP/MarkTool" -> "princeton-nlp/PURE"
"FXLP/MarkTool" -> "synyi/poplar"
"FXLP/MarkTool" -> "liuhuanyong/ChineseSemanticKB"
"FXLP/MarkTool" -> "lonePatient/BERT-NER-Pytorch"
"Jiakui/awesome-bert" -> "brightmart/albert_zh"
"Jiakui/awesome-bert" -> "brightmart/roberta_zh"
"Jiakui/awesome-bert" -> "zihangdai/xlnet" ["e"=1]
"Jiakui/awesome-bert" -> "PaddlePaddle/LARK"
"Jiakui/awesome-bert" -> "zhpmatrix/nlp-competitions-list-review"
"Jiakui/awesome-bert" -> "macanv/BERT-BiLSTM-CRF-NER"
"Jiakui/awesome-bert" -> "ymcui/Chinese-BERT-wwm"
"Jiakui/awesome-bert" -> "hanxiao/bert-as-service" ["e"=1]
"Jiakui/awesome-bert" -> "ymcui/Chinese-PreTrained-XLNet"
"Jiakui/awesome-bert" -> "CyberZHG/keras-bert"
"Jiakui/awesome-bert" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"Jiakui/awesome-bert" -> "Y1ran/NLP-BERT--ChineseVersion"
"Jiakui/awesome-bert" -> "chineseGLUE/chineseGLUE"
"Jiakui/awesome-bert" -> "brightmart/bert_language_understanding"
"Jiakui/awesome-bert" -> "NLPScott/bert-Chinese-classification-task"
"dwadden/dygiepp" -> "luanyi/DyGIE"
"dwadden/dygiepp" -> "nlpcl-lab/ace2005-preprocessing"
"dwadden/dygiepp" -> "luyaojie/Text2Event"
"dwadden/dygiepp" -> "princeton-nlp/PURE"
"dwadden/dygiepp" -> "carrie0307/DL_EventExtractionPapers"
"dwadden/dygiepp" -> "xinyadu/eeqa"
"dwadden/dygiepp" -> "dolphin-zs/Doc2EDAG"
"dwadden/dygiepp" -> "raspberryice/gen-arg"
"dwadden/dygiepp" -> "nlpcl-lab/bert-event-extraction"
"dwadden/dygiepp" -> "BaptisteBlouin/EventExtractionPapers"
"dwadden/dygiepp" -> "juntaoy/biaffine-ner"
"dwadden/dygiepp" -> "markus-eberts/spert" ["e"=1]
"dwadden/dygiepp" -> "lx865712528/EMNLP2018-JMEE"
"dwadden/dygiepp" -> "universal-ie/UIE"
"dwadden/dygiepp" -> "thunlp/HMEAE"
"jeffery0628/text_classification" -> "zzy99/epidemic-sentence-pair"
"jeffery0628/text_classification" -> "zhanlaoban/Transformers_for_Text_Classification"
"jeffery0628/text_classification" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"jeffery0628/text_classification" -> "yongzhuo/Macadam"
"jeffery0628/text_classification" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"jeffery0628/text_classification" -> "StanleyLsx/text_classifier"
"jeffery0628/text_classification" -> "hellonlp/classifier_multi_label_textcnn"
"jeffery0628/text_classification" -> "songyingxin/Bert-TextClassification"
"jeffery0628/text_classification" -> "yongzhuo/Keras-TextClassification"
"jeffery0628/text_classification" -> "HoyTta0/KnowledgeDistillation"
"jeffery0628/text_classification" -> "Vincent131499/TextClassifier_Transformer"
"jeffery0628/text_classification" -> "zhaogaofeng611/TextMatch"
"jeffery0628/text_classification" -> "loujie0822/Pre-trained-Models"
"jeffery0628/text_classification" -> "qiangsiwei/bert_distill"
"jeffery0628/text_classification" -> "luopeixiang/textclf"
"jiangxinyang227/textClassifier" -> "jiangxinyang227/NLP-Project"
"jiangxinyang227/textClassifier" -> "terrifyzhao/bert-utils"
"jiangxinyang227/textClassifier" -> "jiangxinyang227/bert-for-task"
"jiangxinyang227/textClassifier" -> "yongzhuo/Keras-TextClassification"
"jiangxinyang227/textClassifier" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiangxinyang227/textClassifier" -> "gaussic/text-classification-cnn-rnn"
"jiangxinyang227/textClassifier" -> "brightmart/text_classification" ["e"=1]
"jiangxinyang227/textClassifier" -> "NLPScott/bert-Chinese-classification-task"
"jiangxinyang227/textClassifier" -> "Determined22/zh-NER-TF"
"jiangxinyang227/textClassifier" -> "msgi/nlp-journey"
"jiangxinyang227/textClassifier" -> "yongzhuo/nlp_xiaojiang"
"jiangxinyang227/textClassifier" -> "ymcui/Chinese-BERT-wwm"
"jiangxinyang227/textClassifier" -> "brightmart/roberta_zh"
"jiangxinyang227/textClassifier" -> "brightmart/albert_zh"
"jiangxinyang227/textClassifier" -> "CyberZHG/keras-bert"
"lavis-nlp/spert" -> "princeton-nlp/PURE"
"lavis-nlp/spert" -> "dwadden/dygiepp"
"lavis-nlp/spert" -> "neulab/SpanNER" ["e"=1]
"lavis-nlp/spert" -> "thunlp/PL-Marker"
"lavis-nlp/spert" -> "LorrinWWW/two-are-better-than-one"
"lavis-nlp/spert" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"lavis-nlp/spert" -> "Coopercoppers/PFN"
"lavis-nlp/spert" -> "lavis-nlp/jerex"
"lavis-nlp/spert" -> "Onion12138/CasRelPyTorch"
"lavis-nlp/spert" -> "weizhepei/CasRel"
"lavis-nlp/spert" -> "luanyi/DyGIE"
"lavis-nlp/spert" -> "juntaoy/biaffine-ner"
"liuhuanyong/EventTriplesExtraction" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/EventTriplesExtraction" -> "liuhuanyong/TextGrapher"
"liuhuanyong/EventTriplesExtraction" -> "lemonhu/open-entity-relation-extraction"
"liuhuanyong/EventTriplesExtraction" -> "twjiang/fact_triple_extraction"
"liuhuanyong/EventTriplesExtraction" -> "liuhuanyong/CausalityEventExtraction"
"liuhuanyong/EventTriplesExtraction" -> "xiaoqian19940510/Event-Extraction"
"liuhuanyong/EventTriplesExtraction" -> "nlpcl-lab/bert-event-extraction"
"liuhuanyong/EventTriplesExtraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"liuhuanyong/EventTriplesExtraction" -> "shijiebei2009/CEC-Corpus"
"liuhuanyong/EventTriplesExtraction" -> "bojone/kg-2019"
"liuhuanyong/EventTriplesExtraction" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/EventTriplesExtraction" -> "zhang17173/Event-Extraction"
"liuhuanyong/EventTriplesExtraction" -> "blmoistawinde/HarvestText"
"liuhuanyong/EventTriplesExtraction" -> "lixiang0/WEB_KG"
"liuhuanyong/EventTriplesExtraction" -> "yuanxiaosc/Entity-Relation-Extraction"
"lx865712528/EMNLP2018-JMEE" -> "nlpcl-lab/bert-event-extraction"
"lx865712528/EMNLP2018-JMEE" -> "nlpcl-lab/ace2005-preprocessing"
"lx865712528/EMNLP2018-JMEE" -> "lx865712528/ACL2019-ODEE"
"lx865712528/EMNLP2018-JMEE" -> "thunlp/HMEAE"
"lx865712528/EMNLP2018-JMEE" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"lx865712528/EMNLP2018-JMEE" -> "qiufengyuyi/event_extraction"
"lx865712528/EMNLP2018-JMEE" -> "liushulinle/event_detection_without_triggers"
"lx865712528/EMNLP2018-JMEE" -> "xinyadu/eeqa"
"lx865712528/EMNLP2018-JMEE" -> "sanmusunrise/NPNs"
"lx865712528/EMNLP2018-JMEE" -> "jeffery0628/baidu_ee"
"lx865712528/EMNLP2018-JMEE" -> "xinyadu/doc_event_role"
"lx865712528/EMNLP2018-JMEE" -> "anoperson/jointEE-NN"
"lx865712528/EMNLP2018-JMEE" -> "thunlp/Adv-ED"
"lx865712528/EMNLP2018-JMEE" -> "yubochen/NBTNGMA4ED"
"lx865712528/EMNLP2018-JMEE" -> "BaptisteBlouin/EventExtractionPapers"
"median-research-group/LibMTL" -> "Manchery/awesome-multi-task-learning"
"median-research-group/LibMTL" -> "isl-org/MultiObjectiveOptimization"
"median-research-group/LibMTL" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"median-research-group/LibMTL" -> "AvivNavon/nash-mtl"
"median-research-group/LibMTL" -> "lorenmt/auto-lambda"
"median-research-group/LibMTL" -> "mbs0221/Multitask-Learning"
"median-research-group/LibMTL" -> "Mikoto10032/AutomaticWeightedLoss"
"median-research-group/LibMTL" -> "WeiChengTseng/Pytorch-PCGrad"
"median-research-group/LibMTL" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"median-research-group/LibMTL" -> "lorenmt/mtan"
"median-research-group/LibMTL" -> "Cranial-XIX/CAGrad"
"median-research-group/LibMTL" -> "ranandalon/mtl"
"median-research-group/LibMTL" -> "yfzhang114/Generalization-Causality" ["e"=1]
"median-research-group/LibMTL" -> "thuml/Transfer-Learning-Library" ["e"=1]
"median-research-group/LibMTL" -> "open-mmlab/mmselfsup" ["e"=1]
"nlplab/brat" -> "jiesutd/YEDDA"
"nlplab/brat" -> "deepwel/Chinese-Annotator"
"nlplab/brat" -> "doccano/doccano"
"nlplab/brat" -> "chakki-works/doccano" ["e"=1]
"nlplab/brat" -> "jiesutd/NCRFpp"
"nlplab/brat" -> "Franck-Dernoncourt/NeuroNER"
"nlplab/brat" -> "inception-project/inception"
"nlplab/brat" -> "machinalis/iepy" ["e"=1]
"nlplab/brat" -> "glample/tagger"
"nlplab/brat" -> "synyi/poplar"
"nlplab/brat" -> "macanv/BERT-BiLSTM-CRF-NER"
"nlplab/brat" -> "crownpku/Information-Extraction-Chinese"
"nlplab/brat" -> "thunlp/OpenNRE"
"nlplab/brat" -> "webanno/webanno"
"nlplab/brat" -> "loujie0822/DeepIE"
"universal-ie/UIE" -> "heiheiyoyo/uie_pytorch"
"universal-ie/UIE" -> "loujie0822/DeepIE"
"universal-ie/UIE" -> "thunlp/PL-Marker"
"universal-ie/UIE" -> "gaohongkui/GlobalPointer_pytorch"
"universal-ie/UIE" -> "luyaojie/Text2Event"
"universal-ie/UIE" -> "ljynlp/W2NER"
"universal-ie/UIE" -> "lonePatient/BERT-NER-Pytorch"
"universal-ie/UIE" -> "carrie0307/DL_EventExtractionPapers"
"universal-ie/UIE" -> "ShannonAI/mrc-for-flat-nested-ner"
"universal-ie/UIE" -> "dwadden/dygiepp"
"universal-ie/UIE" -> "princeton-nlp/PURE"
"universal-ie/UIE" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"universal-ie/UIE" -> "xiaoqian19940510/Event-Extraction"
"universal-ie/UIE" -> "weizhepei/CasRel"
"universal-ie/UIE" -> "LeeSureman/Flat-Lattice-Transformer"
"yongzhuo/Pytorch-NLU" -> "hellonlp/classifier_multi_label"
"yongzhuo/Pytorch-NLU" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"lorenmt/mtan" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"lorenmt/mtan" -> "mbs0221/Multitask-Learning"
"lorenmt/mtan" -> "ranandalon/mtl"
"lorenmt/mtan" -> "yaringal/multi-task-learning-example"
"lorenmt/mtan" -> "helloyide/Cross-stitch-Networks-for-Multi-task-Learning"
"lorenmt/mtan" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"lorenmt/mtan" -> "tianheyu927/PCGrad"
"lorenmt/mtan" -> "Manchery/awesome-multi-task-learning"
"lorenmt/mtan" -> "intel-isl/MultiObjectiveOptimization"
"lorenmt/mtan" -> "hosseinshn/GradNorm"
"lorenmt/mtan" -> "brianlan/pytorch-grad-norm"
"lorenmt/mtan" -> "Mikoto10032/AutomaticWeightedLoss"
"lorenmt/mtan" -> "hav4ik/Hydra"
"lorenmt/mtan" -> "lorenmt/auto-lambda"
"lorenmt/mtan" -> "sunxm2357/AdaShare"
"OYE93/Chinese-NLP-Corpus" -> "LeeSureman/Flat-Lattice-Transformer"
"OYE93/Chinese-NLP-Corpus" -> "jiesutd/LatticeLSTM"
"OYE93/Chinese-NLP-Corpus" -> "lonePatient/BERT-NER-Pytorch"
"OYE93/Chinese-NLP-Corpus" -> "alibaba-research/ChineseBLUE"
"OYE93/Chinese-NLP-Corpus" -> "GanjinZero/awesome_Chinese_medical_NLP"
"OYE93/Chinese-NLP-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"OYE93/Chinese-NLP-Corpus" -> "loujie0822/DeepIE"
"OYE93/Chinese-NLP-Corpus" -> "CLUEbenchmark/CLUENER2020"
"OYE93/Chinese-NLP-Corpus" -> "v-mipeng/LexiconAugmentedNER"
"OYE93/Chinese-NLP-Corpus" -> "ShannonAI/mrc-for-flat-nested-ner"
"OYE93/Chinese-NLP-Corpus" -> "CLUEbenchmark/CLUE"
"OYE93/Chinese-NLP-Corpus" -> "lrs1353281004/Chinese_medical_NLP"
"OYE93/Chinese-NLP-Corpus" -> "panchunguang/ccks_baidu_entity_link"
"OYE93/Chinese-NLP-Corpus" -> "ChineseGLUE/ChineseGLUE"
"OYE93/Chinese-NLP-Corpus" -> "hltcoe/golden-horse"
"doccano/doccano" -> "heartexlabs/label-studio" ["e"=1]
"doccano/doccano" -> "ymcui/Chinese-BERT-wwm"
"doccano/doccano" -> "UKPLab/sentence-transformers" ["e"=1]
"doccano/doccano" -> "flairNLP/flair" ["e"=1]
"doccano/doccano" -> "deepwel/Chinese-Annotator"
"doccano/doccano" -> "CLUEbenchmark/CLUE"
"doccano/doccano" -> "loujie0822/DeepIE"
"doccano/doccano" -> "PaddlePaddle/PaddleNLP"
"doccano/doccano" -> "hanxiao/bert-as-service" ["e"=1]
"doccano/doccano" -> "macanv/BERT-BiLSTM-CRF-NER"
"doccano/doccano" -> "makcedward/nlpaug" ["e"=1]
"doccano/doccano" -> "nlplab/brat"
"doccano/doccano" -> "thunlp/OpenNRE"
"doccano/doccano" -> "MaartenGr/BERTopic" ["e"=1]
"doccano/doccano" -> "bojone/bert4keras"
"shibing624/text2vec" -> "GanymedeNil/document.ai" ["e"=1]
"shibing624/text2vec" -> "shibing624/similarities"
"shibing624/text2vec" -> "imClumsyPanda/langchain-ChatGLM" ["e"=1]
"shibing624/text2vec" -> "shibing624/textgen" ["e"=1]
"shibing624/text2vec" -> "mymusise/ChatGLM-Tuning" ["e"=1]
"shibing624/text2vec" -> "yuanzhoulvpi2017/zero_nlp" ["e"=1]
"shibing624/text2vec" -> "bojone/CoSENT"
"shibing624/text2vec" -> "shibing624/pycorrector"
"shibing624/text2vec" -> "IDEA-CCNL/Fengshenbang-LM"
"shibing624/text2vec" -> "dbiir/UER-py"
"shibing624/text2vec" -> "425776024/nlpcda"
"shibing624/text2vec" -> "lonePatient/BERT-NER-Pytorch"
"shibing624/text2vec" -> "km1994/NLP-Interview-Notes"
"shibing624/text2vec" -> "zhaogaofeng611/TextMatch"
"shibing624/text2vec" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"wrayzheng/gmm-em-clustering" -> "stober/gmm"
"alibaba/AliceMind" -> "princeton-nlp/SimCSE"
"alibaba/AliceMind" -> "OFA-Sys/OFA" ["e"=1]
"alibaba/AliceMind" -> "huawei-noah/Pretrained-Language-Model"
"alibaba/AliceMind" -> "dbiir/UER-py"
"alibaba/AliceMind" -> "dropreg/R-Drop"
"alibaba/AliceMind" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"alibaba/AliceMind" -> "LeeSureman/Flat-Lattice-Transformer"
"alibaba/AliceMind" -> "CLUEbenchmark/CLUE"
"alibaba/AliceMind" -> "ZhuiyiTechnology/pretrained-models"
"alibaba/AliceMind" -> "IDEA-CCNL/Fengshenbang-LM"
"alibaba/AliceMind" -> "thu-coai/CDial-GPT"
"alibaba/AliceMind" -> "ymcui/Chinese-ELECTRA"
"alibaba/AliceMind" -> "alibaba/EasyNLP"
"alibaba/AliceMind" -> "bytedance/lightseq"
"alibaba/AliceMind" -> "shibing624/pycorrector"
"Fengfeng1024/SOHU-baseline" -> "lmhgithi/SOHU-baseline"
"Fengfeng1024/SOHU-baseline" -> "sohucampus2019/coreEntityEmotion_baseline"
"Fengfeng1024/SOHU-baseline" -> "ouwenjie03/sohucampus2019"
"FudanNLP/nlp-beginner" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"FudanNLP/nlp-beginner" -> "graykode/nlp-tutorial" ["e"=1]
"FudanNLP/nlp-beginner" -> "ymcui/Chinese-BERT-wwm"
"FudanNLP/nlp-beginner" -> "zibuyu/research_tao"
"FudanNLP/nlp-beginner" -> "nndl/nndl.github.io" ["e"=1]
"FudanNLP/nlp-beginner" -> "Embedding/Chinese-Word-Vectors"
"FudanNLP/nlp-beginner" -> "zhpmatrix/nlp-competitions-list-review"
"FudanNLP/nlp-beginner" -> "DA-southampton/NLP_ability"
"FudanNLP/nlp-beginner" -> "crownpku/Awesome-Chinese-NLP"
"FudanNLP/nlp-beginner" -> "km1994/nlp_paper_study"
"FudanNLP/nlp-beginner" -> "yandexdataschool/nlp_course" ["e"=1]
"FudanNLP/nlp-beginner" -> "NLP-LOVE/ML-NLP" ["e"=1]
"FudanNLP/nlp-beginner" -> "fastnlp/fastNLP"
"FudanNLP/nlp-beginner" -> "songyingxin/NLPer-Interview"
"FudanNLP/nlp-beginner" -> "DSKSD/DeepNLP-models-Pytorch" ["e"=1]
"duoergun0729/nlp" -> "crownpku/Awesome-Chinese-NLP"
"duoergun0729/nlp" -> "FudanNLP/nlp-beginner"
"duoergun0729/nlp" -> "NLP-LOVE/ML-NLP" ["e"=1]
"duoergun0729/nlp" -> "msgi/nlp-journey"
"duoergun0729/nlp" -> "songyingxin/NLPer-Interview"
"duoergun0729/nlp" -> "SophonPlus/ChineseNlpCorpus"
"duoergun0729/nlp" -> "brightmart/nlp_chinese_corpus"
"duoergun0729/nlp" -> "zhpmatrix/nlp-competitions-list-review"
"duoergun0729/nlp" -> "graykode/nlp-tutorial" ["e"=1]
"duoergun0729/nlp" -> "Roshanson/TextInfoExp"
"duoergun0729/nlp" -> "NLP-LOVE/Introduction-NLP"
"duoergun0729/nlp" -> "husthuke/awesome-knowledge-graph"
"duoergun0729/nlp" -> "Embedding/Chinese-Word-Vectors"
"duoergun0729/nlp" -> "ymcui/Chinese-BERT-wwm"
"duoergun0729/nlp" -> "nlpinaction/learning-nlp"
"wzc570738205/smartParsePro" -> "akebe/address-parse"
"wzc570738205/smartParsePro" -> "ldwonday/zh-address-parse"
"wzc570738205/smartParsePro" -> "wzc570738205/smart_parse"
"wzc570738205/smartParsePro" -> "pupuk/address-smart-parse"
"wzc570738205/smartParsePro" -> "pupuk/address"
"wzc570738205/smartParsePro" -> "liuzhibin-cn/address-semantic-search"
"wzc570738205/smartParsePro" -> "yixi195/smart-address-parse"
"wzc570738205/smartParsePro" -> "yihenglu/chinese-address-segment"
"wzc570738205/smartParsePro" -> "DQinYuan/chinese_province_city_area_mapper"
"NTMC-Community/MatchZoo" -> "NTMC-Community/MatchZoo-py"
"NTMC-Community/MatchZoo" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"NTMC-Community/MatchZoo" -> "baidu/AnyQ"
"NTMC-Community/MatchZoo" -> "brightmart/albert_zh"
"NTMC-Community/MatchZoo" -> "terrifyzhao/text_matching"
"NTMC-Community/MatchZoo" -> "ymcui/Chinese-BERT-wwm"
"NTMC-Community/MatchZoo" -> "terrifyzhao/bert-utils"
"NTMC-Community/MatchZoo" -> "bojone/bert4keras"
"NTMC-Community/MatchZoo" -> "brightmart/roberta_zh"
"NTMC-Community/MatchZoo" -> "dbiir/UER-py"
"NTMC-Community/MatchZoo" -> "macanv/BERT-BiLSTM-CRF-NER"
"NTMC-Community/MatchZoo" -> "hanxiao/bert-as-service" ["e"=1]
"NTMC-Community/MatchZoo" -> "loujie0822/DeepIE"
"NTMC-Community/MatchZoo" -> "Embedding/Chinese-Word-Vectors"
"NTMC-Community/MatchZoo" -> "brightmart/nlp_chinese_corpus"
"yongzhuo/nlp_xiaojiang" -> "yongzhuo/Keras-TextClassification"
"yongzhuo/nlp_xiaojiang" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yongzhuo/nlp_xiaojiang" -> "terrifyzhao/bert-utils"
"yongzhuo/nlp_xiaojiang" -> "zhpmatrix/nlp-competitions-list-review"
"yongzhuo/nlp_xiaojiang" -> "msgi/nlp-journey"
"yongzhuo/nlp_xiaojiang" -> "brightmart/roberta_zh"
"yongzhuo/nlp_xiaojiang" -> "brightmart/albert_zh"
"yongzhuo/nlp_xiaojiang" -> "ZhuiyiTechnology/pretrained-models"
"yongzhuo/nlp_xiaojiang" -> "WenRichard/KBQA-BERT"
"yongzhuo/nlp_xiaojiang" -> "songyingxin/NLPer-Interview"
"yongzhuo/nlp_xiaojiang" -> "terrifyzhao/text_matching"
"yongzhuo/nlp_xiaojiang" -> "ymcui/Chinese-BERT-wwm"
"yongzhuo/nlp_xiaojiang" -> "ymcui/Chinese-PreTrained-XLNet"
"yongzhuo/nlp_xiaojiang" -> "macanv/BERT-BiLSTM-CRF-NER"
"yongzhuo/nlp_xiaojiang" -> "ownthink/Jiagu"
"ziweipolaris/atec2018-nlp" -> "raven4752/huabei"
"ziweipolaris/atec2018-nlp" -> "Huijun-Cui/ATEC-NLP"
"ziweipolaris/atec2018-nlp" -> "zle1992/atec"
"ziweipolaris/atec2018-nlp" -> "Lapis-Hong/atec-nlp"
"ziweipolaris/atec2018-nlp" -> "ami66/nlp-competitions-list-review"
"ziweipolaris/atec2018-nlp" -> "LittletreeZou/Question-Pairs-Matching"
"ziweipolaris/atec2018-nlp" -> "Leputa/CIKM-AnalytiCup-2018"
"ziweipolaris/atec2018-nlp" -> "zixuanweeei/atec-sim"
"ziweipolaris/atec2018-nlp" -> "brightmart/nlu_sim"
"fastnlp/fitlog" -> "fastnlp/fastNLP"
"fastnlp/fitlog" -> "NVIDIA/runx" ["e"=1]
"fastnlp/fitlog" -> "wandb/client" ["e"=1]
"fastnlp/fitlog" -> "fastnlp/fastHan"
"fastnlp/fitlog" -> "zhpmatrix/nlp-competitions-list-review"
"fastnlp/fitlog" -> "yuchenlin/rebiber" ["e"=1]
"fastnlp/fitlog" -> "didi/ChineseNLP"
"fastnlp/fitlog" -> "princeton-nlp/SimCSE"
"fastnlp/fitlog" -> "bighuang624/AI-research-tools" ["e"=1]
"fastnlp/fitlog" -> "dbiir/UER-py"
"fastnlp/fitlog" -> "jinfagang/alfred" ["e"=1]
"fastnlp/fitlog" -> "airaria/TextBrewer"
"fastnlp/fitlog" -> "subeeshvasu/Awesome-Learning-with-Label-Noise" ["e"=1]
"fastnlp/fitlog" -> "dair-ai/ml-visuals" ["e"=1]
"fastnlp/fitlog" -> "bytedance/lightseq"
"SmallVagetable/machine_learning_python" -> "KangCai/Machine-Learning-Algorithm"
"SmallVagetable/machine_learning_python" -> "jiangxinyang227/textClassifier"
"SmallVagetable/machine_learning_python" -> "Erikfather/Decision_tree-python" ["e"=1]
"SmallVagetable/machine_learning_python" -> "ice-tong/ML_demo"
"SmallVagetable/machine_learning_python" -> "ProHiryu/bert-chinese-ner"
"SmallVagetable/machine_learning_python" -> "wrayzheng/gmm-em-clustering"
"SmallVagetable/machine_learning_python" -> "NLPScott/bert-Chinese-classification-task"
"SmallVagetable/machine_learning_python" -> "zhengyima/mnist-classification" ["e"=1]
"SmallVagetable/machine_learning_python" -> "aimi-cn/AILearners" ["e"=1]
"SmallVagetable/machine_learning_python" -> "Anfany/Machine-Learning-for-Beginner-by-Python3"
"SmallVagetable/machine_learning_python" -> "Determined22/zh-NER-TF"
"SmallVagetable/machine_learning_python" -> "FuYanzhe2/Name-Entity-Recognition"
"SmallVagetable/machine_learning_python" -> "SimmerChan/KG-demo-for-movie"
"SmallVagetable/machine_learning_python" -> "zjy-ucas/ChineseNER"
"SmallVagetable/machine_learning_python" -> "bojone/attention" ["e"=1]
"BrikerMan/Kashgari" -> "CyberZHG/keras-bert"
"BrikerMan/Kashgari" -> "macanv/BERT-BiLSTM-CRF-NER"
"BrikerMan/Kashgari" -> "bojone/bert4keras"
"BrikerMan/Kashgari" -> "brightmart/albert_zh"
"BrikerMan/Kashgari" -> "ymcui/Chinese-BERT-wwm"
"BrikerMan/Kashgari" -> "brightmart/roberta_zh"
"BrikerMan/Kashgari" -> "hanxiao/bert-as-service" ["e"=1]
"BrikerMan/Kashgari" -> "CLUEbenchmark/CLUE"
"BrikerMan/Kashgari" -> "crownpku/Information-Extraction-Chinese"
"BrikerMan/Kashgari" -> "yongzhuo/Keras-TextClassification"
"BrikerMan/Kashgari" -> "Embedding/Chinese-Word-Vectors"
"BrikerMan/Kashgari" -> "brightmart/text_classification" ["e"=1]
"BrikerMan/Kashgari" -> "brightmart/nlp_chinese_corpus"
"BrikerMan/Kashgari" -> "dbiir/UER-py"
"BrikerMan/Kashgari" -> "bojone/bert_in_keras"
"HandsomeCao/Bert-BiLSTM-CRF-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"HandsomeCao/Bert-BiLSTM-CRF-pytorch" -> "PeijiYang/BERT-BiLSTM-CRF-NER-pytorch"
"HandsomeCao/Bert-BiLSTM-CRF-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"MuQiuJun-AI/bert4pytorch" -> "Tongjilibo/bert4torch" ["e"=1]
"MuQiuJun-AI/bert4pytorch" -> "yongzhuo/Pytorch-NLU"
"MuQiuJun-AI/bert4pytorch" -> "shawroad/CoSENT_Pytorch"
"MuQiuJun-AI/bert4pytorch" -> "JunnYu/RoFormer_pytorch"
"MuQiuJun-AI/bert4pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"MuQiuJun-AI/bert4pytorch" -> "bojone/CoSENT"
"MuQiuJun-AI/bert4pytorch" -> "shawroad/NLP_pytorch_project"
"MuQiuJun-AI/bert4pytorch" -> "zhengyanzhao1997/NLP-model"
"MuQiuJun-AI/bert4pytorch" -> "xiangking/ark-nlp" ["e"=1]
"ZhuiyiTechnology/roformer" -> "JunnYu/RoFormer_pytorch"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/roformer-v2"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/roformer" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/roformer" -> "bojone/GlobalPointer"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/GAU-alpha"
"ZhuiyiTechnology/roformer" -> "gaohongkui/TPLinker-NER"
"ZhuiyiTechnology/roformer" -> "zhengyanzhao1997/NLP-model"
"bojone/GlobalPointer" -> "gaohongkui/GlobalPointer_pytorch"
"bojone/GlobalPointer" -> "xhw205/GlobalPointer_torch"
"bojone/GlobalPointer" -> "bojone/GPLinker"
"bojone/GlobalPointer" -> "xhw205/GPLinker_torch"
"bojone/GlobalPointer" -> "neulab/SpanNER" ["e"=1]
"bojone/GlobalPointer" -> "xhw205/Efficient-GlobalPointer-torch"
"leerumor/nlp_tutorial" -> "km1994/nlp_paper_study"
"leerumor/nlp_tutorial" -> "km1994/NLP-Interview-Notes"
"leerumor/nlp_tutorial" -> "TingFree/NLPer-Arsenal"
"leerumor/nlp_tutorial" -> "leerumor/ai-study"
"leerumor/nlp_tutorial" -> "DA-southampton/NLP_ability"
"leerumor/nlp_tutorial" -> "loujie0822/DeepIE"
"leerumor/nlp_tutorial" -> "DA-southampton/Tech_Aarticle"
"leerumor/nlp_tutorial" -> "songyingxin/NLPer-Interview"
"leerumor/nlp_tutorial" -> "lonePatient/BERT-NER-Pytorch"
"leerumor/nlp_tutorial" -> "FudanNLP/nlp-beginner"
"leerumor/nlp_tutorial" -> "zhpmatrix/nlp-competitions-list-review"
"leerumor/nlp_tutorial" -> "649453932/Chinese-Text-Classification-Pytorch"
"leerumor/nlp_tutorial" -> "DengBoCong/nlp-paper"
"leerumor/nlp_tutorial" -> "NLP-LOVE/Introduction-NLP"
"leerumor/nlp_tutorial" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"qiufengyuyi/sequence_tagging" -> "qiufengyuyi/event_extraction"
"qiufengyuyi/sequence_tagging" -> "ShannonAI/mrc-for-flat-nested-ner"
"qiufengyuyi/sequence_tagging" -> "v-mipeng/LexiconAugmentedNER"
"qiufengyuyi/sequence_tagging" -> "loujie0822/DeepIE"
"qiufengyuyi/sequence_tagging" -> "z814081807/DeepNER"
"qiufengyuyi/sequence_tagging" -> "LeeSureman/Flat-Lattice-Transformer"
"qiufengyuyi/sequence_tagging" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"qiufengyuyi/sequence_tagging" -> "lonePatient/BERT-NER-Pytorch"
"qiufengyuyi/sequence_tagging" -> "jiesutd/LatticeLSTM"
"qiufengyuyi/sequence_tagging" -> "wavewangyue/ner"
"qiufengyuyi/sequence_tagging" -> "CLUEbenchmark/CLUEPretrainedModels"
"qiufengyuyi/sequence_tagging" -> "CLUEbenchmark/CLUENER2020"
"qiufengyuyi/sequence_tagging" -> "juntaoy/biaffine-ner"
"qiufengyuyi/sequence_tagging" -> "fastnlp/TENER"
"qiufengyuyi/sequence_tagging" -> "ProHiryu/albert-chinese-ner"
"soulbliss/NLP-conference-compendium" -> "changwookjun/nlp-paper"
"soulbliss/NLP-conference-compendium" -> "PengboLiu/NLP-Papers"
"soulbliss/NLP-conference-compendium" -> "loujie0822/DeepIE"
"soulbliss/NLP-conference-compendium" -> "IndexFziQ/GNN4NLP-Papers" ["e"=1]
"soulbliss/NLP-conference-compendium" -> "zibuyu/research_tao"
"soulbliss/NLP-conference-compendium" -> "didi/ChineseNLP"
"soulbliss/NLP-conference-compendium" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"ECNUdase/pdf" -> "ECNUdase/Seminar-Materials"
"ECNUdase/pdf" -> "ECNUdase/Seminar-Deep-Learning"
"ECNUdase/pdf" -> "CrisJk/Agriculture-KnowledgeGraph-Data"
"ECNUdase/pdf" -> "qq547276542/Agriculture_KnowledgeGraph"
"leerumor/ai-study" -> "leerumor/nlp_tutorial"
"leerumor/ai-study" -> "yanqiangmiffy/NLP-Interview-Notes"
"leerumor/ai-study" -> "bojone/GlobalPointer"
"leerumor/ai-study" -> "leerumor/contrastive_learning_codes" ["e"=1]
"PaddlePaddle/Knover" -> "thu-coai/EVA"
"PaddlePaddle/Knover" -> "thu-coai/CDial-GPT"
"PaddlePaddle/Knover" -> "thu-coai/CrossWOZ" ["e"=1]
"PaddlePaddle/Knover" -> "PaddlePaddle/Research"
"PaddlePaddle/Knover" -> "budzianowski/multiwoz" ["e"=1]
"PaddlePaddle/Knover" -> "thu-coai/KdConv" ["e"=1]
"PaddlePaddle/Knover" -> "thu-coai/ConvLab-2" ["e"=1]
"PaddlePaddle/Knover" -> "TsinghuaAI/CPM-Generate"
"PaddlePaddle/Knover" -> "alexa/alexa-with-dstc9-track1-dataset" ["e"=1]
"PaddlePaddle/Knover" -> "SivilTaram/Persona-Dialogue-Generation" ["e"=1]
"PaddlePaddle/Knover" -> "lemon234071/clean-dialog"
"PaddlePaddle/Knover" -> "yangjianxin1/GPT2-chitchat"
"PaddlePaddle/Knover" -> "bckim92/sequential-knowledge-transformer" ["e"=1]
"PaddlePaddle/Knover" -> "ChuanMeng/Knowldege-Grounded-Conversation" ["e"=1]
"PaddlePaddle/Knover" -> "PaddlePaddle/RocketQA" ["e"=1]
"rsanshierli/EasyBert" -> "zhaogaofeng611/TextMatch"
"rsanshierli/EasyBert" -> "Brokenwind/BertSimilarity"
"rsanshierli/EasyBert" -> "Jacen789/relation-extraction"
"rsanshierli/EasyBert" -> "danan0755/Bert_Classifier"
"rsanshierli/EasyBert" -> "CLUEbenchmark/CLUENER2020"
"rsanshierli/EasyBert" -> "yongzhuo/nlp_xiaojiang"
"rsanshierli/EasyBert" -> "taishan1994/pytorch_triple_extraction"
"rsanshierli/EasyBert" -> "haiker2011/awesome-nlp-sentiment-analysis" ["e"=1]
"rsanshierli/EasyBert" -> "lonePatient/BERT-NER-Pytorch"
"rsanshierli/EasyBert" -> "linguishi/chinese_sentiment" ["e"=1]
"rsanshierli/EasyBert" -> "yongzhuo/Macadam"
"rsanshierli/EasyBert" -> "MachineLP/TextMatch"
"rsanshierli/EasyBert" -> "920232796/bert_seq2seq"
"rsanshierli/EasyBert" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"rsanshierli/EasyBert" -> "dongrixinyu/chinese_keyphrase_extractor"
"Morizeyao/GPT2-Chinese" -> "yangjianxin1/GPT2-chitchat"
"Morizeyao/GPT2-Chinese" -> "imcaspar/gpt2-ml"
"Morizeyao/GPT2-Chinese" -> "brightmart/nlp_chinese_corpus"
"Morizeyao/GPT2-Chinese" -> "ymcui/Chinese-BERT-wwm"
"Morizeyao/GPT2-Chinese" -> "brightmart/albert_zh"
"Morizeyao/GPT2-Chinese" -> "thu-coai/CDial-GPT"
"Morizeyao/GPT2-Chinese" -> "bojone/bert4keras"
"Morizeyao/GPT2-Chinese" -> "brightmart/roberta_zh"
"Morizeyao/GPT2-Chinese" -> "CLUEbenchmark/CLUE"
"Morizeyao/GPT2-Chinese" -> "Embedding/Chinese-Word-Vectors"
"Morizeyao/GPT2-Chinese" -> "dbiir/UER-py"
"Morizeyao/GPT2-Chinese" -> "shibing624/pycorrector"
"Morizeyao/GPT2-Chinese" -> "openai/gpt-2" ["e"=1]
"Morizeyao/GPT2-Chinese" -> "codemayq/chinese_chatbot_corpus"
"Morizeyao/GPT2-Chinese" -> "InsaneLife/ChineseNLPCorpus"
"google-research/uda" -> "jasonwei20/eda_nlp"
"google-research/uda" -> "google-research/mixmatch" ["e"=1]
"google-research/uda" -> "SanghunYun/UDA_pytorch" ["e"=1]
"google-research/uda" -> "makcedward/nlpaug" ["e"=1]
"google-research/uda" -> "zhanlaoban/EDA_NLP_for_Chinese"
"google-research/uda" -> "CuriousAI/mean-teacher" ["e"=1]
"google-research/uda" -> "YU1ut/MixMatch-pytorch" ["e"=1]
"google-research/uda" -> "princeton-nlp/SimCSE"
"google-research/uda" -> "zihangdai/xlnet" ["e"=1]
"google-research/uda" -> "google-research/fixmatch" ["e"=1]
"google-research/uda" -> "brightmart/albert_zh"
"google-research/uda" -> "brightmart/roberta_zh"
"google-research/uda" -> "facebookresearch/XLM" ["e"=1]
"google-research/uda" -> "huawei-noah/Pretrained-Language-Model"
"google-research/uda" -> "cgnorthcutt/cleanlab" ["e"=1]
"AI-Sphere/Awesome-Noah" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"AI-Sphere/Awesome-Noah" -> "chenkkkk/User-loan-risk-prediction" ["e"=1]
"MachineLP/TextMatch" -> "zhaogaofeng611/TextMatch"
"MachineLP/TextMatch" -> "terrifyzhao/text_matching"
"MachineLP/TextMatch" -> "wangle1218/deep_text_matching"
"MachineLP/TextMatch" -> "ZhuiyiTechnology/pretrained-models"
"MachineLP/TextMatch" -> "zzy99/epidemic-sentence-pair"
"MachineLP/TextMatch" -> "yongzhuo/nlp_xiaojiang"
"MachineLP/TextMatch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"MachineLP/TextMatch" -> "ZhuiyiTechnology/simbert"
"MachineLP/TextMatch" -> "wuba/qa_match"
"MachineLP/TextMatch" -> "lizhe2004/chatbot-list"
"MachineLP/TextMatch" -> "loujie0822/DeepIE"
"MachineLP/TextMatch" -> "BDBC-KG-NLP/QA-Survey"
"MachineLP/TextMatch" -> "JepsonWong/Text_Matching"
"MachineLP/TextMatch" -> "ZhuiyiTechnology/roformer-sim"
"MachineLP/TextMatch" -> "WenRichard/KBQA-BERT"
"observerss/ngender" -> "wainshine/Chinese-Names-Corpus"
"observerss/ngender" -> "wainshine/Company-Names-Corpus"
"observerss/ngender" -> "observerss/textfilter" ["e"=1]
"observerss/ngender" -> "kfcd/chaizi" ["e"=1]
"observerss/ngender" -> "fighting41love/cocoNLP"
"observerss/ngender" -> "ls0f/phone" ["e"=1]
"observerss/ngender" -> "guotong1988/chinese_dictionary"
"observerss/ngender" -> "rainarch/SentiBridge"
"observerss/ngender" -> "peiss/chinese-name-score" ["e"=1]
"observerss/ngender" -> "fighting41love/Chinese_from_dongxiexidian"
"observerss/ngender" -> "liuhuanyong/MusicLyricChatbot"
"rockyzhengwu/FoolNLTK" -> "huyingxi/Synonyms"
"rockyzhengwu/FoolNLTK" -> "thunlp/THULAC-Python"
"rockyzhengwu/FoolNLTK" -> "koth/kcws"
"rockyzhengwu/FoolNLTK" -> "rockingdingo/deepnlp"
"rockyzhengwu/FoolNLTK" -> "baidu/Familia"
"rockyzhengwu/FoolNLTK" -> "baidu/lac"
"rockyzhengwu/FoolNLTK" -> "Determined22/zh-NER-TF"
"rockyzhengwu/FoolNLTK" -> "brightmart/albert_zh"
"rockyzhengwu/FoolNLTK" -> "HIT-SCIR/pyltp"
"rockyzhengwu/FoolNLTK" -> "zjy-ucas/ChineseNER"
"rockyzhengwu/FoolNLTK" -> "facebookresearch/MUSE" ["e"=1]
"rockyzhengwu/FoolNLTK" -> "lancopku/pkuseg-python"
"rockyzhengwu/FoolNLTK" -> "hankcs/pyhanlp"
"rockyzhengwu/FoolNLTK" -> "letiantian/TextRank4ZH"
"rockyzhengwu/FoolNLTK" -> "Embedding/Chinese-Word-Vectors"
"YunwenTechnology/Unilm" -> "liucongg/UnilmChatchitRobot"
"YunwenTechnology/Unilm" -> "CLUEbenchmark/CLGE"
"YunwenTechnology/Unilm" -> "qingkongzhiqian/GPT2-Summary"
"YunwenTechnology/Unilm" -> "liucongg/GPT2-NewsTitle"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/simbert"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/pretrained-models"
"YunwenTechnology/Unilm" -> "YunwenTechnology/QueryGeneration"
"YunwenTechnology/Unilm" -> "renmada/t5-pegasus-pytorch"
"YunwenTechnology/Unilm" -> "zhongerqiandan/pretrained-unilm-Chinese"
"YunwenTechnology/Unilm" -> "bojone/SPACES"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/t5-pegasus"
"YunwenTechnology/Unilm" -> "CLUEbenchmark/CLUEPretrainedModels"
"YunwenTechnology/Unilm" -> "fastnlp/CPT"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/roformer-sim"
"YunwenTechnology/Unilm" -> "xv44586/ccf_2020_qa_match"
"ChileWang0228/Deep-Learning-With-Python" -> "z814081807/DeepNER"
"ChileWang0228/Deep-Learning-With-Python" -> "loujie0822/DeepIE"
"ChileWang0228/Deep-Learning-With-Python" -> "CLUEbenchmark/CLUENER2020"
"ChileWang0228/Deep-Learning-With-Python" -> "qiufengyuyi/sequence_tagging"
"ChileWang0228/Deep-Learning-With-Python" -> "huanghuidmml/epidemicTextMatch"
"ChileWang0228/Deep-Learning-With-Python" -> "lonePatient/BERT-NER-Pytorch"
"ChileWang0228/Deep-Learning-With-Python" -> "FuYanzhe2/Name-Entity-Recognition"
"ChileWang0228/Deep-Learning-With-Python" -> "xuanzebi/BERT-CH-NER"
"ChileWang0228/Deep-Learning-With-Python" -> "macanv/BERT-BiLSTM-CRF-NER"
"ChileWang0228/Deep-Learning-With-Python" -> "jiesutd/LatticeLSTM"
"ChileWang0228/Deep-Learning-With-Python" -> "zzy99/epidemic-sentence-pair"
"ChileWang0228/Deep-Learning-With-Python" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"ChileWang0228/Deep-Learning-With-Python" -> "luopeixiang/named_entity_recognition"
"ChileWang0228/Deep-Learning-With-Python" -> "yuanxiaosc/Entity-Relation-Extraction"
"ChileWang0228/Deep-Learning-With-Python" -> "v-mipeng/LexiconAugmentedNER"
"920232796/bert_seq2seq" -> "lonePatient/BERT-NER-Pytorch"
"920232796/bert_seq2seq" -> "liucongg/GPT2-NewsTitle"
"920232796/bert_seq2seq" -> "bojone/bert4keras"
"920232796/bert_seq2seq" -> "YunwenTechnology/Unilm"
"920232796/bert_seq2seq" -> "ymcui/Chinese-BERT-wwm"
"920232796/bert_seq2seq" -> "z814081807/DeepNER"
"920232796/bert_seq2seq" -> "rsanshierli/EasyBert"
"920232796/bert_seq2seq" -> "ZhuiyiTechnology/pretrained-models"
"920232796/bert_seq2seq" -> "brightmart/roberta_zh"
"920232796/bert_seq2seq" -> "bojone/SPACES"
"920232796/bert_seq2seq" -> "CLUEbenchmark/CLUEDatasetSearch"
"920232796/bert_seq2seq" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"920232796/bert_seq2seq" -> "loujie0822/DeepIE"
"920232796/bert_seq2seq" -> "ZhuiyiTechnology/t5-pegasus"
"920232796/bert_seq2seq" -> "zhpmatrix/nlp-competitions-list-review"
"npubird/KnowledgeGraphCourse" -> "husthuke/awesome-knowledge-graph"
"npubird/KnowledgeGraphCourse" -> "qq547276542/Agriculture_KnowledgeGraph"
"npubird/KnowledgeGraphCourse" -> "liuhuanyong/QASystemOnMedicalKG"
"npubird/KnowledgeGraphCourse" -> "ownthink/KnowledgeGraphData"
"npubird/KnowledgeGraphCourse" -> "memect/kg-beijing"
"npubird/KnowledgeGraphCourse" -> "lemonhu/stock-knowledge-graph"
"npubird/KnowledgeGraphCourse" -> "lihanghang/NLP-Knowledge-Graph"
"npubird/KnowledgeGraphCourse" -> "thunlp/OpenNRE"
"npubird/KnowledgeGraphCourse" -> "thunlp/OpenKE" ["e"=1]
"npubird/KnowledgeGraphCourse" -> "macanv/BERT-BiLSTM-CRF-NER"
"npubird/KnowledgeGraphCourse" -> "ymcui/Chinese-BERT-wwm"
"npubird/KnowledgeGraphCourse" -> "WenRichard/KBQA-BERT"
"npubird/KnowledgeGraphCourse" -> "SimmerChan/KG-demo-for-movie"
"npubird/KnowledgeGraphCourse" -> "ownthink/Jiagu"
"npubird/KnowledgeGraphCourse" -> "zhpmatrix/nlp-competitions-list-review"
"psnonis/FinBERT" -> "Sudy/coling2018"
"psnonis/FinBERT" -> "yya518/FinBERT"
"ownthink/KnowledgeGraphData" -> "npubird/KnowledgeGraphCourse"
"ownthink/KnowledgeGraphData" -> "husthuke/awesome-knowledge-graph"
"ownthink/KnowledgeGraphData" -> "ownthink/Jiagu"
"ownthink/KnowledgeGraphData" -> "liuhuanyong/QASystemOnMedicalKG"
"ownthink/KnowledgeGraphData" -> "qq547276542/Agriculture_KnowledgeGraph"
"ownthink/KnowledgeGraphData" -> "brightmart/albert_zh"
"ownthink/KnowledgeGraphData" -> "ymcui/Chinese-BERT-wwm"
"ownthink/KnowledgeGraphData" -> "brightmart/nlp_chinese_corpus"
"ownthink/KnowledgeGraphData" -> "lemonhu/stock-knowledge-graph"
"ownthink/KnowledgeGraphData" -> "SophonPlus/ChineseNlpCorpus"
"ownthink/KnowledgeGraphData" -> "macanv/BERT-BiLSTM-CRF-NER"
"ownthink/KnowledgeGraphData" -> "CLUEbenchmark/CLUE"
"ownthink/KnowledgeGraphData" -> "Embedding/Chinese-Word-Vectors"
"ownthink/KnowledgeGraphData" -> "brightmart/roberta_zh"
"ownthink/KnowledgeGraphData" -> "InsaneLife/ChineseNLPCorpus"
"didi/delta" -> "didi/ChineseNLP"
"didi/delta" -> "mravanelli/pytorch-kaldi" ["e"=1]
"didi/delta" -> "didi/athena"
"didi/delta" -> "athena-team/athena" ["e"=1]
"didi/delta" -> "freewym/espresso" ["e"=1]
"didi/delta" -> "NTMC-Community/MatchZoo"
"didi/delta" -> "mobvoi/wenet" ["e"=1]
"didi/delta" -> "tensorflow/lingvo" ["e"=1]
"didi/delta" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"didi/delta" -> "airaria/TextBrewer"
"didi/delta" -> "chineseGLUE/chineseGLUE"
"didi/delta" -> "brightmart/albert_zh"
"didi/delta" -> "athena-team/athena-signal" ["e"=1]
"didi/delta" -> "baidu/AnyQ"
"didi/delta" -> "kimiyoung/transformer-xl" ["e"=1]
"HIT-SCIR/ltp" -> "HIT-SCIR/pyltp"
"HIT-SCIR/ltp" -> "ymcui/Chinese-BERT-wwm"
"HIT-SCIR/ltp" -> "Embedding/Chinese-Word-Vectors"
"HIT-SCIR/ltp" -> "crownpku/Awesome-Chinese-NLP"
"HIT-SCIR/ltp" -> "brightmart/nlp_chinese_corpus"
"HIT-SCIR/ltp" -> "NLPIR-team/NLPIR"
"HIT-SCIR/ltp" -> "brightmart/albert_zh"
"HIT-SCIR/ltp" -> "hankcs/pyhanlp"
"HIT-SCIR/ltp" -> "baidu/lac"
"HIT-SCIR/ltp" -> "isnowfy/snownlp"
"HIT-SCIR/ltp" -> "macanv/BERT-BiLSTM-CRF-NER"
"HIT-SCIR/ltp" -> "thunlp/OpenNRE"
"HIT-SCIR/ltp" -> "CLUEbenchmark/CLUE"
"HIT-SCIR/ltp" -> "thunlp/THULAC-Python"
"HIT-SCIR/ltp" -> "lancopku/pkuseg-python"
"thunlp/THULAC-Python" -> "thunlp/THULAC"
"thunlp/THULAC-Python" -> "HIT-SCIR/pyltp"
"thunlp/THULAC-Python" -> "lancopku/pkuseg-python"
"thunlp/THULAC-Python" -> "HIT-SCIR/ltp"
"thunlp/THULAC-Python" -> "isnowfy/snownlp"
"thunlp/THULAC-Python" -> "hankcs/pyhanlp"
"thunlp/THULAC-Python" -> "NLPIR-team/NLPIR"
"thunlp/THULAC-Python" -> "rockyzhengwu/FoolNLTK"
"thunlp/THULAC-Python" -> "tsroten/pynlpir"
"thunlp/THULAC-Python" -> "FudanNLP/fnlp"
"thunlp/THULAC-Python" -> "Embedding/Chinese-Word-Vectors"
"thunlp/THULAC-Python" -> "baidu/lac"
"thunlp/THULAC-Python" -> "crownpku/Awesome-Chinese-NLP"
"thunlp/THULAC-Python" -> "baidu/Familia"
"thunlp/THULAC-Python" -> "koth/kcws"
"ymcui/MacBERT" -> "ymcui/Chinese-ELECTRA"
"ymcui/MacBERT" -> "ymcui/Chinese-XLNet"
"ymcui/MacBERT" -> "airaria/TextPruner"
"ymcui/MacBERT" -> "airaria/TextBrewer"
"ymcui/MacBERT" -> "ymcui/PERT" ["e"=1]
"ymcui/MacBERT" -> "CLUEbenchmark/CLUEPretrainedModels"
"ymcui/MacBERT" -> "lonePatient/NeZha_Chinese_PyTorch"
"ymcui/MacBERT" -> "brightmart/roberta_zh"
"ymcui/MacBERT" -> "ZhuiyiTechnology/WoBERT"
"ymcui/MacBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"ymcui/MacBERT" -> "dbiir/UER-py"
"ymcui/MacBERT" -> "ymcui/cmrc2018" ["e"=1]
"ymcui/MacBERT" -> "destwang/CTCResources" ["e"=1]
"ymcui/MacBERT" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"ymcui/MacBERT" -> "ZhuiyiTechnology/pretrained-models"
"pengming617/text_matching" -> "terrifyzhao/text_matching"
"pengming617/text_matching" -> "pengming617/bert_textMatching"
"pengming617/text_matching" -> "pengshuang/Text-Similarity"
"pengming617/text_matching" -> "zhaogaofeng611/TextMatch"
"pengming617/text_matching" -> "alibaba/esim-response-selection"
"pengming617/text_matching" -> "alibaba-edu/simple-effective-text-matching"
"pengming617/text_matching" -> "InsaneLife/dssm" ["e"=1]
"pengming617/text_matching" -> "JepsonWong/Text_Matching"
"pengming617/text_matching" -> "yanqiangmiffy/sentence-similarity"
"pengming617/text_matching" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"pengming617/text_matching" -> "qiangsiwei/bert_distill"
"pengming617/text_matching" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"pengming617/text_matching" -> "coetaur0/ESIM"
"pengming617/text_matching" -> "liuhuanyong/SiameseSentenceSimilarity"
"pengming617/text_matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"terrifyzhao/text_matching" -> "pengming617/text_matching"
"terrifyzhao/text_matching" -> "wangle1218/deep_text_matching"
"terrifyzhao/text_matching" -> "zhaogaofeng611/TextMatch"
"terrifyzhao/text_matching" -> "pengshuang/Text-Similarity"
"terrifyzhao/text_matching" -> "terrifyzhao/bert-utils"
"terrifyzhao/text_matching" -> "NTMC-Community/MatchZoo"
"terrifyzhao/text_matching" -> "JepsonWong/Text_Matching"
"terrifyzhao/text_matching" -> "yongzhuo/nlp_xiaojiang"
"terrifyzhao/text_matching" -> "MachineLP/TextMatch"
"terrifyzhao/text_matching" -> "ZhuiyiTechnology/pretrained-models"
"terrifyzhao/text_matching" -> "ZhuiyiTechnology/simbert"
"terrifyzhao/text_matching" -> "pengming617/bert_textMatching"
"terrifyzhao/text_matching" -> "alibaba-edu/simple-effective-text-matching"
"terrifyzhao/text_matching" -> "yongzhuo/Keras-TextClassification"
"terrifyzhao/text_matching" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"yangjianxin1/GPT2-chitchat" -> "Morizeyao/GPT2-Chinese"
"yangjianxin1/GPT2-chitchat" -> "thu-coai/CDial-GPT"
"yangjianxin1/GPT2-chitchat" -> "imcaspar/gpt2-ml"
"yangjianxin1/GPT2-chitchat" -> "codemayq/chinese_chatbot_corpus"
"yangjianxin1/GPT2-chitchat" -> "microsoft/DialoGPT" ["e"=1]
"yangjianxin1/GPT2-chitchat" -> "brightmart/albert_zh"
"yangjianxin1/GPT2-chitchat" -> "yangjianxin1/CPM"
"yangjianxin1/GPT2-chitchat" -> "brightmart/roberta_zh"
"yangjianxin1/GPT2-chitchat" -> "ymcui/Chinese-BERT-wwm"
"yangjianxin1/GPT2-chitchat" -> "brightmart/nlp_chinese_corpus"
"yangjianxin1/GPT2-chitchat" -> "bojone/bert4keras"
"yangjianxin1/GPT2-chitchat" -> "dbiir/UER-py"
"yangjianxin1/GPT2-chitchat" -> "CLUEbenchmark/CLUE"
"yangjianxin1/GPT2-chitchat" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"yangjianxin1/GPT2-chitchat" -> "qingkongzhiqian/GPT2-Summary"
"fxy96/Robust-Log-Optimal-Strategy-with-Reinforcement-Learning" -> "fxy96/SYSU-ZhaoXu-Machine-Learning-Seminar"
"NLPchina/nlp-lang" -> "NLPchina/ansj_seg"
"NLPchina/nlp-lang" -> "medcl/elasticsearch-analysis-pinyin" ["e"=1]
"NLPchina/nlp-lang" -> "luhuiguo/chinese-utils"
"NLPchina/nlp-lang" -> "NLPchina/Word2VEC_java"
"NLPchina/nlp-lang" -> "huaban/jieba-analysis"
"NLPchina/nlp-lang" -> "ysc/word"
"NLPchina/nlp-lang" -> "shibing624/similarity"
"NLPchina/nlp-lang" -> "NLPchina/elasticsearch-analysis-ansj" ["e"=1]
"NLPchina/nlp-lang" -> "xpqiu/fnlp"
"NLPchina/nlp-lang" -> "FudanNLP/fnlp"
"NLPchina/nlp-lang" -> "ysc/QuestionAnsweringSystem"
"NLPchina/nlp-lang" -> "koth/kcws"
"NLPchina/nlp-lang" -> "mayabot/mynlp"
"NLPchina/nlp-lang" -> "ysc/cws_evaluation"
"NLPchina/nlp-lang" -> "sing1ee/dict_build"
"lemonhu/stock-knowledge-graph" -> "jm199504/Financial-Knowledge-Graphs"
"lemonhu/stock-knowledge-graph" -> "qq547276542/Agriculture_KnowledgeGraph"
"lemonhu/stock-knowledge-graph" -> "husthuke/awesome-knowledge-graph"
"lemonhu/stock-knowledge-graph" -> "npubird/KnowledgeGraphCourse"
"lemonhu/stock-knowledge-graph" -> "liuhuanyong/QASystemOnMedicalKG"
"lemonhu/stock-knowledge-graph" -> "lixiang0/WEB_KG"
"lemonhu/stock-knowledge-graph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"lemonhu/stock-knowledge-graph" -> "SimmerChan/KG-demo-for-movie"
"lemonhu/stock-knowledge-graph" -> "ownthink/KnowledgeGraphData"
"lemonhu/stock-knowledge-graph" -> "Skyellbin/neo4j-python-pandas-py2neo-v3"
"lemonhu/stock-knowledge-graph" -> "lihanghang/NLP-Knowledge-Graph"
"lemonhu/stock-knowledge-graph" -> "Pelhans/Z_knowledge_graph"
"lemonhu/stock-knowledge-graph" -> "chizhu/KGQA_HLM"
"lemonhu/stock-knowledge-graph" -> "YeYzheng/KGQA-Based-On-medicine"
"lemonhu/stock-knowledge-graph" -> "WenRichard/KBQA-BERT"
"CrisJk/Agriculture-KnowledgeGraph-Data" -> "lixiang0/WEB_KG"
"CrisJk/Agriculture-KnowledgeGraph-Data" -> "Pelhans/Z_knowledge_graph"
"CrisJk/Agriculture-KnowledgeGraph-Data" -> "s-top/Baike-KnowledgeGraph"
"CrisJk/Agriculture-KnowledgeGraph-Data" -> "Shuang0420/knowledge_graph_demo"
"YeYzheng/KGQA-Based-On-medicine" -> "zhihao-chen/QASystemOnMedicalGraph"
"YeYzheng/KGQA-Based-On-medicine" -> "liuhuanyong/QASystemOnMedicalKG"
"YeYzheng/KGQA-Based-On-medicine" -> "WenRichard/KBQA-BERT"
"YeYzheng/KGQA-Based-On-medicine" -> "kangzhun/KnowledgeGraph-QA-Service"
"YeYzheng/KGQA-Based-On-medicine" -> "chizhu/KGQA_HLM"
"YeYzheng/KGQA-Based-On-medicine" -> "SimmerChan/KG-demo-for-movie"
"YeYzheng/KGQA-Based-On-medicine" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"YeYzheng/KGQA-Based-On-medicine" -> "GanjinZero/awesome_Chinese_medical_NLP"
"YeYzheng/KGQA-Based-On-medicine" -> "qq547276542/Agriculture_KnowledgeGraph"
"YeYzheng/KGQA-Based-On-medicine" -> "vivianLL/QASystemOnHepatopathyKG"
"YeYzheng/KGQA-Based-On-medicine" -> "lixiang0/WEB_KG"
"YeYzheng/KGQA-Based-On-medicine" -> "charlesXu86/Chatbot_CN"
"YeYzheng/KGQA-Based-On-medicine" -> "lemonhu/stock-knowledge-graph"
"YeYzheng/KGQA-Based-On-medicine" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"YeYzheng/KGQA-Based-On-medicine" -> "wangle1218/KBQA-for-Diagnosis"
"zhihao-chen/QASystemOnMedicalKG" -> "zhihao-chen/QASystemOnMedicalGraph"
"zhihao-chen/QASystemOnMedicalKG" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"zhihao-chen/QASystemOnMedicalKG" -> "YeYzheng/KGQA-Based-On-medicine"
"zhihao-chen/QASystemOnMedicalGraph" -> "zhihao-chen/QASystemOnMedicalKG"
"zhihao-chen/QASystemOnMedicalGraph" -> "YeYzheng/KGQA-Based-On-medicine"
"zhihao-chen/QASystemOnMedicalGraph" -> "liuhuanyong/QASystemOnMedicalKG"
"zhihao-chen/QASystemOnMedicalGraph" -> "WenRichard/KBQA-BERT"
"zhihao-chen/QASystemOnMedicalGraph" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"zhihao-chen/QASystemOnMedicalGraph" -> "vivianLL/QASystemOnHepatopathyKG"
"zhihao-chen/QASystemOnMedicalGraph" -> "wangle1218/KBQA-for-Diagnosis"
"zhihao-chen/QASystemOnMedicalGraph" -> "lrs1353281004/Chinese_medical_NLP"
"zhihao-chen/QASystemOnMedicalGraph" -> "yixiu00001/LSTM-CRF-medical"
"zhihao-chen/QASystemOnMedicalGraph" -> "GanjinZero/awesome_Chinese_medical_NLP"
"zhihao-chen/QASystemOnMedicalGraph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"zhihao-chen/QASystemOnMedicalGraph" -> "qq547276542/Agriculture_KnowledgeGraph"
"zhihao-chen/QASystemOnMedicalGraph" -> "Toyhom/Chinese-medical-dialogue-data"
"zhihao-chen/QASystemOnMedicalGraph" -> "liuhuanyong/CrimeKgAssitant"
"zhihao-chen/QASystemOnMedicalGraph" -> "liuhuanyong/ComplexEventExtraction"
"ysc/QuestionAnsweringSystem" -> "ysc/word"
"ysc/QuestionAnsweringSystem" -> "SnakeHacker/QA-Snake" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "baidu/AnyQ"
"ysc/QuestionAnsweringSystem" -> "ysc/cws_evaluation"
"ysc/QuestionAnsweringSystem" -> "S-H-Y-GitHub/QA" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "brmson/yodaqa" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "NLPchina/ansj_seg"
"ysc/QuestionAnsweringSystem" -> "NLPchina/Word2VEC_java"
"ysc/QuestionAnsweringSystem" -> "white127/insuranceQA-cnn-lstm" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "warmheartli/ChatBotCourse" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "NLPchina/nlp-lang"
"ysc/QuestionAnsweringSystem" -> "Conchylicultor/DeepQA" ["e"=1]
"ysc/QuestionAnsweringSystem" -> "crownpku/Awesome-Chinese-NLP"
"ysc/QuestionAnsweringSystem" -> "memect/kg-beijing"
"ysc/cws_evaluation" -> "ysc/word"
"ysc/cws_evaluation" -> "ysc/QuestionAnsweringSystem"
"ysc/cws_evaluation" -> "huaban/jieba-analysis"
"ysc/cws_evaluation" -> "NLPchina/ansj_seg"
"ysc/cws_evaluation" -> "koth/kcws"
"ysc/cws_evaluation" -> "NLPchina/nlp-lang"
"ysc/cws_evaluation" -> "rockingdingo/deepnlp"
"ysc/cws_evaluation" -> "cnschema/cnschema"
"ysc/cws_evaluation" -> "HIT-SCIR/ltp"
"ysc/cws_evaluation" -> "ysc/APDPlat" ["e"=1]
"ysc/cws_evaluation" -> "deepcs233/jieba_fast"
"ysc/cws_evaluation" -> "NLPIR-team/NLPIR"
"ysc/cws_evaluation" -> "baidu/Familia"
"ysc/cws_evaluation" -> "xpqiu/fnlp"
"ysc/cws_evaluation" -> "sing1ee/dict_build"
"ProsusAI/finBERT" -> "yya518/FinBERT"
"ProsusAI/finBERT" -> "valuesimplex/FinBERT"
"ProsusAI/finBERT" -> "psnonis/FinBERT"
"ProsusAI/finBERT" -> "icoxfog417/awesome-financial-nlp"
"ProsusAI/finBERT" -> "firmai/financial-machine-learning" ["e"=1]
"ProsusAI/finBERT" -> "jankrepl/deepdow" ["e"=1]
"ProsusAI/finBERT" -> "hudson-and-thames/mlfinlab" ["e"=1]
"ProsusAI/finBERT" -> "smoothnlp/FinancialDatasets"
"ProsusAI/finBERT" -> "abhijeet3922/finbert_embedding"
"ProsusAI/finBERT" -> "firmai/machine-learning-asset-management" ["e"=1]
"ProsusAI/finBERT" -> "WayneDW/Sentiment-Analysis-in-Event-Driven-Stock-Price-Movement-Prediction" ["e"=1]
"ProsusAI/finBERT" -> "yumoxu/stocknet-dataset" ["e"=1]
"ProsusAI/finBERT" -> "vedic-partap/Event-Driven-Stock-Prediction-using-Deep-Learning" ["e"=1]
"ProsusAI/finBERT" -> "YangLinyi/FinNLP-Progress" ["e"=1]
"ProsusAI/finBERT" -> "dcajasn/Riskfolio-Lib" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "YangLinyi/FinNLP-Progress" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"icoxfog417/awesome-financial-nlp" -> "valuesimplex/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "smoothnlp/FinancialDatasets"
"icoxfog417/awesome-financial-nlp" -> "psnonis/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "yya518/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "ProsusAI/finBERT"
"icoxfog417/awesome-financial-nlp" -> "yuriak/DLQuant" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "M0025/KnowledgeGraphOfA-shareCompanys"
"icoxfog417/awesome-financial-nlp" -> "sudhamstarun/Understanding-Financial-Reports-using-Natural-Language-Processing"
"icoxfog417/awesome-financial-nlp" -> "PKUJohnson/OpenData" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "dolphin-zs/Doc2EDAG"
"baidu/AnyQ" -> "baidu/lac"
"baidu/AnyQ" -> "baidu/Senta"
"baidu/AnyQ" -> "NTMC-Community/MatchZoo"
"baidu/AnyQ" -> "baidu/Familia"
"baidu/AnyQ" -> "PaddlePaddle/LARK"
"baidu/AnyQ" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"baidu/AnyQ" -> "brightmart/albert_zh"
"baidu/AnyQ" -> "baidu/DuReader" ["e"=1]
"baidu/AnyQ" -> "brightmart/nlp_chinese_corpus"
"baidu/AnyQ" -> "crownpku/Awesome-Chinese-NLP"
"baidu/AnyQ" -> "ymcui/Chinese-BERT-wwm"
"baidu/AnyQ" -> "brightmart/roberta_zh"
"baidu/AnyQ" -> "Embedding/Chinese-Word-Vectors"
"baidu/AnyQ" -> "macanv/BERT-BiLSTM-CRF-NER"
"baidu/AnyQ" -> "huyingxi/Synonyms"
"BDBC-KG-NLP/QA-Survey" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"BDBC-KG-NLP/QA-Survey" -> "WenRichard/KBQA-BERT"
"BDBC-KG-NLP/QA-Survey" -> "lihanghang/NLP-Knowledge-Graph"
"BDBC-KG-NLP/QA-Survey" -> "malllabiisc/EmbedKGQA" ["e"=1]
"BDBC-KG-NLP/QA-Survey" -> "zhpmatrix/nlp-competitions-list-review"
"BDBC-KG-NLP/QA-Survey" -> "panchunguang/ccks_baidu_entity_link"
"BDBC-KG-NLP/QA-Survey" -> "ZhuiyiTechnology/pretrained-models"
"BDBC-KG-NLP/QA-Survey" -> "lrs1353281004/Chinese_medical_NLP"
"BDBC-KG-NLP/QA-Survey" -> "wavewangyue/kbqa" ["e"=1]
"BDBC-KG-NLP/QA-Survey" -> "lizhe2004/chatbot-list"
"BDBC-KG-NLP/QA-Survey" -> "BshoterJ/awesome-kgqa" ["e"=1]
"BDBC-KG-NLP/QA-Survey" -> "husthuke/awesome-knowledge-graph"
"BDBC-KG-NLP/QA-Survey" -> "TingFree/NLPer-Arsenal"
"BDBC-KG-NLP/QA-Survey" -> "GanjinZero/awesome_Chinese_medical_NLP"
"BDBC-KG-NLP/QA-Survey" -> "airaria/TextBrewer"
"CLUEbenchmark/CLUE" -> "ymcui/Chinese-BERT-wwm"
"CLUEbenchmark/CLUE" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUE" -> "ChineseGLUE/ChineseGLUE"
"CLUEbenchmark/CLUE" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUE" -> "bojone/bert4keras"
"CLUEbenchmark/CLUE" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUE" -> "CLUEbenchmark/CLUEDatasetSearch"
"CLUEbenchmark/CLUE" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLUE" -> "dbiir/UER-py"
"CLUEbenchmark/CLUE" -> "huawei-noah/Pretrained-Language-Model"
"CLUEbenchmark/CLUE" -> "CLUEbenchmark/CLUENER2020"
"CLUEbenchmark/CLUE" -> "macanv/BERT-BiLSTM-CRF-NER"
"CLUEbenchmark/CLUE" -> "SophonPlus/ChineseNlpCorpus"
"CLUEbenchmark/CLUE" -> "Embedding/Chinese-Word-Vectors"
"CLUEbenchmark/CLUE" -> "princeton-nlp/SimCSE"
"CourteousWood/text-summarization" -> "1148270327/TextSummary"
"CourteousWood/text-summarization" -> "ztz818/Automatic-generation-of-text-summaries"
"CourteousWood/text-summarization" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization" ["e"=1]
"PaddlePaddle/Research" -> "loujie0822/DeepIE"
"PaddlePaddle/Research" -> "PaddlePaddle/Knover"
"PaddlePaddle/Research" -> "PaddlePaddle/ERNIE"
"PaddlePaddle/Research" -> "brightmart/roberta_zh"
"PaddlePaddle/Research" -> "princeton-nlp/SimCSE"
"PaddlePaddle/Research" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/Research" -> "dbiir/UER-py"
"PaddlePaddle/Research" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/Research" -> "thu-coai/CDial-GPT"
"PaddlePaddle/Research" -> "panchunguang/ccks_baidu_entity_link"
"PaddlePaddle/Research" -> "bojone/bert4keras"
"PaddlePaddle/Research" -> "bojone/kg-2019"
"PaddlePaddle/Research" -> "ymcui/Chinese-ELECTRA"
"PaddlePaddle/Research" -> "brightmart/albert_zh"
"PaddlePaddle/Research" -> "huawei-noah/Pretrained-Language-Model"
"wmathor/nlp-tutorial" -> "leerumor/nlp_tutorial"
"wmathor/nlp-tutorial" -> "jayparks/transformer" ["e"=1]
"wmathor/nlp-tutorial" -> "km1994/NLP-Interview-Notes"
"wmathor/nlp-tutorial" -> "DA-southampton/Read_Bert_Code"
"wmathor/nlp-tutorial" -> "km1994/nlp_paper_study"
"wmathor/nlp-tutorial" -> "wangshusen/DeepLearning" ["e"=1]
"wmathor/nlp-tutorial" -> "lonePatient/BERT-NER-Pytorch"
"wmathor/nlp-tutorial" -> "aespresso/a_journey_into_math_of_ml"
"wmathor/nlp-tutorial" -> "zzy99/epidemic-sentence-pair"
"wmathor/nlp-tutorial" -> "DA-southampton/NLP_ability"
"wmathor/nlp-tutorial" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"wmathor/nlp-tutorial" -> "zhpmatrix/nlp-competitions-list-review"
"wmathor/nlp-tutorial" -> "changwookjun/nlp-paper"
"wmathor/nlp-tutorial" -> "DA-southampton/ner"
"wmathor/nlp-tutorial" -> "MorvanZhou/NLP-Tutorials"
"wonderfulsuccess/chinese_abstractive_corpus" -> "bifeng/nlp_paper_notes"
"ztz818/Automatic-generation-of-text-summaries" -> "CourteousWood/text-summarization"
"ztz818/Automatic-generation-of-text-summaries" -> "God-Fish-X/Extractable-automatic-Text"
"ztz818/Automatic-generation-of-text-summaries" -> "yongzhuo/nlg-yongzhuo"
"ztz818/Automatic-generation-of-text-summaries" -> "sys1874/chinese-textsum" ["e"=1]
"ztz818/Automatic-generation-of-text-summaries" -> "lancopku/superAE" ["e"=1]
"ztz818/Automatic-generation-of-text-summaries" -> "1148270327/TextSummary"
"ztz818/Automatic-generation-of-text-summaries" -> "pingyuan2016/word2vec_textrank"
"ztz818/Automatic-generation-of-text-summaries" -> "ArtistScript/FastTextRank"
"ztz818/Automatic-generation-of-text-summaries" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"ztz818/Automatic-generation-of-text-summaries" -> "Valuebai/Text-Auto-Summarization"
"ztz818/Automatic-generation-of-text-summaries" -> "HorieYuan/TransformerTextSummarization"
"ztz818/Automatic-generation-of-text-summaries" -> "zpppy/seq2seq-chinese-textsum" ["e"=1]
"shiyybua/NER" -> "Determined22/zh-NER-TF"
"shiyybua/NER" -> "zjy-ucas/ChineseNER"
"shiyybua/NER" -> "buppt/ChineseNER"
"shiyybua/NER" -> "guillaumegenthial/sequence_tagging"
"shiyybua/NER" -> "ProHiryu/bert-chinese-ner"
"shiyybua/NER" -> "crownpku/Information-Extraction-Chinese"
"shiyybua/NER" -> "jiesutd/LatticeLSTM"
"shiyybua/NER" -> "liu-nlper/NER-LSTM-CRF"
"shiyybua/NER" -> "lpty/nlp_base"
"shiyybua/NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"shiyybua/NER" -> "FuYanzhe2/Name-Entity-Recognition"
"shiyybua/NER" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"shiyybua/NER" -> "qq547276542/Agriculture_KnowledgeGraph"
"shiyybua/NER" -> "kyzhouhzau/BERT-NER"
"shiyybua/NER" -> "luopeixiang/named_entity_recognition"
"Roshanson/TextInfoExp" -> "crownpku/Information-Extraction-Chinese"
"Roshanson/TextInfoExp" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"Roshanson/TextInfoExp" -> "AimeeLee77/keyword_extraction"
"Roshanson/TextInfoExp" -> "crownpku/Awesome-Chinese-NLP"
"Roshanson/TextInfoExp" -> "zjy-ucas/ChineseNER"
"Roshanson/TextInfoExp" -> "Determined22/zh-NER-TF"
"Roshanson/TextInfoExp" -> "qq547276542/Agriculture_KnowledgeGraph"
"Roshanson/TextInfoExp" -> "letiantian/TextRank4ZH"
"Roshanson/TextInfoExp" -> "gaussic/text-classification-cnn-rnn"
"Roshanson/TextInfoExp" -> "ownthink/Jiagu"
"Roshanson/TextInfoExp" -> "yongzhuo/nlp_xiaojiang"
"Roshanson/TextInfoExp" -> "shiyybua/NER"
"Roshanson/TextInfoExp" -> "terrifyzhao/bert-utils"
"Roshanson/TextInfoExp" -> "chenyuntc/PyTorchText"
"Roshanson/TextInfoExp" -> "rockingdingo/deepnlp"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"liuhuanyong/SentenceSimilarity" -> "yanqiangmiffy/sentence-similarity"
"liuhuanyong/SentenceSimilarity" -> "yaleimeng/Final_word_Similarity"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/ChineseEmbedding"
"liuhuanyong/SentenceSimilarity" -> "cjymz886/sentence-similarity"
"liuhuanyong/SentenceSimilarity" -> "IAdmireu/ChineseSTS"
"liuhuanyong/SentenceSimilarity" -> "pengming617/bert_textMatching"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/TopicCluster"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/ChineseNLPCorpus"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/WordMultiSenseDisambiguation"
"liuhuanyong/SiameseSentenceSimilarity" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/SiameseSentenceSimilarity" -> "yanqiangmiffy/sentence-similarity"
"liuhuanyong/SiameseSentenceSimilarity" -> "pengming617/text_matching"
"liuhuanyong/SiameseSentenceSimilarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"liuhuanyong/SiameseSentenceSimilarity" -> "ATEC2018/deep-siamese-text-similarity"
"BiLiangLtd/WordSimilarity" -> "yaleimeng/Final_word_Similarity"
"BiLiangLtd/WordSimilarity" -> "ashengtx/CilinSimilarity"
"BiLiangLtd/WordSimilarity" -> "taozhijiang/chinese_correct_wsd" ["e"=1]
"BiLiangLtd/WordSimilarity" -> "tigerchen52/synonym_detection"
"BiLiangLtd/WordSimilarity" -> "Keson96/SynoCN"
"BiLiangLtd/WordSimilarity" -> "thunlp/OpenHowNet"
"BiLiangLtd/WordSimilarity" -> "guotong1988/chinese_dictionary"
"BiLiangLtd/WordSimilarity" -> "chatopera/Synonyms"
"BiLiangLtd/WordSimilarity" -> "huyingxi/Synonyms"
"BiLiangLtd/WordSimilarity" -> "yongzhuo/nlp_xiaojiang"
"BiLiangLtd/WordSimilarity" -> "sunyilgdx/SIFRank_zh"
"Wall-ee/chinese2digits" -> "Ailln/cn2an"
"Wall-ee/chinese2digits" -> "zhanzecheng/Time_NLP"
"zhanlaoban/EDA_NLP_for_Chinese" -> "jasonwei20/eda_nlp"
"zhanlaoban/EDA_NLP_for_Chinese" -> "425776024/nlpcda"
"zhanlaoban/EDA_NLP_for_Chinese" -> "yongzhuo/nlp_xiaojiang"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ZhuiyiTechnology/pretrained-models"
"zhanlaoban/EDA_NLP_for_Chinese" -> "brightmart/roberta_zh"
"zhanlaoban/EDA_NLP_for_Chinese" -> "brightmart/albert_zh"
"zhanlaoban/EDA_NLP_for_Chinese" -> "loujie0822/DeepIE"
"zhanlaoban/EDA_NLP_for_Chinese" -> "CLUEbenchmark/CLUE"
"zhanlaoban/EDA_NLP_for_Chinese" -> "dbiir/UER-py"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ZhuiyiTechnology/simbert"
"zhanlaoban/EDA_NLP_for_Chinese" -> "lonePatient/BERT-NER-Pytorch"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ymcui/Chinese-BERT-wwm"
"zhanlaoban/EDA_NLP_for_Chinese" -> "bojone/bert4keras"
"zhanlaoban/EDA_NLP_for_Chinese" -> "panchunguang/ccks_baidu_entity_link"
"zhanlaoban/EDA_NLP_for_Chinese" -> "quincyliang/nlp-data-augmentation"
"chatopera/Synonyms" -> "zhanlaoban/EDA_NLP_for_Chinese"
"chatopera/Synonyms" -> "ZhuiyiTechnology/simbert"
"chatopera/Synonyms" -> "ZhuiyiTechnology/pretrained-models"
"chatopera/Synonyms" -> "CLUEbenchmark/CLUE"
"chatopera/Synonyms" -> "yaleimeng/Final_word_Similarity"
"chatopera/Synonyms" -> "dbiir/UER-py"
"chatopera/Synonyms" -> "CLUEbenchmark/CLUEDatasetSearch"
"chatopera/Synonyms" -> "shibing624/pycorrector"
"chatopera/Synonyms" -> "codemayq/chinese_chatbot_corpus"
"chatopera/Synonyms" -> "lcdevelop/ChatBotCourse" ["e"=1]
"chatopera/Synonyms" -> "ymcui/Chinese-BERT-wwm"
"chatopera/Synonyms" -> "dongrixinyu/JioNLP"
"chatopera/Synonyms" -> "425776024/nlpcda"
"chatopera/Synonyms" -> "brightmart/albert_zh"
"chatopera/Synonyms" -> "brightmart/roberta_zh"
"shibing624/pycorrector" -> "ymcui/Chinese-BERT-wwm"
"shibing624/pycorrector" -> "brightmart/albert_zh"
"shibing624/pycorrector" -> "iqiyi/FASPell"
"shibing624/pycorrector" -> "brightmart/nlp_chinese_corpus"
"shibing624/pycorrector" -> "CLUEbenchmark/CLUE"
"shibing624/pycorrector" -> "bojone/bert4keras"
"shibing624/pycorrector" -> "dbiir/UER-py"
"shibing624/pycorrector" -> "InsaneLife/ChineseNLPCorpus"
"shibing624/pycorrector" -> "macanv/BERT-BiLSTM-CRF-NER"
"shibing624/pycorrector" -> "Embedding/Chinese-Word-Vectors"
"shibing624/pycorrector" -> "kpu/kenlm" ["e"=1]
"shibing624/pycorrector" -> "brightmart/roberta_zh"
"shibing624/pycorrector" -> "SophonPlus/ChineseNlpCorpus"
"shibing624/pycorrector" -> "CLUEbenchmark/CLUEDatasetSearch"
"shibing624/pycorrector" -> "crownpku/Awesome-Chinese-NLP"
"wainshine/Chinese-Names-Corpus" -> "wainshine/Company-Names-Corpus"
"wainshine/Chinese-Names-Corpus" -> "brightmart/nlp_chinese_corpus"
"wainshine/Chinese-Names-Corpus" -> "Embedding/Chinese-Word-Vectors"
"wainshine/Chinese-Names-Corpus" -> "SophonPlus/ChineseNlpCorpus"
"wainshine/Chinese-Names-Corpus" -> "mozillazg/python-pinyin"
"wainshine/Chinese-Names-Corpus" -> "crownpku/Awesome-Chinese-NLP"
"wainshine/Chinese-Names-Corpus" -> "pwxcoo/chinese-xinhua" ["e"=1]
"wainshine/Chinese-Names-Corpus" -> "ymcui/Chinese-BERT-wwm"
"wainshine/Chinese-Names-Corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"wainshine/Chinese-Names-Corpus" -> "crownpku/Information-Extraction-Chinese"
"wainshine/Chinese-Names-Corpus" -> "shibing624/pycorrector"
"wainshine/Chinese-Names-Corpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"wainshine/Chinese-Names-Corpus" -> "huyingxi/Synonyms"
"wainshine/Chinese-Names-Corpus" -> "codemayq/chinese_chatbot_corpus"
"wainshine/Chinese-Names-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"wainshine/Company-Names-Corpus" -> "wainshine/Chinese-Names-Corpus"
"wainshine/Company-Names-Corpus" -> "fighting41love/cocoNLP"
"wainshine/Company-Names-Corpus" -> "thunlp/THUOCL"
"wainshine/Company-Names-Corpus" -> "nonamestreet/weixin_public_corpus"
"wainshine/Company-Names-Corpus" -> "liuhuanyong/ComplexEventExtraction"
"wainshine/Company-Names-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"wainshine/Company-Names-Corpus" -> "zjy-ucas/ChineseNER"
"wainshine/Company-Names-Corpus" -> "yongzhuo/nlp_xiaojiang"
"wainshine/Company-Names-Corpus" -> "ownthink/Jiagu"
"wainshine/Company-Names-Corpus" -> "yuanxiaosc/Entity-Relation-Extraction"
"wainshine/Company-Names-Corpus" -> "crownpku/Information-Extraction-Chinese"
"wainshine/Company-Names-Corpus" -> "SophonPlus/ChineseNlpCorpus"
"wainshine/Company-Names-Corpus" -> "NLPScott/bert-Chinese-classification-task"
"wainshine/Company-Names-Corpus" -> "guotong1988/chinese_dictionary"
"wainshine/Company-Names-Corpus" -> "CLUEbenchmark/CLUENER2020"
"faneshion/MatchZoo" -> "HouJP/kaggle-quora-question-pairs" ["e"=1]
"faneshion/MatchZoo" -> "zhiguowang/BiMPM" ["e"=1]
"faneshion/MatchZoo" -> "NTSC-Community/awaresome-neural-models-for-semantic-match"
"faneshion/MatchZoo" -> "geek-ai/irgan" ["e"=1]
"faneshion/MatchZoo" -> "pl8787/MatchPyramid-TensorFlow" ["e"=1]
"faneshion/MatchZoo" -> "baidu/DuReader" ["e"=1]
"faneshion/MatchZoo" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"faneshion/MatchZoo" -> "chenyuntc/PyTorchText"
"faneshion/MatchZoo" -> "allenai/bilm-tf" ["e"=1]
"faneshion/MatchZoo" -> "baidu/Familia"
"faneshion/MatchZoo" -> "HKUST-KnowComp/R-Net" ["e"=1]
"faneshion/MatchZoo" -> "baidu/AnyQ"
"faneshion/MatchZoo" -> "rockingdingo/deepnlp"
"faneshion/MatchZoo" -> "brightmart/text_classification" ["e"=1]
"faneshion/MatchZoo" -> "richliao/textClassifier" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/Tensorflow2-Tutorial"
"MorvanZhou/NLP-Tutorials" -> "HIT-SCIR/plm-nlp-code"
"MorvanZhou/NLP-Tutorials" -> "wmathor/nlp-tutorial"
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/mnistGANs" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/PyTorch-Tutorial" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "aespresso/a_journey_into_math_of_ml"
"MorvanZhou/NLP-Tutorials" -> "luopeixiang/named_entity_recognition"
"MorvanZhou/NLP-Tutorials" -> "changwookjun/nlp-paper"
"MorvanZhou/NLP-Tutorials" -> "km1994/nlp_paper_study"
"MorvanZhou/NLP-Tutorials" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "thu-coai/CDial-GPT"
"MorvanZhou/NLP-Tutorials" -> "songyingxin/Bert-TextClassification"
"MorvanZhou/NLP-Tutorials" -> "zibuyu/research_tao"
"MorvanZhou/NLP-Tutorials" -> "DA-southampton/Tech_Aarticle"
"MorvanZhou/NLP-Tutorials" -> "zhpmatrix/nlp-competitions-list-review"
"yanqiangmiffy/sentence-similarity" -> "cjymz886/sentence-similarity"
"yanqiangmiffy/sentence-similarity" -> "liuhuanyong/SentenceSimilarity"
"yanqiangmiffy/sentence-similarity" -> "pengshuang/Text-Similarity"
"yanqiangmiffy/sentence-similarity" -> "pengming617/text_matching"
"yanqiangmiffy/sentence-similarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"yanqiangmiffy/sentence-similarity" -> "IAdmireu/ChineseSTS"
"yanqiangmiffy/sentence-similarity" -> "JianWenJun/MLDemo"
"yanqiangmiffy/sentence-similarity" -> "brightmart/nlu_sim"
"yanqiangmiffy/sentence-similarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"yanqiangmiffy/sentence-similarity" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"yanqiangmiffy/sentence-similarity" -> "ziweipolaris/atec2018-nlp"
"yanqiangmiffy/sentence-similarity" -> "Dikea/Dialog-System-with-Task-Retrieval-and-Seq2seq" ["e"=1]
"yanqiangmiffy/sentence-similarity" -> "terrifyzhao/bert-utils"
"yanqiangmiffy/sentence-similarity" -> "SeanLee97/QANet_dureader" ["e"=1]
"yanqiangmiffy/sentence-similarity" -> "WenDesi/sentenceSimilarity"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "zhihao-chen/QASystemOnMedicalGraph"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "YeYzheng/KGQA-Based-On-medicine"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "GanjinZero/awesome_Chinese_medical_NLP"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "lihanghang/NLP-Knowledge-Graph"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "pumpkinduo/KnowledgeGraph_NER"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "Toyhom/Chinese-medical-dialogue-data"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "wangle1218/KBQA-for-Diagnosis"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "lrs1353281004/Chinese_medical_NLP"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "zhihao-chen/QASystemOnMedicalKG"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "WenRichard/KBQA-BERT"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "vivianLL/QASystemOnHepatopathyKG"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "zhangsheng93/cMedQA2"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "BDBC-KG-NLP/QA-Survey"
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"baiyang2464/chatbot-base-on-Knowledge-Graph" -> "liuhuanyong/QASystemOnMedicalKG"
"murray-z/text_analysis_tools" -> "shibing624/pytextclassifier"
"murray-z/text_analysis_tools" -> "dongrixinyu/chinese_keyphrase_extractor"
"murray-z/text_analysis_tools" -> "hiDaDeng/cnsenti" ["e"=1]
"murray-z/text_analysis_tools" -> "yongzhuo/Macropodus"
"murray-z/text_analysis_tools" -> "linguishi/chinese_sentiment" ["e"=1]
"murray-z/text_analysis_tools" -> "jasoncao11/nlp-notebook"
"murray-z/text_analysis_tools" -> "murray-z/text_clustering"
"murray-z/text_analysis_tools" -> "rsanshierli/EasyBert"
"murray-z/text_analysis_tools" -> "MachineLP/TextMatch"
"murray-z/text_analysis_tools" -> "hellonlp/classifier_multi_label_textcnn"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "ZhixiuYe/HSCRF-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "jiesutd/NCRFpp"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "ZhixiuYe/NER-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "Hironsan/anago"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "guillaumegenthial/sequence_tagging"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "glample/tagger"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "liu-nlper/NER-LSTM-CRF"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "XuezheMax/NeuroNLP2" ["e"=1]
"LiyuanLucasLiu/LM-LSTM-CRF" -> "jiesutd/LatticeLSTM"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "shangjingbo1226/AutoNER"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "zjy-ucas/ChineseNER"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "threelittlemonkeys/lstm-crf-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "liu-nlper/SLTK"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "shiyybua/NER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "UKPLab/elmo-bilstm-cnn-crf"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "jiesutd/NCRFpp"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "allenai/bilm-tf" ["e"=1]
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "guillaumegenthial/sequence_tagging"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "glample/tagger"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "Hironsan/anago"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "Franck-Dernoncourt/NeuroNER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "guillaumegenthial/tf_ner"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "zjy-ucas/ChineseNER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "chilynn/sequence-labeling"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "kyzhouhzau/BERT-NER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "LopezGG/NN_NER_tensorFlow"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "XuezheMax/NeuroNLP2" ["e"=1]
"CLUEbenchmark/DataCLUE" -> "bojone/CLUE-bert4keras"
"autoliuweijie/BERT-whitening-pytorch" -> "bojone/BERT-whitening"
"autoliuweijie/BERT-whitening-pytorch" -> "bojone/SimCSE"
"autoliuweijie/BERT-whitening-pytorch" -> "bohanli/BERT-flow"
"autoliuweijie/BERT-whitening-pytorch" -> "zhengyanzhao1997/NLP-model"
"autoliuweijie/BERT-whitening-pytorch" -> "Jun-jie-Huang/WhiteningBERT"
"autoliuweijie/BERT-whitening-pytorch" -> "ZhuiyiTechnology/simbert"
"autoliuweijie/BERT-whitening-pytorch" -> "KwangKa/SIMCSE_unsup"
"autoliuweijie/BERT-whitening-pytorch" -> "nilboy/gaic_track3_pair_sim"
"autoliuweijie/BERT-whitening-pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"autoliuweijie/BERT-whitening-pytorch" -> "renmada/t5-pegasus-pytorch"
"autoliuweijie/BERT-whitening-pytorch" -> "shawroad/CoSENT_Pytorch"
"autoliuweijie/BERT-whitening-pytorch" -> "pluto-junzeng/CNSD"
"autoliuweijie/BERT-whitening-pytorch" -> "zhusleep/pytorch_chinese_lm_pretrain"
"autoliuweijie/BERT-whitening-pytorch" -> "gaohongkui/GlobalPointer_pytorch"
"autoliuweijie/BERT-whitening-pytorch" -> "ZhuiyiTechnology/roformer-sim"
"princeton-nlp/SimCSE" -> "bojone/SimCSE"
"princeton-nlp/SimCSE" -> "thunlp/PromptPapers" ["e"=1]
"princeton-nlp/SimCSE" -> "thunlp/OpenPrompt" ["e"=1]
"princeton-nlp/SimCSE" -> "UKPLab/sentence-transformers" ["e"=1]
"princeton-nlp/SimCSE" -> "yym6472/ConSERT"
"princeton-nlp/SimCSE" -> "CLUEbenchmark/CLUE"
"princeton-nlp/SimCSE" -> "dbiir/UER-py"
"princeton-nlp/SimCSE" -> "huawei-noah/Pretrained-Language-Model"
"princeton-nlp/SimCSE" -> "brightmart/roberta_zh"
"princeton-nlp/SimCSE" -> "ymcui/Chinese-BERT-wwm"
"princeton-nlp/SimCSE" -> "dropreg/R-Drop"
"princeton-nlp/SimCSE" -> "airaria/TextBrewer"
"princeton-nlp/SimCSE" -> "ZhuiyiTechnology/simbert"
"princeton-nlp/SimCSE" -> "bojone/bert4keras"
"princeton-nlp/SimCSE" -> "facebookresearch/DPR" ["e"=1]
"yym6472/ConSERT" -> "bojone/SimCSE"
"yym6472/ConSERT" -> "princeton-nlp/SimCSE"
"yym6472/ConSERT" -> "bohanli/BERT-flow"
"yym6472/ConSERT" -> "ZhuiyiTechnology/simbert"
"yym6472/ConSERT" -> "bojone/BERT-whitening"
"yym6472/ConSERT" -> "DataTerminatorX/Keyword-BERT"
"yym6472/ConSERT" -> "princeton-nlp/LM-BFF" ["e"=1]
"yym6472/ConSERT" -> "amazon-research/sccl"
"yym6472/ConSERT" -> "dropreg/R-Drop"
"yym6472/ConSERT" -> "ZhuiyiTechnology/pretrained-models"
"yym6472/ConSERT" -> "CLUEbenchmark/FewCLUE"
"yym6472/ConSERT" -> "ZhuiyiTechnology/t5-pegasus"
"yym6472/ConSERT" -> "bojone/CoSENT"
"yym6472/ConSERT" -> "ZhuiyiTechnology/roformer-sim"
"yym6472/ConSERT" -> "LeeSureman/Flat-Lattice-Transformer"
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Machine-Learning" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Reinforcement-Learning"
"JustFollowUs/Natural-Language-Processing" -> "rockingdingo/deepnlp"
"JustFollowUs/Natural-Language-Processing" -> "Kyubyong/nlp_tasks" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "HIT-SCIR/pyltp"
"JustFollowUs/Natural-Language-Processing" -> "memect/hao" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "FudanNLP/fnlp"
"JustFollowUs/Natural-Language-Processing" -> "zibuyu/research_tao"
"JustFollowUs/Natural-Language-Processing" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "crownpku/Awesome-Chinese-NLP"
"JustFollowUs/Natural-Language-Processing" -> "dapurv5/awesome-question-answering" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "zhpmatrix/nlp-competitions-list-review"
"JustFollowUs/Natural-Language-Processing" -> "memect/kg-beijing"
"JustFollowUs/Natural-Language-Processing" -> "HIT-SCIR/ltp"
"kamalkraj/BERT-NER" -> "kyzhouhzau/BERT-NER"
"kamalkraj/BERT-NER" -> "lonePatient/BERT-NER-Pytorch"
"kamalkraj/BERT-NER" -> "lemonhu/NER-BERT-pytorch"
"kamalkraj/BERT-NER" -> "juand-r/entity-recognition-datasets"
"kamalkraj/BERT-NER" -> "sberbank-ai/ner-bert"
"kamalkraj/BERT-NER" -> "Kyubyong/bert_ner"
"kamalkraj/BERT-NER" -> "chakki-works/seqeval"
"kamalkraj/BERT-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"kamalkraj/BERT-NER" -> "CLUEbenchmark/CLUENER2020"
"kamalkraj/BERT-NER" -> "luopeixiang/named_entity_recognition"
"kamalkraj/BERT-NER" -> "ProHiryu/bert-chinese-ner"
"kamalkraj/BERT-NER" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"kamalkraj/BERT-NER" -> "jiesutd/NCRFpp"
"kamalkraj/BERT-NER" -> "ShannonAI/mrc-for-flat-nested-ner"
"kamalkraj/BERT-NER" -> "ZhixiuYe/NER-pytorch"
"hanbt/learn_dl" -> "hanbt/awesome-deep-learning"
"hanbt/learn_dl" -> "bojone/attention" ["e"=1]
"hanbt/learn_dl" -> "jiqizhixin/ML-Tutorial-Experiment" ["e"=1]
"hanbt/learn_dl" -> "shiyybua/NER"
"hanbt/learn_dl" -> "bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["e"=1]
"hanbt/learn_dl" -> "mli/gluon-tutorials-zh" ["e"=1]
"hanbt/learn_dl" -> "ljpzzz/machinelearning" ["e"=1]
"hanbt/learn_dl" -> "nicodjimenez/lstm" ["e"=1]
"hanbt/learn_dl" -> "gaussic/text-classification-cnn-rnn"
"hanbt/learn_dl" -> "macanv/BERT-BiLSTM-CRF-NER"
"hanbt/learn_dl" -> "lpty/nlp_base"
"hanbt/learn_dl" -> "Determined22/zh-NER-TF"
"hanbt/learn_dl" -> "brightmart/text_classification" ["e"=1]
"hanbt/learn_dl" -> "princewen/tensorflow_practice" ["e"=1]
"hanbt/learn_dl" -> "yongyehuang/Tensorflow-Tutorial"
"chenghuige/wenzheng" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"chenghuige/wenzheng" -> "xueyouluo/fsauor2018"
"chenghuige/wenzheng" -> "pengshuang/AI-Comp"
"chenghuige/wenzheng" -> "brightmart/sentiment_analysis_fine_grain"
"chenghuige/wenzheng" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"chenghuige/wenzheng" -> "AIChallenger/AI_Challenger_2018"
"chenghuige/wenzheng" -> "yilirin/BDCI_Car_2018"
"chenghuige/wenzheng" -> "foamliu/Sentiment-Analysis"
"chenghuige/wenzheng" -> "chenyuntc/PyTorchText"
"chenghuige/wenzheng" -> "yilifzf/BDCI_Car_2018"
"chenghuige/wenzheng" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"chenghuige/wenzheng" -> "Magic-Bubble/Zhihu"
"chenghuige/wenzheng" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"chenghuige/wenzheng" -> "wxue004cs/GCAE" ["e"=1]
"chenghuige/wenzheng" -> "ymcui/Chinese-PreTrained-XLNet"
"geekinglcq/CDCS" -> "zhpmatrix/nlp-competitions-list-review"
"geekinglcq/CDCS" -> "Smilexuhc/Data-Competition-TopSolution" ["e"=1]
"geekinglcq/CDCS" -> "EliotAndres/kaggle-past-solutions" ["e"=1]
"geekinglcq/CDCS" -> "brightmart/albert_zh"
"geekinglcq/CDCS" -> "iphysresearch/DataSciComp" ["e"=1]
"geekinglcq/CDCS" -> "crownpku/Awesome-Chinese-NLP"
"geekinglcq/CDCS" -> "ymcui/Chinese-PreTrained-XLNet"
"geekinglcq/CDCS" -> "datawhalechina/competition-baseline" ["e"=1]
"geekinglcq/CDCS" -> "guoday/Tencent2019_Preliminary_Rank1st" ["e"=1]
"geekinglcq/CDCS" -> "crownpku/Information-Extraction-Chinese"
"geekinglcq/CDCS" -> "PaddlePaddle/LARK"
"geekinglcq/CDCS" -> "NTMC-Community/MatchZoo"
"geekinglcq/CDCS" -> "bojone/kg-2019"
"geekinglcq/CDCS" -> "ymcui/Chinese-BERT-wwm"
"geekinglcq/CDCS" -> "Embedding/Chinese-Word-Vectors"
"jianzhu/dl-notes" -> "panyang/AINLP-Resource"
"jianzhu/dl-notes" -> "didi/ChineseNLP"
"jianzhu/dl-notes" -> "msgi/nlp-journey"
"jianzhu/dl-notes" -> "zibuyu/research_tao"
"jianzhu/dl-notes" -> "NTMC-Community/MatchZoo-py"
"jianzhu/dl-notes" -> "yhangf/ML-NOTE" ["e"=1]
"jianzhu/dl-notes" -> "songyingxin/NLPer-Interview"
"jianzhu/dl-notes" -> "zhanggyb/nndl" ["e"=1]
"jianzhu/dl-notes" -> "imsheridan/DeepRec" ["e"=1]
"jianzhu/dl-notes" -> "apachecn/feature-engineering-for-ml-zh" ["e"=1]
"jianzhu/dl-notes" -> "yangxudong/deeplearning" ["e"=1]
"jianzhu/dl-notes" -> "ZhuiyiTechnology/simbert"
"jianzhu/dl-notes" -> "songyingxin/TextClassification-Pytorch"
"jianzhu/dl-notes" -> "sladesha/deep_learning" ["e"=1]
"jianzhu/dl-notes" -> "ZhuiyiTechnology/pretrained-models"
"qq547276542/Agriculture_KnowledgeGraph" -> "liuhuanyong/QASystemOnMedicalKG"
"qq547276542/Agriculture_KnowledgeGraph" -> "npubird/KnowledgeGraphCourse"
"qq547276542/Agriculture_KnowledgeGraph" -> "husthuke/awesome-knowledge-graph"
"qq547276542/Agriculture_KnowledgeGraph" -> "lemonhu/stock-knowledge-graph"
"qq547276542/Agriculture_KnowledgeGraph" -> "thunlp/OpenNRE"
"qq547276542/Agriculture_KnowledgeGraph" -> "macanv/BERT-BiLSTM-CRF-NER"
"qq547276542/Agriculture_KnowledgeGraph" -> "crownpku/Information-Extraction-Chinese"
"qq547276542/Agriculture_KnowledgeGraph" -> "ownthink/Jiagu"
"qq547276542/Agriculture_KnowledgeGraph" -> "Determined22/zh-NER-TF"
"qq547276542/Agriculture_KnowledgeGraph" -> "memect/kg-beijing"
"qq547276542/Agriculture_KnowledgeGraph" -> "lixiang0/WEB_KG"
"qq547276542/Agriculture_KnowledgeGraph" -> "SimmerChan/KG-demo-for-movie"
"qq547276542/Agriculture_KnowledgeGraph" -> "ownthink/KnowledgeGraphData"
"qq547276542/Agriculture_KnowledgeGraph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"qq547276542/Agriculture_KnowledgeGraph" -> "zhihao-chen/QASystemOnMedicalGraph"
"shawroad/NLP_pytorch_project" -> "zhengyanzhao1997/NLP-model"
"shawroad/NLP_pytorch_project" -> "lonePatient/BERT-NER-Pytorch"
"shawroad/NLP_pytorch_project" -> "zhaogaofeng611/TextMatch"
"shawroad/NLP_pytorch_project" -> "universal-ie/UIE"
"shawroad/NLP_pytorch_project" -> "TingFree/NLPer-Arsenal"
"shawroad/NLP_pytorch_project" -> "v-mipeng/LexiconAugmentedNER"
"shawroad/NLP_pytorch_project" -> "z814081807/DeepNER"
"shawroad/NLP_pytorch_project" -> "heiheiyoyo/uie_pytorch"
"shawroad/NLP_pytorch_project" -> "DSXiangLi/ChineseNER"
"shawroad/NLP_pytorch_project" -> "Tongjilibo/bert4torch" ["e"=1]
"shawroad/NLP_pytorch_project" -> "PeijiYang/BERT-BiLSTM-CRF-NER-pytorch"
"shawroad/NLP_pytorch_project" -> "jasoncao11/nlp-notebook"
"shawroad/NLP_pytorch_project" -> "loujie0822/Pre-trained-Models"
"shawroad/NLP_pytorch_project" -> "zhengyima/kg-baseline-pytorch"
"shawroad/NLP_pytorch_project" -> "zhusleep/pytorch_chinese_lm_pretrain"
"liuhuanyong/ChainKnowledgeGraph" -> "liuhuanyong/DomainWordsDict"
"alibaba/EasyNLP" -> "IDEA-CCNL/Fengshenbang-LM"
"alibaba/EasyNLP" -> "alibaba/EasyCV" ["e"=1]
"alibaba/EasyNLP" -> "alibaba/AliceMind"
"alibaba/EasyNLP" -> "thunlp/OpenPrompt" ["e"=1]
"alibaba/EasyNLP" -> "loujie0822/DeepIE"
"alibaba/EasyNLP" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"alibaba/EasyNLP" -> "dbiir/UER-py"
"alibaba/EasyNLP" -> "princeton-nlp/SimCSE"
"alibaba/EasyNLP" -> "airaria/TextBrewer"
"alibaba/EasyNLP" -> "TingFree/NLPer-Arsenal"
"alibaba/EasyNLP" -> "CLUEbenchmark/CLUE"
"alibaba/EasyNLP" -> "alibaba/EasyTransfer"
"alibaba/EasyNLP" -> "ShannonAI/mrc-for-flat-nested-ner"
"alibaba/EasyNLP" -> "km1994/NLP-Interview-Notes"
"alibaba/EasyNLP" -> "brightmart/roberta_zh"
"mbs0221/Multitask-Learning" -> "lorenmt/mtan"
"mbs0221/Multitask-Learning" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"mbs0221/Multitask-Learning" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"mbs0221/Multitask-Learning" -> "JayYip/bert-multitask-learning"
"mbs0221/Multitask-Learning" -> "yaringal/multi-task-learning-example"
"mbs0221/Multitask-Learning" -> "intel-isl/MultiObjectiveOptimization"
"mbs0221/Multitask-Learning" -> "helloyide/Cross-stitch-Networks-for-Multi-task-Learning"
"mbs0221/Multitask-Learning" -> "median-research-group/LibMTL"
"mbs0221/Multitask-Learning" -> "jiayuzhou/MALSAR"
"mbs0221/Multitask-Learning" -> "hosseinshn/GradNorm"
"mbs0221/Multitask-Learning" -> "drawbridge/keras-mmoe" ["e"=1]
"mbs0221/Multitask-Learning" -> "mitmedialab/PersonalizedMultitaskLearning"
"mbs0221/Multitask-Learning" -> "brianlan/pytorch-grad-norm"
"mbs0221/Multitask-Learning" -> "ranandalon/mtl"
"mbs0221/Multitask-Learning" -> "hosseinshn/Basic-Multi-task-Learning"
"baidu/Senta" -> "baidu/lac"
"baidu/Senta" -> "baidu/AnyQ"
"baidu/Senta" -> "baidu/Familia"
"baidu/Senta" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"baidu/Senta" -> "SophonPlus/ChineseNlpCorpus"
"baidu/Senta" -> "ymcui/Chinese-BERT-wwm"
"baidu/Senta" -> "CLUEbenchmark/CLUE"
"baidu/Senta" -> "isnowfy/snownlp"
"baidu/Senta" -> "brightmart/roberta_zh"
"baidu/Senta" -> "rainarch/SentiBridge"
"baidu/Senta" -> "PaddlePaddle/ERNIE"
"baidu/Senta" -> "Embedding/Chinese-Word-Vectors"
"baidu/Senta" -> "dbiir/UER-py"
"baidu/Senta" -> "blmoistawinde/HarvestText"
"baidu/Senta" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"RandolphVI/Multi-Label-Text-Classification" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "chenzhi1992/Multi-Label-Text-Classification"
"RandolphVI/Multi-Label-Text-Classification" -> "inspirehep/magpie"
"RandolphVI/Multi-Label-Text-Classification" -> "lancopku/SGM" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "yongyehuang/zhihu-text-classification"
"RandolphVI/Multi-Label-Text-Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"RandolphVI/Multi-Label-Text-Classification" -> "yourh/AttentionXML" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "Vincent131499/Multi_Label_Classifier_finetune"
"RandolphVI/Multi-Label-Text-Classification" -> "lancopku/SU4MLC" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "hellonlp/classifier_multi_label_textcnn"
"RandolphVI/Multi-Label-Text-Classification" -> "brightmart/multi-label_classification" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "yongzhuo/Keras-TextClassification"
"RandolphVI/Multi-Label-Text-Classification" -> "brightmart/sentiment_analysis_fine_grain"
"RandolphVI/Multi-Label-Text-Classification" -> "HX-idiot/Hybrid_Attention_XML"
"dongxiexidian/Chinese" -> "HIT-SCIR/pyltp"
"dongxiexidian/Chinese" -> "rainarch/SentiBridge"
"dongxiexidian/Chinese" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"dongxiexidian/Chinese" -> "to-shimo/chinese-word2vec"
"dongxiexidian/Chinese" -> "sing1ee/dict_build"
"dongxiexidian/Chinese" -> "baidu/DuReader" ["e"=1]
"dongxiexidian/Chinese" -> "baidu/Familia"
"dongxiexidian/Chinese" -> "Moonshile/ChineseWordSegmentation"
"dongxiexidian/Chinese" -> "koth/kcws"
"dongxiexidian/Chinese" -> "candlewill/Dialog_Corpus" ["e"=1]
"dongxiexidian/Chinese" -> "crownpku/Small-Chinese-Corpus"
"dongxiexidian/Chinese" -> "baidu/AnyQ"
"dongxiexidian/Chinese" -> "InsaneLife/dssm" ["e"=1]
"dongxiexidian/Chinese" -> "huyingxi/Synonyms"
"dongxiexidian/Chinese" -> "faneshion/MatchZoo"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/CognitiveInference"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/PersonGraphDataSet"
"liuhuanyong/ChineseDiachronicCorpus" -> "SimmerChan/corpus"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/ChineseSemanticKB"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/DomainWordsDict"
"liuhuanyong/ChineseDiachronicCorpus" -> "NiuTrans/Classical-Modern" ["e"=1]
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/TextGrapher"
"liuhuanyong/ChineseDiachronicCorpus" -> "caspiankexin/people-daily-crawler-date"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/DomainWordsDict"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/MiningZhiDaoQACorpus"
"liuhuanyong/ChineseSemanticKB" -> "yaleimeng/Final_word_Similarity"
"liuhuanyong/ChineseSemanticKB" -> "guotong1988/chinese_dictionary"
"liuhuanyong/ChineseSemanticKB" -> "baidu/DDParser"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/TextGrapher"
"liuhuanyong/ChineseSemanticKB" -> "loujie0822/DeepIE"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/ChineseSemanticKB" -> "SimmerChan/corpus"
"liuhuanyong/ChineseSemanticKB" -> "CLUEbenchmark/CLUEPretrainedModels"
"liuhuanyong/ChineseSemanticKB" -> "thunlp/THUOCL"
"liuhuanyong/ChineseSemanticKB" -> "ZhuiyiTechnology/roformer-sim"
"liuhuanyong/ChineseSemanticKB" -> "ZhuiyiTechnology/pretrained-models"
"liuhuanyong/ChineseSemanticKB" -> "fastnlp/fastHan"
"qiu997018209/KnowledgeGraph" -> "kangzhun/KnowledgeGraph-QA-Service"
"qiu997018209/KnowledgeGraph" -> "ownthink/KG-View"
"qiu997018209/KnowledgeGraph" -> "M0025/KnowledgeGraphOfA-shareCompanys"
"qiu997018209/KnowledgeGraph" -> "s-top/Baike-KnowledgeGraph"
"qiu997018209/KnowledgeGraph" -> "AdiaLoveTrance/MedicalInsuranceKG"
"Lightning-AI/metrics" -> "Lightning-AI/lightning-bolts"
"Lightning-AI/metrics" -> "Lightning-AI/lightning-flash"
"Lightning-AI/metrics" -> "Lightning-AI/lightning" ["e"=1]
"Lightning-AI/metrics" -> "Lightning-AI/lightning-transformers"
"Lightning-AI/metrics" -> "Lightning-AI/deep-learning-project-template"
"ranandalon/mtl" -> "yaringal/multi-task-learning-example"
"ranandalon/mtl" -> "Mikoto10032/AutomaticWeightedLoss"
"ranandalon/mtl" -> "Hui-Li/multi-task-learning-example-PyTorch"
"ranandalon/mtl" -> "intel-isl/MultiObjectiveOptimization"
"ranandalon/mtl" -> "lorenmt/mtan"
"ranandalon/mtl" -> "hardianlawi/MTL-Homoscedastic-Uncertainty"
"ranandalon/mtl" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"ranandalon/mtl" -> "helloyide/Cross-stitch-Networks-for-Multi-task-Learning"
"ranandalon/mtl" -> "hosseinshn/GradNorm"
"ranandalon/mtl" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"ranandalon/mtl" -> "Manchery/awesome-multi-task-learning"
"ranandalon/mtl" -> "pmorerio/dl-uncertainty" ["e"=1]
"ranandalon/mtl" -> "brianlan/pytorch-grad-norm"
"ranandalon/mtl" -> "oxcsaml2019/multitask-learning"
"ranandalon/mtl" -> "drawbridge/keras-mmoe" ["e"=1]
"CyberZHG/keras-bert" -> "bojone/bert_in_keras"
"CyberZHG/keras-bert" -> "bojone/bert4keras"
"CyberZHG/keras-bert" -> "BrikerMan/Kashgari"
"CyberZHG/keras-bert" -> "brightmart/albert_zh"
"CyberZHG/keras-bert" -> "ymcui/Chinese-BERT-wwm"
"CyberZHG/keras-bert" -> "macanv/BERT-BiLSTM-CRF-NER"
"CyberZHG/keras-bert" -> "Separius/BERT-keras" ["e"=1]
"CyberZHG/keras-bert" -> "brightmart/roberta_zh"
"CyberZHG/keras-bert" -> "hanxiao/bert-as-service" ["e"=1]
"CyberZHG/keras-bert" -> "CLUEbenchmark/CLUE"
"CyberZHG/keras-bert" -> "yongzhuo/Keras-TextClassification"
"CyberZHG/keras-bert" -> "zhpmatrix/nlp-competitions-list-review"
"CyberZHG/keras-bert" -> "zihangdai/xlnet" ["e"=1]
"CyberZHG/keras-bert" -> "Embedding/Chinese-Word-Vectors"
"CyberZHG/keras-bert" -> "Jiakui/awesome-bert"
"bojone/bert_in_keras" -> "CyberZHG/keras-bert"
"bojone/bert_in_keras" -> "bojone/kg-2019"
"bojone/bert_in_keras" -> "yuanxiaosc/Entity-Relation-Extraction"
"bojone/bert_in_keras" -> "ymcui/Chinese-PreTrained-XLNet"
"bojone/bert_in_keras" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"bojone/bert_in_keras" -> "stephen-v/zh-NER-keras" ["e"=1]
"bojone/bert_in_keras" -> "bojone/bert4keras"
"bojone/bert_in_keras" -> "panchunguang/ccks_baidu_entity_link"
"bojone/bert_in_keras" -> "terrifyzhao/bert-utils"
"bojone/bert_in_keras" -> "beader/tianchi_nl2sql" ["e"=1]
"bojone/bert_in_keras" -> "Separius/BERT-keras" ["e"=1]
"bojone/bert_in_keras" -> "BrikerMan/Kashgari"
"bojone/bert_in_keras" -> "CyberZHG/summary"
"bojone/bert_in_keras" -> "ZhuiyiTechnology/nl2sql_baseline" ["e"=1]
"bojone/bert_in_keras" -> "brightmart/roberta_zh"
"liu-nlper/NER-LSTM-CRF" -> "liu-nlper/SLTK"
"liu-nlper/NER-LSTM-CRF" -> "chilynn/sequence-labeling"
"liu-nlper/NER-LSTM-CRF" -> "shiyybua/NER"
"liu-nlper/NER-LSTM-CRF" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"liu-nlper/NER-LSTM-CRF" -> "LopezGG/NN_NER_tensorFlow"
"liu-nlper/NER-LSTM-CRF" -> "guillaumegenthial/sequence_tagging"
"liu-nlper/NER-LSTM-CRF" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"liu-nlper/NER-LSTM-CRF" -> "zjy-ucas/ChineseNER"
"liu-nlper/NER-LSTM-CRF" -> "heshenghuan/LSTM-CRF"
"liu-nlper/NER-LSTM-CRF" -> "rockingdingo/deepnlp"
"liu-nlper/NER-LSTM-CRF" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"liu-nlper/NER-LSTM-CRF" -> "liu-nlper/DocumentClassification" ["e"=1]
"liu-nlper/NER-LSTM-CRF" -> "ZhixiuYe/NER-pytorch"
"liu-nlper/NER-LSTM-CRF" -> "clab/stack-lstm-ner"
"liu-nlper/NER-LSTM-CRF" -> "thunlp/TensorFlow-NRE" ["e"=1]
"luge-ai/luge-ai" -> "thu-coai/CrossWOZ" ["e"=1]
"luge-ai/luge-ai" -> "baidu/DDParser"
"luge-ai/luge-ai" -> "CLUEbenchmark/CLUECorpus2020"
"luge-ai/luge-ai" -> "SimmerChan/corpus"
"luge-ai/luge-ai" -> "YunwenTechnology/Unilm"
"luge-ai/luge-ai" -> "AtmaHou/MetaDialog" ["e"=1]
"luge-ai/luge-ai" -> "thu-coai/CDial-GPT"
"luge-ai/luge-ai" -> "thu-coai/KdConv" ["e"=1]
"luge-ai/luge-ai" -> "ymcui/Chinese-ELECTRA"
"luge-ai/luge-ai" -> "loujie0822/DeepIE"
"zhang17173/Event-Extraction" -> "benkang-chen/Event-Extraction"
"zhang17173/Event-Extraction" -> "nlpcl-lab/bert-event-extraction"
"zhang17173/Event-Extraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"zhang17173/Event-Extraction" -> "liuhuanyong/LawCrimeMining"
"zhang17173/Event-Extraction" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"zhang17173/Event-Extraction" -> "xiaoqian19940510/Event-Extraction"
"zhang17173/Event-Extraction" -> "BaptisteBlouin/EventExtractionPapers"
"zhang17173/Event-Extraction" -> "carrie0307/DL_EventExtractionPapers"
"zhang17173/Event-Extraction" -> "liuhuanyong/CrimeKgAssitant"
"zhang17173/Event-Extraction" -> "liuhuanyong/EventTriplesExtraction"
"zhang17173/Event-Extraction" -> "nlpcl-lab/ace2005-preprocessing"
"zhang17173/Event-Extraction" -> "GuidoPaul/CAIL2019" ["e"=1]
"zhang17173/Event-Extraction" -> "liuhuanyong/ComplexEventExtraction"
"zhang17173/Event-Extraction" -> "hecongqing/CCKS2019_EventEntityExtraction_Rank5"
"zhang17173/Event-Extraction" -> "IanHongruZhang/Openlaw_tools"
"131250208/TPlinker-joint-extraction" -> "weizhepei/CasRel"
"131250208/TPlinker-joint-extraction" -> "princeton-nlp/PURE"
"131250208/TPlinker-joint-extraction" -> "DianboWork/SPN4RE"
"131250208/TPlinker-joint-extraction" -> "loujie0822/DeepIE"
"131250208/TPlinker-joint-extraction" -> "gaohongkui/TPLinker-NER"
"131250208/TPlinker-joint-extraction" -> "longlongman/CasRel-pytorch-reimplement"
"131250208/TPlinker-joint-extraction" -> "LeeSureman/Flat-Lattice-Transformer"
"131250208/TPlinker-joint-extraction" -> "powerycy/TPlinker-ycy"
"131250208/TPlinker-joint-extraction" -> "LorrinWWW/two-are-better-than-one"
"131250208/TPlinker-joint-extraction" -> "Coopercoppers/PFN"
"131250208/TPlinker-joint-extraction" -> "ShannonAI/mrc-for-flat-nested-ner"
"131250208/TPlinker-joint-extraction" -> "universal-ie/UIE"
"131250208/TPlinker-joint-extraction" -> "Onion12138/CasRelPyTorch"
"131250208/TPlinker-joint-extraction" -> "juntaoy/biaffine-ner"
"131250208/TPlinker-joint-extraction" -> "yubowen-ph/JointER" ["e"=1]
"zjunlp/deepke" -> "buppt/ChineseNRE"
"zjunlp/deepke" -> "yuanxiaosc/Entity-Relation-Extraction"
"zjunlp/deepke" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"zjunlp/deepke" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"zjunlp/deepke" -> "thunlp/OpenNRE"
"zjunlp/deepke" -> "loujie0822/DeepIE"
"zjunlp/deepke" -> "bojone/kg-2019"
"zjunlp/deepke" -> "panchunguang/ccks_baidu_entity_link"
"zjunlp/deepke" -> "ownthink/Jiagu"
"zjunlp/deepke" -> "crownpku/Information-Extraction-Chinese"
"zjunlp/deepke" -> "thunlp/FewRel" ["e"=1]
"zjunlp/deepke" -> "weizhepei/CasRel"
"zjunlp/deepke" -> "lemonhu/open-entity-relation-extraction"
"zjunlp/deepke" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"zjunlp/deepke" -> "zhengyima/kg-baseline-pytorch"
"huyingxi/Synonyms" -> "Embedding/Chinese-Word-Vectors"
"huyingxi/Synonyms" -> "brightmart/nlp_chinese_corpus"
"huyingxi/Synonyms" -> "brightmart/albert_zh"
"huyingxi/Synonyms" -> "yaleimeng/Final_word_Similarity"
"huyingxi/Synonyms" -> "crownpku/Awesome-Chinese-NLP"
"huyingxi/Synonyms" -> "baidu/Familia"
"huyingxi/Synonyms" -> "brightmart/text_classification" ["e"=1]
"huyingxi/Synonyms" -> "baidu/AnyQ"
"huyingxi/Synonyms" -> "HIT-SCIR/pyltp"
"huyingxi/Synonyms" -> "ymcui/Chinese-BERT-wwm"
"huyingxi/Synonyms" -> "hankcs/pyhanlp"
"huyingxi/Synonyms" -> "shibing624/pycorrector"
"huyingxi/Synonyms" -> "lancopku/pkuseg-python"
"huyingxi/Synonyms" -> "macanv/BERT-BiLSTM-CRF-NER"
"huyingxi/Synonyms" -> "rockyzhengwu/FoolNLTK"
"mit-gfx/ContinuousParetoMTL" -> "Xi-L/ParetoMTL"
"mit-gfx/ContinuousParetoMTL" -> "dbmptr/EPOSearch"
"guillaumegenthial/tf_ner" -> "guillaumegenthial/sequence_tagging"
"guillaumegenthial/tf_ner" -> "kyzhouhzau/BERT-NER"
"guillaumegenthial/tf_ner" -> "Hironsan/anago"
"guillaumegenthial/tf_ner" -> "Determined22/zh-NER-TF"
"guillaumegenthial/tf_ner" -> "zjy-ucas/ChineseNER"
"guillaumegenthial/tf_ner" -> "macanv/BERT-BiLSTM-CRF-NER"
"guillaumegenthial/tf_ner" -> "guillaumegenthial/tf_metrics"
"guillaumegenthial/tf_ner" -> "jiesutd/NCRFpp"
"guillaumegenthial/tf_ner" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"guillaumegenthial/tf_ner" -> "jiesutd/LatticeLSTM"
"guillaumegenthial/tf_ner" -> "Franck-Dernoncourt/NeuroNER"
"guillaumegenthial/tf_ner" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"guillaumegenthial/tf_ner" -> "crownpku/Information-Extraction-Chinese"
"guillaumegenthial/tf_ner" -> "ProHiryu/bert-chinese-ner"
"guillaumegenthial/tf_ner" -> "glample/tagger"
"kyzhouhzau/BERT-NER" -> "ProHiryu/bert-chinese-ner"
"kyzhouhzau/BERT-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"kyzhouhzau/BERT-NER" -> "kamalkraj/BERT-NER"
"kyzhouhzau/BERT-NER" -> "zjy-ucas/ChineseNER"
"kyzhouhzau/BERT-NER" -> "FuYanzhe2/Name-Entity-Recognition"
"kyzhouhzau/BERT-NER" -> "guillaumegenthial/tf_ner"
"kyzhouhzau/BERT-NER" -> "jiesutd/NCRFpp"
"kyzhouhzau/BERT-NER" -> "guillaumegenthial/sequence_tagging"
"kyzhouhzau/BERT-NER" -> "jiesutd/LatticeLSTM"
"kyzhouhzau/BERT-NER" -> "Determined22/zh-NER-TF"
"kyzhouhzau/BERT-NER" -> "brightmart/roberta_zh"
"kyzhouhzau/BERT-NER" -> "xuanzebi/BERT-CH-NER"
"kyzhouhzau/BERT-NER" -> "brightmart/albert_zh"
"kyzhouhzau/BERT-NER" -> "crownpku/Information-Extraction-Chinese"
"kyzhouhzau/BERT-NER" -> "yumath/bertNER"
"Hironsan/anago" -> "guillaumegenthial/sequence_tagging"
"Hironsan/anago" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"Hironsan/anago" -> "Franck-Dernoncourt/NeuroNER"
"Hironsan/anago" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"Hironsan/anago" -> "guillaumegenthial/tf_ner"
"Hironsan/anago" -> "jiesutd/NCRFpp"
"Hironsan/anago" -> "glample/tagger"
"Hironsan/anago" -> "allenai/bilm-tf" ["e"=1]
"Hironsan/anago" -> "zjy-ucas/ChineseNER"
"Hironsan/anago" -> "chakki-works/doccano" ["e"=1]
"Hironsan/anago" -> "UKPLab/elmo-bilstm-cnn-crf"
"Hironsan/anago" -> "Determined22/zh-NER-TF"
"Hironsan/anago" -> "crownpku/Information-Extraction-Chinese"
"Hironsan/anago" -> "zalandoresearch/flair" ["e"=1]
"Hironsan/anago" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"brightmart/bert_language_understanding" -> "brightmart/sentiment_analysis_fine_grain"
"brightmart/bert_language_understanding" -> "Separius/BERT-keras" ["e"=1]
"brightmart/bert_language_understanding" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"brightmart/bert_language_understanding" -> "PaddlePaddle/LARK"
"brightmart/bert_language_understanding" -> "Jiakui/awesome-bert"
"brightmart/bert_language_understanding" -> "NLPScott/bert-Chinese-classification-task"
"brightmart/bert_language_understanding" -> "brightmart/text_classification" ["e"=1]
"brightmart/bert_language_understanding" -> "kyzhouhzau/BERT-NER"
"brightmart/bert_language_understanding" -> "chenyuntc/PyTorchText"
"brightmart/bert_language_understanding" -> "allenai/bilm-tf" ["e"=1]
"brightmart/bert_language_understanding" -> "ymcui/Chinese-PreTrained-XLNet"
"brightmart/bert_language_understanding" -> "Y1ran/NLP-BERT--ChineseVersion"
"brightmart/bert_language_understanding" -> "ProHiryu/bert-chinese-ner"
"brightmart/bert_language_understanding" -> "openai/finetune-transformer-lm" ["e"=1]
"brightmart/bert_language_understanding" -> "brightmart/nlu_sim"
"guotong1988/chinese_dictionary" -> "yaleimeng/Final_word_Similarity"
"guotong1988/chinese_dictionary" -> "Keson96/SynoCN"
"guotong1988/chinese_dictionary" -> "liuhuanyong/ChineseSemanticKB"
"guotong1988/chinese_dictionary" -> "fighting41love/cocoNLP"
"guotong1988/chinese_dictionary" -> "zhangyics/Chinese-abbreviation-dataset"
"guotong1988/chinese_dictionary" -> "chatopera/Synonyms"
"guotong1988/chinese_dictionary" -> "fighting41love/Chinese_from_dongxiexidian"
"guotong1988/chinese_dictionary" -> "thunlp/THUOCL"
"guotong1988/chinese_dictionary" -> "BiLiangLtd/WordSimilarity"
"guotong1988/chinese_dictionary" -> "rainarch/SentiBridge"
"guotong1988/chinese_dictionary" -> "tigerchen52/synonym_detection"
"guotong1988/chinese_dictionary" -> "liuhuanyong/ChineseEmbedding"
"guotong1988/chinese_dictionary" -> "kfcd/chaizi" ["e"=1]
"guotong1988/chinese_dictionary" -> "pengming617/text_matching"
"guotong1988/chinese_dictionary" -> "fighting41love/hardNLU"
"heshenghuan/LSTM-CRF" -> "LopezGG/NN_NER_tensorFlow"
"hltcoe/golden-horse" -> "jiesutd/LatticeLSTM"
"hltcoe/golden-horse" -> "v-mipeng/LexiconAugmentedNER"
"hltcoe/golden-horse" -> "zjy-ucas/ChineseNER"
"hltcoe/golden-horse" -> "CPF-NLPR/AT4ChineseNER"
"hltcoe/golden-horse" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"hltcoe/golden-horse" -> "glample/tagger"
"hltcoe/golden-horse" -> "LeeSureman/Flat-Lattice-Transformer"
"hltcoe/golden-horse" -> "iesl/dilated-cnn-ner"
"hltcoe/golden-horse" -> "jiesutd/RichWordSegmentor"
"hltcoe/golden-horse" -> "thunlp/TensorFlow-NRE" ["e"=1]
"hltcoe/golden-horse" -> "OYE93/Chinese-NLP-Corpus"
"hltcoe/golden-horse" -> "ShannonAI/mrc-for-flat-nested-ner"
"hltcoe/golden-horse" -> "jiesutd/NCRFpp"
"hltcoe/golden-horse" -> "InsaneLife/ChineseNLPCorpus"
"hltcoe/golden-horse" -> "juntaoy/biaffine-ner"
"blmoistawinde/HarvestText" -> "ownthink/Jiagu"
"blmoistawinde/HarvestText" -> "dongrixinyu/JioNLP"
"blmoistawinde/HarvestText" -> "letiantian/TextRank4ZH"
"blmoistawinde/HarvestText" -> "liuhuanyong/TextGrapher"
"blmoistawinde/HarvestText" -> "liuhuanyong/EventTriplesExtraction"
"blmoistawinde/HarvestText" -> "CLUEbenchmark/CLUEDatasetSearch"
"blmoistawinde/HarvestText" -> "shibing624/pycorrector"
"blmoistawinde/HarvestText" -> "hankcs/pyhanlp"
"blmoistawinde/HarvestText" -> "panchunguang/ccks_baidu_entity_link"
"blmoistawinde/HarvestText" -> "zhpmatrix/nlp-competitions-list-review"
"blmoistawinde/HarvestText" -> "InsaneLife/ChineseNLPCorpus"
"blmoistawinde/HarvestText" -> "SophonPlus/ChineseNlpCorpus"
"blmoistawinde/HarvestText" -> "CLUEbenchmark/CLUE"
"blmoistawinde/HarvestText" -> "zhanlaoban/EDA_NLP_for_Chinese"
"blmoistawinde/HarvestText" -> "yongzhuo/nlp_xiaojiang"
"dbiir/UER-py" -> "brightmart/roberta_zh"
"dbiir/UER-py" -> "brightmart/albert_zh"
"dbiir/UER-py" -> "CLUEbenchmark/CLUE"
"dbiir/UER-py" -> "ymcui/Chinese-BERT-wwm"
"dbiir/UER-py" -> "huawei-noah/Pretrained-Language-Model"
"dbiir/UER-py" -> "loujie0822/DeepIE"
"dbiir/UER-py" -> "airaria/TextBrewer"
"dbiir/UER-py" -> "bojone/bert4keras"
"dbiir/UER-py" -> "princeton-nlp/SimCSE"
"dbiir/UER-py" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"dbiir/UER-py" -> "shibing624/pycorrector"
"dbiir/UER-py" -> "brightmart/nlp_chinese_corpus"
"dbiir/UER-py" -> "ZhuiyiTechnology/pretrained-models"
"dbiir/UER-py" -> "ymcui/Chinese-ELECTRA"
"dbiir/UER-py" -> "autoliuweijie/K-BERT"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/ChineseSemanticKB"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/ChainKnowledgeGraph"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/PersonGraphDataSet"
"liuhuanyong/DomainWordsDict" -> "sunyilgdx/SIFRank_zh"
"liuhuanyong/DomainWordsDict" -> "CLUEbenchmark/SimCLUE"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/ChineseDiachronicCorpus"
"liuhuanyong/MiningZhiDaoQACorpus" -> "lizhe2004/chatbot-list"
"liuhuanyong/MiningZhiDaoQACorpus" -> "ymcui/Chinese-RC-Datasets" ["e"=1]
"liuhuanyong/MiningZhiDaoQACorpus" -> "liuhuanyong/MusicLyricChatbot"
"liuhuanyong/MiningZhiDaoQACorpus" -> "liuhuanyong/ChineseSemanticKB"
"liuhuanyong/MiningZhiDaoQACorpus" -> "charlesXu86/Chatbot_CN"
"liuhuanyong/MiningZhiDaoQACorpus" -> "liuhuanyong/AbstractKnowledgeGraph"
"liuhuanyong/MiningZhiDaoQACorpus" -> "ZhuiyiTechnology/pretrained-models"
"liuhuanyong/MiningZhiDaoQACorpus" -> "thu-coai/KdConv" ["e"=1]
"liuhuanyong/MiningZhiDaoQACorpus" -> "CLUEbenchmark/CLUEPretrainedModels"
"liuhuanyong/MiningZhiDaoQACorpus" -> "wavewangyue/kbqa" ["e"=1]
"liuhuanyong/PersonRelationKnowledgeGraph" -> "lixiang0/WEB_KG"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "zhihao-chen/QASystemOnMedicalGraph"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "qq547276542/Agriculture_KnowledgeGraph"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/TextGrapher"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "lemonhu/stock-knowledge-graph"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "buppt/ChineseNRE"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/ProductKnowledgeGraph"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "yuanxiaosc/Entity-Relation-Extraction"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/EventTriplesExtraction"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "liuhuanyong/QAonMilitaryKG"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "smilelight/lightKG"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "Pelhans/Z_knowledge_graph"
"liuhuanyong/PersonRelationKnowledgeGraph" -> "crownpku/Information-Extraction-Chinese"
"lonePatient/NeZha_Chinese_PyTorch" -> "nilboy/gaic_track3_pair_sim"
"lonePatient/NeZha_Chinese_PyTorch" -> "bojone/oppo-text-match"
"lonePatient/NeZha_Chinese_PyTorch" -> "daniellibin/gaiic2021_track3_querySim" ["e"=1]
"lonePatient/NeZha_Chinese_PyTorch" -> "huanghuidmml/epidemicTextMatch"
"lonePatient/NeZha_Chinese_PyTorch" -> "DataArk/GAIIC2022-Product-Title-Entity-Recognition-Baseline" ["e"=1]
"lonePatient/NeZha_Chinese_PyTorch" -> "zr2021/2021_QQ_AIAC_Tack1_1st" ["e"=1]
"lonePatient/NeZha_Chinese_PyTorch" -> "xv44586/ccf_2020_qa_match"
"lonePatient/NeZha_Chinese_PyTorch" -> "z814081807/DeepNER"
"lonePatient/NeZha_Chinese_PyTorch" -> "luoda888/2021-GAIIC-phase3-idea"
"lonePatient/NeZha_Chinese_PyTorch" -> "gaohongkui/GlobalPointer_pytorch"
"lonePatient/NeZha_Chinese_PyTorch" -> "xiangking/ark-nlp" ["e"=1]
"lonePatient/NeZha_Chinese_PyTorch" -> "zhusleep/pytorch_chinese_lm_pretrain"
"lonePatient/NeZha_Chinese_PyTorch" -> "JunnYu/RoFormer_pytorch"
"lonePatient/NeZha_Chinese_PyTorch" -> "lonePatient/daguan_2019_rank9"
"valuesimplex/FinBERT" -> "smoothnlp/FinancialDatasets"
"valuesimplex/FinBERT" -> "icoxfog417/awesome-financial-nlp"
"valuesimplex/FinBERT" -> "ProsusAI/finBERT"
"valuesimplex/FinBERT" -> "loujie0822/DeepIE"
"valuesimplex/FinBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"valuesimplex/FinBERT" -> "qiufengyuyi/sequence_tagging"
"valuesimplex/FinBERT" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"valuesimplex/FinBERT" -> "dolphin-zs/Doc2EDAG"
"valuesimplex/FinBERT" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"valuesimplex/FinBERT" -> "z814081807/DeepNER"
"valuesimplex/FinBERT" -> "ZhuiyiTechnology/simbert"
"valuesimplex/FinBERT" -> "ZhuiyiTechnology/pretrained-models"
"valuesimplex/FinBERT" -> "panchunguang/ccks_baidu_entity_link"
"valuesimplex/FinBERT" -> "ZhuiyiTechnology/WoBERT"
"valuesimplex/FinBERT" -> "lonePatient/BERT-NER-Pytorch"
"xtea/chinese_medical_words" -> "liutongyang/CMID"
"xtea/chinese_medical_words" -> "lwgkzl/Covid19-NLP"
"NLPIR-team/NLPIR" -> "HIT-SCIR/ltp"
"NLPIR-team/NLPIR" -> "thunlp/THULAC-Python"
"NLPIR-team/NLPIR" -> "HIT-SCIR/pyltp"
"NLPIR-team/NLPIR" -> "isnowfy/snownlp"
"NLPIR-team/NLPIR" -> "NLPchina/ansj_seg"
"NLPIR-team/NLPIR" -> "FudanNLP/fnlp"
"NLPIR-team/NLPIR" -> "tsroten/pynlpir"
"NLPIR-team/NLPIR" -> "crownpku/Awesome-Chinese-NLP"
"NLPIR-team/NLPIR" -> "baidu/Familia"
"NLPIR-team/NLPIR" -> "lancopku/pkuseg-python"
"NLPIR-team/NLPIR" -> "brightmart/nlp_chinese_corpus"
"NLPIR-team/NLPIR" -> "Embedding/Chinese-Word-Vectors"
"NLPIR-team/NLPIR" -> "fxsjy/jieba"
"NLPIR-team/NLPIR" -> "hankcs/HanLP"
"NLPIR-team/NLPIR" -> "thunlp/THULAC"
"vinhkhuc/JFastText" -> "mayabot/fastText4j"
"vinhkhuc/JFastText" -> "ivanhk/fastText_java"
"vinhkhuc/JFastText" -> "linkfluence/fastText4j"
"Moonshile/ChineseWordSegmentation" -> "zhanzecheng/Chinese_segment_augment"
"Moonshile/ChineseWordSegmentation" -> "sing1ee/dict_build"
"Moonshile/ChineseWordSegmentation" -> "yanghanxy/New-Word-Detection"
"Moonshile/ChineseWordSegmentation" -> "bojone/word-discovery"
"Moonshile/ChineseWordSegmentation" -> "duanhongyi/genius"
"Moonshile/ChineseWordSegmentation" -> "xylander23/New-Word-Detection"
"Moonshile/ChineseWordSegmentation" -> "wyh267/ChineseWordSegmentation"
"Moonshile/ChineseWordSegmentation" -> "izisong/new-words-discovery"
"Moonshile/ChineseWordSegmentation" -> "hankcs/multi-criteria-cws"
"Moonshile/ChineseWordSegmentation" -> "ml-distribution/chinese-corpus"
"Moonshile/ChineseWordSegmentation" -> "zhanzecheng/Time_NLP"
"thunlp/THULAC" -> "thunlp/THULAC-Python"
"thunlp/THULAC" -> "yanyiwu/cppjieba"
"thunlp/THULAC" -> "thunlp/THULAC-Java"
"thunlp/THULAC" -> "HIT-SCIR/ltp"
"thunlp/THULAC" -> "NLPIR-team/NLPIR"
"thunlp/THULAC" -> "koth/kcws"
"thunlp/THULAC" -> "HIT-SCIR/pyltp"
"thunlp/THULAC" -> "taku910/crfpp" ["e"=1]
"thunlp/THULAC" -> "tsroten/pynlpir"
"thunlp/THULAC" -> "frcchang/zpar" ["e"=1]
"thunlp/THULAC" -> "FudanNLP/fnlp"
"thunlp/THULAC" -> "rockyzhengwu/FoolNLTK"
"thunlp/THULAC" -> "lzhang10/maxent" ["e"=1]
"thunlp/THULAC" -> "Lynten/stanford-corenlp" ["e"=1]
"thunlp/THULAC" -> "JustFollowUs/Natural-Language-Processing"
"XiaoMi/MiNLP" -> "TsinghuaAI/CPM-Generate"
"XiaoMi/MiNLP" -> "ymcui/Chinese-PreTrained-XLNet"
"XiaoMi/MiNLP" -> "liuhuanyong/ChineseSemanticKB"
"XiaoMi/MiNLP" -> "ZhuiyiTechnology/pretrained-models"
"XiaoMi/MiNLP" -> "ymcui/Chinese-ELECTRA"
"XiaoMi/MiNLP" -> "BDBC-KG-NLP/QA-Survey"
"XiaoMi/MiNLP" -> "dbiir/UER-py"
"XiaoMi/MiNLP" -> "brightmart/albert_zh"
"XiaoMi/MiNLP" -> "fastnlp/fastHan"
"XiaoMi/MiNLP" -> "airaria/TextBrewer"
"XiaoMi/MiNLP" -> "zhanlaoban/EDA_NLP_for_Chinese"
"XiaoMi/MiNLP" -> "brightmart/roberta_zh"
"XiaoMi/MiNLP" -> "ChineseGLUE/ChineseGLUE"
"XiaoMi/MiNLP" -> "zhusleep/pytorch_chinese_lm_pretrain"
"XiaoMi/MiNLP" -> "thu-coai/CrossWOZ" ["e"=1]
"thunlp/OpenCLaP" -> "GuidoPaul/CAIL2019" ["e"=1]
"thunlp/OpenCLaP" -> "china-ai-law-challenge/CAIL2019" ["e"=1]
"thunlp/OpenCLaP" -> "thunlp/LegalPapers" ["e"=1]
"thunlp/OpenCLaP" -> "bamtercelboo/Awesome-Law-NLP-Research-Work" ["e"=1]
"thunlp/OpenCLaP" -> "ymcui/Chinese-PreTrained-XLNet"
"thunlp/OpenCLaP" -> "brightmart/roberta_zh"
"thunlp/OpenCLaP" -> "padeoe/cail2019" ["e"=1]
"thunlp/OpenCLaP" -> "thunlp/CAIL" ["e"=1]
"thunlp/OpenCLaP" -> "thunlp/ERNIE"
"thunlp/OpenCLaP" -> "liuhuanyong/CrimeKgAssitant"
"thunlp/OpenCLaP" -> "ymcui/Chinese-ELECTRA"
"thunlp/OpenCLaP" -> "brightmart/albert_zh"
"thunlp/OpenCLaP" -> "zhpmatrix/nlp-competitions-list-review"
"thunlp/OpenCLaP" -> "dbiir/UER-py"
"thunlp/OpenCLaP" -> "thunlp/PLMpapers" ["e"=1]
"fighting41love/cocoNLP" -> "zhanzecheng/Time_NLP"
"fighting41love/cocoNLP" -> "liuhuanyong/TextGrapher"
"fighting41love/cocoNLP" -> "liuhuanyong/ComplexEventExtraction"
"fighting41love/cocoNLP" -> "dongrixinyu/JioNLP"
"fighting41love/cocoNLP" -> "wainshine/Company-Names-Corpus"
"fighting41love/cocoNLP" -> "guotong1988/chinese_dictionary"
"fighting41love/cocoNLP" -> "ownthink/Jiagu"
"fighting41love/cocoNLP" -> "baidu/information-extraction"
"fighting41love/cocoNLP" -> "liuhuanyong/EventTriplesExtraction"
"fighting41love/cocoNLP" -> "hankcs/pyhanlp"
"fighting41love/cocoNLP" -> "crownpku/Information-Extraction-Chinese"
"fighting41love/cocoNLP" -> "yongzhuo/nlp_xiaojiang"
"fighting41love/cocoNLP" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"fighting41love/cocoNLP" -> "terrifyzhao/bert-utils"
"fighting41love/cocoNLP" -> "wainshine/Chinese-Names-Corpus"
"shinyke/Time-NLP" -> "zhanzecheng/Time_NLP"
"shinyke/Time-NLP" -> "jsksxs360/AHANLP"
"shinyke/Time-NLP" -> "FudanNLP/fnlp"
"shinyke/Time-NLP" -> "crownpku/Chinese-Annotator"
"shinyke/Time-NLP" -> "xkzhangsan/xk-time"
"shinyke/Time-NLP" -> "mayabot/mynlp"
"shinyke/Time-NLP" -> "shibing624/similarity"
"shinyke/Time-NLP" -> "fighting41love/cocoNLP"
"shinyke/Time-NLP" -> "ryanInf/Time-NLPY"
"shinyke/Time-NLP" -> "NLPchina/nlp-lang"
"shinyke/Time-NLP" -> "kidden/nlp4han"
"shinyke/Time-NLP" -> "zjy-ucas/ChineseNER"
"shinyke/Time-NLP" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"shinyke/Time-NLP" -> "sing1ee/dict_build"
"shinyke/Time-NLP" -> "shijiebei2009/CEC-Corpus"
"jasoncao11/nlp-notebook" -> "yongzhuo/nlg-yongzhuo"
"jasoncao11/nlp-notebook" -> "shawroad/NLP_pytorch_project"
"jasoncao11/nlp-notebook" -> "murray-z/text_analysis_tools"
"jasoncao11/nlp-notebook" -> "shibing624/textgen" ["e"=1]
"jasoncao11/nlp-notebook" -> "zhangzhiqiangccm/NLP-project"
"jasoncao11/nlp-notebook" -> "taishan1994/pytorch_triple_extraction"
"jasoncao11/nlp-notebook" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"jasoncao11/nlp-notebook" -> "taishan1994/awesome-chinese-ner"
"jasoncao11/nlp-notebook" -> "HorieYuan/TransformerTextSummarization"
"jasoncao11/nlp-notebook" -> "shibing624/pytextclassifier"
"jasoncao11/nlp-notebook" -> "zhengyima/kg-baseline-pytorch"
"jasoncao11/nlp-notebook" -> "SunnyGJing/t5-pegasus-chinese"
"jasoncao11/nlp-notebook" -> "heiheiyoyo/uie_pytorch"
"jasoncao11/nlp-notebook" -> "Jacen789/relation-extraction"
"dongrixinyu/chinese_keyphrase_extractor" -> "sunyilgdx/SIFRank_zh"
"dongrixinyu/chinese_keyphrase_extractor" -> "dongrixinyu/JioNLP"
"dongrixinyu/chinese_keyphrase_extractor" -> "bigzhao/Keyword_Extraction"
"dongrixinyu/chinese_keyphrase_extractor" -> "DataTerminatorX/Keyword-BERT"
"dongrixinyu/chinese_keyphrase_extractor" -> "smoothnlp/SmoothNLP"
"dongrixinyu/chinese_keyphrase_extractor" -> "blmoistawinde/HarvestText"
"dongrixinyu/chinese_keyphrase_extractor" -> "murray-z/text_analysis_tools"
"dongrixinyu/chinese_keyphrase_extractor" -> "boudinfl/pke" ["e"=1]
"dongrixinyu/chinese_keyphrase_extractor" -> "ZhuiyiTechnology/pretrained-models"
"dongrixinyu/chinese_keyphrase_extractor" -> "bojone/word-discovery"
"dongrixinyu/chinese_keyphrase_extractor" -> "rsanshierli/EasyBert"
"dongrixinyu/chinese_keyphrase_extractor" -> "yongzhuo/Macropodus"
"dongrixinyu/chinese_keyphrase_extractor" -> "liuhuanyong/EventTriplesExtraction"
"dongrixinyu/chinese_keyphrase_extractor" -> "liuhuanyong/ImportantEventExtractor"
"dongrixinyu/chinese_keyphrase_extractor" -> "liuhuanyong/TextGrapher"
"jiesutd/NCRFpp" -> "jiesutd/LatticeLSTM"
"jiesutd/NCRFpp" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"jiesutd/NCRFpp" -> "kyzhouhzau/BERT-NER"
"jiesutd/NCRFpp" -> "guillaumegenthial/sequence_tagging"
"jiesutd/NCRFpp" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"jiesutd/NCRFpp" -> "zjy-ucas/ChineseNER"
"jiesutd/NCRFpp" -> "Determined22/zh-NER-TF"
"jiesutd/NCRFpp" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/NCRFpp" -> "allenai/bilm-tf" ["e"=1]
"jiesutd/NCRFpp" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"jiesutd/NCRFpp" -> "Hironsan/anago"
"jiesutd/NCRFpp" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"jiesutd/NCRFpp" -> "glample/tagger"
"jiesutd/NCRFpp" -> "brightmart/albert_zh"
"jiesutd/NCRFpp" -> "thunlp/ERNIE"
"baidu/DDParser" -> "baidu/lac"
"baidu/DDParser" -> "yzhangcs/parser" ["e"=1]
"baidu/DDParser" -> "BDBC-KG-NLP/QA-Survey"
"baidu/DDParser" -> "LeeSureman/Flat-Lattice-Transformer"
"baidu/DDParser" -> "liuhuanyong/ChineseSemanticKB"
"baidu/DDParser" -> "liuhuanyong/EventTriplesExtraction"
"baidu/DDParser" -> "ZhuiyiTechnology/pretrained-models"
"baidu/DDParser" -> "loujie0822/DeepIE"
"baidu/DDParser" -> "PaddlePaddle/TrustAI" ["e"=1]
"baidu/DDParser" -> "fastnlp/fastHan"
"baidu/DDParser" -> "baidu/DuReader" ["e"=1]
"baidu/DDParser" -> "brightmart/roberta_zh"
"baidu/DDParser" -> "ShannonAI/mrc-for-flat-nested-ner"
"baidu/DDParser" -> "airaria/TextBrewer"
"baidu/DDParser" -> "ZhuiyiTechnology/simbert"
"dhwajraj/deep-text-classifier-mtl" -> "dhwajraj/spark-text-tagger"
"dhwajraj/deep-text-classifier-mtl" -> "jg8610/multi-task-learning"
"dhwajraj/deep-text-classifier-mtl" -> "FrankWork/fudan_mtl_reviews"
"dhwajraj/deep-text-classifier-mtl" -> "dhwajraj/NER-RNN"
"jiangxinyang227/NLP-Project" -> "jiangxinyang227/textClassifier"
"jiangxinyang227/NLP-Project" -> "jiangxinyang227/bert-for-task"
"jiangxinyang227/NLP-Project" -> "zhanlaoban/Transformers_for_Text_Classification"
"jiangxinyang227/NLP-Project" -> "terrifyzhao/bert-utils"
"jiangxinyang227/NLP-Project" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"jiangxinyang227/NLP-Project" -> "yongzhuo/nlp_xiaojiang"
"jiangxinyang227/NLP-Project" -> "bojone/kg-2019"
"jiangxinyang227/NLP-Project" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"jiangxinyang227/NLP-Project" -> "yongzhuo/Keras-TextClassification"
"hankcs/TextRank" -> "xuyiqiang-learn/W2V_TextRank"
"complexdb/zincbase" -> "tomgrek/zincbase"
"mayabot/mynlp" -> "mayabot/fastText4j"
"mayabot/mynlp" -> "shibing624/similarity"
"mayabot/mynlp" -> "jsksxs360/AHANLP"
"mayabot/mynlp" -> "NLPchina/nlp-lang"
"mayabot/mynlp" -> "shinyke/Time-NLP"
"mayabot/mynlp" -> "vinhkhuc/JFastText"
"mayabot/mynlp" -> "kidden/nlp4han"
"mayabot/mynlp" -> "NLPchina/ansj_seg"
"mayabot/mynlp" -> "KennFalcon/elasticsearch-analysis-hanlp" ["e"=1]
"mayabot/mynlp" -> "huaban/jieba-analysis"
"mayabot/mynlp" -> "lionsoul2014/jcseg"
"PaddlePaddle/LARK" -> "thunlp/ERNIE"
"PaddlePaddle/LARK" -> "ymcui/Chinese-PreTrained-XLNet"
"PaddlePaddle/LARK" -> "zihangdai/xlnet" ["e"=1]
"PaddlePaddle/LARK" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"PaddlePaddle/LARK" -> "allenai/bilm-tf" ["e"=1]
"PaddlePaddle/LARK" -> "Jiakui/awesome-bert"
"PaddlePaddle/LARK" -> "baidu/AnyQ"
"PaddlePaddle/LARK" -> "brightmart/albert_zh"
"PaddlePaddle/LARK" -> "brightmart/roberta_zh"
"PaddlePaddle/LARK" -> "baidu/DuReader" ["e"=1]
"PaddlePaddle/LARK" -> "namisan/mt-dnn" ["e"=1]
"PaddlePaddle/LARK" -> "macanv/BERT-BiLSTM-CRF-NER"
"PaddlePaddle/LARK" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"PaddlePaddle/LARK" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/LARK" -> "kimiyoung/transformer-xl" ["e"=1]
"NLP-LOVE/Introduction-NLP" -> "hankcs/pyhanlp"
"NLP-LOVE/Introduction-NLP" -> "km1994/nlp_paper_study"
"NLP-LOVE/Introduction-NLP" -> "DA-southampton/NLP_ability"
"NLP-LOVE/Introduction-NLP" -> "NLP-LOVE/ML-NLP" ["e"=1]
"NLP-LOVE/Introduction-NLP" -> "leerumor/nlp_tutorial"
"NLP-LOVE/Introduction-NLP" -> "FudanNLP/nlp-beginner"
"NLP-LOVE/Introduction-NLP" -> "luopeixiang/named_entity_recognition"
"NLP-LOVE/Introduction-NLP" -> "km1994/NLP-Interview-Notes"
"NLP-LOVE/Introduction-NLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"NLP-LOVE/Introduction-NLP" -> "InsaneLife/ChineseNLPCorpus"
"NLP-LOVE/Introduction-NLP" -> "songyingxin/NLPer-Interview"
"NLP-LOVE/Introduction-NLP" -> "ymcui/Chinese-BERT-wwm"
"NLP-LOVE/Introduction-NLP" -> "bojone/bert4keras"
"NLP-LOVE/Introduction-NLP" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"NLP-LOVE/Introduction-NLP" -> "CLUEbenchmark/CLUE"
"NELSONZHAO/zhihu" -> "shenweichen/DeepCTR" ["e"=1]
"NELSONZHAO/zhihu" -> "princewen/tensorflow_practice" ["e"=1]
"NELSONZHAO/zhihu" -> "brightmart/text_classification" ["e"=1]
"NELSONZHAO/zhihu" -> "gaussic/text-classification-cnn-rnn"
"NELSONZHAO/zhihu" -> "hzy46/Char-RNN-TensorFlow"
"NELSONZHAO/zhihu" -> "Embedding/Chinese-Word-Vectors"
"NELSONZHAO/zhihu" -> "Kyubyong/transformer" ["e"=1]
"NELSONZHAO/zhihu" -> "wzhe06/Ad-papers" ["e"=1]
"NELSONZHAO/zhihu" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"NELSONZHAO/zhihu" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"NELSONZHAO/zhihu" -> "tensorflow/nmt" ["e"=1]
"NELSONZHAO/zhihu" -> "macanv/BERT-BiLSTM-CRF-NER"
"NELSONZHAO/zhihu" -> "Determined22/zh-NER-TF"
"NELSONZHAO/zhihu" -> "crownpku/Awesome-Chinese-NLP"
"NELSONZHAO/zhihu" -> "brightmart/nlp_chinese_corpus"
"ownthink/Jiagu" -> "ownthink/KnowledgeGraphData"
"ownthink/Jiagu" -> "qq547276542/Agriculture_KnowledgeGraph"
"ownthink/Jiagu" -> "blmoistawinde/HarvestText"
"ownthink/Jiagu" -> "macanv/BERT-BiLSTM-CRF-NER"
"ownthink/Jiagu" -> "liuhuanyong/QASystemOnMedicalKG"
"ownthink/Jiagu" -> "brightmart/albert_zh"
"ownthink/Jiagu" -> "ymcui/Chinese-BERT-wwm"
"ownthink/Jiagu" -> "hankcs/pyhanlp"
"ownthink/Jiagu" -> "thunlp/OpenNRE"
"ownthink/Jiagu" -> "terrifyzhao/bert-utils"
"ownthink/Jiagu" -> "letiantian/TextRank4ZH"
"ownthink/Jiagu" -> "brightmart/nlp_chinese_corpus"
"ownthink/Jiagu" -> "SophonPlus/ChineseNlpCorpus"
"ownthink/Jiagu" -> "crownpku/Information-Extraction-Chinese"
"ownthink/Jiagu" -> "husthuke/awesome-knowledge-graph"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/LawCrimeMining"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/TextGrapher"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/QAonMilitaryKG"
"liuhuanyong/CrimeKgAssitant" -> "zhang17173/Event-Extraction"
"liuhuanyong/CrimeKgAssitant" -> "thunlp/OpenCLaP"
"liuhuanyong/CrimeKgAssitant" -> "charlesXu86/Chatbot_CN"
"liuhuanyong/CrimeKgAssitant" -> "zhihao-chen/QASystemOnMedicalGraph"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/ProductKnowledgeGraph"
"liuhuanyong/CrimeKgAssitant" -> "china-ai-law-challenge/CAIL2019" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/QASystemOnMedicalKG"
"liuhuanyong/CrimeKgAssitant" -> "bamtercelboo/Awesome-Law-NLP-Research-Work" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "thunlp/CAIL" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/EventTriplesExtraction"
"liuhuanyong/ProductKnowledgeGraph" -> "liuhuanyong/QAonMilitaryKG"
"liuhuanyong/ProductKnowledgeGraph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/ProductKnowledgeGraph" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/ProductKnowledgeGraph" -> "lihanghang/Knowledge-Graph"
"liuhuanyong/ProductKnowledgeGraph" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/ProductKnowledgeGraph" -> "YeYzheng/KGQA-Based-On-medicine"
"liuhuanyong/ProductKnowledgeGraph" -> "WenRichard/KBQA-BERT"
"liuhuanyong/ProductKnowledgeGraph" -> "lixiang0/WEB_KG"
"liuhuanyong/ProductKnowledgeGraph" -> "tomgrek/zincbase"
"liuhuanyong/ProductKnowledgeGraph" -> "buppt/ChineseNRE"
"liuhuanyong/ProductKnowledgeGraph" -> "liuhuanyong/TextGrapher"
"shangjingbo1226/SegPhrase" -> "shangjingbo1226/AutoPhrase"
"shangjingbo1226/SegPhrase" -> "remenberl/SegPhrase-MultiLingual"
"shangjingbo1226/SegPhrase" -> "remenberl/Latent-Keyphrase-Inference"
"shangjingbo1226/SegPhrase" -> "shanzhenren/ClusType"
"shangjingbo1226/SegPhrase" -> "BangLiu/ConcepT"
"shangjingbo1226/SegPhrase" -> "anirudyd/topmine"
"shangjingbo1226/SegPhrase" -> "shanzhenren/CoType" ["e"=1]
"shangjingbo1226/SegPhrase" -> "LiyuanLucasLiu/LightNER"
"shangjingbo1226/SegPhrase" -> "mjiang89/MetaPAD"
"shangjingbo1226/SegPhrase" -> "kno10/WikipediaEntities"
"Brokenwind/BertSimilarity" -> "rsanshierli/EasyBert"
"Brokenwind/BertSimilarity" -> "terrifyzhao/bert-utils"
"Brokenwind/BertSimilarity" -> "zhaogaofeng611/TextMatch"
"Brokenwind/BertSimilarity" -> "danan0755/Bert_Classifier"
"Brokenwind/BertSimilarity" -> "yongzhuo/nlp_xiaojiang"
"Brokenwind/BertSimilarity" -> "BonnieHuangxin/Bert_sentence_similarity"
"Brokenwind/BertSimilarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"Brokenwind/BertSimilarity" -> "phychaos/TextSimilar"
"Brokenwind/BertSimilarity" -> "JepsonWong/Text_Matching"
"Brokenwind/BertSimilarity" -> "WenRichard/KBQA-BERT"
"Brokenwind/BertSimilarity" -> "cjymz886/sentence-similarity"
"Brokenwind/BertSimilarity" -> "MachineLP/TextMatch"
"Brokenwind/BertSimilarity" -> "liuhuanyong/SentenceSimilarity"
"Brokenwind/BertSimilarity" -> "yanqiangmiffy/sentence-similarity"
"Brokenwind/BertSimilarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"alibaba-edu/simple-effective-text-matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"alibaba-edu/simple-effective-text-matching" -> "pengshuang/Text-Similarity"
"alibaba-edu/simple-effective-text-matching" -> "pengming617/text_matching"
"alibaba-edu/simple-effective-text-matching" -> "DataTerminatorX/Keyword-BERT"
"alibaba-edu/simple-effective-text-matching" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"alibaba-edu/simple-effective-text-matching" -> "terrifyzhao/text_matching"
"alibaba-edu/simple-effective-text-matching" -> "zhaogaofeng611/TextMatch"
"alibaba-edu/simple-effective-text-matching" -> "pengming617/bert_textMatching"
"alibaba-edu/simple-effective-text-matching" -> "NTMC-Community/MatchZoo-py"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "alibaba-edu/simple-effective-text-matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "pengshuang/Text-Similarity"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "zhaogaofeng611/TextMatch"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "coetaur0/ESIM"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "wangle1218/deep_text_matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "BangLiu/ArticlePairMatching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "pengming617/text_matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "NTMC-Community/MatchZoo-py"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"huseinzol05/NLP-Models-Tensorflow" -> "zhpmatrix/nlp-competitions-list-review"
"huseinzol05/NLP-Models-Tensorflow" -> "msgi/nlp-journey"
"huseinzol05/NLP-Models-Tensorflow" -> "Jiakui/awesome-bert"
"huseinzol05/NLP-Models-Tensorflow" -> "brightmart/albert_zh"
"huseinzol05/NLP-Models-Tensorflow" -> "brightmart/text_classification" ["e"=1]
"huseinzol05/NLP-Models-Tensorflow" -> "CyberZHG/keras-bert"
"huseinzol05/NLP-Models-Tensorflow" -> "jiangxinyang227/textClassifier"
"huseinzol05/NLP-Models-Tensorflow" -> "zihangdai/xlnet" ["e"=1]
"huseinzol05/NLP-Models-Tensorflow" -> "macanv/BERT-BiLSTM-CRF-NER"
"huseinzol05/NLP-Models-Tensorflow" -> "PaddlePaddle/LARK"
"huseinzol05/NLP-Models-Tensorflow" -> "Determined22/zh-NER-TF"
"huseinzol05/NLP-Models-Tensorflow" -> "BrikerMan/Kashgari"
"huseinzol05/NLP-Models-Tensorflow" -> "ymcui/Chinese-PreTrained-XLNet"
"huseinzol05/NLP-Models-Tensorflow" -> "yongzhuo/nlp_xiaojiang"
"huseinzol05/NLP-Models-Tensorflow" -> "graykode/nlp-tutorial" ["e"=1]
"juand-r/entity-recognition-datasets" -> "davidsbatista/NER-datasets" ["e"=1]
"juand-r/entity-recognition-datasets" -> "chakki-works/seqeval"
"juand-r/entity-recognition-datasets" -> "kamalkraj/BERT-NER"
"juand-r/entity-recognition-datasets" -> "jiesutd/NCRFpp"
"juand-r/entity-recognition-datasets" -> "kyzhouhzau/BERT-NER"
"juand-r/entity-recognition-datasets" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"juand-r/entity-recognition-datasets" -> "roomylee/awesome-relation-extraction" ["e"=1]
"juand-r/entity-recognition-datasets" -> "Hironsan/anago"
"juand-r/entity-recognition-datasets" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"juand-r/entity-recognition-datasets" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"juand-r/entity-recognition-datasets" -> "allenai/scibert" ["e"=1]
"juand-r/entity-recognition-datasets" -> "makcedward/nlpaug" ["e"=1]
"juand-r/entity-recognition-datasets" -> "kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs"
"juand-r/entity-recognition-datasets" -> "Franck-Dernoncourt/NeuroNER"
"juand-r/entity-recognition-datasets" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"monikkinom/ner-lstm" -> "clab/stack-lstm-ner"
"monikkinom/ner-lstm" -> "Franck-Dernoncourt/NeuroNER"
"monikkinom/ner-lstm" -> "glample/tagger"
"monikkinom/ner-lstm" -> "guillaumegenthial/sequence_tagging"
"monikkinom/ner-lstm" -> "LopezGG/NN_NER_tensorFlow"
"monikkinom/ner-lstm" -> "chilynn/sequence-labeling"
"monikkinom/ner-lstm" -> "dhwajraj/NER-RNN"
"monikkinom/ner-lstm" -> "divamgupta/lstm-gender-predictor"
"monikkinom/ner-lstm" -> "rockingdingo/deepnlp"
"monikkinom/ner-lstm" -> "liu-nlper/NER-LSTM-CRF"
"monikkinom/ner-lstm" -> "HadoopIt/rnn-nlu" ["e"=1]
"monikkinom/ner-lstm" -> "ZhixiuYe/NER-pytorch"
"monikkinom/ner-lstm" -> "Hironsan/anago"
"monikkinom/ner-lstm" -> "hltcoe/golden-horse"
"monikkinom/ner-lstm" -> "ejmeij/entity-linking-and-retrieval-tutorial" ["e"=1]
"buppt/ChineseNER" -> "Determined22/zh-NER-TF"
"buppt/ChineseNER" -> "luopeixiang/named_entity_recognition"
"buppt/ChineseNER" -> "zjy-ucas/ChineseNER"
"buppt/ChineseNER" -> "jiesutd/LatticeLSTM"
"buppt/ChineseNER" -> "macanv/BERT-BiLSTM-CRF-NER"
"buppt/ChineseNER" -> "shiyybua/NER"
"buppt/ChineseNER" -> "buppt/ChineseNRE"
"buppt/ChineseNER" -> "crownpku/Information-Extraction-Chinese"
"buppt/ChineseNER" -> "ProHiryu/bert-chinese-ner"
"buppt/ChineseNER" -> "yanwii/ChinsesNER-pytorch"
"buppt/ChineseNER" -> "lonePatient/BERT-NER-Pytorch"
"buppt/ChineseNER" -> "CLUEbenchmark/CLUENER2020"
"buppt/ChineseNER" -> "ownthink/Jiagu"
"buppt/ChineseNER" -> "guillaumegenthial/sequence_tagging"
"buppt/ChineseNER" -> "yuanxiaosc/Entity-Relation-Extraction"
"buppt/ChineseNRE" -> "Jacen789/relation-extraction"
"buppt/ChineseNRE" -> "yuanxiaosc/Entity-Relation-Extraction"
"buppt/ChineseNRE" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"buppt/ChineseNRE" -> "buppt/ChineseNER"
"buppt/ChineseNRE" -> "crownpku/Information-Extraction-Chinese"
"buppt/ChineseNRE" -> "zhengyima/kg-baseline-pytorch"
"buppt/ChineseNRE" -> "zjunlp/deepke"
"buppt/ChineseNRE" -> "lvjianxin/Relationship-extraction"
"buppt/ChineseNRE" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"buppt/ChineseNRE" -> "thunlp/Chinese_NRE" ["e"=1]
"buppt/ChineseNRE" -> "thunlp/OpenNRE"
"buppt/ChineseNRE" -> "SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["e"=1]
"buppt/ChineseNRE" -> "ProHiryu/bert-chinese-ner"
"buppt/ChineseNRE" -> "NeilGY/NER_entityRelationExtration"
"buppt/ChineseNRE" -> "smilelight/lightKG"
"crownpku/Information-Extraction-Chinese" -> "zjy-ucas/ChineseNER"
"crownpku/Information-Extraction-Chinese" -> "thunlp/OpenNRE"
"crownpku/Information-Extraction-Chinese" -> "Determined22/zh-NER-TF"
"crownpku/Information-Extraction-Chinese" -> "yuanxiaosc/Entity-Relation-Extraction"
"crownpku/Information-Extraction-Chinese" -> "macanv/BERT-BiLSTM-CRF-NER"
"crownpku/Information-Extraction-Chinese" -> "jiesutd/LatticeLSTM"
"crownpku/Information-Extraction-Chinese" -> "guillaumegenthial/sequence_tagging"
"crownpku/Information-Extraction-Chinese" -> "qq547276542/Agriculture_KnowledgeGraph"
"crownpku/Information-Extraction-Chinese" -> "buppt/ChineseNRE"
"crownpku/Information-Extraction-Chinese" -> "buppt/ChineseNER"
"crownpku/Information-Extraction-Chinese" -> "crownpku/Awesome-Chinese-NLP"
"crownpku/Information-Extraction-Chinese" -> "shiyybua/NER"
"crownpku/Information-Extraction-Chinese" -> "ProHiryu/bert-chinese-ner"
"crownpku/Information-Extraction-Chinese" -> "brightmart/albert_zh"
"crownpku/Information-Extraction-Chinese" -> "loujie0822/DeepIE"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "xiaofei05/Chinese-NER"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "yumath/bertNER"
"lvjianxin/Relationship-extraction" -> "Jacen789/relation-extraction"
"lvjianxin/Relationship-extraction" -> "shiningliang/CCKS2019-IPRE"
"lvjianxin/Relationship-extraction" -> "Mryangkaitong/Chinese_NRE"
"lvjianxin/Relationship-extraction" -> "buppt/ChineseNRE"
"lvjianxin/Relationship-extraction" -> "mangonihao/EntityRelationExtraction"
"lvjianxin/Relationship-extraction" -> "molamolaxxx/pcnn" ["e"=1]
"microsoft/NeuronBlocks" -> "PaddlePaddle/LARK"
"microsoft/NeuronBlocks" -> "thunlp/ERNIE"
"microsoft/NeuronBlocks" -> "airaria/TextBrewer"
"microsoft/NeuronBlocks" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"microsoft/NeuronBlocks" -> "NTMC-Community/MatchZoo"
"microsoft/NeuronBlocks" -> "asyml/texar" ["e"=1]
"microsoft/NeuronBlocks" -> "zihangdai/xlnet" ["e"=1]
"microsoft/NeuronBlocks" -> "openai/sparse_attention" ["e"=1]
"microsoft/NeuronBlocks" -> "facebookresearch/pytext" ["e"=1]
"microsoft/NeuronBlocks" -> "namisan/mt-dnn" ["e"=1]
"microsoft/NeuronBlocks" -> "baidu/AnyQ"
"microsoft/NeuronBlocks" -> "alibaba/esim-response-selection"
"microsoft/NeuronBlocks" -> "BrikerMan/Kashgari"
"microsoft/NeuronBlocks" -> "jiesutd/NCRFpp"
"microsoft/NeuronBlocks" -> "NTMC-Community/MatchZoo-py"
"JayYip/bert-multitask-learning" -> "HaoyuHu/bert-multi-gpu"
"JayYip/bert-multitask-learning" -> "ymcui/Chinese-PreTrained-XLNet"
"JayYip/bert-multitask-learning" -> "chineseGLUE/chineseGLUE"
"JayYip/bert-multitask-learning" -> "guotong1988/BERT-multi-gpu"
"JayYip/bert-multitask-learning" -> "mbs0221/Multitask-Learning"
"JayYip/bert-multitask-learning" -> "kyzhouhzau/BERT-NER"
"JayYip/bert-multitask-learning" -> "qiangsiwei/bert_distill"
"JayYip/bert-multitask-learning" -> "namisan/mt-dnn" ["e"=1]
"JayYip/bert-multitask-learning" -> "thunlp/ERNIE"
"JayYip/bert-multitask-learning" -> "brightmart/sentiment_analysis_fine_grain"
"JayYip/bert-multitask-learning" -> "ZhuiyiTechnology/pretrained-models"
"qingkongzhiqian/GPT2-Summary" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"qingkongzhiqian/GPT2-Summary" -> "YunwenTechnology/Unilm"
"qingkongzhiqian/GPT2-Summary" -> "liucongg/GPT2-NewsTitle"
"qingkongzhiqian/GPT2-Summary" -> "yongzhuo/nlg-yongzhuo"
"qingkongzhiqian/GPT2-Summary" -> "bojone/SPACES"
"qingkongzhiqian/GPT2-Summary" -> "CLUEbenchmark/CLGE"
"qingkongzhiqian/GPT2-Summary" -> "ZhuiyiTechnology/t5-pegasus"
"qingkongzhiqian/GPT2-Summary" -> "yangjianxin1/GPT2-chitchat"
"qingkongzhiqian/GPT2-Summary" -> "SunnyGJing/t5-pegasus-chinese"
"qingkongzhiqian/GPT2-Summary" -> "HorieYuan/TransformerTextSummarization"
"qingkongzhiqian/GPT2-Summary" -> "maszhongming/MatchSum" ["e"=1]
"qingkongzhiqian/GPT2-Summary" -> "renmada/t5-pegasus-pytorch"
"qingkongzhiqian/GPT2-Summary" -> "ztz818/Automatic-generation-of-text-summaries"
"qingkongzhiqian/GPT2-Summary" -> "wonderfulsuccess/chinese_abstractive_corpus"
"qingkongzhiqian/GPT2-Summary" -> "kururuken/BERT-Transformer-for-Summarization" ["e"=1]
"OpenBMB/CPM-Live" -> "OpenBMB/BMTrain"
"OpenBMB/CPM-Live" -> "OpenBMB/ModelCenter"
"OpenBMB/CPM-Live" -> "OpenBMB/BMCook"
"OpenBMB/CPM-Live" -> "OpenBMB/BMList"
"OpenBMB/CPM-Live" -> "OpenBMB/BMInf"
"OpenBMB/CPM-Live" -> "OpenBMB/BMTools"
"OpenBMB/CPM-Live" -> "thunlp/OpenDelta" ["e"=1]
"OpenBMB/CPM-Live" -> "thu-coai/EVA"
"OpenBMB/CPM-Live" -> "thunlp/UltraChat"
"dengxiuqi/ChineseLyrics" -> "dengxiuqi/Lyricist-torch"
"dengxiuqi/ChineseLyrics" -> "liuhuanyong/MusicLyricChatbot"
"dengxiuqi/ChineseLyrics" -> "gaussic/Chinese-Lyric-Corpus"
"siegfang/word2vec" -> "NLPchina/Word2VEC_java"
"siegfang/word2vec" -> "medallia/Word2VecJava"
"AvivNavon/pareto-hypernetworks" -> "ofrikleinfeld/ObjectPermanence"
"AvivNavon/pareto-hypernetworks" -> "Xi-L/ParetoMTL"
"AvivNavon/pareto-hypernetworks" -> "idanachi/RegRec_and_PCM"
"DQinYuan/chinese_province_city_area_mapper" -> "Vonng/adcode"
"DQinYuan/chinese_province_city_area_mapper" -> "shibing624/addressparser"
"DQinYuan/chinese_province_city_area_mapper" -> "dongrixinyu/JioNLP"
"DQinYuan/chinese_province_city_area_mapper" -> "blmoistawinde/HarvestText"
"DQinYuan/chinese_province_city_area_mapper" -> "hankcs/pyhanlp"
"DQinYuan/chinese_province_city_area_mapper" -> "shibing624/pycorrector"
"DQinYuan/chinese_province_city_area_mapper" -> "lancopku/pkuseg-python"
"DQinYuan/chinese_province_city_area_mapper" -> "wainshine/Company-Names-Corpus"
"DQinYuan/chinese_province_city_area_mapper" -> "fighting41love/cocoNLP"
"DQinYuan/chinese_province_city_area_mapper" -> "letiantian/TextRank4ZH"
"DQinYuan/chinese_province_city_area_mapper" -> "terrifyzhao/bert-utils"
"DQinYuan/chinese_province_city_area_mapper" -> "yongzhuo/nlp_xiaojiang"
"DQinYuan/chinese_province_city_area_mapper" -> "ymcui/Chinese-BERT-wwm"
"DQinYuan/chinese_province_city_area_mapper" -> "zhanlaoban/EDA_NLP_for_Chinese"
"DQinYuan/chinese_province_city_area_mapper" -> "ownthink/Jiagu"
"xuyige/BERT4doc-Classification" -> "songyingxin/Bert-TextClassification"
"xuyige/BERT4doc-Classification" -> "allenai/dont-stop-pretraining"
"xuyige/BERT4doc-Classification" -> "princeton-nlp/SimCSE"
"xuyige/BERT4doc-Classification" -> "CLUEbenchmark/CLUEPretrainedModels"
"xuyige/BERT4doc-Classification" -> "yumeng5/LOTClass" ["e"=1]
"xuyige/BERT4doc-Classification" -> "dbiir/UER-py"
"xuyige/BERT4doc-Classification" -> "yym6472/ConSERT"
"xuyige/BERT4doc-Classification" -> "lonePatient/NeZha_Chinese_PyTorch"
"xuyige/BERT4doc-Classification" -> "bohanli/BERT-flow"
"xuyige/BERT4doc-Classification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"xuyige/BERT4doc-Classification" -> "JayYip/bert-multitask-learning"
"xuyige/BERT4doc-Classification" -> "Sleepychord/CogLTX"
"xuyige/BERT4doc-Classification" -> "zhuchen03/FreeLB" ["e"=1]
"xuyige/BERT4doc-Classification" -> "huawei-noah/Pretrained-Language-Model"
"xuyige/BERT4doc-Classification" -> "thunlp/ERNIE"
"EricLingRui/NLP-tools" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"EricLingRui/NLP-tools" -> "GlassyWing/bi-lstm-crf"
"EricLingRui/NLP-tools" -> "supercoderhawk/DNN_CWS"
"EricLingRui/NLP-tools" -> "yaleimeng/NER_corpus_chinese"
"MLjian/TextClassificationImplement" -> "moneyDboat/data_grand"
"MLjian/TextClassificationImplement" -> "hecongqing/2018-daguan-competition"
"MLjian/TextClassificationImplement" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"MLjian/TextClassificationImplement" -> "Rowchen/Text-classifier"
"MLjian/TextClassificationImplement" -> "nlpjoe/daguan-classify-2018"
"MLjian/TextClassificationImplement" -> "Magic-Bubble/Zhihu"
"MLjian/TextClassificationImplement" -> "yanqiangmiffy/daguan"
"MLjian/TextClassificationImplement" -> "RedstoneWill/MachineLearningInAction-Camp" ["e"=1]
"MLjian/TextClassificationImplement" -> "learning511/cs224n-learning-camp" ["e"=1]
"MLjian/TextClassificationImplement" -> "yongyehuang/zhihu-text-classification"
"MLjian/TextClassificationImplement" -> "cjymz886/text_rnn_attention"
"425776024/nlpcda" -> "zhanlaoban/EDA_NLP_for_Chinese"
"425776024/nlpcda" -> "loujie0822/DeepIE"
"425776024/nlpcda" -> "CLUEbenchmark/CLUE"
"425776024/nlpcda" -> "CLUEbenchmark/CLUEDatasetSearch"
"425776024/nlpcda" -> "dongrixinyu/JioNLP"
"425776024/nlpcda" -> "ZhuiyiTechnology/pretrained-models"
"425776024/nlpcda" -> "dbiir/UER-py"
"425776024/nlpcda" -> "bojone/bert4keras"
"425776024/nlpcda" -> "ZhuiyiTechnology/simbert"
"425776024/nlpcda" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"425776024/nlpcda" -> "TingFree/NLPer-Arsenal"
"425776024/nlpcda" -> "ymcui/Chinese-BERT-wwm"
"425776024/nlpcda" -> "lonePatient/BERT-NER-Pytorch"
"425776024/nlpcda" -> "km1994/NLP-Interview-Notes"
"425776024/nlpcda" -> "airaria/TextBrewer"
"changwookjun/nlp-paper" -> "yizhen20133868/NLP-Conferences-Code"
"changwookjun/nlp-paper" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"changwookjun/nlp-paper" -> "km1994/nlp_paper_study"
"changwookjun/nlp-paper" -> "msgi/nlp-journey"
"changwookjun/nlp-paper" -> "DA-southampton/Tech_Aarticle"
"changwookjun/nlp-paper" -> "loujie0822/DeepIE"
"changwookjun/nlp-paper" -> "iwangjian/Paper-Reading"
"changwookjun/nlp-paper" -> "IndexFziQ/GNN4NLP-Papers" ["e"=1]
"changwookjun/nlp-paper" -> "huawei-noah/Pretrained-Language-Model"
"changwookjun/nlp-paper" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"changwookjun/nlp-paper" -> "llhthinker/NLP-Papers" ["e"=1]
"changwookjun/nlp-paper" -> "thunlp/PLMpapers" ["e"=1]
"changwookjun/nlp-paper" -> "loujie0822/Pre-trained-Models"
"changwookjun/nlp-paper" -> "songyingxin/NLPer-Interview"
"changwookjun/nlp-paper" -> "xcfcode/Summarization-Papers" ["e"=1]
"ShannonAI/service-streamer" -> "dbiir/UER-py"
"ShannonAI/service-streamer" -> "airaria/TextBrewer"
"ShannonAI/service-streamer" -> "Tencent/TurboTransformers"
"ShannonAI/service-streamer" -> "brightmart/roberta_zh"
"ShannonAI/service-streamer" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/service-streamer" -> "bytedance/lightseq"
"ShannonAI/service-streamer" -> "pytorch/serve" ["e"=1]
"ShannonAI/service-streamer" -> "ymcui/Chinese-PreTrained-XLNet"
"ShannonAI/service-streamer" -> "brightmart/albert_zh"
"ShannonAI/service-streamer" -> "autoliuweijie/FastBERT"
"ShannonAI/service-streamer" -> "ZhuiyiTechnology/pretrained-models"
"ShannonAI/service-streamer" -> "huawei-noah/Pretrained-Language-Model"
"ShannonAI/service-streamer" -> "CLUEbenchmark/CLUEPretrainedModels"
"ShannonAI/service-streamer" -> "chineseGLUE/chineseGLUE"
"ShannonAI/service-streamer" -> "namisan/mt-dnn" ["e"=1]
"kpe/bert-for-tf2" -> "brightmart/albert_zh"
"kpe/bert-for-tf2" -> "kamalkraj/ALBERT-TF2.0"
"kpe/bert-for-tf2" -> "CyberZHG/keras-bert"
"kpe/bert-for-tf2" -> "kamalkraj/BERT-NER-TF"
"kpe/bert-for-tf2" -> "brightmart/roberta_zh"
"kpe/bert-for-tf2" -> "BrikerMan/Kashgari"
"kpe/bert-for-tf2" -> "bojone/bert4keras"
"kpe/bert-for-tf2" -> "google-research/ALBERT" ["e"=1]
"kpe/bert-for-tf2" -> "yongzhuo/Keras-TextClassification"
"kpe/bert-for-tf2" -> "bojone/bert_in_keras"
"kpe/bert-for-tf2" -> "tensorflow/addons" ["e"=1]
"kpe/bert-for-tf2" -> "CyberZHG/keras-transformer" ["e"=1]
"kpe/bert-for-tf2" -> "ZhuiyiTechnology/pretrained-models"
"kpe/bert-for-tf2" -> "kyzhouhzau/BERT-NER"
"kpe/bert-for-tf2" -> "dbiir/UER-py"
"wuba/qa_match" -> "wuba/dl_inference"
"wuba/qa_match" -> "DataTerminatorX/Keyword-BERT"
"wuba/qa_match" -> "ZhuiyiTechnology/pretrained-models"
"wuba/qa_match" -> "ZhuiyiTechnology/simbert"
"wuba/qa_match" -> "MachineLP/TextMatch"
"wuba/qa_match" -> "alibaba-edu/simple-effective-text-matching"
"wuba/qa_match" -> "qiangsiwei/bert_distill"
"wuba/qa_match" -> "wangle1218/deep_text_matching"
"BDBC-KG-NLP/IE-Survey" -> "loujie0822/DeepIE"
"BDBC-KG-NLP/IE-Survey" -> "universal-ie/UIE"
"BDBC-KG-NLP/IE-Survey" -> "BDBC-KG-NLP/QA-Survey-CN"
"BDBC-KG-NLP/IE-Survey" -> "yuanxiaosc/Entity-Relation-Extraction"
"BDBC-KG-NLP/IE-Survey" -> "carrie0307/DL_EventExtractionPapers"
"BDBC-KG-NLP/IE-Survey" -> "weizhepei/CasRel"
"BDBC-KG-NLP/IE-Survey" -> "xiaoqian19940510/Event-Extraction"
"BDBC-KG-NLP/IE-Survey" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction"
"BDBC-KG-NLP/IE-Survey" -> "BDBC-KG-NLP/QA-Survey"
"BDBC-KG-NLP/IE-Survey" -> "zhengyima/kg-baseline-pytorch"
"BDBC-KG-NLP/IE-Survey" -> "percent4/people_relation_extract"
"BDBC-KG-NLP/IE-Survey" -> "slczgwh/REDN" ["e"=1]
"BDBC-KG-NLP/IE-Survey" -> "princeton-nlp/PURE"
"BDBC-KG-NLP/IE-Survey" -> "ljynlp/W2NER"
"BDBC-KG-NLP/IE-Survey" -> "zjunlp/deepke"
"IAdmireu/ChineseSTS" -> "yanqiangmiffy/sentence-similarity"
"IAdmireu/ChineseSTS" -> "pengming617/text_matching"
"IAdmireu/ChineseSTS" -> "pengshuang/Text-Similarity"
"IAdmireu/ChineseSTS" -> "terrifyzhao/text_matching"
"IAdmireu/ChineseSTS" -> "liuhuanyong/SentenceSimilarity"
"IAdmireu/ChineseSTS" -> "terrifyzhao/bert-utils"
"IAdmireu/ChineseSTS" -> "ZhuiyiTechnology/simbert"
"IAdmireu/ChineseSTS" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"IAdmireu/ChineseSTS" -> "yongzhuo/nlp_xiaojiang"
"IAdmireu/ChineseSTS" -> "brightmart/nlu_sim"
"IAdmireu/ChineseSTS" -> "ZhuiyiTechnology/pretrained-models"
"IAdmireu/ChineseSTS" -> "zhanlaoban/EDA_NLP_for_Chinese"
"IAdmireu/ChineseSTS" -> "cjymz886/sentence-similarity"
"IAdmireu/ChineseSTS" -> "liuhuanyong/ChineseTextualInference"
"IAdmireu/ChineseSTS" -> "ATEC2018/deep-siamese-text-similarity"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "NTMC-Community/MatchZoo-py"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "NTMC-Community/MatchZoo"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "alibaba-edu/simple-effective-text-matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "nyu-dl/dl4marco-bert" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "AdeDZY/DeepCT" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "Georgetown-IR-Lab/cedr" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "pengming617/text_matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "terrifyzhao/text_matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "castorini/anserini" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "AdeDZY/SIGIR19-BERT-IR" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "BangLiu/ArticlePairMatching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "thunlp/OpenMatch" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "castorini/duobert" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "DataTerminatorX/Keyword-BERT"
"SimmerChan/KG-demo-for-movie" -> "Pelhans/Z_knowledge_graph"
"SimmerChan/KG-demo-for-movie" -> "WenRichard/KBQA-BERT"
"SimmerChan/KG-demo-for-movie" -> "qq547276542/Agriculture_KnowledgeGraph"
"SimmerChan/KG-demo-for-movie" -> "liuhuanyong/QASystemOnMedicalKG"
"SimmerChan/KG-demo-for-movie" -> "chizhu/KGQA_HLM"
"SimmerChan/KG-demo-for-movie" -> "YeYzheng/KGQA-Based-On-medicine"
"SimmerChan/KG-demo-for-movie" -> "memect/kg-beijing"
"SimmerChan/KG-demo-for-movie" -> "husthuke/awesome-knowledge-graph"
"SimmerChan/KG-demo-for-movie" -> "lemonhu/stock-knowledge-graph"
"SimmerChan/KG-demo-for-movie" -> "npubird/KnowledgeGraphCourse"
"SimmerChan/KG-demo-for-movie" -> "kangzhun/KnowledgeGraph-QA-Service"
"SimmerChan/KG-demo-for-movie" -> "lixiang0/WEB_KG"
"SimmerChan/KG-demo-for-movie" -> "cnschema/cnschema"
"SimmerChan/KG-demo-for-movie" -> "Shuang0420/knowledge_graph_demo"
"SimmerChan/KG-demo-for-movie" -> "lihanghang/NLP-Knowledge-Graph"
"SimmerChan/corpus" -> "z814081807/DeepNER"
"SimmerChan/corpus" -> "OYE93/Chinese-NLP-Corpus"
"SimmerChan/corpus" -> "TingFree/NLPer-Arsenal"
"SimmerChan/corpus" -> "loujie0822/DeepIE"
"SimmerChan/corpus" -> "liuhuanyong/ChineseSemanticKB"
"SimmerChan/corpus" -> "CLUEbenchmark/CLUENER2020"
"SimmerChan/corpus" -> "BDBC-KG-NLP/QA-Survey"
"SimmerChan/corpus" -> "LeeSureman/Flat-Lattice-Transformer"
"SimmerChan/corpus" -> "InsaneLife/ChineseNLPCorpus"
"SimmerChan/corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"SimmerChan/corpus" -> "ZhuiyiTechnology/pretrained-models"
"SimmerChan/corpus" -> "ZhuiyiTechnology/simbert"
"SimmerChan/corpus" -> "zhpmatrix/nlp-competitions-list-review"
"SimmerChan/corpus" -> "luge-ai/luge-ai"
"SimmerChan/corpus" -> "lrs1353281004/Chinese_medical_NLP"
"apachecn/nlp-pytorch-zh" -> "joosthub/PyTorchNLPBook" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "zhanlaoban/CS224N-Stanford-Winter-2019" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "smilelight/lightNLP"
"apachecn/nlp-pytorch-zh" -> "zhpmatrix/nlp-competitions-list-review"
"apachecn/nlp-pytorch-zh" -> "NLP-LOVE/Introduction-NLP"
"apachecn/nlp-pytorch-zh" -> "yizhen20133868/NLP-Conferences-Code"
"apachecn/nlp-pytorch-zh" -> "changwookjun/nlp-paper"
"apachecn/nlp-pytorch-zh" -> "ZacBi/CS224n-2019-solutions" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "apachecn/fe4ml-zh" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "DA-southampton/Tech_Aarticle"
"apachecn/nlp-pytorch-zh" -> "FudanNLP/nlp-beginner"
"apachecn/nlp-pytorch-zh" -> "apachecn/stanford-cs224n-notes-zh" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "zibuyu/research_tao"
"apachecn/nlp-pytorch-zh" -> "DSKSD/DeepNLP-models-Pytorch" ["e"=1]
"lonePatient/BERT-NER-Pytorch" -> "CLUEbenchmark/CLUENER2020"
"lonePatient/BERT-NER-Pytorch" -> "z814081807/DeepNER"
"lonePatient/BERT-NER-Pytorch" -> "loujie0822/DeepIE"
"lonePatient/BERT-NER-Pytorch" -> "luopeixiang/named_entity_recognition"
"lonePatient/BERT-NER-Pytorch" -> "LeeSureman/Flat-Lattice-Transformer"
"lonePatient/BERT-NER-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"lonePatient/BERT-NER-Pytorch" -> "ShannonAI/mrc-for-flat-nested-ner"
"lonePatient/BERT-NER-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"lonePatient/BERT-NER-Pytorch" -> "jiesutd/LatticeLSTM"
"lonePatient/BERT-NER-Pytorch" -> "CLUEbenchmark/CLUE"
"lonePatient/BERT-NER-Pytorch" -> "brightmart/roberta_zh"
"lonePatient/BERT-NER-Pytorch" -> "dbiir/UER-py"
"lonePatient/BERT-NER-Pytorch" -> "kamalkraj/BERT-NER"
"lonePatient/BERT-NER-Pytorch" -> "yuanxiaosc/Entity-Relation-Extraction"
"lonePatient/BERT-NER-Pytorch" -> "DA-southampton/ner"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "dbiir/UER-py"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "TingFree/NLPer-Arsenal"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "LianjiaTech/BELLE" ["e"=1]
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "ymcui/Chinese-BERT-wwm"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "thu-coai/CDial-GPT"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "lonePatient/BERT-NER-Pytorch"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "loujie0822/DeepIE"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "CLUEbenchmark/CLUE"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "CLUEbenchmark/CLUEDatasetSearch"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "brightmart/roberta_zh"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "huawei-noah/Pretrained-Language-Model"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "IDEA-CCNL/Fengshenbang-LM"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "liucongg/GPT2-NewsTitle"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "425776024/nlpcda"
"lonePatient/awesome-pretrained-chinese-nlp-models" -> "km1994/nlp_paper_study"
"renmada/t5-pegasus-pytorch" -> "ZhuiyiTechnology/t5-pegasus"
"renmada/t5-pegasus-pytorch" -> "SunnyGJing/t5-pegasus-chinese"
"renmada/t5-pegasus-pytorch" -> "fastnlp/CPT"
"renmada/t5-pegasus-pytorch" -> "bojone/SPACES"
"renmada/t5-pegasus-pytorch" -> "YunwenTechnology/Unilm"
"renmada/t5-pegasus-pytorch" -> "JunnYu/RoFormer_pytorch"
"renmada/t5-pegasus-pytorch" -> "liucongg/GPT2-NewsTitle"
"renmada/t5-pegasus-pytorch" -> "ZhuiyiTechnology/WoBERT"
"renmada/t5-pegasus-pytorch" -> "universal-ie/UIE"
"renmada/t5-pegasus-pytorch" -> "autoliuweijie/BERT-whitening-pytorch"
"shawroad/CoSENT_Pytorch" -> "bojone/CoSENT"
"shawroad/CoSENT_Pytorch" -> "xiangking/PyTorch_CoSENT"
"shawroad/CoSENT_Pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"shawroad/CoSENT_Pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"thunlp/OpenHowNet" -> "thunlp/SE-WRL" ["e"=1]
"thunlp/OpenHowNet" -> "yaleimeng/Final_word_Similarity"
"thunlp/OpenHowNet" -> "thunlp/SCPapers"
"thunlp/OpenHowNet" -> "BiLiangLtd/WordSimilarity"
"thunlp/OpenHowNet" -> "thunlp/Chinese_NRE" ["e"=1]
"thunlp/OpenHowNet" -> "liuhuanyong/ChineseEmbedding"
"thunlp/OpenHowNet" -> "liuhuanyong/ChineseSemanticKB"
"thunlp/OpenHowNet" -> "LorrinWWW/two-are-better-than-one"
"thunlp/OpenHowNet" -> "thunlp/SememePSO-Attack" ["e"=1]
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "shuxinyin/SimCSE-Pytorch"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "pluto-junzeng/CNSD"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "KwangKa/SIMCSE_unsup"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "zhengyanzhao1997/NLP-model"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "bojone/SimCSE"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "shawroad/CoSENT_Pytorch"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "Macielyoung/sentence_representation_matching"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "yangjianxin1/SimCSE"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "jjljkjljk/SimCSE-Chinese"
"zhoujx4/DuIE" -> "zhoujx4/DuEE"
"zhoujx4/NLP-Series-sentence-embeddings" -> "pluto-junzeng/CNSD"
"zhoujx4/NLP-Series-sentence-embeddings" -> "shuxinyin/SimCSE-Pytorch"
"zhoujx4/NLP-Series-sentence-embeddings" -> "KwangKa/SIMCSE_unsup"
"zhoujx4/NLP-Series-sentence-embeddings" -> "zhengyanzhao1997/NLP-model"
"zhoujx4/NLP-Series-sentence-embeddings" -> "yangjianxin1/SimCSE"
"zhoujx4/NLP-Series-sentence-embeddings" -> "Macielyoung/sentence_representation_matching"
"zqtan1024/sequence-to-set" -> "tricktreat/locate-and-label"
"huyuanxin/CMeKGCrawler" -> "xcwill/CMeKG_labelingPlatform"
"huyuanxin/CMeKGCrawler" -> "king-yyf/CMeKG_tools"
"to-shimo/chinese-word2vec" -> "candlewill/Chinsese_word_vectors"
"to-shimo/chinese-word2vec" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"to-shimo/chinese-word2vec" -> "baidu/DuReader" ["e"=1]
"to-shimo/chinese-word2vec" -> "crownpku/Small-Chinese-Corpus"
"to-shimo/chinese-word2vec" -> "rustch3n/dgk_lost_conv" ["e"=1]
"brightmart/sentiment_analysis_fine_grain" -> "brightmart/bert_language_understanding"
"brightmart/sentiment_analysis_fine_grain" -> "NLPScott/bert-Chinese-classification-task"
"brightmart/sentiment_analysis_fine_grain" -> "chenghuige/wenzheng"
"brightmart/sentiment_analysis_fine_grain" -> "pengshuang/AI-Comp"
"brightmart/sentiment_analysis_fine_grain" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"brightmart/sentiment_analysis_fine_grain" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"brightmart/sentiment_analysis_fine_grain" -> "xueyouluo/fsauor2018"
"brightmart/sentiment_analysis_fine_grain" -> "kyzhouhzau/BERT-NER"
"brightmart/sentiment_analysis_fine_grain" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"brightmart/sentiment_analysis_fine_grain" -> "Y1ran/NLP-BERT--ChineseVersion"
"brightmart/sentiment_analysis_fine_grain" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"brightmart/sentiment_analysis_fine_grain" -> "AIChallenger/AI_Challenger_2018"
"brightmart/sentiment_analysis_fine_grain" -> "Jiakui/awesome-bert"
"brightmart/sentiment_analysis_fine_grain" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"brightmart/sentiment_analysis_fine_grain" -> "HSLCY/ABSA-BERT-pair" ["e"=1]
"clab/stack-lstm-ner" -> "glample/tagger"
"clab/stack-lstm-ner" -> "abhyudaynj/LSTM-CRF-models"
"clab/stack-lstm-ner" -> "monikkinom/ner-lstm"
"clab/stack-lstm-ner" -> "clab/lstm-parser" ["e"=1]
"clab/stack-lstm-ner" -> "chilynn/sequence-labeling"
"clab/stack-lstm-ner" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"clab/stack-lstm-ner" -> "liu-nlper/NER-LSTM-CRF"
"clab/stack-lstm-ner" -> "guillaumegenthial/sequence_tagging"
"clab/stack-lstm-ner" -> "wlin12/wang2vec" ["e"=1]
"clab/stack-lstm-ner" -> "XuezheMax/LasagneNLP" ["e"=1]
"yumath/bertNER" -> "CLOVEXCWZ/NER_DEMO"
"yumath/bertNER" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"yumath/bertNER" -> "FuYanzhe2/Name-Entity-Recognition"
"yumath/bertNER" -> "xuanzebi/BERT-CH-NER"
"yumath/bertNER" -> "ProHiryu/bert-chinese-ner"
"yumath/bertNER" -> "zjy-ucas/ChineseNER"
"yumath/bertNER" -> "ProHiryu/albert-chinese-ner"
"yumath/bertNER" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"yumath/bertNER" -> "kyzhouhzau/BERT-NER"
"yumath/bertNER" -> "yanwii/ChinsesNER-pytorch"
"yumath/bertNER" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"yumath/bertNER" -> "StanleyLsx/entity_extractor_by_ner"
"yumath/bertNER" -> "chenlian-zhou/ALBERT_NER"
"yumath/bertNER" -> "luopeixiang/named_entity_recognition"
"yumath/bertNER" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"zhanlaoban/NLP_PEMDC" -> "zhanlaoban/Transformers_for_Text_Classification"
"zhanlaoban/NLP_competitions" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/NLP_PEMDC"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/NLP_competitions"
"zhanlaoban/Transformers_for_Text_Classification" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"zhanlaoban/Transformers_for_Text_Classification" -> "linhaow/TextClassify"
"zhanlaoban/Transformers_for_Text_Classification" -> "songyingxin/Bert-TextClassification"
"zhanlaoban/Transformers_for_Text_Classification" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"zhanlaoban/Transformers_for_Text_Classification" -> "renxingkai/BERT_Chinese_Classification"
"zhanlaoban/Transformers_for_Text_Classification" -> "jeffery0628/text_classification"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"zhanlaoban/Transformers_for_Text_Classification" -> "yaleimeng/TextClassify_with_BERT"
"AimeeLee77/wiki_zh_word2vec" -> "AimeeLee77/keyword_extraction"
"AimeeLee77/wiki_zh_word2vec" -> "AimeeLee77/senti_analysis" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "zake7749/word2vec-tutorial" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "cjymz886/text-cnn"
"AimeeLee77/wiki_zh_word2vec" -> "Determined22/zh-NER-TF"
"AimeeLee77/wiki_zh_word2vec" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"AimeeLee77/wiki_zh_word2vec" -> "brightmart/nlp_chinese_corpus"
"AimeeLee77/wiki_zh_word2vec" -> "lpty/nlp_base"
"AimeeLee77/wiki_zh_word2vec" -> "liuhuanyong/Word2Vector"
"AimeeLee77/wiki_zh_word2vec" -> "Deermini/word2vec-tensorflow" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "shiyybua/NER"
"AimeeLee77/wiki_zh_word2vec" -> "gaussic/text-classification-cnn-rnn"
"AimeeLee77/wiki_zh_word2vec" -> "SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "ProHiryu/bert-chinese-ner"
"AimeeLee77/wiki_zh_word2vec" -> "zjy-ucas/ChineseNER"
"cnschema/cnschema" -> "memect/kg-beijing"
"cnschema/cnschema" -> "SimmerChan/KG-demo-for-movie"
"cnschema/cnschema" -> "Pelhans/Z_knowledge_graph"
"cnschema/cnschema" -> "kangzhun/KnowledgeGraph-QA-Service"
"cnschema/cnschema" -> "lixiang0/WEB_KG"
"cnschema/cnschema" -> "YeYzheng/KGQA-Based-On-medicine"
"cnschema/cnschema" -> "Shuang0420/knowledge_graph_demo"
"cnschema/cnschema" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"cnschema/cnschema" -> "qq547276542/Agriculture_KnowledgeGraph"
"cnschema/cnschema" -> "smilelight/lightKG"
"cnschema/cnschema" -> "liuhuanyong/ComplexEventExtraction"
"cnschema/cnschema" -> "rainarch/SentiBridge"
"cnschema/cnschema" -> "ownthink/KnowledgeGraph"
"cnschema/cnschema" -> "zzzvvvxxxd/KGPro"
"cnschema/cnschema" -> "lihanghang/Knowledge-Graph"
"memect/kg-beijing" -> "npubird/KnowledgeGraphCourse"
"memect/kg-beijing" -> "cnschema/cnschema"
"memect/kg-beijing" -> "qq547276542/Agriculture_KnowledgeGraph"
"memect/kg-beijing" -> "husthuke/awesome-knowledge-graph"
"memect/kg-beijing" -> "SimmerChan/KG-demo-for-movie"
"memect/kg-beijing" -> "liuhuanyong/QASystemOnMedicalKG"
"memect/kg-beijing" -> "crownpku/Information-Extraction-Chinese"
"memect/kg-beijing" -> "thunlp/KB2E" ["e"=1]
"memect/kg-beijing" -> "memect/hao" ["e"=1]
"memect/kg-beijing" -> "zjy-ucas/ChineseNER"
"memect/kg-beijing" -> "lemonhu/stock-knowledge-graph"
"memect/kg-beijing" -> "YeYzheng/KGQA-Based-On-medicine"
"memect/kg-beijing" -> "ownthink/KnowledgeGraphData"
"memect/kg-beijing" -> "koth/kcws"
"memect/kg-beijing" -> "shiyybua/NER"
"ngl567/CookBook-KG" -> "vivianLL/QASystemOnHepatopathyKG"
"ngl567/CookBook-KG" -> "YZHANG1270/Marvel_KnowledgeGraph"
"ngl567/CookBook-KG" -> "AdiaLoveTrance/MedicalInsuranceKG"
"ngl567/CookBook-KG" -> "weizhixiaoyi/DouBan-KGQA"
"guillaumegenthial/sequence_tagging" -> "guillaumegenthial/tf_ner"
"guillaumegenthial/sequence_tagging" -> "Determined22/zh-NER-TF"
"guillaumegenthial/sequence_tagging" -> "zjy-ucas/ChineseNER"
"guillaumegenthial/sequence_tagging" -> "macanv/BERT-BiLSTM-CRF-NER"
"guillaumegenthial/sequence_tagging" -> "shiyybua/NER"
"guillaumegenthial/sequence_tagging" -> "crownpku/Information-Extraction-Chinese"
"guillaumegenthial/sequence_tagging" -> "Franck-Dernoncourt/NeuroNER"
"guillaumegenthial/sequence_tagging" -> "glample/tagger"
"guillaumegenthial/sequence_tagging" -> "jiesutd/LatticeLSTM"
"guillaumegenthial/sequence_tagging" -> "Hironsan/anago"
"guillaumegenthial/sequence_tagging" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"guillaumegenthial/sequence_tagging" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"guillaumegenthial/sequence_tagging" -> "jiesutd/NCRFpp"
"guillaumegenthial/sequence_tagging" -> "kyzhouhzau/BERT-NER"
"guillaumegenthial/sequence_tagging" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"miracleyoo/pytorch-lightning-template" -> "ashleve/lightning-hydra-template" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "PyTorchLightning/deep-learning-project-template" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "Lightning-AI/lightning" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "fastnlp/fitlog"
"miracleyoo/pytorch-lightning-template" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"miracleyoo/pytorch-lightning-template" -> "MLNLP-World/Paper_Writing_Tips" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "IDEA-CCNL/Fengshenbang-LM"
"miracleyoo/pytorch-lightning-template" -> "MLNLP-World/AI-Paper-Collector" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "km1994/NLP-Interview-Notes"
"miracleyoo/pytorch-lightning-template" -> "3017218062/Pytorch-Lightning-Learning"
"miracleyoo/pytorch-lightning-template" -> "z814081807/DeepNER"
"miracleyoo/pytorch-lightning-template" -> "Lightning-AI/lightning-bolts"
"miracleyoo/pytorch-lightning-template" -> "princeton-nlp/SimCSE"
"miracleyoo/pytorch-lightning-template" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"miracleyoo/pytorch-lightning-template" -> "qingsongedu/time-series-transformers-review" ["e"=1]
"cjymz886/text-cnn" -> "cjymz886/text_rnn_attention"
"cjymz886/text-cnn" -> "gaussic/text-classification-cnn-rnn"
"cjymz886/text-cnn" -> "ami66/ChineseTextClassifier" ["e"=1]
"cjymz886/text-cnn" -> "clayandgithub/zh_cnn_text_classify" ["e"=1]
"cjymz886/text-cnn" -> "renxingkai/BERT_Chinese_Classification"
"cjymz886/text-cnn" -> "yongzhuo/Keras-TextClassification"
"cjymz886/text-cnn" -> "bigboNed3/chinese_text_cnn" ["e"=1]
"cjymz886/text-cnn" -> "CementMaker/cnn_lstm_for_text_classify"
"cjymz886/text-cnn" -> "norybaby/sentiment_analysis_textcnn" ["e"=1]
"cjymz886/text-cnn" -> "XqFeng-Josie/TextCNN" ["e"=1]
"cjymz886/text-cnn" -> "NLPScott/bert-Chinese-classification-task"
"cjymz886/text-cnn" -> "renjunxiang/Text-Classification"
"cjymz886/text-cnn" -> "wavewangyue/text-classification"
"cjymz886/text-cnn" -> "jiangxinyang227/textClassifier"
"cjymz886/text-cnn" -> "liyibo/text-classification-demos"
"liuhuanyong/TextGrapher" -> "liuhuanyong/EventTriplesExtraction"
"liuhuanyong/TextGrapher" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/TextGrapher" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/TextGrapher" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/TextGrapher" -> "ownthink/Jiagu"
"liuhuanyong/TextGrapher" -> "blmoistawinde/HarvestText"
"liuhuanyong/TextGrapher" -> "lixiang0/WEB_KG"
"liuhuanyong/TextGrapher" -> "fighting41love/cocoNLP"
"liuhuanyong/TextGrapher" -> "qq547276542/Agriculture_KnowledgeGraph"
"liuhuanyong/TextGrapher" -> "WenRichard/KBQA-BERT"
"liuhuanyong/TextGrapher" -> "liuhuanyong/QASystemOnMedicalKG"
"liuhuanyong/TextGrapher" -> "zhihao-chen/QASystemOnMedicalGraph"
"liuhuanyong/TextGrapher" -> "yuanxiaosc/Entity-Relation-Extraction"
"liuhuanyong/TextGrapher" -> "liuhuanyong/QAonMilitaryKG"
"liuhuanyong/TextGrapher" -> "husthuke/awesome-knowledge-graph"
"crownpku/Small-Chinese-Corpus" -> "zhangyics/Chinese-abbreviation-dataset"
"crownpku/Small-Chinese-Corpus" -> "rainarch/SentiBridge"
"crownpku/Small-Chinese-Corpus" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "ml-distribution/chinese-corpus"
"crownpku/Small-Chinese-Corpus" -> "crownpku/Information-Extraction-Chinese"
"crownpku/Small-Chinese-Corpus" -> "codemayq/chaotbot_corpus_Chinese" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "crownpku/awesome-chinese-nlp"
"crownpku/Small-Chinese-Corpus" -> "to-shimo/chinese-word2vec"
"crownpku/Small-Chinese-Corpus" -> "kfcd/chaizi" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "shijiebei2009/CEC-Corpus"
"crownpku/Small-Chinese-Corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "zjy-ucas/ChineseNER"
"crownpku/Small-Chinese-Corpus" -> "liwenzhu/corpusZh"
"crownpku/Small-Chinese-Corpus" -> "z17176/Chinese_conversation_sentiment"
"crownpku/Small-Chinese-Corpus" -> "qhduan/Seq2Seq_Chatbot_QA" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "TingFree/NLPer-Arsenal"
"HIT-SCIR/plm-nlp-code" -> "km1994/NLP-Interview-Notes"
"HIT-SCIR/plm-nlp-code" -> "DA-southampton/Read_Bert_Code"
"HIT-SCIR/plm-nlp-code" -> "km1994/nlp_paper_study"
"HIT-SCIR/plm-nlp-code" -> "leerumor/nlp_tutorial"
"HIT-SCIR/plm-nlp-code" -> "lrs1353281004/Chinese_medical_NLP"
"HIT-SCIR/plm-nlp-code" -> "aceimnorstuvwxz/toutiao-text-classfication-dataset"
"HIT-SCIR/plm-nlp-code" -> "autoliuweijie/BERT-whitening-pytorch"
"HIT-SCIR/plm-nlp-code" -> "universal-ie/UIE"
"HIT-SCIR/plm-nlp-code" -> "datawhalechina/team-learning-nlp" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "thunlp/OpenPrompt" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "liucongg/NLPDataSet"
"Tencent/NeuralNLP-NeuralClassifier" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification" ["e"=1]
"Tencent/NeuralNLP-NeuralClassifier" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "yongzhuo/Keras-TextClassification"
"Tencent/NeuralNLP-NeuralClassifier" -> "dbiir/UER-py"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/text_classification" ["e"=1]
"Tencent/NeuralNLP-NeuralClassifier" -> "zhpmatrix/nlp-competitions-list-review"
"Tencent/NeuralNLP-NeuralClassifier" -> "RandolphVI/Multi-Label-Text-Classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/albert_zh"
"Tencent/NeuralNLP-NeuralClassifier" -> "princeton-nlp/SimCSE"
"Tencent/NeuralNLP-NeuralClassifier" -> "CLUEbenchmark/CLUE"
"Tencent/NeuralNLP-NeuralClassifier" -> "ymcui/Chinese-BERT-wwm"
"Tencent/NeuralNLP-NeuralClassifier" -> "zhanlaoban/EDA_NLP_for_Chinese"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/roberta_zh"
"Tencent/NeuralNLP-NeuralClassifier" -> "Alibaba-NLP/HiAGM" ["e"=1]
"Tencent/NeuralNLP-NeuralClassifier" -> "NTMC-Community/MatchZoo"
"yongyehuang/Tensorflow-Tutorial" -> "yongyehuang/zhihu-text-classification"
"yongyehuang/Tensorflow-Tutorial" -> "rockingdingo/deepnlp"
"yongyehuang/Tensorflow-Tutorial" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"yongyehuang/Tensorflow-Tutorial" -> "chilynn/sequence-labeling"
"yongyehuang/Tensorflow-Tutorial" -> "hzy46/Char-RNN-TensorFlow"
"yongyehuang/Tensorflow-Tutorial" -> "shiyybua/NER"
"yongyehuang/Tensorflow-Tutorial" -> "guillaumegenthial/sequence_tagging"
"yongyehuang/Tensorflow-Tutorial" -> "Determined22/zh-NER-TF"
"yongyehuang/Tensorflow-Tutorial" -> "kevin28520/My-TensorFlow-tutorials" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "NELSONZHAO/zhihu"
"yongyehuang/Tensorflow-Tutorial" -> "koth/kcws"
"yongyehuang/Tensorflow-Tutorial" -> "kratzert/finetune_alexnet_with_tensorflow" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "lpty/nlp_base"
"yongyehuang/Tensorflow-Tutorial" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "YouChouNoBB/ijcai-18-top2-single-mole-solution" ["e"=1]
"abess-team/abess" -> "Mamba413/rvs"
"abess-team/abess" -> "Mamba413/Ball"
"abess-team/abess" -> "fxy96/Likelihood-Lab-AI-Seminar-2018"
"jinfagang/tensorflow_poems" -> "jinfagang/tensorflow_novelist"
"jinfagang/tensorflow_poems" -> "hzy46/Char-RNN-TensorFlow"
"jinfagang/tensorflow_poems" -> "NELSONZHAO/zhihu"
"jinfagang/tensorflow_poems" -> "warmheartli/ChatBotCourse" ["e"=1]
"jinfagang/tensorflow_poems" -> "hjptriplebee/Chinese_poem_generator" ["e"=1]
"jinfagang/tensorflow_poems" -> "jinfagang/weibo_terminater" ["e"=1]
"jinfagang/tensorflow_poems" -> "gaussic/text-classification-cnn-rnn"
"jinfagang/tensorflow_poems" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"jinfagang/tensorflow_poems" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"jinfagang/tensorflow_poems" -> "Embedding/Chinese-Word-Vectors"
"jinfagang/tensorflow_poems" -> "princewen/tensorflow_practice" ["e"=1]
"jinfagang/tensorflow_poems" -> "brightmart/nlp_chinese_corpus"
"jinfagang/tensorflow_poems" -> "huyingxi/Synonyms"
"jinfagang/tensorflow_poems" -> "Roshanson/TextInfoExp"
"jinfagang/tensorflow_poems" -> "google/seq2seq" ["e"=1]
"DA-southampton/TRM_tutorial" -> "DA-southampton/Read_Bert_Code"
"hzy46/Char-RNN-TensorFlow" -> "NELSONZHAO/zhihu"
"hzy46/Char-RNN-TensorFlow" -> "jinfagang/tensorflow_poems"
"hzy46/Char-RNN-TensorFlow" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "gaussic/text-classification-cnn-rnn"
"hzy46/Char-RNN-TensorFlow" -> "yongyehuang/Tensorflow-Tutorial"
"hzy46/Char-RNN-TensorFlow" -> "rockingdingo/deepnlp"
"hzy46/Char-RNN-TensorFlow" -> "Kyubyong/transformer" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "guillaumegenthial/sequence_tagging"
"hzy46/Char-RNN-TensorFlow" -> "qhduan/just_another_seq2seq" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "PaddlePaddle/LARK"
"hzy46/Char-RNN-TensorFlow" -> "qhduan/Seq2Seq_Chatbot_QA" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"hzy46/Char-RNN-TensorFlow" -> "Determined22/zh-NER-TF"
"hzy46/Char-RNN-TensorFlow" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"hzy46/Char-RNN-TensorFlow" -> "hzy46/Deep-Learning-21-Examples" ["e"=1]
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "guillaumegenthial/sequence_tagging"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "chilynn/sequence-labeling"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "Determined22/zh-NER-TF"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "shiyybua/NER"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "zjy-ucas/ChineseNER"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "liu-nlper/NER-LSTM-CRF"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "macanv/BERT-BiLSTM-CRF-NER"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "kyzhouhzau/BERT-NER"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "liu-nlper/SLTK"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "crownpku/Information-Extraction-Chinese"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "jiesutd/LatticeLSTM"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "buppt/ChineseNER"
"scofield7419/sequence-labeling-BiLSTM-CRF" -> "glample/tagger"
"Pelhans/Z_knowledge_graph" -> "SimmerChan/KG-demo-for-movie"
"Pelhans/Z_knowledge_graph" -> "lixiang0/WEB_KG"
"Pelhans/Z_knowledge_graph" -> "qq547276542/Agriculture_KnowledgeGraph"
"Pelhans/Z_knowledge_graph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"Pelhans/Z_knowledge_graph" -> "Shuang0420/knowledge_graph_demo"
"Pelhans/Z_knowledge_graph" -> "lemonhu/stock-knowledge-graph"
"Pelhans/Z_knowledge_graph" -> "liuhuanyong/QASystemOnMedicalKG"
"Pelhans/Z_knowledge_graph" -> "cnschema/cnschema"
"Pelhans/Z_knowledge_graph" -> "chizhu/KGQA_HLM"
"Pelhans/Z_knowledge_graph" -> "CrisJk/Agriculture-KnowledgeGraph-Data"
"Pelhans/Z_knowledge_graph" -> "zjunlp/deepke"
"Pelhans/Z_knowledge_graph" -> "husthuke/awesome-knowledge-graph"
"Pelhans/Z_knowledge_graph" -> "ownthink/KnowledgeGraph"
"Pelhans/Z_knowledge_graph" -> "lihanghang/NLP-Knowledge-Graph"
"Pelhans/Z_knowledge_graph" -> "smilelight/lightKG"
"yongyehuang/zhihu-text-classification" -> "Magic-Bubble/Zhihu"
"yongyehuang/zhihu-text-classification" -> "chenyuntc/PyTorchText"
"yongyehuang/zhihu-text-classification" -> "coderSkyChen/zhihu_kanshan_cup_2017"
"yongyehuang/zhihu-text-classification" -> "RandolphVI/Multi-Label-Text-Classification"
"yongyehuang/zhihu-text-classification" -> "chenzhi1992/Multi-Label-Text-Classification"
"yongyehuang/zhihu-text-classification" -> "yilirin/BDCI_Car_2018"
"yongyehuang/zhihu-text-classification" -> "NLPScott/bert-Chinese-classification-task"
"yongyehuang/zhihu-text-classification" -> "chenghuige/wenzheng"
"ZhuiyiTechnology/t5-pegasus" -> "renmada/t5-pegasus-pytorch"
"ZhuiyiTechnology/t5-pegasus" -> "SunnyGJing/t5-pegasus-chinese"
"ZhuiyiTechnology/t5-pegasus" -> "bojone/SPACES"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/t5-pegasus" -> "liucongg/GPT2-NewsTitle"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/t5-pegasus" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/t5-pegasus" -> "bojone/t5_in_bert4keras"
"ZhuiyiTechnology/t5-pegasus" -> "fastnlp/CPT"
"ZhuiyiTechnology/t5-pegasus" -> "qingkongzhiqian/GPT2-Summary"
"ZhuiyiTechnology/t5-pegasus" -> "P01son6415/CSL"
"ZhuiyiTechnology/t5-pegasus" -> "bojone/SimCSE"
"ZhuiyiTechnology/t5-pegasus" -> "google-research/multilingual-t5" ["e"=1]
"KangCai/Machine-Learning-Algorithm" -> "yangxcc/Sklearn-Algorithm"
"KangCai/Machine-Learning-Algorithm" -> "guangyaooo/MLTemplate"
"ownthink/KnowledgeGraph" -> "ownthink/robot"
"ownthink/KnowledgeGraph" -> "baimingxuan/vue3-admin-design" ["e"=1]
"ownthink/KnowledgeGraph" -> "HandsomeLeft/Veaser" ["e"=1]
"ownthink/KnowledgeGraph" -> "qq547276542/Agriculture_KnowledgeGraph"
"ownthink/KnowledgeGraph" -> "ownthink/Jiagu"
"ownthink/KnowledgeGraph" -> "sohutv/hotcaffeine" ["e"=1]
"ownthink/KnowledgeGraph" -> "KylinC/mmVital-Signs" ["e"=1]
"ownthink/KnowledgeGraph" -> "Allenkuzma/langhaiblogs" ["e"=1]
"ownthink/KnowledgeGraph" -> "lixiang0/WEB_KG"
"ownthink/KnowledgeGraph" -> "wwwlike/vlife-admin-react" ["e"=1]
"ownthink/KnowledgeGraph" -> "Beseting/NesEmulator" ["e"=1]
"ownthink/KnowledgeGraph" -> "sohutv/cachecloud-client" ["e"=1]
"ownthink/KnowledgeGraph" -> "atpuxiner/toollib" ["e"=1]
"ownthink/KnowledgeGraph" -> "wwwlike/vlife" ["e"=1]
"ownthink/KnowledgeGraph" -> "ownthink/KG-View"
"1024er/cbert_aug" -> "pfnet-research/contextual_augmentation"
"1024er/cbert_aug" -> "varinf/TransformersDataAugmentation"
"TsinghuaAI/CPM-Generate" -> "qhduan/CPM-LM-TF2"
"TsinghuaAI/CPM-Generate" -> "thu-coai/CDial-GPT"
"TsinghuaAI/CPM-Generate" -> "imcaspar/gpt2-ml"
"TsinghuaAI/CPM-Generate" -> "CLUEbenchmark/CLUEPretrainedModels"
"TsinghuaAI/CPM-Generate" -> "YunwenTechnology/Unilm"
"TsinghuaAI/CPM-Generate" -> "ymcui/Chinese-ELECTRA"
"TsinghuaAI/CPM-Generate" -> "TsinghuaAI/CPM-Finetune"
"TsinghuaAI/CPM-Generate" -> "dbiir/UER-py"
"TsinghuaAI/CPM-Generate" -> "PaddlePaddle/Knover"
"TsinghuaAI/CPM-Generate" -> "yangjianxin1/GPT2-chitchat"
"TsinghuaAI/CPM-Generate" -> "laekov/fastmoe" ["e"=1]
"TsinghuaAI/CPM-Generate" -> "thu-coai/EVA"
"TsinghuaAI/CPM-Generate" -> "alibaba/AliceMind"
"TsinghuaAI/CPM-Generate" -> "brightmart/albert_zh"
"TsinghuaAI/CPM-Generate" -> "ymcui/Chinese-PreTrained-XLNet"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/WoBERT" -> "bojone/SPACES"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/t5-pegasus"
"ZhuiyiTechnology/WoBERT" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/WoBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"ZhuiyiTechnology/WoBERT" -> "renmada/t5-pegasus-pytorch"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/WoBERT" -> "ymcui/MacBERT"
"ZhuiyiTechnology/WoBERT" -> "bohanli/BERT-flow"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/roformer"
"ZhuiyiTechnology/WoBERT" -> "bojone/t5_in_bert4keras"
"ZhuiyiTechnology/WoBERT" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/WoBERT" -> "alibaba-research/ChineseBLUE"
"ZhuiyiTechnology/WoBERT" -> "airaria/TextBrewer"
"bojone/word-discovery" -> "zhanzecheng/Chinese_segment_augment"
"bojone/word-discovery" -> "Rayarrow/New-Word-Discovery"
"bojone/word-discovery" -> "ZhuiyiTechnology/pretrained-models"
"bojone/word-discovery" -> "sing1ee/dict_build"
"bojone/word-discovery" -> "smoothnlp/SmoothNLP"
"bojone/word-discovery" -> "ZhuiyiTechnology/simbert"
"bojone/word-discovery" -> "bojone/kg-2019"
"bojone/word-discovery" -> "sunyilgdx/SIFRank_zh"
"bojone/word-discovery" -> "CLUEbenchmark/CLUEPretrainedModels"
"bojone/word-discovery" -> "yongzhuo/Macropodus"
"bojone/word-discovery" -> "iqiyi/FASPell"
"bojone/word-discovery" -> "DataTerminatorX/Keyword-BERT"
"bojone/word-discovery" -> "YunwenTechnology/Unilm"
"bojone/word-discovery" -> "Moonshile/ChineseWordSegmentation"
"bojone/word-discovery" -> "bojone/SimCSE"
"dropreg/R-Drop" -> "princeton-nlp/SimCSE"
"dropreg/R-Drop" -> "bojone/r-drop"
"dropreg/R-Drop" -> "bojone/SimCSE"
"dropreg/R-Drop" -> "JunnYu/RoFormer_pytorch"
"dropreg/R-Drop" -> "alibaba/AliceMind"
"dropreg/R-Drop" -> "huawei-noah/Pretrained-Language-Model"
"dropreg/R-Drop" -> "ShannonAI/ChineseBert"
"dropreg/R-Drop" -> "yym6472/ConSERT"
"dropreg/R-Drop" -> "airaria/TextBrewer"
"dropreg/R-Drop" -> "dbiir/UER-py"
"dropreg/R-Drop" -> "ShannonAI/mrc-for-flat-nested-ner"
"dropreg/R-Drop" -> "loujie0822/DeepIE"
"dropreg/R-Drop" -> "bojone/BERT-whitening"
"dropreg/R-Drop" -> "ymcui/MacBERT"
"dropreg/R-Drop" -> "lonePatient/BERT-NER-Pytorch"
"guotong1988/BERT-GPU" -> "zhp510730568/bert-ad"
"imcaspar/gpt2-ml" -> "Morizeyao/GPT2-Chinese"
"imcaspar/gpt2-ml" -> "yangjianxin1/GPT2-chitchat"
"imcaspar/gpt2-ml" -> "thu-coai/CDial-GPT"
"imcaspar/gpt2-ml" -> "dbiir/UER-py"
"imcaspar/gpt2-ml" -> "TsinghuaAI/CPM-Generate"
"imcaspar/gpt2-ml" -> "brightmart/roberta_zh"
"imcaspar/gpt2-ml" -> "brightmart/nlp_chinese_corpus"
"imcaspar/gpt2-ml" -> "liucongg/GPT2-NewsTitle"
"imcaspar/gpt2-ml" -> "ZhuiyiTechnology/pretrained-models"
"imcaspar/gpt2-ml" -> "Morizeyao/Decoders-Chinese-TF2.0"
"imcaspar/gpt2-ml" -> "GaoPeng97/transformer-xl-chinese"
"imcaspar/gpt2-ml" -> "brightmart/albert_zh"
"imcaspar/gpt2-ml" -> "CLUEbenchmark/CLUE"
"imcaspar/gpt2-ml" -> "ymcui/Chinese-PreTrained-XLNet"
"imcaspar/gpt2-ml" -> "bojone/bert4keras"
"iqiyi/FASPell" -> "shibing624/pycorrector"
"iqiyi/FASPell" -> "ACL2020SpellGCN/SpellGCN" ["e"=1]
"iqiyi/FASPell" -> "tiantian91091317/OCR-Corrector" ["e"=1]
"iqiyi/FASPell" -> "wdimmy/Automatic-Corpus-Generation" ["e"=1]
"iqiyi/FASPell" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"iqiyi/FASPell" -> "liushulinle/PLOME" ["e"=1]
"iqiyi/FASPell" -> "ZhuiyiTechnology/pretrained-models"
"iqiyi/FASPell" -> "ymcui/Chinese-ELECTRA"
"iqiyi/FASPell" -> "DaDaMrX/ReaLiSe" ["e"=1]
"iqiyi/FASPell" -> "bojone/word-discovery"
"iqiyi/FASPell" -> "brightmart/roberta_zh"
"iqiyi/FASPell" -> "destwang/CTCResources" ["e"=1]
"iqiyi/FASPell" -> "airaria/TextBrewer"
"iqiyi/FASPell" -> "ccheng16/correction" ["e"=1]
"iqiyi/FASPell" -> "gitabtion/BertBasedCorrectionModels" ["e"=1]
"liucongg/GPT2-NewsTitle" -> "YunwenTechnology/Unilm"
"liucongg/GPT2-NewsTitle" -> "qingkongzhiqian/GPT2-Summary"
"liucongg/GPT2-NewsTitle" -> "ZhuiyiTechnology/t5-pegasus"
"liucongg/GPT2-NewsTitle" -> "bojone/SPACES"
"liucongg/GPT2-NewsTitle" -> "renmada/t5-pegasus-pytorch"
"liucongg/GPT2-NewsTitle" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"liucongg/GPT2-NewsTitle" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"liucongg/GPT2-NewsTitle" -> "imcaspar/gpt2-ml"
"liucongg/GPT2-NewsTitle" -> "thu-coai/CDial-GPT"
"liucongg/GPT2-NewsTitle" -> "xcfcode/Summarization-Papers" ["e"=1]
"liucongg/GPT2-NewsTitle" -> "ZhuiyiTechnology/pretrained-models"
"liucongg/GPT2-NewsTitle" -> "CLUEbenchmark/CLUEDatasetSearch"
"liucongg/GPT2-NewsTitle" -> "yangjianxin1/GPT2-chitchat"
"liucongg/GPT2-NewsTitle" -> "z814081807/DeepNER"
"liucongg/GPT2-NewsTitle" -> "Morizeyao/GPT2-Chinese"
"varinf/TransformersDataAugmentation" -> "amazon-research/transformers-data-augmentation"
"GanjinZero/awesome_Chinese_medical_NLP" -> "lrs1353281004/Chinese_medical_NLP"
"GanjinZero/awesome_Chinese_medical_NLP" -> "alibaba-research/ChineseBLUE"
"GanjinZero/awesome_Chinese_medical_NLP" -> "GanjinZero/ChineseEHRBert"
"GanjinZero/awesome_Chinese_medical_NLP" -> "Toyhom/Chinese-medical-dialogue-data"
"GanjinZero/awesome_Chinese_medical_NLP" -> "loujie0822/DeepIE"
"GanjinZero/awesome_Chinese_medical_NLP" -> "CBLUEbenchmark/CBLUE"
"GanjinZero/awesome_Chinese_medical_NLP" -> "liuhuanyong/QASystemOnMedicalKG"
"GanjinZero/awesome_Chinese_medical_NLP" -> "zhihao-chen/QASystemOnMedicalGraph"
"GanjinZero/awesome_Chinese_medical_NLP" -> "z814081807/DeepNER"
"GanjinZero/awesome_Chinese_medical_NLP" -> "lonePatient/BERT-NER-Pytorch"
"GanjinZero/awesome_Chinese_medical_NLP" -> "YeYzheng/KGQA-Based-On-medicine"
"GanjinZero/awesome_Chinese_medical_NLP" -> "UCSD-AI4H/Medical-Dialogue-System"
"GanjinZero/awesome_Chinese_medical_NLP" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"GanjinZero/awesome_Chinese_medical_NLP" -> "TingFree/NLPer-Arsenal"
"GanjinZero/awesome_Chinese_medical_NLP" -> "LeeSureman/Flat-Lattice-Transformer"
"murray-z/text_clustering" -> "HaowenHOU/single-pass-clustering-for-chinese-text" ["e"=1]
"murray-z/text_clustering" -> "amazon-research/sccl"
"murray-z/text_clustering" -> "FesonX/cn-text-classifier" ["e"=1]
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "lixiang0/WEB_KG"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "lemonhu/stock-knowledge-graph"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "Light-City/PyToNeo4J"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "WenRichard/KBQA-BERT"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "SimmerChan/KG-demo-for-movie"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "mattzheng/DouBanRecommend"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "qq547276542/Agriculture_KnowledgeGraph"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "vivianLL/QASystemOnHepatopathyKG"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "smilelight/lightKG"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "MiracleTanC/Neo4j-KGBuilder" ["e"=1]
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "qiu997018209/KnowledgeGraph"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "zhihao-chen/QASystemOnMedicalGraph"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"Skyellbin/neo4j-python-pandas-py2neo-v3" -> "percent4/spo_extract_platform"
"bojone/kg-2019" -> "yuanxiaosc/Entity-Relation-Extraction"
"bojone/kg-2019" -> "bojone/kg-2019-baseline"
"bojone/kg-2019" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"bojone/kg-2019" -> "bojone/bert_in_keras"
"bojone/kg-2019" -> "panchunguang/ccks_baidu_entity_link"
"bojone/kg-2019" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"bojone/kg-2019" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"bojone/kg-2019" -> "weizhepei/CasRel"
"bojone/kg-2019" -> "zhengyima/kg-baseline-pytorch"
"bojone/kg-2019" -> "baidu/information-extraction"
"bojone/kg-2019" -> "ZhuiyiTechnology/pretrained-models"
"bojone/kg-2019" -> "Wangpeiyi9979/IE-Bert-CNN"
"bojone/kg-2019" -> "lemonhu/open-entity-relation-extraction"
"bojone/kg-2019" -> "loujie0822/DeepIE"
"bojone/kg-2019" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"lixiang0/WEB_KG" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"lixiang0/WEB_KG" -> "qq547276542/Agriculture_KnowledgeGraph"
"lixiang0/WEB_KG" -> "Pelhans/Z_knowledge_graph"
"lixiang0/WEB_KG" -> "smilelight/lightKG"
"lixiang0/WEB_KG" -> "s-top/Baike-KnowledgeGraph"
"lixiang0/WEB_KG" -> "lemonhu/stock-knowledge-graph"
"lixiang0/WEB_KG" -> "WenRichard/KBQA-BERT"
"lixiang0/WEB_KG" -> "Skyellbin/neo4j-python-pandas-py2neo-v3"
"lixiang0/WEB_KG" -> "liuhuanyong/TextGrapher"
"lixiang0/WEB_KG" -> "bojone/kg-2019"
"lixiang0/WEB_KG" -> "CrisJk/Agriculture-KnowledgeGraph-Data"
"lixiang0/WEB_KG" -> "YeYzheng/KGQA-Based-On-medicine"
"lixiang0/WEB_KG" -> "SimmerChan/KG-demo-for-movie"
"lixiang0/WEB_KG" -> "liuhuanyong/EventTriplesExtraction"
"lixiang0/WEB_KG" -> "ownthink/KnowledgeGraph"
"ymcui/Chinese-PreTrained-XLNet" -> "brightmart/roberta_zh"
"ymcui/Chinese-PreTrained-XLNet" -> "chineseGLUE/chineseGLUE"
"ymcui/Chinese-PreTrained-XLNet" -> "brightmart/albert_zh"
"ymcui/Chinese-PreTrained-XLNet" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"ymcui/Chinese-PreTrained-XLNet" -> "brightmart/xlnet_zh"
"ymcui/Chinese-PreTrained-XLNet" -> "PaddlePaddle/LARK"
"ymcui/Chinese-PreTrained-XLNet" -> "zihangdai/xlnet" ["e"=1]
"ymcui/Chinese-PreTrained-XLNet" -> "lonePatient/albert_pytorch"
"ymcui/Chinese-PreTrained-XLNet" -> "thunlp/OpenCLaP"
"ymcui/Chinese-PreTrained-XLNet" -> "ymcui/Chinese-ELECTRA"
"ymcui/Chinese-PreTrained-XLNet" -> "bojone/bert_in_keras"
"ymcui/Chinese-PreTrained-XLNet" -> "Jiakui/awesome-bert"
"ymcui/Chinese-PreTrained-XLNet" -> "ymcui/Chinese-BERT-wwm"
"ymcui/Chinese-PreTrained-XLNet" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/Chinese-PreTrained-XLNet" -> "nghuyong/ERNIE-Pytorch"
"yongzhuo/Keras-TextClassification" -> "yongzhuo/nlp_xiaojiang"
"yongzhuo/Keras-TextClassification" -> "ShawnyXiao/TextClassification-Keras" ["e"=1]
"yongzhuo/Keras-TextClassification" -> "terrifyzhao/bert-utils"
"yongzhuo/Keras-TextClassification" -> "bojone/bert4keras"
"yongzhuo/Keras-TextClassification" -> "brightmart/albert_zh"
"yongzhuo/Keras-TextClassification" -> "CyberZHG/keras-bert"
"yongzhuo/Keras-TextClassification" -> "649453932/Chinese-Text-Classification-Pytorch"
"yongzhuo/Keras-TextClassification" -> "gaussic/text-classification-cnn-rnn"
"yongzhuo/Keras-TextClassification" -> "brightmart/text_classification" ["e"=1]
"yongzhuo/Keras-TextClassification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"yongzhuo/Keras-TextClassification" -> "BrikerMan/Kashgari"
"yongzhuo/Keras-TextClassification" -> "macanv/BERT-BiLSTM-CRF-NER"
"yongzhuo/Keras-TextClassification" -> "ymcui/Chinese-BERT-wwm"
"yongzhuo/Keras-TextClassification" -> "Tencent/NeuralNLP-NeuralClassifier"
"yongzhuo/Keras-TextClassification" -> "zhpmatrix/nlp-competitions-list-review"
"yuanxiaosc/Entity-Relation-Extraction" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"yuanxiaosc/Entity-Relation-Extraction" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"yuanxiaosc/Entity-Relation-Extraction" -> "bojone/kg-2019"
"yuanxiaosc/Entity-Relation-Extraction" -> "crownpku/Information-Extraction-Chinese"
"yuanxiaosc/Entity-Relation-Extraction" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"yuanxiaosc/Entity-Relation-Extraction" -> "loujie0822/DeepIE"
"yuanxiaosc/Entity-Relation-Extraction" -> "buppt/ChineseNRE"
"yuanxiaosc/Entity-Relation-Extraction" -> "weizhepei/CasRel"
"yuanxiaosc/Entity-Relation-Extraction" -> "zhengyima/kg-baseline-pytorch"
"yuanxiaosc/Entity-Relation-Extraction" -> "thunlp/OpenNRE"
"yuanxiaosc/Entity-Relation-Extraction" -> "macanv/BERT-BiLSTM-CRF-NER"
"yuanxiaosc/Entity-Relation-Extraction" -> "panchunguang/ccks_baidu_entity_link"
"yuanxiaosc/Entity-Relation-Extraction" -> "bojone/bert_in_keras"
"yuanxiaosc/Entity-Relation-Extraction" -> "lonePatient/BERT-NER-Pytorch"
"yuanxiaosc/Entity-Relation-Extraction" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "yuanxiaosc/Entity-Relation-Extraction"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "bojone/kg-2019"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "Wangpeiyi9979/IE-Bert-CNN"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "zhengyima/kg-baseline-pytorch"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "WindChimeRan/pytorch_multi_head_selection_re" ["e"=1]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "baidu/information-extraction"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "Wangpeiyi9979/InformationExtractionDemo"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "weizhepei/CasRel"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "cdjasonj/CCF_IE"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "zhpmatrix/BERTem" ["e"=1]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "zjunlp/deepke"
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" -> "percent4/ccks_triple_extract"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "yuanxiaosc/Entity-Relation-Extraction"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "Wangpeiyi9979/IE-Bert-CNN"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "NeilGY/NER_entityRelationExtration"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "zhengyima/kg-baseline-pytorch"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "bojone/kg-2019"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "Wangpeiyi9979/InformationExtractionDemo"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "cdjasonj/CCF_IE"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "baidu/information-extraction"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "bojone/kg-2019-baseline"
"yuanxiaosc/Schema-based-Knowledge-Extraction" -> "powerycy/Lic2020-"
"UCSD-AI4H/Medical-Dialogue-System" -> "UCSD-AI4H/COVID-Dialogue"
"UCSD-AI4H/Medical-Dialogue-System" -> "Toyhom/Chinese-medical-dialogue-data"
"UCSD-AI4H/Medical-Dialogue-System" -> "alibaba-research/ChineseBLUE"
"UCSD-AI4H/Medical-Dialogue-System" -> "zhangsheng93/cMedQA2"
"UCSD-AI4H/Medical-Dialogue-System" -> "lrs1353281004/Chinese_medical_NLP"
"UCSD-AI4H/Medical-Dialogue-System" -> "lwgkzl/MedDG"
"UCSD-AI4H/Medical-Dialogue-System" -> "GanjinZero/awesome_Chinese_medical_NLP"
"UCSD-AI4H/Medical-Dialogue-System" -> "yanguojun123/Medical-Dialogue"
"UCSD-AI4H/Medical-Dialogue-System" -> "yixiu00001/LSTM-CRF-medical"
"UCSD-AI4H/Medical-Dialogue-System" -> "CBLUEbenchmark/CBLUE"
"UCSD-AI4H/Medical-Dialogue-System" -> "HCPLab-SYSU/Medical_DS"
"UCSD-AI4H/Medical-Dialogue-System" -> "LiuQL2/MedicalChatbot"
"UCSD-AI4H/Medical-Dialogue-System" -> "jd-aig/nlp_baai"
"UCSD-AI4H/Medical-Dialogue-System" -> "GanjinZero/ChineseEHRBert"
"UCSD-AI4H/Medical-Dialogue-System" -> "thu-coai/EVA"
"didi/ChineseNLP" -> "brightmart/albert_zh"
"didi/ChineseNLP" -> "InsaneLife/ChineseNLPCorpus"
"didi/ChineseNLP" -> "ymcui/Chinese-BERT-wwm"
"didi/ChineseNLP" -> "CLUEbenchmark/CLUE"
"didi/ChineseNLP" -> "zhpmatrix/nlp-competitions-list-review"
"didi/ChineseNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"didi/ChineseNLP" -> "brightmart/nlp_chinese_corpus"
"didi/ChineseNLP" -> "brightmart/roberta_zh"
"didi/ChineseNLP" -> "SophonPlus/ChineseNlpCorpus"
"didi/ChineseNLP" -> "fastnlp/fastNLP"
"didi/ChineseNLP" -> "dbiir/UER-py"
"didi/ChineseNLP" -> "songyingxin/NLPer-Interview"
"didi/ChineseNLP" -> "macanv/BERT-BiLSTM-CRF-NER"
"didi/ChineseNLP" -> "zhanlaoban/EDA_NLP_for_Chinese"
"didi/ChineseNLP" -> "msgi/nlp-journey"
"ne7ermore/torch-light" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"chatopera/cskefu" -> "taoshihan1991/go-fly" ["e"=1]
"chatopera/cskefu" -> "6ag/customer-service"
"chatopera/cskefu" -> "lizhe2004/chatbot-list"
"chatopera/cskefu" -> "chatopera/chatbot-samples"
"Lightning-AI/lightning-bolts" -> "Lightning-AI/lightning-flash"
"ZhixiuYe/NER-pytorch" -> "ZhixiuYe/HSCRF-pytorch"
"ZhixiuYe/NER-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"ZhixiuYe/NER-pytorch" -> "threelittlemonkeys/lstm-crf-pytorch"
"ZhixiuYe/NER-pytorch" -> "liu-nlper/SLTK"
"ZhixiuYe/NER-pytorch" -> "glample/tagger"
"ZhixiuYe/NER-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"ZhixiuYe/NER-pytorch" -> "rainarch/DSNER"
"ZhixiuYe/NER-pytorch" -> "liu-nlper/NER-LSTM-CRF"
"ZhixiuYe/NER-pytorch" -> "yanwii/ChinsesNER-pytorch"
"ZhixiuYe/NER-pytorch" -> "sberbank-ai/ner-bert"
"ZhixiuYe/NER-pytorch" -> "jiesutd/NCRFpp"
"ZhixiuYe/NER-pytorch" -> "kamalkraj/BERT-NER"
"ZhixiuYe/NER-pytorch" -> "jiesutd/LatticeLSTM"
"threelittlemonkeys/lstm-crf-pytorch" -> "kmkurn/pytorch-crf"
"threelittlemonkeys/lstm-crf-pytorch" -> "ZhixiuYe/NER-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "allanj/pytorch_lstmcrf"
"threelittlemonkeys/lstm-crf-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"threelittlemonkeys/lstm-crf-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"threelittlemonkeys/lstm-crf-pytorch" -> "jidasheng/bi-lstm-crf"
"threelittlemonkeys/lstm-crf-pytorch" -> "kaniblu/pytorch-bilstmcrf"
"threelittlemonkeys/lstm-crf-pytorch" -> "yanwii/ChinsesNER-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling"
"threelittlemonkeys/lstm-crf-pytorch" -> "mali19064/LSTM-CRF-pytorch-faster"
"threelittlemonkeys/lstm-crf-pytorch" -> "ZhixiuYe/HSCRF-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "Nealcly/BiLSTM-LAN"
"threelittlemonkeys/lstm-crf-pytorch" -> "jiesutd/LatticeLSTM"
"threelittlemonkeys/lstm-crf-pytorch" -> "jiesutd/NCRFpp"
"threelittlemonkeys/lstm-crf-pytorch" -> "XuezheMax/NeuroNLP2" ["e"=1]
"AimeeLee77/keyword_extraction" -> "Roshanson/TextInfoExp"
"AimeeLee77/keyword_extraction" -> "AimeeLee77/wiki_zh_word2vec"
"AimeeLee77/keyword_extraction" -> "bigzhao/Keyword_Extraction"
"AimeeLee77/keyword_extraction" -> "letiantian/TextRank4ZH"
"AimeeLee77/keyword_extraction" -> "ownthink/Jiagu"
"AimeeLee77/keyword_extraction" -> "AimeeLee77/senti_analysis" ["e"=1]
"AimeeLee77/keyword_extraction" -> "yongzhuo/nlp_xiaojiang"
"AimeeLee77/keyword_extraction" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"AimeeLee77/keyword_extraction" -> "gaussic/text-classification-cnn-rnn"
"AimeeLee77/keyword_extraction" -> "terrifyzhao/bert-utils"
"AimeeLee77/keyword_extraction" -> "cjymz886/text-cnn"
"AimeeLee77/keyword_extraction" -> "HUANGZHIHAO1994/weibo-analysis-and-visualization" ["e"=1]
"AimeeLee77/keyword_extraction" -> "goto456/stopwords"
"AimeeLee77/keyword_extraction" -> "dongrixinyu/chinese_keyphrase_extractor"
"AimeeLee77/keyword_extraction" -> "ArtistScript/FastTextRank"
"bigzhao/Keyword_Extraction" -> "Rowchen/Keyword-Extraction"
"bigzhao/Keyword_Extraction" -> "ArtistScript/FastTextRank"
"bigzhao/Keyword_Extraction" -> "AimeeLee77/keyword_extraction"
"bigzhao/Keyword_Extraction" -> "sunyilgdx/SIFRank_zh"
"bigzhao/Keyword_Extraction" -> "dongrixinyu/chinese_keyphrase_extractor"
"bigzhao/Keyword_Extraction" -> "yilirin/BDCI_Car_2018"
"bigzhao/Keyword_Extraction" -> "ymcui/Chinese-PreTrained-XLNet"
"real-brilliant/bert_chinese_pytorch" -> "duanzhihua/bert_chinese_pytorch"
"real-brilliant/bert_chinese_pytorch" -> "duanzhihua/pytorch-pretrained-BERT"
"real-brilliant/bert_chinese_pytorch" -> "xieyufei1993/Bert-Pytorch-Chinese-TextClassification"
"GISerWang/Spatio-temporal-Clustering" -> "leekeiling/Cluster"
"GISerWang/Spatio-temporal-Clustering" -> "GISerWang/Sequence-Similarity"
"mali19064/LSTM-CRF-pytorch-faster" -> "threelittlemonkeys/lstm-crf-pytorch"
"NTMC-Community/MatchZoo-py" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"NTMC-Community/MatchZoo-py" -> "NTMC-Community/MatchZoo"
"NTMC-Community/MatchZoo-py" -> "Georgetown-IR-Lab/cedr" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "nyu-dl/dl4marco-bert" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "pengshuang/Text-Similarity"
"NTMC-Community/MatchZoo-py" -> "thunlp/OpenMatch" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "zhaogaofeng611/TextMatch"
"NTMC-Community/MatchZoo-py" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"NTMC-Community/MatchZoo-py" -> "alibaba-edu/simple-effective-text-matching"
"NTMC-Community/MatchZoo-py" -> "castorini/anserini" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "coetaur0/ESIM"
"NTMC-Community/MatchZoo-py" -> "DataTerminatorX/Keyword-BERT"
"NTMC-Community/MatchZoo-py" -> "Albert-Ma/PROP" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "terrifyzhao/text_matching"
"NTMC-Community/MatchZoo-py" -> "AdeDZY/DeepCT" ["e"=1]
"jsksxs360/AHANLP" -> "jsksxs360/Word2Vec"
"jsksxs360/AHANLP" -> "shibing624/similarity"
"jsksxs360/AHANLP" -> "shinyke/Time-NLP"
"liuzhibin-cn/address-semantic-search" -> "IceMimosa/geocoding"
"liuzhibin-cn/address-semantic-search" -> "curryli/AddressCompare"
"liuzhibin-cn/address-semantic-search" -> "bitlap/geocoding"
"liuzhibin-cn/address-semantic-search" -> "yihenglu/chinese-address-segment"
"liuzhibin-cn/address-semantic-search" -> "casuallyName/Geocoding"
"Dod-o/NLP-practice-program" -> "songyingxin/TextClassification"
"ysc/word" -> "ysc/cws_evaluation"
"ysc/word" -> "NLPchina/ansj_seg"
"ysc/word" -> "ysc/QuestionAnsweringSystem"
"ysc/word" -> "huaban/jieba-analysis"
"ysc/word" -> "NLPchina/nlp-lang"
"ysc/word" -> "lionsoul2014/jcseg"
"ysc/word" -> "ysc/APDPlat" ["e"=1]
"ysc/word" -> "NLPchina/Word2VEC_java"
"ysc/word" -> "shibing624/similarity"
"ysc/word" -> "alibaba/TProfiler" ["e"=1]
"ysc/word" -> "wks/ik-analyzer"
"ysc/word" -> "hankcs/HanLP"
"ysc/word" -> "NLPIR-team/NLPIR"
"ysc/word" -> "chenlb/mmseg4j-solr"
"ysc/word" -> "ysc/HtmlExtractor"
"pengshuang/AI-Comp" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"pengshuang/AI-Comp" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"pengshuang/AI-Comp" -> "chenghuige/wenzheng"
"pengshuang/AI-Comp" -> "foamliu/Sentiment-Analysis"
"pengshuang/AI-Comp" -> "xueyouluo/fsauor2018"
"pengshuang/AI-Comp" -> "brightmart/sentiment_analysis_fine_grain"
"pengshuang/AI-Comp" -> "viewlei/fsauor2018" ["e"=1]
"pengshuang/AI-Comp" -> "wxue004cs/GCAE" ["e"=1]
"smilelight/lightNLP" -> "yongzhuo/nlp_xiaojiang"
"smilelight/lightNLP" -> "smilelight/lightKG"
"smilelight/lightNLP" -> "zhpmatrix/nlp-competitions-list-review"
"smilelight/lightNLP" -> "FudanNLP/nlp-beginner"
"smilelight/lightNLP" -> "lpty/nlp_base"
"smilelight/lightNLP" -> "fastnlp/fastNLP"
"smilelight/lightNLP" -> "liuhuanyong/ChineseEmbedding"
"smilelight/lightNLP" -> "msgi/nlp-journey"
"smilelight/lightNLP" -> "zjunlp/deepke"
"smilelight/lightNLP" -> "songyingxin/Bert-TextClassification"
"smilelight/lightNLP" -> "ownthink/Jiagu"
"smilelight/lightNLP" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"smilelight/lightNLP" -> "zibuyu/research_tao"
"smilelight/lightNLP" -> "yuanxiaosc/Entity-Relation-Extraction"
"smilelight/lightNLP" -> "DSKSD/DeepNLP-models-Pytorch" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"taishan1994/awesome-chinese-ner" -> "ljynlp/W2NER"
"taishan1994/awesome-chinese-ner" -> "taishan1994/pytorch_triple_extraction"
"taishan1994/awesome-chinese-ner" -> "zs50910/DCSAN-for-Chinese-NER"
"taishan1994/awesome-chinese-ner" -> "DSXiangLi/ChineseNER"
"taishan1994/awesome-chinese-ner" -> "yangjianxin1/LEBERT-NER-Chinese"
"taishan1994/awesome-chinese-ner" -> "thunlp/PL-Marker"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/simbert" -> "bojone/SimCSE"
"ZhuiyiTechnology/simbert" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/simbert" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/simbert" -> "airaria/TextBrewer"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/simbert" -> "princeton-nlp/SimCSE"
"ZhuiyiTechnology/simbert" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/simbert" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/t5-pegasus"
"ZhuiyiTechnology/simbert" -> "brightmart/albert_zh"
"ZhuiyiTechnology/simbert" -> "bojone/bert4keras"
"ZhuiyiTechnology/simbert" -> "huawei-noah/Pretrained-Language-Model"
"ZhuiyiTechnology/simbert" -> "panchunguang/ccks_baidu_entity_link"
"zhusleep/pytorch_chinese_lm_pretrain" -> "lonePatient/NeZha_Chinese_PyTorch"
"zhusleep/pytorch_chinese_lm_pretrain" -> "autoliuweijie/BERT-whitening-pytorch"
"zhusleep/pytorch_chinese_lm_pretrain" -> "ZhuiyiTechnology/pretrained-models"
"zhusleep/pytorch_chinese_lm_pretrain" -> "zhengyanzhao1997/NLP-model"
"zhusleep/pytorch_chinese_lm_pretrain" -> "ZhuiyiTechnology/simbert"
"zhusleep/pytorch_chinese_lm_pretrain" -> "qiangsiwei/bert_distill"
"zhusleep/pytorch_chinese_lm_pretrain" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"zhusleep/pytorch_chinese_lm_pretrain" -> "z814081807/DeepNER"
"zhusleep/pytorch_chinese_lm_pretrain" -> "brightmart/roberta_zh"
"zhusleep/pytorch_chinese_lm_pretrain" -> "bojone/SimCSE"
"zhusleep/pytorch_chinese_lm_pretrain" -> "nghuyong/ERNIE-Pytorch"
"zhusleep/pytorch_chinese_lm_pretrain" -> "CLUEbenchmark/CLUEPretrainedModels"
"zhusleep/pytorch_chinese_lm_pretrain" -> "allenai/dont-stop-pretraining"
"zhusleep/pytorch_chinese_lm_pretrain" -> "qiufengyuyi/sequence_tagging"
"zhusleep/pytorch_chinese_lm_pretrain" -> "heiheiyoyo/uie_pytorch"
"qhduan/CPM-LM-TF2" -> "TsinghuaAI/CPM-Generate"
"qhduan/CPM-LM-TF2" -> "jm12138/CPM-Generate-Pytorch"
"qhduan/CPM-LM-TF2" -> "TsinghuaAI/CPM-KG"
"qhduan/CPM-LM-TF2" -> "jm12138/CPM-Generate-Paddle" ["e"=1]
"glample/tagger" -> "clab/stack-lstm-ner"
"glample/tagger" -> "chilynn/sequence-labeling"
"glample/tagger" -> "Franck-Dernoncourt/NeuroNER"
"glample/tagger" -> "guillaumegenthial/sequence_tagging"
"glample/tagger" -> "monikkinom/ner-lstm"
"glample/tagger" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"glample/tagger" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"glample/tagger" -> "zjy-ucas/ChineseNER"
"glample/tagger" -> "Hironsan/anago"
"glample/tagger" -> "jiesutd/NCRFpp"
"glample/tagger" -> "ZhixiuYe/NER-pytorch"
"glample/tagger" -> "rockingdingo/deepnlp"
"glample/tagger" -> "hltcoe/golden-horse"
"glample/tagger" -> "thunlp/NRE" ["e"=1]
"glample/tagger" -> "LopezGG/NN_NER_tensorFlow"
"liu-nlper/SLTK" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"liu-nlper/SLTK" -> "liu-nlper/NER-LSTM-CRF"
"liu-nlper/SLTK" -> "ZhixiuYe/NER-pytorch"
"liu-nlper/SLTK" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"liu-nlper/SLTK" -> "ZhixiuYe/HSCRF-pytorch"
"liu-nlper/SLTK" -> "achernodub/targer"
"liu-nlper/SLTK" -> "liuhuanyong/TopiCluster" ["e"=1]
"liu-nlper/SLTK" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"liu-nlper/SLTK" -> "FuYanzhe2/Name-Entity-Recognition"
"liu-nlper/SLTK" -> "jiesutd/NCRFpp"
"liu-nlper/SLTK" -> "buppt/ChineseNER"
"liu-nlper/SLTK" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"liu-nlper/SLTK" -> "jiesutd/LatticeLSTM"
"liu-nlper/SLTK" -> "kyzhouhzau/BERT-NER"
"shangjingbo1226/AutoPhrase" -> "shangjingbo1226/SegPhrase"
"shangjingbo1226/AutoPhrase" -> "shangjingbo1226/AutoNER"
"shangjingbo1226/AutoPhrase" -> "luozhouyang/AutoPhraseX"
"shangjingbo1226/AutoPhrase" -> "boudinfl/pke" ["e"=1]
"shangjingbo1226/AutoPhrase" -> "loujie0822/DeepIE"
"shangjingbo1226/AutoPhrase" -> "anirudyd/topmine"
"shangjingbo1226/AutoPhrase" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"shangjingbo1226/AutoPhrase" -> "jiesutd/LatticeLSTM"
"shangjingbo1226/AutoPhrase" -> "jiesutd/NCRFpp"
"shangjingbo1226/AutoPhrase" -> "xgeric/UCPhrase-exp"
"shangjingbo1226/AutoPhrase" -> "sing1ee/dict_build"
"shangjingbo1226/AutoPhrase" -> "panchunguang/ccks_baidu_entity_link"
"shangjingbo1226/AutoPhrase" -> "crownpku/Information-Extraction-Chinese"
"shangjingbo1226/AutoPhrase" -> "dbiir/UER-py"
"shangjingbo1226/AutoPhrase" -> "BangLiu/ConcepT"
"zibuyu/research_tao" -> "FudanNLP/nlp-beginner"
"zibuyu/research_tao" -> "zhpmatrix/nlp-competitions-list-review"
"zibuyu/research_tao" -> "songyingxin/NLPer-Interview"
"zibuyu/research_tao" -> "crownpku/Awesome-Chinese-NLP"
"zibuyu/research_tao" -> "thunlp/PLMpapers" ["e"=1]
"zibuyu/research_tao" -> "msgi/nlp-journey"
"zibuyu/research_tao" -> "didi/ChineseNLP"
"zibuyu/research_tao" -> "songyingxin/TextClassification-Pytorch"
"zibuyu/research_tao" -> "ymcui/Chinese-BERT-wwm"
"zibuyu/research_tao" -> "fastnlp/fastNLP"
"zibuyu/research_tao" -> "brightmart/nlp_chinese_corpus"
"zibuyu/research_tao" -> "km1994/nlp_paper_study"
"zibuyu/research_tao" -> "brightmart/albert_zh"
"zibuyu/research_tao" -> "InsaneLife/ChineseNLPCorpus"
"zibuyu/research_tao" -> "thunlp/ERNIE"
"DengBoCong/nlp-dialogue" -> "DengBoCong/Algorithm"
"DengBoCong/nlp-paper" -> "km1994/nlp_paper_study"
"DengBoCong/nlp-paper" -> "DengBoCong/nlp-dialogue"
"DengBoCong/nlp-paper" -> "TingFree/NLPer-Arsenal"
"DengBoCong/nlp-paper" -> "leerumor/nlp_tutorial"
"DengBoCong/nlp-paper" -> "km1994/NLP-Interview-Notes"
"DengBoCong/nlp-paper" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"DengBoCong/nlp-paper" -> "DA-southampton/NLP_ability"
"DengBoCong/nlp-paper" -> "jasoncao11/nlp-notebook"
"DengBoCong/nlp-paper" -> "DengBoCong/text-similarity"
"DengBoCong/nlp-paper" -> "loujie0822/DeepIE"
"DengBoCong/nlp-paper" -> "datawhalechina/team-learning-nlp" ["e"=1]
"DengBoCong/nlp-paper" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["e"=1]
"DengBoCong/nlp-paper" -> "DA-southampton/Tech_Aarticle"
"DengBoCong/nlp-paper" -> "shliang0603/Awesome-DeepLearning-500FAQ" ["e"=1]
"DengBoCong/nlp-paper" -> "zhpmatrix/nlp-competitions-list-review"
"StanleyLsx/entity_extractor_by_ner" -> "CLOVEXCWZ/NER_DEMO"
"StanleyLsx/entity_extractor_by_ner" -> "StanleyLsx/text_classifier"
"StanleyLsx/entity_extractor_by_ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"StanleyLsx/entity_extractor_by_ner" -> "DSXiangLi/ChineseNER"
"StanleyLsx/entity_extractor_by_ner" -> "yumath/bertNER"
"StanleyLsx/entity_extractor_by_ner" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"StanleyLsx/entity_extractor_by_ner" -> "wzzzd/lm_ner"
"StanleyLsx/entity_extractor_by_ner" -> "yangjianxin1/LEBERT-NER-Chinese"
"StanleyLsx/entity_extractor_by_ner" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"StanleyLsx/entity_extractor_by_ner" -> "saiwaiyanyu/bi-lstm-crf-ner-tf2.0"
"StanleyLsx/entity_extractor_by_ner" -> "HandsomeCao/Bert-BiLSTM-CRF-pytorch"
"StanleyLsx/entity_extractor_by_ner" -> "gaohongkui/GlobalPointer_pytorch"
"StanleyLsx/entity_extractor_by_ner" -> "xiaofei05/Chinese-NER"
"StanleyLsx/entity_extractor_by_ner" -> "yongzhuo/Macadam"
"charles9n/bert-sklearn" -> "MenglinLu/Chinese-clinical-NER"
"charles9n/bert-sklearn" -> "trueto/transformers_sklearn"
"lrs1353281004/Chinese_medical_NLP" -> "GanjinZero/awesome_Chinese_medical_NLP"
"lrs1353281004/Chinese_medical_NLP" -> "alibaba-research/ChineseBLUE"
"lrs1353281004/Chinese_medical_NLP" -> "Toyhom/Chinese-medical-dialogue-data"
"lrs1353281004/Chinese_medical_NLP" -> "loujie0822/DeepIE"
"lrs1353281004/Chinese_medical_NLP" -> "CBLUEbenchmark/CBLUE"
"lrs1353281004/Chinese_medical_NLP" -> "zhihao-chen/QASystemOnMedicalGraph"
"lrs1353281004/Chinese_medical_NLP" -> "liuhuanyong/QASystemOnMedicalKG"
"lrs1353281004/Chinese_medical_NLP" -> "GanjinZero/ChineseEHRBert"
"lrs1353281004/Chinese_medical_NLP" -> "UCSD-AI4H/Medical-Dialogue-System"
"lrs1353281004/Chinese_medical_NLP" -> "zhangsheng93/cMedQA2"
"lrs1353281004/Chinese_medical_NLP" -> "z814081807/DeepNER"
"lrs1353281004/Chinese_medical_NLP" -> "lonePatient/BERT-NER-Pytorch"
"lrs1353281004/Chinese_medical_NLP" -> "BDBC-KG-NLP/QA-Survey"
"lrs1353281004/Chinese_medical_NLP" -> "TingFree/NLPer-Arsenal"
"lrs1353281004/Chinese_medical_NLP" -> "panchunguang/ccks_baidu_entity_link"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "pengshuang/AI-Comp"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "xueyouluo/fsauor2018"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "chenghuige/wenzheng"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "AIChallenger/AI_Challenger_2018"
"yilifzf/BDCI_Car_2018" -> "chenghuige/wenzheng"
"yilifzf/BDCI_Car_2018" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"nlpinaction/learning-nlp" -> "Roshanson/TextInfoExp"
"nlpinaction/learning-nlp" -> "duoergun0729/nlp"
"nlpinaction/learning-nlp" -> "jiangxinyang227/textClassifier"
"nlpinaction/learning-nlp" -> "Y1ran/NLP-BERT--ChineseVersion"
"nlpinaction/learning-nlp" -> "msgi/nlp-journey"
"nlpinaction/learning-nlp" -> "terrifyzhao/bert-utils"
"nlpinaction/learning-nlp" -> "macanv/BERT-BiLSTM-CRF-NER"
"nlpinaction/learning-nlp" -> "smilelight/lightNLP"
"nlpinaction/learning-nlp" -> "buppt/ChineseNER"
"nlpinaction/learning-nlp" -> "haiker2011/awesome-nlp-sentiment-analysis" ["e"=1]
"nlpinaction/learning-nlp" -> "SophonPlus/ChineseNlpCorpus"
"nlpinaction/learning-nlp" -> "JackKuo666/NLP_basis"
"nlpinaction/learning-nlp" -> "ProHiryu/bert-chinese-ner"
"nlpinaction/learning-nlp" -> "Determined22/zh-NER-TF"
"nlpinaction/learning-nlp" -> "zjy-ucas/ChineseNER"
"koth/kcws" -> "rockingdingo/deepnlp"
"koth/kcws" -> "zjy-ucas/ChineseNER"
"koth/kcws" -> "crownpku/Information-Extraction-Chinese"
"koth/kcws" -> "chilynn/sequence-labeling"
"koth/kcws" -> "baidu/Familia"
"koth/kcws" -> "glample/tagger"
"koth/kcws" -> "rockyzhengwu/FoolNLTK"
"koth/kcws" -> "HIT-SCIR/ltp"
"koth/kcws" -> "huyingxi/Synonyms"
"koth/kcws" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"koth/kcws" -> "memect/kg-beijing"
"koth/kcws" -> "guillaumegenthial/sequence_tagging"
"koth/kcws" -> "Determined22/zh-NER-TF"
"koth/kcws" -> "thunlp/THULAC-Python"
"koth/kcws" -> "faneshion/MatchZoo"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/MQTT"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/AliyunSendMail"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/AliyunRDS"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/DDMessageCallback"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/Kafka"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/WXAuthApi"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/WXAuthWeb"
"Menyoupingxiaoguo/MQTT" -> "Menyoupingxiaoguo/AliyunSendMail"
"jiayuzhou/MALSAR" -> "transbioZI/RMTL"
"jiayuzhou/MALSAR" -> "cciliber/matMTL"
"jiayuzhou/MALSAR" -> "chcorbi/MultiTaskLearning"
"baidu/information-extraction" -> "bojone/kg-2019-baseline"
"baidu/information-extraction" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"baidu/information-extraction" -> "bojone/kg-2019"
"baidu/information-extraction" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"baidu/information-extraction" -> "baidu/knowledge-driven-dialogue" ["e"=1]
"baidu/information-extraction" -> "yuanxiaosc/Entity-Relation-Extraction"
"baidu/information-extraction" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"baidu/information-extraction" -> "xiangrongzeng/copy_re" ["e"=1]
"baidu/information-extraction" -> "tticoin/LSTM-ER" ["e"=1]
"baidu/information-extraction" -> "baidu/DuReader" ["e"=1]
"baidu/information-extraction" -> "cdjasonj/CCF_IE"
"baidu/information-extraction" -> "crownpku/Information-Extraction-Chinese"
"baidu/information-extraction" -> "WindChimeRan/pytorch_multi_head_selection_re" ["e"=1]
"baidu/information-extraction" -> "thunlp/FewRel" ["e"=1]
"baidu/information-extraction" -> "zsctju/triplets-extraction" ["e"=1]
"heiheiyoyo/uie_pytorch" -> "universal-ie/UIE"
"heiheiyoyo/uie_pytorch" -> "taishan1994/pytorch_uie_ner"
"heiheiyoyo/uie_pytorch" -> "ljynlp/W2NER"
"heiheiyoyo/uie_pytorch" -> "xhw205/GPLinker_torch"
"heiheiyoyo/uie_pytorch" -> "gaohongkui/GlobalPointer_pytorch"
"heiheiyoyo/uie_pytorch" -> "taishan1994/PointerNet_Chinese_Information_Extraction"
"heiheiyoyo/uie_pytorch" -> "JunnYu/GPLinker_pytorch"
"heiheiyoyo/uie_pytorch" -> "KwangKa/SIMCSE_unsup"
"lemonhu/NER-BERT-pytorch" -> "circlePi/Bert_Chinese_Ner_pytorch"
"lemonhu/NER-BERT-pytorch" -> "kamalkraj/BERT-NER"
"lemonhu/NER-BERT-pytorch" -> "yanwii/ChinsesNER-pytorch"
"lemonhu/NER-BERT-pytorch" -> "weizhepei/BERT-NER"
"lemonhu/NER-BERT-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"lemonhu/NER-BERT-pytorch" -> "hemingkx/CLUENER2020"
"lemonhu/NER-BERT-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"lemonhu/NER-BERT-pytorch" -> "Kyubyong/bert_ner"
"lemonhu/NER-BERT-pytorch" -> "sberbank-ai/ner-bert"
"lemonhu/NER-BERT-pytorch" -> "CLUEbenchmark/CLUENER2020"
"lemonhu/NER-BERT-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"lemonhu/NER-BERT-pytorch" -> "panchunguang/ccks_baidu_entity_link"
"lemonhu/NER-BERT-pytorch" -> "WindChimeRan/pytorch_multi_head_selection_re" ["e"=1]
"lemonhu/NER-BERT-pytorch" -> "yumath/bertNER"
"lemonhu/NER-BERT-pytorch" -> "luopeixiang/named_entity_recognition"
"luanyi/DyGIE" -> "dwadden/dygiepp"
"luanyi/DyGIE" -> "princeton-nlp/PURE"
"luanyi/DyGIE" -> "markus-eberts/spert" ["e"=1]
"luanyi/DyGIE" -> "fenchri/edge-oriented-graph" ["e"=1]
"luanyi/DyGIE" -> "LorrinWWW/two-are-better-than-one"
"luanyi/DyGIE" -> "nusnlp/PtrNetDecoding4JERE" ["e"=1]
"luanyi/DyGIE" -> "thunlp/DocRED" ["e"=1]
"tim5go/zhopenie" -> "TJUNLP/COER"
"tim5go/zhopenie" -> "lemonhu/open-entity-relation-extraction"
"yhcc/BARTNER" -> "ljynlp/W2NER"
"yhcc/BARTNER" -> "daixiangau/acl2020-transition-discontinuous-ner"
"yhcc/BARTNER" -> "Akeepers/LEAR"
"yhcc/BARTNER" -> "juntaoy/biaffine-ner"
"yhcc/BARTNER" -> "foxlf823/sodner"
"yhcc/BARTNER" -> "Nealcly/templateNER" ["e"=1]
"yhcc/BARTNER" -> "neulab/SpanNER" ["e"=1]
"yhcc/BARTNER" -> "yhcc/BARTABSA" ["e"=1]
"enze5088/WenTianSearch" -> "muyuuuu/E-commerce-Search-Recall"
"enze5088/WenTianSearch" -> "zwkkk/wentian-rank2"
"AlexYangLi/TextClassification" -> "AlexYangLi/ALA"
"yongzhuo/Macropodus" -> "yongzhuo/nlg-yongzhuo"
"yongzhuo/Macropodus" -> "bojone/word-discovery"
"yongzhuo/Macropodus" -> "yongzhuo/Macadam"
"yongzhuo/Macropodus" -> "blmoistawinde/HarvestText"
"yongzhuo/Macropodus" -> "sunyilgdx/SIFRank_zh"
"yongzhuo/Macropodus" -> "smoothnlp/SmoothNLP"
"yongzhuo/Macropodus" -> "murray-z/text_analysis_tools"
"yongzhuo/Macropodus" -> "yongzhuo/Keras-TextClassification"
"yongzhuo/Macropodus" -> "yongzhuo/nlp_xiaojiang"
"yongzhuo/Macropodus" -> "dongrixinyu/chinese_keyphrase_extractor"
"yongzhuo/Macropodus" -> "ProHiryu/albert-chinese-ner"
"yongzhuo/Macropodus" -> "dongrixinyu/JioNLP"
"yongzhuo/Macropodus" -> "percent4/spo_extract_platform"
"yongzhuo/Macropodus" -> "ownthink/Jiagu"
"yongzhuo/Macropodus" -> "ZhuiyiTechnology/pretrained-models"
"kyzhouhzau/Clinical-NER" -> "2721485344/NERuselocal"
"kyzhouhzau/Clinical-NER" -> "TJUNLP/CCKScner"
"kyzhouhzau/Clinical-NER" -> "F-debug/Medical-named-entity-recognition"
"kyzhouhzau/Clinical-NER" -> "mechine-learning/NER-ccks2019-"
"thunlp/SCPapers" -> "thunlp/OpenHowNet"
"thunlp/SCPapers" -> "thunlp/sememe_prediction" ["e"=1]
"thunlp/SCPapers" -> "thunlp/SE-WRL" ["e"=1]
"thunlp/SCPapers" -> "thunlp/Sememe-SC"
"thunlp/SCPapers" -> "thunlp/SE-WRL-SAT" ["e"=1]
"thunlp/SCPapers" -> "thunlp/RCPapers" ["e"=1]
"thunlp/SCPapers" -> "thunlp/BabelNet-Sememe-Prediction"
"thunlp/SCPapers" -> "thunlp/NREPapers" ["e"=1]
"howl-anderson/tools_for_corpus_of_people_daily" -> "zhangyics/Chinese-abbreviation-dataset"
"howl-anderson/tools_for_corpus_of_people_daily" -> "AlanConstantine/PeoplesDailyNER"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/EventTriplesExtraction"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/TextGrapher"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/CausalityEventExtraction"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/ComplexEventExtraction" -> "xiaoqian19940510/Event-Extraction"
"liuhuanyong/ComplexEventExtraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/ComplexEventExtraction" -> "shijiebei2009/CEC-Corpus"
"liuhuanyong/ComplexEventExtraction" -> "carrie0307/DL_EventExtractionPapers"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/QASystemOnMedicalKG"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/QAonMilitaryKG"
"liuhuanyong/ComplexEventExtraction" -> "nlpcl-lab/bert-event-extraction"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/SequentialEventExtration"
"liuhuanyong/ComplexEventExtraction" -> "zhang17173/Event-Extraction"
"liuhuanyong/ComplexEventExtraction" -> "liuhuanyong/CCKS2018Summary"
"kyzhouhzau/NLPGNN" -> "GanjinZero/ChineseEHRBert"
"kyzhouhzau/NLPGNN" -> "qiufengyuyi/event_extraction"
"kyzhouhzau/NLPGNN" -> "kyzhouhzau/Clinical-NER"
"GanjinZero/ChineseEHRBert" -> "lxy444/bertcner"
"GanjinZero/ChineseEHRBert" -> "alibaba-research/ChineseBLUE"
"GanjinZero/ChineseEHRBert" -> "GanjinZero/awesome_Chinese_medical_NLP"
"GanjinZero/ChineseEHRBert" -> "MenglinLu/Chinese-clinical-NER"
"GanjinZero/ChineseEHRBert" -> "lrs1353281004/Chinese_medical_NLP"
"GanjinZero/ChineseEHRBert" -> "liutongyang/CMID"
"GanjinZero/ChineseEHRBert" -> "WENGSYX/Chinese-Word2vec-Medicine"
"GanjinZero/ChineseEHRBert" -> "yixiu00001/LSTM-CRF-medical"
"GanjinZero/ChineseEHRBert" -> "xtea/chinese_medical_words"
"GanjinZero/ChineseEHRBert" -> "Toyhom/Chinese-medical-dialogue-data"
"GanjinZero/ChineseEHRBert" -> "lingluodlut/Chinese-BioNLP"
"GanjinZero/ChineseEHRBert" -> "CBLUEbenchmark/CBLUE"
"GanjinZero/ChineseEHRBert" -> "MatNLP/SMedBERT"
"GanjinZero/ChineseEHRBert" -> "hy-struggle/ccks_ner" ["e"=1]
"JepsonWong/Text_Matching" -> "pengming617/text_matching"
"JepsonWong/Text_Matching" -> "terrifyzhao/text_matching"
"JepsonWong/Text_Matching" -> "cjymz886/sentence-similarity"
"JepsonWong/Text_Matching" -> "zhaogaofeng611/TextMatch"
"JepsonWong/Text_Matching" -> "BonnieHuangxin/Bert_sentence_similarity"
"JepsonWong/Text_Matching" -> "PengboLiu/Doc2Vec-Document-Similarity"
"JepsonWong/Text_Matching" -> "phychaos/TextSimilar"
"JepsonWong/Text_Matching" -> "pengshuang/Text-Similarity"
"JepsonWong/Text_Matching" -> "zzy99/epidemic-sentence-pair"
"JepsonWong/Text_Matching" -> "MachineLP/TextMatch"
"JepsonWong/Text_Matching" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "zzy99/epidemic-sentence-pair"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "ZhuiyiTechnology/simbert"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "liuhuanyong/SiameseSentenceSimilarity"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "yanqiangmiffy/sentence-similarity"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "CLUEbenchmark/CLUEPretrainedModels"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "zhaogaofeng611/TextMatch"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "jd-aig/nlp_baai"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "cjymz886/sentence-similarity"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "HandsomeCao/Bert-BiLSTM-CRF-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "PeijiYang/BERT-BiLSTM-CRF-NER-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "liu-nlper/SLTK"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "FuYanzhe2/Name-Entity-Recognition"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "yanwii/ChinsesNER-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "lemonhu/NER-BERT-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "yumath/bertNER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "kamalkraj/BERT-NER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "qiufengyuyi/sequence_tagging"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "z814081807/DeepNER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"cjymz886/sentence-similarity" -> "yanqiangmiffy/sentence-similarity"
"cjymz886/sentence-similarity" -> "PengboLiu/Doc2Vec-Document-Similarity"
"cjymz886/sentence-similarity" -> "JepsonWong/Text_Matching"
"cjymz886/sentence-similarity" -> "phychaos/TextSimilar"
"cjymz886/sentence-similarity" -> "liuhuanyong/SentenceSimilarity"
"cjymz886/sentence-similarity" -> "pengming617/text_matching"
"cjymz886/sentence-similarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"cjymz886/sentence-similarity" -> "MachineLP/TextMatch"
"cjymz886/sentence-similarity" -> "yongzhuo/nlp_xiaojiang"
"pen-ho/medical_knowledge_graph_app-master" -> "jiangnanboy/movie_knowledge_graph_app"
"pengshuang/Text-Similarity" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"pengshuang/Text-Similarity" -> "zhaogaofeng611/TextMatch"
"pengshuang/Text-Similarity" -> "pengming617/text_matching"
"pengshuang/Text-Similarity" -> "coetaur0/ESIM"
"pengshuang/Text-Similarity" -> "terrifyzhao/text_matching"
"pengshuang/Text-Similarity" -> "alibaba-edu/simple-effective-text-matching"
"pengshuang/Text-Similarity" -> "yanqiangmiffy/sentence-similarity"
"pengshuang/Text-Similarity" -> "lukecq1231/nli" ["e"=1]
"pengshuang/Text-Similarity" -> "JianWenJun/MLDemo"
"pengshuang/Text-Similarity" -> "DataTerminatorX/Keyword-BERT"
"pengshuang/Text-Similarity" -> "NTMC-Community/MatchZoo-py"
"pengshuang/Text-Similarity" -> "qiangsiwei/bert_distill"
"pengshuang/Text-Similarity" -> "ziweipolaris/atec2018-nlp"
"pengshuang/Text-Similarity" -> "IAdmireu/ChineseSTS"
"pengshuang/Text-Similarity" -> "NTMC-Community/MatchZoo"
"zhangsheng93/cMedQA2" -> "zhangsheng93/cMedQA"
"zhangsheng93/cMedQA2" -> "Toyhom/Chinese-medical-dialogue-data"
"zhangsheng93/cMedQA2" -> "hejunqing/webMedQA"
"zhangsheng93/cMedQA2" -> "UCSD-AI4H/Medical-Dialogue-System"
"zhangsheng93/cMedQA2" -> "alibaba-research/ChineseBLUE"
"zhangsheng93/cMedQA2" -> "lrs1353281004/Chinese_medical_NLP"
"zhangsheng93/cMedQA2" -> "liutongyang/CMID"
"zhangsheng93/cMedQA2" -> "wjjingtian/cMQA"
"zhaogaofeng611/TextMatch" -> "pengshuang/Text-Similarity"
"zhaogaofeng611/TextMatch" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"zhaogaofeng611/TextMatch" -> "MachineLP/TextMatch"
"zhaogaofeng611/TextMatch" -> "terrifyzhao/text_matching"
"zhaogaofeng611/TextMatch" -> "pengming617/text_matching"
"zhaogaofeng611/TextMatch" -> "rsanshierli/EasyBert"
"zhaogaofeng611/TextMatch" -> "lonePatient/BERT-NER-Pytorch"
"zhaogaofeng611/TextMatch" -> "ZhuiyiTechnology/simbert"
"zhaogaofeng611/TextMatch" -> "yongzhuo/nlp_xiaojiang"
"zhaogaofeng611/TextMatch" -> "zzy99/epidemic-sentence-pair"
"zhaogaofeng611/TextMatch" -> "pengming617/bert_textMatching"
"zhaogaofeng611/TextMatch" -> "wangle1218/deep_text_matching"
"zhaogaofeng611/TextMatch" -> "WenRichard/KBQA-BERT"
"zhaogaofeng611/TextMatch" -> "alibaba-edu/simple-effective-text-matching"
"zhaogaofeng611/TextMatch" -> "Brokenwind/BertSimilarity"
"JackKuo666/NLP_basis" -> "sujeek/chinese_nlp"
"JackKuo666/NLP_basis" -> "duoergun0729/nlp"
"JackKuo666/NLP_basis" -> "nlpdz/Medical-Named-Entity-Rec-Based-on-Dilated-CNN"
"JackKuo666/NLP_basis" -> "lpty/nlp_base"
"JackKuo666/NLP_basis" -> "nlpinaction/learning-nlp"
"JackKuo666/NLP_basis" -> "smilelight/lightNLP"
"JackKuo666/NLP_basis" -> "learning511/cs224n-learning-camp" ["e"=1]
"JackKuo666/NLP_basis" -> "zhpmatrix/nlp-competitions-list-review"
"JackKuo666/NLP_basis" -> "Dod-o/NLP-practice-program"
"JackKuo666/NLP_basis" -> "yongzhuo/nlp_xiaojiang"
"Nealcly/BiLSTM-LAN" -> "DianboWork/Graph4CNER"
"Nealcly/BiLSTM-LAN" -> "CPF-NLPR/AT4ChineseNER"
"Nealcly/BiLSTM-LAN" -> "allanj/ner_with_dependency"
"Nealcly/BiLSTM-LAN" -> "lingluodlut/Att-ChemdNER" ["e"=1]
"Nealcly/BiLSTM-LAN" -> "fastnlp/TENER"
"Nealcly/BiLSTM-LAN" -> "v-mipeng/LexiconAugmentedNER"
"panyang/AINLP-Resource" -> "zhuyuanxiang/NLTK-Python-CN"
"sujeek/chinese_nlp" -> "JackKuo666/NLP_basis"
"sujeek/chinese_nlp" -> "MaiYunfei2000/IA003CoCoSci" ["e"=1]
"sujeek/chinese_nlp" -> "smilelight/lightNLP"
"yuchenlin/OntoNotes-5.0-NER-BIO" -> "yhcc/OntoNotes-5.0-NER"
"yuchenlin/OntoNotes-5.0-NER-BIO" -> "ontonotes/conll-formatted-ontonotes-5.0" ["e"=1]
"yuchenlin/OntoNotes-5.0-NER-BIO" -> "allanj/pytorch_lstmcrf"
"zeitiempo/ECSD" -> "rainarch/SentiBridge"
"zhuyuanxiang/NLTK-Python-CN" -> "panyang/AINLP-Resource"
"FudanNLP/fnlp" -> "fastnlp/fastNLP"
"FudanNLP/fnlp" -> "HIT-SCIR/ltp"
"FudanNLP/fnlp" -> "HIT-SCIR/pyltp"
"FudanNLP/fnlp" -> "NLPIR-team/NLPIR"
"FudanNLP/fnlp" -> "hankcs/pyhanlp"
"FudanNLP/fnlp" -> "NLPchina/ansj_seg"
"FudanNLP/fnlp" -> "thunlp/THULAC-Python"
"FudanNLP/fnlp" -> "crownpku/Awesome-Chinese-NLP"
"FudanNLP/fnlp" -> "huyingxi/Synonyms"
"FudanNLP/fnlp" -> "isnowfy/snownlp"
"FudanNLP/fnlp" -> "baidu/Familia"
"FudanNLP/fnlp" -> "crownpku/Information-Extraction-Chinese"
"FudanNLP/fnlp" -> "rockingdingo/deepnlp"
"FudanNLP/fnlp" -> "zjy-ucas/ChineseNER"
"FudanNLP/fnlp" -> "letiantian/TextRank4ZH"
"sing1ee/analyzer-solr" -> "sing1ee/jieba-solr"
"fighting41love/hardNLU" -> "guotong1988/chinese_dictionary"
"qiufengyuyi/event_extraction" -> "qiufengyuyi/sequence_tagging"
"qiufengyuyi/event_extraction" -> "bojone/lic2020_baselines"
"qiufengyuyi/event_extraction" -> "lx865712528/EMNLP2018-JMEE"
"qiufengyuyi/event_extraction" -> "xinyadu/doc_event_role"
"qiufengyuyi/event_extraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"qiufengyuyi/event_extraction" -> "xinyadu/eeqa"
"qiufengyuyi/event_extraction" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"qiufengyuyi/event_extraction" -> "hecongqing/CCKS2019_EventEntityExtraction_Rank5"
"qiufengyuyi/event_extraction" -> "lx865712528/ACL2019-ODEE"
"qiufengyuyi/event_extraction" -> "xiaoqian19940510/Event-Extraction"
"qiufengyuyi/event_extraction" -> "dolphin-zs/Doc2EDAG"
"qiufengyuyi/event_extraction" -> "carrie0307/DL_EventExtractionPapers"
"qiufengyuyi/event_extraction" -> "xiaoqian19940510/CCKS-2020-event-extraction"
"qiufengyuyi/event_extraction" -> "carrie0307/baidu-ee2020"
"qiufengyuyi/event_extraction" -> "nlpcl-lab/bert-event-extraction"
"tsroten/pynlpir" -> "thunlp/THULAC-Python"
"tsroten/pynlpir" -> "HIT-SCIR/pyltp"
"tsroten/pynlpir" -> "NLPIR-team/NLPIR"
"tsroten/pynlpir" -> "haobibo/ICTCLAS_Python_Wrapper"
"tsroten/pynlpir" -> "isnowfy/snownlp"
"tsroten/pynlpir" -> "duanhongyi/genius"
"tsroten/pynlpir" -> "thunlp/THULAC"
"tsroten/pynlpir" -> "xpqiu/fnlp"
"tsroten/pynlpir" -> "HIT-SCIR/ltp"
"tsroten/pynlpir" -> "tsroten/zhon" ["e"=1]
"tsroten/pynlpir" -> "koth/kcws"
"tsroten/pynlpir" -> "thunlp/NRE" ["e"=1]
"tsroten/pynlpir" -> "FudanNLP/NLPCC-WordSeg-Weibo"
"tsroten/pynlpir" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"tsroten/pynlpir" -> "hankcs/pyhanlp"
"xiaoqian19940510/Event-Extraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"xiaoqian19940510/Event-Extraction" -> "carrie0307/DL_EventExtractionPapers"
"xiaoqian19940510/Event-Extraction" -> "nlpcl-lab/bert-event-extraction"
"xiaoqian19940510/Event-Extraction" -> "BaptisteBlouin/EventExtractionPapers"
"xiaoqian19940510/Event-Extraction" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"xiaoqian19940510/Event-Extraction" -> "dolphin-zs/Doc2EDAG"
"xiaoqian19940510/Event-Extraction" -> "qiufengyuyi/event_extraction"
"xiaoqian19940510/Event-Extraction" -> "liuhuanyong/EventTriplesExtraction"
"xiaoqian19940510/Event-Extraction" -> "liuhuanyong/ComplexEventExtraction"
"xiaoqian19940510/Event-Extraction" -> "nlpcl-lab/ace2005-preprocessing"
"xiaoqian19940510/Event-Extraction" -> "xinyadu/eeqa"
"xiaoqian19940510/Event-Extraction" -> "zhang17173/Event-Extraction"
"xiaoqian19940510/Event-Extraction" -> "loujie0822/DeepIE"
"xiaoqian19940510/Event-Extraction" -> "luyaojie/Text2Event"
"xiaoqian19940510/Event-Extraction" -> "lx865712528/EMNLP2018-JMEE"
"fastnlp/fastHan" -> "fastnlp/fastNLP"
"fastnlp/fastHan" -> "fastnlp/CPT"
"fastnlp/fastHan" -> "loujie0822/DeepIE"
"fastnlp/fastHan" -> "didi/ChineseNLP"
"fastnlp/fastHan" -> "ZhuiyiTechnology/pretrained-models"
"fastnlp/fastHan" -> "baidu/DDParser"
"fastnlp/fastHan" -> "liuhuanyong/ChineseSemanticKB"
"fastnlp/fastHan" -> "sunyilgdx/SIFRank_zh"
"fastnlp/fastHan" -> "airaria/TextBrewer"
"fastnlp/fastHan" -> "deepwel/Chinese-Annotator"
"fastnlp/fastHan" -> "CLUEbenchmark/CLUENER2020"
"fastnlp/fastHan" -> "dbiir/UER-py"
"fastnlp/fastHan" -> "autoliuweijie/FastBERT"
"fastnlp/fastHan" -> "lonePatient/BERT-NER-Pytorch"
"fastnlp/fastHan" -> "fastnlp/TENER"
"akebe/address-parse" -> "ldwonday/zh-address-parse"
"akebe/address-parse" -> "wzc570738205/smartParsePro"
"akebe/address-parse" -> "wzc570738205/smart_parse"
"akebe/address-parse" -> "pupuk/address-smart-parse"
"akebe/address-parse" -> "pupuk/address"
"akebe/address-parse" -> "akebe/element-address"
"ldwonday/zh-address-parse" -> "akebe/address-parse"
"ldwonday/zh-address-parse" -> "wzc570738205/smartParsePro"
"ldwonday/zh-address-parse" -> "pupuk/address"
"ldwonday/zh-address-parse" -> "wzc570738205/smart_parse"
"ldwonday/zh-address-parse" -> "pupuk/address-smart-parse"
"ldwonday/zh-address-parse" -> "pupuk/addr"
"chakki-works/seqeval" -> "juand-r/entity-recognition-datasets"
"chakki-works/seqeval" -> "kamalkraj/BERT-NER"
"chakki-works/seqeval" -> "jiesutd/NCRFpp"
"chakki-works/seqeval" -> "ShannonAI/mrc-for-flat-nested-ner"
"chakki-works/seqeval" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"chakki-works/seqeval" -> "kmkurn/pytorch-crf"
"chakki-works/seqeval" -> "sighsmile/conlleval"
"chakki-works/seqeval" -> "Hironsan/anago"
"chakki-works/seqeval" -> "lonePatient/albert_pytorch"
"chakki-works/seqeval" -> "ZihanWangKi/CrossWeigh"
"chakki-works/seqeval" -> "makcedward/nlpaug" ["e"=1]
"chakki-works/seqeval" -> "loujie0822/DeepIE"
"chakki-works/seqeval" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"chakki-works/seqeval" -> "facebookresearch/SentEval" ["e"=1]
"chakki-works/seqeval" -> "davidsbatista/NER-Evaluation"
"jiesutd/YEDDA" -> "deepwel/Chinese-Annotator"
"jiesutd/YEDDA" -> "nlplab/brat"
"jiesutd/YEDDA" -> "jiesutd/LatticeLSTM"
"jiesutd/YEDDA" -> "synyi/poplar"
"jiesutd/YEDDA" -> "zjy-ucas/ChineseNER"
"jiesutd/YEDDA" -> "shiyybua/NER"
"jiesutd/YEDDA" -> "chakki-works/doccano" ["e"=1]
"jiesutd/YEDDA" -> "Determined22/zh-NER-TF"
"jiesutd/YEDDA" -> "crownpku/Information-Extraction-Chinese"
"jiesutd/YEDDA" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/YEDDA" -> "jiesutd/NCRFpp"
"jiesutd/YEDDA" -> "ProHiryu/bert-chinese-ner"
"jiesutd/YEDDA" -> "FXLP/MarkTool"
"jiesutd/YEDDA" -> "buppt/ChineseNER"
"jiesutd/YEDDA" -> "thunlp/OpenNRE"
"hecongqing/2018-daguan-competition" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"hecongqing/2018-daguan-competition" -> "moneyDboat/data_grand"
"hecongqing/2018-daguan-competition" -> "yuquanle/2018-daguan-competition-rank4"
"hecongqing/2018-daguan-competition" -> "nlpjoe/daguan-classify-2018"
"hecongqing/2018-daguan-competition" -> "MLjian/TextClassificationImplement"
"hecongqing/2018-daguan-competition" -> "Rowchen/Text-classifier"
"hecongqing/2018-daguan-competition" -> "nzc/tencent-contest" ["e"=1]
"leekeiling/Cluster" -> "Shi-Lixin/Machine-Learning-Algorithms"
"leekeiling/Cluster" -> "wrayzheng/gmm-em-clustering"
"mattzheng/DouBanRecommend" -> "mattzheng/Agriculture_KnowledgeGraph"
"mattzheng/DouBanRecommend" -> "Randool/pyRecommender" ["e"=1]
"mattzheng/DouBanRecommend" -> "Light-City/PyToNeo4J"
"mattzheng/DouBanRecommend" -> "vivianLL/QASystemOnHepatopathyKG"
"mattzheng/DouBanRecommend" -> "AdiaLoveTrance/MedicalInsuranceKG"
"mattzheng/DouBanRecommend" -> "codeants2012/FinancialKnowledgeGraph"
"mattzheng/DouBanRecommend" -> "lemonhu/stock-knowledge-graph"
"mattzheng/DouBanRecommend" -> "kangzhun/KnowledgeGraph-QA-Service"
"mattzheng/DouBanRecommend" -> "hwwang55/MKR" ["e"=1]
"mattzheng/DouBanRecommend" -> "Skyellbin/neo4j-python-pandas-py2neo-v3"
"mattzheng/DouBanRecommend" -> "lixiang0/WEB_KG"
"ashengtx/CilinSimilarity" -> "BiLiangLtd/WordSimilarity"
"ashengtx/CilinSimilarity" -> "yaleimeng/Final_word_Similarity"
"yaleimeng/Final_word_Similarity" -> "BiLiangLtd/WordSimilarity"
"yaleimeng/Final_word_Similarity" -> "thunlp/OpenHowNet"
"yaleimeng/Final_word_Similarity" -> "ashengtx/CilinSimilarity"
"yaleimeng/Final_word_Similarity" -> "guotong1988/chinese_dictionary"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/SentenceSimilarity"
"yaleimeng/Final_word_Similarity" -> "huyingxi/Synonyms"
"yaleimeng/Final_word_Similarity" -> "Keson96/SynoCN"
"yaleimeng/Final_word_Similarity" -> "chatopera/Synonyms"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/EventTriplesExtraction"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/ChineseSemanticKB"
"yaleimeng/Final_word_Similarity" -> "thunlp/SE-WRL" ["e"=1]
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/ChineseEmbedding"
"yaleimeng/Final_word_Similarity" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yaleimeng/Final_word_Similarity" -> "taozhijiang/chinese_correct_wsd" ["e"=1]
"yaleimeng/Final_word_Similarity" -> "yongzhuo/nlp_xiaojiang"
"chaoming0625/WaiMaiOpinionMiner" -> "chaoming0625/FineGrainedOpinionMining"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "linhaow/TextClassify"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhanlaoban/Transformers_for_Text_Classification"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zzy99/epidemic-sentence-pair"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "finlay-liu/kaggle_public"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "rebornZH/2019-CCF-BDCI-NLP"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "xv44586/ccf_2020_qa_match"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "z814081807/DeepNER"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "xiong666/ccf_financial_negative"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "guoday/Tencent2020_Rank1st" ["e"=1]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "jeffery0628/text_classification"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "brightmart/roberta_zh"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhpmatrix/nlp-competitions-list-review"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhaogaofeng611/TextMatch"
"zhanlaoban/CCF_BDCI_2019_datafountain350" -> "zhanlaoban/NLP_competitions"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "NLPScott/bert-Chinese-classification-task"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "Y1ran/NLP-BERT--ChineseVersion"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "ProHiryu/bert-chinese-ner"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "jiangxinyang227/textClassifier"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "terrifyzhao/bert-utils"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "brightmart/roberta_zh"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "brightmart/albert_zh"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "Jiakui/awesome-bert"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "zhpmatrix/nlp-competitions-list-review"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "macanv/BERT-BiLSTM-CRF-NER"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "ymcui/Chinese-PreTrained-XLNet"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "yuanxiaosc/Entity-Relation-Extraction"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "xmxoxo/BERT-train2deploy"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "baidu/information-extraction"
"chenyuntc/PyTorchText" -> "Magic-Bubble/Zhihu"
"chenyuntc/PyTorchText" -> "yongyehuang/zhihu-text-classification"
"chenyuntc/PyTorchText" -> "HouJP/kaggle-quora-question-pairs" ["e"=1]
"chenyuntc/PyTorchText" -> "brightmart/text_classification" ["e"=1]
"chenyuntc/PyTorchText" -> "chenghuige/wenzheng"
"chenyuntc/PyTorchText" -> "PaddlePaddle/LARK"
"chenyuntc/PyTorchText" -> "faneshion/MatchZoo"
"chenyuntc/PyTorchText" -> "richliao/textClassifier" ["e"=1]
"chenyuntc/PyTorchText" -> "brightmart/bert_language_understanding"
"chenyuntc/PyTorchText" -> "zhpmatrix/nlp-competitions-list-review"
"chenyuntc/PyTorchText" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"chenyuntc/PyTorchText" -> "YouChouNoBB/ijcai-18-top2-single-mole-solution" ["e"=1]
"chenyuntc/PyTorchText" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"chenyuntc/PyTorchText" -> "ymcui/Chinese-PreTrained-XLNet"
"chenyuntc/PyTorchText" -> "wabyking/TextClassificationBenchmark" ["e"=1]
"terrifyzhao/bert-utils" -> "yongzhuo/nlp_xiaojiang"
"terrifyzhao/bert-utils" -> "WenRichard/KBQA-BERT"
"terrifyzhao/bert-utils" -> "macanv/BERT-BiLSTM-CRF-NER"
"terrifyzhao/bert-utils" -> "NLPScott/bert-Chinese-classification-task"
"terrifyzhao/bert-utils" -> "brightmart/albert_zh"
"terrifyzhao/bert-utils" -> "terrifyzhao/text_matching"
"terrifyzhao/bert-utils" -> "ymcui/Chinese-BERT-wwm"
"terrifyzhao/bert-utils" -> "yongzhuo/Keras-TextClassification"
"terrifyzhao/bert-utils" -> "brightmart/roberta_zh"
"terrifyzhao/bert-utils" -> "ProHiryu/bert-chinese-ner"
"terrifyzhao/bert-utils" -> "NTMC-Community/MatchZoo"
"terrifyzhao/bert-utils" -> "jiangxinyang227/textClassifier"
"terrifyzhao/bert-utils" -> "ownthink/Jiagu"
"terrifyzhao/bert-utils" -> "bojone/bert4keras"
"terrifyzhao/bert-utils" -> "CyberZHG/keras-bert"
"sohucampus2019/coreEntityEmotion_baseline" -> "ouwenjie03/sohucampus2019"
"sohucampus2019/coreEntityEmotion_baseline" -> "Fengfeng1024/SOHU-baseline"
"sohucampus2019/coreEntityEmotion_baseline" -> "lmhgithi/SOHU-baseline"
"WenRichard/KBQA-BERT" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"WenRichard/KBQA-BERT" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"WenRichard/KBQA-BERT" -> "zhihao-chen/QASystemOnMedicalGraph"
"WenRichard/KBQA-BERT" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"WenRichard/KBQA-BERT" -> "wavewangyue/kbqa" ["e"=1]
"WenRichard/KBQA-BERT" -> "terrifyzhao/bert-utils"
"WenRichard/KBQA-BERT" -> "BDBC-KG-NLP/QA-Survey"
"WenRichard/KBQA-BERT" -> "liuhuanyong/QASystemOnMedicalKG"
"WenRichard/KBQA-BERT" -> "lihanghang/NLP-Knowledge-Graph"
"WenRichard/KBQA-BERT" -> "panchunguang/ccks_baidu_entity_link"
"WenRichard/KBQA-BERT" -> "SimmerChan/KG-demo-for-movie"
"WenRichard/KBQA-BERT" -> "YeYzheng/KGQA-Based-On-medicine"
"WenRichard/KBQA-BERT" -> "charlesXu86/Chatbot_CN"
"WenRichard/KBQA-BERT" -> "smilelight/lightKG"
"WenRichard/KBQA-BERT" -> "macanv/BERT-BiLSTM-CRF-NER"
"xhw205/GPLinker_torch" -> "JunnYu/GPLinker_pytorch"
"xhw205/GPLinker_torch" -> "xhw205/Efficient-GlobalPointer-torch"
"xhw205/GPLinker_torch" -> "gaohongkui/GlobalPointer_pytorch"
"xhw205/GPLinker_torch" -> "bojone/GPLinker"
"xhw205/GPLinker_torch" -> "powerycy/DeepKg"
"xhw205/GPLinker_torch" -> "taishan1994/pytorch_triple_extraction"
"xhw205/GPLinker_torch" -> "xhw205/GlobalPointer_torch"
"xhw205/GPLinker_torch" -> "gaohongkui/TPLinker-NER"
"xhw205/GPLinker_torch" -> "Onion12138/CasRelPyTorch"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "chenghuige/wenzheng"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "pengshuang/AI-Comp"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "xueyouluo/fsauor2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "wxue004cs/GCAE" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "foamliu/Sentiment-Analysis"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "yilirin/BDCI_Car_2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "brightmart/sentiment_analysis_fine_grain"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "AIChallenger/AI_Challenger_2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "YZHANG1270/Aspect-Based-Sentiment-Analysis" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "zhanzecheng/SOHU_competition"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "jimmyyfeng/TD-LSTM" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "chaoming0625/WaiMaiOpinionMiner"
"bojone/kg-2019-baseline" -> "baidu/information-extraction"
"bojone/kg-2019-baseline" -> "zhengyima/kg-baseline-pytorch"
"bojone/kg-2019-baseline" -> "bojone/kg-2019"
"bojone/kg-2019-baseline" -> "bojone/el-2019-baseline"
"bojone/kg-2019-baseline" -> "bojone/ee-2019-baseline"
"bojone/kg-2019-baseline" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"bojone/kg-2019-baseline" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"megemini/-_megemini-" -> "dimtxw/RJYY"
"xueyouluo/fsauor2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"xueyouluo/fsauor2018" -> "chenghuige/wenzheng"
"xueyouluo/fsauor2018" -> "pengshuang/AI-Comp"
"xueyouluo/fsauor2018" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"xueyouluo/fsauor2018" -> "yilirin/BDCI_Car_2018"
"xueyouluo/fsauor2018" -> "lixinsu/RCZoo" ["e"=1]
"Ricardokevins/Kevinpro-NLP-demo" -> "Ricardokevins/Bert-In-Relation-Extraction"
"Ricardokevins/Kevinpro-NLP-demo" -> "xhw205/GPLinker_torch"
"Ricardokevins/Kevinpro-NLP-demo" -> "zhoujx4/NLP-Series-relation-extraction"
"Ricardokevins/Kevinpro-NLP-demo" -> "Jacen789/relation-extraction"
"coetaur0/ESIM" -> "lukecq1231/nli" ["e"=1]
"coetaur0/ESIM" -> "pengshuang/Text-Similarity"
"coetaur0/ESIM" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"coetaur0/ESIM" -> "nyu-mll/multiNLI" ["e"=1]
"coetaur0/ESIM" -> "HsiaoYetGun/ESIM" ["e"=1]
"coetaur0/ESIM" -> "pengming617/text_matching"
"coetaur0/ESIM" -> "lanwuwei/SPM_toolkit" ["e"=1]
"coetaur0/ESIM" -> "zhaogaofeng611/TextMatch"
"coetaur0/ESIM" -> "alibaba/esim-response-selection"
"coetaur0/ESIM" -> "cooelf/SemBERT" ["e"=1]
"coetaur0/ESIM" -> "YichenGong/Densely-Interactive-Inference-Network" ["e"=1]
"coetaur0/ESIM" -> "NTMC-Community/MatchZoo-py"
"coetaur0/ESIM" -> "BangLiu/ArticlePairMatching"
"Rowchen/Text-classifier" -> "moneyDboat/data_grand"
"Rowchen/Text-classifier" -> "nlpjoe/daguan-classify-2018"
"Rowchen/Text-classifier" -> "JonneryR/2019.1-TianChi-Jinnan"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hecongqing/2018-daguan-competition"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "moneyDboat/data_grand"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "nlpjoe/daguan-classify-2018"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hu-qi/hu-qi.github.io" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hu-qi/myAwesome" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "MaiJiantian/blockchain-kotlin" ["e"=1]
"kmkurn/pytorch-crf" -> "threelittlemonkeys/lstm-crf-pytorch"
"kmkurn/pytorch-crf" -> "s14t284/TorchCRF"
"kmkurn/pytorch-crf" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"kmkurn/pytorch-crf" -> "jiesutd/NCRFpp"
"kmkurn/pytorch-crf" -> "lonePatient/BERT-NER-Pytorch"
"kmkurn/pytorch-crf" -> "lonePatient/albert_pytorch"
"kmkurn/pytorch-crf" -> "chakki-works/seqeval"
"kmkurn/pytorch-crf" -> "ZhixiuYe/HSCRF-pytorch"
"kmkurn/pytorch-crf" -> "ShannonAI/mrc-for-flat-nested-ner"
"kmkurn/pytorch-crf" -> "MarvinTeichmann/ConvCRF" ["e"=1]
"kmkurn/pytorch-crf" -> "Nealcly/BiLSTM-LAN"
"kmkurn/pytorch-crf" -> "ZhixiuYe/NER-pytorch"
"kmkurn/pytorch-crf" -> "jiesutd/LatticeLSTM"
"kmkurn/pytorch-crf" -> "CLUEbenchmark/CLUENER2020"
"kmkurn/pytorch-crf" -> "panchunguang/ccks_baidu_entity_link"
"moneyDboat/data_grand" -> "nlpjoe/daguan-classify-2018"
"moneyDboat/data_grand" -> "Rowchen/Text-classifier"
"moneyDboat/data_grand" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"moneyDboat/data_grand" -> "hecongqing/2018-daguan-competition"
"moneyDboat/data_grand" -> "MLjian/TextClassificationImplement"
"moneyDboat/data_grand" -> "yanqiangmiffy/daguan"
"moneyDboat/data_grand" -> "Magic-Bubble/Zhihu"
"moneyDboat/data_grand" -> "hecongqing/2018-daguan-conpetition"
"Coopercoppers/PFN" -> "thunlp/PL-Marker"
"Coopercoppers/PFN" -> "DianboWork/SPN4RE"
"Coopercoppers/PFN" -> "Receiling/UniRE"
"Coopercoppers/PFN" -> "hy-struggle/PRGC"
"Coopercoppers/PFN" -> "ssnvxia/OneRel"
"Coopercoppers/PFN" -> "neukg/GRTE"
"Coopercoppers/PFN" -> "LorrinWWW/two-are-better-than-one"
"Coopercoppers/PFN" -> "princeton-nlp/PURE"
"LorrinWWW/two-are-better-than-one" -> "DianboWork/SPN4RE"
"LorrinWWW/two-are-better-than-one" -> "Coopercoppers/PFN"
"LorrinWWW/two-are-better-than-one" -> "DreamInvoker/GAIN" ["e"=1]
"LorrinWWW/two-are-better-than-one" -> "wzhouad/ATLOP" ["e"=1]
"LorrinWWW/two-are-better-than-one" -> "luanyi/DyGIE"
"LorrinWWW/two-are-better-than-one" -> "princeton-nlp/PURE"
"LorrinWWW/two-are-better-than-one" -> "weizhepei/CasRel"
"LorrinWWW/two-are-better-than-one" -> "markus-eberts/spert" ["e"=1]
"LorrinWWW/two-are-better-than-one" -> "Receiling/UniRE"
"LorrinWWW/two-are-better-than-one" -> "juntaoy/biaffine-ner"
"LorrinWWW/two-are-better-than-one" -> "thunlp/PL-Marker"
"LorrinWWW/two-are-better-than-one" -> "lavis-nlp/spert"
"ShannonAI/mrc-for-flat-nested-ner" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/mrc-for-flat-nested-ner" -> "loujie0822/DeepIE"
"ShannonAI/mrc-for-flat-nested-ner" -> "juntaoy/biaffine-ner"
"ShannonAI/mrc-for-flat-nested-ner" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/mrc-for-flat-nested-ner" -> "qiufengyuyi/sequence_tagging"
"ShannonAI/mrc-for-flat-nested-ner" -> "lonePatient/BERT-NER-Pytorch"
"ShannonAI/mrc-for-flat-nested-ner" -> "ShannonAI/dice_loss_for_NLP"
"ShannonAI/mrc-for-flat-nested-ner" -> "z814081807/DeepNER"
"ShannonAI/mrc-for-flat-nested-ner" -> "ljynlp/W2NER"
"ShannonAI/mrc-for-flat-nested-ner" -> "CLUEbenchmark/CLUENER2020"
"ShannonAI/mrc-for-flat-nested-ner" -> "jiesutd/LatticeLSTM"
"ShannonAI/mrc-for-flat-nested-ner" -> "fastnlp/TENER"
"ShannonAI/mrc-for-flat-nested-ner" -> "princeton-nlp/PURE"
"ShannonAI/mrc-for-flat-nested-ner" -> "weizhepei/CasRel"
"ShannonAI/mrc-for-flat-nested-ner" -> "universal-ie/UIE"
"ZhixiuYe/HSCRF-pytorch" -> "ZhixiuYe/NER-pytorch"
"ZhixiuYe/HSCRF-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"ZhixiuYe/HSCRF-pytorch" -> "liu-nlper/SLTK"
"ZhixiuYe/HSCRF-pytorch" -> "rainarch/DSNER"
"ZhixiuYe/HSCRF-pytorch" -> "CPF-NLPR/AT4ChineseNER"
"ZhixiuYe/HSCRF-pytorch" -> "shangjingbo1226/AutoNER"
"ZhixiuYe/HSCRF-pytorch" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"ZhixiuYe/HSCRF-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"ZhixiuYe/HSCRF-pytorch" -> "jiesutd/NCRFpp"
"autoliuweijie/K-BERT" -> "autoliuweijie/FastBERT"
"autoliuweijie/K-BERT" -> "dbiir/UER-py"
"autoliuweijie/K-BERT" -> "yao8839836/kg-bert" ["e"=1]
"autoliuweijie/K-BERT" -> "thunlp/ERNIE"
"autoliuweijie/K-BERT" -> "LeeSureman/Flat-Lattice-Transformer"
"autoliuweijie/K-BERT" -> "brightmart/roberta_zh"
"autoliuweijie/K-BERT" -> "loujie0822/DeepIE"
"autoliuweijie/K-BERT" -> "ZhuiyiTechnology/simbert"
"autoliuweijie/K-BERT" -> "WenRichard/KBQA-BERT"
"autoliuweijie/K-BERT" -> "brightmart/albert_zh"
"autoliuweijie/K-BERT" -> "huawei-noah/Pretrained-Language-Model"
"autoliuweijie/K-BERT" -> "bohanli/BERT-flow"
"autoliuweijie/K-BERT" -> "ZhuiyiTechnology/pretrained-models"
"autoliuweijie/K-BERT" -> "malllabiisc/EmbedKGQA" ["e"=1]
"autoliuweijie/K-BERT" -> "nghuyong/ERNIE-Pytorch"
"ljynlp/W2NER" -> "gaohongkui/GlobalPointer_pytorch"
"ljynlp/W2NER" -> "yhcc/BARTNER"
"ljynlp/W2NER" -> "LeeSureman/Flat-Lattice-Transformer"
"ljynlp/W2NER" -> "ShannonAI/mrc-for-flat-nested-ner"
"ljynlp/W2NER" -> "liuwei1206/LEBERT"
"ljynlp/W2NER" -> "universal-ie/UIE"
"ljynlp/W2NER" -> "princeton-nlp/PURE"
"ljynlp/W2NER" -> "thunlp/PL-Marker"
"ljynlp/W2NER" -> "powerycy/DeepKg"
"ljynlp/W2NER" -> "taishan1994/awesome-chinese-ner"
"ljynlp/W2NER" -> "xhw205/Efficient-GlobalPointer-torch"
"ljynlp/W2NER" -> "tricktreat/locate-and-label"
"ljynlp/W2NER" -> "lonePatient/BERT-NER-Pytorch"
"ljynlp/W2NER" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"ljynlp/W2NER" -> "ShannonAI/dice_loss_for_NLP"
"weizhepei/CasRel" -> "longlongman/CasRel-pytorch-reimplement"
"weizhepei/CasRel" -> "131250208/TPlinker-joint-extraction"
"weizhepei/CasRel" -> "loujie0822/DeepIE"
"weizhepei/CasRel" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"weizhepei/CasRel" -> "yuanxiaosc/Entity-Relation-Extraction"
"weizhepei/CasRel" -> "Onion12138/CasRelPyTorch"
"weizhepei/CasRel" -> "bojone/kg-2019"
"weizhepei/CasRel" -> "princeton-nlp/PURE"
"weizhepei/CasRel" -> "yubowen-ph/JointER" ["e"=1]
"weizhepei/CasRel" -> "zhengyima/kg-baseline-pytorch"
"weizhepei/CasRel" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"weizhepei/CasRel" -> "ShannonAI/mrc-for-flat-nested-ner"
"weizhepei/CasRel" -> "DianboWork/SPN4RE"
"weizhepei/CasRel" -> "tsujuifu/pytorch_graph-rel" ["e"=1]
"weizhepei/CasRel" -> "xiangrongzeng/copy_re" ["e"=1]
"chizhu/KGQA_HLM" -> "YeYzheng/KGQA-Based-On-medicine"
"chizhu/KGQA_HLM" -> "SimmerChan/KG-demo-for-movie"
"chizhu/KGQA_HLM" -> "BrambleXu/KGQA_SG"
"chizhu/KGQA_HLM" -> "qq547276542/Agriculture_KnowledgeGraph"
"chizhu/KGQA_HLM" -> "lixiang0/WEB_KG"
"chizhu/KGQA_HLM" -> "lemonhu/stock-knowledge-graph"
"chizhu/KGQA_HLM" -> "MiracleTanC/Neo4j-KGBuilder" ["e"=1]
"chizhu/KGQA_HLM" -> "husthuke/awesome-knowledge-graph"
"chizhu/KGQA_HLM" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"chizhu/KGQA_HLM" -> "Pelhans/Z_knowledge_graph"
"chizhu/KGQA_HLM" -> "liuhuanyong/QASystemOnMedicalKG"
"chizhu/KGQA_HLM" -> "smilelight/lightKG"
"chizhu/KGQA_HLM" -> "npubird/KnowledgeGraphCourse"
"chizhu/KGQA_HLM" -> "weizhixiaoyi/DouBan-KGQA"
"chizhu/KGQA_HLM" -> "zhihao-chen/QASystemOnMedicalGraph"
"lihanghang/NLP-Knowledge-Graph" -> "WenRichard/KBQA-BERT"
"lihanghang/NLP-Knowledge-Graph" -> "husthuke/awesome-knowledge-graph"
"lihanghang/NLP-Knowledge-Graph" -> "npubird/KnowledgeGraphCourse"
"lihanghang/NLP-Knowledge-Graph" -> "BDBC-KG-NLP/QA-Survey"
"lihanghang/NLP-Knowledge-Graph" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"lihanghang/NLP-Knowledge-Graph" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"lihanghang/NLP-Knowledge-Graph" -> "lemonhu/stock-knowledge-graph"
"lihanghang/NLP-Knowledge-Graph" -> "shaoxiongji/knowledge-graphs" ["e"=1]
"lihanghang/NLP-Knowledge-Graph" -> "zhihao-chen/QASystemOnMedicalGraph"
"lihanghang/NLP-Knowledge-Graph" -> "SimmerChan/KG-demo-for-movie"
"lihanghang/NLP-Knowledge-Graph" -> "liuhuanyong/QASystemOnMedicalKG"
"lihanghang/NLP-Knowledge-Graph" -> "wangle1218/KBQA-for-Diagnosis"
"lihanghang/NLP-Knowledge-Graph" -> "qq547276542/Agriculture_KnowledgeGraph"
"lihanghang/NLP-Knowledge-Graph" -> "smilelight/lightKG"
"lihanghang/NLP-Knowledge-Graph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/KnowledgeGraphSlides" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/KnowledgeGraphSlides" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/KnowledgeGraphSlides" -> "liuhuanyong/ChineseNLPCorpus"
"liuhuanyong/KnowledgeGraphSlides" -> "liuhuanyong/CausalityEventExtraction"
"liuhuanyong/KnowledgeGraphSlides" -> "beader/ruijin_round1"
"liuhuanyong/KnowledgeGraphSlides" -> "Shuang0420/knowledge_graph_demo"
"liuhuanyong/KnowledgeGraphSlides" -> "beader/ruijin_round2"
"liuhuanyong/KnowledgeGraphSlides" -> "cnschema/cnschema"
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/ProductKnowledgeGraph"
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/TextGrapher"
"liuhuanyong/QAonMilitaryKG" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"liuhuanyong/QAonMilitaryKG" -> "caishiqing/joint-mrc" ["e"=1]
"liuhuanyong/QAonMilitaryKG" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"liuhuanyong/QAonMilitaryKG" -> "liuhuanyong/QASystemOnMedicalKG"
"liuhuanyong/QAonMilitaryKG" -> "bojone/kg-2019"
"liuhuanyong/QAonMilitaryKG" -> "WenRichard/KBQA-BERT"
"liuhuanyong/QAonMilitaryKG" -> "qq547276542/Agriculture_KnowledgeGraph"
"liuhuanyong/QAonMilitaryKG" -> "lixiang0/WEB_KG"
"liuhuanyong/QAonMilitaryKG" -> "zhihao-chen/QASystemOnMedicalGraph"
"liuhuanyong/QAonMilitaryKG" -> "YeYzheng/KGQA-Based-On-medicine"
"lpty/nlp_base" -> "shiyybua/NER"
"lpty/nlp_base" -> "Determined22/zh-NER-TF"
"lpty/nlp_base" -> "ProHiryu/bert-chinese-ner"
"lpty/nlp_base" -> "buppt/ChineseNER"
"lpty/nlp_base" -> "zjy-ucas/ChineseNER"
"lpty/nlp_base" -> "guillaumegenthial/sequence_tagging"
"lpty/nlp_base" -> "smilelight/lightNLP"
"lpty/nlp_base" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"lpty/nlp_base" -> "FuYanzhe2/Name-Entity-Recognition"
"lpty/nlp_base" -> "pengming617/text_matching"
"lpty/nlp_base" -> "terrifyzhao/bert-utils"
"lpty/nlp_base" -> "macanv/BERT-BiLSTM-CRF-NER"
"lpty/nlp_base" -> "crownpku/Information-Extraction-Chinese"
"lpty/nlp_base" -> "qhduan/ConversationalRobotDesign" ["e"=1]
"lpty/nlp_base" -> "Roshanson/TextInfoExp"
"shuxinyin/SimCSE-Pytorch" -> "Macielyoung/sentence_representation_matching"
"shuxinyin/SimCSE-Pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"shuxinyin/SimCSE-Pytorch" -> "KwangKa/SIMCSE_unsup"
"shuxinyin/SimCSE-Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"shuxinyin/SimCSE-Pytorch" -> "jjljkjljk/SimCSE-Chinese"
"shuxinyin/SimCSE-Pytorch" -> "pluto-junzeng/CNSD"
"shuxinyin/SimCSE-Pytorch" -> "yangjianxin1/SimCSE"
"shuxinyin/SimCSE-Pytorch" -> "zhengyanzhao1997/NLP-model"
"DataTerminatorX/Keyword-BERT" -> "wuba/qa_match"
"DataTerminatorX/Keyword-BERT" -> "ZhuiyiTechnology/pretrained-models"
"DataTerminatorX/Keyword-BERT" -> "alibaba-edu/simple-effective-text-matching"
"DataTerminatorX/Keyword-BERT" -> "sunyilgdx/SIFRank_zh"
"DataTerminatorX/Keyword-BERT" -> "autoliuweijie/FastBERT"
"DataTerminatorX/Keyword-BERT" -> "bojone/SimCSE"
"DataTerminatorX/Keyword-BERT" -> "qiangsiwei/bert_distill"
"DataTerminatorX/Keyword-BERT" -> "pengshuang/Text-Similarity"
"DataTerminatorX/Keyword-BERT" -> "yym6472/ConSERT"
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/pretrained-models" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/pretrained-models" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/pretrained-models" -> "bojone/bert4keras"
"ZhuiyiTechnology/pretrained-models" -> "dbiir/UER-py"
"ZhuiyiTechnology/pretrained-models" -> "CLUEbenchmark/CLUEPretrainedModels"
"ZhuiyiTechnology/pretrained-models" -> "loujie0822/DeepIE"
"ZhuiyiTechnology/pretrained-models" -> "huawei-noah/Pretrained-Language-Model"
"ZhuiyiTechnology/pretrained-models" -> "brightmart/albert_zh"
"ZhuiyiTechnology/pretrained-models" -> "zhanlaoban/EDA_NLP_for_Chinese"
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/pretrained-models" -> "bojone/kg-2019"
"ZhuiyiTechnology/pretrained-models" -> "panchunguang/ccks_baidu_entity_link"
"ZhuiyiTechnology/pretrained-models" -> "CLUEbenchmark/CLUE"
"alibaba/esim-response-selection" -> "pengming617/text_matching"
"alibaba/esim-response-selection" -> "baidu/Dialogue" ["e"=1]
"alibaba/esim-response-selection" -> "coetaur0/ESIM"
"alibaba/esim-response-selection" -> "thu-coai/CrossWOZ" ["e"=1]
"alibaba/esim-response-selection" -> "terrifyzhao/text_matching"
"alibaba/esim-response-selection" -> "pengshuang/Text-Similarity"
"alibaba/esim-response-selection" -> "ZhuiyiTechnology/pretrained-models"
"alibaba/esim-response-selection" -> "cooelf/DeepUtteranceAggregation" ["e"=1]
"alibaba/esim-response-selection" -> "baidu/AnyQ"
"alibaba/esim-response-selection" -> "alibaba-edu/simple-effective-text-matching"
"alibaba/esim-response-selection" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"alibaba/esim-response-selection" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"alibaba/esim-response-selection" -> "DataTerminatorX/Keyword-BERT"
"alibaba/esim-response-selection" -> "lanwuwei/SPM_toolkit" ["e"=1]
"alibaba/esim-response-selection" -> "zengbin93/jddc_solution_4th" ["e"=1]
"chilynn/sequence-labeling" -> "glample/tagger"
"chilynn/sequence-labeling" -> "liu-nlper/NER-LSTM-CRF"
"chilynn/sequence-labeling" -> "scofield7419/sequence-labeling-BiLSTM-CRF"
"chilynn/sequence-labeling" -> "rockingdingo/deepnlp"
"chilynn/sequence-labeling" -> "abhyudaynj/LSTM-CRF-models"
"chilynn/sequence-labeling" -> "HadoopIt/rnn-nlu" ["e"=1]
"chilynn/sequence-labeling" -> "LopezGG/NN_NER_tensorFlow"
"chilynn/sequence-labeling" -> "koth/kcws"
"chilynn/sequence-labeling" -> "white127/insuranceQA-cnn-lstm" ["e"=1]
"chilynn/sequence-labeling" -> "rguthrie3/BiLSTM-CRF"
"chilynn/sequence-labeling" -> "clab/stack-lstm-ner"
"chilynn/sequence-labeling" -> "thunlp/TensorFlow-NRE" ["e"=1]
"chilynn/sequence-labeling" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"chilynn/sequence-labeling" -> "monikkinom/ner-lstm"
"chilynn/sequence-labeling" -> "scofield7419/sequence-labeling"
"deepwel/Chinese-Annotator" -> "jiesutd/YEDDA"
"deepwel/Chinese-Annotator" -> "synyi/poplar"
"deepwel/Chinese-Annotator" -> "nlplab/brat"
"deepwel/Chinese-Annotator" -> "crownpku/Information-Extraction-Chinese"
"deepwel/Chinese-Annotator" -> "doccano/doccano"
"deepwel/Chinese-Annotator" -> "FXLP/MarkTool"
"deepwel/Chinese-Annotator" -> "macanv/BERT-BiLSTM-CRF-NER"
"deepwel/Chinese-Annotator" -> "jiesutd/LatticeLSTM"
"deepwel/Chinese-Annotator" -> "loujie0822/DeepIE"
"deepwel/Chinese-Annotator" -> "ymcui/Chinese-PreTrained-XLNet"
"deepwel/Chinese-Annotator" -> "zjy-ucas/ChineseNER"
"deepwel/Chinese-Annotator" -> "yuanxiaosc/Entity-Relation-Extraction"
"deepwel/Chinese-Annotator" -> "Determined22/zh-NER-TF"
"deepwel/Chinese-Annotator" -> "brightmart/albert_zh"
"deepwel/Chinese-Annotator" -> "thunlp/OpenNRE"
"xmxoxo/BERT-train2deploy" -> "SunYanCN/BERT-chinese-text-classification-and-deployment"
"xmxoxo/BERT-train2deploy" -> "macanv/BERT-BiLSTM-CRF-NER"
"xmxoxo/BERT-train2deploy" -> "ProHiryu/bert-chinese-ner"
"xmxoxo/BERT-train2deploy" -> "Jiakui/awesome-bert"
"xmxoxo/BERT-train2deploy" -> "chenghuige/wenzheng"
"xmxoxo/BERT-train2deploy" -> "ymcui/Chinese-PreTrained-XLNet"
"xmxoxo/BERT-train2deploy" -> "yuanxiaosc/Entity-Relation-Extraction"
"xmxoxo/BERT-train2deploy" -> "yongzhuo/nlp_xiaojiang"
"xmxoxo/BERT-train2deploy" -> "NLPScott/bert-Chinese-classification-task"
"xmxoxo/BERT-train2deploy" -> "WenRichard/KBQA-BERT"
"xmxoxo/BERT-train2deploy" -> "EOA-AILab/NER-Chinese"
"xmxoxo/BERT-train2deploy" -> "PaddlePaddle/LARK"
"xmxoxo/BERT-train2deploy" -> "pengming617/text_matching"
"xmxoxo/BERT-train2deploy" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"xmxoxo/BERT-train2deploy" -> "bojone/bert_in_keras"
"z814081807/DeepNER" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"z814081807/DeepNER" -> "lonePatient/BERT-NER-Pytorch"
"z814081807/DeepNER" -> "loujie0822/DeepIE"
"z814081807/DeepNER" -> "CLUEbenchmark/CLUENER2020"
"z814081807/DeepNER" -> "ShannonAI/mrc-for-flat-nested-ner"
"z814081807/DeepNER" -> "LeeSureman/Flat-Lattice-Transformer"
"z814081807/DeepNER" -> "panchunguang/ccks_baidu_entity_link"
"z814081807/DeepNER" -> "qiufengyuyi/sequence_tagging"
"z814081807/DeepNER" -> "gaohongkui/GlobalPointer_pytorch"
"z814081807/DeepNER" -> "TingFree/NLPer-Arsenal"
"z814081807/DeepNER" -> "GanjinZero/awesome_Chinese_medical_NLP"
"z814081807/DeepNER" -> "princeton-nlp/PURE"
"z814081807/DeepNER" -> "dbiir/UER-py"
"z814081807/DeepNER" -> "wavewangyue/ner"
"z814081807/DeepNER" -> "lonePatient/NeZha_Chinese_PyTorch"
"JunnYu/GPLinker_pytorch" -> "xhw205/GPLinker_torch"
"JunnYu/GPLinker_pytorch" -> "bojone/GPLinker"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/roformer-sim" -> "JunnYu/RoFormer_pytorch"
"ZhuiyiTechnology/roformer-sim" -> "bojone/SimCSE"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/t5-pegasus"
"ZhuiyiTechnology/roformer-sim" -> "bojone/CoSENT"
"ZhuiyiTechnology/roformer-sim" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/roformer"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/roformer-v2"
"ZhuiyiTechnology/roformer-sim" -> "zejunwang1/bert4vec"
"ZhuiyiTechnology/roformer-sim" -> "bojone/CLUE-bert4keras"
"ZhuiyiTechnology/roformer-sim" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/roformer-sim" -> "pluto-junzeng/CNSD"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/roformer-sim" -> "CLUEbenchmark/SimCLUE"
"alibaba/EasyTransfer" -> "airaria/TextBrewer"
"alibaba/EasyTransfer" -> "huawei-noah/Pretrained-Language-Model"
"alibaba/EasyTransfer" -> "dbiir/UER-py"
"alibaba/EasyTransfer" -> "ZhuiyiTechnology/pretrained-models"
"alibaba/EasyTransfer" -> "bojone/SimCSE"
"alibaba/EasyTransfer" -> "bohanli/BERT-flow"
"alibaba/EasyTransfer" -> "yym6472/ConSERT"
"alibaba/EasyTransfer" -> "xv44586/ccf_2020_qa_match"
"alibaba/EasyTransfer" -> "ymcui/Chinese-ELECTRA"
"alibaba/EasyTransfer" -> "brightmart/roberta_zh"
"alibaba/EasyTransfer" -> "alibaba/AliceMind"
"alibaba/EasyTransfer" -> "CLUEbenchmark/CLUE"
"alibaba/EasyTransfer" -> "TsinghuaAI/CPM-Generate"
"alibaba/EasyTransfer" -> "brightmart/albert_zh"
"alibaba/EasyTransfer" -> "ZhuiyiTechnology/simbert"
"pupuk/address" -> "pupuk/address-smart-parse"
"pupuk/address" -> "pupuk/addr"
"pupuk/address" -> "ldwonday/zh-address-parse"
"pupuk/address" -> "hwj911327/address-parse"
"shibing624/similarities" -> "shibing624/text2vec"
"HoyTta0/KnowledgeDistillation" -> "qiangsiwei/bert_distill"
"HoyTta0/KnowledgeDistillation" -> "Lisennlp/TinyBert"
"loujie0822/Pre-trained-Models" -> "loujie0822/DeepIE"
"loujie0822/Pre-trained-Models" -> "lonePatient/BERT-NER-Pytorch"
"loujie0822/Pre-trained-Models" -> "panchunguang/ccks_baidu_entity_link"
"loujie0822/Pre-trained-Models" -> "km1994/NLP-Interview-Notes"
"loujie0822/Pre-trained-Models" -> "z814081807/DeepNER"
"loujie0822/Pre-trained-Models" -> "brightmart/roberta_zh"
"loujie0822/Pre-trained-Models" -> "ZhuiyiTechnology/pretrained-models"
"loujie0822/Pre-trained-Models" -> "zzy99/epidemic-sentence-pair"
"loujie0822/Pre-trained-Models" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"loujie0822/Pre-trained-Models" -> "CLUEbenchmark/CLUEPretrainedModels"
"loujie0822/Pre-trained-Models" -> "airaria/TextBrewer"
"loujie0822/Pre-trained-Models" -> "songyingxin/NLPer-Interview"
"loujie0822/Pre-trained-Models" -> "gaohongkui/GlobalPointer_pytorch"
"loujie0822/Pre-trained-Models" -> "LeeSureman/Flat-Lattice-Transformer"
"loujie0822/Pre-trained-Models" -> "dbiir/UER-py"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "RandolphVI/Multi-Label-Text-Classification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "songyingxin/Bert-TextClassification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "javaidnabi31/Multi-Label-Text-classification-Using-BERT"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "brightmart/sentiment_analysis_fine_grain"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "yongzhuo/Keras-TextClassification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "hellonlp/classifier_multi_label_textcnn"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "Vincent131499/Multi_Label_Classifier_finetune"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lonePatient/BERT-NER-Pytorch"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lonePatient/BERT-chinese-text-classification-pytorch"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lancopku/SGM" ["e"=1]
"lonePatient/Bert-Multi-Label-Text-Classification" -> "yongzhuo/nlp_xiaojiang"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lonePatient/albert_pytorch"
"allenai/dont-stop-pretraining" -> "allenai/longformer" ["e"=1]
"allenai/dont-stop-pretraining" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"allenai/dont-stop-pretraining" -> "zhusleep/pytorch_chinese_lm_pretrain"
"allenai/dont-stop-pretraining" -> "thunlp/SelectiveMasking"
"allenai/dont-stop-pretraining" -> "facebookresearch/SpanBERT" ["e"=1]
"allenai/dont-stop-pretraining" -> "yym6472/ConSERT"
"allenai/dont-stop-pretraining" -> "princeton-nlp/LM-BFF" ["e"=1]
"allenai/dont-stop-pretraining" -> "xuyige/BERT4doc-Classification"
"allenai/dont-stop-pretraining" -> "thunlp/OpenDelta" ["e"=1]
"BaptisteBlouin/EventExtractionPapers" -> "carrie0307/DL_EventExtractionPapers"
"BaptisteBlouin/EventExtractionPapers" -> "nlpcl-lab/bert-event-extraction"
"BaptisteBlouin/EventExtractionPapers" -> "nlpcl-lab/ace2005-preprocessing"
"BaptisteBlouin/EventExtractionPapers" -> "lx865712528/EMNLP2018-JMEE"
"BaptisteBlouin/EventExtractionPapers" -> "xiaoqian19940510/Event-Extraction"
"BaptisteBlouin/EventExtractionPapers" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"BaptisteBlouin/EventExtractionPapers" -> "dolphin-zs/Doc2EDAG"
"BaptisteBlouin/EventExtractionPapers" -> "THU-KEG/MAVEN-dataset"
"BaptisteBlouin/EventExtractionPapers" -> "dwadden/dygiepp"
"BaptisteBlouin/EventExtractionPapers" -> "thunlp/HMEAE"
"BaptisteBlouin/EventExtractionPapers" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"BaptisteBlouin/EventExtractionPapers" -> "zhang17173/Event-Extraction"
"BaptisteBlouin/EventExtractionPapers" -> "xinyadu/eeqa"
"BaptisteBlouin/EventExtractionPapers" -> "raspberryice/gen-arg"
"BaptisteBlouin/EventExtractionPapers" -> "qiufengyuyi/event_extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "xiaoqian19940510/Event-Extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "z814081807/DeepNER"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "carrie0307/DL_EventExtractionPapers"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "nlpcl-lab/bert-event-extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "qiufengyuyi/event_extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "hecongqing/CCKS2019_EventEntityExtraction_Rank5"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "lx865712528/EMNLP2018-JMEE"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "zhang17173/Event-Extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "bojone/lic2020_baselines"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "liuhuanyong/ComplexEventExtraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "loujie0822/DeepIE"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "BaptisteBlouin/EventExtractionPapers"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "liuhuanyong/EventTriplesExtraction"
"WuHuRestaurant/xf_event_extraction2020Top1" -> "qiufengyuyi/sequence_tagging"
"iwangjian/Paper-Reading" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"iwangjian/Paper-Reading" -> "thunlp/RCPapers" ["e"=1]
"iwangjian/Paper-Reading" -> "AtmaHou/Task-Oriented-Dialogue-Dataset-Survey" ["e"=1]
"iwangjian/Paper-Reading" -> "zhpmatrix/nlp-competitions-list-review"
"iwangjian/Paper-Reading" -> "HLTCHKUST/Mem2Seq" ["e"=1]
"iwangjian/Paper-Reading" -> "budzianowski/multiwoz" ["e"=1]
"iwangjian/Paper-Reading" -> "codemayq/chaotbot_corpus_Chinese" ["e"=1]
"iwangjian/Paper-Reading" -> "fuzhenxin/Personal-Emotional-Stylized-Dialog" ["e"=1]
"iwangjian/Paper-Reading" -> "ChuanMeng/Knowldege-Grounded-Conversation" ["e"=1]
"iwangjian/Paper-Reading" -> "wyu97/KENLG-Reading" ["e"=1]
"iwangjian/Paper-Reading" -> "msgi/nlp-journey"
"iwangjian/Paper-Reading" -> "zibuyu/research_tao"
"iwangjian/Paper-Reading" -> "thunlp/PLMpapers" ["e"=1]
"iwangjian/Paper-Reading" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"iwangjian/Paper-Reading" -> "PaddlePaddle/LARK"
"panchunguang/ccks_baidu_entity_link" -> "AlexYangLi/ccks2019_el"
"panchunguang/ccks_baidu_entity_link" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "bojone/kg-2019"
"panchunguang/ccks_baidu_entity_link" -> "loujie0822/DeepIE"
"panchunguang/ccks_baidu_entity_link" -> "yuanxiaosc/Entity-Relation-Extraction"
"panchunguang/ccks_baidu_entity_link" -> "WenRichard/KBQA-BERT"
"panchunguang/ccks_baidu_entity_link" -> "z814081807/DeepNER"
"panchunguang/ccks_baidu_entity_link" -> "bojone/el-2019"
"panchunguang/ccks_baidu_entity_link" -> "ZhuiyiTechnology/pretrained-models"
"panchunguang/ccks_baidu_entity_link" -> "brightmart/roberta_zh"
"panchunguang/ccks_baidu_entity_link" -> "ZhuiyiTechnology/simbert"
"panchunguang/ccks_baidu_entity_link" -> "jiesutd/LatticeLSTM"
"panchunguang/ccks_baidu_entity_link" -> "zhpmatrix/nlp-competitions-list-review"
"panchunguang/ccks_baidu_entity_link" -> "renjunxiang/ccks2019_el"
"panchunguang/ccks_baidu_entity_link" -> "CLUEbenchmark/CLUENER2020"
"foamliu/Sentiment-Analysis" -> "pengshuang/AI-Comp"
"foamliu/Sentiment-Analysis" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"yanqiangmiffy/NLP-Interview-Notes" -> "songyingxin/NLPer-Interview"
"yanqiangmiffy/NLP-Interview-Notes" -> "laddie132/NLP-Interview"
"yanqiangmiffy/NLP-Interview-Notes" -> "Vincent131499/NLP-Algorithm-Interview" ["e"=1]
"yanqiangmiffy/NLP-Interview-Notes" -> "km1994/NLP-Interview-Notes"
"yanqiangmiffy/NLP-Interview-Notes" -> "zkywsg/Daily-DeepLearning" ["e"=1]
"yanqiangmiffy/NLP-Interview-Notes" -> "z814081807/DeepNER"
"wangle1218/KBQA-for-Diagnosis" -> "liuhuanyong/QASystemOnMedicalKG"
"wangle1218/KBQA-for-Diagnosis" -> "zhihao-chen/QASystemOnMedicalGraph"
"wangle1218/KBQA-for-Diagnosis" -> "WenRichard/KBQA-BERT"
"wangle1218/KBQA-for-Diagnosis" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"wangle1218/KBQA-for-Diagnosis" -> "DeqianBai/KBQA-study"
"wangle1218/KBQA-for-Diagnosis" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"wangle1218/KBQA-for-Diagnosis" -> "lrs1353281004/Chinese_medical_NLP"
"wangle1218/KBQA-for-Diagnosis" -> "lihanghang/NLP-Knowledge-Graph"
"wangle1218/KBQA-for-Diagnosis" -> "YeYzheng/KGQA-Based-On-medicine"
"wangle1218/KBQA-for-Diagnosis" -> "WangShengguang/ccks-2020" ["e"=1]
"wangle1218/KBQA-for-Diagnosis" -> "wangle1218/QASystemOnMedicalKG"
"wangle1218/KBQA-for-Diagnosis" -> "alibaba-research/ChineseBLUE"
"wangle1218/KBQA-for-Diagnosis" -> "loujie0822/DeepIE"
"wangle1218/KBQA-for-Diagnosis" -> "CLUEbenchmark/KgCLUE"
"wangle1218/KBQA-for-Diagnosis" -> "z814081807/DeepNER"
"jiangxinyang227/bert-for-task" -> "jiangxinyang227/textClassifier"
"jiangxinyang227/bert-for-task" -> "jiangxinyang227/NLP-Project"
"jiangxinyang227/bert-for-task" -> "realcactus/bert"
"jiangxinyang227/bert-for-task" -> "ProHiryu/albert-chinese-ner"
"yanwii/ChinsesNER-pytorch" -> "circlePi/Bert_Chinese_Ner_pytorch"
"yanwii/ChinsesNER-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"yanwii/ChinsesNER-pytorch" -> "DA-southampton/ner"
"yanwii/ChinsesNER-pytorch" -> "lemonhu/NER-BERT-pytorch"
"yanwii/ChinsesNER-pytorch" -> "buppt/ChineseNER"
"yanwii/ChinsesNER-pytorch" -> "zhengyima/kg-baseline-pytorch"
"yanwii/ChinsesNER-pytorch" -> "yumath/bertNER"
"yanwii/ChinsesNER-pytorch" -> "luopeixiang/named_entity_recognition"
"yanwii/ChinsesNER-pytorch" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"yanwii/ChinsesNER-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"yanwii/ChinsesNER-pytorch" -> "z814081807/DeepNER"
"yanwii/ChinsesNER-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"yanwii/ChinsesNER-pytorch" -> "xuanzebi/BERT-CH-NER"
"yanwii/ChinsesNER-pytorch" -> "ZhixiuYe/NER-pytorch"
"yanwii/ChinsesNER-pytorch" -> "PeijiYang/BERT-BiLSTM-CRF-NER-pytorch"
"jbjorne/TEES" -> "yifange/event_extraction"
"jbjorne/TEES" -> "lx865712528/JMEE"
"jbjorne/TEES" -> "SOUMAJYOTI/Attention_mechanism-event-extraction"
"jbjorne/TEES" -> "hltcoe/EventMiner"
"ZhuiyiTechnology/roformer-v2" -> "bojone/CLUE-bert4keras"
"ZhuiyiTechnology/roformer-v2" -> "ZhuiyiTechnology/GAU-alpha"
"bojone/dgcnn_for_reading_comprehension" -> "natureLanguageQing/radam_dgcnn_for_reading_comprehension"
"OpenBMB/BMInf" -> "OpenBMB/BMTrain"
"OpenBMB/BMInf" -> "OpenBMB/ModelCenter"
"OpenBMB/BMInf" -> "OpenBMB/CPM-Live"
"OpenBMB/BMInf" -> "OpenBMB/BMCook"
"OpenBMB/BMInf" -> "OpenBMB/BMList"
"OpenBMB/BMInf" -> "TsinghuaAI/CPM-2-Pretrain"
"OpenBMB/BMInf" -> "TsinghuaAI/CPM"
"OpenBMB/BMInf" -> "TsinghuaAI/CPM-1-Generate"
"OpenBMB/BMInf" -> "TsinghuaAI/CPM-2-Finetune"
"OpenBMB/BMInf" -> "thu-coai/EVA"
"OpenBMB/BMInf" -> "thunlp/OpenDelta" ["e"=1]
"OpenBMB/BMInf" -> "laekov/fastmoe" ["e"=1]
"OpenBMB/BMInf" -> "yangjianxin1/CPM"
"OpenBMB/BMInf" -> "CLUEbenchmark/pCLUE" ["e"=1]
"OpenBMB/BMInf" -> "deepdialog/CPM-LM-TF2"
"basketballandlearn/MRC_Competition_Dureader" -> "zhoujx4/DuReader-Checklist-BASELINE" ["e"=1]
"basketballandlearn/MRC_Competition_Dureader" -> "nilboy/gaic_track3_pair_sim"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "finlay-liu/kaggle_public"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "ymcui/Chinese-PreTrained-XLNet"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "linhaow/TextClassify"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "brightmart/roberta_zh"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "unclegem/Sentiment-analysis"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "bojone/bert_in_keras"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "basketballandlearn/Dureader-Bert" ["e"=1]
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "rebornZH/2019-CCF-BDCI-NLP"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhanlaoban/Transformers_for_Text_Classification"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhanlaoban/EDA_NLP_for_Chinese"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhpmatrix/nlp-competitions-list-review"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "xv44586/ccf_2020_qa_match"
"pengming617/bert_classification" -> "renxingkai/BERT_Chinese_Classification"
"pengming617/bert_classification" -> "fennuDetudou/tudouNLP"
"pengming617/bert_classification" -> "pengming617/bert_textMatching"
"pengming617/bert_classification" -> "NLPScott/bert-Chinese-classification-task"
"pengming617/bert_classification" -> "pengming617/LanguageModel"
"pengming617/bert_classification" -> "pengming617/text_classification"
"pengming617/bert_classification" -> "pengming617/text_matching"
"pengming617/bert_classification" -> "ami66/ChineseTextClassifier" ["e"=1]
"pengming617/bert_classification" -> "Menyoupingxiaoguo/AliyunSendMail"
"CLUEbenchmark/CLUEPretrainedModels" -> "CLUEbenchmark/CLUECorpus2020"
"CLUEbenchmark/CLUEPretrainedModels" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/CLUEPretrainedModels" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/Chinese-ELECTRA"
"CLUEbenchmark/CLUEPretrainedModels" -> "dbiir/UER-py"
"CLUEbenchmark/CLUEPretrainedModels" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/MacBERT"
"CLUEbenchmark/CLUEPretrainedModels" -> "airaria/TextBrewer"
"CLUEbenchmark/CLUEPretrainedModels" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUEPretrainedModels" -> "autoliuweijie/FastBERT"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/Chinese-PreTrained-XLNet"
"CLUEbenchmark/CLUEPretrainedModels" -> "huawei-noah/Pretrained-Language-Model"
"CLUEbenchmark/CLUEPretrainedModels" -> "YunwenTechnology/Unilm"
"CLUEbenchmark/CLUEPretrainedModels" -> "chineseGLUE/chineseGLUE"
"CLUEbenchmark/CLUEPretrainedModels" -> "ChineseGLUE/ChineseGLUE"
"Lisennlp/TinyBert" -> "yinmingjun/TinyBERT"
"Lisennlp/TinyBert" -> "HoyTta0/KnowledgeDistillation"
"Lisennlp/TinyBert" -> "qiangsiwei/bert_distill"
"rebornZH/2019-CCF-BDCI-NLP" -> "Chevalier1024/CCF-BDCI-ABSA"
"rebornZH/2019-CCF-BDCI-NLP" -> "Makaixin/Correlation-between-requirements-and-achievements"
"rebornZH/2019-CCF-BDCI-NLP" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"rebornZH/2019-CCF-BDCI-NLP" -> "xiong666/ccf_financial_negative"
"M0025/KnowledgeGraphOfA-shareCompanys" -> "codeants2012/FinancialKnowledgeGraph"
"M0025/KnowledgeGraphOfA-shareCompanys" -> "shinezai/QASystemOnFinancialKG"
"M0025/KnowledgeGraphOfA-shareCompanys" -> "mengxiaoxu/economic_audit_knowledge_graph"
"xuanzebi/BERT-CH-NER" -> "ProHiryu/bert-chinese-ner"
"xuanzebi/BERT-CH-NER" -> "yumath/bertNER"
"xuanzebi/BERT-CH-NER" -> "ProHiryu/albert-chinese-ner"
"xuanzebi/BERT-CH-NER" -> "liuhuanyong/MedicalNamedEntityRecognition"
"xuanzebi/BERT-CH-NER" -> "kyzhouhzau/BERT-NER"
"xuanzebi/BERT-CH-NER" -> "FuYanzhe2/Name-Entity-Recognition"
"xuanzebi/BERT-CH-NER" -> "EOA-AILab/NER-Chinese"
"xuanzebi/BERT-CH-NER" -> "luopeixiang/named_entity_recognition"
"xuanzebi/BERT-CH-NER" -> "buppt/ChineseNER"
"xuanzebi/BERT-CH-NER" -> "circlePi/Bert_Chinese_Ner_pytorch"
"xuanzebi/BERT-CH-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"xuanzebi/BERT-CH-NER" -> "yanwii/ChinsesNER-pytorch"
"xuanzebi/BERT-CH-NER" -> "CLUEbenchmark/CLUENER2020"
"xuanzebi/BERT-CH-NER" -> "F-debug/Medical-named-entity-recognition"
"xuanzebi/BERT-CH-NER" -> "zhengyima/kg-baseline-pytorch"
"boat-group/fancy-nlp" -> "AlexYangLi/ccks2019_el"
"boat-group/fancy-nlp" -> "AlexYangLi/ALA"
"boat-group/fancy-nlp" -> "BaberMuyu/2020CCF-NER"
"boat-group/fancy-nlp" -> "sunyilgdx/SIFRank_zh"
"wks/ik-analyzer" -> "EugenePig/ik-analyzer-solr5"
"wks/ik-analyzer" -> "chenlb/mmseg4j-solr"
"wks/ik-analyzer" -> "huaban/jieba-analysis"
"wks/ik-analyzer" -> "blueshen/ik-analyzer"
"wks/ik-analyzer" -> "thunlp/THULAC-Java"
"wks/ik-analyzer" -> "NLPchina/ansj_seg"
"wks/ik-analyzer" -> "chenlb/mmseg4j-core"
"wks/ik-analyzer" -> "ysc/word"
"wks/ik-analyzer" -> "lionsoul2014/jcseg"
"wks/ik-analyzer" -> "DmitryKey/luke" ["e"=1]
"wks/ik-analyzer" -> "zzboy/lucene" ["e"=1]
"wks/ik-analyzer" -> "yozhao/IKAnalyzer"
"wks/ik-analyzer" -> "alibaba/taokeeper" ["e"=1]
"wks/ik-analyzer" -> "NLPchina/Word2VEC_java"
"wks/ik-analyzer" -> "thunlp/THULAC"
"Macielyoung/sentence_representation_matching" -> "shuxinyin/SimCSE-Pytorch"
"Macielyoung/sentence_representation_matching" -> "KwangKa/SIMCSE_unsup"
"alibaba-research/ChineseBLUE" -> "CBLUEbenchmark/CBLUE"
"alibaba-research/ChineseBLUE" -> "lrs1353281004/Chinese_medical_NLP"
"alibaba-research/ChineseBLUE" -> "GanjinZero/awesome_Chinese_medical_NLP"
"alibaba-research/ChineseBLUE" -> "GanjinZero/ChineseEHRBert"
"alibaba-research/ChineseBLUE" -> "lxy444/bertcner"
"alibaba-research/ChineseBLUE" -> "UCSD-AI4H/Medical-Dialogue-System"
"alibaba-research/ChineseBLUE" -> "Toyhom/Chinese-medical-dialogue-data"
"alibaba-research/ChineseBLUE" -> "zhangsheng93/cMedQA2"
"alibaba-research/ChineseBLUE" -> "trueto/medbert"
"alibaba-research/ChineseBLUE" -> "MatNLP/SMedBERT"
"alibaba-research/ChineseBLUE" -> "yixiu00001/LSTM-CRF-medical"
"alibaba-research/ChineseBLUE" -> "WENGSYX/Chinese-Word2vec-Medicine"
"alibaba-research/ChineseBLUE" -> "OYE93/Chinese-NLP-Corpus"
"alibaba-research/ChineseBLUE" -> "liutongyang/CMID"
"alibaba-research/ChineseBLUE" -> "panchunguang/ccks_baidu_entity_link"
"bojone/SimCSE" -> "princeton-nlp/SimCSE"
"bojone/SimCSE" -> "ZhuiyiTechnology/simbert"
"bojone/SimCSE" -> "yym6472/ConSERT"
"bojone/SimCSE" -> "bojone/BERT-whitening"
"bojone/SimCSE" -> "zhengyanzhao1997/NLP-model"
"bojone/SimCSE" -> "ZhuiyiTechnology/roformer-sim"
"bojone/SimCSE" -> "pluto-junzeng/CNSD"
"bojone/SimCSE" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"bojone/SimCSE" -> "bohanli/BERT-flow"
"bojone/SimCSE" -> "KwangKa/SIMCSE_unsup"
"bojone/SimCSE" -> "autoliuweijie/BERT-whitening-pytorch"
"bojone/SimCSE" -> "ZhuiyiTechnology/pretrained-models"
"bojone/SimCSE" -> "dropreg/R-Drop"
"bojone/SimCSE" -> "renmada/sentence_bert_chinese"
"bojone/SimCSE" -> "zhoujx4/NLP-Series-sentence-embeddings"
"hellonlp/classifier_multi_label_textcnn" -> "hellonlp/classifier_multi_label"
"hellonlp/classifier_multi_label_textcnn" -> "Vincent131499/Multi_Label_Classifier_finetune"
"hellonlp/classifier_multi_label_textcnn" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"hellonlp/classifier_multi_label_textcnn" -> "hellonlp/sentiment_analysis_albert"
"hellonlp/classifier_multi_label_textcnn" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"hellonlp/classifier_multi_label_textcnn" -> "hellonlp/classifier_multi_label_denses"
"hellonlp/classifier_multi_label_textcnn" -> "yongzhuo/Keras-TextClassification"
"hellonlp/classifier_multi_label_textcnn" -> "hellonlp/classifier_multi_label_seq2seq_attention"
"hellonlp/classifier_multi_label_textcnn" -> "percent4/keras_bert_multi_label_cls"
"hellonlp/classifier_multi_label_textcnn" -> "RandolphVI/Multi-Label-Text-Classification"
"hellonlp/classifier_multi_label_textcnn" -> "jeffery0628/text_classification"
"hellonlp/classifier_multi_label_textcnn" -> "XqFeng-Josie/TextCNN" ["e"=1]
"hellonlp/classifier_multi_label_textcnn" -> "aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset"
"hellonlp/classifier_multi_label_textcnn" -> "littletiger0712/text-classification-mutli-label" ["e"=1]
"hellonlp/classifier_multi_label_textcnn" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"huanghuidmml/epidemicTextMatch" -> "Makaixin/similar-sentence-pairs-in-epidemic"
"huanghuidmml/epidemicTextMatch" -> "zzy99/epidemic-sentence-pair"
"huanghuidmml/epidemicTextMatch" -> "lonePatient/NeZha_Chinese_PyTorch"
"huanghuidmml/epidemicTextMatch" -> "huanghuidmml/cail2019_track2" ["e"=1]
"huanghuidmml/epidemicTextMatch" -> "nilboy/gaic_track3_pair_sim"
"huanghuidmml/epidemicTextMatch" -> "xv44586/ccf_2020_qa_match"
"huanghuidmml/epidemicTextMatch" -> "z814081807/DeepNER"
"lemon234071/clean-dialog" -> "thu-coai/EVA"
"lemon234071/clean-dialog" -> "thu-coai/CDial-GPT"
"lemon234071/clean-dialog" -> "gmftbyGMFTBY/OpenDialog"
"lemon234071/clean-dialog" -> "ChuanMeng/Knowldege-Grounded-Conversation" ["e"=1]
"muyuuuu/E-commerce-Search-Recall" -> "enze5088/WenTianSearch"
"muyuuuu/E-commerce-Search-Recall" -> "zwkkk/wentian-rank2"
"thu-coai/EVA" -> "lemon234071/clean-dialog"
"thu-coai/EVA" -> "thu-coai/CDial-GPT"
"thu-coai/EVA" -> "thu-coai/OPD"
"thu-coai/EVA" -> "thu-coai/KdConv" ["e"=1]
"thu-coai/EVA" -> "PaddlePaddle/Knover"
"thu-coai/EVA" -> "fastnlp/CPT"
"thu-coai/EVA" -> "XiaoMi/C3KG" ["e"=1]
"thu-coai/EVA" -> "qhjqhj00/SIGIR2021-Pchatbot"
"thu-coai/EVA" -> "thu-coai/Emotional-Support-Conversation" ["e"=1]
"thu-coai/EVA" -> "BAAI-WuDao/EVA"
"thu-coai/EVA" -> "TsinghuaAI/CPM"
"thu-coai/EVA" -> "scutcyr/CPED" ["e"=1]
"thu-coai/EVA" -> "thu-coai/CrossWOZ" ["e"=1]
"thu-coai/EVA" -> "OpenBMB/BMInf"
"yangjianxin1/SimCSE" -> "jjljkjljk/SimCSE-Chinese"
"zhengyanzhao1997/NLP-model" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"zhengyanzhao1997/NLP-model" -> "bojone/SimCSE"
"zhengyanzhao1997/NLP-model" -> "KwangKa/SIMCSE_unsup"
"zhengyanzhao1997/NLP-model" -> "pluto-junzeng/CNSD"
"zhengyanzhao1997/NLP-model" -> "shuxinyin/SimCSE-Pytorch"
"zhengyanzhao1997/NLP-model" -> "muyuuuu/E-commerce-Search-Recall"
"zhengyanzhao1997/NLP-model" -> "zhoujx4/NLP-Series-sentence-embeddings"
"zhengyanzhao1997/NLP-model" -> "shawroad/CoSENT_Pytorch"
"zhengyanzhao1997/NLP-model" -> "autoliuweijie/BERT-whitening-pytorch"
"zhengyanzhao1997/NLP-model" -> "bojone/BERT-whitening"
"zhengyanzhao1997/NLP-model" -> "gaohongkui/GlobalPointer_pytorch"
"zhengyanzhao1997/NLP-model" -> "shawroad/NLP_pytorch_project"
"zhengyanzhao1997/NLP-model" -> "yangjianxin1/SimCSE"
"jsksxs360/Word2Vec" -> "jsksxs360/AHANLP"
"jsksxs360/Word2Vec" -> "NLPchina/Word2VEC_java"
"jsksxs360/Word2Vec" -> "kongbinghit/TongYiCiCiLin"
"Anfany/Machine-Learning-for-Beginner-by-Python3" -> "sujeek/chinese_nlp"
"Anfany/Machine-Learning-for-Beginner-by-Python3" -> "SmallVagetable/machine_learning_python"
"Anfany/Machine-Learning-for-Beginner-by-Python3" -> "hczheng/Rong360" ["e"=1]
"finlay-liu/kaggle_public" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"finlay-liu/kaggle_public" -> "dayeren/Kaggle_Competition_Treasure" ["e"=1]
"finlay-liu/kaggle_public" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"finlay-liu/kaggle_public" -> "PeijiYang/BDCI2019_Financial_Entities"
"finlay-liu/kaggle_public" -> "guoday/Tencent2019_Preliminary_Rank1st" ["e"=1]
"finlay-liu/kaggle_public" -> "bojone/bert_in_keras"
"finlay-liu/kaggle_public" -> "rebornZH/2019-CCF-BDCI-NLP"
"finlay-liu/kaggle_public" -> "bettenW/Tencent2019_Finals_Rank1st" ["e"=1]
"finlay-liu/kaggle_public" -> "linhaow/TextClassify"
"finlay-liu/kaggle_public" -> "luoda888/HUAWEI-DIGIX-AgeGroup" ["e"=1]
"finlay-liu/kaggle_public" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"finlay-liu/kaggle_public" -> "finlay-liu/Learn-CV-The-Hard-Way"
"finlay-liu/kaggle_public" -> "zhpmatrix/nlp-competitions-list-review"
"finlay-liu/kaggle_public" -> "ymcui/Chinese-PreTrained-XLNet"
"finlay-liu/kaggle_public" -> "chizhu/yiguan_sex_age_predict_1st_solution" ["e"=1]
"vivianLL/QASystemOnHepatopathyKG" -> "zhihao-chen/QASystemOnMedicalGraph"
"vivianLL/QASystemOnHepatopathyKG" -> "YeYzheng/KGQA-Based-On-medicine"
"vivianLL/QASystemOnHepatopathyKG" -> "AdiaLoveTrance/MedicalInsuranceKG"
"vivianLL/QASystemOnHepatopathyKG" -> "kangzhun/KnowledgeGraph-QA-Service"
"vivianLL/QASystemOnHepatopathyKG" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"vivianLL/QASystemOnHepatopathyKG" -> "mattzheng/DouBanRecommend"
"vivianLL/QASystemOnHepatopathyKG" -> "weizhixiaoyi/DouBan-KGQA"
"vivianLL/QASystemOnHepatopathyKG" -> "IrvingBei/simple_movie_qa_with_KG"
"vivianLL/QASystemOnHepatopathyKG" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"vivianLL/QASystemOnHepatopathyKG" -> "zhangtao-seu/Jay_KG"
"vivianLL/QASystemOnHepatopathyKG" -> "zhangziliang04/kgRobot"
"vivianLL/QASystemOnHepatopathyKG" -> "ngl567/CookBook-KG"
"vivianLL/QASystemOnHepatopathyKG" -> "pkuzhangyao/KnowledgeGraph-QA"
"vivianLL/QASystemOnHepatopathyKG" -> "WangShengguang/ccks-2020" ["e"=1]
"vivianLL/QASystemOnHepatopathyKG" -> "Toyhom/Chinese-medical-dialogue-data"
"liuhuanyong/CausalityEventExtraction" -> "liuhuanyong/SequentialEventExtration"
"liuhuanyong/CausalityEventExtraction" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/CausalityEventExtraction" -> "liuhuanyong/EventTriplesExtraction"
"liuhuanyong/CausalityEventExtraction" -> "hchX009/EventInferringSys"
"liuhuanyong/CausalityEventExtraction" -> "shijiebei2009/CEC-Corpus"
"liuhuanyong/CausalityEventExtraction" -> "benkang-chen/Event-Extraction"
"liuhuanyong/CausalityEventExtraction" -> "mattzheng/LtpExtraction"
"liuhuanyong/CausalityEventExtraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"liuhuanyong/CausalityEventExtraction" -> "liuhuanyong/CausalCollocation"
"liuhuanyong/CausalityEventExtraction" -> "eecrazy/ConstructingNEEG_IJCAI_2018" ["e"=1]
"liuhuanyong/CausalityEventExtraction" -> "liuhuanyong/EventPredictBasedOnEG"
"liuhuanyong/CausalityEventExtraction" -> "xiaoqian19940510/Event-Extraction"
"liuhuanyong/CausalityEventExtraction" -> "boy56/EGPapers"
"liuhuanyong/CausalityEventExtraction" -> "twjiang/fact_triple_extraction"
"liuhuanyong/CausalityEventExtraction" -> "zhang17173/Event-Extraction"
"liuhuanyong/MedicalNamedEntityRecognition" -> "MenglinLu/Chinese-clinical-NER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "fangwater/Medical-named-entity-recognition-for-ccks2017"
"liuhuanyong/MedicalNamedEntityRecognition" -> "F-debug/Medical-named-entity-recognition"
"liuhuanyong/MedicalNamedEntityRecognition" -> "baiyyang/medical-entity-recognition"
"liuhuanyong/MedicalNamedEntityRecognition" -> "pumpkinduo/KnowledgeGraph_NER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "yixiu00001/LSTM-CRF-medical"
"liuhuanyong/MedicalNamedEntityRecognition" -> "xuanzebi/BERT-CH-NER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "kyzhouhzau/Clinical-NER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "fordai/CCKS2019-Chinese-Clinical-NER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "zjy-ucas/ChineseNER"
"liuhuanyong/MedicalNamedEntityRecognition" -> "ProHiryu/bert-chinese-ner"
"liuhuanyong/MedicalNamedEntityRecognition" -> "lrs1353281004/Chinese_medical_NLP"
"liuhuanyong/MedicalNamedEntityRecognition" -> "lingluodlut/BioNER-Progress" ["e"=1]
"liuhuanyong/MedicalNamedEntityRecognition" -> "alibaba-research/ChineseBLUE"
"liuhuanyong/MedicalNamedEntityRecognition" -> "GanjinZero/awesome_Chinese_medical_NLP"
"percent4/people_relation_extract" -> "percent4/spo_extract_platform"
"percent4/people_relation_extract" -> "zhengyima/kg-baseline-pytorch"
"percent4/people_relation_extract" -> "Jacen789/relation-extraction"
"percent4/people_relation_extract" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction"
"percent4/people_relation_extract" -> "percent4/knowledge_graph_demo"
"percent4/people_relation_extract" -> "percent4/ccks_triple_extract"
"percent4/people_relation_extract" -> "Ricardokevins/Bert-In-Relation-Extraction"
"percent4/people_relation_extract" -> "taishan1994/pytorch_triple_extraction"
"percent4/people_relation_extract" -> "buppt/ChineseNRE"
"percent4/people_relation_extract" -> "Mryangkaitong/Chinese_NRE"
"percent4/people_relation_extract" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"percent4/people_relation_extract" -> "yuanxiaosc/Entity-Relation-Extraction"
"percent4/people_relation_extract" -> "taorui-plus/OpenNRE"
"Ailln/cn2an" -> "Wall-ee/chinese2digits"
"Ailln/cn2an" -> "speechio/chinese_text_normalization" ["e"=1]
"Ailln/cn2an" -> "kakaobrain/g2pM" ["e"=1]
"Ailln/cn2an" -> "zhanzecheng/Time_NLP"
"Ailln/cn2an" -> "baidu/DDParser"
"Ailln/cn2an" -> "mobvoi/wenet" ["e"=1]
"Ailln/cn2an" -> "ZhuiyiTechnology/roformer-sim"
"Ailln/cn2an" -> "k2-fsa/k2" ["e"=1]
"Ailln/cn2an" -> "GitYCC/g2pW" ["e"=1]
"Ailln/cn2an" -> "liuhuanyong/MiningZhiDaoQACorpus"
"Ailln/cn2an" -> "Z-yq/TensorflowASR" ["e"=1]
"Ailln/cn2an" -> "kmkurn/pytorch-crf"
"Ailln/cn2an" -> "xcmyz/speech-synthesis-paper" ["e"=1]
"stober/gmm" -> "wrayzheng/gmm-em-clustering"
"yaringal/multi-task-learning-example" -> "ranandalon/mtl"
"yaringal/multi-task-learning-example" -> "lorenmt/mtan"
"yaringal/multi-task-learning-example" -> "Hui-Li/multi-task-learning-example-PyTorch"
"yaringal/multi-task-learning-example" -> "Mikoto10032/AutomaticWeightedLoss"
"yaringal/multi-task-learning-example" -> "drawbridge/keras-mmoe" ["e"=1]
"yaringal/multi-task-learning-example" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"yaringal/multi-task-learning-example" -> "mbs0221/Multitask-Learning"
"yaringal/multi-task-learning-example" -> "hosseinshn/GradNorm"
"yaringal/multi-task-learning-example" -> "intel-isl/MultiObjectiveOptimization"
"yaringal/multi-task-learning-example" -> "isl-org/MultiObjectiveOptimization"
"yaringal/multi-task-learning-example" -> "hardianlawi/MTL-Homoscedastic-Uncertainty"
"yaringal/multi-task-learning-example" -> "jg8610/multi-task-learning"
"yaringal/multi-task-learning-example" -> "truongnmt/multi-task-learning" ["e"=1]
"yaringal/multi-task-learning-example" -> "yangxudong/deeplearning" ["e"=1]
"yaringal/multi-task-learning-example" -> "hosseinshn/Basic-Multi-task-Learning"
"CBLUEbenchmark/CBLUE" -> "alibaba-research/ChineseBLUE"
"CBLUEbenchmark/CBLUE" -> "GanjinZero/awesome_Chinese_medical_NLP"
"CBLUEbenchmark/CBLUE" -> "lrs1353281004/Chinese_medical_NLP"
"CBLUEbenchmark/CBLUE" -> "DataArk/CBLUE-Baseline"
"CBLUEbenchmark/CBLUE" -> "z814081807/DeepNER"
"CBLUEbenchmark/CBLUE" -> "GanjinZero/ChineseEHRBert"
"CBLUEbenchmark/CBLUE" -> "loujie0822/DeepIE"
"CBLUEbenchmark/CBLUE" -> "UCSD-AI4H/Medical-Dialogue-System"
"CBLUEbenchmark/CBLUE" -> "lxy444/bertcner"
"CBLUEbenchmark/CBLUE" -> "DataArk/CHIP2021-Task3-Top3"
"CBLUEbenchmark/CBLUE" -> "king-yyf/CMeKG_tools"
"CBLUEbenchmark/CBLUE" -> "v-mipeng/LexiconAugmentedNER"
"CBLUEbenchmark/CBLUE" -> "WENGSYX/Chinese-Word2vec-Medicine"
"CBLUEbenchmark/CBLUE" -> "LeeSureman/Flat-Lattice-Transformer"
"CBLUEbenchmark/CBLUE" -> "gaohongkui/GlobalPointer_pytorch"
"JetRunner/BERT-of-Theseus" -> "intersun/PKD-for-BERT-Model-Compression"
"JetRunner/BERT-of-Theseus" -> "autoliuweijie/FastBERT"
"JetRunner/BERT-of-Theseus" -> "qiufengyuyi/bert-of-theseus-tf"
"JetRunner/BERT-of-Theseus" -> "airaria/TextBrewer"
"JetRunner/BERT-of-Theseus" -> "bojone/bert-of-theseus"
"JetRunner/BERT-of-Theseus" -> "qiangsiwei/bert_distill"
"brightmart/nlu_sim" -> "ziweipolaris/atec2018-nlp"
"brightmart/nlu_sim" -> "LittletreeZou/Question-Pairs-Matching"
"brightmart/nlu_sim" -> "yanqiangmiffy/sentence-similarity"
"brightmart/nlu_sim" -> "zle1992/atec"
"brightmart/nlu_sim" -> "zhiguowang/BiMPM" ["e"=1]
"liuwei1206/LEBERT" -> "yangjianxin1/LEBERT-NER-Chinese"
"liuwei1206/LEBERT" -> "v-mipeng/LexiconAugmentedNER"
"liuwei1206/LEBERT" -> "ShannonAI/ChineseBert"
"liuwei1206/LEBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"liuwei1206/LEBERT" -> "ljynlp/W2NER"
"liuwei1206/LEBERT" -> "fastnlp/TENER"
"liuwei1206/LEBERT" -> "ShannonAI/mrc-for-flat-nested-ner"
"liuwei1206/LEBERT" -> "wavewangyue/ner"
"liuwei1206/LEBERT" -> "lonePatient/BERT-NER-Pytorch"
"liuwei1206/LEBERT" -> "yhcc/BARTNER"
"liuwei1206/LEBERT" -> "ShannonAI/dice_loss_for_NLP"
"liuwei1206/LEBERT" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"liuwei1206/LEBERT" -> "LeePleased/NegSampling-NER"
"liuwei1206/LEBERT" -> "yhcc/OntoNotes-5.0-NER"
"liuwei1206/LEBERT" -> "loujie0822/DeepIE"
"luyaojie/Text2Event" -> "THU-KEG/CLEVE"
"luyaojie/Text2Event" -> "raspberryice/gen-arg"
"luyaojie/Text2Event" -> "nlpcl-lab/ace2005-preprocessing"
"luyaojie/Text2Event" -> "dwadden/dygiepp"
"luyaojie/Text2Event" -> "mayubo2333/PAIE"
"luyaojie/Text2Event" -> "xinyadu/eeqa"
"luyaojie/Text2Event" -> "PlusLabNLP/DEGREE"
"luyaojie/Text2Event" -> "JiaweiSheng/CasEE"
"luyaojie/Text2Event" -> "nlpcl-lab/bert-event-extraction"
"luyaojie/Text2Event" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"luyaojie/Text2Event" -> "carrie0307/DL_EventExtractionPapers"
"luyaojie/Text2Event" -> "lx865712528/EMNLP2018-JMEE"
"luyaojie/Text2Event" -> "universal-ie/UIE"
"luyaojie/Text2Event" -> "RunxinXu/GIT"
"luyaojie/Text2Event" -> "THU-KEG/MAVEN-dataset"
"mayubo2333/PAIE" -> "PlusLabNLP/DEGREE"
"mayubo2333/PAIE" -> "raspberryice/gen-arg"
"mayubo2333/PAIE" -> "RingBDStack/GDAP"
"mayubo2333/PAIE" -> "xinyadu/eeqa"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ZihanWangKi/CrossWeigh"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "juntaoy/biaffine-ner"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "juand-r/entity-recognition-datasets"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "neulab/Text-Summarization-Papers" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "allanj/ner_with_dependency"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yahshibu/nested-ner-tacl2020-transformers" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "thunlp/Few-NERD" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "neulab/nn4nlp-concepts" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yhcc/OntoNotes-5.0-NER"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "allanj/pytorch_lstmcrf"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ShannonAI/mrc-for-flat-nested-ner"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "allanj/ner_incomplete_annotation"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "shangjingbo1226/AutoNER"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ZhixiuYe/HSCRF-pytorch"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"ownthink/robot" -> "ownthink/KnowledgeGraph"
"ownthink/robot" -> "ownthink/Semantic" ["e"=1]
"ownthink/robot" -> "ownthink/Jiagu"
"ownthink/robot" -> "ownthink/KG-View"
"ownthink/robot" -> "ownthink/KnowledgeGraphData"
"ownthink/robot" -> "zhangziliang04/kgRobot"
"ownthink/robot" -> "WenRichard/KBQA-BERT"
"ownthink/robot" -> "zhihao-chen/QASystemOnMedicalGraph"
"ownthink/robot" -> "charlesXu86/Chatbot_CN"
"ownthink/robot" -> "cnschema/cnschema"
"ownthink/robot" -> "kangzhun/KnowledgeGraph-QA-Service"
"ownthink/robot" -> "liuhuanyong/QASystemOnMedicalKG"
"ownthink/robot" -> "SimmerChan/KG-demo-for-movie"
"ownthink/robot" -> "qhduan/ConversationalRobotDesign" ["e"=1]
"ownthink/robot" -> "qq547276542/Agriculture_KnowledgeGraph"
"Onion12138/CasRelPyTorch" -> "xuyouqian/casrel_pytorch"
"Onion12138/CasRelPyTorch" -> "longlongman/CasRel-pytorch-reimplement"
"Onion12138/CasRelPyTorch" -> "weizhepei/CasRel"
"Onion12138/CasRelPyTorch" -> "xhw205/GPLinker_torch"
"Onion12138/CasRelPyTorch" -> "powerycy/TPlinker-ycy"
"Onion12138/CasRelPyTorch" -> "taishan1994/OneRel_chinese"
"chenlb/mmseg4j-solr" -> "chenlb/mmseg4j-core"
"chenlb/mmseg4j-solr" -> "medcl/elasticsearch-analysis-mmseg" ["e"=1]
"chenlb/mmseg4j-solr" -> "wks/ik-analyzer"
"chenlb/mmseg4j-solr" -> "lionsoul2014/jcseg"
"chenlb/mmseg4j-solr" -> "EugenePig/ik-analyzer-solr5"
"chenlb/mmseg4j-solr" -> "sing1ee/analyzer-solr"
"chenlb/mmseg4j-solr" -> "hankcs/hanlp-lucene-plugin"
"chenlb/mmseg4j-solr" -> "mlcsdev/mlcsseg"
"chenlb/mmseg4j-solr" -> "xpqiu/fnlp"
"chenlb/mmseg4j-solr" -> "sing1ee/jieba-solr"
"Hui-Li/multi-task-learning-example-PyTorch" -> "ranandalon/mtl"
"Hui-Li/multi-task-learning-example-PyTorch" -> "yaringal/multi-task-learning-example"
"Hui-Li/multi-task-learning-example-PyTorch" -> "hav4ik/Hydra"
"HaoyuHu/bert-multi-gpu" -> "guotong1988/BERT-multi-gpu"
"HaoyuHu/bert-multi-gpu" -> "guotong1988/BERT-GPU"
"HaoyuHu/bert-multi-gpu" -> "lambdal/bert"
"HaoyuHu/bert-multi-gpu" -> "JayYip/bert-multitask-learning"
"Vincent131499/Multi_Label_Classifier_finetune" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"Vincent131499/Multi_Label_Classifier_finetune" -> "Vincent131499/TextClassifier_Transformer"
"Vincent131499/Multi_Label_Classifier_finetune" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"Wangpeiyi9979/InformationExtractionDemo" -> "Wangpeiyi9979/IE-Bert-CNN"
"Wangpeiyi9979/InformationExtractionDemo" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"YC-wind/embedding_study" -> "Rokid/ELMo-chinese"
"YC-wind/embedding_study" -> "searobbersduck/ELMo_Chin"
"lambdal/bert" -> "HaoyuHu/bert-multi-gpu"
"lambdal/bert" -> "abditag2/bert"
"longlongman/CasRel-pytorch-reimplement" -> "weizhepei/CasRel"
"longlongman/CasRel-pytorch-reimplement" -> "Onion12138/CasRelPyTorch"
"longlongman/CasRel-pytorch-reimplement" -> "gaohongkui/TPLinker-NER"
"longlongman/CasRel-pytorch-reimplement" -> "ssnvxia/OneRel"
"longlongman/CasRel-pytorch-reimplement" -> "hy-struggle/PRGC"
"longlongman/CasRel-pytorch-reimplement" -> "powerycy/Lic2020-"
"longlongman/CasRel-pytorch-reimplement" -> "xhw205/GPLinker_torch"
"longlongman/CasRel-pytorch-reimplement" -> "Anery/RSAN" ["e"=1]
"longlongman/CasRel-pytorch-reimplement" -> "JunnYu/GPLinker_pytorch"
"longlongman/CasRel-pytorch-reimplement" -> "zhengyima/kg-baseline-pytorch"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "murray-z/multi_label_classification"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "TianWuYuJiangHenShou/Multi-label_Text_classification"
"nghuyong/ERNIE-Pytorch" -> "airaria/TextBrewer"
"nghuyong/ERNIE-Pytorch" -> "lonePatient/albert_pytorch"
"nghuyong/ERNIE-Pytorch" -> "brightmart/roberta_zh"
"nghuyong/ERNIE-Pytorch" -> "ymcui/Chinese-PreTrained-XLNet"
"nghuyong/ERNIE-Pytorch" -> "thunlp/ERNIE"
"nghuyong/ERNIE-Pytorch" -> "dbiir/UER-py"
"nghuyong/ERNIE-Pytorch" -> "loujie0822/DeepIE"
"nghuyong/ERNIE-Pytorch" -> "ShannonAI/mrc-for-flat-nested-ner"
"nghuyong/ERNIE-Pytorch" -> "brightmart/albert_zh"
"nghuyong/ERNIE-Pytorch" -> "PaddlePaddle/ERNIE"
"nghuyong/ERNIE-Pytorch" -> "universal-ie/UIE"
"nghuyong/ERNIE-Pytorch" -> "lonePatient/BERT-NER-Pytorch"
"nghuyong/ERNIE-Pytorch" -> "ymcui/Chinese-ELECTRA"
"nghuyong/ERNIE-Pytorch" -> "PaddlePaddle/LARK"
"nghuyong/ERNIE-Pytorch" -> "zhanlaoban/EDA_NLP_for_Chinese"
"s-top/Baike-KnowledgeGraph" -> "lixiang0/WEB_KG"
"s-top/Baike-KnowledgeGraph" -> "Honlan/starwar-visualization" ["e"=1]
"s-top/Baike-KnowledgeGraph" -> "kangzhun/KnowledgeGraph-QA-Service"
"s-top/Baike-KnowledgeGraph" -> "CrisJk/Agriculture-KnowledgeGraph-Data"
"Y1ran/NLP-BERT--ChineseVersion" -> "NLPScott/bert-Chinese-classification-task"
"Y1ran/NLP-BERT--ChineseVersion" -> "Jiakui/awesome-bert"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/sentiment_analysis_fine_grain"
"Y1ran/NLP-BERT--ChineseVersion" -> "ymcui/Chinese-PreTrained-XLNet"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/bert_language_understanding"
"Y1ran/NLP-BERT--ChineseVersion" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"Y1ran/NLP-BERT--ChineseVersion" -> "ProHiryu/bert-chinese-ner"
"Y1ran/NLP-BERT--ChineseVersion" -> "PaddlePaddle/LARK"
"Y1ran/NLP-BERT--ChineseVersion" -> "yuanxiaosc/BERT_Paper_Chinese_Translation"
"Y1ran/NLP-BERT--ChineseVersion" -> "terrifyzhao/bert-utils"
"Y1ran/NLP-BERT--ChineseVersion" -> "zhpmatrix/bert-sequence-tagging"
"Y1ran/NLP-BERT--ChineseVersion" -> "crownpku/Information-Extraction-Chinese"
"Y1ran/NLP-BERT--ChineseVersion" -> "kyzhouhzau/BERT-NER"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/albert_zh"
"Y1ran/NLP-BERT--ChineseVersion" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"ownthink/KG-View" -> "qiu997018209/KnowledgeGraph"
"ownthink/KG-View" -> "ownthink/robot"
"ownthink/KG-View" -> "ownthink/KnowledgeGraph"
"ownthink/KG-View" -> "s-top/Baike-KnowledgeGraph"
"ownthink/KG-View" -> "molamolaxxx/KGView" ["e"=1]
"ownthink/KG-View" -> "MiracleTanC/Neo4j-KGBuilder" ["e"=1]
"ownthink/KG-View" -> "lixiang0/WEB_KG"
"ownthink/KG-View" -> "vivianLL/QASystemOnHepatopathyKG"
"ownthink/KG-View" -> "percent4/spo_extract_platform"
"ownthink/KG-View" -> "YeYzheng/KGQA-Based-On-medicine"
"IceFlameWorm/NLP_Datasets" -> "pluto-junzeng/CNSD"
"thunlp/PL-Marker" -> "Coopercoppers/PFN"
"thunlp/PL-Marker" -> "princeton-nlp/PURE"
"thunlp/PL-Marker" -> "ssnvxia/OneRel"
"thunlp/PL-Marker" -> "hy-struggle/PRGC"
"thunlp/PL-Marker" -> "Receiling/UniRE"
"thunlp/PL-Marker" -> "4AI/TDEER"
"thunlp/PL-Marker" -> "universal-ie/UIE"
"thunlp/PL-Marker" -> "ljynlp/W2NER"
"thunlp/PL-Marker" -> "xhw205/Efficient-GlobalPointer-torch"
"thunlp/PL-Marker" -> "yhcc/BARTNER"
"IrvingBei/simple_movie_qa_with_KG" -> "IrvingBei/chatbot_with_IR"
"IrvingBei/simple_movie_qa_with_KG" -> "weizhixiaoyi/DouBan-KGQA"
"IrvingBei/simple_movie_qa_with_KG" -> "vivianLL/QASystemOnHepatopathyKG"
"IrvingBei/simple_movie_qa_with_KG" -> "kangzhun/KnowledgeGraph-QA-Service"
"IrvingBei/simple_movie_qa_with_KG" -> "zhihao-chen/QASystemOnMedicalGraph"
"IrvingBei/simple_movie_qa_with_KG" -> "zhangtao-seu/Jay_KG"
"IrvingBei/simple_movie_qa_with_KG" -> "YeYzheng/KGQA-Based-On-medicine"
"Ricardokevins/Bert-In-Relation-Extraction" -> "Ricardokevins/Kevinpro-NLP-demo"
"Ricardokevins/Bert-In-Relation-Extraction" -> "taishan1994/pytorch_triple_extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "Jacen789/relation-extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "percent4/people_relation_extract"
"Ricardokevins/Bert-In-Relation-Extraction" -> "xhw205/GPLinker_torch"
"Ricardokevins/Bert-In-Relation-Extraction" -> "zhengyima/kg-baseline-pytorch"
"Ricardokevins/Bert-In-Relation-Extraction" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "mangonihao/EntityRelationExtraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "Mryangkaitong/Chinese_NRE"
"Ricardokevins/Bert-In-Relation-Extraction" -> "buppt/ChineseNRE"
"Ricardokevins/Bert-In-Relation-Extraction" -> "zhoujx4/NLP-Series-relation-extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "taishan1994/pytorch_bert_relation_extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "yuanxiaosc/Entity-Relation-Extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "taishan1994/chinese_information_extraction"
"Ricardokevins/Bert-In-Relation-Extraction" -> "NeilGY/NER_entityRelationExtration"
"renjunxiang/Text-Classification" -> "percent4/Sentiment_Analysis"
"renjunxiang/Text-Classification" -> "lc222/text_classification_AI100" ["e"=1]
"renjunxiang/Text-Classification" -> "cjymz886/text-cnn"
"fastnlp/CPT" -> "renmada/t5-pegasus-pytorch"
"fastnlp/CPT" -> "thu-coai/EVA"
"fastnlp/CPT" -> "ZhuiyiTechnology/t5-pegasus"
"fastnlp/CPT" -> "YunwenTechnology/Unilm"
"fastnlp/CPT" -> "yxuansu/SimCTG" ["e"=1]
"fastnlp/CPT" -> "yhcc/BARTNER"
"fastnlp/CPT" -> "HillZhang1999/MuCGEC" ["e"=1]
"fastnlp/CPT" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"fastnlp/CPT" -> "destwang/CTC2021" ["e"=1]
"fastnlp/CPT" -> "SunnyGJing/t5-pegasus-chinese"
"fastnlp/CPT" -> "ShannonAI/ChineseBert"
"fastnlp/CPT" -> "lemon234071/clean-dialog"
"fastnlp/CPT" -> "thu-coai/CDial-GPT"
"Coldog2333/Financial-NLP" -> "PolyKen/AlphaRenju_Zero"
"Coldog2333/Financial-NLP" -> "qq303067814/Reinforcement-learning-in-portfolio-management-"
"ShannonAI/glyce" -> "ymcui/Chinese-PreTrained-XLNet"
"ShannonAI/glyce" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/glyce" -> "ShannonAI/ChineseBert"
"ShannonAI/glyce" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/glyce" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/glyce" -> "sinovation/ZEN"
"ShannonAI/glyce" -> "jiesutd/LatticeLSTM"
"ShannonAI/glyce" -> "liuwei1206/CCW-NER"
"ShannonAI/glyce" -> "DianboWork/Graph4CNER"
"ShannonAI/glyce" -> "RowitZou/LGN"
"ShannonAI/glyce" -> "OYE93/Chinese-NLP-Corpus"
"TsinghuaAI/CPM-2-Pretrain" -> "TsinghuaAI/CPM-2-Finetune"
"TsinghuaAI/CPM-2-Pretrain" -> "TsinghuaAI/CPM"
"Cranial-XIX/CAGrad" -> "lorenmt/auto-lambda"
"Cranial-XIX/CAGrad" -> "adrianjav/rotograd"
"Cranial-XIX/CAGrad" -> "AvivNavon/nash-mtl"
"facebookresearch/mtrl" -> "facebookresearch/mtenv"
"facebookresearch/mtrl" -> "RchalYang/Soft-Module"
"facebookresearch/mtrl" -> "lmzintgraf/varibad" ["e"=1]
"isl-org/MultiObjectiveOptimization" -> "median-research-group/LibMTL"
"isl-org/MultiObjectiveOptimization" -> "Xi-L/ParetoMTL"
"isl-org/MultiObjectiveOptimization" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"isl-org/MultiObjectiveOptimization" -> "Mikoto10032/AutomaticWeightedLoss"
"isl-org/MultiObjectiveOptimization" -> "brianlan/pytorch-grad-norm"
"isl-org/MultiObjectiveOptimization" -> "mit-gfx/ContinuousParetoMTL"
"isl-org/MultiObjectiveOptimization" -> "WeiChengTseng/Pytorch-PCGrad"
"isl-org/MultiObjectiveOptimization" -> "hav4ik/Hydra"
"isl-org/MultiObjectiveOptimization" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"isl-org/MultiObjectiveOptimization" -> "yaringal/multi-task-learning-example"
"isl-org/MultiObjectiveOptimization" -> "hosseinshn/Basic-Multi-task-Learning"
"isl-org/MultiObjectiveOptimization" -> "lorenmt/mtan"
"isl-org/MultiObjectiveOptimization" -> "lorenmt/auto-lambda"
"isl-org/MultiObjectiveOptimization" -> "Cranial-XIX/CAGrad"
"isl-org/MultiObjectiveOptimization" -> "Manchery/awesome-multi-task-learning"
"Mikoto10032/AutomaticWeightedLoss" -> "ranandalon/mtl"
"Mikoto10032/AutomaticWeightedLoss" -> "brianlan/pytorch-grad-norm"
"Mikoto10032/AutomaticWeightedLoss" -> "yaringal/multi-task-learning-example"
"Mikoto10032/AutomaticWeightedLoss" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"Mikoto10032/AutomaticWeightedLoss" -> "isl-org/MultiObjectiveOptimization"
"Mikoto10032/AutomaticWeightedLoss" -> "lorenmt/mtan"
"Mikoto10032/AutomaticWeightedLoss" -> "Hui-Li/multi-task-learning-example-PyTorch"
"Mikoto10032/AutomaticWeightedLoss" -> "oscarkey/multitask-learning"
"Mikoto10032/AutomaticWeightedLoss" -> "AvivNavon/AuxiLearn"
"Mikoto10032/AutomaticWeightedLoss" -> "median-research-group/LibMTL"
"Mikoto10032/AutomaticWeightedLoss" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"Mikoto10032/AutomaticWeightedLoss" -> "hosseinshn/GradNorm"
"Mikoto10032/AutomaticWeightedLoss" -> "hosseinshn/Basic-Multi-task-Learning"
"Mikoto10032/AutomaticWeightedLoss" -> "intel-isl/MultiObjectiveOptimization"
"DannyLee1991/ExtractTriples" -> "SeanLee97/TripleIE"
"SeanLee97/TripleIE" -> "DannyLee1991/ExtractTriples"
"SeanLee97/TripleIE" -> "mengxiaoxu/entity_relation_extraction"
"twjiang/fact_triple_extraction" -> "liuhuanyong/EventTriplesExtraction"
"twjiang/fact_triple_extraction" -> "chapzq77/LTP_Python_Interface"
"twjiang/fact_triple_extraction" -> "twjiang/NamedEntity_realtion_extraction"
"twjiang/fact_triple_extraction" -> "mengxiaoxu/entity_relation_extraction"
"twjiang/fact_triple_extraction" -> "lemonhu/open-entity-relation-extraction"
"twjiang/fact_triple_extraction" -> "lixiang0/WEB_KG"
"twjiang/fact_triple_extraction" -> "SeanLee97/TripleIE"
"twjiang/fact_triple_extraction" -> "mengxiaoxu/economic_audit_knowledge_graph"
"twjiang/fact_triple_extraction" -> "crownpku/Information-Extraction-Chinese"
"twjiang/fact_triple_extraction" -> "liuhuanyong/CausalityEventExtraction"
"twjiang/fact_triple_extraction" -> "kangzhun/KnowledgeGraph-QA-Service"
"twjiang/fact_triple_extraction" -> "HIT-SCIR/pyltp"
"twjiang/fact_triple_extraction" -> "xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"twjiang/fact_triple_extraction" -> "percent4/ccks_triple_extract"
"chentao1999/MedicalRelationExtraction" -> "lwgkzl/Covid19-NLP"
"thunlp/ERNIE" -> "PaddlePaddle/LARK"
"thunlp/ERNIE" -> "zihangdai/xlnet" ["e"=1]
"thunlp/ERNIE" -> "namisan/mt-dnn" ["e"=1]
"thunlp/ERNIE" -> "autoliuweijie/K-BERT"
"thunlp/ERNIE" -> "brightmart/roberta_zh"
"thunlp/ERNIE" -> "thunlp/OpenKE" ["e"=1]
"thunlp/ERNIE" -> "nghuyong/ERNIE-Pytorch"
"thunlp/ERNIE" -> "PaddlePaddle/ERNIE"
"thunlp/ERNIE" -> "brightmart/albert_zh"
"thunlp/ERNIE" -> "thunlp/OpenCLaP"
"thunlp/ERNIE" -> "thunlp/PLMpapers" ["e"=1]
"thunlp/ERNIE" -> "jiesutd/LatticeLSTM"
"thunlp/ERNIE" -> "ymcui/Chinese-BERT-wwm"
"thunlp/ERNIE" -> "thunlp/OpenNRE"
"thunlp/ERNIE" -> "allenai/bilm-tf" ["e"=1]
"Keson96/SynoCN" -> "ashengtx/CilinSimilarity"
"Keson96/SynoCN" -> "yaleimeng/Final_word_Similarity"
"Keson96/SynoCN" -> "tigerchen52/synonym_detection"
"Keson96/SynoCN" -> "guotong1988/chinese_dictionary"
"ShannonAI/ChineseBert" -> "liuwei1206/LEBERT"
"ShannonAI/ChineseBert" -> "DaDaMrX/ReaLiSe" ["e"=1]
"ShannonAI/ChineseBert" -> "liushulinle/PLOME" ["e"=1]
"ShannonAI/ChineseBert" -> "wdimmy/Automatic-Corpus-Generation" ["e"=1]
"ShannonAI/ChineseBert" -> "lonePatient/awesome-pretrained-chinese-nlp-models"
"ShannonAI/ChineseBert" -> "dropreg/R-Drop"
"ShannonAI/ChineseBert" -> "ACL2020SpellGCN/SpellGCN" ["e"=1]
"ShannonAI/ChineseBert" -> "ZhuiyiTechnology/pretrained-models"
"ShannonAI/ChineseBert" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/ChineseBert" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/ChineseBert" -> "FDChongLi/TwoWaysToImproveCSC" ["e"=1]
"ShannonAI/ChineseBert" -> "fastnlp/CPT"
"ShannonAI/ChineseBert" -> "ShannonAI/glyce"
"ShannonAI/ChineseBert" -> "ymcui/MacBERT"
"ShannonAI/ChineseBert" -> "destwang/CTCResources" ["e"=1]
"bojone/CoSENT" -> "shawroad/CoSENT_Pytorch"
"bojone/CoSENT" -> "ZhuiyiTechnology/roformer-sim"
"bojone/CoSENT" -> "bojone/BERT-whitening"
"bojone/CoSENT" -> "pluto-junzeng/CNSD"
"bojone/CoSENT" -> "zhoujx4/NLP-Series-sentence-embeddings"
"bojone/CoSENT" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"bojone/CoSENT" -> "bojone/SimCSE"
"bojone/CoSENT" -> "ZhuiyiTechnology/simbert"
"bojone/CoSENT" -> "bojone/KgCLUE-bert4keras"
"bojone/CoSENT" -> "xiangking/PyTorch_CoSENT"
"bojone/CoSENT" -> "bojone/GPLinker"
"bojone/CoSENT" -> "zejunwang1/CSTS"
"bojone/CoSENT" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"bojone/CoSENT" -> "bohanli/BERT-flow"
"gaohongkui/GlobalPointer_pytorch" -> "xhw205/GlobalPointer_torch"
"gaohongkui/GlobalPointer_pytorch" -> "xhw205/Efficient-GlobalPointer-torch"
"gaohongkui/GlobalPointer_pytorch" -> "bojone/GlobalPointer"
"gaohongkui/GlobalPointer_pytorch" -> "xhw205/GPLinker_torch"
"gaohongkui/GlobalPointer_pytorch" -> "gaohongkui/TPLinker-NER"
"gaohongkui/GlobalPointer_pytorch" -> "powerycy/DeepKg"
"gaohongkui/GlobalPointer_pytorch" -> "ljynlp/W2NER"
"gaohongkui/GlobalPointer_pytorch" -> "universal-ie/UIE"
"gaohongkui/GlobalPointer_pytorch" -> "z814081807/DeepNER"
"gaohongkui/GlobalPointer_pytorch" -> "nilboy/gaic_track3_pair_sim"
"gaohongkui/GlobalPointer_pytorch" -> "Akeepers/LEAR"
"gaohongkui/GlobalPointer_pytorch" -> "powerycy/Efficient-GlobalPointer"
"gaohongkui/GlobalPointer_pytorch" -> "xiangking/ark-nlp" ["e"=1]
"gaohongkui/GlobalPointer_pytorch" -> "JunnYu/RoFormer_pytorch"
"gaohongkui/GlobalPointer_pytorch" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"zhanzecheng/Chinese_segment_augment" -> "bojone/word-discovery"
"zhanzecheng/Chinese_segment_augment" -> "zhanzecheng/The-Art-Of-Programming-By-July"
"zhanzecheng/Chinese_segment_augment" -> "Moonshile/ChineseWordSegmentation"
"zhanzecheng/Chinese_segment_augment" -> "Rayarrow/New-Word-Discovery"
"zhanzecheng/Chinese_segment_augment" -> "sing1ee/dict_build"
"zhanzecheng/Chinese_segment_augment" -> "izisong/new-words-discovery"
"zhanzecheng/Chinese_segment_augment" -> "blmoistawinde/HarvestText"
"zhanzecheng/Chinese_segment_augment" -> "liuhuanyong/EventTriplesExtraction"
"zhanzecheng/Chinese_segment_augment" -> "yaleimeng/Final_word_Similarity"
"zhanzecheng/Chinese_segment_augment" -> "smoothnlp/SmoothNLP"
"zhanzecheng/Chinese_segment_augment" -> "lpty/nlp_base"
"zhanzecheng/Chinese_segment_augment" -> "ownthink/Jiagu"
"zhanzecheng/Chinese_segment_augment" -> "bigzhao/Keyword_Extraction"
"zhanzecheng/Chinese_segment_augment" -> "huyingxi/Synonyms"
"zhanzecheng/Chinese_segment_augment" -> "zhanzecheng/Time_NLP"
"GlassyWing/transformer-word-segmenter" -> "GlassyWing/bi-lstm-crf"
"bojone/BERT-whitening" -> "autoliuweijie/BERT-whitening-pytorch"
"bojone/BERT-whitening" -> "bohanli/BERT-flow"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/simbert"
"bojone/BERT-whitening" -> "bojone/SimCSE"
"bojone/BERT-whitening" -> "bojone/CoSENT"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/pretrained-models"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/roformer-sim"
"bojone/BERT-whitening" -> "zhengyanzhao1997/NLP-model"
"bojone/BERT-whitening" -> "yym6472/ConSERT"
"bojone/BERT-whitening" -> "princeton-nlp/SimCSE"
"bojone/BERT-whitening" -> "pluto-junzeng/CNSD"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/roformer"
"bojone/BERT-whitening" -> "ymcui/Chinese-ELECTRA"
"bojone/BERT-whitening" -> "CLUEbenchmark/FewCLUE"
"bojone/BERT-whitening" -> "dropreg/R-Drop"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "shawroad/CoSENT_Pytorch"
"scienceasdf/medical-books" -> "xiaopangxia/TCM-Ancient-Books" ["e"=1]
"scienceasdf/medical-books" -> "Toyhom/Chinese-medical-dialogue-data"
"scienceasdf/medical-books" -> "GanjinZero/awesome_Chinese_medical_NLP"
"scienceasdf/medical-books" -> "flyyang/medical-news"
"scienceasdf/medical-books" -> "GanjinZero/ChineseEHRBert"
"scienceasdf/medical-books" -> "alibaba-research/ChineseBLUE"
"scienceasdf/medical-books" -> "lrs1353281004/Chinese_medical_NLP"
"scienceasdf/medical-books" -> "zhangsheng93/cMedQA2"
"scienceasdf/medical-books" -> "thunlp/THUOCL"
"scienceasdf/medical-books" -> "gcaxuxi/cluster_2" ["e"=1]
"scienceasdf/medical-books" -> "OYE93/Chinese-NLP-Corpus"
"scienceasdf/medical-books" -> "lxy444/bertcner"
"scienceasdf/medical-books" -> "WENGSYX/Chinese-Word2vec-Medicine"
"pupuk/address-smart-parse" -> "wzc570738205/smart_parse"
"pupuk/address-smart-parse" -> "pupuk/address"
"pupuk/address-smart-parse" -> "pupuk/blog"
"wzc570738205/smart_parse" -> "pupuk/address-smart-parse"
"wzc570738205/smart_parse" -> "wzc570738205/smartParsePro"
"wzc570738205/smart_parse" -> "akebe/address-parse"
"PengboLiu/Doc2Vec-Document-Similarity" -> "phychaos/TextSimilar"
"PengboLiu/Doc2Vec-Document-Similarity" -> "BonnieHuangxin/Bert_sentence_similarity"
"danan0755/Bert_Classifier" -> "rsanshierli/EasyBert"
"hy-struggle/PRGC" -> "ssnvxia/OneRel"
"hy-struggle/PRGC" -> "taishan1994/OneRel_chinese"
"wuba/dl_inference" -> "wuba/qa_match"
"wuba/dl_inference" -> "wuba/LPA-Detector"
"wuba/dl_inference" -> "layerism/TensorRT-Inference-Server-Tutorial" ["e"=1]
"wuba/dl_inference" -> "lvze92/DMR" ["e"=1]
"wuba/dl_inference" -> "ShannonAI/service-streamer"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "yamonc/New-Pytorch-Chinese"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "qingkongzhiqian/GPT2-Summary"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "HorieYuan/TransformerTextSummarization"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "God-Fish-X/Extractable-automatic-Text"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "liucongg/GPT2-NewsTitle"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "ztz818/Automatic-generation-of-text-summaries"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" ["e"=1]
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "yongzhuo/nlg-yongzhuo"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "rohithreddy024/Text-Summarizer-Pytorch" ["e"=1]
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "bojone/SPACES"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "renmada/t5-pegasus-pytorch"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "ZhuiyiTechnology/t5-pegasus"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "SunnyGJing/t5-pegasus-chinese"
"wavewangyue/ner" -> "sohutv/hotcaffeine" ["e"=1]
"wavewangyue/ner" -> "baimingxuan/vue3-admin-design" ["e"=1]
"wavewangyue/ner" -> "KylinC/mmVital-Signs" ["e"=1]
"wavewangyue/ner" -> "HandsomeLeft/Veaser" ["e"=1]
"wavewangyue/ner" -> "loujie0822/DeepIE"
"wavewangyue/ner" -> "LeeSureman/Flat-Lattice-Transformer"
"wavewangyue/ner" -> "lonePatient/BERT-NER-Pytorch"
"wavewangyue/ner" -> "Beseting/NesEmulator" ["e"=1]
"wavewangyue/ner" -> "wwwlike/vlife-admin-react" ["e"=1]
"wavewangyue/ner" -> "sohutv/cachecloud-client" ["e"=1]
"wavewangyue/ner" -> "z814081807/DeepNER"
"wavewangyue/ner" -> "sohutv/redisearch-docs" ["e"=1]
"wavewangyue/ner" -> "Apricity001/Chatserver" ["e"=1]
"wavewangyue/ner" -> "v-mipeng/LexiconAugmentedNER"
"wavewangyue/ner" -> "qiufengyuyi/sequence_tagging"
"airaria/TextPruner" -> "airaria/TextBrewer"
"airaria/TextPruner" -> "ymcui/MacBERT"
"airaria/TextPruner" -> "ymcui/LERT" ["e"=1]
"airaria/TextPruner" -> "ymcui/PERT" ["e"=1]
"airaria/TextPruner" -> "princeton-nlp/CoFiPruning" ["e"=1]
"airaria/TextPruner" -> "destwang/CTCResources" ["e"=1]
"HuangCongQing/AI_competitions" -> "zhpmatrix/nlp-competitions-list-review"
"HuangCongQing/AI_competitions" -> "AI-Sphere/Awesome-Noah"
"HuangCongQing/AI_competitions" -> "Smilexuhc/Data-Competition-TopSolution" ["e"=1]
"HuangCongQing/AI_competitions" -> "geekinglcq/CDCS"
"HuangCongQing/AI_competitions" -> "greathope/CV_Competitions" ["e"=1]
"HuangCongQing/AI_competitions" -> "datawhalechina/competition-baseline" ["e"=1]
"HuangCongQing/AI_competitions" -> "sohucampus2019/coreEntityEmotion_baseline"
"HuangCongQing/AI_competitions" -> "heshuting555/NAIC_Person_ReID_DMT" ["e"=1]
"HuangCongQing/AI_competitions" -> "DLLXW/data-science-competition" ["e"=1]
"fastnlp/TENER" -> "LeeSureman/Flat-Lattice-Transformer"
"fastnlp/TENER" -> "ShannonAI/mrc-for-flat-nested-ner"
"fastnlp/TENER" -> "yhcc/OntoNotes-5.0-NER"
"fastnlp/TENER" -> "v-mipeng/LexiconAugmentedNER"
"fastnlp/TENER" -> "liuwei1206/LEBERT"
"fastnlp/TENER" -> "juntaoy/biaffine-ner"
"fastnlp/TENER" -> "yhcc/BARTNER"
"fastnlp/TENER" -> "jiesutd/LatticeLSTM"
"fastnlp/TENER" -> "qiufengyuyi/sequence_tagging"
"fastnlp/TENER" -> "LeeSureman/Batch_Parallel_LatticeLSTM"
"fastnlp/TENER" -> "DianboWork/Graph4CNER"
"fastnlp/TENER" -> "ShannonAI/dice_loss_for_NLP"
"fastnlp/TENER" -> "liuwei1206/CCW-NER"
"fastnlp/TENER" -> "Nealcly/BiLSTM-LAN"
"fastnlp/TENER" -> "markus-eberts/spert" ["e"=1]
"guillaumegenthial/tf_metrics" -> "guillaumegenthial/tf_ner"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "scofield7419/Hierarchical-BiLSTM-CNN"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "kamalkraj/BERT-NER"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "UKPLab/elmo-bilstm-cnn-crf"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "Hironsan/anago"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "juand-r/entity-recognition-datasets"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "guillaumegenthial/tf_ner"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "kyzhouhzau/BERT-NER"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "guillaumegenthial/sequence_tagging"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "ZhixiuYe/HSCRF-pytorch"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "monikkinom/ner-lstm"
"foamliu/Machine-Translation" -> "foamliu/Machine-Translation-v2"
"foamliu/Machine-Translation" -> "VectorFist/RNN-NMT"
"foamliu/Machine-Translation" -> "foamliu/Transformer"
"weizhixiaoyi/DouBan-KGQA" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"weizhixiaoyi/DouBan-KGQA" -> "IrvingBei/simple_movie_qa_with_KG"
"weizhixiaoyi/DouBan-KGQA" -> "weizhixiaoyi/DouBan-Spider"
"weizhixiaoyi/DouBan-KGQA" -> "vivianLL/QASystemOnHepatopathyKG"
"weizhixiaoyi/DouBan-KGQA" -> "zhangtao-seu/Jay_KG"
"weizhixiaoyi/DouBan-KGQA" -> "WangShengguang/ccks-2020" ["e"=1]
"weizhixiaoyi/DouBan-KGQA" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"weizhixiaoyi/DouBan-KGQA" -> "WenRichard/KBQA-BERT"
"weizhixiaoyi/DouBan-KGQA" -> "BDBC-KG-NLP/QA-Survey"
"weizhixiaoyi/DouBan-KGQA" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"weizhixiaoyi/DouBan-KGQA" -> "chizhu/KGQA_HLM"
"weizhixiaoyi/DouBan-KGQA" -> "kangzhun/KnowledgeGraph-QA-Service"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "EricLingRui/NLP-tools"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "GlassyWing/bi-lstm-crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "FanhuaandLuomu/ParseLawDocuments" ["e"=1]
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "shiyybua/NER"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "buppt/ChineseNER"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "shen1994/chinese_bilstm_cnn_crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "zhang17173/Event-Extraction"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "renjunxiang/Competition_CAIL" ["e"=1]
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "Determined22/zh-NER-TF"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "hankcs/ID-CNN-CWS"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "supercoderhawk/DNN_CWS"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "fudannlp16/CWS_Dict"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "zjy-ucas/ChineseNER"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "liuhuanyong/LawCrimeMining"
"ArthurRizar/tensorflow_ernie" -> "wipen/bert_and_ernie"
"ArthurRizar/tensorflow_ernie" -> "qiangsiwei/bert_distill"
"ArthurRizar/tensorflow_ernie" -> "ymcui/Chinese-PreTrained-XLNet"
"CLUEbenchmark/KgCLUE" -> "bojone/KgCLUE-bert4keras"
"CLUEbenchmark/KgCLUE" -> "BDBC-KG-NLP/QA-Survey-CN"
"CLUEbenchmark/KgCLUE" -> "wangle1218/KBQA-for-Diagnosis"
"CLUEbenchmark/KgCLUE" -> "malllabiisc/EmbedKGQA" ["e"=1]
"DianboWork/Graph4CNER" -> "RowitZou/LGN"
"DianboWork/Graph4CNER" -> "CPF-NLPR/AT4ChineseNER"
"DianboWork/Graph4CNER" -> "yhcc/OntoNotes-5.0-NER"
"DianboWork/Graph4CNER" -> "liuwei1206/CCW-NER"
"JiaweiSheng/CasEE" -> "TimeBurningFish/FewFC"
"JiaweiSheng/CasEE" -> "yanghang111/DCFEE"
"Meelfy/pytorch_pretrained_BERT" -> "yongbowin/pytorch-pretrained-BERT_annotation"
"Meelfy/pytorch_pretrained_BERT" -> "lonePatient/NeZha_Chinese_PyTorch"
"Shuang0420/knowledge_graph_demo" -> "Pelhans/Z_knowledge_graph"
"Shuang0420/knowledge_graph_demo" -> "SimmerChan/KG-demo-for-movie"
"Shuang0420/knowledge_graph_demo" -> "qq547276542/Agriculture_KnowledgeGraph"
"Shuang0420/knowledge_graph_demo" -> "kangzhun/KnowledgeGraph-QA-Service"
"Shuang0420/knowledge_graph_demo" -> "s-top/Baike-KnowledgeGraph"
"Shuang0420/knowledge_graph_demo" -> "CrisJk/Agriculture-KnowledgeGraph-Data"
"Shuang0420/knowledge_graph_demo" -> "cnschema/cnschema"
"Shuang0420/knowledge_graph_demo" -> "starcolon/vor-knowledge-graph"
"Shuang0420/knowledge_graph_demo" -> "memect/kg-beijing"
"Shuang0420/knowledge_graph_demo" -> "ownthink/KnowledgeGraph"
"Shuang0420/knowledge_graph_demo" -> "liuhuanyong/KnowledgeGraphSlides"
"Shuang0420/knowledge_graph_demo" -> "shiyybua/NER"
"Shuang0420/knowledge_graph_demo" -> "thunlp/TensorFlow-NRE" ["e"=1]
"Shuang0420/knowledge_graph_demo" -> "crownpku/Information-Extraction-Chinese"
"Shuang0420/knowledge_graph_demo" -> "zhangziliang04/kgRobot"
"carrie0307/DL_EventExtractionPapers" -> "xiaoqian19940510/Event-Extraction"
"carrie0307/DL_EventExtractionPapers" -> "BaptisteBlouin/EventExtractionPapers"
"carrie0307/DL_EventExtractionPapers" -> "nlpcl-lab/ace2005-preprocessing"
"carrie0307/DL_EventExtractionPapers" -> "dolphin-zs/Doc2EDAG"
"carrie0307/DL_EventExtractionPapers" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"carrie0307/DL_EventExtractionPapers" -> "THU-KEG/MAVEN-dataset"
"carrie0307/DL_EventExtractionPapers" -> "nlpcl-lab/bert-event-extraction"
"carrie0307/DL_EventExtractionPapers" -> "xinyadu/eeqa"
"carrie0307/DL_EventExtractionPapers" -> "dwadden/dygiepp"
"carrie0307/DL_EventExtractionPapers" -> "Spico197/DocEE"
"carrie0307/DL_EventExtractionPapers" -> "luyaojie/Text2Event"
"carrie0307/DL_EventExtractionPapers" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"carrie0307/DL_EventExtractionPapers" -> "qiufengyuyi/event_extraction"
"carrie0307/DL_EventExtractionPapers" -> "raspberryice/gen-arg"
"carrie0307/DL_EventExtractionPapers" -> "mayubo2333/PAIE"
"cuishiyao96/eegcned" -> "TimeBurningFish/FewFC"
"cuishiyao96/eegcned" -> "thunlp/HMEAE"
"daixiangau/acl2020-transition-discontinuous-ner" -> "foxlf823/sodner"
"dolphin-zs/Doc2EDAG" -> "RunxinXu/GIT"
"dolphin-zs/Doc2EDAG" -> "Spico197/DocEE"
"dolphin-zs/Doc2EDAG" -> "carrie0307/DL_EventExtractionPapers"
"dolphin-zs/Doc2EDAG" -> "yanghang111/DCFEE"
"dolphin-zs/Doc2EDAG" -> "lx865712528/EMNLP2018-JMEE"
"dolphin-zs/Doc2EDAG" -> "xiaoqian19940510/Event-Extraction"
"dolphin-zs/Doc2EDAG" -> "xinyadu/doc_event_role"
"dolphin-zs/Doc2EDAG" -> "nlpcl-lab/bert-event-extraction"
"dolphin-zs/Doc2EDAG" -> "qiufengyuyi/event_extraction"
"dolphin-zs/Doc2EDAG" -> "BaptisteBlouin/EventExtractionPapers"
"dolphin-zs/Doc2EDAG" -> "lx865712528/ACL2019-ODEE"
"dolphin-zs/Doc2EDAG" -> "dwadden/dygiepp"
"dolphin-zs/Doc2EDAG" -> "THU-KEG/CLEVE"
"dolphin-zs/Doc2EDAG" -> "thunlp/Adv-ED"
"dolphin-zs/Doc2EDAG" -> "xinyadu/eeqa"
"juntaoy/biaffine-ner" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"juntaoy/biaffine-ner" -> "amir-zeldes/biaffine-ner"
"juntaoy/biaffine-ner" -> "tricktreat/locate-and-label"
"juntaoy/biaffine-ner" -> "ShannonAI/mrc-for-flat-nested-ner"
"juntaoy/biaffine-ner" -> "yhcc/OntoNotes-5.0-NER"
"juntaoy/biaffine-ner" -> "v-mipeng/LexiconAugmentedNER"
"juntaoy/biaffine-ner" -> "thecharm/boundary-aware-nested-ner" ["e"=1]
"juntaoy/biaffine-ner" -> "princeton-nlp/PURE"
"juntaoy/biaffine-ner" -> "yhcc/BARTNER"
"juntaoy/biaffine-ner" -> "thunlp/Few-NERD" ["e"=1]
"juntaoy/biaffine-ner" -> "dwadden/dygiepp"
"juntaoy/biaffine-ner" -> "LeeSureman/Flat-Lattice-Transformer"
"juntaoy/biaffine-ner" -> "fastnlp/TENER"
"juntaoy/biaffine-ner" -> "LorrinWWW/two-are-better-than-one"
"juntaoy/biaffine-ner" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"nlpcl-lab/ace2005-preprocessing" -> "nlpcl-lab/bert-event-extraction"
"nlpcl-lab/ace2005-preprocessing" -> "lx865712528/EMNLP2018-JMEE"
"nlpcl-lab/ace2005-preprocessing" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"nlpcl-lab/ace2005-preprocessing" -> "mgormley/ace-data-prep"
"nlpcl-lab/ace2005-preprocessing" -> "carrie0307/DL_EventExtractionPapers"
"nlpcl-lab/ace2005-preprocessing" -> "THU-KEG/MAVEN-dataset"
"nlpcl-lab/ace2005-preprocessing" -> "thunlp/Adv-ED"
"nlpcl-lab/ace2005-preprocessing" -> "BaptisteBlouin/EventExtractionPapers"
"nlpcl-lab/ace2005-preprocessing" -> "luyaojie/Text2Event"
"nlpcl-lab/ace2005-preprocessing" -> "thunlp/HMEAE"
"nlpcl-lab/ace2005-preprocessing" -> "dwadden/dygiepp"
"nlpcl-lab/ace2005-preprocessing" -> "xinyadu/eeqa"
"nlpcl-lab/ace2005-preprocessing" -> "carrie0307/ace2005parser"
"nlpcl-lab/ace2005-preprocessing" -> "raspberryice/gen-arg"
"nlpcl-lab/ace2005-preprocessing" -> "anoperson/jointEE-NN"
"smoothnlp/FinancialDatasets" -> "smoothnlp/SmoothNLP"
"smoothnlp/FinancialDatasets" -> "valuesimplex/FinBERT"
"smoothnlp/FinancialDatasets" -> "icoxfog417/awesome-financial-nlp"
"smoothnlp/FinancialDatasets" -> "Coldog2333/Financial-NLP"
"smoothnlp/FinancialDatasets" -> "smoothnlp/DomainWords"
"smoothnlp/FinancialDatasets" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"smoothnlp/FinancialDatasets" -> "startprogress/China_stock_announcement" ["e"=1]
"smoothnlp/FinancialDatasets" -> "ZhuiyiTechnology/pretrained-models"
"smoothnlp/SmoothNLP" -> "smoothnlp/FinancialDatasets"
"smoothnlp/SmoothNLP" -> "bojone/word-discovery"
"smoothnlp/SmoothNLP" -> "sing1ee/dict_build"
"smoothnlp/SmoothNLP" -> "dongrixinyu/chinese_keyphrase_extractor"
"smoothnlp/SmoothNLP" -> "panchunguang/ccks_baidu_entity_link"
"smoothnlp/SmoothNLP" -> "ZhuiyiTechnology/pretrained-models"
"smoothnlp/SmoothNLP" -> "yuanxiaosc/Entity-Relation-Extraction"
"smoothnlp/SmoothNLP" -> "yongzhuo/Macropodus"
"smoothnlp/SmoothNLP" -> "blmoistawinde/HarvestText"
"smoothnlp/SmoothNLP" -> "smoothnlp/DomainWords"
"smoothnlp/SmoothNLP" -> "liuhuanyong/ComplexEventExtraction"
"smoothnlp/SmoothNLP" -> "WenRichard/KBQA-BERT"
"smoothnlp/SmoothNLP" -> "lemonhu/stock-knowledge-graph"
"smoothnlp/SmoothNLP" -> "ownthink/Jiagu"
"smoothnlp/SmoothNLP" -> "autoliuweijie/FastBERT"
"thunlp/HMEAE" -> "cuishiyao96/eegcned"
"thunlp/HMEAE" -> "lx865712528/EMNLP2018-JMEE"
"thunlp/HMEAE" -> "xinyadu/eeqa"
"thunlp/HMEAE" -> "thunlp/Adv-ED"
"thunlp/HMEAE" -> "yubochen/NBTNGMA4ED"
"xinyadu/eeqa" -> "raspberryice/gen-arg"
"xinyadu/eeqa" -> "thunlp/HMEAE"
"xinyadu/eeqa" -> "THU-KEG/CLEVE"
"xinyadu/eeqa" -> "mayubo2333/PAIE"
"xinyadu/eeqa" -> "lx865712528/EMNLP2018-JMEE"
"xinyadu/eeqa" -> "thunlp/TLNN"
"xinyadu/eeqa" -> "cuishiyao96/eegcned"
"xinyadu/eeqa" -> "xinyadu/doc_event_role"
"xinyadu/eeqa" -> "nlpcl-lab/ace2005-preprocessing"
"xinyadu/eeqa" -> "jianliu-ml/EEasMRC"
"xinyadu/eeqa" -> "THU-KEG/MAVEN-dataset"
"xinyadu/eeqa" -> "qiufengyuyi/event_extraction"
"xinyadu/eeqa" -> "luyaojie/Text2Event"
"xinyadu/eeqa" -> "JiaweiSheng/CasEE"
"xinyadu/eeqa" -> "nlpcl-lab/bert-event-extraction"
"zlsdu/Word-Embedding" -> "yongzhuo/Keras-TextClassification"
"zlsdu/Word-Embedding" -> "msgi/nlp-journey"
"zlsdu/Word-Embedding" -> "terrifyzhao/bert-utils"
"zlsdu/Word-Embedding" -> "yongzhuo/nlp_xiaojiang"
"zlsdu/Word-Embedding" -> "WenRichard/KBQA-BERT"
"zlsdu/Word-Embedding" -> "terrifyzhao/text_matching"
"zlsdu/Word-Embedding" -> "liuhuanyong/ChineseEmbedding"
"zlsdu/Word-Embedding" -> "zhpmatrix/nlp-competitions-list-review"
"zlsdu/Word-Embedding" -> "ymcui/Chinese-XLNet"
"zlsdu/Word-Embedding" -> "yongzhuo/Macropodus"
"zlsdu/Word-Embedding" -> "jiangxinyang227/textClassifier"
"zlsdu/Word-Embedding" -> "zhaogaofeng611/TextMatch"
"zlsdu/Word-Embedding" -> "loujie0822/DeepIE"
"zlsdu/Word-Embedding" -> "brightmart/roberta_zh"
"zlsdu/Word-Embedding" -> "km1994/NLP-Interview-Notes"
"songyingxin/BERT-pytorch" -> "songyingxin/TextClassification-Pytorch"
"songyingxin/BERT-pytorch" -> "songyingxin/Bert-TextClassification"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "NLPScott/bert-Chinese-classification-task"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "brightmart/bert_language_understanding"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "brightmart/sentiment_analysis_fine_grain"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "Y1ran/NLP-BERT--ChineseVersion"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "TobiasLee/Text-Classification" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "real-brilliant/bert_chinese_pytorch"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "ProHiryu/bert-chinese-ner"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "songyingxin/Bert-TextClassification"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "zengbin93/jddc_solution_4th" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "terrifyzhao/bert-utils"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "Jiakui/awesome-bert"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "pengming617/bert_classification"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "PaddlePaddle/LARK"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "lc222/text_classification_AI100" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"Huijun-Cui/ATEC-NLP" -> "ziweipolaris/atec2018-nlp"
"Huijun-Cui/ATEC-NLP" -> "zle1992/atec"
"F-debug/Medical-named-entity-recognition" -> "kyzhouhzau/Clinical-NER"
"F-debug/Medical-named-entity-recognition" -> "liuhuanyong/MedicalNamedEntityRecognition"
"F-debug/Medical-named-entity-recognition" -> "2721485344/NERuselocal"
"F-debug/Medical-named-entity-recognition" -> "Pan-Rongqing/Chinese-Medical-Records-Named-Entity-Recognition"
"F-debug/Medical-named-entity-recognition" -> "mechine-learning/NER-ccks2019-"
"yangjianxin1/CPM" -> "TsinghuaAI/CPM-1-Generate"
"yangjianxin1/CPM" -> "yangjianxin1/GPT2-chitchat"
"yangjianxin1/CPM" -> "yangjianxin1/CLIP-Chinese"
"yangjianxin1/CPM" -> "thu-coai/CDial-GPT"
"yangjianxin1/CPM" -> "TsinghuaAI/CPM"
"yangjianxin1/CPM" -> "imcaspar/gpt2-ml"
"yangjianxin1/CPM" -> "thu-coai/EVA"
"yangjianxin1/CPM" -> "liucongg/GPT2-NewsTitle"
"yangjianxin1/CPM" -> "OpenBMB/BMInf"
"yangjianxin1/CPM" -> "lemon234071/clean-dialog"
"yangjianxin1/CPM" -> "Morizeyao/GPT2-Chinese"
"yangjianxin1/CPM" -> "ZhuiyiTechnology/simbert"
"yangjianxin1/CPM" -> "TsinghuaAI/CPM-2-Pretrain"
"yangjianxin1/CPM" -> "qingkongzhiqian/GPT2-Summary"
"yangjianxin1/CPM" -> "GaoPeng97/transformer-xl-chinese"
"yongzhuo/nlg-yongzhuo" -> "CLUEbenchmark/CLGE"
"yongzhuo/nlg-yongzhuo" -> "bojone/SPACES"
"yongzhuo/nlg-yongzhuo" -> "ztz818/Automatic-generation-of-text-summaries"
"yongzhuo/nlg-yongzhuo" -> "qingkongzhiqian/GPT2-Summary"
"yongzhuo/nlg-yongzhuo" -> "HorieYuan/TransformerTextSummarization"
"yongzhuo/nlg-yongzhuo" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"yongzhuo/nlg-yongzhuo" -> "425776024/bertsum-chinese"
"yongzhuo/nlg-yongzhuo" -> "yongzhuo/Macropodus"
"yongzhuo/nlg-yongzhuo" -> "wonderfulsuccess/chinese_abstractive_corpus"
"yongzhuo/nlg-yongzhuo" -> "YunwenTechnology/Unilm"
"yongzhuo/nlg-yongzhuo" -> "liucongg/GPT2-NewsTitle"
"yongzhuo/nlg-yongzhuo" -> "yamonc/New-Pytorch-Chinese"
"yongzhuo/nlg-yongzhuo" -> "xcfcode/Summarization-Papers" ["e"=1]
"yongzhuo/nlg-yongzhuo" -> "zhangfazhan/text_analysis_tools"
"yongzhuo/nlg-yongzhuo" -> "ZhuiyiTechnology/t5-pegasus"
"NLPchina/Word2VEC_java" -> "siegfang/word2vec"
"NLPchina/Word2VEC_java" -> "jsksxs360/Word2Vec"
"NLPchina/Word2VEC_java" -> "NLPchina/nlp-lang"
"NLPchina/Word2VEC_java" -> "medallia/Word2VecJava"
"NLPchina/Word2VEC_java" -> "NLPchina/ansj_seg"
"NLPchina/Word2VEC_java" -> "shibing624/similarity"
"NLPchina/Word2VEC_java" -> "ysc/QuestionAnsweringSystem"
"NLPchina/Word2VEC_java" -> "hankcs/LDA4j" ["e"=1]
"NLPchina/Word2VEC_java" -> "huaban/jieba-analysis"
"NLPchina/Word2VEC_java" -> "hankcs/TextRank"
"NLPchina/Word2VEC_java" -> "xpqiu/fnlp"
"NLPchina/Word2VEC_java" -> "ysc/word"
"NLPchina/Word2VEC_java" -> "bwaldvogel/liblinear-java" ["e"=1]
"NLPchina/Word2VEC_java" -> "NLPchina/elasticsearch-analysis-ansj" ["e"=1]
"NLPchina/Word2VEC_java" -> "HIT-SCIR/ltp4j"
"ivanhk/fastText_java" -> "vinhkhuc/JFastText"
"mayabot/fastText4j" -> "mayabot/mynlp"
"mayabot/fastText4j" -> "vinhkhuc/JFastText"
"mayabot/fastText4j" -> "linkfluence/fastText4j"
"mayabot/fastText4j" -> "ivanhk/fastText_java"
"shinezai/QASystemOnFinancialKG" -> "M0025/KnowledgeGraphOfA-shareCompanys"
"zacanger/profane-words" -> "coffee-and-fun/google-profanity-words"
"charlesXu86/Chatbot_CN" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"charlesXu86/Chatbot_CN" -> "lizhe2004/chatbot-list"
"charlesXu86/Chatbot_CN" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"charlesXu86/Chatbot_CN" -> "WenRichard/KBQA-BERT"
"charlesXu86/Chatbot_CN" -> "jiangdongguo/ChitChatAssistant" ["e"=1]
"charlesXu86/Chatbot_CN" -> "ZhuiyiTechnology/pretrained-models"
"charlesXu86/Chatbot_CN" -> "zhpmatrix/nlp-competitions-list-review"
"charlesXu86/Chatbot_CN" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"charlesXu86/Chatbot_CN" -> "liuhuanyong/QASystemOnMedicalKG"
"charlesXu86/Chatbot_CN" -> "thu-coai/CDial-GPT"
"charlesXu86/Chatbot_CN" -> "yongzhuo/nlp_xiaojiang"
"charlesXu86/Chatbot_CN" -> "YeYzheng/KGQA-Based-On-medicine"
"charlesXu86/Chatbot_CN" -> "qhduan/ConversationalRobotDesign" ["e"=1]
"charlesXu86/Chatbot_CN" -> "liuhuanyong/CrimeKgAssitant"
"charlesXu86/Chatbot_CN" -> "brightmart/albert_zh"
"thunlp/THUOCL" -> "fighting41love/Chinese_from_dongxiexidian"
"thunlp/THUOCL" -> "GanjinZero/awesome_Chinese_medical_NLP"
"thunlp/THUOCL" -> "guotong1988/chinese_dictionary"
"thunlp/THUOCL" -> "liuhuanyong/ChineseSemanticKB"
"thunlp/THUOCL" -> "nonamestreet/weixin_public_corpus"
"thunlp/THUOCL" -> "lrs1353281004/Chinese_medical_NLP"
"thunlp/THUOCL" -> "wainshine/Company-Names-Corpus"
"thunlp/THUOCL" -> "GanjinZero/ChineseEHRBert"
"thunlp/THUOCL" -> "liuhuanyong/MiningZhiDaoQACorpus"
"thunlp/THUOCL" -> "Toyhom/Chinese-medical-dialogue-data"
"thunlp/THUOCL" -> "liuhuanyong/ComplexEventExtraction"
"thunlp/THUOCL" -> "alibaba-research/ChineseBLUE"
"thunlp/THUOCL" -> "zhangsheng93/cMedQA2"
"thunlp/THUOCL" -> "sing1ee/dict_build"
"thunlp/THUOCL" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLGE" -> "P01son6415/CSL"
"CLUEbenchmark/CLGE" -> "yongzhuo/nlg-yongzhuo"
"CLUEbenchmark/CLGE" -> "YunwenTechnology/Unilm"
"CLUEbenchmark/CLGE" -> "bojone/SPACES"
"CLUEbenchmark/CLGE" -> "bojone/t5_in_bert4keras"
"CLUEbenchmark/CLGE" -> "qingkongzhiqian/GPT2-Summary"
"CLUEbenchmark/CLGE" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/CLGE" -> "CLUEbenchmark/ELECTRA"
"CLUEbenchmark/CLGE" -> "CLUEbenchmark/CLUECorpus2020"
"CLUEbenchmark/CLGE" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/CLGE" -> "CLUEbenchmark/CLUEPretrainedModels"
"CLUEbenchmark/CLGE" -> "CLUEbenchmark/PyCLUE"
"Makaixin/similar-sentence-pairs-in-epidemic" -> "lhwcv/nCoV_sentence_simi"
"Makaixin/similar-sentence-pairs-in-epidemic" -> "huanghuidmml/epidemicTextMatch"
"lizhe2004/chatbot-list" -> "charlesXu86/Chatbot_CN"
"lizhe2004/chatbot-list" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"lizhe2004/chatbot-list" -> "chatopera/chatbot.catalog.customer-service"
"lizhe2004/chatbot-list" -> "thu-coai/CrossWOZ" ["e"=1]
"lizhe2004/chatbot-list" -> "ZhuiyiTechnology/simbert"
"lizhe2004/chatbot-list" -> "BDBC-KG-NLP/QA-Survey"
"lizhe2004/chatbot-list" -> "baidu/AnyQ"
"lizhe2004/chatbot-list" -> "qhduan/ConversationalRobotDesign" ["e"=1]
"lizhe2004/chatbot-list" -> "ZhuiyiTechnology/pretrained-models"
"lizhe2004/chatbot-list" -> "liuhuanyong/MiningZhiDaoQACorpus"
"lizhe2004/chatbot-list" -> "thu-coai/CDial-GPT"
"lizhe2004/chatbot-list" -> "MachineLP/TextMatch"
"lizhe2004/chatbot-list" -> "thu-coai/ConvLab-2" ["e"=1]
"lizhe2004/chatbot-list" -> "codemayq/chinese_chatbot_corpus"
"lizhe2004/chatbot-list" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"nlpjoe/daguan-classify-2018" -> "moneyDboat/data_grand"
"nlpjoe/daguan-classify-2018" -> "Rowchen/Text-classifier"
"nlpjoe/daguan-classify-2018" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"nlpjoe/daguan-classify-2018" -> "hecongqing/2018-daguan-conpetition"
"nlpjoe/daguan-classify-2018" -> "nlpjoe/2018-CCL-UIIMCS"
"nlpjoe/daguan-classify-2018" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"nlpjoe/daguan-classify-2018" -> "hecongqing/2018-daguan-competition"
"nlpjoe/daguan-classify-2018" -> "wangchuan2008888/daguan-2018-longtext-classify"
"CLUEbenchmark/CLUENER2020" -> "lonePatient/BERT-NER-Pytorch"
"CLUEbenchmark/CLUENER2020" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUENER2020" -> "loujie0822/DeepIE"
"CLUEbenchmark/CLUENER2020" -> "luopeixiang/named_entity_recognition"
"CLUEbenchmark/CLUENER2020" -> "LeeSureman/Flat-Lattice-Transformer"
"CLUEbenchmark/CLUENER2020" -> "jiesutd/LatticeLSTM"
"CLUEbenchmark/CLUENER2020" -> "z814081807/DeepNER"
"CLUEbenchmark/CLUENER2020" -> "ShannonAI/mrc-for-flat-nested-ner"
"CLUEbenchmark/CLUENER2020" -> "macanv/BERT-BiLSTM-CRF-NER"
"CLUEbenchmark/CLUENER2020" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUENER2020" -> "ymcui/Chinese-BERT-wwm"
"CLUEbenchmark/CLUENER2020" -> "v-mipeng/LexiconAugmentedNER"
"CLUEbenchmark/CLUENER2020" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUENER2020" -> "yuanxiaosc/Entity-Relation-Extraction"
"CLUEbenchmark/CLUENER2020" -> "panchunguang/ccks_baidu_entity_link"
"synyi/poplar" -> "deepwel/Chinese-Annotator"
"synyi/poplar" -> "jiesutd/YEDDA"
"synyi/poplar" -> "nlplab/brat"
"synyi/poplar" -> "FXLP/MarkTool"
"synyi/poplar" -> "chakki-works/doccano" ["e"=1]
"synyi/poplar" -> "kyzhouhzau/NLPGNN"
"xhw205/GlobalPointer_torch" -> "xhw205/Efficient-GlobalPointer-torch"
"xhw205/GlobalPointer_torch" -> "powerycy/Efficient-GlobalPointer"
"xhw205/GlobalPointer_torch" -> "gaohongkui/GlobalPointer_pytorch"
"xhw205/GlobalPointer_torch" -> "bojone/GlobalPointer"
"xhw205/GlobalPointer_torch" -> "xhw205/GPLinker_torch"
"yixiu00001/LSTM-CRF-medical" -> "baiyyang/medical-entity-recognition"
"yixiu00001/LSTM-CRF-medical" -> "zhihao-chen/QASystemOnMedicalGraph"
"yixiu00001/LSTM-CRF-medical" -> "liuhuanyong/MedicalNamedEntityRecognition"
"yixiu00001/LSTM-CRF-medical" -> "GanjinZero/ChineseEHRBert"
"yixiu00001/LSTM-CRF-medical" -> "pumpkinduo/KnowledgeGraph_NER"
"yixiu00001/LSTM-CRF-medical" -> "alibaba-research/ChineseBLUE"
"yixiu00001/LSTM-CRF-medical" -> "MenglinLu/Chinese-clinical-NER"
"yixiu00001/LSTM-CRF-medical" -> "baiyyang/medical_ner_crfsuite"
"yixiu00001/LSTM-CRF-medical" -> "GanjinZero/awesome_Chinese_medical_NLP"
"yixiu00001/LSTM-CRF-medical" -> "Toyhom/Chinese-medical-dialogue-data"
"yixiu00001/LSTM-CRF-medical" -> "zhangsheng93/cMedQA2"
"yixiu00001/LSTM-CRF-medical" -> "lrs1353281004/Chinese_medical_NLP"
"yixiu00001/LSTM-CRF-medical" -> "F-debug/Medical-named-entity-recognition"
"yixiu00001/LSTM-CRF-medical" -> "UCSD-AI4H/Medical-Dialogue-System"
"yixiu00001/LSTM-CRF-medical" -> "YeYzheng/KGQA-Based-On-medicine"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "AI-YULU/baike_triples"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "WenRichard/KBQA-Exploration"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "percent4/spo_extract_platform"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "pumpkinduo/KnowledgeGraph_NER"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "vivianLL/QASystemOnHepatopathyKG"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "leefsir/triplet_extraction"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "lixiang0/WEB_KG"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "kangzhun/KnowledgeGraph-QA-Service"
"zhangyqCS/KnowledgeGraph_Agriculture" -> "Heavenlinguistics/Chinese-Knowledge-Triples-Extraction"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "liu-nlper/SLTK"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "yanwii/ChinsesNER-pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "lemonhu/NER-BERT-pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "ZhixiuYe/NER-pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "v-mipeng/LexiconAugmentedNER"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "circlePi/Bert_Chinese_Ner_pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "achernodub/targer"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "threelittlemonkeys/lstm-crf-pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "sberbank-ai/ner-bert"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "ZhixiuYe/HSCRF-pytorch"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "jiesutd/NCRFpp"
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "Cartus/AGGCN_TACRED" ["e"=1]
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" -> "jiesutd/LatticeLSTM"
"mgormley/ace-data-prep" -> "anoperson/jointEE-NN"
"mgormley/ace-data-prep" -> "nlpcl-lab/ace2005-preprocessing"
"mgormley/ace-data-prep" -> "tticoin/LSTM-ER" ["e"=1]
"mgormley/ace-data-prep" -> "Aureliu/BIU-RPI-Event-Extraction-Project"
"mgormley/ace-data-prep" -> "yubochen/NBTNGMA4ED"
"mgormley/ace-data-prep" -> "lx865712528/JMEE"
"mgormley/ace-data-prep" -> "AveryLiu/TD-DMN"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "hemingkx/CLUENER2020"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "HandsomeCao/Bert-BiLSTM-CRF-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "yumath/bertNER"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"CPF-NLPR/AT4ChineseNER" -> "DianboWork/Graph4CNER"
"CPF-NLPR/AT4ChineseNER" -> "hltcoe/golden-horse"
"CPF-NLPR/AT4ChineseNER" -> "evilbear/emr-ner"
"CPF-NLPR/AT4ChineseNER" -> "JNhua/Chinese_NER_with_Attention"
"CPF-NLPR/AT4ChineseNER" -> "v-mipeng/LexiconAugmentedNER"
"CPF-NLPR/AT4ChineseNER" -> "rainarch/DSNER"
"CPF-NLPR/AT4ChineseNER" -> "Nealcly/BiLSTM-LAN"
"CPF-NLPR/AT4ChineseNER" -> "jiesutd/LatticeLSTM"
"rockingdingo/deepnlp" -> "koth/kcws"
"rockingdingo/deepnlp" -> "zjy-ucas/ChineseNER"
"rockingdingo/deepnlp" -> "chilynn/sequence-labeling"
"rockingdingo/deepnlp" -> "glample/tagger"
"rockingdingo/deepnlp" -> "thunlp/TensorFlow-NRE" ["e"=1]
"rockingdingo/deepnlp" -> "crownpku/Information-Extraction-Chinese"
"rockingdingo/deepnlp" -> "Determined22/zh-NER-TF"
"rockingdingo/deepnlp" -> "crownpku/Chinese-Annotator"
"rockingdingo/deepnlp" -> "guillaumegenthial/sequence_tagging"
"rockingdingo/deepnlp" -> "HIT-SCIR/pyltp"
"rockingdingo/deepnlp" -> "liu-nlper/NER-LSTM-CRF"
"rockingdingo/deepnlp" -> "faneshion/MatchZoo"
"rockingdingo/deepnlp" -> "allenai/bilm-tf" ["e"=1]
"rockingdingo/deepnlp" -> "huyingxi/Synonyms"
"rockingdingo/deepnlp" -> "abisee/pointer-generator" ["e"=1]
"percent4/ccks_triple_extract" -> "zhengyima/kg-baseline-pytorch"
"percent4/ccks_triple_extract" -> "SeanLee97/TripleIE"
"percent4/ccks_triple_extract" -> "percent4/spo_extract_platform"
"AlexYangLi/ccks2019_el" -> "panchunguang/ccks_baidu_entity_link"
"AlexYangLi/ccks2019_el" -> "renjunxiang/ccks2019_el"
"AlexYangLi/ccks2019_el" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"AlexYangLi/ccks2019_el" -> "bojone/el-2019"
"AlexYangLi/ccks2019_el" -> "bojone/kg-2019"
"AlexYangLi/ccks2019_el" -> "songlei1994/ccks2018" ["e"=1]
"AlexYangLi/ccks2019_el" -> "1780041410/ccks_baidu_entity_link"
"AlexYangLi/ccks2019_el" -> "bojone/el-2019-baseline"
"AlexYangLi/ccks2019_el" -> "boat-group/fancy-nlp"
"Akeepers/LEAR" -> "yhcc/BARTNER"
"Akeepers/LEAR" -> "qiufengyuyi/lear_ner_extraction"
"Manchery/awesome-multi-task-learning" -> "SimonVandenhende/Awesome-Multi-Task-Learning"
"Manchery/awesome-multi-task-learning" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"Manchery/awesome-multi-task-learning" -> "median-research-group/LibMTL"
"Manchery/awesome-multi-task-learning" -> "lorenmt/auto-lambda"
"Manchery/awesome-multi-task-learning" -> "AvivNavon/nash-mtl"
"Manchery/awesome-multi-task-learning" -> "WeiHongLee/Awesome-Multi-Task-Learning"
"Manchery/awesome-multi-task-learning" -> "lorenmt/mtan"
"Manchery/awesome-multi-task-learning" -> "WeiChengTseng/Pytorch-PCGrad"
"Manchery/awesome-multi-task-learning" -> "Cranial-XIX/CAGrad"
"Manchery/awesome-multi-task-learning" -> "sunxm2357/AdaShare"
"Manchery/awesome-multi-task-learning" -> "tianheyu927/PCGrad"
"Manchery/awesome-multi-task-learning" -> "ranandalon/mtl"
"Manchery/awesome-multi-task-learning" -> "adrianjav/rotograd"
"Manchery/awesome-multi-task-learning" -> "facebookresearch/mtrl"
"Manchery/awesome-multi-task-learning" -> "brdav/atrc"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "Manchery/awesome-multi-task-learning"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "mbs0221/Multitask-Learning"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "WeiHongLee/Awesome-Multi-Task-Learning"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "lorenmt/mtan"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "brdav/atrc"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "isl-org/MultiObjectiveOptimization"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "ranandalon/mtl"
"SimonVandenhende/Awesome-Multi-Task-Learning" -> "tstandley/taskgrouping"
"yihenglu/chinese-address-segment" -> "leodotnet/neural-chinese-address-parsing"
"yihenglu/chinese-address-segment" -> "PyUnit/pyunit-address"
"yihenglu/chinese-address-segment" -> "zhuyandong/ChineseAddressDict"
"yihenglu/chinese-address-segment" -> "liuzhibin-cn/address-semantic-search"
"yihenglu/chinese-address-segment" -> "xueyouluo/ccks2021-track2-code"
"bojone/accum_optimizer_for_keras" -> "CyberZHG/summary"
"bojone/accum_optimizer_for_keras" -> "CyberZHG/keras-gradient-accumulation" ["e"=1]
"tywee/knowledge-graph" -> "kangzhun/KnowledgeGraph-QA-Service"
"tywee/knowledge-graph" -> "husthuke/awesome-knowledge-graph"
"tywee/knowledge-graph" -> "npubird/KnowledgeGraphCourse"
"tywee/knowledge-graph" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"tywee/knowledge-graph" -> "WenRichard/KBQA-BERT"
"tywee/knowledge-graph" -> "YeYzheng/KGQA-Based-On-medicine"
"tywee/knowledge-graph" -> "jm199504/Financial-Knowledge-Graphs"
"tywee/knowledge-graph" -> "nju-websoft/KnowledgeGraphFusion" ["e"=1]
"cliuxinxin/TX-WORD2VEC-SMALL" -> "airaria/TextBrewer"
"cliuxinxin/TX-WORD2VEC-SMALL" -> "terrifyzhao/bert-utils"
"cliuxinxin/TX-WORD2VEC-SMALL" -> "cliuxinxin/chaotbot_corpus_Chinese"
"yhcc/OntoNotes-5.0-NER" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"yhcc/OntoNotes-5.0-NER" -> "HuHsinpang/Ontonotes5.0-pretreatment"
"yhcc/OntoNotes-5.0-NER" -> "juntaoy/biaffine-ner"
"yhcc/OntoNotes-5.0-NER" -> "mmichazzj/Semantic-Role-Labeling"
"yhcc/OntoNotes-5.0-NER" -> "ontonotes/conll-formatted-ontonotes-5.0" ["e"=1]
"yhcc/OntoNotes-5.0-NER" -> "DianboWork/Graph4CNER"
"xhw205/Efficient-GlobalPointer-torch" -> "xhw205/GlobalPointer_torch"
"xhw205/Efficient-GlobalPointer-torch" -> "powerycy/Efficient-GlobalPointer"
"xhw205/Efficient-GlobalPointer-torch" -> "gaohongkui/GlobalPointer_pytorch"
"xhw205/Efficient-GlobalPointer-torch" -> "xhw205/GPLinker_torch"
"xhw205/Efficient-GlobalPointer-torch" -> "JunnYu/GPLinker_pytorch"
"dragona/Android_intro" -> "metabake/mbIntuition"
"dragona/Android_intro" -> "eugeniosegala/snap-this"
"dragona/Android_intro" -> "wintercounter/mhy"
"BitVoyage/FastBERT" -> "autoliuweijie/FastBERT"
"BitVoyage/FastBERT" -> "qiangsiwei/bert_distill"
"qiangsiwei/bert_distill" -> "HoyTta0/KnowledgeDistillation"
"qiangsiwei/bert_distill" -> "kevinmtian/distill-bert"
"qiangsiwei/bert_distill" -> "intersun/PKD-for-BERT-Model-Compression"
"qiangsiwei/bert_distill" -> "Lisennlp/TinyBert"
"qiangsiwei/bert_distill" -> "pengming617/text_matching"
"qiangsiwei/bert_distill" -> "DataTerminatorX/Keyword-BERT"
"qiangsiwei/bert_distill" -> "BitVoyage/FastBERT"
"qiangsiwei/bert_distill" -> "airaria/TextBrewer"
"qiangsiwei/bert_distill" -> "autoliuweijie/FastBERT"
"qiangsiwei/bert_distill" -> "zzy99/epidemic-sentence-pair"
"qiangsiwei/bert_distill" -> "lonePatient/NeZha_Chinese_PyTorch"
"qiangsiwei/bert_distill" -> "pengshuang/Text-Similarity"
"qiangsiwei/bert_distill" -> "saurabhkulkarni77/DistillBERT"
"sinovation/ZEN" -> "brightmart/roberta_zh"
"sinovation/ZEN" -> "ymcui/Chinese-PreTrained-XLNet"
"sinovation/ZEN" -> "ZhuiyiTechnology/pretrained-models"
"sinovation/ZEN" -> "ymcui/Chinese-ELECTRA"
"sinovation/ZEN" -> "chineseGLUE/chineseGLUE"
"sinovation/ZEN" -> "SVAIGBA/WMSeg"
"sinovation/ZEN" -> "dbiir/UER-py"
"sinovation/ZEN" -> "CLUEbenchmark/CLUEPretrainedModels"
"sinovation/ZEN" -> "brightmart/albert_zh"
"sinovation/ZEN" -> "autoliuweijie/FastBERT"
"sinovation/ZEN" -> "thunlp/OpenCLaP"
"sinovation/ZEN" -> "ShannonAI/glyce"
"sinovation/ZEN" -> "CLUEbenchmark/CLUE"
"sinovation/ZEN" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"sinovation/ZEN" -> "nghuyong/ERNIE-Pytorch"
"zhengyima/kg-baseline-pytorch" -> "bojone/kg-2019-baseline"
"zhengyima/kg-baseline-pytorch" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"zhengyima/kg-baseline-pytorch" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"zhengyima/kg-baseline-pytorch" -> "Jacen789/relation-extraction"
"zhengyima/kg-baseline-pytorch" -> "yuanxiaosc/Entity-Relation-Extraction"
"zhengyima/kg-baseline-pytorch" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"zhengyima/kg-baseline-pytorch" -> "bojone/kg-2019"
"zhengyima/kg-baseline-pytorch" -> "percent4/ccks_triple_extract"
"zhengyima/kg-baseline-pytorch" -> "buppt/ChineseNRE"
"zhengyima/kg-baseline-pytorch" -> "percent4/people_relation_extract"
"zhengyima/kg-baseline-pytorch" -> "weizhepei/CasRel"
"zhengyima/kg-baseline-pytorch" -> "powerycy/Lic2020-"
"zhengyima/kg-baseline-pytorch" -> "percent4/spo_extract_platform"
"zhengyima/kg-baseline-pytorch" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction"
"zhengyima/kg-baseline-pytorch" -> "longlongman/CasRel-pytorch-reimplement"
"percent4/multi-label-classification-4-event-type" -> "percent4/keras_bert_multi_label_cls"
"houking-can/PDFConverter" -> "houking-can/CCKS2019-Task5"
"MenglinLu/Chinese-clinical-NER" -> "liuhuanyong/MedicalNamedEntityRecognition"
"MenglinLu/Chinese-clinical-NER" -> "charles9n/bert-sklearn"
"MenglinLu/Chinese-clinical-NER" -> "GanjinZero/ChineseEHRBert"
"MenglinLu/Chinese-clinical-NER" -> "fordai/CCKS2019-Chinese-Clinical-NER"
"MenglinLu/Chinese-clinical-NER" -> "kyzhouhzau/Clinical-NER"
"MenglinLu/Chinese-clinical-NER" -> "yixiu00001/LSTM-CRF-medical"
"MenglinLu/Chinese-clinical-NER" -> "baiyyang/medical-entity-recognition"
"MenglinLu/Chinese-clinical-NER" -> "GanjinZero/awesome_Chinese_medical_NLP"
"MenglinLu/Chinese-clinical-NER" -> "hy-struggle/ccks_ner" ["e"=1]
"MenglinLu/Chinese-clinical-NER" -> "lrs1353281004/Chinese_medical_NLP"
"MenglinLu/Chinese-clinical-NER" -> "TJUNLP/CCKScner"
"MenglinLu/Chinese-clinical-NER" -> "mechine-learning/NER-ccks2019-"
"MenglinLu/Chinese-clinical-NER" -> "lingluodlut/Chinese-BioNLP"
"MenglinLu/Chinese-clinical-NER" -> "F-debug/Medical-named-entity-recognition"
"MenglinLu/Chinese-clinical-NER" -> "kenshinpg/PytorchNER_zh"
"zhedongzheng/finch" -> "rockingdingo/deepnlp"
"zhedongzheng/finch" -> "wagamamaz/tensorflow-tutorial" ["e"=1]
"zhedongzheng/finch" -> "S-H-Y-GitHub/QA" ["e"=1]
"zhedongzheng/finch" -> "faneshion/MatchZoo"
"zhedongzheng/finch" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"zhedongzheng/finch" -> "yaserkl/RLSeq2Seq" ["e"=1]
"zhedongzheng/finch" -> "tensorflow/nmt" ["e"=1]
"zhedongzheng/finch" -> "brightmart/bert_language_understanding"
"zhedongzheng/finch" -> "Kyubyong/nlp_tasks" ["e"=1]
"zhedongzheng/finch" -> "huyingxi/Synonyms"
"zhedongzheng/finch" -> "Roshanson/TextInfoExp"
"zhedongzheng/finch" -> "DSKSD/DeepNLP-models-Pytorch" ["e"=1]
"zhedongzheng/finch" -> "taolei87/sru" ["e"=1]
"zhedongzheng/finch" -> "HouJP/kaggle-quora-question-pairs" ["e"=1]
"zhedongzheng/finch" -> "baidu/Familia"
"Xi-L/ParetoMTL" -> "mit-gfx/ContinuousParetoMTL"
"Xi-L/ParetoMTL" -> "dbmptr/EPOSearch"
"Xi-L/ParetoMTL" -> "weberrr/PE-LTR"
"Xi-L/ParetoMTL" -> "AvivNavon/pareto-hypernetworks"
"facebookresearch/astmt" -> "brdav/atrc"
"facebookresearch/astmt" -> "menelaoskanakis/RCM"
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" -> "thuml/MTlearn"
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" -> "sebastianruder/sluice-networks"
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" -> "wOOL/DMTRL"
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" -> "lorenmt/mtan"
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" -> "chcorbi/MultiTaskLearning"
"intel-isl/MultiObjectiveOptimization" -> "Xi-L/ParetoMTL"
"intel-isl/MultiObjectiveOptimization" -> "ranandalon/mtl"
"intel-isl/MultiObjectiveOptimization" -> "hav4ik/Hydra"
"intel-isl/MultiObjectiveOptimization" -> "mit-gfx/ContinuousParetoMTL"
"intel-isl/MultiObjectiveOptimization" -> "hosseinshn/GradNorm"
"intel-isl/MultiObjectiveOptimization" -> "lorenmt/mtan"
"intel-isl/MultiObjectiveOptimization" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"intel-isl/MultiObjectiveOptimization" -> "tianheyu927/PCGrad"
"intel-isl/MultiObjectiveOptimization" -> "brianlan/pytorch-grad-norm"
"intel-isl/MultiObjectiveOptimization" -> "yaringal/multi-task-learning-example"
"intel-isl/MultiObjectiveOptimization" -> "mbs0221/Multitask-Learning"
"intel-isl/MultiObjectiveOptimization" -> "d-li14/face-attribute-prediction" ["e"=1]
"intel-isl/MultiObjectiveOptimization" -> "facebookresearch/astmt"
"intel-isl/MultiObjectiveOptimization" -> "AvivNavon/pareto-hypernetworks"
"sebastianruder/sluice-networks" -> "helloyide/Cross-stitch-Networks-for-Multi-task-Learning"
"tianheyu927/PCGrad" -> "WeiChengTseng/Pytorch-PCGrad"
"tianheyu927/PCGrad" -> "Cranial-XIX/CAGrad"
"tianheyu927/PCGrad" -> "lorenmt/mtan"
"tianheyu927/PCGrad" -> "wgchang/PCGrad-pytorch-example"
"tianheyu927/PCGrad" -> "intel-isl/MultiObjectiveOptimization"
"ArtistScript/FastTextRank" -> "bigzhao/Keyword_Extraction"
"ArtistScript/FastTextRank" -> "ztz818/Automatic-generation-of-text-summaries"
"ArtistScript/FastTextRank" -> "letiantian/TextRank4ZH"
"ArtistScript/FastTextRank" -> "zkwi/textSummary"
"ArtistScript/FastTextRank" -> "yongzhuo/nlg-yongzhuo"
"ArtistScript/FastTextRank" -> "yongzhuo/nlp_xiaojiang"
"ArtistScript/FastTextRank" -> "danan0755/Bert_Classifier"
"ArtistScript/FastTextRank" -> "CourteousWood/text-summarization"
"ArtistScript/FastTextRank" -> "ouprince/text-rank"
"GaoPeng97/transformer-xl-chinese" -> "wandouduoduo/SunRnn" ["e"=1]
"GaoPeng97/transformer-xl-chinese" -> "Morizeyao/Decoders-Chinese-TF2.0"
"GaoPeng97/transformer-xl-chinese" -> "imcaspar/gpt2-ml"
"GaoPeng97/transformer-xl-chinese" -> "renjunxiang/Text_Generate" ["e"=1]
"GaoPeng97/transformer-xl-chinese" -> "kimiyoung/transformer-xl" ["e"=1]
"GaoPeng97/transformer-xl-chinese" -> "Morizeyao/GPT2-Chinese"
"GaoPeng97/transformer-xl-chinese" -> "yangjianxin1/GPT2-chitchat"
"GaoPeng97/transformer-xl-chinese" -> "yangjianxin1/CPM"
"GaoPeng97/transformer-xl-chinese" -> "ymcui/Chinese-PreTrained-XLNet"
"GaoPeng97/transformer-xl-chinese" -> "brightmart/roberta_zh"
"GaoPeng97/transformer-xl-chinese" -> "thu-coai/CDial-GPT"
"GaoPeng97/transformer-xl-chinese" -> "ZhuiyiTechnology/pretrained-models"
"GaoPeng97/transformer-xl-chinese" -> "qingkongzhiqian/GPT2-Summary"
"GaoPeng97/transformer-xl-chinese" -> "ymcui/Chinese-ELECTRA"
"GaoPeng97/transformer-xl-chinese" -> "TsinghuaAI/CPM-Generate"
"jinfagang/tensorflow_novelist" -> "jinfagang/tensorflow_poems"
"jinfagang/tensorflow_novelist" -> "imdarkie/Chinese-novel-generation"
"jinfagang/tensorflow_novelist" -> "kwsy/FictionAnalysis" ["e"=1]
"jinfagang/tensorflow_novelist" -> "jinfagang/Spider12306" ["e"=1]
"zkwi/textSummary" -> "zpppy/seq2seq-chinese-textsum" ["e"=1]
"zkwi/textSummary" -> "CourteousWood/text-summarization"
"zkwi/textSummary" -> "Valuebai/Text-Auto-Summarization"
"zhanzecheng/Time_NLP" -> "shinyke/Time-NLP"
"zhanzecheng/Time_NLP" -> "fighting41love/cocoNLP"
"zhanzecheng/Time_NLP" -> "Wall-ee/chinese2digits"
"zhanzecheng/Time_NLP" -> "bojone/kg-2019"
"zhanzecheng/Time_NLP" -> "liuhuanyong/ComplexEventExtraction"
"zhanzecheng/Time_NLP" -> "EOA-AILab/NER-Chinese"
"zhanzecheng/Time_NLP" -> "ryanInf/Time-NLPY"
"zhanzecheng/Time_NLP" -> "ymcui/Chinese-PreTrained-XLNet"
"zhanzecheng/Time_NLP" -> "liuhuanyong/EventTriplesExtraction"
"zhanzecheng/Time_NLP" -> "ZhuiyiTechnology/pretrained-models"
"zhanzecheng/Time_NLP" -> "liuhuanyong/SentenceSimilarity"
"zhanzecheng/Time_NLP" -> "liuhuanyong/ChineseSemanticKB"
"zhanzecheng/Time_NLP" -> "terrifyzhao/text_matching"
"thunlp/UltraChat" -> "OpenBMB/BMTools"
"hosseinshn/GradNorm" -> "brianlan/pytorch-grad-norm"
"hosseinshn/GradNorm" -> "chainer/models"
"liuhuanyong/Word2Vector" -> "liuhuanyong/ChineseEmbedding"
"liuhuanyong/Word2Vector" -> "liuhuanyong/WordSegment"
"JianWenJun/MLDemo" -> "LittletreeZou/Question-Pairs-Matching"
"JianWenJun/MLDemo" -> "pengshuang/Text-Similarity"
"JianWenJun/MLDemo" -> "ziweipolaris/atec2018-nlp"
"JianWenJun/MLDemo" -> "yanqiangmiffy/sentence-similarity"
"JianWenJun/MLDemo" -> "zle1992/atec"
"JianWenJun/MLDemo" -> "pengming617/text_matching"
"JianWenJun/MLDemo" -> "terrifyzhao/text_matching"
"JianWenJun/MLDemo" -> "Huijun-Cui/ATEC-NLP"
"JianWenJun/MLDemo" -> "Lapis-Hong/atec-nlp"
"JianWenJun/MLDemo" -> "yongyehuang/zhihu-text-classification"
"JianWenJun/MLDemo" -> "raven4752/huabei"
"JianWenJun/MLDemo" -> "brightmart/nlu_sim"
"VectorFist/RNN-NMT" -> "foamliu/Machine-Translation"
"VectorFist/RNN-NMT" -> "jmhIcoding/machine_translation"
"powerycy/DeepKg" -> "xhw205/GPLinker_torch"
"powerycy/DeepKg" -> "powerycy/TPlinker-ycy"
"powerycy/DeepKg" -> "gaohongkui/GlobalPointer_pytorch"
"powerycy/DeepKg" -> "JunnYu/GPLinker_pytorch"
"powerycy/DeepKg" -> "yeqingzhao/relation-extraction"
"powerycy/DeepKg" -> "powerycy/Lic2020-"
"powerycy/DeepKg" -> "yanqiangmiffy/Product-Entity-Recognition"
"powerycy/DeepKg" -> "gaohongkui/TPLinker-NER"
"powerycy/DeepKg" -> "xhw205/Efficient-GlobalPointer-torch"
"powerycy/DeepKg" -> "luozhouyang/AutoPhraseX"
"linhaow/TextClassify" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"linhaow/TextClassify" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"linhaow/TextClassify" -> "zzy99/epidemic-sentence-pair"
"linhaow/TextClassify" -> "Makaixin/Correlation-between-requirements-and-achievements"
"linhaow/TextClassify" -> "zhanlaoban/Transformers_for_Text_Classification"
"linhaow/TextClassify" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"linhaow/TextClassify" -> "zhanlaoban/NLP_competitions"
"sunyilgdx/SIFRank_zh" -> "dongrixinyu/chinese_keyphrase_extractor"
"sunyilgdx/SIFRank_zh" -> "sunyilgdx/SIFRank" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "DataTerminatorX/Keyword-BERT"
"sunyilgdx/SIFRank_zh" -> "bigzhao/Keyword_Extraction"
"sunyilgdx/SIFRank_zh" -> "padeoe/cail2019" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "bojone/SPACES"
"sunyilgdx/SIFRank_zh" -> "bojone/word-discovery"
"sunyilgdx/SIFRank_zh" -> "thunlp/BERT-KPE" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "zzy99/epidemic-sentence-pair"
"zhanzecheng/SOHU_competition" -> "fennuDetudou/BERT_implement"
"zhanzecheng/SOHU_competition" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"zhanzecheng/SOHU_competition" -> "sanshibayuan/Sohu-2018-4th-place-solution"
"zhanzecheng/SOHU_competition" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"brianlan/pytorch-grad-norm" -> "hosseinshn/GradNorm"
"brianlan/pytorch-grad-norm" -> "Mikoto10032/AutomaticWeightedLoss"
"brianlan/pytorch-grad-norm" -> "brianlan/complex-grad-norm"
"brianlan/pytorch-grad-norm" -> "hav4ik/Hydra"
"brianlan/pytorch-grad-norm" -> "SimonVandenhende/Multi-Task-Learning-PyTorch"
"chineseGLUE/chineseGLUE" -> "ymcui/Chinese-PreTrained-XLNet"
"chineseGLUE/chineseGLUE" -> "brightmart/albert_zh"
"chineseGLUE/chineseGLUE" -> "brightmart/roberta_zh"
"chineseGLUE/chineseGLUE" -> "Jiakui/awesome-bert"
"chineseGLUE/chineseGLUE" -> "PaddlePaddle/LARK"
"chineseGLUE/chineseGLUE" -> "CLUEbenchmark/CLUE"
"chineseGLUE/chineseGLUE" -> "ymcui/Chinese-ELECTRA"
"chineseGLUE/chineseGLUE" -> "CLUEbenchmark/CLUEPretrainedModels"
"chineseGLUE/chineseGLUE" -> "sinovation/ZEN"
"chineseGLUE/chineseGLUE" -> "airaria/TextBrewer"
"chineseGLUE/chineseGLUE" -> "dbiir/UER-py"
"chineseGLUE/chineseGLUE" -> "huawei-noah/Pretrained-Language-Model"
"chineseGLUE/chineseGLUE" -> "ZhuiyiTechnology/pretrained-models"
"chineseGLUE/chineseGLUE" -> "lonePatient/albert_pytorch"
"chineseGLUE/chineseGLUE" -> "thunlp/OpenCLaP"
"chapzq77/LTP_Python_Interface" -> "twjiang/NamedEntity_realtion_extraction"
"chapzq77/LTP_Python_Interface" -> "twjiang/fact_triple_extraction"
"chapzq77/LTP_Python_Interface" -> "lzc1/Relation_extraction"
"425776024/bertsum-chinese" -> "Machine-Tom/bertsum-chinese-LAI"
"425776024/bertsum-chinese" -> "yongzhuo/nlg-yongzhuo"
"425776024/bertsum-chinese" -> "PolarisRisingWar/text_summarization_chinese"
"425776024/bertsum-chinese" -> "maszhongming/MatchSum" ["e"=1]
"425776024/bertsum-chinese" -> "nlpyang/BertSum" ["e"=1]
"425776024/bertsum-chinese" -> "bojone/SPACES"
"425776024/bertsum-chinese" -> "ZhuiyiTechnology/t5-pegasus"
"425776024/bertsum-chinese" -> "qiufengyuyi/event_extraction"
"425776024/bertsum-chinese" -> "zkwi/textSummary"
"bojone/SPACES" -> "ZhuiyiTechnology/t5-pegasus"
"bojone/SPACES" -> "renmada/t5-pegasus-pytorch"
"bojone/SPACES" -> "yongzhuo/nlg-yongzhuo"
"bojone/SPACES" -> "ZhuiyiTechnology/WoBERT"
"bojone/SPACES" -> "liucongg/GPT2-NewsTitle"
"bojone/SPACES" -> "CLUEbenchmark/CLGE"
"bojone/SPACES" -> "china-ai-law-challenge/CAIL2020" ["e"=1]
"bojone/SPACES" -> "YunwenTechnology/Unilm"
"bojone/SPACES" -> "ZhuiyiTechnology/pretrained-models"
"bojone/SPACES" -> "qingkongzhiqian/GPT2-Summary"
"bojone/SPACES" -> "bojone/t5_in_bert4keras"
"bojone/SPACES" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"bojone/SPACES" -> "xcfcode/Summarization-Papers" ["e"=1]
"bojone/SPACES" -> "maszhongming/MatchSum" ["e"=1]
"bojone/SPACES" -> "ZhuiyiTechnology/simbert"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "taishan1994/awesome-chinese-ner"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "Marilynmontu/ChineseNER-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "taishan1994/pytorch_triple_extraction"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "wzzzd/lm_ner"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "DSXiangLi/ChineseNER"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "hemingkx/CLUENER2020"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "StanleyLsx/entity_extractor_by_ner"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "gaohongkui/GlobalPointer_pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "DeShuiYu/nlp_from_dsy"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "yumath/bertNER"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "Htring/BERT-BiLSTM-CRF_PL"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "xhw205/GlobalPointer_torch"
"zhihu/cuBERT" -> "Tencent/TurboTransformers"
"zhihu/cuBERT" -> "bytedance/effective_transformer"
"zhihu/cuBERT" -> "ymcui/Chinese-PreTrained-XLNet"
"zhihu/cuBERT" -> "autoliuweijie/FastBERT"
"zhihu/cuBERT" -> "qiangsiwei/bert_distill"
"zhihu/cuBERT" -> "bohanli/BERT-flow"
"zhihu/cuBERT" -> "chineseGLUE/chineseGLUE"
"zhihu/cuBERT" -> "qsyao/cudaBERT"
"zhihu/cuBERT" -> "ZhuiyiTechnology/pretrained-models"
"zhihu/cuBERT" -> "brightmart/roberta_zh"
"zhihu/cuBERT" -> "bytedance/lightseq"
"zhihu/cuBERT" -> "ymcui/Chinese-ELECTRA"
"zhihu/cuBERT" -> "airaria/TextBrewer"
"OpenBMB/BMTools" -> "OpenBMB/CPM-Live"
"OpenBMB/BMTools" -> "xxddpac/netdev"
"OpenBMB/BMTools" -> "thunlp/UltraChat"
"OpenBMB/BMTools" -> "OpenSourceDavy/ChatNote" ["e"=1]
"DSXiangLi/ChineseNER" -> "yangjianxin1/LEBERT-NER-Chinese"
"DSXiangLi/ChineseNER" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"DSXiangLi/ChineseNER" -> "hemingkx/CLUENER2020"
"DSXiangLi/ChineseNER" -> "StanleyLsx/entity_extractor_by_ner"
"DSXiangLi/ChineseNER" -> "v-mipeng/LexiconAugmentedNER"
"DSXiangLi/ChineseNER" -> "taishan1994/awesome-chinese-ner"
"DSXiangLi/ChineseNER" -> "gaohongkui/GlobalPointer_pytorch"
"DSXiangLi/ChineseNER" -> "yumath/bertNER"
"DSXiangLi/ChineseNER" -> "ShannonAI/KNN-NER"
"DSXiangLi/ChineseNER" -> "wavewangyue/ner"
"DSXiangLi/ChineseNER" -> "lonePatient/BERT-NER-Pytorch"
"DSXiangLi/ChineseNER" -> "ZhuiyiTechnology/roformer-sim"
"DSXiangLi/ChineseNER" -> "z814081807/DeepNER"
"hemingkx/WordSeg" -> "hemingkx/CLUENER2020"
"smilelight/lightKG" -> "lixiang0/WEB_KG"
"smilelight/lightKG" -> "WenRichard/KBQA-BERT"
"smilelight/lightKG" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"smilelight/lightKG" -> "buppt/ChineseNRE"
"smilelight/lightKG" -> "zhengyima/kg-baseline-pytorch"
"smilelight/lightKG" -> "bojone/kg-2019"
"smilelight/lightKG" -> "liuhuanyong/EventTriplesExtraction"
"smilelight/lightKG" -> "lemonhu/stock-knowledge-graph"
"smilelight/lightKG" -> "lihanghang/NLP-Knowledge-Graph"
"smilelight/lightKG" -> "YeYzheng/KGQA-Based-On-medicine"
"smilelight/lightKG" -> "yuanxiaosc/Entity-Relation-Extraction"
"smilelight/lightKG" -> "smilelight/lightNLP"
"smilelight/lightKG" -> "zjunlp/deepke"
"smilelight/lightKG" -> "qq547276542/Agriculture_KnowledgeGraph"
"smilelight/lightKG" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"pluto-junzeng/CNSD" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"pluto-junzeng/CNSD" -> "zhoujx4/NLP-Series-sentence-embeddings"
"pluto-junzeng/CNSD" -> "KwangKa/SIMCSE_unsup"
"pluto-junzeng/CNSD" -> "bojone/SimCSE"
"pluto-junzeng/CNSD" -> "shuxinyin/SimCSE-Pytorch"
"pluto-junzeng/CNSD" -> "zhengyanzhao1997/NLP-model"
"pluto-junzeng/CNSD" -> "zejunwang1/CSTS"
"pluto-junzeng/CNSD" -> "bojone/CoSENT"
"pluto-junzeng/CNSD" -> "pluto-junzeng/ChineseSquad"
"pluto-junzeng/CNSD" -> "IceFlameWorm/NLP_Datasets"
"pluto-junzeng/CNSD" -> "yangjianxin1/SimCSE"
"pluto-junzeng/CNSD" -> "liucongg/NLPDataSet"
"pluto-junzeng/CNSD" -> "ZhuiyiTechnology/pretrained-models"
"pluto-junzeng/CNSD" -> "ZhuiyiTechnology/roformer-sim"
"pluto-junzeng/CNSD" -> "bojone/BERT-whitening"
"Toyhom/Chinese-medical-dialogue-data" -> "zhangsheng93/cMedQA2"
"Toyhom/Chinese-medical-dialogue-data" -> "lrs1353281004/Chinese_medical_NLP"
"Toyhom/Chinese-medical-dialogue-data" -> "UCSD-AI4H/Medical-Dialogue-System"
"Toyhom/Chinese-medical-dialogue-data" -> "GanjinZero/awesome_Chinese_medical_NLP"
"Toyhom/Chinese-medical-dialogue-data" -> "alibaba-research/ChineseBLUE"
"Toyhom/Chinese-medical-dialogue-data" -> "zhihao-chen/QASystemOnMedicalGraph"
"Toyhom/Chinese-medical-dialogue-data" -> "GanjinZero/ChineseEHRBert"
"Toyhom/Chinese-medical-dialogue-data" -> "liutongyang/CMID"
"Toyhom/Chinese-medical-dialogue-data" -> "xtea/chinese_medical_words"
"Toyhom/Chinese-medical-dialogue-data" -> "yixiu00001/LSTM-CRF-medical"
"Toyhom/Chinese-medical-dialogue-data" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"Toyhom/Chinese-medical-dialogue-data" -> "xiaopangxia/TCM-Ancient-Books" ["e"=1]
"Toyhom/Chinese-medical-dialogue-data" -> "xionghonglin/DoctorGLM" ["e"=1]
"Toyhom/Chinese-medical-dialogue-data" -> "zhangsheng93/cMedQA"
"Toyhom/Chinese-medical-dialogue-data" -> "charlesXu86/Chatbot_CN"
"chatopera/chatbot.catalog.customer-service" -> "lizhe2004/chatbot-list"
"Jacen789/relation-extraction" -> "lvjianxin/Relationship-extraction"
"Jacen789/relation-extraction" -> "buppt/ChineseNRE"
"Jacen789/relation-extraction" -> "Ricardokevins/Bert-In-Relation-Extraction"
"Jacen789/relation-extraction" -> "zhengyima/kg-baseline-pytorch"
"Jacen789/relation-extraction" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction"
"Jacen789/relation-extraction" -> "Mryangkaitong/Chinese_NRE"
"Jacen789/relation-extraction" -> "percent4/people_relation_extract"
"Jacen789/relation-extraction" -> "taishan1994/pytorch_triple_extraction"
"Jacen789/relation-extraction" -> "monologg/R-BERT" ["e"=1]
"Jacen789/relation-extraction" -> "taishan1994/chinese_information_extraction"
"Jacen789/relation-extraction" -> "leefsir/triplet_extraction"
"Jacen789/relation-extraction" -> "percent4/spo_extract_platform"
"Jacen789/relation-extraction" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"Jacen789/relation-extraction" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"Jacen789/relation-extraction" -> "xhw205/GPLinker_torch"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "Jacen789/relation-extraction"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "zhengyima/kg-baseline-pytorch"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "lvjianxin/Relationship-extraction"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "percent4/people_relation_extract"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "leefsir/triplet_extraction"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "Mryangkaitong/Chinese_NRE"
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" -> "ZhixiuYe/Intra-Bag-and-Inter-Bag-Attentions" ["e"=1]
"weizhepei/BERT-NER" -> "lemonhu/NER-BERT-pytorch"
"percent4/ALBERT_NER_KERAS" -> "MarsRoger/albert_ner"
"percent4/ALBERT_NER_KERAS" -> "jiangnanboy/albert_lstm_crf_ner"
"yizhiru/thulac4j" -> "thunlp/THULAC-Java"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "v-mipeng/LexiconAugmentedNER"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "guitaowufeng/LR-CNN"
"allanj/pytorch_lstmcrf" -> "allanj/ner_with_dependency"
"allanj/pytorch_lstmcrf" -> "allanj/neural-partialCRF"
"allanj/pytorch_lstmcrf" -> "allanj/ner_incomplete_annotation"
"allanj/pytorch_lstmcrf" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"allanj/pytorch_lstmcrf" -> "threelittlemonkeys/lstm-crf-pytorch"
"allanj/pytorch_lstmcrf" -> "yahshibu/nested-ner-tacl2020-transformers" ["e"=1]
"allanj/pytorch_lstmcrf" -> "INK-USC/TriggerNER"
"circlePi/Bert_Chinese_Ner_pytorch" -> "yanwii/ChinsesNER-pytorch"
"circlePi/Bert_Chinese_Ner_pytorch" -> "lemonhu/NER-BERT-pytorch"
"circlePi/Bert_Chinese_Ner_pytorch" -> "liuyijiang1994/sohu_baseline"
"circlePi/Bert_Chinese_Ner_pytorch" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"circlePi/Bert_Chinese_Ner_pytorch" -> "circlePi/knowledge-driven-dialogue-lic2019" ["e"=1]
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "nlpcl-lab/bert-event-extraction"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "nlpcl-lab/ace2005-preprocessing"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "jeffery0628/baidu_ee"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "lx865712528/EMNLP2018-JMEE"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "benkang-chen/Event-Extraction"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "thunlp/HMEAE"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "carrie0307/baidu-ee2020"
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" -> "lx865712528/ACL2019-ODEE"
"benkang-chen/Event-Extraction" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"benkang-chen/Event-Extraction" -> "nlpcl-lab/bert-event-extraction"
"benkang-chen/Event-Extraction" -> "boy56/EGPapers"
"benkang-chen/Event-Extraction" -> "lx865712528/EMNLP2018-JMEE"
"benkang-chen/Event-Extraction" -> "jialin666/EventExtraction"
"benkang-chen/Event-Extraction" -> "zhang17173/Event-Extraction"
"benkang-chen/Event-Extraction" -> "hendrydong/Chinese-Event-Extraction"
"benkang-chen/Event-Extraction" -> "nlpcl-lab/ace2005-preprocessing"
"nlpcl-lab/bert-event-extraction" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"nlpcl-lab/bert-event-extraction" -> "nlpcl-lab/ace2005-preprocessing"
"nlpcl-lab/bert-event-extraction" -> "lx865712528/EMNLP2018-JMEE"
"nlpcl-lab/bert-event-extraction" -> "BaptisteBlouin/EventExtractionPapers"
"nlpcl-lab/bert-event-extraction" -> "THU-KEG/MAVEN-dataset"
"nlpcl-lab/bert-event-extraction" -> "liushulinle/event_detection_without_triggers"
"nlpcl-lab/bert-event-extraction" -> "xiaoqian19940510/Event-Extraction"
"nlpcl-lab/bert-event-extraction" -> "lx865712528/ACL2019-ODEE"
"nlpcl-lab/bert-event-extraction" -> "benkang-chen/Event-Extraction"
"nlpcl-lab/bert-event-extraction" -> "thunlp/HMEAE"
"nlpcl-lab/bert-event-extraction" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"nlpcl-lab/bert-event-extraction" -> "sanmusunrise/NPNs"
"nlpcl-lab/bert-event-extraction" -> "thunlp/Adv-ED"
"nlpcl-lab/bert-event-extraction" -> "xinyadu/eeqa"
"nlpcl-lab/bert-event-extraction" -> "carrie0307/DL_EventExtractionPapers"
"zhangluoyang/cnn-for-auto-event-extract" -> "Niharikadutta/EventExtractionNLP"
"IrvingBei/chatbot_with_IR" -> "IrvingBei/simple_movie_qa_with_KG"
"zzzvvvxxxd/KGPro" -> "dozycat/CEQA"
"ShannonAI/dice_loss_for_NLP" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/dice_loss_for_NLP" -> "fursovia/self-adj-dice"
"ShannonAI/dice_loss_for_NLP" -> "LeePleased/NegSampling-NER"
"ShannonAI/dice_loss_for_NLP" -> "tricktreat/locate-and-label"
"ShannonAI/dice_loss_for_NLP" -> "ljynlp/W2NER"
"ShannonAI/dice_loss_for_NLP" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/dice_loss_for_NLP" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/dice_loss_for_NLP" -> "liuwei1206/LEBERT"
"ShannonAI/dice_loss_for_NLP" -> "juntaoy/biaffine-ner"
"ShannonAI/dice_loss_for_NLP" -> "fastnlp/TENER"
"THU-KEG/CLEVE" -> "raspberryice/gen-arg"
"THU-KEG/CLEVE" -> "zjunlp/DocED"
"THU-KEG/CLEVE" -> "cuishiyao96/eegcned"
"foxlf823/sodner" -> "daixiangau/acl2020-transition-discontinuous-ner"
"jiesutd/RichWordSegmentor" -> "jiesutd/SubwordEncoding-CWS"
"jiesutd/RichWordSegmentor" -> "fudannlp16/CWS_Dict"
"jiesutd/RichWordSegmentor" -> "jcyk/CWS"
"jiesutd/RichWordSegmentor" -> "SUTDNLP/LibN3L"
"princeton-nlp/PURE" -> "thunlp/PL-Marker"
"princeton-nlp/PURE" -> "131250208/TPlinker-joint-extraction"
"princeton-nlp/PURE" -> "lavis-nlp/spert"
"princeton-nlp/PURE" -> "loujie0822/DeepIE"
"princeton-nlp/PURE" -> "dwadden/dygiepp"
"princeton-nlp/PURE" -> "weizhepei/CasRel"
"princeton-nlp/PURE" -> "juntaoy/biaffine-ner"
"princeton-nlp/PURE" -> "luanyi/DyGIE"
"princeton-nlp/PURE" -> "Coopercoppers/PFN"
"princeton-nlp/PURE" -> "ShannonAI/mrc-for-flat-nested-ner"
"princeton-nlp/PURE" -> "ljynlp/W2NER"
"princeton-nlp/PURE" -> "DianboWork/SPN4RE"
"princeton-nlp/PURE" -> "LorrinWWW/two-are-better-than-one"
"princeton-nlp/PURE" -> "universal-ie/UIE"
"princeton-nlp/PURE" -> "z814081807/DeepNER"
"v-mipeng/LexiconAugmentedNER" -> "LeeSureman/Flat-Lattice-Transformer"
"v-mipeng/LexiconAugmentedNER" -> "jiesutd/LatticeLSTM"
"v-mipeng/LexiconAugmentedNER" -> "ShannonAI/mrc-for-flat-nested-ner"
"v-mipeng/LexiconAugmentedNER" -> "juntaoy/biaffine-ner"
"v-mipeng/LexiconAugmentedNER" -> "qiufengyuyi/sequence_tagging"
"v-mipeng/LexiconAugmentedNER" -> "liuwei1206/LEBERT"
"v-mipeng/LexiconAugmentedNER" -> "LeeSureman/Batch_Parallel_LatticeLSTM"
"v-mipeng/LexiconAugmentedNER" -> "v-mipeng/LexiconNER" ["e"=1]
"v-mipeng/LexiconAugmentedNER" -> "hltcoe/golden-horse"
"v-mipeng/LexiconAugmentedNER" -> "fastnlp/TENER"
"v-mipeng/LexiconAugmentedNER" -> "loujie0822/DeepIE"
"v-mipeng/LexiconAugmentedNER" -> "CLUEbenchmark/CLUENER2020"
"v-mipeng/LexiconAugmentedNER" -> "yhcc/OntoNotes-5.0-NER"
"v-mipeng/LexiconAugmentedNER" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"v-mipeng/LexiconAugmentedNER" -> "z814081807/DeepNER"
"BDBC-KG-NLP/QA-Survey-CN" -> "luhua-rain/MRC_Competition_Dureader"
"BDBC-KG-NLP/QA-Survey-CN" -> "BDBC-KG-NLP/IE-Survey"
"BDBC-KG-NLP/QA-Survey-CN" -> "CLUEbenchmark/KgCLUE"
"BDBC-KG-NLP/QA-Survey-CN" -> "wangle1218/KBQA-for-Diagnosis"
"BDBC-KG-NLP/QA-Survey-CN" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"BDBC-KG-NLP/QA-Survey-CN" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "TingFree/NLPer-Arsenal"
"BDBC-KG-NLP/QA-Survey-CN" -> "lihanghang/NLP-Knowledge-Graph"
"BDBC-KG-NLP/QA-Survey-CN" -> "HarderThenHarder/transformers_tasks" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "liucongg/NLPDataSet"
"BDBC-KG-NLP/QA-Survey-CN" -> "BshoterJ/awesome-kgqa" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "WangShengguang/ccks-2020" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "pen-ho/medical_knowledge_graph_app-master"
"BDBC-KG-NLP/QA-Survey-CN" -> "zhoujx4/NLP-Series-sentence-embeddings"
"BDBC-KG-NLP/QA-Survey-CN" -> "WenRichard/KBQA-BERT"
"Makaixin/Correlation-between-requirements-and-achievements" -> "rebornZH/2019-CCF-BDCI-NLP"
"kangzhun/KnowledgeGraph-QA-Service" -> "YeYzheng/KGQA-Based-On-medicine"
"kangzhun/KnowledgeGraph-QA-Service" -> "zhangziliang04/kgRobot"
"kangzhun/KnowledgeGraph-QA-Service" -> "qiu997018209/KnowledgeGraph"
"kangzhun/KnowledgeGraph-QA-Service" -> "dozycat/CEQA"
"kangzhun/KnowledgeGraph-QA-Service" -> "s-top/Baike-KnowledgeGraph"
"kangzhun/KnowledgeGraph-QA-Service" -> "SimmerChan/KG-demo-for-movie"
"kangzhun/KnowledgeGraph-QA-Service" -> "vivianLL/QASystemOnHepatopathyKG"
"kangzhun/KnowledgeGraph-QA-Service" -> "zhangtao-seu/Jay_KG"
"kangzhun/KnowledgeGraph-QA-Service" -> "cnschema/cnschema"
"kangzhun/KnowledgeGraph-QA-Service" -> "DouYishun/KB-QA" ["e"=1]
"kangzhun/KnowledgeGraph-QA-Service" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"kangzhun/KnowledgeGraph-QA-Service" -> "WenRichard/KBQA-BERT"
"kangzhun/KnowledgeGraph-QA-Service" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"kangzhun/KnowledgeGraph-QA-Service" -> "twjiang/fact_triple_extraction"
"kangzhun/KnowledgeGraph-QA-Service" -> "IrvingBei/simple_movie_qa_with_KG"
"lihanghang/Knowledge-Graph" -> "shaoxiongji/awesome-knowledge-graph" ["e"=1]
"lihanghang/Knowledge-Graph" -> "liuhuanyong/AbstractKnowledgeGraph"
"lihanghang/Knowledge-Graph" -> "ownthink/KnowledgeGraph"
"lihanghang/Knowledge-Graph" -> "WenRichard/KBQA-BERT"
"lihanghang/Knowledge-Graph" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"lihanghang/Knowledge-Graph" -> "wavewangyue/kbqa" ["e"=1]
"lihanghang/Knowledge-Graph" -> "liuhuanyong/ProductKnowledgeGraph"
"lihanghang/Knowledge-Graph" -> "gaoisbest/NLP-Projects" ["e"=1]
"lihanghang/Knowledge-Graph" -> "lixiang0/WEB_KG"
"lihanghang/Knowledge-Graph" -> "smilelight/lightKG"
"lihanghang/Knowledge-Graph" -> "cnschema/cnschema"
"lihanghang/Knowledge-Graph" -> "ArthurRizar/tensorflow_ernie"
"lihanghang/Knowledge-Graph" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"lihanghang/Knowledge-Graph" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"lihanghang/Knowledge-Graph" -> "charlesXu86/Chatbot_CN"
"hosseinshn/Basic-Multi-task-Learning" -> "liuluyeah/Pytorch-Multi-Task-Multi-class-Classification"
"hosseinshn/Basic-Multi-task-Learning" -> "cinastanbean/Pytorch-Multi-Task-Multi-class-Classification"
"TsinghuaAI/CPM-Finetune" -> "jm12138/CPM-Generate-Pytorch"
"yangjianxin1/CLIP-Chinese" -> "yangjianxin1/OFA-Chinese"
"yangjianxin1/CLIP-Chinese" -> "yangjianxin1/ClipCap-Chinese" ["e"=1]
"yangjianxin1/CLIP-Chinese" -> "yangjianxin1/CPM"
"rainarch/SentiBridge" -> "zeitiempo/ECSD"
"rainarch/SentiBridge" -> "z17176/Chinese_conversation_sentiment"
"rainarch/SentiBridge" -> "zhangyics/Chinese-abbreviation-dataset"
"rainarch/SentiBridge" -> "pengshuang/AI-Comp"
"rainarch/SentiBridge" -> "chenghuige/wenzheng"
"rainarch/SentiBridge" -> "huyingxi/Synonyms"
"rainarch/SentiBridge" -> "cnschema/cnschema"
"rainarch/SentiBridge" -> "baidu/Senta"
"rainarch/SentiBridge" -> "crownpku/Small-Chinese-Corpus"
"rainarch/SentiBridge" -> "guotong1988/chinese_dictionary"
"rainarch/SentiBridge" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"rainarch/SentiBridge" -> "baidu/DuReader" ["e"=1]
"rainarch/SentiBridge" -> "liuhuanyong/ComplexEventExtraction"
"rainarch/SentiBridge" -> "blmoistawinde/HarvestText"
"rainarch/SentiBridge" -> "thunlp/OpenCLaP"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "threelittlemonkeys/lstm-crf-pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "sgrvinod/Deep-Tutorials-for-PyTorch" ["e"=1]
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "epwalsh/pytorch-crf"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "allanj/pytorch_lstmcrf"
"Mamba413/Ball" -> "Mamba413/abess"
"Louis-udm/NER-BERT-CRF" -> "jidasheng/bi-lstm-crf"
"zhangtao-seu/Jay_KG" -> "xyjigsaw/COVID19-KBQA-DEMO" ["e"=1]
"zhangtao-seu/Jay_KG" -> "keyue123/poemKBQA" ["e"=1]
"tricktreat/locate-and-label" -> "zqtan1024/sequence-to-set"
"tricktreat/locate-and-label" -> "tricktreat/piqn"
"tricktreat/locate-and-label" -> "thecharm/boundary-aware-nested-ner" ["e"=1]
"SunnyGJing/t5-pegasus-chinese" -> "ZhuiyiTechnology/t5-pegasus"
"SunnyGJing/t5-pegasus-chinese" -> "renmada/t5-pegasus-pytorch"
"anirudyd/topmine" -> "latorrefabian/topmine"
"anirudyd/topmine" -> "remenberl/SegPhrase-MultiLingual"
"bojone/t5_in_bert4keras" -> "CLUEbenchmark/CLGE"
"bojone/t5_in_bert4keras" -> "ZhuiyiTechnology/t5-pegasus"
"bojone/t5_in_bert4keras" -> "bojone/SPACES"
"bojone/t5_in_bert4keras" -> "bojone/CPM_LM_bert4keras"
"bojone/t5_in_bert4keras" -> "google-research/multilingual-t5" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "liuhuanyong/EventTriplesExtraction"
"lemonhu/open-entity-relation-extraction" -> "yuanxiaosc/Entity-Relation-Extraction"
"lemonhu/open-entity-relation-extraction" -> "bojone/kg-2019"
"lemonhu/open-entity-relation-extraction" -> "tim5go/zhopenie"
"lemonhu/open-entity-relation-extraction" -> "xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"lemonhu/open-entity-relation-extraction" -> "twjiang/fact_triple_extraction"
"lemonhu/open-entity-relation-extraction" -> "gkiril/oie-resources" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "zjunlp/deepke"
"lemonhu/open-entity-relation-extraction" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"lemonhu/open-entity-relation-extraction" -> "lemonhu/stock-knowledge-graph"
"lemonhu/open-entity-relation-extraction" -> "percent4/spo_extract_platform"
"lemonhu/open-entity-relation-extraction" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"shangjingbo1226/AutoNER" -> "shangjingbo1226/AutoPhrase"
"shangjingbo1226/AutoNER" -> "cliang1453/BOND" ["e"=1]
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LightNER"
"shangjingbo1226/AutoNER" -> "lingluodlut/BioNER-Progress" ["e"=1]
"shangjingbo1226/AutoNER" -> "v-mipeng/LexiconNER" ["e"=1]
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"shangjingbo1226/AutoNER" -> "rainarch/DSNER"
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LD-Net"
"shangjingbo1226/AutoNER" -> "ZhixiuYe/HSCRF-pytorch"
"shangjingbo1226/AutoNER" -> "yuzhimanhua/Multi-BioNER" ["e"=1]
"shangjingbo1226/AutoNER" -> "jiesutd/LatticeLSTM"
"shangjingbo1226/AutoNER" -> "allanj/ner_incomplete_annotation"
"shangjingbo1226/AutoNER" -> "panchunguang/ccks_baidu_entity_link"
"shangjingbo1226/AutoNER" -> "jiesutd/NCRFpp"
"shangjingbo1226/AutoNER" -> "v-mipeng/LexiconAugmentedNER"
"deepcs233/jieba_fast" -> "ArthurRizar/tensorflow_ernie"
"deepcs233/jieba_fast" -> "yichen0831/opencc-python" ["e"=1]
"deepcs233/jieba_fast" -> "rockyzhengwu/FoolNLTK"
"deepcs233/jieba_fast" -> "bojone/SimCSE"
"deepcs233/jieba_fast" -> "ArtistScript/FastTextRank"
"deepcs233/jieba_fast" -> "fighting41love/Chinese_from_dongxiexidian"
"deepcs233/jieba_fast" -> "chineseGLUE/chineseGLUE"
"deepcs233/jieba_fast" -> "thunlp/THULAC-Python"
"deepcs233/jieba_fast" -> "ymcui/Chinese-PreTrained-XLNet"
"deepcs233/jieba_fast" -> "CLUEbenchmark/CLUEPretrainedModels"
"deepcs233/jieba_fast" -> "ZhuiyiTechnology/simbert"
"deepcs233/jieba_fast" -> "liuhuanyong/ComplexEventExtraction"
"deepcs233/jieba_fast" -> "ysc/cws_evaluation"
"deepcs233/jieba_fast" -> "letiantian/TextRank4ZH"
"deepcs233/jieba_fast" -> "fighting41love/cocoNLP"
"yongzhuo/Macadam" -> "ProHiryu/albert-chinese-ner"
"yongzhuo/Macadam" -> "zhaogaofeng611/TextMatch"
"yongzhuo/Macadam" -> "jeffery0628/text_classification"
"yongzhuo/Macadam" -> "yongzhuo/Macropodus"
"yongzhuo/Macadam" -> "CLOVEXCWZ/NER_DEMO"
"fxy96/Stock-Selection-a-Framework" -> "fxy96/Likelihood-Lab-AI-Seminar-2018"
"fxy96/Stock-Selection-a-Framework" -> "fxy96/Robust-Log-Optimal-Strategy-with-Reinforcement-Learning"
"fxy96/Stock-Selection-a-Framework" -> "fxy96/SYSU-ZhaoXu-Machine-Learning-Seminar"
"fxy96/Stock-Selection-a-Framework" -> "PolyKen/AlphaRenju_Zero"
"fxy96/Stock-Selection-a-Framework" -> "qq303067814/Reinforcement-learning-in-portfolio-management-"
"TsinghuaAI/CPM-1-Generate" -> "yangjianxin1/CPM"
"TsinghuaAI/CPM-1-Generate" -> "deepdialog/CPM-LM-TF2"
"TsinghuaAI/CPM-1-Generate" -> "OpenBMB/BMInf"
"TsinghuaAI/CPM-1-Generate" -> "clue-ai/PromptCLUE" ["e"=1]
"TsinghuaAI/CPM-1-Generate" -> "TsinghuaAI/CPM-2-Pretrain"
"TsinghuaAI/CPM-1-Generate" -> "thu-coai/CDial-GPT"
"TsinghuaAI/CPM-1-Generate" -> "TsinghuaAI/CPM-2-Finetune"
"TsinghuaAI/CPM-1-Generate" -> "thu-coai/EVA"
"TsinghuaAI/CPM-1-Generate" -> "fastnlp/CPT"
"TsinghuaAI/CPM-1-Generate" -> "ZhuiyiTechnology/t5-pegasus"
"TsinghuaAI/CPM-1-Generate" -> "renmada/t5-pegasus-pytorch"
"TsinghuaAI/CPM-1-Generate" -> "imcaspar/gpt2-ml"
"TsinghuaAI/CPM-1-Generate" -> "liucongg/GPT2-NewsTitle"
"TsinghuaAI/CPM-1-Generate" -> "ljynlp/W2NER"
"TsinghuaAI/CPM-1-Generate" -> "yangjianxin1/GPT2-chitchat"
"fate233/toutiao-multilevel-text-classfication-dataset" -> "fate233/toutiao-text-classfication-dataset"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset"
"liuhuanyong/ChineseEmbedding" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/ChineseEmbedding" -> "liuhuanyong/Word2Vector"
"liuhuanyong/ChineseEmbedding" -> "terrifyzhao/text_matching"
"liuhuanyong/ChineseEmbedding" -> "thunlp/OpenHowNet"
"liuhuanyong/ChineseEmbedding" -> "contr4l/SimilarCharacter" ["e"=1]
"liuhuanyong/ChineseEmbedding" -> "yaleimeng/Final_word_Similarity"
"liuhuanyong/ChineseEmbedding" -> "smilelight/lightKG"
"liuhuanyong/ChineseEmbedding" -> "wavewangyue/kbqa" ["e"=1]
"liuhuanyong/ChineseEmbedding" -> "smilelight/lightNLP"
"liuhuanyong/ChineseEmbedding" -> "stephen-v/zh-NER-keras" ["e"=1]
"MatNLP/SMedBERT" -> "algoflow19/SMedBERT"
"luozhouyang/AutoPhraseX" -> "shangjingbo1226/AutoPhrase"
"luozhouyang/AutoPhraseX" -> "powerycy/DeepKg"
"percent4/spo_extract_platform" -> "percent4/knowledge_graph_demo"
"percent4/spo_extract_platform" -> "percent4/people_relation_extract"
"percent4/spo_extract_platform" -> "zhengyima/kg-baseline-pytorch"
"percent4/spo_extract_platform" -> "percent4/ccks_triple_extract"
"percent4/spo_extract_platform" -> "Jacen789/relation-extraction"
"percent4/spo_extract_platform" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"percent4/spo_extract_platform" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"percent4/spo_extract_platform" -> "WangShengguang/ccks-2020" ["e"=1]
"percent4/spo_extract_platform" -> "buppt/ChineseNRE"
"facebookresearch/rlstructures" -> "facebookresearch/mtrl"
"facebookresearch/rlstructures" -> "facebookresearch/salina" ["e"=1]
"Chevalier1024/CCF-BDCI-ABSA" -> "rebornZH/2019-CCF-BDCI-NLP"
"kamalkraj/ALBERT-TF2.0" -> "kpe/bert-for-tf2"
"kamalkraj/ALBERT-TF2.0" -> "kamalkraj/BERT-NER-TF"
"LiyuanLucasLiu/Torch-Scope" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"hellonlp/classifier_multi_label_seq2seq_attention" -> "hellonlp/classifier_multi_label_denses"
"cjymz886/text_rnn_attention" -> "cjymz886/text-cnn"
"sakuranew/BERT-AttributeExtraction" -> "Wangpeiyi9979/IE-Bert-CNN"
"ofrikleinfeld/ObjectPermanence" -> "idanachi/RegRec_and_PCM"
"ofrikleinfeld/ObjectPermanence" -> "dvirsamuel/DRAGON"
"FudanNLP/CWS_LSTM" -> "FudanNLP/CWS_GatedRNN"
"FudanNLP/NLPCC-WordSeg-Weibo" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "guitaowufeng/TPANN"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "FudanNLP/fudan_mtl_reviews"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "yanshao9798/tagger"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "jcyk/CWS"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "FudanNLP/NLPCC-WordSeg-Weibo"
"anoperson/jointEE-NN" -> "lx865712528/JMEE"
"anoperson/jointEE-NN" -> "mgormley/ace-data-prep"
"anoperson/jointEE-NN" -> "AveryLiu/TD-DMN"
"anoperson/jointEE-NN" -> "yubochen/NBTNGMA4ED"
"anoperson/jointEE-NN" -> "bishanyang/EventEntityExtractor"
"anoperson/jointEE-NN" -> "ThanhChinhBK/event_detector"
"anoperson/jointEE-NN" -> "sanmusunrise/NPNs"
"anoperson/jointEE-NN" -> "Niharikadutta/EventExtractionNLP"
"anoperson/jointEE-NN" -> "lx865712528/EMNLP2018-JMEE"
"anoperson/jointEE-NN" -> "hendrydong/Chinese-Event-Extraction"
"anoperson/jointEE-NN" -> "zhangluoyang/cnn-for-auto-event-extract"
"suolyer/PyTorch_BERT_Biaffine_NER" -> "juntaoy/biaffine-ner"
"THU-KEG/MAVEN-dataset" -> "raspberryice/gen-arg"
"THU-KEG/MAVEN-dataset" -> "nlpcl-lab/ace2005-preprocessing"
"THU-KEG/MAVEN-dataset" -> "231sm/Low_Resource_KBP"
"THU-KEG/MAVEN-dataset" -> "thunlp/HMEAE"
"THU-KEG/MAVEN-dataset" -> "nlpcl-lab/bert-event-extraction"
"THU-KEG/MAVEN-dataset" -> "xinyadu/eeqa"
"THU-KEG/MAVEN-dataset" -> "carrie0307/DL_EventExtractionPapers"
"THU-KEG/MAVEN-dataset" -> "THU-KEG/CLEVE"
"THU-KEG/MAVEN-dataset" -> "zjunlp/DocED"
"THU-KEG/MAVEN-dataset" -> "thunlp/Adv-ED"
"THU-KEG/MAVEN-dataset" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"THU-KEG/MAVEN-dataset" -> "PlusLabNLP/DEGREE"
"THU-KEG/MAVEN-dataset" -> "TimeBurningFish/FewFC"
"THU-KEG/MAVEN-dataset" -> "cuishiyao96/eegcned"
"THU-KEG/MAVEN-dataset" -> "xinyadu/doc_event_role"
"Receiling/UniRE" -> "Coopercoppers/PFN"
"Receiling/UniRE" -> "thunlp/PL-Marker"
"gaohongkui/TPLinker-NER" -> "powerycy/TPlinker-ycy"
"gaohongkui/TPLinker-NER" -> "gaohongkui/GlobalPointer_pytorch"
"gaohongkui/TPLinker-NER" -> "JunnYu/GPLinker_pytorch"
"gaohongkui/TPLinker-NER" -> "xhw205/GPLinker_torch"
"gaohongkui/TPLinker-NER" -> "longlongman/CasRel-pytorch-reimplement"
"gaohongkui/TPLinker-NER" -> "powerycy/DeepKg"
"powerycy/TPlinker-ycy" -> "gaohongkui/TPLinker-NER"
"TsinghuaAI/CPM-2-Finetune" -> "TsinghuaAI/CPM-2-Pretrain"
"TsinghuaAI/CPM-2-Finetune" -> "TsinghuaAI/CPM"
"zhoujx4/NLP-Series-relation-extraction" -> "zhoujx4/DuIE"
"zhoujx4/NLP-Series-relation-extraction" -> "SL-Stone/ERE-20210518"
"bohanli/BERT-flow" -> "bojone/BERT-whitening"
"bohanli/BERT-flow" -> "bojone/SimCSE"
"bohanli/BERT-flow" -> "yym6472/ConSERT"
"bohanli/BERT-flow" -> "autoliuweijie/BERT-whitening-pytorch"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/simbert"
"bohanli/BERT-flow" -> "autoliuweijie/FastBERT"
"bohanli/BERT-flow" -> "princeton-nlp/SimCSE"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/pretrained-models"
"bohanli/BERT-flow" -> "LeeSureman/Flat-Lattice-Transformer"
"bohanli/BERT-flow" -> "airaria/TextBrewer"
"bohanli/BERT-flow" -> "bojone/CoSENT"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/WoBERT"
"bohanli/BERT-flow" -> "UKPLab/pytorch-bertflow"
"bohanli/BERT-flow" -> "ymcui/Chinese-ELECTRA"
"bohanli/BERT-flow" -> "sfzhou5678/PolyEncoder" ["e"=1]
"taishan1994/pytorch_triple_extraction" -> "mangonihao/EntityRelationExtraction"
"taishan1994/pytorch_triple_extraction" -> "Ricardokevins/Bert-In-Relation-Extraction"
"taishan1994/pytorch_triple_extraction" -> "xhw205/GPLinker_torch"
"taishan1994/pytorch_triple_extraction" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"taishan1994/pytorch_triple_extraction" -> "taishan1994/OneRel_chinese"
"taishan1994/pytorch_triple_extraction" -> "taishan1994/pytorch_GlobalPointer_triple_extraction"
"taishan1994/pytorch_triple_extraction" -> "taishan1994/pytorch_bert_relation_extraction"
"taishan1994/pytorch_triple_extraction" -> "Jacen789/relation-extraction"
"taishan1994/pytorch_triple_extraction" -> "taishan1994/chinese_information_extraction"
"CLOVEXCWZ/NER_DEMO" -> "yumath/bertNER"
"CLOVEXCWZ/NER_DEMO" -> "StanleyLsx/entity_extractor_by_ner"
"CLOVEXCWZ/NER_DEMO" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"CLOVEXCWZ/NER_DEMO" -> "PeijiYang/BERT-BiLSTM-CRF-NER-pytorch"
"CLOVEXCWZ/NER_DEMO" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"CLOVEXCWZ/NER_DEMO" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"CLOVEXCWZ/NER_DEMO" -> "liushaoweihua/keras-bert-ner" ["e"=1]
"CLOVEXCWZ/NER_DEMO" -> "xuanzebi/BERT-CH-NER"
"CLOVEXCWZ/NER_DEMO" -> "Marilynmontu/ChineseNER-pytorch"
"liuhuanyong/MusicLyricChatbot" -> "gaussic/Chinese-Lyric-Corpus"
"liuhuanyong/MusicLyricChatbot" -> "liuhuanyong/MiningZhiDaoQACorpus"
"liuhuanyong/MusicLyricChatbot" -> "dengxiuqi/ChineseLyrics"
"luhuiguo/chinese-utils" -> "NLPchina/nlp-lang"
"jannson/yaha" -> "jannson/wordmaker"
"jannson/yaha" -> "avplayer/wordmaker"
"jannson/yaha" -> "sing1ee/dict_build"
"jannson/yaha" -> "GeorgeBourne/grid"
"jannson/yaha" -> "someus/TextRank4ZH"
"jannson/yaha" -> "fxsjy/finalseg" ["e"=1]
"jannson/yaha" -> "yanghanxy/New-Word-Detection"
"baiyyang/medical-entity-recognition" -> "baiyyang/medical_ner_crfsuite"
"baiyyang/medical-entity-recognition" -> "liuhuanyong/MedicalNamedEntityRecognition"
"baiyyang/medical-entity-recognition" -> "yixiu00001/LSTM-CRF-medical"
"baiyyang/medical-entity-recognition" -> "pumpkinduo/KnowledgeGraph_NER"
"baiyyang/medical-entity-recognition" -> "MenglinLu/Chinese-clinical-NER"
"baiyyang/medical-entity-recognition" -> "kyzhouhzau/CCKS-2018-NER"
"pumpkinduo/KnowledgeGraph_NER" -> "liuhuanyong/MedicalNamedEntityRecognition"
"pumpkinduo/KnowledgeGraph_NER" -> "baiyyang/medical-entity-recognition"
"pumpkinduo/KnowledgeGraph_NER" -> "yixiu00001/LSTM-CRF-medical"
"pumpkinduo/KnowledgeGraph_NER" -> "baiyang2464/chatbot-base-on-Knowledge-Graph"
"pumpkinduo/KnowledgeGraph_NER" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"pumpkinduo/KnowledgeGraph_NER" -> "phychaos/transformer_crf"
"pumpkinduo/KnowledgeGraph_NER" -> "MenglinLu/Chinese-clinical-NER"
"AveryLiu/TD-DMN" -> "yubochen/NBTNGMA4ED"
"AveryLiu/TD-DMN" -> "luyaojie/delta-learning-for-ed"
"CLUEbenchmark/FewCLUE" -> "bojone/Pattern-Exploiting-Training"
"CLUEbenchmark/FewCLUE" -> "bojone/P-tuning"
"CLUEbenchmark/FewCLUE" -> "THUDM/P-tuning" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "rrmenon10/ADAPET" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "yym6472/ConSERT"
"CLUEbenchmark/FewCLUE" -> "alibaba-research/ChineseBLUE"
"CLUEbenchmark/FewCLUE" -> "sunyilgdx/NSP-BERT"
"CLUEbenchmark/FewCLUE" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/FewCLUE" -> "bojone/BERT-whitening"
"CLUEbenchmark/FewCLUE" -> "bojone/SimCSE"
"CLUEbenchmark/FewCLUE" -> "CLUEbenchmark/pCLUE" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "princeton-nlp/PURE"
"CLUEbenchmark/FewCLUE" -> "ljynlp/W2NER"
"CLUEbenchmark/FewCLUE" -> "ShannonAI/mrc-for-flat-nested-ner"
"CLUEbenchmark/FewCLUE" -> "thu-coai/CrossWOZ" ["e"=1]
"acl2017submission/event-data" -> "wilburOne/ZeroShotEvent"
"bishanyang/EventEntityExtractor" -> "anoperson/jointEE-NN"
"bishanyang/EventEntityExtractor" -> "yifange/event_extraction"
"raspberryice/gen-arg" -> "THU-KEG/CLEVE"
"raspberryice/gen-arg" -> "xinyadu/doc_event_role"
"raspberryice/gen-arg" -> "xinyadu/eeqa"
"raspberryice/gen-arg" -> "zjunlp/DocED"
"raspberryice/gen-arg" -> "PlusLabNLP/DEGREE"
"raspberryice/gen-arg" -> "mayubo2333/PAIE"
"raspberryice/gen-arg" -> "THU-KEG/MAVEN-dataset"
"raspberryice/gen-arg" -> "cuishiyao96/eegcned"
"thunlp/Adv-ED" -> "xinyadu/doc_event_role"
"thunlp/Adv-ED" -> "thunlp/TLNN"
"thunlp/Adv-ED" -> "AveryLiu/TD-DMN"
"thunlp/Adv-ED" -> "yubochen/NBTNGMA4ED"
"thunlp/Adv-ED" -> "JoeZhouWenxuan/Self-regulation-Employing-a-Generative-Adversarial-Network-to-Improve-Event-Detection"
"thunlp/Adv-ED" -> "sanmusunrise/NPNs"
"wilburOne/ZeroShotEvent" -> "yubochen/NBTNGMA4ED"
"wilburOne/ZeroShotEvent" -> "acl2017submission/event-data"
"wilburOne/ZeroShotEvent" -> "hunterhector/EvmEval"
"yubochen/NBTNGMA4ED" -> "AveryLiu/TD-DMN"
"yubochen/NBTNGMA4ED" -> "lx865712528/JMEE"
"yubochen/NBTNGMA4ED" -> "wilburOne/ZeroShotEvent"
"king-yyf/CMeKG_tools" -> "xcwill/CMeKG_labelingPlatform"
"king-yyf/CMeKG_tools" -> "huyuanxin/CMeKGCrawler"
"zhangziliang04/kgRobot" -> "zhangziliang04/OpendialEx"
"zhangziliang04/kgRobot" -> "kangzhun/KnowledgeGraph-QA-Service"
"zhangziliang04/kgRobot" -> "M0025/KnowledgeGraphOfA-shareCompanys"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/LightNER"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"wangle1218/deep_text_matching" -> "terrifyzhao/text_matching"
"wangle1218/deep_text_matching" -> "ZhuiyiTechnology/simbert"
"wangle1218/deep_text_matching" -> "zhaogaofeng611/TextMatch"
"wangle1218/deep_text_matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"wangle1218/deep_text_matching" -> "MachineLP/TextMatch"
"sunyilgdx/NSP-BERT" -> "bojone/Pattern-Exploiting-Training"
"sunyilgdx/NSP-BERT" -> "bojone/P-tuning"
"sunyilgdx/NSP-BERT" -> "zhoujx4/NLP-Series-sentence-embeddings"
"JustFollowUs/Deep-Learning" -> "JustFollowUs/Reinforcement-Learning"
"JustFollowUs/Deep-Learning" -> "JustFollowUs/Computer-Graphics"
"intersun/PKD-for-BERT-Model-Compression" -> "qiangsiwei/bert_distill"
"intersun/PKD-for-BERT-Model-Compression" -> "JetRunner/BERT-of-Theseus"
"percent4/knowledge_graph_demo" -> "percent4/spo_extract_platform"
"percent4/knowledge_graph_demo" -> "leefsir/triplet_extraction"
"percent4/knowledge_graph_demo" -> "percent4/ccks_triple_extract"
"percent4/knowledge_graph_demo" -> "percent4/people_relation_extract"
"bojone/P-tuning" -> "bojone/Pattern-Exploiting-Training"
"bojone/P-tuning" -> "THUDM/P-tuning" ["e"=1]
"crownpku/Chinese-Annotator" -> "rockingdingo/deepnlp"
"crownpku/Chinese-Annotator" -> "liu-nlper/NER-LSTM-CRF"
"crownpku/Chinese-Annotator" -> "crownpku/awesome-chinese-nlp"
"crownpku/Chinese-Annotator" -> "zqhZY/rasa_chatbot"
"crownpku/Chinese-Annotator" -> "thunlp/TensorFlow-NRE" ["e"=1]
"crownpku/Chinese-Annotator" -> "zjy-ucas/ChineseNER"
"crownpku/Chinese-Annotator" -> "koth/kcws"
"crownpku/Chinese-Annotator" -> "shijiebei2009/CEC-Corpus"
"crownpku/Chinese-Annotator" -> "Roshanson/TextInfoExp"
"crownpku/Chinese-Annotator" -> "SnakeHacker/QA-Snake" ["e"=1]
"crownpku/Chinese-Annotator" -> "fateleak/dgk_lost_conv" ["e"=1]
"crownpku/Chinese-Annotator" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"crownpku/Chinese-Annotator" -> "cnschema/cnschema"
"crownpku/Chinese-Annotator" -> "jiesutd/SUTDAnnotator"
"crownpku/Chinese-Annotator" -> "PKULCWM/PKUSUMSUM" ["e"=1]
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Computer-Vision"
"zhoujx4/DuEE" -> "zhoujx4/DuIE"
"zhoujx4/DuEE" -> "maopademiao/duee_fin"
"LiyuanLucasLiu/LightNER" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"LiyuanLucasLiu/LightNER" -> "GentleZhu/ReMine"
"LiyuanLucasLiu/LightNER" -> "LiyuanLucasLiu/Vanilla_NER"
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" -> "aceimnorstuvwxz/toutiao-text-classfication-dataset"
"bojone/lic2020_baselines" -> "qiufengyuyi/event_extraction"
"bojone/lic2020_baselines" -> "carrie0307/baidu-ee2020"
"bojone/lic2020_baselines" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"bojone/lic2020_baselines" -> "lx865712528/EMNLP2018-JMEE"
"bojone/lic2020_baselines" -> "hecongqing/CCKS2019_EventEntityExtraction_Rank5"
"bojone/lic2020_baselines" -> "xiaoqian19940510/Event-Extraction"
"bojone/lic2020_baselines" -> "bojone/dgcnn_for_reading_comprehension"
"bojone/lic2020_baselines" -> "bojone/kg-2019"
"bojone/lic2020_baselines" -> "ARDUJS/Event-Extration"
"bojone/lic2020_baselines" -> "ll0iecas/BD_event-extraction"
"brightmart/xlnet_zh" -> "ymcui/Chinese-PreTrained-XLNet"
"brightmart/xlnet_zh" -> "CLUEbenchmark/ELECTRA"
"xiong666/ccf_financial_negative" -> "gaozhanfire/CCF-BDCI2019_Entity_Discovery"
"xiong666/ccf_financial_negative" -> "Chevalier1024/CCF-BDCI-ABSA"
"xiong666/ccf_financial_negative" -> "rebornZH/2019-CCF-BDCI-NLP"
"AvivNavon/nash-mtl" -> "Cranial-XIX/CAGrad"
"AvivNavon/nash-mtl" -> "lorenmt/auto-lambda"
"fate233/toutiao-text-classfication-dataset" -> "fate233/toutiao-multilevel-text-classfication-dataset"
"renxingkai/BERT_Chinese_Classification" -> "pengming617/bert_classification"
"renxingkai/BERT_Chinese_Classification" -> "NLPScott/bert-Chinese-classification-task"
"renxingkai/BERT_Chinese_Classification" -> "SunYanCN/BERT-chinese-text-classification-and-deployment"
"renxingkai/BERT_Chinese_Classification" -> "ami66/ChineseTextClassifier" ["e"=1]
"renxingkai/BERT_Chinese_Classification" -> "zhanlaoban/Transformers_for_Text_Classification"
"renxingkai/BERT_Chinese_Classification" -> "songyingxin/Bert-TextClassification"
"renxingkai/BERT_Chinese_Classification" -> "yaleimeng/TextClassify_with_BERT"
"renxingkai/BERT_Chinese_Classification" -> "cjymz886/text-cnn"
"renxingkai/BERT_Chinese_Classification" -> "fennuDetudou/tudouNLP"
"renxingkai/BERT_Chinese_Classification" -> "terrifyzhao/bert-utils"
"renxingkai/BERT_Chinese_Classification" -> "huwenxianglyy/bert-use-demo"
"renxingkai/BERT_Chinese_Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"renxingkai/BERT_Chinese_Classification" -> "bigboNed3/chinese_ulmfit" ["e"=1]
"renxingkai/BERT_Chinese_Classification" -> "brightmart/sentiment_analysis_fine_grain"
"renxingkai/BERT_Chinese_Classification" -> "chenghuige/wenzheng"
"liuhuanyong/TopicCluster" -> "liuhuanyong/EventMonitor"
"liuhuanyong/TopicCluster" -> "DengYangyong/LDA_gensim"
"LittletreeZou/Question-Pairs-Matching" -> "ziweipolaris/atec2018-nlp"
"LittletreeZou/Question-Pairs-Matching" -> "Huijun-Cui/ATEC-NLP"
"LittletreeZou/Question-Pairs-Matching" -> "databinQ/paipaidai_comp"
"LittletreeZou/Question-Pairs-Matching" -> "zle1992/atec"
"daniellibin/nCoV-2019-sentence-similarity" -> "lsq357/rank6"
"EOA-AILab/NER-Chinese" -> "EOA-AILab/Seg_Pos"
"EOA-AILab/NER-Chinese" -> "ProHiryu/albert-chinese-ner"
"EOA-AILab/NER-Chinese" -> "yuanxiaosc/Entity-Relation-Extraction"
"EOA-AILab/NER-Chinese" -> "xuanzebi/BERT-CH-NER"
"EOA-AILab/NER-Chinese" -> "ProHiryu/bert-chinese-ner"
"EOA-AILab/NER-Chinese" -> "lonePatient/BERT-NER-Pytorch"
"EOA-AILab/NER-Chinese" -> "CLUEbenchmark/CLUENER2020"
"EOA-AILab/NER-Chinese" -> "xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"EOA-AILab/NER-Chinese" -> "zjunlp/deepke"
"EOA-AILab/NER-Chinese" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"EOA-AILab/NER-Chinese" -> "bojone/kg-2019"
"EOA-AILab/NER-Chinese" -> "liuhuanyong/SiameseSentenceSimilarity"
"EOA-AILab/Seg_Pos" -> "EOA-AILab/NER-Chinese"
"songyingxin/TextClassification-Pytorch" -> "songyingxin/Bert-TextClassification"
"songyingxin/TextClassification-Pytorch" -> "songyingxin/BERT-pytorch"
"songyingxin/TextClassification-Pytorch" -> "atnlp/torchtext-summary" ["e"=1]
"songyingxin/TextClassification-Pytorch" -> "zibuyu/research_tao"
"myhhub/zero_knowledge_graph" -> "zhangkai-ai/build-kg-from-scratch"
"myhhub/zero_knowledge_graph" -> "Light-City/PyToNeo4J"
"myhhub/zero_knowledge_graph" -> "weizhixiaoyi/DouBan-KGQA"
"myhhub/zero_knowledge_graph" -> "zhangyqCS/KnowledgeGraph_Agriculture"
"myhhub/zero_knowledge_graph" -> "WenRichard/KBQA-Exploration"
"myhhub/zero_knowledge_graph" -> "JxustLiao/Natural-Language-Processing"
"myhhub/zero_knowledge_graph" -> "lihanghang/NLP-Knowledge-Graph"
"shijiebei2009/CEC-Corpus" -> "liuhuanyong/ComplexEventExtraction"
"shijiebei2009/CEC-Corpus" -> "sanmusunrise/NPNs"
"shijiebei2009/CEC-Corpus" -> "liuhuanyong/EventTriplesExtraction"
"shijiebei2009/CEC-Corpus" -> "xiaoqian19940510/Event-Extraction"
"shijiebei2009/CEC-Corpus" -> "hendrydong/Chinese-Event-Extraction"
"shijiebei2009/CEC-Corpus" -> "carrie0307/DL_EventExtractionPapers"
"shijiebei2009/CEC-Corpus" -> "liuhuanyong/CausalityEventExtraction"
"shijiebei2009/CEC-Corpus" -> "dolphin-zs/Doc2EDAG"
"shijiebei2009/CEC-Corpus" -> "shijiebei2009/CEEC-Corpus"
"shijiebei2009/CEC-Corpus" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"shijiebei2009/CEC-Corpus" -> "lx865712528/EMNLP2018-JMEE"
"shijiebei2009/CEC-Corpus" -> "dwadden/dygiepp"
"shijiebei2009/CEC-Corpus" -> "nonamestreet/weixin_public_corpus"
"shijiebei2009/CEC-Corpus" -> "nlpcl-lab/ace2005-preprocessing"
"shijiebei2009/CEC-Corpus" -> "ml-distribution/chinese-corpus"
"BangLiu/ArticlePairMatching" -> "BangLiu/StoryForest"
"BangLiu/ArticlePairMatching" -> "BangLiu/ConcepT"
"BangLiu/ArticlePairMatching" -> "chongyangtao/MRFN" ["e"=1]
"BangLiu/ArticlePairMatching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"JNhua/Chinese_NER_with_Attention" -> "evilbear/mgw-ner"
"JNhua/Chinese_NER_with_Attention" -> "XingyanLee/Chinese-NER-"
"Rokid/ELMo-chinese" -> "YC-wind/embedding_study"
"Rokid/ELMo-chinese" -> "searobbersduck/ELMo_Chin"
"liuyukid/transformers-ner" -> "weizhepei/BERT-NER"
"liuyukid/transformers-ner" -> "lonePatient/daguan_2019_rank9"
"jd-aig/nlp_baai" -> "thu-coai/CrossWOZ" ["e"=1]
"DoclerLabs/Protip" -> "wintercounter/ccss"
"candlewill/Chinsese_word_vectors" -> "to-shimo/chinese-word2vec"
"beader/ruijin_round1" -> "beader/ruijin_round2"
"beader/ruijin_round1" -> "zhpmatrix/tianchi-ruijin"
"beader/ruijin_round1" -> "ZhengZixiang/tianchi_ruijin_knowledge_graph"
"beader/ruijin_round1" -> "megemini/-_megemini-"
"mattzheng/LtpExtraction" -> "SmallVagetable/opinionExtraction"
"zejunwang1/CSTS" -> "pluto-junzeng/CNSD"
"zejunwang1/CSTS" -> "CLUEbenchmark/SimCLUE"
"zejunwang1/CSTS" -> "bojone/CoSENT"
"xueyouluo/ccks2021-track2-code" -> "wodejiafeiyu/ccks2021-track3-top1"
"xueyouluo/ccks2021-track2-code" -> "xueyouluo/Biaffine-BERT-NER"
"xueyouluo/ccks2021-track2-code" -> "leodotnet/neural-chinese-address-parsing"
"xv44586/ccf_2020_qa_match" -> "xv44586/toolkit4nlp"
"xv44586/ccf_2020_qa_match" -> "nilboy/gaic_track3_pair_sim"
"xv44586/ccf_2020_qa_match" -> "lonePatient/NeZha_Chinese_PyTorch"
"xv44586/ccf_2020_qa_match" -> "zzy99/epidemic-sentence-pair"
"xv44586/ccf_2020_qa_match" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"xv44586/ccf_2020_qa_match" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"xv44586/ccf_2020_qa_match" -> "bojone/oppo-text-match"
"xv44586/ccf_2020_qa_match" -> "chenjiashuo123/CCF_2020_BEIKE"
"xv44586/ccf_2020_qa_match" -> "digix2020/digix2020_ctr_rank1" ["e"=1]
"xv44586/ccf_2020_qa_match" -> "huanghuidmml/epidemicTextMatch"
"xv44586/ccf_2020_qa_match" -> "YunwenTechnology/Unilm"
"xv44586/ccf_2020_qa_match" -> "z814081807/DeepNER"
"xv44586/ccf_2020_qa_match" -> "oleg-yaroshevskiy/quest_qa_labeling"
"xv44586/ccf_2020_qa_match" -> "LogicJake/competition_baselines" ["e"=1]
"xv44586/ccf_2020_qa_match" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"liuhuanyong/EventMonitor" -> "liuhuanyong/ImportantEventExtractor"
"liuhuanyong/EventMonitor" -> "liuhuanyong/TopicCluster"
"foamliu/Machine-Translation-v2" -> "foamliu/Machine-Translation"
"bojone/oppo-text-match" -> "liucongg/2021-GAIIC-Task3-Share"
"bojone/oppo-text-match" -> "nilboy/gaic_track3_pair_sim"
"bojone/oppo-text-match" -> "chizhu/tianchi-gaic-track3-share"
"bojone/oppo-text-match" -> "lonePatient/NeZha_Chinese_PyTorch"
"LeePleased/NegSampling-NER" -> "tricktreat/locate-and-label"
"yueshutong/Doctor" -> "YeYzheng/KGQA-Based-On-medicine"
"zzy99/epidemic-sentence-pair" -> "huanghuidmml/epidemicTextMatch"
"zzy99/epidemic-sentence-pair" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"zzy99/epidemic-sentence-pair" -> "nilboy/gaic_track3_pair_sim"
"zzy99/epidemic-sentence-pair" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"zzy99/epidemic-sentence-pair" -> "daniellibin/nCoV-2019-sentence-similarity"
"zzy99/epidemic-sentence-pair" -> "Makaixin/similar-sentence-pairs-in-epidemic"
"zzy99/epidemic-sentence-pair" -> "linhaow/TextClassify"
"zzy99/epidemic-sentence-pair" -> "xv44586/ccf_2020_qa_match"
"zzy99/epidemic-sentence-pair" -> "z814081807/DeepNER"
"zzy99/epidemic-sentence-pair" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "zhaogaofeng611/TextMatch"
"zzy99/epidemic-sentence-pair" -> "ZhuiyiTechnology/pretrained-models"
"zzy99/epidemic-sentence-pair" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"zzy99/epidemic-sentence-pair" -> "jeffery0628/text_classification"
"zzy99/epidemic-sentence-pair" -> "bojone/oppo-text-match"
"yanshao9798/tagger" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"yanshao9798/tagger" -> "yanshao9798/segmenter"
"SVAIGBA/WMSeg" -> "SVAIGBA/TwASP"
"SVAIGBA/WMSeg" -> "tyistyler/Bert-Chinese-NER"
"SVAIGBA/WMSeg" -> "SVAIGBA/paper_list"
"xv44586/toolkit4nlp" -> "xv44586/ccf_2020_qa_match"
"liutongyang/CMID" -> "xtea/chinese_medical_words"
"liutongyang/CMID" -> "zhangsheng93/cMedQA"
"liutongyang/CMID" -> "lwgkzl/Covid19-NLP"
"chenjiashuo123/CCF_2020_BEIKE" -> "CCChenhao997/House-BEKE"
"dengxiuqi/Lyricist-torch" -> "dengxiuqi/ChineseLyrics"
"sberbank-ai/ner-bert" -> "lemonhu/NER-BERT-pytorch"
"sberbank-ai/ner-bert" -> "Kyubyong/bert_ner"
"sberbank-ai/ner-bert" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"sberbank-ai/ner-bert" -> "kamalkraj/BERT-NER"
"sberbank-ai/ner-bert" -> "kyzhouhzau/BERT-NER"
"sberbank-ai/ner-bert" -> "ZhixiuYe/NER-pytorch"
"sberbank-ai/ner-bert" -> "circlePi/Bert_Chinese_Ner_pytorch"
"sberbank-ai/ner-bert" -> "vlarine/transformers-ru" ["e"=1]
"sberbank-ai/ner-bert" -> "FuYanzhe2/Name-Entity-Recognition"
"deepdialog/CPM-LM-TF2" -> "bojone/CPM_LM_bert4keras"
"tomgrek/zincbase" -> "metabake/mbIntuition"
"tomgrek/zincbase" -> "eugeniosegala/snap-this"
"tomgrek/zincbase" -> "dragona/Android_intro"
"tomgrek/zincbase" -> "wintercounter/mhy"
"tomgrek/zincbase" -> "garlicdevs/Fruit-API"
"tomgrek/zincbase" -> "complexdb/zincbase"
"tomgrek/zincbase" -> "FoksWang/FWPlayer" ["e"=1]
"quincyliang/nlp-data-augmentation" -> "noisemix/noisemix"
"quincyliang/nlp-data-augmentation" -> "zhanlaoban/EDA_NLP_for_Chinese"
"quincyliang/nlp-data-augmentation" -> "pfnet-research/contextual_augmentation"
"quincyliang/nlp-data-augmentation" -> "yongzhuo/nlp_xiaojiang"
"hemingkx/CLUENER2020" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"hemingkx/CLUENER2020" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"hemingkx/CLUENER2020" -> "lemonhu/NER-BERT-pytorch"
"hemingkx/CLUENER2020" -> "DSXiangLi/ChineseNER"
"hemingkx/CLUENER2020" -> "hemingkx/WordSeg"
"hemingkx/CLUENER2020" -> "lonePatient/BERT-NER-Pytorch"
"hemingkx/CLUENER2020" -> "CLUEbenchmark/CLUENER2020"
"hemingkx/CLUENER2020" -> "yumath/bertNER"
"hemingkx/CLUENER2020" -> "qiufengyuyi/sequence_tagging"
"hemingkx/CLUENER2020" -> "z814081807/DeepNER"
"hemingkx/CLUENER2020" -> "DA-southampton/ner"
"hemingkx/CLUENER2020" -> "luopeixiang/named_entity_recognition"
"hemingkx/CLUENER2020" -> "StanleyLsx/entity_extractor_by_ner"
"hemingkx/CLUENER2020" -> "gaohongkui/GlobalPointer_pytorch"
"hemingkx/CLUENER2020" -> "wangle1218/KBQA-for-Diagnosis"
"inspirehep/magpie" -> "RandolphVI/Multi-Label-Text-Classification"
"inspirehep/magpie" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"inspirehep/magpie" -> "chenzhi1992/Multi-Label-Text-Classification"
"inspirehep/magpie" -> "Tencent/NeuralNLP-NeuralClassifier"
"inspirehep/magpie" -> "brightmart/sentiment_analysis_fine_grain"
"inspirehep/magpie" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"inspirehep/magpie" -> "brightmart/text_classification" ["e"=1]
"inspirehep/magpie" -> "may-/cnn-re-tf" ["e"=1]
"inspirehep/magpie" -> "richliao/textClassifier" ["e"=1]
"inspirehep/magpie" -> "scikit-multilearn/scikit-multilearn" ["e"=1]
"inspirehep/magpie" -> "chenyuntc/PyTorchText"
"inspirehep/magpie" -> "davidsbatista/text-classification"
"inspirehep/magpie" -> "dongxiexidian/Chinese"
"inspirehep/magpie" -> "pangwong/pytorch-multi-label-classifier" ["e"=1]
"inspirehep/magpie" -> "BartyzalRadek/Multi-label-Inception-net" ["e"=1]
"kamalkraj/BERT-NER-TF" -> "kpe/bert-for-tf2"
"kamalkraj/BERT-NER-TF" -> "kamalkraj/ALBERT-TF2.0"
"kamalkraj/BERT-NER-TF" -> "saiwaiyanyu/bi-lstm-crf-ner-tf2.0"
"Wangpeiyi9979/IE-Bert-CNN" -> "Wangpeiyi9979/InformationExtractionDemo"
"Wangpeiyi9979/IE-Bert-CNN" -> "cdjasonj/CCF_IE"
"Wangpeiyi9979/IE-Bert-CNN" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"Wangpeiyi9979/IE-Bert-CNN" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once"
"Wangpeiyi9979/IE-Bert-CNN" -> "bojone/kg-2019"
"Wangpeiyi9979/IE-Bert-CNN" -> "yuanxiaosc/Entity-Relation-Extraction"
"Wangpeiyi9979/IE-Bert-CNN" -> "aker218/Baidu-2020-Language-and-Intelligent-Technology-Competition-Relation-Extraction-rank15"
"Wangpeiyi9979/IE-Bert-CNN" -> "houking-can/CCKS2019-Task5"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "hallochen/Adversarial-Attack"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "activemodest/DIAC"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "LiangsLi/ChineseHomophones"
"cjymz886/text_bert_cnn" -> "SuMeng123/text_bert_cnn_rnn"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "yajian/bert"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"searobbersduck/ELMo_Chin" -> "Rokid/ELMo-chinese"
"searobbersduck/ELMo_Chin" -> "YC-wind/embedding_study"
"jiesutd/SubwordEncoding-CWS" -> "jiesutd/RichWordSegmentor"
"wintercounter/mhy" -> "metabake/mbIntuition"
"wintercounter/mhy" -> "eugeniosegala/snap-this"
"wintercounter/mhy" -> "wintercounter/ccss"
"wintercounter/mhy" -> "dragona/Android_intro"
"wintercounter/mhy" -> "garlicdevs/Fruit-API"
"wintercounter/mhy" -> "wintercounter/use-breakpoint"
"wintercounter/mhy" -> "tomgrek/zincbase"
"wintercounter/mhy" -> "sultan99/holycow"
"magicdict/FDDC" -> "dmjvictory/fddc-extraction-release"
"magicdict/FDDC" -> "YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-"
"magicdict/FDDC" -> "mrgjbd/fddc02"
"magicdict/FDDC" -> "Alexzsh/FDDC"
"magicdict/FDDC" -> "Brook-Lan/fddc02_intro"
"liuhuanyong/ImportantEventExtractor" -> "liuhuanyong/EventMonitor"
"liyibo/text-classification-demos" -> "cjymz886/text_bert_cnn"
"liyibo/text-classification-demos" -> "NLPScott/bert-Chinese-classification-task"
"liyibo/text-classification-demos" -> "Cheneng/DPCNN" ["e"=1]
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "xiaoqian19940510/CCKS-2020-event-extraction"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "xyionwu/ccks-2020-finance-transfer-ee-baseline"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "Xiefan-Guo/CCKS2019_subject_extraction"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "jeffery0628/baidu_ee"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "hy-struggle/ccks-ee-subject"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "qiufengyuyi/event_extraction"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "CN-COTER/event_extract"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "Brook-Lan/fddc02_intro"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "WuHuRestaurant/xf_event_extraction2020Top1"
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" -> "houking-can/CCKS2019-Task5"
"lionsoul2014/friso" -> "lionsoul2014/jcseg"
"nonamestreet/weixin_public_corpus" -> "ml-distribution/chinese-corpus"
"nonamestreet/weixin_public_corpus" -> "Samurais/insuranceqa-corpus-zh" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "shijiebei2009/CEC-Corpus"
"nonamestreet/weixin_public_corpus" -> "zhangyics/Chinese-abbreviation-dataset"
"nonamestreet/weixin_public_corpus" -> "wonderfulsuccess/chinese_abstractive_corpus"
"nonamestreet/weixin_public_corpus" -> "thunlp/THUOCL"
"nonamestreet/weixin_public_corpus" -> "kfcd/chaizi" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "liwenzhu/corpusZh"
"nonamestreet/weixin_public_corpus" -> "howl-anderson/tools_for_corpus_of_people_daily"
"nonamestreet/weixin_public_corpus" -> "wainshine/Company-Names-Corpus"
"nonamestreet/weixin_public_corpus" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "taozhijiang/chinese_correct_wsd" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "liuhuanyong/ChineseNLPCorpus"
"nonamestreet/weixin_public_corpus" -> "liuhuanyong/MiningZhiDaoQACorpus"
"nonamestreet/weixin_public_corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"zle1992/atec" -> "Huijun-Cui/ATEC-NLP"
"zle1992/atec" -> "ziweipolaris/atec2018-nlp"
"zle1992/atec" -> "Lapis-Hong/atec-nlp"
"zle1992/atec" -> "raven4752/huabei"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "nlpjoe/2018-CCL-UIIMCS"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "yilirin/BDCI_Car_2018"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "idorce/sentiment-analysis-ccf-bdci"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "nlpjoe/daguan-classify-2018"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "312shan/Subject-and-Sentiment-Analysis"
"bojone/el-2019" -> "panchunguang/ccks_baidu_entity_link"
"thunlp/THULAC-Java" -> "yizhiru/thulac4j"
"thunlp/THULAC-Java" -> "microbun/elasticsearch-thulac-plugin" ["e"=1]
"thunlp/THULAC-Java" -> "thunlp/THULAC"
"thunlp/THULAC-Java" -> "sing1ee/elasticsearch-jieba-plugin" ["e"=1]
"thunlp/THULAC-Java" -> "thunlp/THUCTC" ["e"=1]
"thunlp/THULAC-Java" -> "huaban/jieba-analysis"
"thunlp/THULAC-Java" -> "HIT-SCIR/ltp4j"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "rebornZH/2019-CCF-BDCI-NLP"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "xiong666/ccf_financial_negative"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "Chevalier1024/CCF-BDCI-ABSA"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "icoxfog417/awesome-financial-nlp"
"iesl/dilated-cnn-ner" -> "hankcs/ID-CNN-CWS"
"iesl/dilated-cnn-ner" -> "LopezGG/NN_NER_tensorFlow"
"iesl/dilated-cnn-ner" -> "hltcoe/golden-horse"
"iesl/dilated-cnn-ner" -> "rainarch/DSNER"
"bytedance/effective_transformer" -> "Tencent/TurboTransformers"
"bytedance/effective_transformer" -> "NVIDIA/FasterTransformer" ["e"=1]
"bytedance/effective_transformer" -> "zhihu/cuBERT"
"bytedance/effective_transformer" -> "bytedance/lightseq"
"achernodub/targer" -> "liu-nlper/SLTK"
"achernodub/targer" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"yangjianxin1/LEBERT-NER-Chinese" -> "liuwei1206/LEBERT"
"yangjianxin1/LEBERT-NER-Chinese" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"xcwill/CMeKG_labelingPlatform" -> "huyuanxin/CMeKGCrawler"
"xcwill/CMeKG_labelingPlatform" -> "king-yyf/CMeKG_tools"
"oleg-yaroshevskiy/quest_qa_labeling" -> "robinniesert/kaggle-google-quest"
"oleg-yaroshevskiy/quest_qa_labeling" -> "xv44586/ccf_2020_qa_match"
"oleg-yaroshevskiy/quest_qa_labeling" -> "nyanp/nyaggle" ["e"=1]
"oleg-yaroshevskiy/quest_qa_labeling" -> "bestfitting/kaggle" ["e"=1]
"oleg-yaroshevskiy/quest_qa_labeling" -> "k-fujikawa/Kaggle-Quora-Insincere-Questions-Classification"
"oleg-yaroshevskiy/quest_qa_labeling" -> "jionie/Google-Quest-Answer"
"oleg-yaroshevskiy/quest_qa_labeling" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"oleg-yaroshevskiy/quest_qa_labeling" -> "pudae/kaggle-understanding-clouds" ["e"=1]
"hannahawalsh/ESG_AI" -> "edgetrader/esg-nlp"
"INK-USC/AlpacaTag" -> "INK-USC/TriggerNER"
"SunYanCN/BERT-chinese-text-classification-and-deployment" -> "xmxoxo/BERT-train2deploy"
"SunYanCN/BERT-chinese-text-classification-and-deployment" -> "renxingkai/BERT_Chinese_Classification"
"SunYanCN/BERT-chinese-text-classification-and-deployment" -> "NLPScott/bert-Chinese-classification-task"
"beader/ruijin_round2" -> "beader/ruijin_round1"
"beader/ruijin_round2" -> "zhpmatrix/tianchi-ruijin"
"beader/ruijin_round2" -> "megemini/-_megemini-"
"beader/ruijin_round2" -> "qrfaction/ruijin-kg-SuperGUTScode"
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLUEPretrainedModels"
"CLUEbenchmark/CLUECorpus2020" -> "thu-coai/CDial-GPT"
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUECorpus2020" -> "airaria/TextBrewer"
"CLUEbenchmark/CLUECorpus2020" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLGE"
"CLUEbenchmark/CLUECorpus2020" -> "dbiir/UER-py"
"CLUEbenchmark/CLUECorpus2020" -> "ymcui/Chinese-ELECTRA"
"CLUEbenchmark/CLUECorpus2020" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/CLUECorpus2020" -> "chineseGLUE/chineseGLUE"
"CLUEbenchmark/CLUECorpus2020" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUECorpus2020" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUECorpus2020" -> "imcaspar/gpt2-ml"
"CLUEbenchmark/CLUECorpus2020" -> "ChineseGLUE/ChineseGLUE"
"CLUEbenchmark/CLUECorpus2020" -> "InsaneLife/ChineseNLPCorpus"
"ysc/HtmlExtractor" -> "ysc/rank"
"tigerchen52/synonym_detection" -> "Keson96/SynoCN"
"tigerchen52/synonym_detection" -> "czhang99/SynonymNet"
"tigerchen52/synonym_detection" -> "BiLiangLtd/WordSimilarity"
"hendrydong/Chinese-Event-Extraction" -> "FrankSLB/FDU-NLP-Chinese-Event-Extraction"
"hendrydong/Chinese-Event-Extraction" -> "Aureliu/BIU-RPI-Event-Extraction-Project"
"hendrydong/Chinese-Event-Extraction" -> "anoperson/jointEE-NN"
"hendrydong/Chinese-Event-Extraction" -> "ahsi/Multilingual_Event_Extraction"
"jcyk/greedyCWS" -> "jcyk/CWS"
"jcyk/greedyCWS" -> "SUTDNLP/NNTransitionSegmentor"
"jcyk/greedyCWS" -> "zhouh/WCC-Segmentation"
"jcyk/greedyCWS" -> "hankcs/sub-character-cws"
"yaleimeng/TextClassify_with_BERT" -> "songyingxin/Bert-TextClassification"
"yaleimeng/TextClassify_with_BERT" -> "renxingkai/BERT_Chinese_Classification"
"yilirin/BDCI_Car_2018" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"yilirin/BDCI_Car_2018" -> "xueyouluo/fsauor2018"
"yilirin/BDCI_Car_2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"yilirin/BDCI_Car_2018" -> "nlpjoe/2018-CCL-UIIMCS"
"yilirin/BDCI_Car_2018" -> "idorce/sentiment-analysis-ccf-bdci"
"yilirin/BDCI_Car_2018" -> "chenghuige/wenzheng"
"yilirin/BDCI_Car_2018" -> "PPshrimpGo/BDCI2018-ChinauUicom-1st-solution" ["e"=1]
"yilirin/BDCI_Car_2018" -> "lixinsu/RCZoo" ["e"=1]
"HCPLab-SYSU/Medical_DS" -> "xmshi-trio/MSL"
"HCPLab-SYSU/Medical_DS" -> "nlpir2020/MIE-ACL-2020"
"HCPLab-SYSU/Medical_DS" -> "fantasySE/Dialogue-System-for-Automatic-Diagnosis"
"HCPLab-SYSU/Medical_DS" -> "LiuQL2/MedicalChatbot"
"HCPLab-SYSU/Medical_DS" -> "nnbay/MeicalChatbot-HRL"
"inception-project/inception" -> "webanno/webanno"
"inception-project/inception" -> "dkpro/dkpro-cassis"
"inception-project/inception" -> "inception-project/inception-external-recommender"
"inception-project/inception" -> "nlplab/brat"
"inception-project/inception" -> "inception-project/external-recommender-spacy"
"inception-project/inception" -> "dkpro/dkpro-core" ["e"=1]
"inception-project/inception" -> "TEIC/CETEIcean" ["e"=1]
"inception-project/inception" -> "JavierLuna/pycaprio"
"inception-project/inception" -> "allenai/pawls" ["e"=1]
"SUTDNLP/LibN3L" -> "SUTDNLP/NNNamedEntity"
"shibing624/addressparser" -> "shibing624/companynameparser"
"mlcsdev/mlcsseg" -> "lgnlgn/ansj4solr"
"sing1ee/jieba-solr" -> "sing1ee/analyzer-solr"
"Magic-Bubble/Zhihu" -> "yongyehuang/zhihu-text-classification"
"Magic-Bubble/Zhihu" -> "chenyuntc/PyTorchText"
"Magic-Bubble/Zhihu" -> "coderSkyChen/zhihu_kanshan_cup_2017"
"Magic-Bubble/Zhihu" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"Magic-Bubble/Zhihu" -> "moneyDboat/data_grand"
"Magic-Bubble/Zhihu" -> "chenghuige/wenzheng"
"Magic-Bubble/Zhihu" -> "HouJP/kaggle-quora-question-pairs" ["e"=1]
"Magic-Bubble/Zhihu" -> "nlpjoe/2018-CCL-UIIMCS"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "kaushaltrivedi/fast-bert" ["e"=1]
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "javaidnabi31/Multi-Label-Text-classification-Using-BERT"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "brightmart/sentiment_analysis_fine_grain"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "wshuyi/demo-fastbert-multi-label-classification"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "Magic-Bubble/Zhihu"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "wshuyi/demo-multi-label-classification-bert"
"qrfaction/ruijin-kg-SuperGUTScode" -> "megemini/-_megemini-"
"chenlb/mmseg4j-core" -> "chenlb/mmseg4j-solr"
"jidasheng/bi-lstm-crf" -> "threelittlemonkeys/lstm-crf-pytorch"
"jidasheng/bi-lstm-crf" -> "Louis-udm/NER-BERT-CRF"
"liuhuanyong/CCKS2018Summary" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/CCKS2018Summary" -> "zhpmatrix/tianchi-ruijin"
"liuhuanyong/CCKS2018Summary" -> "liuhuanyong/MedicalNamedEntityRecognition"
"liuhuanyong/ChineseNLPCorpus" -> "fate233/toutiao-text-classfication-dataset"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/KnowledgeGraphSlides"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/ComplexEventExtraction"
"liuhuanyong/ChineseNLPCorpus" -> "SunYanCN/BERT-chinese-text-classification-and-deployment"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/ChineseEmbedding"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/PersonRelationKnowledgeGraph"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/ChineseNLPCorpus" -> "deepwel/Chinese-Annotator"
"liuhuanyong/ChineseNLPCorpus" -> "ProHiryu/bert-chinese-ner"
"julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"didi/athena" -> "didichuxing/athena"
"Sleepychord/CogLTX" -> "SCHENLIU/longformer-chinese"
"Sleepychord/CogLTX" -> "neesetifa/bert_classification"
"Sleepychord/CogLTX" -> "helmy-elrais/RoBERT_Recurrence_over_BERT"
"lxy444/bertcner" -> "GanjinZero/ChineseEHRBert"
"lxy444/bertcner" -> "alibaba-research/ChineseBLUE"
"lxy444/bertcner" -> "fordai/CCKS2019-Chinese-Clinical-NER"
"PengboLiu/NLP-Papers" -> "songyingxin/TextClassification-Pytorch"
"PengboLiu/NLP-Papers" -> "lihanghang/Knowledge-Graph"
"MarsRoger/albert_ner" -> "grallage/ALBERT-BiLSTM-CRF-NER"
"MarsRoger/albert_ner" -> "percent4/ALBERT_NER_KERAS"
"MarsRoger/albert_ner" -> "percent4/ALBERT_4_Time_Recognition"
"hy-struggle/ccks-ee-subject" -> "xyionwu/ccks-2020-finance-transfer-ee-baseline"
"xpqiu/fnlp" -> "ansjsun/ansj_seg" ["e"=1]
"xpqiu/fnlp" -> "memect/hao" ["e"=1]
"xpqiu/fnlp" -> "ling0322/webdict" ["e"=1]
"xpqiu/fnlp" -> "yanxionglu/text_pdf"
"xpqiu/fnlp" -> "NLPchina/nlp-lang"
"xpqiu/fnlp" -> "YeDeming/THUTag" ["e"=1]
"xpqiu/fnlp" -> "lzhang10/maxent" ["e"=1]
"xpqiu/fnlp" -> "NLPchina/Word2VEC_java"
"xpqiu/fnlp" -> "piskvorky/gensim" ["e"=1]
"xpqiu/fnlp" -> "someus/TextRank4ZH"
"xpqiu/fnlp" -> "chenlb/mmseg4j-solr"
"xpqiu/fnlp" -> "jannson/yaha"
"xpqiu/fnlp" -> "Flowerowl/Big-Data-Resources" ["e"=1]
"xpqiu/fnlp" -> "tsroten/pynlpir"
"xpqiu/fnlp" -> "klb3713/sentence2vec" ["e"=1]
"TsinghuaAI/CPM" -> "TsinghuaAI/CPM-2-Pretrain"
"TsinghuaAI/CPM" -> "TsinghuaAI/CPM-2-Finetune"
"TsinghuaAI/CPM" -> "OpenBMB/BMInf"
"TsinghuaAI/CPM" -> "thu-coai/EVA"
"ATEC2018/deep-siamese-text-similarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"PhantomGrapes/MultiDigraphNER" -> "liuwei1206/CCW-NER"
"JustFollowUs/Computer-Vision" -> "JustFollowUs/Deep-Learning"
"nilboy/gaic_track3_pair_sim" -> "daniellibin/gaiic2021_track3_querySim" ["e"=1]
"nilboy/gaic_track3_pair_sim" -> "lonePatient/NeZha_Chinese_PyTorch"
"nilboy/gaic_track3_pair_sim" -> "bojone/oppo-text-match"
"nilboy/gaic_track3_pair_sim" -> "chenghuige/pikachu2" ["e"=1]
"nilboy/gaic_track3_pair_sim" -> "luoda888/2021-GAIIC-phase3-idea"
"nilboy/gaic_track3_pair_sim" -> "xv44586/ccf_2020_qa_match"
"nilboy/gaic_track3_pair_sim" -> "gaohongkui/GlobalPointer_pytorch"
"nilboy/gaic_track3_pair_sim" -> "basketballandlearn/MRC_Competition_Dureader"
"nilboy/gaic_track3_pair_sim" -> "zr2021/2021_QQ_AIAC_Tack1_1st" ["e"=1]
"nilboy/gaic_track3_pair_sim" -> "zzy99/epidemic-sentence-pair"
"nilboy/gaic_track3_pair_sim" -> "BetterBench/2021-Daguan-Cup"
"zake7749/CIKM-AnalytiCup-2018" -> "Leputa/CIKM-AnalytiCup-2018"
"OpenBMB/BMList" -> "OpenBMB/BMCook"
"OpenBMB/BMList" -> "OpenBMB/ModelCenter"
"OpenBMB/BMList" -> "OpenBMB/BMTrain"
"OpenBMB/BMList" -> "OpenBMB/CPM-Live"
"OpenBMB/BMList" -> "OpenBMB/BMInf"
"z17176/Chinese_conversation_sentiment" -> "rainarch/SentiBridge"
"CyberZHG/summary" -> "bojone/accum_optimizer_for_keras"
"CyberZHG/summary" -> "bojone/bert_in_keras"
"liucongg/2021-GAIIC-Task3-Share" -> "luoda888/2021-GAIIC-phase3-idea"
"PeijiYang/BERT-BiLSTM-CRF-NER-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"PeijiYang/BERT-BiLSTM-CRF-NER-pytorch" -> "HandsomeCao/Bert-BiLSTM-CRF-pytorch"
"ll0iecas/BD_event-extraction" -> "jeffery0628/baidu_ee"
"wodejiafeiyu/ccks2021-track3-top1" -> "xueyouluo/ccks2021-track2-code"
"crownpku/awesome-chinese-nlp" -> "crownpku/rasa_nlu_chi"
"jacoxu/STC2" -> "hadifar/stc_clustering"
"jacoxu/STC2" -> "zqhZY/short_text_cnn_cluster"
"jacoxu/STC2" -> "jacoxu/StackOverflow"
"jacoxu/STC2" -> "rashadulrakib/short-text-clustering-enhancement"
"dhwajraj/NER-RNN" -> "dhwajraj/spark-text-tagger"
"dhwajraj/NER-RNN" -> "dhwajraj/fasttext-1"
"Morizeyao/Decoders-Chinese-TF2.0" -> "wind91725/gpt2-ml-finetune-" ["e"=1]
"Morizeyao/Decoders-Chinese-TF2.0" -> "GaoPeng97/transformer-xl-chinese"
"Morizeyao/Decoders-Chinese-TF2.0" -> "imcaspar/gpt2-ml"
"liuhuanyong/LawCrimeMining" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/LawCrimeMining" -> "zhang17173/Event-Extraction"
"liuhuanyong/LawCrimeMining" -> "shelleyHLX/cail" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "FanhuaandLuomu/ParseLawDocuments" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "bamtercelboo/Awesome-Law-NLP-Research-Work" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "renjunxiang/Competition_CAIL" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "oklaM/AI-law"
"liuhuanyong/LawCrimeMining" -> "china-ai-law-challenge/CAIL2019" ["e"=1]
"interrogator/corpkit" -> "interrogator/tucan"
"IceMimosa/geocoding" -> "liuzhibin-cn/address-semantic-search"
"IceMimosa/geocoding" -> "casuallyName/Geocoding"
"ml-distribution/chinese-corpus" -> "nonamestreet/weixin_public_corpus"
"ml-distribution/chinese-corpus" -> "liwenzhu/corpusZh"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "Gxzzz/BiLSTM-CRF"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF"
"OpenBMB/BMTrain" -> "OpenBMB/ModelCenter"
"OpenBMB/BMTrain" -> "OpenBMB/BMCook"
"OpenBMB/BMTrain" -> "OpenBMB/CPM-Live"
"OpenBMB/BMTrain" -> "OpenBMB/BMList"
"OpenBMB/BMTrain" -> "OpenBMB/BMInf"
"OpenBMB/BMTrain" -> "thunlp/OpenDelta" ["e"=1]
"Kyubyong/bert_ner" -> "lemonhu/NER-BERT-pytorch"
"Kyubyong/bert_ner" -> "sberbank-ai/ner-bert"
"Kyubyong/bert_ner" -> "kamalkraj/BERT-NER"
"Kyubyong/bert_ner" -> "kyzhouhzau/BERT-NER"
"Kyubyong/bert_ner" -> "Louis-udm/NER-BERT-CRF"
"Kyubyong/bert_ner" -> "weizhepei/BERT-NER"
"hankcs/multi-criteria-cws" -> "fudannlp16/CWS_Dict"
"hankcs/multi-criteria-cws" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"hankcs/multi-criteria-cws" -> "jcyk/greedyCWS"
"hankcs/multi-criteria-cws" -> "SVAIGBA/WMSeg"
"hankcs/multi-criteria-cws" -> "jiesutd/RichWordSegmentor"
"hankcs/multi-criteria-cws" -> "ownthink/evaluation"
"CLUEbenchmark/ELECTRA" -> "CLUEbenchmark/LightLM"
"CLUEbenchmark/ELECTRA" -> "CLUEbenchmark/DistilBert"
"CLUEbenchmark/ELECTRA" -> "policeme/roberta-wwm-base-distill"
"davidsbatista/NER-Evaluation" -> "jantrienes/nereval"
"davidsbatista/NER-Evaluation" -> "ivyleavedtoadflax/nervaluate"
"kyzhouhzau/CCKS-2018-NER" -> "zhangxiaolei0123/NERuselocal"
"Rowchen/Keyword-Extraction" -> "yanqiangmiffy/shence-cup"
"Rowchen/Keyword-Extraction" -> "bigzhao/Keyword_Extraction"
"pfnet-research/contextual_augmentation" -> "1024er/cbert_aug"
"pfnet-research/contextual_augmentation" -> "quincyliang/nlp-data-augmentation"
"pfnet-research/contextual_augmentation" -> "noisemix/noisemix"
"pfnet-research/contextual_augmentation" -> "jasonwei20/eda_nlp"
"pfnet-research/contextual_augmentation" -> "malllabiisc/DiPS" ["e"=1]
"guotong1988/BERT-multi-gpu" -> "HaoyuHu/bert-multi-gpu"
"lx865712528/ACL2019-ODEE" -> "lx865712528/EMNLP2018-JMEE"
"lx865712528/ACL2019-ODEE" -> "xinyadu/doc_event_role"
"lx865712528/ACL2019-ODEE" -> "nlpcl-lab/bert-event-extraction"
"lx865712528/ACL2019-ODEE" -> "thunlp/Adv-ED"
"lx865712528/ACL2019-ODEE" -> "Hanlard/Transformer-based-pretrained-model-for-event-extraction"
"lx865712528/ACL2019-ODEE" -> "wilburOne/ZeroShotEvent"
"webanno/webanno" -> "inception-project/inception"
"webanno/webanno" -> "proycon/flat"
"webanno/webanno" -> "jonorthwash/ud-annotatrix" ["e"=1]
"yanxionglu/text_pdf" -> "SUTDNLP/LibN3L"
"liuwei1206/CCW-NER" -> "PhantomGrapes/MultiDigraphNER"
"lorenmt/auto-lambda" -> "Cranial-XIX/CAGrad"
"Lightning-AI/lightning-flash" -> "Lightning-AI/lightning-bolts"
"bitlap/geocoding" -> "casuallyName/Geocoding"
"mengxiaoxu/economic_audit_knowledge_graph" -> "mengxiaoxu/entity_relation_extraction"
"mengxiaoxu/economic_audit_knowledge_graph" -> "lzc1/Relation_extraction"
"mengxiaoxu/economic_audit_knowledge_graph" -> "codeants2012/FinancialKnowledgeGraph"
"mengxiaoxu/economic_audit_knowledge_graph" -> "M0025/KnowledgeGraphOfA-shareCompanys"
"RowitZou/LGN" -> "DianboWork/Graph4CNER"
"RowitZou/LGN" -> "liuwei1206/CCW-NER"
"Aureliu/BIU-RPI-Event-Extraction-Project" -> "Aureliu/JavaDMCNN"
"carrie0307/baidu-ee2020" -> "jeffery0628/baidu_ee"
"carrie0307/baidu-ee2020" -> "ARDUJS/Event-Extration"
"carrie0307/baidu-ee2020" -> "ll0iecas/BD_event-extraction"
"jeffery0628/baidu_ee" -> "ll0iecas/BD_event-extraction"
"jeffery0628/baidu_ee" -> "aker218/xf_event_extraction_2020Top1"
"medallia/Word2VecJava" -> "siegfang/word2vec"
"Spico197/DocEE" -> "HangYang-NLP/DE-PPN"
"Spico197/DocEE" -> "RunxinXu/GIT"
"Spico197/DocEE" -> "dolphin-zs/Doc2EDAG"
"Spico197/DocEE" -> "TencentYoutuResearch/EventExtraction-RAAT"
"Spico197/DocEE" -> "carrie0307/DL_EventExtractionPapers"
"Spico197/DocEE" -> "raspberryice/gen-arg"
"Spico197/DocEE" -> "PKUnlp-icler/TSAR"
"Spico197/DocEE" -> "mayubo2333/PAIE"
"Spico197/DocEE" -> "tongmeihan1995/DocEE"
"liwenzhu/corpusZh" -> "ml-distribution/chinese-corpus"
"ssnvxia/OneRel" -> "taishan1994/OneRel_chinese"
"ssnvxia/OneRel" -> "hy-struggle/PRGC"
"taishan1994/OneRel_chinese" -> "ssnvxia/OneRel"
"BangLiu/ConcepT" -> "BangLiu/GIANT"
"BangLiu/ConcepT" -> "BangLiu/StoryForest"
"BangLiu/ConcepT" -> "alibaba-research/ConceptGraph"
"ZihanWangKi/CrossWeigh" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"FrankWork/fudan_mtl_reviews" -> "dhwajraj/deep-text-classifier-mtl"
"FrankWork/fudan_mtl_reviews" -> "ChenglongChen/tensorflow-ASP-MTL"
"FrankWork/fudan_mtl_reviews" -> "ccsasuke/man"
"Lapis-Hong/atec-nlp" -> "rover9632/atec_nlp"
"Lapis-Hong/atec-nlp" -> "jcjview/atec_nlp_sim"
"Lapis-Hong/atec-nlp" -> "zixuanweeei/atec-sim"
"Lapis-Hong/atec-nlp" -> "ziweipolaris/atec2018-nlp"
"Lapis-Hong/atec-nlp" -> "zle1992/atec"
"Lapis-Hong/atec-nlp" -> "JinYang88/atec_nlp_sim"
"WeiHongLee/Awesome-Multi-Task-Learning" -> "VICO-UoE/MTPSL"
"OpenBMB/ModelCenter" -> "OpenBMB/BMCook"
"OpenBMB/ModelCenter" -> "OpenBMB/BMTrain"
"OpenBMB/ModelCenter" -> "OpenBMB/BMList"
"OpenBMB/ModelCenter" -> "OpenBMB/CPM-Live"
"OpenBMB/ModelCenter" -> "OpenBMB/BMInf"
"Leputa/CIKM-AnalytiCup-2018" -> "zake7749/CIKM-AnalytiCup-2018"
"UCSD-AI4H/COVID-Dialogue" -> "UCSD-AI4H/Medical-Dialogue-System"
"UCSD-AI4H/COVID-Dialogue" -> "lwgkzl/MedDG"
"Jianwei-Lv/chinese-event-extraction-pytorch" -> "jeffery0628/baidu_ee"
"Jianwei-Lv/chinese-event-extraction-pytorch" -> "chenking2020/event_extract_master"
"bojone/ee-2019-baseline" -> "bojone/el-2019-baseline"
"bojone/ee-2019-baseline" -> "Xiefan-Guo/CCKS2019_subject_extraction"
"bojone/ee-2019-baseline" -> "xyionwu/ccks-2020-finance-transfer-ee-baseline"
"bojone/ee-2019-baseline" -> "carrie0307/baidu-ee2020"
"cdjasonj/CCF_IE" -> "Wangpeiyi9979/IE-Bert-CNN"
"yya518/FinBERT" -> "ProsusAI/finBERT"
"yya518/FinBERT" -> "nlpaueb/edgar-crawler"
"yya518/FinBERT" -> "psnonis/FinBERT"
"yya518/FinBERT" -> "YangLinyi/FinNLP-Progress" ["e"=1]
"yya518/FinBERT" -> "Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction"
"yya518/FinBERT" -> "mukut03/ESG-BERT"
"yya518/FinBERT" -> "icoxfog417/awesome-financial-nlp"
"yya518/FinBERT" -> "MS20190155/Measuring-Corporate-Culture-Using-Machine-Learning"
"yya518/FinBERT" -> "valuesimplex/FinBERT"
"yya518/FinBERT" -> "abhijeet3922/finbert_embedding"
"yya518/FinBERT" -> "GeminiLn/EarningsCall_Dataset"
"LiuQL2/MedicalChatbot" -> "HCPLab-SYSU/Medical_DS"
"LiuQL2/MedicalChatbot" -> "nnbay/MeicalChatbot-HRL"
"sanmusunrise/NPNs" -> "yubochen/NBTNGMA4ED"
"sanmusunrise/NPNs" -> "thunlp/Adv-ED"
"sanmusunrise/NPNs" -> "thunlp/TLNN"
"sanmusunrise/NPNs" -> "ThanhChinhBK/event_detector"
"sanmusunrise/NPNs" -> "zhangluoyang/cnn-for-auto-event-extract"
"sanmusunrise/NPNs" -> "anoperson/jointEE-NN"
"sanmusunrise/NPNs" -> "acl2017submission/event-data"
"sanmusunrise/NPNs" -> "AveryLiu/TD-DMN"
"sanmusunrise/NPNs" -> "lx865712528/EMNLP2018-JMEE"
"sanmusunrise/NPNs" -> "liushulinle/event_detection_without_triggers"
"sanmusunrise/NPNs" -> "nlpcl-lab/bert-event-extraction"
"sanmusunrise/NPNs" -> "zhaozhixin/DMCNN"
"sanmusunrise/NPNs" -> "thunlp/HMEAE"
"sanmusunrise/NPNs" -> "wilburOne/ZeroShotEvent"
"thunlp/TLNN" -> "thunlp/Adv-ED"
"thunlp/TLNN" -> "sanmusunrise/NPNs"
"bojone/CLUE-bert4keras" -> "ZhuiyiTechnology/roformer-v2"
"bojone/CLUE-bert4keras" -> "nishiwen1214/GLUE-bert4keras"
"bojone/CLUE-bert4keras" -> "CLUEbenchmark/DataCLUE"
"bojone/CLUE-bert4keras" -> "bojone/KgCLUE-bert4keras"
"jcyk/CWS" -> "jcyk/greedyCWS"
"jcyk/CWS" -> "SUTDNLP/NNTransitionSegmentor"
"jcyk/CWS" -> "zhouh/WCC-Segmentation"
"jcyk/CWS" -> "fudannlp16/CWS_Dict"
"nlpjoe/2018-CCL-UIIMCS" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"nlpjoe/2018-CCL-UIIMCS" -> "nlpjoe/daguan-classify-2018"
"nlpjoe/2018-CCL-UIIMCS" -> "yilirin/BDCI_Car_2018"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier_multi_label_seq2seq_attention"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier_multi_label_denses"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier_multi_label_textcnn"
"hellonlp/classifier_multi_label" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"WeiChengTseng/Pytorch-PCGrad" -> "tianheyu927/PCGrad"
"WeiChengTseng/Pytorch-PCGrad" -> "Cranial-XIX/CAGrad"
"WeiChengTseng/Pytorch-PCGrad" -> "WeiChengTseng/WeiChengTseng.github.io"
"WeiChengTseng/Pytorch-PCGrad" -> "WeiChengTseng/policy_transfer"
"WeiChengTseng/Pytorch-PCGrad" -> "AvivNavon/nash-mtl"
"WeiChengTseng/Pytorch-PCGrad" -> "lorenmt/auto-lambda"
"facebookresearch/mtenv" -> "facebookresearch/mtrl"
"ECNUdase/Seminar-Materials" -> "ECNUdase/Seminar-Deep-Learning"
"ECNUdase/Seminar-Materials" -> "ECNUdase/pdf"
"SCHENLIU/longformer-chinese" -> "ValkyriaLenneth/Longformer_ZH"
"shangjingbo1226/ESim" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"HangYang-NLP/DE-PPN" -> "RunxinXu/GIT"
"liuhuanyong/SequentialEventExtration" -> "liuhuanyong/CausalityEventExtraction"
"liuhuanyong/SequentialEventExtration" -> "hchX009/EventInferringSys"
"bojone/GPLinker" -> "JunnYu/GPLinker_pytorch"
"bojone/GPLinker" -> "xhw205/GPLinker_torch"
"bojone/GPLinker" -> "bojone/GlobalPointer"
"bojone/Pattern-Exploiting-Training" -> "bojone/P-tuning"
"bojone/Pattern-Exploiting-Training" -> "sunyilgdx/NSP-BERT"
"bojone/Pattern-Exploiting-Training" -> "CLUEbenchmark/FewCLUE"
"houking-can/CCKS2019-Task5" -> "houking-can/PDFConverter"
"houking-can/CCKS2019-Task5" -> "houking-can/BDCI2019-NER"
"houking-can/CCKS2019-Task5" -> "houking-can/PDFSDK"
"houking-can/CCKS2019-Task5" -> "cdjasonj/CCF_IE"
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" -> "xiong666/ccf_financial_negative"
"evilbear/emr-ner" -> "XingyanLee/Chinese-NER-"
"fudannlp16/CWS_Dict" -> "jcyk/CWS"
"fudannlp16/CWS_Dict" -> "FudanNLP/CWS_LSTM"
"Rayarrow/New-Word-Discovery" -> "xylander23/New-Word-Detection"
"Rayarrow/New-Word-Discovery" -> "zoulala/New_words_find"
"Rayarrow/New-Word-Discovery" -> "bojone/word-discovery"
"saurabhkulkarni77/DistillBERT" -> "policeme/roberta-wwm-base-distill"
"aker218/xf_event_extraction_2020Top1" -> "jeffery0628/baidu_ee"
"OpenBMB/BMCook" -> "OpenBMB/ModelCenter"
"OpenBMB/BMCook" -> "OpenBMB/BMTrain"
"OpenBMB/BMCook" -> "OpenBMB/BMList"
"OpenBMB/BMCook" -> "OpenBMB/CPM-Live"
"Alexzsh/FDDC" -> "YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-"
"Alexzsh/FDDC" -> "dmjvictory/fddc-extraction-release"
"LiangsLi/ChineseHomophones" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"zhangsheng93/cMedQA" -> "zhangsheng93/cMedQA2"
"zhangsheng93/cMedQA" -> "liutongyang/CMID"
"zhangsheng93/cMedQA" -> "lwgkzl/Covid19-NLP"
"Machine-Tom/bertsum-chinese-LAI" -> "425776024/bertsum-chinese"
"lx865712528/JMEE" -> "yubochen/NBTNGMA4ED"
"lx865712528/JMEE" -> "anoperson/jointEE-NN"
"lx865712528/JMEE" -> "qolina/NNED"
"KwangKa/SIMCSE_unsup" -> "Macielyoung/sentence_representation_matching"
"KwangKa/SIMCSE_unsup" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"KwangKa/SIMCSE_unsup" -> "shuxinyin/SimCSE-Pytorch"
"KwangKa/SIMCSE_unsup" -> "zhengyanzhao1997/NLP-model"
"KwangKa/SIMCSE_unsup" -> "pluto-junzeng/CNSD"
"GeminiLn/EarningsCall_Dataset" -> "Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction"
"abhyudaynj/LSTM-CRF-models" -> "clab/stack-lstm-ner"
"abhyudaynj/LSTM-CRF-models" -> "LopezGG/NN_NER_tensorFlow"
"abhyudaynj/LSTM-CRF-models" -> "jiaqianghuai/tf-lstm-crf-batch"
"P01son6415/CSL" -> "CLUEbenchmark/CLGE"
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" -> "kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs"
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" -> "ncbi-nlp/NCBI_BERT" ["e"=1]
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" -> "nxs5899/Named-Entity-Recognition_DeepLearning-keras"
"xgeric/UCPhrase-exp" -> "yumeng5/WeSHClass" ["e"=1]
"xgeric/UCPhrase-exp" -> "yzhan238/CGExpan"
"xgeric/UCPhrase-exp" -> "yzhan238/SeedTopicMine"
"qhjqhj00/SIGIR2021-Pchatbot" -> "zhengyima/DHAP"
"zhengyima/DHAP" -> "qhjqhj00/SIGIR2021-Pchatbot"
"garlicdevs/Fruit-API" -> "metabake/mbIntuition"
"garlicdevs/Fruit-API" -> "eugeniosegala/snap-this"
"garlicdevs/Fruit-API" -> "wintercounter/mhy"
"garlicdevs/Fruit-API" -> "dragona/Android_intro"
"Vincent131499/TextClassifier_Transformer" -> "Vincent131499/Multi_Label_Classifier_finetune"
"xinyadu/doc_event_role" -> "xinyadu/grit_doc_event_entity"
"xinyadu/doc_event_role" -> "thunlp/Adv-ED"
"chaoming0625/FineGrainedOpinionMining" -> "chaoming0625/WaiMaiOpinionMiner"
"yozhao/IKAnalyzer" -> "yangyining/IKAnalyzer"
"adrianjav/rotograd" -> "Cranial-XIX/CAGrad"
"dmjvictory/fddc-extraction-release" -> "magicdict/FDDC"
"dmjvictory/fddc-extraction-release" -> "Alexzsh/FDDC"
"dmjvictory/fddc-extraction-release" -> "YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-"
"dmjvictory/fddc-extraction-release" -> "Brook-Lan/fddc02_intro"
"dmjvictory/fddc-extraction-release" -> "mrgjbd/fddc02"
"dmjvictory/fddc-extraction-release" -> "snowisch/FDDC2018Topic2"
"luoda888/2021-GAIIC-phase3-idea" -> "nilboy/reports"
"luoda888/2021-GAIIC-phase3-idea" -> "chizhu/tianchi-gaic-track3-share"
"luoda888/2021-GAIIC-phase3-idea" -> "liucongg/2021-GAIIC-Task3-Share"
"wintercounter/ccss" -> "wintercounter/use-breakpoint"
"wintercounter/use-breakpoint" -> "wintercounter/ccss"
"wipen/bert_and_ernie" -> "yanqiuxia/BERT-PreTrain"
"lwgkzl/MedDG" -> "ha-lins/GEML-MDG"
"lwgkzl/MedDG" -> "yanguojun123/Medical-Dialogue"
"lwgkzl/MedDG" -> "xmshi-trio/MSL"
"lwgkzl/MedDG" -> "nlpir2020/MIE-ACL-2020"
"helmy-elrais/RoBERT_Recurrence_over_BERT" -> "heraclex12/VLSP2020-Fake-News-Detection"
"Gxzzz/BiLSTM-CRF" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"Gxzzz/BiLSTM-CRF" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"NeilGY/NER_entityRelationExtration" -> "yuanxiaosc/Schema-based-Knowledge-Extraction"
"NeilGY/NER_entityRelationExtration" -> "SL-Stone/ERE-20210518"
"NeilGY/NER_entityRelationExtration" -> "cdjasonj/Joint-Entity-and-Relation-Extraction"
"lzc1/Relation_extraction" -> "yanwii/Chinese-RE"
"1148270327/TextSummary" -> "CourteousWood/text-summarization"
"LopezGG/NN_NER_tensorFlow" -> "LopezGG/Sequence-Labelling"
"LopezGG/NN_NER_tensorFlow" -> "XuezheMax/LasagneNLP" ["e"=1]
"LopezGG/NN_NER_tensorFlow" -> "heshenghuan/LSTM-CRF"
"LopezGG/NN_NER_tensorFlow" -> "liu-nlper/NER-LSTM-CRF"
"Brook-Lan/fddc02_intro" -> "dmjvictory/fddc-extraction-release"
"Brook-Lan/fddc02_intro" -> "magicdict/FDDC"
"Brook-Lan/fddc02_intro" -> "mrgjbd/fddc02"
"Brook-Lan/fddc02_intro" -> "YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-"
"chainer/models" -> "hosseinshn/GradNorm"
"liucongg/UnilmChatchitRobot" -> "YunwenTechnology/Unilm"
"liucongg/UnilmChatchitRobot" -> "YunwenTechnology/QueryGeneration"
"jg8610/multi-task-learning" -> "dhwajraj/deep-text-classifier-mtl"
"mukut03/ESG-BERT" -> "hannahawalsh/ESG_AI"
"allanj/ner_incomplete_annotation" -> "allanj/neural-partialCRF"
"allanj/ner_incomplete_annotation" -> "ZhuiyiTechnology/AutoIE"
"allanj/ner_incomplete_annotation" -> "allanj/ner_with_dependency"
"pengming617/bert_textMatching" -> "pengming617/text_matching"
"pengming617/bert_textMatching" -> "pengming617/LanguageModel"
"pengming617/bert_textMatching" -> "Menyoupingxiaoguo/AliyunSendMail"
"pengming617/bert_textMatching" -> "Menyoupingxiaoguo/MQTT"
"pengming617/bert_textMatching" -> "zhaogaofeng611/TextMatch"
"jannson/wordmaker" -> "jannson/yaha"
"jannson/wordmaker" -> "avplayer/wordmaker"
"jackielinxiao/PE-LTR" -> "weberrr/PE-LTR"
"SapienzaNLP/extend" -> "Pandora-Intelligence/crosslingual-coreference" ["e"=1]
"SapienzaNLP/extend" -> "Babelscape/ner4el"
"SapienzaNLP/extend" -> "nicola-decao/efficient-autoregressive-EL" ["e"=1]
"SapienzaNLP/extend" -> "Babelscape/rebel"
"SapienzaNLP/extend" -> "Babelscape/crocodile"
"AvivNavon/AuxiLearn" -> "idanachi/RegRec_and_PCM"
"duanzhihua/pytorch-pretrained-BERT" -> "duanzhihua/bert_chinese_pytorch"
"sultan99/stylin" -> "sultan99/holycow"
"sultan99/stylin" -> "theguriev/redux-things"
"chizhu/tianchi-gaic-track3-share" -> "nilboy/reports"
"chizhu/tianchi-gaic-track3-share" -> "luoda888/2021-GAIIC-phase3-idea"
"nilboy/reports" -> "chizhu/tianchi-gaic-track3-share"
"CLUEbenchmark/SimCLUE" -> "zejunwang1/CSTS"
"rainarch/DSNER" -> "nooralahzadeh/DSNER-pytorch"
"zhongerqiandan/pretrained-unilm-Chinese" -> "kyang888/unilm"
"ThanhChinhBK/event_detector" -> "lx865712528/JMEE"
"ThanhChinhBK/event_detector" -> "sanmusunrise/NPNs"
"SVAIGBA/TwASP" -> "SVAIGBA/WMSeg"
"raven4752/huabei" -> "world2vec/atec_2018_nlp"
"raven4752/huabei" -> "ziweipolaris/atec2018-nlp"
"DianboWork/SPN4RE" -> "Coopercoppers/PFN"
"DianboWork/SPN4RE" -> "LorrinWWW/two-are-better-than-one"
"DianboWork/SPN4RE" -> "131250208/TPlinker-joint-extraction"
"DianboWork/SPN4RE" -> "nusnlp/PtrNetDecoding4JERE" ["e"=1]
"DianboWork/SPN4RE" -> "weizhepei/CasRel"
"DianboWork/SPN4RE" -> "princeton-nlp/PURE"
"DianboWork/SPN4RE" -> "gaohongkui/TPLinker-NER"
"taoyafan/jinnan" -> "onion1003/tianchi_jinnan"
"taoyafan/jinnan" -> "JonneryR/2019.1-TianChi-Jinnan"
"fangwater/Medical-named-entity-recognition-for-ccks2017" -> "zyh961117/CCKS-2017-task2"
"hankcs/ID-CNN-CWS" -> "hankcs/sub-character-cws"
"wshuyi/demo-fastbert-multi-label-classification" -> "wshuyi/demo-multi-label-classification-bert"
"WeiChengTseng/CLA-NeRF" -> "WeiChengTseng/WeiChengTseng.github.io"
"aker218/Baidu-2020-Language-and-Intelligent-Technology-Competition-Relation-Extraction-rank15" -> "Karl8/Relation-Extraction-2020"
"aker218/Baidu-2020-Language-and-Intelligent-Technology-Competition-Relation-Extraction-rank15" -> "BaberMuyu/relation-extraction"
"aker218/Baidu-2020-Language-and-Intelligent-Technology-Competition-Relation-Extraction-rank15" -> "Wwenhui-03/2020_baidu_RE"
"powerycy/Efficient-GlobalPointer" -> "xhw205/Efficient-GlobalPointer-torch"
"powerycy/Efficient-GlobalPointer" -> "powerycy/Efficient-GlobalPointer-rel"
"powerycy/Efficient-GlobalPointer" -> "xhw205/GlobalPointer_torch"
"fantasySE/Dialogue-System-for-Automatic-Diagnosis" -> "xmshi-trio/MSL"
"nlpir2020/MIE-ACL-2020" -> "HCPLab-SYSU/Medical_DS"
"nlpir2020/MIE-ACL-2020" -> "lwgkzl/MedDG"
"mrgjbd/fddc02" -> "MengChen5770/FDDC_2"
"baiyyang/medical_ner_crfsuite" -> "baiyyang/medical-entity-recognition"
"RunxinXu/GIT" -> "HangYang-NLP/DE-PPN"
"RunxinXu/GIT" -> "Spico197/DocEE"
"RunxinXu/GIT" -> "dolphin-zs/Doc2EDAG"
"RunxinXu/GIT" -> "zjunlp/DocED"
"RunxinXu/GIT" -> "raspberryice/gen-arg"
"qq303067814/Reinforcement-learning-in-portfolio-management-" -> "fxy96/Robust-Log-Optimal-Strategy-with-Reinforcement-Learning"
"qq303067814/Reinforcement-learning-in-portfolio-management-" -> "PolyKen/AlphaRenju_Zero"
"qq303067814/Reinforcement-learning-in-portfolio-management-" -> "qq303067814/DQLearning-Toolbox"
"dozycat/CEQA" -> "zzzvvvxxxd/KGPro"
"bojone/el-2019-baseline" -> "bojone/ee-2019-baseline"
"bojone/el-2019-baseline" -> "bojone/kg-2019-baseline"
"Niharikadutta/EventExtractionNLP" -> "FSudong/eventExtractionCNN"
"bojone/KgCLUE-bert4keras" -> "CLUEbenchmark/KgCLUEbench"
"yanguojun123/Medical-Dialogue" -> "lwgkzl/MedDG"
"proycon/flat" -> "proycon/folia"
"hadifar/stc_clustering" -> "jacoxu/STC2"
"hadifar/stc_clustering" -> "rashadulrakib/short-text-clustering-enhancement"
"mjiang89/MetaPAD" -> "qili5/TruePIE"
"brdav/atrc" -> "menelaoskanakis/RCM"
"brdav/atrc" -> "facebookresearch/astmt"
"nh85905703/demo" -> "jcyk/greedyCWS"
"weberrr/PE-LTR" -> "jackielinxiao/PE-LTR"
"YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-" -> "msw1535540/fddc-extraction-release"
"sultan99/holycow" -> "theguriev/redux-things"
"dhwajraj/spark-text-tagger" -> "dhwajraj/fasttext-1"
"proycon/pynlpl" ["l"="32.577,29.495"]
"proycon/folia" ["l"="32.531,29.586"]
"interrogator/corpkit" ["l"="32.61,29.453"]
"proycon/clam" ["l"="32.576,29.459"]
"fighting41love/funNLP" ["l"="31.715,30.146"]
"hankcs/HanLP" ["l"="31.824,30.18"]
"Embedding/Chinese-Word-Vectors" ["l"="32.012,30.196"]
"google-research/bert" ["l"="30.054,32.634"]
"scutan90/DeepLearning-500-questions" ["l"="23.999,30.98"]
"fxsjy/jieba" ["l"="31.785,30.143"]
"ymcui/Chinese-BERT-wwm" ["l"="32.087,30.221"]
"brightmart/nlp_chinese_corpus" ["l"="32.018,30.231"]
"apachecn/AiLearning" ["l"="24.093,31.058"]
"chinese-poetry/chinese-poetry" ["l"="6.187,17.367"]
"NLP-LOVE/ML-NLP" ["l"="24.216,31.1"]
"d2l-ai/d2l-zh" ["l"="24.114,30.939"]
"huggingface/transformers" ["l"="27.114,30.584"]
"kon9chunkit/GitHub-Chinese-Top-Charts" ["l"="6.431,17.405"]
"imhuay/Algorithm_Interview_Notes-Chinese" ["l"="23.97,31.096"]
"crownpku/Awesome-Chinese-NLP" ["l"="31.98,30.18"]
"looly/hutool" ["l"="6.665,17.936"]
"sqshq/piggymetrics" ["l"="6.817,17.943"]
"halo-dev/halo" ["l"="6.726,17.913"]
"NLPchina/ansj_seg" ["l"="31.814,30.218"]
"hankcs/pyhanlp" ["l"="31.992,30.205"]
"alibaba/arthas" ["l"="9.754,21.486"]
"medcl/elasticsearch-analysis-ik" ["l"="9.891,21.637"]
"HIT-SCIR/ltp" ["l"="31.947,30.174"]
"msgi/nlp-journey" ["l"="32.097,30.143"]
"yongzhuo/nlp_xiaojiang" ["l"="32.176,30.182"]
"zhpmatrix/nlp-competitions-list-review" ["l"="32.142,30.184"]
"songyingxin/NLPer-Interview" ["l"="32.125,30.184"]
"didi/ChineseNLP" ["l"="32.078,30.239"]
"brightmart/albert_zh" ["l"="32.122,30.219"]
"yongzhuo/Keras-TextClassification" ["l"="32.118,30.128"]
"macanv/BERT-BiLSTM-CRF-NER" ["l"="32.174,30.151"]
"BrikerMan/Kashgari" ["l"="32.107,30.167"]
"jiangxinyang227/textClassifier" ["l"="32.142,30.094"]
"InsaneLife/ChineseNLPCorpus" ["l"="32.103,30.233"]
"brightmart/roberta_zh" ["l"="32.153,30.243"]
"zibuyu/research_tao" ["l"="32.051,30.145"]
"huseinzol05/NLP-Models-Tensorflow" ["l"="32.094,30.101"]
"Jiakui/awesome-bert" ["l"="32.129,30.114"]
"FudanNLP/nlp-beginner" ["l"="32.038,30.177"]
"649453932/Bert-Chinese-Text-Classification-Pytorch" ["l"="32.094,30.186"]
"649453932/Chinese-Text-Classification-Pytorch" ["l"="32.051,30.201"]
"bojone/bert4keras" ["l"="32.105,30.251"]
"lonePatient/BERT-NER-Pytorch" ["l"="32.272,30.192"]
"CLUEbenchmark/CLUE" ["l"="32.122,30.268"]
"DA-southampton/NLP_ability" ["l"="32.11,30.203"]
"gaussic/text-classification-cnn-rnn" ["l"="32.065,30.098"]
"CLUEbenchmark/CLUEDatasetSearch" ["l"="32.099,30.275"]
"km1994/nlp_paper_study" ["l"="32.154,30.226"]
"brightmart/text_classification" ["l"="30.018,32.673"]
"SophonPlus/ChineseNlpCorpus" ["l"="32.056,30.246"]
"DA-southampton/Read_Bert_Code" ["l"="32.242,30.239"]
"ChineseGLUE/ChineseGLUE" ["l"="32.17,30.258"]
"DA-southampton/TRM_tutorial" ["l"="32.315,30.335"]
"loujie0822/Pre-trained-Models" ["l"="32.264,30.232"]
"DA-southampton/Tech_Aarticle" ["l"="32.169,30.217"]
"DA-southampton/ner" ["l"="32.325,30.155"]
"rsanshierli/EasyBert" ["l"="32.308,30.204"]
"HIT-SCIR/plm-nlp-code" ["l"="32.254,30.22"]
"leerumor/nlp_tutorial" ["l"="32.194,30.196"]
"wmathor/nlp-tutorial" ["l"="32.214,30.182"]
"MuQiuJun-AI/bert4pytorch" ["l"="32.331,30.322"]
"TingFree/NLPer-Arsenal" ["l"="32.233,30.258"]
"z814081807/DeepNER" ["l"="32.337,30.227"]
"aespresso/a_journey_into_math_of_ml" ["l"="32.153,30.202"]
"NLPScott/bert-Chinese-classification-task" ["l"="32.139,30.046"]
"Socialbird-AILab/BERT-Classification-Tutorial" ["l"="32.127,30.028"]
"ProHiryu/bert-chinese-ner" ["l"="32.257,30.081"]
"brightmart/sentiment_analysis_fine_grain" ["l"="32.074,30.001"]
"terrifyzhao/bert-utils" ["l"="32.159,30.133"]
"Y1ran/NLP-BERT--ChineseVersion" ["l"="32.145,30.063"]
"ymcui/Chinese-PreTrained-XLNet" ["l"="32.158,30.183"]
"renxingkai/BERT_Chinese_Classification" ["l"="32.129,30.008"]
"brightmart/bert_language_understanding" ["l"="32.11,30.035"]
"kyzhouhzau/BERT-NER" ["l"="32.258,30.059"]
"bojone/bert_in_keras" ["l"="32.214,30.131"]
"zhpmatrix/bert-sequence-tagging" ["l"="32.119,29.974"]
"liyibo/text-classification-demos" ["l"="32.022,29.97"]
"SunYanCN/BERT-chinese-text-classification-and-deployment" ["l"="32.18,30.027"]
"jasonwei20/eda_nlp" ["l"="32.075,30.315"]
"zhanlaoban/EDA_NLP_for_Chinese" ["l"="32.15,30.257"]
"makcedward/nlpaug" ["l"="29.681,32.5"]
"google-research/uda" ["l"="32.05,30.38"]
"princeton-nlp/SimCSE" ["l"="32.165,30.335"]
"QData/TextAttack" ["l"="29.644,32.434"]
"namisan/mt-dnn" ["l"="29.853,32.482"]
"styfeng/DataAug4NLP" ["l"="29.606,32.429"]
"ZhuiyiTechnology/pretrained-models" ["l"="32.22,30.276"]
"pfnet-research/contextual_augmentation" ["l"="31.983,30.378"]
"Tencent/NeuralNLP-NeuralClassifier" ["l"="32.074,30.131"]
"huawei-noah/Pretrained-Language-Model" ["l"="32.138,30.302"]
"dbiir/UER-py" ["l"="32.146,30.28"]
"kk7nc/Text_Classification" ["l"="32.024,30.064"]
"ShawnyXiao/TextClassification-Keras" ["l"="-35.139,-17.401"]
"Separius/awesome-sentence-embedding" ["l"="29.891,32.614"]
"TobiasLee/Text-Classification" ["l"="31.51,31.532"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="31.597,31.498"]
"richliao/textClassifier" ["l"="31.467,31.54"]
"castorini/hedwig" ["l"="31.634,31.548"]
"lonePatient/Bert-Multi-Label-Text-Classification" ["l"="32.094,30.015"]
"kaushaltrivedi/fast-bert" ["l"="29.766,32.529"]
"nltk/nltk_data" ["l"="32.122,30.242"]
"nltk/nltk_book" ["l"="20.006,2.729"]
"explosion/spacy-models" ["l"="29.697,32.715"]
"zlsdu/Word-Embedding" ["l"="32.198,30.177"]
"nltk/nltk_contrib" ["l"="19.976,2.745"]
"goto456/stopwords" ["l"="32.006,30.263"]
"nltk/nltk" ["l"="29.92,32.821"]
"nltk/nltk.github.com" ["l"="19.978,2.765"]
"ZhuiyiTechnology/simbert" ["l"="32.229,30.292"]
"luopeixiang/named_entity_recognition" ["l"="32.265,30.135"]
"Franck-Dernoncourt/NeuroNER" ["l"="32.267,29.985"]
"glample/tagger" ["l"="32.242,29.991"]
"guillaumegenthial/sequence_tagging" ["l"="32.226,30.014"]
"monikkinom/ner-lstm" ["l"="32.213,29.979"]
"Hironsan/anago" ["l"="32.287,29.969"]
"UKPLab/emnlp2017-bilstm-cnn-crf" ["l"="32.265,29.967"]
"zjy-ucas/ChineseNER" ["l"="32.228,30.072"]
"LiyuanLucasLiu/LM-LSTM-CRF" ["l"="32.309,29.985"]
"guillaumegenthial/tf_ner" ["l"="32.264,30.005"]
"jiesutd/NCRFpp" ["l"="32.281,30.019"]
"shiyybua/NER" ["l"="32.246,30.051"]
"allenai/bilm-tf" ["l"="29.994,32.599"]
"clab/stack-lstm-ner" ["l"="32.23,29.945"]
"nlplab/brat" ["l"="32.295,30.034"]
"CyberZHG/keras-bert" ["l"="32.127,30.164"]
"loujie0822/DeepIE" ["l"="32.271,30.217"]
"shibing624/pycorrector" ["l"="32.063,30.276"]
"LeeSureman/Flat-Lattice-Transformer" ["l"="32.332,30.212"]
"ShannonAI/mrc-for-flat-nested-ner" ["l"="32.362,30.188"]
"weizhepei/CasRel" ["l"="32.442,30.192"]
"jiesutd/LatticeLSTM" ["l"="32.293,30.101"]
"GanjinZero/awesome_Chinese_medical_NLP" ["l"="32.382,30.315"]
"thunlp/OpenNRE" ["l"="32.24,30.168"]
"yuanxiaosc/Entity-Relation-Extraction" ["l"="32.34,30.151"]
"CLUEbenchmark/CLUENER2020" ["l"="32.293,30.173"]
"princeton-nlp/PURE" ["l"="32.466,30.209"]
"Determined22/zh-NER-TF" ["l"="32.19,30.072"]
"hanxiao/bert-as-service" ["l"="29.94,32.577"]
"crownpku/Information-Extraction-Chinese" ["l"="32.24,30.117"]
"Morizeyao/GPT2-Chinese" ["l"="32.04,30.352"]
"lancopku/pkuseg-python" ["l"="31.94,30.21"]
"PaddlePaddle/PaddleNLP" ["l"="31.988,30.294"]
"PaddlePaddle/ERNIE" ["l"="32.035,30.284"]
"baidu/lac" ["l"="31.98,30.232"]
"PaddlePaddle/Paddle" ["l"="33.971,35.736"]
"PaddlePaddle/PaddleHub" ["l"="33.98,35.806"]
"doccano/doccano" ["l"="32.158,30.113"]
"THUDM/ChatGLM-6B" ["l"="27.085,31"]
"baidu/AnyQ" ["l"="32.03,30.155"]
"baidu/Senta" ["l"="32.032,30.211"]
"baidu/DDParser" ["l"="32.24,30.273"]
"baidu/Familia" ["l"="31.975,30.129"]
"ymcui/Chinese-ELECTRA" ["l"="32.176,30.299"]
"CLUEbenchmark/CLUEPretrainedModels" ["l"="32.2,30.283"]
"Babelscape/rebel" ["l"="32.606,30.253"]
"Babelscape/crocodile" ["l"="32.671,30.275"]
"SapienzaNLP/extend" ["l"="32.68,30.288"]
"Coopercoppers/PFN" ["l"="32.55,30.227"]
"DianboWork/SPN4RE" ["l"="32.515,30.227"]
"Pandora-Intelligence/crosslingual-coreference" ["l"="29.408,32.56"]
"thunlp/PL-Marker" ["l"="32.523,30.238"]
"lavis-nlp/spert" ["l"="32.55,30.209"]
"epfl-dlab/GenIE" ["l"="32.696,30.298"]
"thunlp/DocRED" ["l"="30.669,30.955"]
"LorrinWWW/two-are-better-than-one" ["l"="32.515,30.214"]
"plkmo/BERT-Relation-Extraction" ["l"="30.689,30.993"]
"michiyasunaga/LinkBERT" ["l"="29.975,31.527"]
"BYVoid/OpenCC" ["l"="31.849,30.108"]
"mozillazg/python-pinyin" ["l"="31.936,30.247"]
"rime/home" ["l"="-34.099,-19.005"]
"adobe-fonts/source-han-sans" ["l"="-27.37,-17.415"]
"rime/librime" ["l"="-34.125,-18.955"]
"osfans/trime" ["l"="-34.078,-18.967"]
"isnowfy/snownlp" ["l"="31.911,30.154"]
"adobe-fonts/source-han-serif" ["l"="-27.337,-17.429"]
"studyzy/imewlconverter" ["l"="-27.393,-17.586"]
"yichen0831/opencc-python" ["l"="11.855,-5.065"]
"AIChallenger/AI_Challenger_2018" ["l"="32.039,29.983"]
"chenghuige/wenzheng" ["l"="32.05,29.969"]
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" ["l"="32.035,29.955"]
"BigHeartC/Al_challenger_2018_sentiment_analysis" ["l"="32.015,29.923"]
"zengbin93/jddc_solution_4th" ["l"="28.038,29.091"]
"pengshuang/AI-Comp" ["l"="32.054,29.955"]
"chenyuntc/PyTorchText" ["l"="32.024,30.001"]
"yilirin/BDCI_Car_2018" ["l"="32.003,29.937"]
"PaddlePaddle/LARK" ["l"="32.089,30.118"]
"xueyouluo/fsauor2018" ["l"="32.019,29.947"]
"baidu/DuReader" ["l"="25.966,30.173"]
"HouJP/kaggle-quora-question-pairs" ["l"="25.744,30.238"]
"huangxiangzhou/NLPCC2016KBQA" ["l"="30.179,31.504"]
"thunlp/NREPapers" ["l"="30.7,30.942"]
"thunlp/OpenKE" ["l"="23.042,38.437"]
"qq547276542/Agriculture_KnowledgeGraph" ["l"="32.351,30.208"]
"thunlp/NRE" ["l"="30.774,30.937"]
"liuhuanyong/QASystemOnMedicalKG" ["l"="32.344,30.268"]
"ShomyLiu/pytorch-relation-extraction" ["l"="30.713,30.932"]
"roomylee/awesome-relation-extraction" ["l"="30.724,30.953"]
"buppt/ChineseNER" ["l"="32.28,30.084"]
"yumath/bertNER" ["l"="32.352,30.095"]
"microsoft/Recognizers-Text" ["l"="32.011,30.098"]
"curiosity-ai/catalyst" ["l"="26.196,19.129"]
"zhanzecheng/Time_NLP" ["l"="32.214,30.165"]
"microsoft/FeatureManagement-Dotnet" ["l"="25.412,17.793"]
"microsoft/vert-papers" ["l"="30.913,30.42"]
"microsoft/botbuilder-dotnet" ["l"="23.93,16.087"]
"shinyke/Time-NLP" ["l"="32.004,30.172"]
"microsoft/RulesEngine" ["l"="25.54,17.736"]
"fighting41love/cocoNLP" ["l"="32.217,30.196"]
"thu-coai/CrossWOZ" ["l"="28.152,28.945"]
"microsoft/Microsoft.IO.RecyclableMemoryStream" ["l"="25.282,17.835"]
"AlexPoint/OpenNlp" ["l"="26.171,19.153"]
"sergey-tihon/Stanford.NLP.NET" ["l"="26.159,19.134"]
"RehanSaeed/Schema.NET" ["l"="25.321,17.602"]
"amis92/csharp-source-generators" ["l"="25.274,17.81"]
"jiangnanboy/albert_lstm_crf_ner" ["l"="32.475,30"]
"grallage/ALBERT-BiLSTM-CRF-NER" ["l"="32.506,29.985"]
"MarsRoger/albert_ner" ["l"="32.487,30.008"]
"percent4/ALBERT_NER_KERAS" ["l"="32.467,30.017"]
"jiangnanboy/text_grapher" ["l"="32.517,29.973"]
"km1994/NLP-Interview-Notes" ["l"="32.177,30.243"]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["l"="32.014,30.41"]
"google-research/text-to-text-transfer-transformer" ["l"="29.891,32.455"]
"google/sentencepiece" ["l"="29.919,32.523"]
"first20hours/google-10000-english" ["l"="31.598,28.213"]
"thunlp/OpenPrompt" ["l"="27.575,31.283"]
"yizhongw/self-instruct" ["l"="27.445,31.188"]
"facebookresearch/cc_net" ["l"="29.814,32.348"]
"zacanger/profane-words" ["l"="31.927,30.518"]
"bigscience-workshop/promptsource" ["l"="27.529,31.231"]
"rsennrich/subword-nmt" ["l"="29.949,32.431"]
"LianjiaTech/BELLE" ["l"="27.324,31.171"]
"allenai/RL4LMs" ["l"="27.528,31.212"]
"exacity/deeplearningbook-chinese" ["l"="23.896,31.118"]
"littlecodersh/ItChat" ["l"="15.762,5.473"]
"facebookresearch/fastText" ["l"="30.048,32.705"]
"scrapy/scrapy" ["l"="22.724,4.445"]
"dmlc/xgboost" ["l"="25.345,33.814"]
"binux/pyspider" ["l"="22.584,4.504"]
"2shou/TextGrocery" ["l"="31.913,30.086"]
"someus/TextRank4ZH" ["l"="31.813,30.057"]
"guestwalk/kaggle-2014-criteo" ["l"="22.754,37.307"]
"memect/hao" ["l"="26.955,34.04"]
"cjlin1/liblinear" ["l"="26.768,33.925"]
"salestock/fastText.py" ["l"="30.141,32.697"]
"sing1ee/dict_build" ["l"="32.052,30.11"]
"xpqiu/fnlp" ["l"="31.81,30.121"]
"jiegzhan/multi-class-text-classification-cnn" ["l"="31.513,31.608"]
"tsroten/pynlpir" ["l"="31.904,30.103"]
"koth/kcws" ["l"="32.038,30.083"]
"huyingxi/Synonyms" ["l"="32.008,30.152"]
"thunlp/THULAC-Python" ["l"="31.943,30.132"]
"saffsd/langid.py" ["l"="29.754,32.561"]
"amazon-research/sccl" ["l"="32.284,30.485"]
"rashadulrakib/short-text-clustering-enhancement" ["l"="32.291,30.583"]
"hadifar/stc_clustering" ["l"="32.293,30.602"]
"amazon-research/sentence-representations" ["l"="32.292,30.55"]
"murray-z/text_clustering" ["l"="32.301,30.452"]
"Yunfan-Li/Contrastive-Clustering" ["l"="34.439,36.187"]
"bojone/SimCSE" ["l"="32.273,30.351"]
"yym6472/ConSERT" ["l"="32.253,30.355"]
"skydark/nstools" ["l"="32.186,30.167"]
"HIT-SCIR/pyltp" ["l"="32.019,30.13"]
"csdz/nstools" ["l"="32.169,30.091"]
"smoothnlp/SmoothNLP" ["l"="32.285,30.21"]
"rainarch/SentiBridge" ["l"="32.201,30.135"]
"baidu/information-extraction" ["l"="32.37,30.132"]
"Wall-ee/chinese2digits" ["l"="32.263,30.173"]
"EssayKillerBrain/EssayKiller_V2" ["l"="31.897,30.372"]
"imcaspar/gpt2-ml" ["l"="32.107,30.363"]
"babysor/MockingBird" ["l"="33.357,33.441"]
"kwai/DouZero" ["l"="23.95,38.434"]
"kangvcar/InfoSpider" ["l"="15.714,5.714"]
"yangjianxin1/GPT2-chitchat" ["l"="32.093,30.387"]
"ssssssss-team/spider-flow" ["l"="6.839,17.606"]
"menzi11/BullshitGenerator" ["l"="6.032,17.259"]
"thunlp/WantWords" ["l"="-27.255,-17.856"]
"Baiyuetribe/paper2gui" ["l"="-27.23,-17.92"]
"Wechat-ggGitHub/Awesome-GitHub-Repo" ["l"="6.559,17.284"]
"itorr/nbnhhsh" ["l"="-27.232,-17.696"]
"bilibili/ailab" ["l"="-29.666,-18.835"]
"dennybritz/cnn-text-classification-tf" ["l"="30.101,32.695"]
"cjymz886/text-cnn" ["l"="32.043,30.011"]
"graykode/nlp-tutorial" ["l"="29.871,32.692"]
"songyouwei/ABSA-PyTorch" ["l"="29.089,31.17"]
"zihangdai/xlnet" ["l"="29.925,32.544"]
"PaddlePaddle/models" ["l"="33.951,35.783"]
"thunlp/ERNIE" ["l"="32.134,30.202"]
"codemayq/chinese_chatbot_corpus" ["l"="32.046,30.321"]
"Tencent/TurboTransformers" ["l"="32.129,30.357"]
"bytedance/lightseq" ["l"="32.085,30.367"]
"NVIDIA/FasterTransformer" ["l"="27.628,31.069"]
"bytedance/effective_transformer" ["l"="32.101,30.415"]
"airaria/TextBrewer" ["l"="32.177,30.287"]
"autoliuweijie/FastBERT" ["l"="32.198,30.293"]
"zhihu/cuBERT" ["l"="32.151,30.346"]
"Tencent/Forward" ["l"="34.654,35.622"]
"microsoft/nnfusion" ["l"="27.733,35.51"]
"ShannonAI/service-streamer" ["l"="32.166,30.316"]
"ELS-RD/transformer-deploy" ["l"="27.679,31.075"]
"OpenNMT/CTranslate2" ["l"="29.876,32.313"]
"lonePatient/albert_pytorch" ["l"="32.186,30.217"]
"google-research/albert" ["l"="32.097,30.293"]
"google-research/electra" ["l"="29.813,32.437"]
"lonePatient/awesome-pretrained-chinese-nlp-models" ["l"="32.188,30.325"]
"songyingxin/Bert-TextClassification" ["l"="32.133,30.076"]
"songyingxin/TextClassification-Pytorch" ["l"="32.069,30.059"]
"yaleimeng/TextClassify_with_BERT" ["l"="32.147,30.017"]
"zhanlaoban/Transformers_for_Text_Classification" ["l"="32.218,30.09"]
"songyingxin/TextClassification" ["l"="32.101,29.962"]
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" ["l"="32.238,30.153"]
"wshuyi/demo-chinese-text-binary-classification-with-bert" ["l"="32.114,30.018"]
"wshuyi/demo_chinese_text_classification_bert_fastai" ["l"="32.087,29.94"]
"wshuyi/demo-fastbert-multi-label-classification" ["l"="32.058,29.909"]
"real-brilliant/bert_chinese_pytorch" ["l"="32.085,29.872"]
"huaban/jieba-analysis" ["l"="31.782,30.206"]
"ysc/word" ["l"="31.793,30.238"]
"NLPchina/nlp-lang" ["l"="31.849,30.209"]
"ysc/cws_evaluation" ["l"="31.913,30.19"]
"NLPchina/Word2VEC_java" ["l"="31.772,30.236"]
"sing1ee/elasticsearch-jieba-plugin" ["l"="9.974,21.857"]
"huaban/elasticsearch-analysis-jieba" ["l"="9.954,21.879"]
"thunlp/THULAC-Java" ["l"="31.743,30.19"]
"lionsoul2014/jcseg" ["l"="31.75,30.221"]
"wks/ik-analyzer" ["l"="31.718,30.211"]
"ysc/QuestionAnsweringSystem" ["l"="31.865,30.231"]
"FudanNLP/fnlp" ["l"="31.951,30.151"]
"fastnlp/fastNLP" ["l"="32.06,30.223"]
"fastnlp/fastHan" ["l"="32.216,30.258"]
"IDEA-CCNL/Fengshenbang-LM" ["l"="32.138,30.376"]
"OFA-Sys/Chinese-CLIP" ["l"="31.821,34.747"]
"thu-coai/CDial-GPT" ["l"="32.154,30.389"]
"clue-ai/PromptCLUE" ["l"="27.422,31.299"]
"alibaba/EasyNLP" ["l"="32.19,30.346"]
"mymusise/ChatGLM-Tuning" ["l"="27.336,31.249"]
"clue-ai/ChatYuan" ["l"="27.344,31.269"]
"alibaba/AliceMind" ["l"="32.166,30.363"]
"fighting41love/Chinese_from_dongxiexidian" ["l"="32.287,30.295"]
"thunlp/THUOCL" ["l"="32.323,30.281"]
"zhangyics/Chinese-abbreviation-dataset" ["l"="32.313,30.145"]
"guotong1988/chinese_dictionary" ["l"="32.254,30.266"]
"foowaa/Chinese_from_dongxiexidian" ["l"="32.308,30.435"]
"Lightning-AI/deep-learning-project-template" ["l"="32.05,30.802"]
"Lightning-AI/lightning-transformers" ["l"="32.034,30.788"]
"v-mipeng/LexiconAugmentedNER" ["l"="32.374,30.144"]
"hltcoe/golden-horse" ["l"="32.308,30.063"]
"FuYanzhe2/Name-Entity-Recognition" ["l"="32.299,30.077"]
"xieyufei1993/Bert-Pytorch-Chinese-TextClassification" ["l"="32.078,29.807"]
"SimonVandenhende/Multi-Task-Learning-PyTorch" ["l"="31.372,30.467"]
"SimonVandenhende/Awesome-Multi-Task-Learning" ["l"="31.37,30.488"]
"lorenmt/mtan" ["l"="31.355,30.473"]
"Manchery/awesome-multi-task-learning" ["l"="31.322,30.488"]
"mbs0221/Multitask-Learning" ["l"="31.436,30.441"]
"hosseinshn/Basic-Multi-task-Learning" ["l"="31.38,30.434"]
"Mikoto10032/AutomaticWeightedLoss" ["l"="31.35,30.463"]
"yaringal/multi-task-learning-example" ["l"="31.393,30.452"]
"brianlan/pytorch-grad-norm" ["l"="31.384,30.475"]
"median-research-group/LibMTL" ["l"="31.329,30.463"]
"facebookresearch/astmt" ["l"="31.309,30.453"]
"isl-org/MultiObjectiveOptimization" ["l"="31.339,30.48"]
"ranandalon/mtl" ["l"="31.366,30.453"]
"Hui-Li/multi-task-learning-example-PyTorch" ["l"="31.362,30.436"]
"intel-isl/MultiObjectiveOptimization" ["l"="31.354,30.489"]
"sunxm2357/AdaShare" ["l"="31.354,30.508"]
"hotoo/pinyin" ["l"="14.421,-8.53"]
"mozillazg/pinyin-data" ["l"="0.564,39.984"]
"wainshine/Chinese-Names-Corpus" ["l"="32.035,30.255"]
"espnet/espnet" ["l"="0.517,39.96"]
"songyingxin/python-algorithm" ["l"="32.091,30.084"]
"yanqiangmiffy/NLP-Interview-Notes" ["l"="32.206,30.153"]
"shenweichen/coding_interviews" ["l"="24.228,31.378"]
"liuhuanyong/EventTriplesExtraction" ["l"="32.391,30.19"]
"NLPIR-team/NLPIR" ["l"="31.883,30.166"]
"rockingdingo/deepnlp" ["l"="32.091,30.044"]
"Lynten/stanford-corenlp" ["l"="29.809,32.755"]
"ownthink/Jiagu" ["l"="32.222,30.21"]
"letiantian/TextRank4ZH" ["l"="32.071,30.181"]
"yanwii/ChinsesNER-pytorch" ["l"="32.36,30.078"]
"wavewangyue/ner" ["l"="32.344,30.182"]
"taishan1994/pytorch_bert_bilstm_crf_ner" ["l"="32.423,30.142"]
"hemingkx/CLUENER2020" ["l"="32.388,30.144"]
"Jacen789/relation-extraction" ["l"="32.471,30.187"]
"qiufengyuyi/sequence_tagging" ["l"="32.376,30.175"]
"StanleyLsx/entity_extractor_by_ner" ["l"="32.406,30.116"]
"liucongg/NLPDataSet" ["l"="32.295,30.323"]
"pluto-junzeng/CNSD" ["l"="32.316,30.385"]
"zejunwang1/CSTS" ["l"="32.303,30.407"]
"Tongjilibo/bert4torch" ["l"="-25.264,23.776"]
"ymcui/MacBERT" ["l"="32.226,30.312"]
"universal-ie/UIE" ["l"="32.427,30.218"]
"CLUEbenchmark/SimCLUE" ["l"="32.316,30.42"]
"gaohongkui/GlobalPointer_pytorch" ["l"="32.422,30.26"]
"JunnYu/RoFormer_pytorch" ["l"="32.337,30.338"]
"nghuyong/ERNIE-Pytorch" ["l"="32.2,30.24"]
"graykode/ALBERT-Pytorch" ["l"="44.536,-15.009"]
"chineseGLUE/chineseGLUE" ["l"="32.134,30.251"]
"quincyliang/nlp-public-dataset" ["l"="32.47,30.065"]
"yaleimeng/NER_corpus_chinese" ["l"="32.456,29.962"]
"foamliu/Machine-Translation" ["l"="32.642,29.933"]
"OYE93/Chinese-NLP-Corpus" ["l"="32.317,30.227"]
"yizhen20133868/NLP-Conferences-Code" ["l"="32.134,30.235"]
"changwookjun/nlp-paper" ["l"="32.147,30.171"]
"ymcui/Chinese-XLNet" ["l"="32.192,30.26"]
"brightmart/xlnet_zh" ["l"="32.141,30.131"]
"zhaogaofeng611/TextMatch" ["l"="32.257,30.158"]
"HorieYuan/TransformerTextSummarization" ["l"="32.272,30.43"]
"LowinLi/Text-Summarizer-Pytorch-Chinese" ["l"="32.254,30.425"]
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" ["l"="28.228,33.579"]
"yamonc/New-Pytorch-Chinese" ["l"="32.268,30.46"]
"425776024/nlpcda" ["l"="32.159,30.294"]
"bytedance/byteps" ["l"="22.578,37.111"]
"NVIDIA/Megatron-LM" ["l"="27.533,31.04"]
"Oneflow-Inc/oneflow" ["l"="34.058,35.604"]
"facebookresearch/fairscale" ["l"="27.651,31.057"]
"thunlp/PromptPapers" ["l"="27.603,31.288"]
"candlewill/Dialog_Corpus" ["l"="30.44,28.109"]
"zhaoyingjun/chatbot" ["l"="30.413,28.148"]
"Doragd/Chinese-Chatbot-PyTorch-Implementation" ["l"="30.396,28.131"]
"husthuke/awesome-knowledge-graph" ["l"="32.309,30.251"]
"zhihao-chen/QASystemOnMedicalGraph" ["l"="32.416,30.295"]
"npubird/KnowledgeGraphCourse" ["l"="32.331,30.244"]
"WenRichard/KBQA-BERT" ["l"="32.355,30.246"]
"wangle1218/KBQA-for-Diagnosis" ["l"="32.414,30.313"]
"ownthink/KnowledgeGraphData" ["l"="32.258,30.251"]
"YeYzheng/KGQA-Based-On-medicine" ["l"="32.427,30.286"]
"code4craft/webmagic" ["l"="9.926,21.608"]
"alibaba/dubbo" ["l"="9.741,21.402"]
"stanfordnlp/CoreNLP" ["l"="29.913,32.775"]
"NLPchina/elasticsearch-sql" ["l"="9.801,21.617"]
"NLPchina/elasticsearch-analysis-ansj" ["l"="9.946,21.801"]
"NTMC-Community/MatchZoo" ["l"="32.113,30.149"]
"faneshion/MatchZoo" ["l"="31.986,30.034"]
"geekinglcq/CDCS" ["l"="32.063,30.164"]
"SeanLee97/xmnlp" ["l"="32.162,30.268"]
"blmoistawinde/HarvestText" ["l"="32.185,30.229"]
"ccheng16/correction" ["l"="31.447,28.753"]
"liuhuanyong/ChineseSemanticKB" ["l"="32.284,30.281"]
"Roshanson/TextInfoExp" ["l"="32.122,30.095"]
"beyondacm/Autochecker4Chinese" ["l"="31.415,28.754"]
"yongzhuo/Macropodus" ["l"="32.25,30.231"]
"taozhijiang/chinese_correct_wsd" ["l"="31.419,28.786"]
"chaoming0625/SentimentPolarityAnalysis" ["l"="15.339,5.42"]
"iqiyi/FASPell" ["l"="32.106,30.314"]
"murray-z/text_analysis_tools" ["l"="32.288,30.262"]
"dongrixinyu/JioNLP" ["l"="32.181,30.27"]
"dongrixinyu/chinese_keyphrase_extractor" ["l"="32.258,30.205"]
"thu-coai/EVA" ["l"="32.172,30.483"]
"thu-coai/KdConv" ["l"="28.156,29.006"]
"microsoft/DialoGPT" ["l"="28.282,28.926"]
"lemon234071/clean-dialog" ["l"="32.153,30.466"]
"PaddlePaddle/Knover" ["l"="32.123,30.437"]
"thu-coai/ConvLab-2" ["l"="28.173,28.92"]
"ZhuiyiTechnology/roformer" ["l"="32.341,30.358"]
"ZhuiyiTechnology/roformer-sim" ["l"="32.299,30.348"]
"renmada/t5-pegasus-pytorch" ["l"="32.273,30.384"]
"ZhuiyiTechnology/roformer-v2" ["l"="32.368,30.429"]
"dropreg/R-Drop" ["l"="32.252,30.327"]
"lonePatient/NeZha_Chinese_PyTorch" ["l"="32.359,30.286"]
"zhoujx4/NLP-Series-sentence-embeddings" ["l"="32.348,30.376"]
"shawroad/CoSENT_Pytorch" ["l"="32.319,30.398"]
"zhengyanzhao1997/NLP-model" ["l"="32.335,30.37"]
"xhw205/GPLinker_torch" ["l"="32.487,30.251"]
"airaria/TextPruner" ["l"="32.192,30.369"]
"lionsoul2014/friso" ["l"="31.666,30.254"]
"chenlb/mmseg4j-solr" ["l"="31.686,30.202"]
"chenlb/mmseg4j-core" ["l"="31.677,30.224"]
"hankcs/hanlp-lucene-plugin" ["l"="31.647,30.228"]
"mayabot/mynlp" ["l"="31.825,30.253"]
"medcl/elasticsearch-analysis-pinyin" ["l"="9.869,21.711"]
"xuanzebi/BERT-CH-NER" ["l"="32.349,30.125"]
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" ["l"="32.367,30.092"]
"GlassyWing/bi-lstm-crf" ["l"="32.308,30.005"]
"GlassyWing/transformer-word-segmenter" ["l"="32.352,29.93"]
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" ["l"="32.293,29.991"]
"EricLingRui/NLP-tools" ["l"="32.348,29.948"]
"stephen-v/zh-NER-keras" ["l"="31.363,31.643"]
"scofield7419/sequence-labeling-BiLSTM-CRF" ["l"="32.244,30.018"]
"CLOVEXCWZ/NER_DEMO" ["l"="32.392,30.085"]
"lpty/nlp_base" ["l"="32.214,30.061"]
"shen1994/chinese_bilstm_cnn_crf" ["l"="32.323,29.959"]
"WhiteGive-Boy/CWS-Hmm_BiLSTM-CRF" ["l"="32.332,29.924"]
"smilelight/lightNLP" ["l"="32.208,30.118"]
"liuhuanyong/ChineseNLPCorpus" ["l"="32.379,30.121"]
"fastnlp/TENER" ["l"="32.402,30.139"]
"liuwei1206/LEBERT" ["l"="32.395,30.176"]
"ljynlp/W2NER" ["l"="32.432,30.229"]
"ProHiryu/albert-chinese-ner" ["l"="32.327,30.107"]
"EOA-AILab/NER-Chinese" ["l"="32.331,30.122"]
"yongzhuo/Macadam" ["l"="32.317,30.133"]
"UKPLab/elmo-bilstm-cnn-crf" ["l"="32.299,29.898"]
"strongio/keras-elmo" ["l"="31.341,31.487"]
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" ["l"="31.312,31.457"]
"searobbersduck/ELMo_Chin" ["l"="32.321,29.787"]
"Rokid/ELMo-chinese" ["l"="32.305,29.786"]
"PrashantRanjan09/Elmo-Tutorial" ["l"="31.328,31.449"]
"HIT-SCIR/ELMoForManyLangs" ["l"="29.987,32.634"]
"kermitt2/delft" ["l"="28.629,30.605"]
"Langboat/Mengzi" ["l"="32.233,30.411"]
"Langboat/mengzi-zero-shot" ["l"="32.238,30.51"]
"fastnlp/CPT" ["l"="32.24,30.392"]
"CLUEbenchmark/CLUECorpus2020" ["l"="32.151,30.322"]
"BDBC-KG-NLP/QA-Survey" ["l"="32.311,30.293"]
"yanyiwu/cppjieba" ["l"="31.848,30.139"]
"yanyiwu/simhash" ["l"="31.8,31.796"]
"thunlp/THULAC" ["l"="31.883,30.131"]
"yanyiwu/gojieba" ["l"="-12.808,1.452"]
"yanyiwu/nodejieba" ["l"="14.251,-8.44"]
"yanyiwu/limonp" ["l"="31.754,30.08"]
"dmlc/ps-lite" ["l"="26.832,33.933"]
"open-source-parsers/jsoncpp" ["l"="-11.897,22.171"]
"sloria/TextBlob" ["l"="29.822,32.79"]
"liuhuanyong/liuhuanyong.github.io" ["l"="32.521,30.373"]
"liuhuanyong/CognitiveInference" ["l"="32.493,30.441"]
"BitVoyage/FastBERT" ["l"="32.25,30.287"]
"autoliuweijie/K-BERT" ["l"="32.206,30.27"]
"JetRunner/BERT-of-Theseus" ["l"="32.212,30.358"]
"DataTerminatorX/Keyword-BERT" ["l"="32.236,30.223"]
"bohanli/BERT-flow" ["l"="32.24,30.344"]
"DarLiner/Algorithm_Interview_Notes-Chinese" ["l"="24.28,31.286"]
"shibing624/similarity" ["l"="31.901,30.233"]
"jsksxs360/AHANLP" ["l"="31.877,30.254"]
"yaleimeng/Final_word_Similarity" ["l"="32.214,30.244"]
"tdebatty/java-string-similarity" ["l"="9.059,21.375"]
"jsksxs360/Word2Vec" ["l"="31.814,30.275"]
"shibing624/text2vec" ["l"="32.109,30.338"]
"lemonhu/stock-knowledge-graph" ["l"="32.388,30.256"]
"lihanghang/NLP-Knowledge-Graph" ["l"="32.388,30.277"]
"memect/kg-beijing" ["l"="32.291,30.192"]
"jm199504/Financial-Knowledge-Graphs" ["l"="32.376,30.293"]
"SimmerChan/KG-demo-for-movie" ["l"="32.388,30.239"]
"Moonshile/ChineseWordSegmentation" ["l"="32.089,30.066"]
"GeorgeBourne/grid" ["l"="31.911,30.044"]
"bojone/word-discovery" ["l"="32.198,30.21"]
"zhanzecheng/Chinese_segment_augment" ["l"="32.151,30.146"]
"jannson/yaha" ["l"="31.885,30.051"]
"yanghanxy/New-Word-Detection" ["l"="31.966,30.057"]
"shangjingbo1226/AutoPhrase" ["l"="32.316,30.024"]
"Rayarrow/New-Word-Discovery" ["l"="32.102,30.127"]
"izisong/new-words-discovery" ["l"="32.077,30.077"]
"chilynn/sequence-labeling" ["l"="32.18,29.981"]
"myhhub/zero_knowledge_graph" ["l"="32.537,30.347"]
"ArtistScript/FastTextRank" ["l"="32.186,30.312"]
"AimeeLee77/keyword_extraction" ["l"="32.131,30.143"]
"FXLP/MarkTool" ["l"="32.336,30.133"]
"deepwel/Chinese-Annotator" ["l"="32.264,30.113"]
"jiesutd/YEDDA" ["l"="32.284,30.066"]
"chosendai/MarkTool" ["l"="32.399,30.069"]
"panchunguang/ccks_baidu_entity_link" ["l"="32.321,30.195"]
"yongzhuo/Pytorch-NLU" ["l"="32.271,30.04"]
"synyi/poplar" ["l"="32.343,30.084"]
"huggingface/pytorch-pretrained-BERT" ["l"="29.956,32.549"]
"dwadden/dygiepp" ["l"="32.553,30.149"]
"luanyi/DyGIE" ["l"="32.554,30.191"]
"nlpcl-lab/ace2005-preprocessing" ["l"="32.606,30.12"]
"luyaojie/Text2Event" ["l"="32.582,30.118"]
"carrie0307/DL_EventExtractionPapers" ["l"="32.558,30.13"]
"xinyadu/eeqa" ["l"="32.61,30.112"]
"dolphin-zs/Doc2EDAG" ["l"="32.592,30.125"]
"raspberryice/gen-arg" ["l"="32.616,30.098"]
"nlpcl-lab/bert-event-extraction" ["l"="32.585,30.14"]
"BaptisteBlouin/EventExtractionPapers" ["l"="32.576,30.132"]
"juntaoy/biaffine-ner" ["l"="32.458,30.155"]
"markus-eberts/spert" ["l"="30.736,31.013"]
"lx865712528/EMNLP2018-JMEE" ["l"="32.617,30.128"]
"thunlp/HMEAE" ["l"="32.633,30.118"]
"jeffery0628/text_classification" ["l"="32.257,30.098"]
"zzy99/epidemic-sentence-pair" ["l"="32.317,30.214"]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" ["l"="32.3,30.16"]
"xiaoqian19940510/text-classification-surveys" ["l"="21.802,27.348"]
"StanleyLsx/text_classifier" ["l"="32.391,30.056"]
"hellonlp/classifier_multi_label_textcnn" ["l"="32.143,29.975"]
"HoyTta0/KnowledgeDistillation" ["l"="32.3,30.139"]
"Vincent131499/TextClassifier_Transformer" ["l"="32.158,29.951"]
"qiangsiwei/bert_distill" ["l"="32.244,30.209"]
"luopeixiang/textclf" ["l"="32.305,29.926"]
"jiangxinyang227/NLP-Project" ["l"="32.202,30.087"]
"jiangxinyang227/bert-for-task" ["l"="32.197,30.022"]
"neulab/SpanNER" ["l"="30.867,30.439"]
"bekou/multihead_joint_entity_relation_extraction" ["l"="30.729,30.973"]
"lavis-nlp/jerex" ["l"="32.644,30.218"]
"Onion12138/CasRelPyTorch" ["l"="32.529,30.225"]
"liuhuanyong/ComplexEventExtraction" ["l"="32.42,30.19"]
"liuhuanyong/TextGrapher" ["l"="32.36,30.231"]
"lemonhu/open-entity-relation-extraction" ["l"="32.432,30.168"]
"twjiang/fact_triple_extraction" ["l"="32.482,30.225"]
"liuhuanyong/CausalityEventExtraction" ["l"="32.538,30.177"]
"xiaoqian19940510/Event-Extraction" ["l"="32.527,30.15"]
"WuHuRestaurant/xf_event_extraction2020Top1" ["l"="32.475,30.173"]
"shijiebei2009/CEC-Corpus" ["l"="32.467,30.128"]
"bojone/kg-2019" ["l"="32.362,30.172"]
"liuhuanyong/PersonRelationKnowledgeGraph" ["l"="32.399,30.218"]
"zhang17173/Event-Extraction" ["l"="32.509,30.139"]
"lixiang0/WEB_KG" ["l"="32.431,30.244"]
"lx865712528/ACL2019-ODEE" ["l"="32.637,30.133"]
"Hanlard/Transformer-based-pretrained-model-for-event-extraction" ["l"="32.6,30.135"]
"qiufengyuyi/event_extraction" ["l"="32.562,30.157"]
"liushulinle/event_detection_without_triggers" ["l"="32.664,30.132"]
"sanmusunrise/NPNs" ["l"="32.676,30.112"]
"jeffery0628/baidu_ee" ["l"="32.663,30.095"]
"xinyadu/doc_event_role" ["l"="32.642,30.121"]
"anoperson/jointEE-NN" ["l"="32.709,30.093"]
"thunlp/Adv-ED" ["l"="32.658,30.11"]
"yubochen/NBTNGMA4ED" ["l"="32.7,30.105"]
"AvivNavon/nash-mtl" ["l"="31.281,30.489"]
"lorenmt/auto-lambda" ["l"="31.305,30.478"]
"WeiChengTseng/Pytorch-PCGrad" ["l"="31.283,30.477"]
"Cranial-XIX/CAGrad" ["l"="31.298,30.49"]
"yfzhang114/Generalization-Causality" ["l"="30.172,34.972"]
"thuml/Transfer-Learning-Library" ["l"="30.099,34.994"]
"open-mmlab/mmselfsup" ["l"="34.637,35.858"]
"chakki-works/doccano" ["l"="29.837,32.621"]
"inception-project/inception" ["l"="32.398,29.866"]
"machinalis/iepy" ["l"="27.236,34.057"]
"webanno/webanno" ["l"="32.406,29.832"]
"heiheiyoyo/uie_pytorch" ["l"="32.444,30.296"]
"hellonlp/classifier_multi_label" ["l"="32.169,29.934"]
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" ["l"="32.173,29.915"]
"helloyide/Cross-stitch-Networks-for-Multi-task-Learning" ["l"="31.333,30.425"]
"tianheyu927/PCGrad" ["l"="31.31,30.502"]
"hosseinshn/GradNorm" ["l"="31.401,30.479"]
"hav4ik/Hydra" ["l"="31.342,30.447"]
"alibaba-research/ChineseBLUE" ["l"="32.408,30.354"]
"lrs1353281004/Chinese_medical_NLP" ["l"="32.38,30.331"]
"heartexlabs/label-studio" ["l"="34.418,35.533"]
"UKPLab/sentence-transformers" ["l"="29.808,32.535"]
"flairNLP/flair" ["l"="29.703,32.533"]
"MaartenGr/BERTopic" ["l"="29.595,32.542"]
"GanymedeNil/document.ai" ["l"="26.827,31.217"]
"shibing624/similarities" ["l"="32.051,30.423"]
"imClumsyPanda/langchain-ChatGLM" ["l"="27.205,31.221"]
"shibing624/textgen" ["l"="27.41,31.349"]
"yuanzhoulvpi2017/zero_nlp" ["l"="27.348,31.297"]
"bojone/CoSENT" ["l"="32.307,30.375"]
"wrayzheng/gmm-em-clustering" ["l"="32.285,29.704"]
"stober/gmm" ["l"="32.291,29.666"]
"OFA-Sys/OFA" ["l"="31.744,34.759"]
"Fengfeng1024/SOHU-baseline" ["l"="31.723,30.358"]
"lmhgithi/SOHU-baseline" ["l"="31.706,30.363"]
"sohucampus2019/coreEntityEmotion_baseline" ["l"="31.747,30.333"]
"ouwenjie03/sohucampus2019" ["l"="31.721,30.373"]
"Alic-yuan/nlp-beginner-finish" ["l"="33.091,37.468"]
"nndl/nndl.github.io" ["l"="24.053,31.037"]
"yandexdataschool/nlp_course" ["l"="29.871,32.784"]
"DSKSD/DeepNLP-models-Pytorch" ["l"="29.994,32.656"]
"duoergun0729/nlp" ["l"="32.074,30.147"]
"NLP-LOVE/Introduction-NLP" ["l"="32.081,30.201"]
"nlpinaction/learning-nlp" ["l"="32.157,30.081"]
"wzc570738205/smartParsePro" ["l"="31.757,30.69"]
"akebe/address-parse" ["l"="31.719,30.713"]
"ldwonday/zh-address-parse" ["l"="31.746,30.731"]
"wzc570738205/smart_parse" ["l"="31.739,30.71"]
"pupuk/address-smart-parse" ["l"="31.722,30.728"]
"pupuk/address" ["l"="31.729,30.745"]
"liuzhibin-cn/address-semantic-search" ["l"="31.669,30.776"]
"yixi195/smart-address-parse" ["l"="31.776,30.709"]
"yihenglu/chinese-address-segment" ["l"="31.686,30.801"]
"DQinYuan/chinese_province_city_area_mapper" ["l"="32.056,30.299"]
"NTMC-Community/MatchZoo-py" ["l"="32.181,30.106"]
"NTMC-Community/awesome-neural-models-for-semantic-match" ["l"="32.184,30.091"]
"terrifyzhao/text_matching" ["l"="32.218,30.146"]
"ziweipolaris/atec2018-nlp" ["l"="32.206,29.909"]
"raven4752/huabei" ["l"="32.188,29.893"]
"Huijun-Cui/ATEC-NLP" ["l"="32.193,29.899"]
"zle1992/atec" ["l"="32.205,29.89"]
"Lapis-Hong/atec-nlp" ["l"="32.202,29.864"]
"ami66/nlp-competitions-list-review" ["l"="32.205,29.839"]
"LittletreeZou/Question-Pairs-Matching" ["l"="32.192,29.88"]
"Leputa/CIKM-AnalytiCup-2018" ["l"="32.194,29.793"]
"zixuanweeei/atec-sim" ["l"="32.216,29.859"]
"brightmart/nlu_sim" ["l"="32.204,29.956"]
"fastnlp/fitlog" ["l"="32.083,30.336"]
"NVIDIA/runx" ["l"="31.709,37.086"]
"wandb/client" ["l"="25.824,37.551"]
"yuchenlin/rebiber" ["l"="27.594,30.098"]
"bighuang624/AI-research-tools" ["l"="27.461,30.034"]
"jinfagang/alfred" ["l"="34.7,35.533"]
"subeeshvasu/Awesome-Learning-with-Label-Noise" ["l"="33.927,36.74"]
"dair-ai/ml-visuals" ["l"="34.293,35.778"]
"SmallVagetable/machine_learning_python" ["l"="32.256,29.945"]
"KangCai/Machine-Learning-Algorithm" ["l"="32.263,29.775"]
"Erikfather/Decision_tree-python" ["l"="22.575,31.382"]
"ice-tong/ML_demo" ["l"="32.284,29.84"]
"zhengyima/mnist-classification" ["l"="-11.396,-46.524"]
"aimi-cn/AILearners" ["l"="24.465,31.358"]
"Anfany/Machine-Learning-for-Beginner-by-Python3" ["l"="32.241,29.868"]
"bojone/attention" ["l"="31.386,31.557"]
"HandsomeCao/Bert-BiLSTM-CRF-pytorch" ["l"="32.414,30.077"]
"PeijiYang/BERT-BiLSTM-CRF-NER-pytorch" ["l"="32.394,30.105"]
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" ["l"="32.406,30.1"]
"shawroad/Semantic-Textual-Similarity-Pytorch" ["l"="32.339,30.404"]
"shawroad/NLP_pytorch_project" ["l"="32.364,30.255"]
"xiangking/ark-nlp" ["l"="22.104,27.732"]
"ZhuiyiTechnology/WoBERT" ["l"="32.276,30.333"]
"bojone/BERT-whitening" ["l"="32.287,30.357"]
"bojone/GlobalPointer" ["l"="32.455,30.286"]
"ZhuiyiTechnology/GAU-alpha" ["l"="32.374,30.455"]
"gaohongkui/TPLinker-NER" ["l"="32.483,30.26"]
"xhw205/GlobalPointer_torch" ["l"="32.471,30.258"]
"bojone/GPLinker" ["l"="32.477,30.303"]
"xhw205/Efficient-GlobalPointer-torch" ["l"="32.486,30.27"]
"leerumor/ai-study" ["l"="32.312,30.184"]
"DengBoCong/nlp-paper" ["l"="32.222,30.231"]
"soulbliss/NLP-conference-compendium" ["l"="32.109,30.112"]
"PengboLiu/NLP-Papers" ["l"="32.181,30.055"]
"IndexFziQ/GNN4NLP-Papers" ["l"="21.795,38.565"]
"danqi/acl2020-openqa-tutorial" ["l"="25.772,29.244"]
"ECNUdase/pdf" ["l"="32.561,30.071"]
"ECNUdase/Seminar-Materials" ["l"="32.605,30.029"]
"ECNUdase/Seminar-Deep-Learning" ["l"="32.618,30.018"]
"CrisJk/Agriculture-KnowledgeGraph-Data" ["l"="32.493,30.214"]
"leerumor/contrastive_learning_codes" ["l"="-24.801,23.093"]
"PaddlePaddle/Research" ["l"="32.131,30.322"]
"budzianowski/multiwoz" ["l"="28.177,28.935"]
"TsinghuaAI/CPM-Generate" ["l"="32.134,30.4"]
"alexa/alexa-with-dstc9-track1-dataset" ["l"="28.14,28.881"]
"SivilTaram/Persona-Dialogue-Generation" ["l"="28.24,29.093"]
"bckim92/sequential-knowledge-transformer" ["l"="28.191,29.103"]
"ChuanMeng/Knowldege-Grounded-Conversation" ["l"="28.179,29.116"]
"PaddlePaddle/RocketQA" ["l"="25.84,29.206"]
"Brokenwind/BertSimilarity" ["l"="32.289,30.151"]
"danan0755/Bert_Classifier" ["l"="32.297,30.236"]
"taishan1994/pytorch_triple_extraction" ["l"="32.493,30.202"]
"haiker2011/awesome-nlp-sentiment-analysis" ["l"="29.052,31.121"]
"linguishi/chinese_sentiment" ["l"="15.346,5.401"]
"MachineLP/TextMatch" ["l"="32.283,30.229"]
"920232796/bert_seq2seq" ["l"="32.24,30.299"]
"openai/gpt-2" ["l"="30.15,32.456"]
"google-research/mixmatch" ["l"="33.832,36.748"]
"SanghunYun/UDA_pytorch" ["l"="33.775,36.827"]
"CuriousAI/mean-teacher" ["l"="33.866,36.755"]
"YU1ut/MixMatch-pytorch" ["l"="33.846,36.761"]
"google-research/fixmatch" ["l"="33.862,36.729"]
"facebookresearch/XLM" ["l"="29.881,32.471"]
"cgnorthcutt/cleanlab" ["l"="33.981,36.726"]
"AI-Sphere/Awesome-Noah" ["l"="31.858,30.011"]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["l"="31.931,29.895"]
"chenkkkk/User-loan-risk-prediction" ["l"="10.81,21.116"]
"wangle1218/deep_text_matching" ["l"="32.253,30.183"]
"wuba/qa_match" ["l"="32.265,30.276"]
"lizhe2004/chatbot-list" ["l"="32.258,30.342"]
"JepsonWong/Text_Matching" ["l"="32.285,30.137"]
"observerss/ngender" ["l"="32.277,30.242"]
"wainshine/Company-Names-Corpus" ["l"="32.237,30.194"]
"observerss/textfilter" ["l"="52.054,-5.161"]
"kfcd/chaizi" ["l"="31.526,28.815"]
"ls0f/phone" ["l"="-27.426,-42.893"]
"peiss/chinese-name-score" ["l"="-26.025,-42.517"]
"liuhuanyong/MusicLyricChatbot" ["l"="32.439,30.138"]
"rockyzhengwu/FoolNLTK" ["l"="32,30.121"]
"facebookresearch/MUSE" ["l"="29.936,32.499"]
"YunwenTechnology/Unilm" ["l"="32.241,30.37"]
"liucongg/UnilmChatchitRobot" ["l"="32.246,30.462"]
"CLUEbenchmark/CLGE" ["l"="32.214,30.37"]
"qingkongzhiqian/GPT2-Summary" ["l"="32.216,30.41"]
"liucongg/GPT2-NewsTitle" ["l"="32.2,30.385"]
"YunwenTechnology/QueryGeneration" ["l"="32.252,30.48"]
"zhongerqiandan/pretrained-unilm-Chinese" ["l"="32.256,30.503"]
"bojone/SPACES" ["l"="32.264,30.369"]
"ZhuiyiTechnology/t5-pegasus" ["l"="32.253,30.384"]
"xv44586/ccf_2020_qa_match" ["l"="32.341,30.287"]
"ChileWang0228/Deep-Learning-With-Python" ["l"="32.335,30.167"]
"huanghuidmml/epidemicTextMatch" ["l"="32.37,30.27"]
"psnonis/FinBERT" ["l"="32.711,30.253"]
"Sudy/coling2018" ["l"="32.755,30.255"]
"yya518/FinBERT" ["l"="32.696,30.265"]
"didi/delta" ["l"="31.983,30.155"]
"mravanelli/pytorch-kaldi" ["l"="0.561,39.869"]
"didi/athena" ["l"="31.836,30.071"]
"athena-team/athena" ["l"="21.881,27.411"]
"freewym/espresso" ["l"="0.541,39.841"]
"mobvoi/wenet" ["l"="0.541,39.826"]
"tensorflow/lingvo" ["l"="29.947,32.455"]
"crownpku/Rasa_NLU_Chi" ["l"="30.332,28.109"]
"athena-team/athena-signal" ["l"="2.406,39.235"]
"kimiyoung/transformer-xl" ["l"="29.94,32.481"]
"ymcui/PERT" ["l"="26.193,30.226"]
"ymcui/cmrc2018" ["l"="26.069,30.169"]
"destwang/CTCResources" ["l"="31.538,28.706"]
"pengming617/text_matching" ["l"="32.238,30.101"]
"pengming617/bert_textMatching" ["l"="32.225,30.048"]
"pengshuang/Text-Similarity" ["l"="32.221,30.105"]
"alibaba/esim-response-selection" ["l"="32.194,30.113"]
"alibaba-edu/simple-effective-text-matching" ["l"="32.232,30.132"]
"InsaneLife/dssm" ["l"="22.765,37.168"]
"yanqiangmiffy/sentence-similarity" ["l"="32.244,30.065"]
"WenRichard/QAmodel-for-Retrievalchatbot" ["l"="30.409,28.177"]
"ChenglongChen/tensorflow-DSMM" ["l"="26.371,29.725"]
"coetaur0/ESIM" ["l"="32.21,30.074"]
"liuhuanyong/SiameseSentenceSimilarity" ["l"="32.277,30.098"]
"alibaba-edu/simple-effective-text-matching-pytorch" ["l"="32.229,30.092"]
"yangjianxin1/CPM" ["l"="32.139,30.452"]
"fxy96/Robust-Log-Optimal-Strategy-with-Reinforcement-Learning" ["l"="32.945,30.353"]
"fxy96/SYSU-ZhaoXu-Machine-Learning-Seminar" ["l"="32.972,30.358"]
"luhuiguo/chinese-utils" ["l"="31.786,30.27"]
"Skyellbin/neo4j-python-pandas-py2neo-v3" ["l"="32.463,30.272"]
"Pelhans/Z_knowledge_graph" ["l"="32.415,30.233"]
"chizhu/KGQA_HLM" ["l"="32.423,30.271"]
"s-top/Baike-KnowledgeGraph" ["l"="32.502,30.262"]
"Shuang0420/knowledge_graph_demo" ["l"="32.428,30.205"]
"kangzhun/KnowledgeGraph-QA-Service" ["l"="32.477,30.281"]
"baiyang2464/chatbot-base-on-Knowledge-Graph" ["l"="32.432,30.328"]
"vivianLL/QASystemOnHepatopathyKG" ["l"="32.499,30.32"]
"charlesXu86/Chatbot_CN" ["l"="32.328,30.299"]
"zhihao-chen/QASystemOnMedicalKG" ["l"="32.469,30.337"]
"yixiu00001/LSTM-CRF-medical" ["l"="32.462,30.365"]
"Toyhom/Chinese-medical-dialogue-data" ["l"="32.426,30.365"]
"liuhuanyong/CrimeKgAssitant" ["l"="32.41,30.209"]
"SnakeHacker/QA-Snake" ["l"="30.52,28.105"]
"S-H-Y-GitHub/QA" ["l"="30.536,28.096"]
"brmson/yodaqa" ["l"="30.216,31.584"]
"Samurais/insuranceqa-corpus-zh" ["l"="30.5,28.103"]
"white127/insuranceQA-cnn-lstm" ["l"="30.574,28.087"]
"warmheartli/ChatBotCourse" ["l"="30.437,28.173"]
"Conchylicultor/DeepQA" ["l"="30.465,28.154"]
"cnschema/cnschema" ["l"="32.371,30.213"]
"ysc/APDPlat" ["l"="8.771,20.174"]
"deepcs233/jieba_fast" ["l"="32.139,30.218"]
"ProsusAI/finBERT" ["l"="32.638,30.261"]
"valuesimplex/FinBERT" ["l"="32.446,30.238"]
"icoxfog417/awesome-financial-nlp" ["l"="32.602,30.231"]
"firmai/financial-machine-learning" ["l"="21.754,32.607"]
"jankrepl/deepdow" ["l"="21.884,32.622"]
"hudson-and-thames/mlfinlab" ["l"="21.79,32.649"]
"smoothnlp/FinancialDatasets" ["l"="32.503,30.247"]
"abhijeet3922/finbert_embedding" ["l"="32.704,30.28"]
"firmai/machine-learning-asset-management" ["l"="21.796,32.611"]
"WayneDW/Sentiment-Analysis-in-Event-Driven-Stock-Price-Movement-Prediction" ["l"="21.78,32.512"]
"yumoxu/stocknet-dataset" ["l"="21.562,32.524"]
"vedic-partap/Event-Driven-Stock-Prediction-using-Deep-Learning" ["l"="21.588,32.533"]
"YangLinyi/FinNLP-Progress" ["l"="21.798,27.395"]
"dcajasn/Riskfolio-Lib" ["l"="21.841,32.665"]
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" ["l"="32.519,30.16"]
"yuriak/DLQuant" ["l"="21.693,32.355"]
"M0025/KnowledgeGraphOfA-shareCompanys" ["l"="32.629,30.31"]
"sudhamstarun/Understanding-Financial-Reports-using-Natural-Language-Processing" ["l"="32.683,30.238"]
"PKUJohnson/OpenData" ["l"="19.793,33.14"]
"duterscmy/ccks2019-ckbqa-4th-codes" ["l"="30.151,31.478"]
"malllabiisc/EmbedKGQA" ["l"="30.098,31.502"]
"wavewangyue/kbqa" ["l"="30.19,31.499"]
"BshoterJ/awesome-kgqa" ["l"="30.133,31.496"]
"CourteousWood/text-summarization" ["l"="32.206,30.445"]
"1148270327/TextSummary" ["l"="32.212,30.474"]
"ztz818/Automatic-generation-of-text-summaries" ["l"="32.225,30.437"]
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization" ["l"="28.216,33.568"]
"jayparks/transformer" ["l"="30.153,32.421"]
"wangshusen/DeepLearning" ["l"="25.215,36.19"]
"datawhalechina/learn-nlp-with-transformers" ["l"="24.43,31.185"]
"MorvanZhou/NLP-Tutorials" ["l"="32.162,30.165"]
"wonderfulsuccess/chinese_abstractive_corpus" ["l"="32.295,30.418"]
"bifeng/nlp_paper_notes" ["l"="32.319,30.518"]
"God-Fish-X/Extractable-automatic-Text" ["l"="32.234,30.474"]
"yongzhuo/nlg-yongzhuo" ["l"="32.258,30.398"]
"sys1874/chinese-textsum" ["l"="28.288,33.542"]
"lancopku/superAE" ["l"="28.188,33.613"]
"pingyuan2016/word2vec_textrank" ["l"="32.213,30.503"]
"Valuebai/Text-Auto-Summarization" ["l"="32.226,30.492"]
"zpppy/seq2seq-chinese-textsum" ["l"="28.3,33.524"]
"liu-nlper/NER-LSTM-CRF" ["l"="32.237,29.979"]
"liuhuanyong/SentenceSimilarity" ["l"="32.292,30.117"]
"liuhuanyong/ChineseEmbedding" ["l"="32.28,30.166"]
"cjymz886/sentence-similarity" ["l"="32.277,30.123"]
"IAdmireu/ChineseSTS" ["l"="32.226,30.116"]
"liuhuanyong/TopicCluster" ["l"="32.387,29.924"]
"liuhuanyong/WordMultiSenseDisambiguation" ["l"="32.36,30.035"]
"ShuaichiLi/Chinese-sentence-similarity-task" ["l"="32.277,30.179"]
"ATEC2018/deep-siamese-text-similarity" ["l"="32.288,30.05"]
"BiLiangLtd/WordSimilarity" ["l"="32.216,30.296"]
"ashengtx/CilinSimilarity" ["l"="32.218,30.32"]
"tigerchen52/synonym_detection" ["l"="32.23,30.36"]
"Keson96/SynoCN" ["l"="32.232,30.324"]
"thunlp/OpenHowNet" ["l"="32.309,30.312"]
"chatopera/Synonyms" ["l"="32.121,30.295"]
"sunyilgdx/SIFRank_zh" ["l"="32.275,30.263"]
"Ailln/cn2an" ["l"="32.299,30.219"]
"quincyliang/nlp-data-augmentation" ["l"="32.018,30.33"]
"lcdevelop/ChatBotCourse" ["l"="30.368,28.138"]
"kpu/kenlm" ["l"="0.625,39.852"]
"pwxcoo/chinese-xinhua" ["l"="6.031,17.418"]
"nonamestreet/weixin_public_corpus" ["l"="32.357,30.159"]
"zhiguowang/BiMPM" ["l"="25.787,30.213"]
"NTSC-Community/awaresome-neural-models-for-semantic-match" ["l"="31.909,29.975"]
"geek-ai/irgan" ["l"="22.851,37.13"]
"pl8787/MatchPyramid-TensorFlow" ["l"="26.384,29.749"]
"airalcorn2/Deep-Semantic-Similarity-Model" ["l"="22.777,37.258"]
"HKUST-KnowComp/R-Net" ["l"="25.909,30.196"]
"MorvanZhou/Tensorflow2-Tutorial" ["l"="32.094,29.993"]
"MorvanZhou/mnistGANs" ["l"="15.494,6.33"]
"MorvanZhou/PyTorch-Tutorial" ["l"="23.923,31.03"]
"JianWenJun/MLDemo" ["l"="32.197,29.975"]
"Dikea/Dialog-System-with-Task-Retrieval-and-Seq2seq" ["l"="28.07,29.076"]
"SeanLee97/QANet_dureader" ["l"="26.009,30.185"]
"WenDesi/sentenceSimilarity" ["l"="32.28,29.935"]
"pumpkinduo/KnowledgeGraph_NER" ["l"="32.502,30.361"]
"zhangsheng93/cMedQA2" ["l"="32.424,30.387"]
"shibing624/pytextclassifier" ["l"="32.367,30.37"]
"hiDaDeng/cnsenti" ["l"="15.277,5.301"]
"jasoncao11/nlp-notebook" ["l"="32.356,30.313"]
"ZhixiuYe/HSCRF-pytorch" ["l"="32.364,29.983"]
"ZhixiuYe/NER-pytorch" ["l"="32.332,29.998"]
"XuezheMax/NeuroNLP2" ["l"="27.495,32.833"]
"shangjingbo1226/AutoNER" ["l"="32.383,29.99"]
"threelittlemonkeys/lstm-crf-pytorch" ["l"="32.398,29.973"]
"liu-nlper/SLTK" ["l"="32.325,30.011"]
"LopezGG/NN_NER_tensorFlow" ["l"="32.248,29.923"]
"CLUEbenchmark/DataCLUE" ["l"="32.412,30.528"]
"bojone/CLUE-bert4keras" ["l"="32.387,30.48"]
"autoliuweijie/BERT-whitening-pytorch" ["l"="32.312,30.357"]
"Jun-jie-Huang/WhiteningBERT" ["l"="32.328,30.445"]
"KwangKa/SIMCSE_unsup" ["l"="32.352,30.387"]
"nilboy/gaic_track3_pair_sim" ["l"="32.398,30.314"]
"vdogmcgee/SimCSE-Chinese-Pytorch" ["l"="32.332,30.391"]
"zhusleep/pytorch_chinese_lm_pretrain" ["l"="32.285,30.309"]
"facebookresearch/DPR" ["l"="25.787,29.223"]
"princeton-nlp/LM-BFF" ["l"="27.679,31.305"]
"CLUEbenchmark/FewCLUE" ["l"="32.359,30.355"]
"JustFollowUs/Natural-Language-Processing" ["l"="31.96,30.098"]
"JustFollowUs/Machine-Learning" ["l"="23.922,31.267"]
"JustFollowUs/Deep-Learning" ["l"="31.801,30.006"]
"JustFollowUs/Reinforcement-Learning" ["l"="31.8,30.022"]
"Kyubyong/nlp_tasks" ["l"="29.995,32.685"]
"dapurv5/awesome-question-answering" ["l"="30.214,31.551"]
"kamalkraj/BERT-NER" ["l"="32.336,30.047"]
"lemonhu/NER-BERT-pytorch" ["l"="32.376,30.066"]
"juand-r/entity-recognition-datasets" ["l"="32.347,29.974"]
"sberbank-ai/ner-bert" ["l"="32.356,30.017"]
"Kyubyong/bert_ner" ["l"="32.395,30.008"]
"chakki-works/seqeval" ["l"="32.378,30.024"]
"hanbt/learn_dl" ["l"="32.154,29.993"]
"hanbt/awesome-deep-learning" ["l"="32.131,29.899"]
"jiqizhixin/ML-Tutorial-Experiment" ["l"="23.733,31.22"]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["l"="31.592,31.542"]
"mli/gluon-tutorials-zh" ["l"="34.209,35.232"]
"ljpzzz/machinelearning" ["l"="24.173,31.014"]
"nicodjimenez/lstm" ["l"="22.068,35.888"]
"princewen/tensorflow_practice" ["l"="22.756,37.093"]
"yongyehuang/Tensorflow-Tutorial" ["l"="32.122,29.993"]
"foamliu/Sentiment-Analysis" ["l"="32.032,29.917"]
"yilifzf/BDCI_Car_2018" ["l"="32.097,29.977"]
"Magic-Bubble/Zhihu" ["l"="31.984,29.915"]
"wxue004cs/GCAE" ["l"="29.111,31.187"]
"Smilexuhc/Data-Competition-TopSolution" ["l"="24.066,31.293"]
"EliotAndres/kaggle-past-solutions" ["l"="22.726,37.452"]
"iphysresearch/DataSciComp" ["l"="23.983,31.321"]
"datawhalechina/competition-baseline" ["l"="24.256,31.189"]
"guoday/Tencent2019_Preliminary_Rank1st" ["l"="21.489,37.196"]
"jianzhu/dl-notes" ["l"="32.051,30.129"]
"panyang/AINLP-Resource" ["l"="31.892,29.997"]
"yhangf/ML-NOTE" ["l"="24.16,31.366"]
"zhanggyb/nndl" ["l"="23.685,31.298"]
"imsheridan/DeepRec" ["l"="22.75,37.112"]
"apachecn/feature-engineering-for-ml-zh" ["l"="24.006,31.289"]
"yangxudong/deeplearning" ["l"="22.714,37.164"]
"sladesha/deep_learning" ["l"="22.725,37.173"]
"DSXiangLi/ChineseNER" ["l"="32.404,30.181"]
"zhengyima/kg-baseline-pytorch" ["l"="32.444,30.179"]
"liuhuanyong/ChainKnowledgeGraph" ["l"="32.359,30.51"]
"liuhuanyong/DomainWordsDict" ["l"="32.345,30.428"]
"alibaba/EasyCV" ["l"="34.591,35.745"]
"alibaba/EasyTransfer" ["l"="32.205,30.335"]
"JayYip/bert-multitask-learning" ["l"="31.956,30.279"]
"jiayuzhou/MALSAR" ["l"="31.377,30.387"]
"drawbridge/keras-mmoe" ["l"="22.694,37.163"]
"mitmedialab/PersonalizedMultitaskLearning" ["l"="31.437,30.413"]
"RandolphVI/Multi-Label-Text-Classification" ["l"="32.06,29.988"]
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" ["l"="30.282,30.515"]
"chenzhi1992/Multi-Label-Text-Classification" ["l"="31.988,29.948"]
"inspirehep/magpie" ["l"="31.999,29.979"]
"lancopku/SGM" ["l"="8.957,17.203"]
"yongyehuang/zhihu-text-classification" ["l"="32.035,29.94"]
"yourh/AttentionXML" ["l"="30.283,30.578"]
"Vincent131499/Multi_Label_Classifier_finetune" ["l"="32.119,29.942"]
"lancopku/SU4MLC" ["l"="9.028,17.209"]
"brightmart/multi-label_classification" ["l"="29.56,29.274"]
"HX-idiot/Hybrid_Attention_XML" ["l"="32.014,29.905"]
"dongxiexidian/Chinese" ["l"="32.043,30.047"]
"to-shimo/chinese-word2vec" ["l"="32.129,29.918"]
"crownpku/Small-Chinese-Corpus" ["l"="32.23,30.034"]
"liuhuanyong/ChineseDiachronicCorpus" ["l"="32.383,30.407"]
"liuhuanyong/PersonGraphDataSet" ["l"="32.403,30.489"]
"SimmerChan/corpus" ["l"="32.268,30.29"]
"NiuTrans/Classical-Modern" ["l"="29.216,28.716"]
"caspiankexin/people-daily-crawler-date" ["l"="32.423,30.475"]
"liuhuanyong/MiningZhiDaoQACorpus" ["l"="32.323,30.268"]
"qiu997018209/KnowledgeGraph" ["l"="32.545,30.307"]
"ownthink/KG-View" ["l"="32.491,30.29"]
"AdiaLoveTrance/MedicalInsuranceKG" ["l"="32.566,30.342"]
"Lightning-AI/metrics" ["l"="32.054,30.752"]
"Lightning-AI/lightning-bolts" ["l"="32.081,30.654"]
"Lightning-AI/lightning-flash" ["l"="32.066,30.705"]
"Lightning-AI/lightning" ["l"="34.208,35.927"]
"hardianlawi/MTL-Homoscedastic-Uncertainty" ["l"="31.396,30.427"]
"pmorerio/dl-uncertainty" ["l"="24.007,34.662"]
"oxcsaml2019/multitask-learning" ["l"="31.35,30.423"]
"Separius/BERT-keras" ["l"="31.359,31.536"]
"beader/tianchi_nl2sql" ["l"="-10.804,-4.614"]
"CyberZHG/summary" ["l"="32.202,30"]
"ZhuiyiTechnology/nl2sql_baseline" ["l"="-10.82,-4.611"]
"heshenghuan/LSTM-CRF" ["l"="32.253,29.893"]
"lancopku/Chinese-Literature-NER-RE-Dataset" ["l"="30.689,30.918"]
"liu-nlper/DocumentClassification" ["l"="31.564,31.68"]
"thunlp/TensorFlow-NRE" ["l"="30.796,30.928"]
"luge-ai/luge-ai" ["l"="32.221,30.342"]
"AtmaHou/MetaDialog" ["l"="30.792,31.12"]
"benkang-chen/Event-Extraction" ["l"="32.608,30.145"]
"liuhuanyong/LawCrimeMining" ["l"="32.456,30.106"]
"GuidoPaul/CAIL2019" ["l"="29.589,29.313"]
"hecongqing/CCKS2019_EventEntityExtraction_Rank5" ["l"="32.624,30.142"]
"IanHongruZhang/Openlaw_tools" ["l"="32.558,30.09"]
"131250208/TPlinker-joint-extraction" ["l"="32.465,30.223"]
"longlongman/CasRel-pytorch-reimplement" ["l"="32.505,30.223"]
"powerycy/TPlinker-ycy" ["l"="32.518,30.251"]
"yubowen-ph/JointER" ["l"="30.712,30.992"]
"zjunlp/deepke" ["l"="32.375,30.16"]
"buppt/ChineseNRE" ["l"="32.406,30.157"]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" ["l"="32.431,30.153"]
"thunlp/FewRel" ["l"="30.731,30.986"]
"mit-gfx/ContinuousParetoMTL" ["l"="31.326,30.527"]
"Xi-L/ParetoMTL" ["l"="31.309,30.533"]
"dbmptr/EPOSearch" ["l"="31.309,30.555"]
"guillaumegenthial/tf_metrics" ["l"="32.284,29.916"]
"zalandoresearch/flair" ["l"="29.856,32.595"]
"openai/finetune-transformer-lm" ["l"="29.916,32.492"]
"fighting41love/hardNLU" ["l"="32.291,30.374"]
"CPF-NLPR/AT4ChineseNER" ["l"="32.407,30.024"]
"iesl/dilated-cnn-ner" ["l"="32.324,29.938"]
"jiesutd/RichWordSegmentor" ["l"="32.065,29.85"]
"ymcui/Chinese-RC-Datasets" ["l"="26.056,30.143"]
"liuhuanyong/AbstractKnowledgeGraph" ["l"="32.45,30.323"]
"liuhuanyong/ProductKnowledgeGraph" ["l"="32.455,30.248"]
"liuhuanyong/QAonMilitaryKG" ["l"="32.41,30.244"]
"smilelight/lightKG" ["l"="32.383,30.204"]
"bojone/oppo-text-match" ["l"="32.4,30.331"]
"daniellibin/gaiic2021_track3_querySim" ["l"="16.23,-7.141"]
"DataArk/GAIIC2022-Product-Title-Entity-Recognition-Baseline" ["l"="21.273,37.253"]
"zr2021/2021_QQ_AIAC_Tack1_1st" ["l"="21.304,37.223"]
"luoda888/2021-GAIIC-phase3-idea" ["l"="32.439,30.359"]
"lonePatient/daguan_2019_rank9" ["l"="32.509,30.107"]
"xtea/chinese_medical_words" ["l"="32.471,30.426"]
"liutongyang/CMID" ["l"="32.455,30.412"]
"lwgkzl/Covid19-NLP" ["l"="32.49,30.456"]
"vinhkhuc/JFastText" ["l"="31.715,30.316"]
"mayabot/fastText4j" ["l"="31.738,30.305"]
"ivanhk/fastText_java" ["l"="31.686,30.324"]
"linkfluence/fastText4j" ["l"="31.697,30.338"]
"duanhongyi/genius" ["l"="31.92,30.015"]
"xylander23/New-Word-Detection" ["l"="32.062,30.044"]
"wyh267/ChineseWordSegmentation" ["l"="32,30.007"]
"hankcs/multi-criteria-cws" ["l"="32.034,29.832"]
"ml-distribution/chinese-corpus" ["l"="32.323,30.081"]
"taku910/crfpp" ["l"="26.712,34.113"]
"frcchang/zpar" ["l"="21.786,28.58"]
"lzhang10/maxent" ["l"="26.733,34.081"]
"XiaoMi/MiNLP" ["l"="32.204,30.309"]
"thunlp/OpenCLaP" ["l"="32.206,30.223"]
"china-ai-law-challenge/CAIL2019" ["l"="29.603,29.313"]
"thunlp/LegalPapers" ["l"="29.639,29.284"]
"bamtercelboo/Awesome-Law-NLP-Research-Work" ["l"="29.625,29.308"]
"padeoe/cail2019" ["l"="29.602,29.301"]
"thunlp/CAIL" ["l"="29.618,29.324"]
"thunlp/PLMpapers" ["l"="29.809,32.562"]
"crownpku/Chinese-Annotator" ["l"="32.173,30.039"]
"xkzhangsan/xk-time" ["l"="31.865,30.068"]
"ryanInf/Time-NLPY" ["l"="32.066,30.118"]
"kidden/nlp4han" ["l"="31.865,30.276"]
"zhangzhiqiangccm/NLP-project" ["l"="32.415,30.426"]
"taishan1994/awesome-chinese-ner" ["l"="32.458,30.196"]
"SunnyGJing/t5-pegasus-chinese" ["l"="32.275,30.412"]
"bigzhao/Keyword_Extraction" ["l"="32.169,30.196"]
"boudinfl/pke" ["l"="28.572,33.536"]
"liuhuanyong/ImportantEventExtractor" ["l"="32.368,29.953"]
"yzhangcs/parser" ["l"="27.497,32.864"]
"PaddlePaddle/TrustAI" ["l"="33.936,36.022"]
"dhwajraj/deep-text-classifier-mtl" ["l"="31.626,30.323"]
"dhwajraj/spark-text-tagger" ["l"="31.737,30.275"]
"jg8610/multi-task-learning" ["l"="31.536,30.373"]
"FrankWork/fudan_mtl_reviews" ["l"="31.566,30.337"]
"dhwajraj/NER-RNN" ["l"="31.837,30.223"]
"jkszw2014/bert-kbqa-NLPCC2017" ["l"="30.189,31.483"]
"hankcs/TextRank" ["l"="31.628,30.269"]
"xuyiqiang-learn/W2V_TextRank" ["l"="31.58,30.275"]
"complexdb/zincbase" ["l"="32.834,30.432"]
"tomgrek/zincbase" ["l"="32.796,30.432"]
"KennFalcon/elasticsearch-analysis-hanlp" ["l"="9.974,21.822"]
"NELSONZHAO/zhihu" ["l"="31.994,30.059"]
"shenweichen/DeepCTR" ["l"="22.73,37.113"]
"hzy46/Char-RNN-TensorFlow" ["l"="32.065,30.024"]
"Kyubyong/transformer" ["l"="30.067,32.52"]
"wzhe06/Ad-papers" ["l"="22.718,37.135"]
"ChenglongChen/tensorflow-DeepFM" ["l"="22.745,37.194"]
"tensorflow/nmt" ["l"="30.085,32.546"]
"lihanghang/Knowledge-Graph" ["l"="32.386,30.225"]
"shangjingbo1226/SegPhrase" ["l"="32.37,29.855"]
"remenberl/SegPhrase-MultiLingual" ["l"="32.367,29.832"]
"remenberl/Latent-Keyphrase-Inference" ["l"="32.383,29.81"]
"shanzhenren/ClusType" ["l"="32.403,29.793"]
"BangLiu/ConcepT" ["l"="32.313,29.884"]
"anirudyd/topmine" ["l"="32.355,29.88"]
"shanzhenren/CoType" ["l"="30.8,30.963"]
"LiyuanLucasLiu/LightNER" ["l"="32.45,29.839"]
"mjiang89/MetaPAD" ["l"="32.4,29.772"]
"kno10/WikipediaEntities" ["l"="32.38,29.795"]
"BonnieHuangxin/Bert_sentence_similarity" ["l"="32.341,30.107"]
"phychaos/TextSimilar" ["l"="32.313,30.103"]
"BangLiu/ArticlePairMatching" ["l"="32.224,29.995"]
"davidsbatista/NER-datasets" ["l"="10.111,-44.633"]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["l"="32.435,30.015"]
"yuchenlin/OntoNotes-5.0-NER-BIO" ["l"="32.443,29.991"]
"allenai/scibert" ["l"="28.858,30.596"]
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" ["l"="32.308,29.948"]
"davidsbatista/Annotated-Semantic-Relationships-Datasets" ["l"="30.744,30.946"]
"divamgupta/lstm-gender-predictor" ["l"="32.228,29.906"]
"HadoopIt/rnn-nlu" ["l"="28.101,28.961"]
"ejmeij/entity-linking-and-retrieval-tutorial" ["l"="25.475,30.927"]
"lvjianxin/Relationship-extraction" ["l"="32.506,30.161"]
"thunlp/Chinese_NRE" ["l"="30.676,30.929"]
"SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["l"="30.744,30.918"]
"NeilGY/NER_entityRelationExtration" ["l"="32.529,30.136"]
"duguiming111/NER-BERT-BiLSTM-CRF-" ["l"="32.42,30.095"]
"xiaofei05/Chinese-NER" ["l"="32.447,30.081"]
"shiningliang/CCKS2019-IPRE" ["l"="32.605,30.176"]
"Mryangkaitong/Chinese_NRE" ["l"="32.527,30.171"]
"mangonihao/EntityRelationExtraction" ["l"="32.553,30.176"]
"molamolaxxx/pcnn" ["l"="30.641,30.869"]
"microsoft/NeuronBlocks" ["l"="32.11,30.083"]
"asyml/texar" ["l"="29.966,32.339"]
"openai/sparse_attention" ["l"="29.853,32.415"]
"facebookresearch/pytext" ["l"="29.887,32.573"]
"HaoyuHu/bert-multi-gpu" ["l"="31.844,30.361"]
"guotong1988/BERT-multi-gpu" ["l"="31.86,30.343"]
"maszhongming/MatchSum" ["l"="28.334,33.716"]
"kururuken/BERT-Transformer-for-Summarization" ["l"="28.267,33.639"]
"OpenBMB/CPM-Live" ["l"="32.164,30.623"]
"OpenBMB/BMTrain" ["l"="32.147,30.614"]
"OpenBMB/ModelCenter" ["l"="32.165,30.596"]
"OpenBMB/BMCook" ["l"="32.166,30.608"]
"OpenBMB/BMList" ["l"="32.147,30.6"]
"OpenBMB/BMInf" ["l"="32.162,30.553"]
"OpenBMB/BMTools" ["l"="32.168,30.682"]
"thunlp/OpenDelta" ["l"="27.659,31.313"]
"thunlp/UltraChat" ["l"="32.147,30.687"]
"dengxiuqi/ChineseLyrics" ["l"="32.534,30.051"]
"dengxiuqi/Lyricist-torch" ["l"="32.569,30.02"]
"gaussic/Chinese-Lyric-Corpus" ["l"="32.513,30.077"]
"siegfang/word2vec" ["l"="31.718,30.265"]
"medallia/Word2VecJava" ["l"="31.697,30.278"]
"AvivNavon/pareto-hypernetworks" ["l"="31.286,30.536"]
"ofrikleinfeld/ObjectPermanence" ["l"="31.246,30.555"]
"idanachi/RegRec_and_PCM" ["l"="31.259,30.533"]
"Vonng/adcode" ["l"="31.948,30.398"]
"shibing624/addressparser" ["l"="31.953,30.423"]
"xuyige/BERT4doc-Classification" ["l"="32.141,30.337"]
"allenai/dont-stop-pretraining" ["l"="32.192,30.41"]
"yumeng5/LOTClass" ["l"="33.713,36.913"]
"Sleepychord/CogLTX" ["l"="32.007,30.545"]
"zhuchen03/FreeLB" ["l"="29.483,32.256"]
"supercoderhawk/DNN_CWS" ["l"="32.34,29.912"]
"MLjian/TextClassificationImplement" ["l"="31.933,29.87"]
"moneyDboat/data_grand" ["l"="31.915,29.864"]
"hecongqing/2018-daguan-competition" ["l"="31.896,29.852"]
"Rowchen/Text-classifier" ["l"="31.897,29.833"]
"nlpjoe/daguan-classify-2018" ["l"="31.923,29.851"]
"yanqiangmiffy/daguan" ["l"="31.915,29.832"]
"RedstoneWill/MachineLearningInAction-Camp" ["l"="23.89,32.706"]
"learning511/cs224n-learning-camp" ["l"="30.073,32.857"]
"cjymz886/text_rnn_attention" ["l"="31.972,29.937"]
"THUNLP-MT/TG-Reading-List" ["l"="29.903,32.203"]
"iwangjian/Paper-Reading" ["l"="32.058,30.073"]
"tomohideshibata/BERT-related-papers" ["l"="29.789,32.515"]
"llhthinker/NLP-Papers" ["l"="29.809,32.712"]
"xcfcode/Summarization-Papers" ["l"="28.318,33.713"]
"pytorch/serve" ["l"="25.291,34.17"]
"kpe/bert-for-tf2" ["l"="32.185,30.136"]
"kamalkraj/ALBERT-TF2.0" ["l"="32.209,30.042"]
"kamalkraj/BERT-NER-TF" ["l"="32.252,30.036"]
"google-research/ALBERT" ["l"="29.821,32.46"]
"tensorflow/addons" ["l"="25.59,34.156"]
"CyberZHG/keras-transformer" ["l"="31.288,31.544"]
"wuba/dl_inference" ["l"="32.281,30.4"]
"BDBC-KG-NLP/IE-Survey" ["l"="32.446,30.208"]
"BDBC-KG-NLP/QA-Survey-CN" ["l"="32.443,30.277"]
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" ["l"="32.506,30.189"]
"percent4/people_relation_extract" ["l"="32.491,30.188"]
"slczgwh/REDN" ["l"="30.652,31.015"]
"liuhuanyong/ChineseTextualInference" ["l"="32.222,29.961"]
"nyu-dl/dl4marco-bert" ["l"="25.857,29.12"]
"AdeDZY/DeepCT" ["l"="25.868,29.133"]
"Georgetown-IR-Lab/cedr" ["l"="25.863,29.084"]
"castorini/anserini" ["l"="25.816,29.155"]
"AdeDZY/SIGIR19-BERT-IR" ["l"="25.886,29.065"]
"thunlp/OpenMatch" ["l"="25.861,29.145"]
"castorini/duobert" ["l"="25.872,29.1"]
"apachecn/nlp-pytorch-zh" ["l"="32.087,30.162"]
"joosthub/PyTorchNLPBook" ["l"="29.901,32.687"]
"zhanlaoban/CS224N-Stanford-Winter-2019" ["l"="30.047,32.878"]
"ZacBi/CS224n-2019-solutions" ["l"="30.038,32.864"]
"apachecn/fe4ml-zh" ["l"="24.207,31.256"]
"apachecn/stanford-cs224n-notes-zh" ["l"="30.056,32.933"]
"xiangking/PyTorch_CoSENT" ["l"="32.324,30.433"]
"thunlp/SE-WRL" ["l"="-0.687,39.843"]
"thunlp/SCPapers" ["l"="32.353,30.449"]
"thunlp/SememePSO-Attack" ["l"="29.529,32.249"]
"shuxinyin/SimCSE-Pytorch" ["l"="32.353,30.403"]
"Macielyoung/sentence_representation_matching" ["l"="32.366,30.414"]
"yangjianxin1/SimCSE" ["l"="32.351,30.415"]
"jjljkjljk/SimCSE-Chinese" ["l"="32.36,30.438"]
"zhoujx4/DuIE" ["l"="32.776,30.188"]
"zhoujx4/DuEE" ["l"="32.82,30.188"]
"zqtan1024/sequence-to-set" ["l"="32.59,30.172"]
"tricktreat/locate-and-label" ["l"="32.542,30.167"]
"huyuanxin/CMeKGCrawler" ["l"="32.62,30.555"]
"xcwill/CMeKG_labelingPlatform" ["l"="32.601,30.557"]
"king-yyf/CMeKG_tools" ["l"="32.582,30.523"]
"candlewill/Chinsese_word_vectors" ["l"="32.11,29.848"]
"rustch3n/dgk_lost_conv" ["l"="30.631,28.184"]
"kaushaltrivedi/bert-toxic-comments-multilabel" ["l"="32.054,29.934"]
"HSLCY/ABSA-BERT-pair" ["l"="29.099,31.153"]
"abhyudaynj/LSTM-CRF-models" ["l"="32.229,29.889"]
"clab/lstm-parser" ["l"="27.507,32.773"]
"wlin12/wang2vec" ["l"="30.667,33.738"]
"XuezheMax/LasagneNLP" ["l"="27.495,32.808"]
"chenlian-zhou/ALBERT_NER" ["l"="32.407,30.051"]
"zhanlaoban/NLP_PEMDC" ["l"="32.21,30.029"]
"zhanlaoban/NLP_competitions" ["l"="32.269,30.077"]
"zhanlaoban/CCF_BDCI_2019_datafountain350" ["l"="32.277,30.108"]
"linhaow/TextClassify" ["l"="32.297,30.129"]
"AimeeLee77/wiki_zh_word2vec" ["l"="32.168,30.062"]
"AimeeLee77/senti_analysis" ["l"="15.359,5.387"]
"zake7749/word2vec-tutorial" ["l"="11.86,-5.088"]
"liuhuanyong/Word2Vector" ["l"="32.321,30.069"]
"Deermini/word2vec-tensorflow" ["l"="11.909,-5.083"]
"ownthink/KnowledgeGraph" ["l"="32.442,30.261"]
"zzzvvvxxxd/KGPro" ["l"="32.534,30.278"]
"thunlp/KB2E" ["l"="23.065,38.415"]
"ngl567/CookBook-KG" ["l"="32.581,30.367"]
"YZHANG1270/Marvel_KnowledgeGraph" ["l"="32.663,30.411"]
"weizhixiaoyi/DouBan-KGQA" ["l"="32.483,30.325"]
"miracleyoo/pytorch-lightning-template" ["l"="32.154,30.422"]
"ashleve/lightning-hydra-template" ["l"="34.22,35.904"]
"PyTorchLightning/deep-learning-project-template" ["l"="34.226,35.979"]
"MLNLP-World/Paper_Writing_Tips" ["l"="27.542,30.079"]
"MLNLP-World/AI-Paper-Collector" ["l"="27.528,30.124"]
"3017218062/Pytorch-Lightning-Learning" ["l"="32.121,30.489"]
"qingsongedu/time-series-transformers-review" ["l"="22.316,35.973"]
"ami66/ChineseTextClassifier" ["l"="15.344,5.384"]
"clayandgithub/zh_cnn_text_classify" ["l"="31.592,31.672"]
"bigboNed3/chinese_text_cnn" ["l"="15.307,5.41"]
"CementMaker/cnn_lstm_for_text_classify" ["l"="31.949,29.962"]
"norybaby/sentiment_analysis_textcnn" ["l"="15.257,5.373"]
"XqFeng-Josie/TextCNN" ["l"="15.194,5.341"]
"renjunxiang/Text-Classification" ["l"="31.948,29.939"]
"wavewangyue/text-classification" ["l"="31.924,29.949"]
"codemayq/chaotbot_corpus_Chinese" ["l"="30.483,28.077"]
"crownpku/awesome-chinese-nlp" ["l"="32.189,29.92"]
"liwenzhu/corpusZh" ["l"="32.337,30.062"]
"z17176/Chinese_conversation_sentiment" ["l"="32.194,30.04"]
"qhduan/Seq2Seq_Chatbot_QA" ["l"="30.477,28.126"]
"aceimnorstuvwxz/toutiao-text-classfication-dataset" ["l"="32.178,29.964"]
"datawhalechina/team-learning-nlp" ["l"="24.363,31.185"]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["l"="27.506,30.116"]
"Alibaba-NLP/HiAGM" ["l"="30.26,30.486"]
"kevin28520/My-TensorFlow-tutorials" ["l"="34.286,35.033"]
"kratzert/finetune_alexnet_with_tensorflow" ["l"="34.237,35.004"]
"YouChouNoBB/ijcai-18-top2-single-mole-solution" ["l"="21.519,37.196"]
"abess-team/abess" ["l"="33.097,30.404"]
"Mamba413/rvs" ["l"="33.119,30.4"]
"Mamba413/Ball" ["l"="33.128,30.414"]
"fxy96/Likelihood-Lab-AI-Seminar-2018" ["l"="33.032,30.388"]
"jinfagang/tensorflow_poems" ["l"="31.939,30.044"]
"jinfagang/tensorflow_novelist" ["l"="31.845,29.979"]
"hjptriplebee/Chinese_poem_generator" ["l"="29.099,28.818"]
"jinfagang/weibo_terminater" ["l"="16.013,5.533"]
"sherjilozair/char-rnn-tensorflow" ["l"="27.116,34.364"]
"google/seq2seq" ["l"="30.114,32.543"]
"qhduan/just_another_seq2seq" ["l"="30.459,28.092"]
"hzy46/Deep-Learning-21-Examples" ["l"="23.88,31.222"]
"coderSkyChen/zhihu_kanshan_cup_2017" ["l"="31.995,29.887"]
"bojone/t5_in_bert4keras" ["l"="32.248,30.413"]
"P01son6415/CSL" ["l"="32.21,30.427"]
"google-research/multilingual-t5" ["l"="29.766,32.395"]
"yangxcc/Sklearn-Algorithm" ["l"="32.272,29.731"]
"guangyaooo/MLTemplate" ["l"="32.252,29.724"]
"ownthink/robot" ["l"="32.406,30.275"]
"baimingxuan/vue3-admin-design" ["l"="-24.832,23.116"]
"HandsomeLeft/Veaser" ["l"="-24.84,23.117"]
"sohutv/hotcaffeine" ["l"="-24.827,23.114"]
"KylinC/mmVital-Signs" ["l"="-24.835,23.122"]
"Allenkuzma/langhaiblogs" ["l"="-24.846,23.121"]
"wwwlike/vlife-admin-react" ["l"="-24.851,23.12"]
"Beseting/NesEmulator" ["l"="-24.84,23.125"]
"sohutv/cachecloud-client" ["l"="-24.823,23.12"]
"atpuxiner/toollib" ["l"="-24.888,23.128"]
"wwwlike/vlife" ["l"="-24.917,23.127"]
"1024er/cbert_aug" ["l"="31.924,30.437"]
"varinf/TransformersDataAugmentation" ["l"="31.861,30.497"]
"qhduan/CPM-LM-TF2" ["l"="32.074,30.487"]
"TsinghuaAI/CPM-Finetune" ["l"="32.093,30.488"]
"laekov/fastmoe" ["l"="27.77,31.105"]
"bojone/r-drop" ["l"="32.263,30.448"]
"ShannonAI/ChineseBert" ["l"="32.3,30.275"]
"guotong1988/BERT-GPU" ["l"="31.774,30.411"]
"zhp510730568/bert-ad" ["l"="31.742,30.435"]
"Morizeyao/Decoders-Chinese-TF2.0" ["l"="32.079,30.423"]
"GaoPeng97/transformer-xl-chinese" ["l"="32.118,30.388"]
"ACL2020SpellGCN/SpellGCN" ["l"="31.515,28.729"]
"tiantian91091317/OCR-Corrector" ["l"="29.69,34.108"]
"wdimmy/Automatic-Corpus-Generation" ["l"="31.524,28.707"]
"hiyoung123/SoftMaskedBert" ["l"="33.177,37.51"]
"liushulinle/PLOME" ["l"="31.534,28.732"]
"DaDaMrX/ReaLiSe" ["l"="31.539,28.715"]
"gitabtion/BertBasedCorrectionModels" ["l"="31.508,28.713"]
"amazon-research/transformers-data-augmentation" ["l"="31.83,30.527"]
"GanjinZero/ChineseEHRBert" ["l"="32.443,30.37"]
"CBLUEbenchmark/CBLUE" ["l"="32.423,30.345"]
"UCSD-AI4H/Medical-Dialogue-System" ["l"="32.424,30.41"]
"HaowenHOU/single-pass-clustering-for-chinese-text" ["l"="29.351,33.374"]
"FesonX/cn-text-classifier" ["l"="29.363,33.354"]
"Light-City/PyToNeo4J" ["l"="32.558,30.325"]
"mattzheng/DouBanRecommend" ["l"="32.522,30.308"]
"zhangyqCS/KnowledgeGraph_Agriculture" ["l"="32.514,30.3"]
"MiracleTanC/Neo4j-KGBuilder" ["l"="29.131,29.73"]
"percent4/spo_extract_platform" ["l"="32.478,30.213"]
"bojone/kg-2019-baseline" ["l"="32.454,30.124"]
"yuanxiaosc/Schema-based-Knowledge-Extraction" ["l"="32.458,30.143"]
"Wangpeiyi9979/IE-Bert-CNN" ["l"="32.494,30.128"]
"WindChimeRan/pytorch_multi_head_selection_re" ["l"="30.723,31.001"]
"Wangpeiyi9979/InformationExtractionDemo" ["l"="32.494,30.114"]
"cdjasonj/CCF_IE" ["l"="32.509,30.123"]
"zhpmatrix/BERTem" ["l"="30.716,31.016"]
"xiaolalala/Distant-Supervised-Chinese-Relation-Extraction" ["l"="30.687,30.898"]
"percent4/ccks_triple_extract" ["l"="32.511,30.201"]
"powerycy/Lic2020-" ["l"="32.519,30.191"]
"UCSD-AI4H/COVID-Dialogue" ["l"="32.466,30.475"]
"lwgkzl/MedDG" ["l"="32.477,30.511"]
"yanguojun123/Medical-Dialogue" ["l"="32.465,30.49"]
"HCPLab-SYSU/Medical_DS" ["l"="32.497,30.518"]
"LiuQL2/MedicalChatbot" ["l"="32.498,30.501"]
"jd-aig/nlp_baai" ["l"="32.384,30.384"]
"ne7ermore/torch-light" ["l"="32.451,29.875"]
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" ["l"="32.368,30"]
"chatopera/cskefu" ["l"="32.333,30.584"]
"taoshihan1991/go-fly" ["l"="-12.704,1.075"]
"6ag/customer-service" ["l"="32.34,30.641"]
"chatopera/chatbot-samples" ["l"="32.364,30.639"]
"rainarch/DSNER" ["l"="32.388,29.947"]
"kmkurn/pytorch-crf" ["l"="32.355,30.059"]
"allanj/pytorch_lstmcrf" ["l"="32.471,29.944"]
"jidasheng/bi-lstm-crf" ["l"="32.461,29.916"]
"kaniblu/pytorch-bilstmcrf" ["l"="32.475,29.893"]
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" ["l"="32.42,29.93"]
"mali19064/LSTM-CRF-pytorch-faster" ["l"="32.436,29.905"]
"Nealcly/BiLSTM-LAN" ["l"="32.426,30.043"]
"HUANGZHIHAO1994/weibo-analysis-and-visualization" ["l"="15.45,5.444"]
"Rowchen/Keyword-Extraction" ["l"="32.079,30.263"]
"duanzhihua/bert_chinese_pytorch" ["l"="32.078,29.833"]
"duanzhihua/pytorch-pretrained-BERT" ["l"="32.066,29.823"]
"GISerWang/Spatio-temporal-Clustering" ["l"="32.304,29.507"]
"leekeiling/Cluster" ["l"="32.299,29.577"]
"GISerWang/Sequence-Similarity" ["l"="32.307,29.479"]
"Albert-Ma/PROP" ["l"="25.89,29.151"]
"IceMimosa/geocoding" ["l"="31.64,30.778"]
"curryli/AddressCompare" ["l"="31.656,30.799"]
"bitlap/geocoding" ["l"="31.638,30.803"]
"casuallyName/Geocoding" ["l"="31.626,30.79"]
"Dod-o/NLP-practice-program" ["l"="32.097,29.908"]
"alibaba/TProfiler" ["l"="9.626,21.223"]
"ysc/HtmlExtractor" ["l"="31.66,30.291"]
"viewlei/fsauor2018" ["l"="15.3,5.454"]
"zs50910/DCSAN-for-Chinese-NER" ["l"="32.509,30.234"]
"yangjianxin1/LEBERT-NER-Chinese" ["l"="32.443,30.151"]
"jm12138/CPM-Generate-Pytorch" ["l"="32.063,30.516"]
"TsinghuaAI/CPM-KG" ["l"="32.044,30.536"]
"jm12138/CPM-Generate-Paddle" ["l"="-0.228,39.412"]
"achernodub/targer" ["l"="32.375,29.967"]
"liuhuanyong/TopiCluster" ["l"="31.801,36.503"]
"luozhouyang/AutoPhraseX" ["l"="32.434,30.108"]
"xgeric/UCPhrase-exp" ["l"="32.376,29.88"]
"DengBoCong/nlp-dialogue" ["l"="32.119,30.068"]
"DengBoCong/Algorithm" ["l"="32.082,30.028"]
"DengBoCong/text-similarity" ["l"="32.273,30.32"]
"shliang0603/Awesome-DeepLearning-500FAQ" ["l"="27.387,29.943"]
"wzzzd/lm_ner" ["l"="32.471,30.09"]
"saiwaiyanyu/bi-lstm-crf-ner-tf2.0" ["l"="32.379,30.04"]
"charles9n/bert-sklearn" ["l"="32.572,30.46"]
"MenglinLu/Chinese-clinical-NER" ["l"="32.501,30.388"]
"trueto/transformers_sklearn" ["l"="32.616,30.497"]
"JackKuo666/NLP_basis" ["l"="32.153,30.033"]
"Menyoupingxiaoguo/DDRobot" ["l"="32.226,29.831"]
"Menyoupingxiaoguo/MQTT" ["l"="32.226,29.922"]
"Menyoupingxiaoguo/AliyunSendMail" ["l"="32.209,29.937"]
"Menyoupingxiaoguo/AliyunRDS" ["l"="32.224,29.786"]
"Menyoupingxiaoguo/DDMessageCallback" ["l"="32.217,29.795"]
"Menyoupingxiaoguo/Kafka" ["l"="32.234,29.792"]
"Menyoupingxiaoguo/WXAuthApi" ["l"="32.224,29.803"]
"Menyoupingxiaoguo/WXAuthWeb" ["l"="32.236,29.801"]
"transbioZI/RMTL" ["l"="31.368,30.365"]
"cciliber/matMTL" ["l"="31.351,30.369"]
"chcorbi/MultiTaskLearning" ["l"="31.342,30.395"]
"baidu/knowledge-driven-dialogue" ["l"="28.136,29.059"]
"xiangrongzeng/copy_re" ["l"="30.707,30.967"]
"tticoin/LSTM-ER" ["l"="30.764,30.953"]
"zsctju/triplets-extraction" ["l"="30.758,30.975"]
"taishan1994/pytorch_uie_ner" ["l"="32.519,30.34"]
"taishan1994/PointerNet_Chinese_Information_Extraction" ["l"="32.518,30.352"]
"JunnYu/GPLinker_pytorch" ["l"="32.501,30.275"]
"circlePi/Bert_Chinese_Ner_pytorch" ["l"="32.399,30.035"]
"weizhepei/BERT-NER" ["l"="32.452,30.022"]
"fenchri/edge-oriented-graph" ["l"="30.64,30.969"]
"nusnlp/PtrNetDecoding4JERE" ["l"="30.7,30.986"]
"tim5go/zhopenie" ["l"="32.506,30.093"]
"TJUNLP/COER" ["l"="32.559,30.044"]
"yhcc/BARTNER" ["l"="32.473,30.242"]
"daixiangau/acl2020-transition-discontinuous-ner" ["l"="32.572,30.285"]
"Akeepers/LEAR" ["l"="32.521,30.279"]
"foxlf823/sodner" ["l"="32.558,30.278"]
"Nealcly/templateNER" ["l"="30.889,30.458"]
"yhcc/BARTABSA" ["l"="29.071,31.082"]
"enze5088/WenTianSearch" ["l"="32.398,30.576"]
"muyuuuu/E-commerce-Search-Recall" ["l"="32.386,30.538"]
"zwkkk/wentian-rank2" ["l"="32.41,30.587"]
"AlexYangLi/TextClassification" ["l"="32.716,30.351"]
"AlexYangLi/ALA" ["l"="32.652,30.318"]
"kyzhouhzau/Clinical-NER" ["l"="32.531,30.361"]
"2721485344/NERuselocal" ["l"="32.547,30.376"]
"TJUNLP/CCKScner" ["l"="32.547,30.404"]
"F-debug/Medical-named-entity-recognition" ["l"="32.501,30.344"]
"mechine-learning/NER-ccks2019-" ["l"="32.539,30.387"]
"thunlp/sememe_prediction" ["l"="-0.694,39.862"]
"thunlp/Sememe-SC" ["l"="32.383,30.51"]
"thunlp/SE-WRL-SAT" ["l"="-0.671,39.83"]
"thunlp/RCPapers" ["l"="25.98,30.147"]
"thunlp/BabelNet-Sememe-Prediction" ["l"="32.371,30.495"]
"howl-anderson/tools_for_corpus_of_people_daily" ["l"="32.454,30.049"]
"AlanConstantine/PeoplesDailyNER" ["l"="32.522,29.995"]
"liuhuanyong/SequentialEventExtration" ["l"="32.574,30.186"]
"liuhuanyong/CCKS2018Summary" ["l"="32.547,30.244"]
"kyzhouhzau/NLPGNN" ["l"="32.527,30.263"]
"lxy444/bertcner" ["l"="32.451,30.391"]
"WENGSYX/Chinese-Word2vec-Medicine" ["l"="32.438,30.395"]
"lingluodlut/Chinese-BioNLP" ["l"="32.517,30.432"]
"MatNLP/SMedBERT" ["l"="32.483,30.42"]
"hy-struggle/ccks_ner" ["l"="26.168,30.073"]
"PengboLiu/Doc2Vec-Document-Similarity" ["l"="32.331,30.093"]
"WenRichard/DIAC2019-Adversarial-Attack-Share" ["l"="32.244,30.316"]
"cooscao/Bert-BiLSTM-CRF-pytorch" ["l"="32.428,30.086"]
"pen-ho/medical_knowledge_graph_app-master" ["l"="32.576,30.103"]
"jiangnanboy/movie_knowledge_graph_app" ["l"="32.633,30.039"]
"lukecq1231/nli" ["l"="25.763,30.174"]
"zhangsheng93/cMedQA" ["l"="32.454,30.426"]
"hejunqing/webMedQA" ["l"="32.456,30.451"]
"wjjingtian/cMQA" ["l"="32.452,30.441"]
"sujeek/chinese_nlp" ["l"="32.18,29.948"]
"nlpdz/Medical-Named-Entity-Rec-Based-on-Dilated-CNN" ["l"="32.126,29.955"]
"DianboWork/Graph4CNER" ["l"="32.42,30.063"]
"allanj/ner_with_dependency" ["l"="32.478,29.976"]
"lingluodlut/Att-ChemdNER" ["l"="28.985,30.482"]
"zhuyuanxiang/NLTK-Python-CN" ["l"="31.856,29.961"]
"MaiYunfei2000/IA003CoCoSci" ["l"="5.175,16.766"]
"yhcc/OntoNotes-5.0-NER" ["l"="32.45,30.071"]
"ontonotes/conll-formatted-ontonotes-5.0" ["l"="29.655,32.649"]
"zeitiempo/ECSD" ["l"="32.24,30.083"]
"sing1ee/analyzer-solr" ["l"="31.616,30.218"]
"sing1ee/jieba-solr" ["l"="31.6,30.214"]
"bojone/lic2020_baselines" ["l"="32.564,30.114"]
"xiaoqian19940510/CCKS-2020-event-extraction" ["l"="32.646,30.16"]
"carrie0307/baidu-ee2020" ["l"="32.604,30.099"]
"haobibo/ICTCLAS_Python_Wrapper" ["l"="31.842,30.051"]
"tsroten/zhon" ["l"="16.547,5.099"]
"FudanNLP/NLPCC-WordSeg-Weibo" ["l"="31.899,29.887"]
"akebe/element-address" ["l"="31.689,30.718"]
"pupuk/addr" ["l"="31.743,30.762"]
"sighsmile/conlleval" ["l"="32.446,29.944"]
"ZihanWangKi/CrossWeigh" ["l"="32.461,29.981"]
"facebookresearch/SentEval" ["l"="29.916,32.584"]
"davidsbatista/NER-Evaluation" ["l"="32.515,29.884"]
"yuquanle/2018-daguan-competition-rank4" ["l"="31.86,29.822"]
"nzc/tencent-contest" ["l"="21.539,37.184"]
"Shi-Lixin/Machine-Learning-Algorithms" ["l"="32.304,29.539"]
"mattzheng/Agriculture_KnowledgeGraph" ["l"="32.576,30.328"]
"Randool/pyRecommender" ["l"="23.051,36.872"]
"codeants2012/FinancialKnowledgeGraph" ["l"="32.61,30.321"]
"hwwang55/MKR" ["l"="22.989,36.927"]
"chaoming0625/WaiMaiOpinionMiner" ["l"="31.978,29.811"]
"chaoming0625/FineGrainedOpinionMining" ["l"="31.968,29.781"]
"finlay-liu/kaggle_public" ["l"="32.276,30.147"]
"rebornZH/2019-CCF-BDCI-NLP" ["l"="32.422,30.118"]
"xiong666/ccf_financial_negative" ["l"="32.47,30.102"]
"guoday/Tencent2020_Rank1st" ["l"="21.386,37.205"]
"yuanxiaosc/BERT_Paper_Chinese_Translation" ["l"="32.181,30.123"]
"xmxoxo/BERT-train2deploy" ["l"="32.201,30.099"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="31.626,31.509"]
"wabyking/TextClassificationBenchmark" ["l"="31.588,31.513"]
"powerycy/DeepKg" ["l"="32.495,30.233"]
"YZHANG1270/Aspect-Based-Sentiment-Analysis" ["l"="29.064,31.164"]
"zhanzecheng/SOHU_competition" ["l"="31.953,29.847"]
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" ["l"="31.967,29.873"]
"jimmyyfeng/TD-LSTM" ["l"="29.117,31.214"]
"bojone/el-2019-baseline" ["l"="32.53,30.093"]
"bojone/ee-2019-baseline" ["l"="32.584,30.086"]
"megemini/-_megemini-" ["l"="32.749,30.217"]
"dimtxw/RJYY" ["l"="32.795,30.22"]
"lixinsu/RCZoo" ["l"="26.004,30.205"]
"Ricardokevins/Kevinpro-NLP-demo" ["l"="32.57,30.201"]
"Ricardokevins/Bert-In-Relation-Extraction" ["l"="32.514,30.179"]
"zhoujx4/NLP-Series-relation-extraction" ["l"="32.652,30.188"]
"nyu-mll/multiNLI" ["l"="25.746,30.162"]
"HsiaoYetGun/ESIM" ["l"="26.416,29.7"]
"lanwuwei/SPM_toolkit" ["l"="25.793,30.199"]
"cooelf/SemBERT" ["l"="26.051,30.077"]
"YichenGong/Densely-Interactive-Inference-Network" ["l"="25.782,30.188"]
"JonneryR/2019.1-TianChi-Jinnan" ["l"="31.85,29.785"]
"hu-qi/hu-qi.github.io" ["l"="-35.191,-17.081"]
"hu-qi/myAwesome" ["l"="-35.207,-17.061"]
"MaiJiantian/blockchain-kotlin" ["l"="-33.634,-15.8"]
"s14t284/TorchCRF" ["l"="32.435,29.967"]
"MarvinTeichmann/ConvCRF" ["l"="31.65,36.906"]
"hecongqing/2018-daguan-conpetition" ["l"="31.883,29.833"]
"Receiling/UniRE" ["l"="32.57,30.241"]
"hy-struggle/PRGC" ["l"="32.58,30.231"]
"ssnvxia/OneRel" ["l"="32.568,30.229"]
"neukg/GRTE" ["l"="32.634,30.234"]
"DreamInvoker/GAIN" ["l"="30.606,30.955"]
"wzhouad/ATLOP" ["l"="30.593,30.966"]
"ShannonAI/dice_loss_for_NLP" ["l"="32.444,30.168"]
"lonePatient/BiLSTM-CRF-NER-PyTorch" ["l"="32.415,29.953"]
"yao8839836/kg-bert" ["l"="23.018,38.433"]
"suolyer/PyTorch_BERT_Biaffine_NER" ["l"="32.478,30.197"]
"tsujuifu/pytorch_graph-rel" ["l"="30.695,30.971"]
"BrambleXu/KGQA_SG" ["l"="32.523,30.322"]
"shaoxiongji/knowledge-graphs" ["l"="22.963,38.447"]
"liuhuanyong/KnowledgeGraphSlides" ["l"="32.495,30.174"]
"beader/ruijin_round1" ["l"="32.691,30.203"]
"beader/ruijin_round2" ["l"="32.704,30.213"]
"caishiqing/joint-mrc" ["l"="26.136,30.089"]
"qhduan/ConversationalRobotDesign" ["l"="30.425,28.124"]
"baidu/Dialogue" ["l"="28.108,29.069"]
"cooelf/DeepUtteranceAggregation" ["l"="28.092,29.068"]
"GaoQ1/rasa_chatbot_cn" ["l"="30.291,28.111"]
"MarkWuNLP/MultiTurnResponseSelection" ["l"="28.14,29.026"]
"rguthrie3/BiLSTM-CRF" ["l"="32.162,29.876"]
"scofield7419/sequence-labeling" ["l"="32.166,29.899"]
"zejunwang1/bert4vec" ["l"="32.315,30.464"]
"hwj911327/address-parse" ["l"="31.718,30.774"]
"Lisennlp/TinyBert" ["l"="32.315,30.121"]
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" ["l"="32.069,29.923"]
"lonePatient/BERT-chinese-text-classification-pytorch" ["l"="32.071,29.902"]
"hscspring/Multi-Label-Text-Classification-for-Chinese" ["l"="32.101,29.945"]
"allenai/longformer" ["l"="29.772,32.437"]
"thunlp/SelectiveMasking" ["l"="32.151,30.493"]
"facebookresearch/SpanBERT" ["l"="29.738,32.534"]
"THU-KEG/MAVEN-dataset" ["l"="32.625,30.108"]
"AtmaHou/Task-Oriented-Dialogue-Dataset-Survey" ["l"="28.154,28.967"]
"HLTCHKUST/Mem2Seq" ["l"="28.176,29.004"]
"fuzhenxin/Personal-Emotional-Stylized-Dialog" ["l"="28.241,29.112"]
"wyu97/KENLG-Reading" ["l"="21.876,27.371"]
"AlexYangLi/ccks2019_el" ["l"="32.478,30.158"]
"bojone/el-2019" ["l"="32.412,30.168"]
"renjunxiang/ccks2019_el" ["l"="32.438,30.125"]
"laddie132/NLP-Interview" ["l"="32.182,30.012"]
"Vincent131499/NLP-Algorithm-Interview" ["l"="24.415,31.349"]
"zkywsg/Daily-DeepLearning" ["l"="24.357,31.308"]
"DeqianBai/KBQA-study" ["l"="32.486,30.366"]
"WangShengguang/ccks-2020" ["l"="30.158,31.461"]
"wangle1218/QASystemOnMedicalKG" ["l"="32.483,30.377"]
"CLUEbenchmark/KgCLUE" ["l"="32.456,30.351"]
"realcactus/bert" ["l"="32.193,29.934"]
"llcing/BiLSTM-CRF-ChineseNER.pytorch" ["l"="32.423,29.983"]
"jbjorne/TEES" ["l"="32.851,30.046"]
"yifange/event_extraction" ["l"="32.827,30.052"]
"lx865712528/JMEE" ["l"="32.749,30.081"]
"SOUMAJYOTI/Attention_mechanism-event-extraction" ["l"="32.883,30.042"]
"hltcoe/EventMiner" ["l"="32.889,30.028"]
"bojone/dgcnn_for_reading_comprehension" ["l"="32.685,30.019"]
"natureLanguageQing/radam_dgcnn_for_reading_comprehension" ["l"="32.72,29.993"]
"TsinghuaAI/CPM-2-Pretrain" ["l"="32.162,30.515"]
"TsinghuaAI/CPM" ["l"="32.153,30.526"]
"TsinghuaAI/CPM-1-Generate" ["l"="32.186,30.452"]
"TsinghuaAI/CPM-2-Finetune" ["l"="32.172,30.531"]
"CLUEbenchmark/pCLUE" ["l"="27.447,31.302"]
"deepdialog/CPM-LM-TF2" ["l"="32.193,30.532"]
"basketballandlearn/MRC_Competition_Dureader" ["l"="32.474,30.39"]
"zhoujx4/DuReader-Checklist-BASELINE" ["l"="26.159,30.107"]
"unclegem/Sentiment-analysis" ["l"="32.312,30.091"]
"basketballandlearn/Dureader-Bert" ["l"="26.036,30.158"]
"pengming617/bert_classification" ["l"="32.162,29.975"]
"fennuDetudou/tudouNLP" ["l"="32.11,29.927"]
"pengming617/LanguageModel" ["l"="32.189,29.995"]
"pengming617/text_classification" ["l"="32.142,29.884"]
"yinmingjun/TinyBERT" ["l"="32.378,30.052"]
"Chevalier1024/CCF-BDCI-ABSA" ["l"="32.486,30.103"]
"Makaixin/Correlation-between-requirements-and-achievements" ["l"="32.408,30.088"]
"shinezai/QASystemOnFinancialKG" ["l"="32.68,30.339"]
"mengxiaoxu/economic_audit_knowledge_graph" ["l"="32.616,30.294"]
"liuhuanyong/MedicalNamedEntityRecognition" ["l"="32.463,30.313"]
"boat-group/fancy-nlp" ["l"="32.55,30.258"]
"BaberMuyu/2020CCF-NER" ["l"="32.641,30.29"]
"EugenePig/ik-analyzer-solr5" ["l"="31.644,30.204"]
"blueshen/ik-analyzer" ["l"="31.616,30.196"]
"DmitryKey/luke" ["l"="11.077,23.53"]
"zzboy/lucene" ["l"="11.128,23.49"]
"yozhao/IKAnalyzer" ["l"="31.615,30.174"]
"alibaba/taokeeper" ["l"="9.649,21.177"]
"trueto/medbert" ["l"="32.47,30.442"]
"renmada/sentence_bert_chinese" ["l"="32.288,30.463"]
"hellonlp/sentiment_analysis_albert" ["l"="32.126,29.865"]
"hellonlp/classifier_multi_label_denses" ["l"="32.145,29.925"]
"hellonlp/classifier_multi_label_seq2seq_attention" ["l"="32.146,29.91"]
"percent4/keras_bert_multi_label_cls" ["l"="32.135,29.837"]
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" ["l"="32.157,29.919"]
"littletiger0712/text-classification-mutli-label" ["l"="15.209,5.5"]
"Makaixin/similar-sentence-pairs-in-epidemic" ["l"="32.394,30.295"]
"huanghuidmml/cail2019_track2" ["l"="29.582,29.287"]
"gmftbyGMFTBY/OpenDialog" ["l"="32.111,30.548"]
"thu-coai/OPD" ["l"="32.138,30.548"]
"XiaoMi/C3KG" ["l"="-1.09,39.824"]
"qhjqhj00/SIGIR2021-Pchatbot" ["l"="32.13,30.571"]
"thu-coai/Emotional-Support-Conversation" ["l"="-1.059,39.869"]
"BAAI-WuDao/EVA" ["l"="32.137,30.527"]
"scutcyr/CPED" ["l"="-1.119,39.788"]
"kongbinghit/TongYiCiCiLin" ["l"="31.777,30.308"]
"hczheng/Rong360" ["l"="10.837,21.124"]
"dayeren/Kaggle_Competition_Treasure" ["l"="21.507,37.23"]
"PeijiYang/BDCI2019_Financial_Entities" ["l"="32.357,30.109"]
"bettenW/Tencent2019_Finals_Rank1st" ["l"="21.451,37.201"]
"luoda888/HUAWEI-DIGIX-AgeGroup" ["l"="21.408,37.211"]
"finlay-liu/Learn-CV-The-Hard-Way" ["l"="32.319,30.048"]
"chizhu/yiguan_sex_age_predict_1st_solution" ["l"="21.423,37.194"]
"IrvingBei/simple_movie_qa_with_KG" ["l"="32.509,30.33"]
"zhangtao-seu/Jay_KG" ["l"="32.538,30.331"]
"zhangziliang04/kgRobot" ["l"="32.537,30.293"]
"pkuzhangyao/KnowledgeGraph-QA" ["l"="32.564,30.358"]
"hchX009/EventInferringSys" ["l"="32.604,30.191"]
"mattzheng/LtpExtraction" ["l"="32.699,30.181"]
"liuhuanyong/CausalCollocation" ["l"="32.621,30.19"]
"eecrazy/ConstructingNEEG_IJCAI_2018" ["l"="29.834,31.417"]
"liuhuanyong/EventPredictBasedOnEG" ["l"="32.636,30.197"]
"boy56/EGPapers" ["l"="32.624,30.174"]
"fangwater/Medical-named-entity-recognition-for-ccks2017" ["l"="32.584,30.404"]
"baiyyang/medical-entity-recognition" ["l"="32.521,30.392"]
"fordai/CCKS2019-Chinese-Clinical-NER" ["l"="32.501,30.403"]
"lingluodlut/BioNER-Progress" ["l"="28.983,30.52"]
"percent4/knowledge_graph_demo" ["l"="32.534,30.211"]
"taorui-plus/OpenNRE" ["l"="32.617,30.208"]
"speechio/chinese_text_normalization" ["l"="0.475,39.916"]
"kakaobrain/g2pM" ["l"="0.461,39.989"]
"k2-fsa/k2" ["l"="0.525,39.829"]
"GitYCC/g2pW" ["l"="0.396,39.96"]
"Z-yq/TensorflowASR" ["l"="0.574,39.789"]
"xcmyz/speech-synthesis-paper" ["l"="0.38,40.052"]
"truongnmt/multi-task-learning" ["l"="34.729,33.285"]
"DataArk/CBLUE-Baseline" ["l"="32.486,30.405"]
"DataArk/CHIP2021-Task3-Top3" ["l"="32.473,30.408"]
"intersun/PKD-for-BERT-Model-Compression" ["l"="32.258,30.312"]
"qiufengyuyi/bert-of-theseus-tf" ["l"="32.204,30.463"]
"bojone/bert-of-theseus" ["l"="32.185,30.429"]
"suolyer/PyTorch_BERT_SimpleLexicon_NER" ["l"="32.419,30.131"]
"LeePleased/NegSampling-NER" ["l"="32.493,30.145"]
"THU-KEG/CLEVE" ["l"="32.629,30.094"]
"mayubo2333/PAIE" ["l"="32.613,30.083"]
"PlusLabNLP/DEGREE" ["l"="32.634,30.083"]
"JiaweiSheng/CasEE" ["l"="32.65,30.085"]
"RunxinXu/GIT" ["l"="32.625,30.079"]
"RingBDStack/GDAP" ["l"="32.663,30.048"]
"neulab/Text-Summarization-Papers" ["l"="28.328,33.693"]
"yahshibu/nested-ner-tacl2020-transformers" ["l"="30.963,30.668"]
"thunlp/Few-NERD" ["l"="30.912,30.444"]
"neulab/nn4nlp-concepts" ["l"="29.782,32.542"]
"allanj/ner_incomplete_annotation" ["l"="32.49,29.947"]
"ownthink/Semantic" ["l"="27.904,28.951"]
"xuyouqian/casrel_pytorch" ["l"="32.592,30.242"]
"taishan1994/OneRel_chinese" ["l"="32.573,30.218"]
"medcl/elasticsearch-analysis-mmseg" ["l"="9.912,21.818"]
"mlcsdev/mlcsseg" ["l"="31.587,30.192"]
"lambdal/bert" ["l"="31.801,30.4"]
"YC-wind/embedding_study" ["l"="32.319,29.758"]
"abditag2/bert" ["l"="31.773,30.43"]
"Anery/RSAN" ["l"="30.655,30.946"]
"murray-z/multi_label_classification" ["l"="32.161,29.85"]
"TianWuYuJiangHenShou/Multi-label_Text_classification" ["l"="32.166,29.862"]
"Honlan/starwar-visualization" ["l"="24.339,30.945"]
"molamolaxxx/KGView" ["l"="29.127,29.676"]
"IceFlameWorm/NLP_Datasets" ["l"="32.335,30.462"]
"4AI/TDEER" ["l"="32.601,30.28"]
"IrvingBei/chatbot_with_IR" ["l"="32.554,30.366"]
"taishan1994/pytorch_bert_relation_extraction" ["l"="32.542,30.198"]
"taishan1994/chinese_information_extraction" ["l"="32.538,30.19"]
"percent4/Sentiment_Analysis" ["l"="31.896,29.912"]
"lc222/text_classification_AI100" ["l"="31.585,31.705"]
"yxuansu/SimCTG" ["l"="27.658,31.34"]
"HillZhang1999/MuCGEC" ["l"="31.559,28.706"]
"destwang/CTC2021" ["l"="31.519,28.693"]
"Coldog2333/Financial-NLP" ["l"="32.776,30.324"]
"PolyKen/AlphaRenju_Zero" ["l"="32.875,30.348"]
"qq303067814/Reinforcement-learning-in-portfolio-management-" ["l"="32.898,30.352"]
"ShannonAI/glyce" ["l"="32.319,30.167"]
"sinovation/ZEN" ["l"="32.181,30.204"]
"liuwei1206/CCW-NER" ["l"="32.436,30.076"]
"RowitZou/LGN" ["l"="32.435,30.061"]
"adrianjav/rotograd" ["l"="31.286,30.509"]
"facebookresearch/mtrl" ["l"="31.199,30.521"]
"facebookresearch/mtenv" ["l"="31.179,30.535"]
"RchalYang/Soft-Module" ["l"="31.161,30.516"]
"lmzintgraf/varibad" ["l"="25.214,35.778"]
"oscarkey/multitask-learning" ["l"="31.334,30.51"]
"AvivNavon/AuxiLearn" ["l"="31.267,30.502"]
"DannyLee1991/ExtractTriples" ["l"="32.667,30.247"]
"SeanLee97/TripleIE" ["l"="32.617,30.239"]
"mengxiaoxu/entity_relation_extraction" ["l"="32.608,30.269"]
"chapzq77/LTP_Python_Interface" ["l"="32.586,30.273"]
"twjiang/NamedEntity_realtion_extraction" ["l"="32.588,30.258"]
"chentao1999/MedicalRelationExtraction" ["l"="32.538,30.508"]
"FDChongLi/TwoWaysToImproveCSC" ["l"="31.519,28.719"]
"bojone/KgCLUE-bert4keras" ["l"="32.411,30.443"]
"powerycy/Efficient-GlobalPointer" ["l"="32.506,30.283"]
"zhanzecheng/The-Art-Of-Programming-By-July" ["l"="32.103,30.062"]
"scienceasdf/medical-books" ["l"="32.406,30.372"]
"xiaopangxia/TCM-Ancient-Books" ["l"="29.259,28.608"]
"flyyang/medical-news" ["l"="32.438,30.426"]
"gcaxuxi/cluster_2" ["l"="29.293,28.598"]
"pupuk/blog" ["l"="31.699,30.74"]
"wuba/LPA-Detector" ["l"="32.3,30.503"]
"layerism/TensorRT-Inference-Server-Tutorial" ["l"="34.649,35.588"]
"lvze92/DMR" ["l"="22.702,37.115"]
"rohithreddy024/Text-Summarizer-Pytorch" ["l"="28.296,33.632"]
"sohutv/redisearch-docs" ["l"="-24.81,23.136"]
"Apricity001/Chatserver" ["l"="-24.822,23.106"]
"ymcui/LERT" ["l"="26.222,30.222"]
"princeton-nlp/CoFiPruning" ["l"="26.134,35.184"]
"HuangCongQing/AI_competitions" ["l"="31.885,30.195"]
"greathope/CV_Competitions" ["l"="22.056,35.37"]
"heshuting555/NAIC_Person_ReID_DMT" ["l"="33.007,36.954"]
"DLLXW/data-science-competition" ["l"="21.326,37.212"]
"LeeSureman/Batch_Parallel_LatticeLSTM" ["l"="32.44,30.096"]
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" ["l"="32.329,29.853"]
"scofield7419/Hierarchical-BiLSTM-CNN" ["l"="32.332,29.873"]
"foamliu/Machine-Translation-v2" ["l"="32.664,29.91"]
"VectorFist/RNN-NMT" ["l"="32.685,29.912"]
"foamliu/Transformer" ["l"="32.683,29.891"]
"weizhixiaoyi/DouBan-Spider" ["l"="32.565,30.384"]
"FanhuaandLuomu/ParseLawDocuments" ["l"="29.586,29.387"]
"renjunxiang/Competition_CAIL" ["l"="29.609,29.341"]
"hankcs/ID-CNN-CWS" ["l"="32.273,29.868"]
"fudannlp16/CWS_Dict" ["l"="32.103,29.818"]
"ArthurRizar/tensorflow_ernie" ["l"="32.248,30.14"]
"wipen/bert_and_ernie" ["l"="32.244,29.957"]
"TimeBurningFish/FewFC" ["l"="32.668,30.087"]
"yanghang111/DCFEE" ["l"="32.658,30.073"]
"Meelfy/pytorch_pretrained_BERT" ["l"="32.537,30.12"]
"yongbowin/pytorch-pretrained-BERT_annotation" ["l"="32.601,30.05"]
"starcolon/vor-knowledge-graph" ["l"="32.529,30.201"]
"Spico197/DocEE" ["l"="32.622,30.068"]
"cuishiyao96/eegcned" ["l"="32.649,30.1"]
"amir-zeldes/biaffine-ner" ["l"="32.525,30.107"]
"thecharm/boundary-aware-nested-ner" ["l"="30.986,30.655"]
"mgormley/ace-data-prep" ["l"="32.699,30.085"]
"carrie0307/ace2005parser" ["l"="32.691,30.121"]
"smoothnlp/DomainWords" ["l"="32.444,30.224"]
"startprogress/China_stock_announcement" ["l"="5.161,16.845"]
"thunlp/TLNN" ["l"="32.683,30.099"]
"jianliu-ml/EEasMRC" ["l"="32.665,30.064"]
"songyingxin/BERT-pytorch" ["l"="32.024,30.026"]
"Pan-Rongqing/Chinese-Medical-Records-Named-Entity-Recognition" ["l"="32.562,30.398"]
"yangjianxin1/CLIP-Chinese" ["l"="32.097,30.525"]
"425776024/bertsum-chinese" ["l"="32.331,30.417"]
"zhangfazhan/text_analysis_tools" ["l"="32.271,30.521"]
"hankcs/LDA4j" ["l"="30.574,33.82"]
"bwaldvogel/liblinear-java" ["l"="26.7,33.877"]
"HIT-SCIR/ltp4j" ["l"="31.702,30.239"]
"coffee-and-fun/google-profanity-words" ["l"="31.889,30.566"]
"jiangdongguo/ChitChatAssistant" ["l"="30.275,28.137"]
"CLUEbenchmark/ELECTRA" ["l"="32.118,30.056"]
"CLUEbenchmark/PyCLUE" ["l"="32.197,30.49"]
"lhwcv/nCoV_sentence_simi" ["l"="32.443,30.342"]
"chatopera/chatbot.catalog.customer-service" ["l"="32.283,30.442"]
"nlpjoe/2018-CCL-UIIMCS" ["l"="31.955,29.884"]
"wangchuan2008888/daguan-2018-longtext-classify" ["l"="31.901,29.817"]
"baiyyang/medical_ner_crfsuite" ["l"="32.535,30.419"]
"AI-YULU/baike_triples" ["l"="32.594,30.344"]
"WenRichard/KBQA-Exploration" ["l"="32.577,30.348"]
"leefsir/triplet_extraction" ["l"="32.539,30.234"]
"Heavenlinguistics/Chinese-Knowledge-Triples-Extraction" ["l"="32.586,30.316"]
"Cartus/AGGCN_TACRED" ["l"="30.687,30.957"]
"Aureliu/BIU-RPI-Event-Extraction-Project" ["l"="32.74,30.056"]
"AveryLiu/TD-DMN" ["l"="32.716,30.103"]
"evilbear/emr-ner" ["l"="32.489,29.969"]
"JNhua/Chinese_NER_with_Attention" ["l"="32.503,29.96"]
"abisee/pointer-generator" ["l"="28.347,33.62"]
"songlei1994/ccks2018" ["l"="30.175,31.468"]
"1780041410/ccks_baidu_entity_link" ["l"="32.546,30.098"]
"qiufengyuyi/lear_ner_extraction" ["l"="32.589,30.3"]
"WeiHongLee/Awesome-Multi-Task-Learning" ["l"="31.347,30.531"]
"brdav/atrc" ["l"="31.305,30.466"]
"tstandley/taskgrouping" ["l"="31.378,30.534"]
"leodotnet/neural-chinese-address-parsing" ["l"="31.671,30.844"]
"PyUnit/pyunit-address" ["l"="31.66,30.824"]
"zhuyandong/ChineseAddressDict" ["l"="31.693,30.829"]
"xueyouluo/ccks2021-track2-code" ["l"="31.654,30.86"]
"bojone/accum_optimizer_for_keras" ["l"="32.21,29.926"]
"CyberZHG/keras-gradient-accumulation" ["l"="31.268,31.693"]
"tywee/knowledge-graph" ["l"="32.438,30.309"]
"nju-websoft/KnowledgeGraphFusion" ["l"="22.8,38.352"]
"cliuxinxin/TX-WORD2VEC-SMALL" ["l"="31.988,30.098"]
"cliuxinxin/chaotbot_corpus_Chinese" ["l"="31.936,30.071"]
"HuHsinpang/Ontonotes5.0-pretreatment" ["l"="32.503,30.032"]
"mmichazzj/Semantic-Role-Labeling" ["l"="32.515,30.018"]
"dragona/Android_intro" ["l"="32.842,30.468"]
"metabake/mbIntuition" ["l"="32.835,30.452"]
"eugeniosegala/snap-this" ["l"="32.828,30.463"]
"wintercounter/mhy" ["l"="32.862,30.47"]
"kevinmtian/distill-bert" ["l"="32.272,30.158"]
"saurabhkulkarni77/DistillBERT" ["l"="32.197,30.056"]
"SVAIGBA/WMSeg" ["l"="32.038,29.896"]
"percent4/multi-label-classification-4-event-type" ["l"="32.13,29.76"]
"houking-can/PDFConverter" ["l"="32.72,30.152"]
"houking-can/CCKS2019-Task5" ["l"="32.653,30.145"]
"kenshinpg/PytorchNER_zh" ["l"="32.55,30.444"]
"zhedongzheng/finch" ["l"="31.972,30.014"]
"wagamamaz/tensorflow-tutorial" ["l"="23.44,31.298"]
"yaserkl/RLSeq2Seq" ["l"="28.29,33.667"]
"taolei87/sru" ["l"="30.094,32.518"]
"weberrr/PE-LTR" ["l"="31.281,30.57"]
"menelaoskanakis/RCM" ["l"="31.279,30.451"]
"thuml/MTlearn" ["l"="31.281,30.402"]
"sebastianruder/sluice-networks" ["l"="31.306,30.402"]
"wOOL/DMTRL" ["l"="31.286,30.42"]
"d-li14/face-attribute-prediction" ["l"="34.571,33.31"]
"wgchang/PCGrad-pytorch-example" ["l"="31.273,30.523"]
"zkwi/textSummary" ["l"="32.23,30.455"]
"ouprince/text-rank" ["l"="32.174,30.398"]
"wandouduoduo/SunRnn" ["l"="29.004,28.856"]
"renjunxiang/Text_Generate" ["l"="29.002,28.877"]
"imdarkie/Chinese-novel-generation" ["l"="31.784,29.931"]
"kwsy/FictionAnalysis" ["l"="28.982,28.891"]
"jinfagang/Spider12306" ["l"="15.338,4.692"]
"chainer/models" ["l"="31.42,30.505"]
"liuhuanyong/WordSegment" ["l"="32.412,29.995"]
"jmhIcoding/machine_translation" ["l"="32.713,29.895"]
"yeqingzhao/relation-extraction" ["l"="32.572,30.268"]
"yanqiangmiffy/Product-Entity-Recognition" ["l"="32.57,30.255"]
"sunyilgdx/SIFRank" ["l"="28.641,33.485"]
"thunlp/BERT-KPE" ["l"="28.621,33.515"]
"fennuDetudou/BERT_implement" ["l"="31.907,29.79"]
"sanshibayuan/Sohu-2018-4th-place-solution" ["l"="31.935,29.814"]
"brianlan/complex-grad-norm" ["l"="31.394,30.503"]
"lzc1/Relation_extraction" ["l"="32.656,30.306"]
"Machine-Tom/bertsum-chinese-LAI" ["l"="32.352,30.471"]
"PolarisRisingWar/text_summarization_chinese" ["l"="32.344,30.487"]
"nlpyang/BertSum" ["l"="28.37,33.657"]
"china-ai-law-challenge/CAIL2020" ["l"="29.61,29.293"]
"Marilynmontu/ChineseNER-pytorch" ["l"="32.463,30.079"]
"DeShuiYu/nlp_from_dsy" ["l"="32.487,30.087"]
"Htring/BERT-BiLSTM-CRF_PL" ["l"="32.478,30.113"]
"qsyao/cudaBERT" ["l"="32.086,30.452"]
"xxddpac/netdev" ["l"="32.169,30.726"]
"OpenSourceDavy/ChatNote" ["l"="21.751,27.736"]
"ShannonAI/KNN-NER" ["l"="32.485,30.236"]
"hemingkx/WordSeg" ["l"="32.456,30.091"]
"pluto-junzeng/ChineseSquad" ["l"="32.327,30.479"]
"xionghonglin/DoctorGLM" ["l"="27.3,31.413"]
"monologg/R-BERT" ["l"="30.66,30.991"]
"ZhixiuYe/Intra-Bag-and-Inter-Bag-Attentions" ["l"="30.729,30.919"]
"yizhiru/thulac4j" ["l"="31.677,30.182"]
"guitaowufeng/LR-CNN" ["l"="32.495,30.05"]
"allanj/neural-partialCRF" ["l"="32.511,29.92"]
"INK-USC/TriggerNER" ["l"="32.577,29.848"]
"liuyijiang1994/sohu_baseline" ["l"="32.454,30.001"]
"circlePi/knowledge-driven-dialogue-lic2019" ["l"="28.081,29.052"]
"jialin666/EventExtraction" ["l"="32.665,30.158"]
"hendrydong/Chinese-Event-Extraction" ["l"="32.676,30.077"]
"zhangluoyang/cnn-for-auto-event-extract" ["l"="32.745,30.095"]
"Niharikadutta/EventExtractionNLP" ["l"="32.771,30.088"]
"dozycat/CEQA" ["l"="32.564,30.298"]
"fursovia/self-adj-dice" ["l"="32.574,30.169"]
"zjunlp/DocED" ["l"="32.644,30.073"]
"jiesutd/SubwordEncoding-CWS" ["l"="32.047,29.81"]
"jcyk/CWS" ["l"="32.051,29.787"]
"SUTDNLP/LibN3L" ["l"="31.873,29.874"]
"v-mipeng/LexiconNER" ["l"="30.912,30.544"]
"luhua-rain/MRC_Competition_Dureader" ["l"="32.59,30.33"]
"HarderThenHarder/transformers_tasks" ["l"="27.395,31.271"]
"DouYishun/KB-QA" ["l"="30.237,31.48"]
"shaoxiongji/awesome-knowledge-graph" ["l"="22.959,38.435"]
"gaoisbest/NLP-Projects" ["l"="29.697,32.811"]
"liuluyeah/Pytorch-Multi-Task-Multi-class-Classification" ["l"="31.38,30.408"]
"cinastanbean/Pytorch-Multi-Task-Multi-class-Classification" ["l"="31.358,30.404"]
"yangjianxin1/OFA-Chinese" ["l"="32.07,30.578"]
"yangjianxin1/ClipCap-Chinese" ["l"="31.968,34.68"]
"sgrvinod/Deep-Tutorials-for-PyTorch" ["l"="31.445,34.584"]
"epwalsh/pytorch-crf" ["l"="32.483,29.87"]
"Mamba413/abess" ["l"="33.148,30.42"]
"Louis-udm/NER-BERT-CRF" ["l"="32.486,29.916"]
"xyjigsaw/COVID19-KBQA-DEMO" ["l"="14.775,-31.889"]
"keyue123/poemKBQA" ["l"="30.236,31.435"]
"tricktreat/piqn" ["l"="32.641,30.176"]
"latorrefabian/topmine" ["l"="32.355,29.841"]
"bojone/CPM_LM_bert4keras" ["l"="32.222,30.515"]
"gkiril/oie-resources" ["l"="25.615,31.034"]
"cliang1453/BOND" ["l"="30.932,30.524"]
"LiyuanLucasLiu/LD-Net" ["l"="32.469,29.853"]
"yuzhimanhua/Multi-BioNER" ["l"="28.967,30.519"]
"fxy96/Stock-Selection-a-Framework" ["l"="32.955,30.369"]
"fate233/toutiao-multilevel-text-classfication-dataset" ["l"="32.68,30.166"]
"fate233/toutiao-text-classfication-dataset" ["l"="32.628,30.158"]
"contr4l/SimilarCharacter" ["l"="31.516,28.793"]
"algoflow19/SMedBERT" ["l"="32.51,30.452"]
"facebookresearch/rlstructures" ["l"="31.144,30.545"]
"facebookresearch/salina" ["l"="25.405,35.649"]
"LiyuanLucasLiu/Torch-Scope" ["l"="32.531,29.76"]
"LiyuanLucasLiu/Fast-Furious-Paper" ["l"="32.495,29.8"]
"sakuranew/BERT-AttributeExtraction" ["l"="32.596,30.007"]
"dvirsamuel/DRAGON" ["l"="31.223,30.572"]
"FudanNLP/CWS_LSTM" ["l"="32.089,29.736"]
"FudanNLP/CWS_GatedRNN" ["l"="32.082,29.7"]
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" ["l"="31.941,29.793"]
"guitaowufeng/TPANN" ["l"="31.932,29.749"]
"FudanNLP/fudan_mtl_reviews" ["l"="31.925,29.766"]
"yanshao9798/tagger" ["l"="31.908,29.744"]
"bishanyang/EventEntityExtractor" ["l"="32.775,30.07"]
"ThanhChinhBK/event_detector" ["l"="32.728,30.096"]
"231sm/Low_Resource_KBP" ["l"="32.684,30.059"]
"SL-Stone/ERE-20210518" ["l"="32.61,30.164"]
"UKPLab/pytorch-bertflow" ["l"="32.246,30.444"]
"sfzhou5678/PolyEncoder" ["l"="25.979,29.214"]
"taishan1994/pytorch_GlobalPointer_triple_extraction" ["l"="32.586,30.208"]
"liushaoweihua/keras-bert-ner" ["l"="31.392,31.701"]
"jannson/wordmaker" ["l"="31.834,30.026"]
"avplayer/wordmaker" ["l"="31.833,30.012"]
"fxsjy/finalseg" ["l"="26.737,34.051"]
"kyzhouhzau/CCKS-2018-NER" ["l"="32.609,30.458"]
"phychaos/transformer_crf" ["l"="32.581,30.428"]
"luyaojie/delta-learning-for-ed" ["l"="32.762,30.102"]
"bojone/Pattern-Exploiting-Training" ["l"="32.395,30.433"]
"bojone/P-tuning" ["l"="32.404,30.457"]
"THUDM/P-tuning" ["l"="27.641,31.286"]
"rrmenon10/ADAPET" ["l"="27.736,31.343"]
"sunyilgdx/NSP-BERT" ["l"="32.388,30.447"]
"acl2017submission/event-data" ["l"="32.743,30.115"]
"wilburOne/ZeroShotEvent" ["l"="32.724,30.117"]
"JoeZhouWenxuan/Self-regulation-Employing-a-Generative-Adversarial-Network-to-Improve-Event-Detection" ["l"="32.716,30.074"]
"hunterhector/EvmEval" ["l"="32.78,30.114"]
"zhangziliang04/OpendialEx" ["l"="32.624,30.338"]
"JustFollowUs/Computer-Graphics" ["l"="31.745,29.974"]
"zqhZY/rasa_chatbot" ["l"="32.142,29.959"]
"fateleak/dgk_lost_conv" ["l"="30.468,28.068"]
"jiesutd/SUTDAnnotator" ["l"="32.142,29.939"]
"PKULCWM/PKUSUMSUM" ["l"="31.353,28.432"]
"JustFollowUs/Computer-Vision" ["l"="31.754,29.995"]
"maopademiao/duee_fin" ["l"="32.85,30.189"]
"GentleZhu/ReMine" ["l"="32.471,29.795"]
"LiyuanLucasLiu/Vanilla_NER" ["l"="32.481,29.808"]
"ARDUJS/Event-Extration" ["l"="32.598,30.074"]
"ll0iecas/BD_event-extraction" ["l"="32.641,30.092"]
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" ["l"="32.503,30.068"]
"huwenxianglyy/bert-use-demo" ["l"="32.101,29.886"]
"bigboNed3/chinese_ulmfit" ["l"="15.225,5.426"]
"liuhuanyong/EventMonitor" ["l"="32.394,29.905"]
"DengYangyong/LDA_gensim" ["l"="32.426,29.866"]
"databinQ/paipaidai_comp" ["l"="32.174,29.818"]
"daniellibin/nCoV-2019-sentence-similarity" ["l"="32.38,30.348"]
"lsq357/rank6" ["l"="32.407,30.404"]
"EOA-AILab/Seg_Pos" ["l"="32.38,30.095"]
"atnlp/torchtext-summary" ["l"="29.591,32.35"]
"zhangkai-ai/build-kg-from-scratch" ["l"="32.633,30.407"]
"JxustLiao/Natural-Language-Processing" ["l"="32.592,30.385"]
"shijiebei2009/CEEC-Corpus" ["l"="32.531,30.072"]
"BangLiu/StoryForest" ["l"="32.273,29.896"]
"chongyangtao/MRFN" ["l"="28.059,29.106"]
"evilbear/mgw-ner" ["l"="32.541,29.933"]
"XingyanLee/Chinese-NER-" ["l"="32.521,29.946"]
"liuyukid/transformers-ner" ["l"="32.542,30.014"]
"DoclerLabs/Protip" ["l"="32.957,30.542"]
"wintercounter/ccss" ["l"="32.91,30.505"]
"zhpmatrix/tianchi-ruijin" ["l"="32.669,30.225"]
"ZhengZixiang/tianchi_ruijin_knowledge_graph" ["l"="32.76,30.202"]
"SmallVagetable/opinionExtraction" ["l"="32.757,30.176"]
"wodejiafeiyu/ccks2021-track3-top1" ["l"="31.634,30.879"]
"xueyouluo/Biaffine-BERT-NER" ["l"="31.656,30.884"]
"xv44586/toolkit4nlp" ["l"="32.36,30.339"]
"chenjiashuo123/CCF_2020_BEIKE" ["l"="32.402,30.391"]
"digix2020/digix2020_ctr_rank1" ["l"="21.316,37.179"]
"oleg-yaroshevskiy/quest_qa_labeling" ["l"="32.387,30.365"]
"LogicJake/competition_baselines" ["l"="21.318,37.237"]
"liucongg/2021-GAIIC-Task3-Share" ["l"="32.458,30.377"]
"chizhu/tianchi-gaic-track3-share" ["l"="32.447,30.383"]
"yueshutong/Doctor" ["l"="32.609,30.373"]
"yanshao9798/segmenter" ["l"="31.888,29.711"]
"SVAIGBA/TwASP" ["l"="32.011,29.861"]
"tyistyler/Bert-Chinese-NER" ["l"="32.02,29.852"]
"SVAIGBA/paper_list" ["l"="32.003,29.841"]
"CCChenhao997/House-BEKE" ["l"="32.427,30.429"]
"vlarine/transformers-ru" ["l"="-9.288,20.335"]
"garlicdevs/Fruit-API" ["l"="32.85,30.453"]
"FoksWang/FWPlayer" ["l"="25.739,37.053"]
"noisemix/noisemix" ["l"="31.961,30.372"]
"may-/cnn-re-tf" ["l"="30.799,30.884"]
"scikit-multilearn/scikit-multilearn" ["l"="25.511,33.906"]
"davidsbatista/text-classification" ["l"="31.905,29.931"]
"pangwong/pytorch-multi-label-classifier" ["l"="33.674,36.458"]
"BartyzalRadek/Multi-label-Inception-net" ["l"="33.652,36.44"]
"aker218/Baidu-2020-Language-and-Intelligent-Technology-Competition-Relation-Extraction-rank15" ["l"="32.707,30.137"]
"julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack" ["l"="32.229,30.374"]
"hallochen/Adversarial-Attack" ["l"="32.236,30.426"]
"activemodest/DIAC" ["l"="32.221,30.396"]
"LiangsLi/ChineseHomophones" ["l"="32.224,30.383"]
"cjymz886/text_bert_cnn" ["l"="31.925,29.916"]
"SuMeng123/text_bert_cnn_rnn" ["l"="31.881,29.898"]
"yajian/bert" ["l"="32.042,29.861"]
"wintercounter/use-breakpoint" ["l"="32.894,30.493"]
"sultan99/holycow" ["l"="32.927,30.488"]
"magicdict/FDDC" ["l"="32.873,30.118"]
"dmjvictory/fddc-extraction-release" ["l"="32.883,30.11"]
"YankeeMarco/aliyun-FDDC-2018-Financial-Challenge-" ["l"="32.889,30.123"]
"mrgjbd/fddc02" ["l"="32.878,30.129"]
"Alexzsh/FDDC" ["l"="32.903,30.113"]
"Brook-Lan/fddc02_intro" ["l"="32.839,30.122"]
"Cheneng/DPCNN" ["l"="31.772,31.495"]
"xyionwu/ccks-2020-finance-transfer-ee-baseline" ["l"="32.661,30.121"]
"Xiefan-Guo/CCKS2019_subject_extraction" ["l"="32.64,30.105"]
"hy-struggle/ccks-ee-subject" ["l"="32.688,30.137"]
"CN-COTER/event_extract" ["l"="32.671,30.146"]
"idorce/sentiment-analysis-ccf-bdci" ["l"="31.975,29.889"]
"312shan/Subject-and-Sentiment-Analysis" ["l"="31.948,29.828"]
"microbun/elasticsearch-thulac-plugin" ["l"="10.006,21.882"]
"thunlp/THUCTC" ["l"="31.314,28.374"]
"robinniesert/kaggle-google-quest" ["l"="32.432,30.44"]
"nyanp/nyaggle" ["l"="25.691,31.94"]
"bestfitting/kaggle" ["l"="25.743,31.963"]
"k-fujikawa/Kaggle-Quora-Insincere-Questions-Classification" ["l"="32.431,30.453"]
"jionie/Google-Quest-Answer" ["l"="32.404,30.417"]
"pudae/kaggle-understanding-clouds" ["l"="29.557,35.936"]
"hannahawalsh/ESG_AI" ["l"="32.873,30.291"]
"edgetrader/esg-nlp" ["l"="32.903,30.293"]
"INK-USC/AlpacaTag" ["l"="32.622,29.802"]
"qrfaction/ruijin-kg-SuperGUTScode" ["l"="32.771,30.223"]
"ysc/rank" ["l"="31.602,30.303"]
"czhang99/SynonymNet" ["l"="32.198,30.432"]
"FrankSLB/FDU-NLP-Chinese-Event-Extraction" ["l"="32.719,30.05"]
"ahsi/Multilingual_Event_Extraction" ["l"="32.723,30.037"]
"jcyk/greedyCWS" ["l"="32.074,29.774"]
"SUTDNLP/NNTransitionSegmentor" ["l"="32.059,29.756"]
"zhouh/WCC-Segmentation" ["l"="32.05,29.76"]
"hankcs/sub-character-cws" ["l"="32.17,29.8"]
"PPshrimpGo/BDCI2018-ChinauUicom-1st-solution" ["l"="21.547,37.231"]
"xmshi-trio/MSL" ["l"="32.505,30.541"]
"nlpir2020/MIE-ACL-2020" ["l"="32.49,30.536"]
"fantasySE/Dialogue-System-for-Automatic-Diagnosis" ["l"="32.518,30.555"]
"nnbay/MeicalChatbot-HRL" ["l"="32.522,30.534"]
"dkpro/dkpro-cassis" ["l"="32.435,29.801"]
"inception-project/inception-external-recommender" ["l"="32.42,29.815"]
"inception-project/external-recommender-spacy" ["l"="32.43,29.828"]
"dkpro/dkpro-core" ["l"="30.328,31.646"]
"TEIC/CETEIcean" ["l"="11.012,-34.672"]
"JavierLuna/pycaprio" ["l"="32.419,29.843"]
"allenai/pawls" ["l"="29.345,32.469"]
"SUTDNLP/NNNamedEntity" ["l"="31.836,29.85"]
"shibing624/companynameparser" ["l"="31.916,30.466"]
"lgnlgn/ansj4solr" ["l"="31.547,30.189"]
"wshuyi/demo-multi-label-classification-bert" ["l"="32.046,29.882"]
"didichuxing/athena" ["l"="31.79,30.05"]
"SCHENLIU/longformer-chinese" ["l"="31.957,30.604"]
"neesetifa/bert_classification" ["l"="31.98,30.581"]
"helmy-elrais/RoBERT_Recurrence_over_BERT" ["l"="31.984,30.607"]
"percent4/ALBERT_4_Time_Recognition" ["l"="32.551,29.961"]
"ansjsun/ansj_seg" ["l"="8.755,20.083"]
"ling0322/webdict" ["l"="8.688,20.106"]
"yanxionglu/text_pdf" ["l"="31.789,29.964"]
"YeDeming/THUTag" ["l"="31.288,28.383"]
"piskvorky/gensim" ["l"="27.115,34.08"]
"Flowerowl/Big-Data-Resources" ["l"="11.229,23.948"]
"klb3713/sentence2vec" ["l"="30.071,32.829"]
"PhantomGrapes/MultiDigraphNER" ["l"="32.485,30.036"]
"chenghuige/pikachu2" ["l"="21.305,37.206"]
"BetterBench/2021-Daguan-Cup" ["l"="32.473,30.353"]
"zake7749/CIKM-AnalytiCup-2018" ["l"="32.192,29.758"]
"crownpku/rasa_nlu_chi" ["l"="32.178,29.839"]
"jacoxu/STC2" ["l"="32.299,30.646"]
"zqhZY/short_text_cnn_cluster" ["l"="32.293,30.69"]
"jacoxu/StackOverflow" ["l"="32.315,30.688"]
"dhwajraj/fasttext-1" ["l"="31.776,30.258"]
"wind91725/gpt2-ml-finetune-" ["l"="29.382,28.877"]
"shelleyHLX/cail" ["l"="29.599,29.336"]
"oklaM/AI-law" ["l"="32.51,30.057"]
"interrogator/tucan" ["l"="32.622,29.433"]
"Gxzzz/BiLSTM-CRF" ["l"="32.444,29.928"]
"ownthink/evaluation" ["l"="32.007,29.759"]
"CLUEbenchmark/LightLM" ["l"="32.078,29.969"]
"CLUEbenchmark/DistilBert" ["l"="32.078,29.952"]
"policeme/roberta-wwm-base-distill" ["l"="32.162,30.011"]
"jantrienes/nereval" ["l"="32.549,29.838"]
"ivyleavedtoadflax/nervaluate" ["l"="32.542,29.859"]
"zhangxiaolei0123/NERuselocal" ["l"="32.64,30.48"]
"yanqiangmiffy/shence-cup" ["l"="32.02,30.308"]
"malllabiisc/DiPS" ["l"="29.655,32.12"]
"proycon/flat" ["l"="32.478,29.692"]
"jonorthwash/ud-annotatrix" ["l"="27.415,32.581"]
"Aureliu/JavaDMCNN" ["l"="32.782,30.036"]
"aker218/xf_event_extraction_2020Top1" ["l"="32.696,30.069"]
"HangYang-NLP/DE-PPN" ["l"="32.648,30.054"]
"TencentYoutuResearch/EventExtraction-RAAT" ["l"="32.657,30.026"]
"PKUnlp-icler/TSAR" ["l"="32.652,30.039"]
"tongmeihan1995/DocEE" ["l"="32.672,30.035"]
"BangLiu/GIANT" ["l"="32.321,29.83"]
"alibaba-research/ConceptGraph" ["l"="32.335,29.809"]
"ChenglongChen/tensorflow-ASP-MTL" ["l"="31.539,30.346"]
"ccsasuke/man" ["l"="31.516,30.342"]
"rover9632/atec_nlp" ["l"="32.194,29.815"]
"jcjview/atec_nlp_sim" ["l"="32.197,29.826"]
"JinYang88/atec_nlp_sim" ["l"="32.208,29.816"]
"VICO-UoE/MTPSL" ["l"="31.342,30.561"]
"Jianwei-Lv/chinese-event-extraction-pytorch" ["l"="32.753,30.04"]
"chenking2020/event_extract_master" ["l"="32.795,30.015"]
"nlpaueb/edgar-crawler" ["l"="32.775,30.265"]
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" ["l"="32.748,30.28"]
"mukut03/ESG-BERT" ["l"="32.812,30.284"]
"MS20190155/Measuring-Corporate-Culture-Using-Machine-Learning" ["l"="32.775,30.284"]
"GeminiLn/EarningsCall_Dataset" ["l"="32.759,30.294"]
"zhaozhixin/DMCNN" ["l"="32.733,30.08"]
"nishiwen1214/GLUE-bert4keras" ["l"="32.42,30.548"]
"WeiChengTseng/WeiChengTseng.github.io" ["l"="31.24,30.474"]
"WeiChengTseng/policy_transfer" ["l"="31.256,30.472"]
"ValkyriaLenneth/Longformer_ZH" ["l"="31.937,30.631"]
"shangjingbo1226/ESim" ["l"="32.511,29.763"]
"houking-can/BDCI2019-NER" ["l"="32.704,30.158"]
"houking-can/PDFSDK" ["l"="32.692,30.151"]
"zoulala/New_words_find" ["l"="32.034,30.101"]
"qolina/NNED" ["l"="32.795,30.068"]
"jiaqianghuai/tf-lstm-crf-batch" ["l"="32.244,29.817"]
"ncbi-nlp/NCBI_BERT" ["l"="28.996,30.571"]
"nxs5899/Named-Entity-Recognition_DeepLearning-keras" ["l"="32.351,29.787"]
"yumeng5/WeSHClass" ["l"="30.29,30.455"]
"yzhan238/CGExpan" ["l"="32.386,29.828"]
"yzhan238/SeedTopicMine" ["l"="32.39,29.846"]
"zhengyima/DHAP" ["l"="32.114,30.595"]
"xinyadu/grit_doc_event_entity" ["l"="32.707,30.122"]
"yangyining/IKAnalyzer" ["l"="31.572,30.162"]
"snowisch/FDDC2018Topic2" ["l"="32.909,30.1"]
"nilboy/reports" ["l"="32.462,30.399"]
"yanqiuxia/BERT-PreTrain" ["l"="32.257,29.906"]
"ha-lins/GEML-MDG" ["l"="32.494,30.56"]
"heraclex12/VLSP2020-Fake-News-Detection" ["l"="31.971,30.634"]
"cdjasonj/Joint-Entity-and-Relation-Extraction" ["l"="32.594,30.157"]
"yanwii/Chinese-RE" ["l"="32.685,30.318"]
"LopezGG/Sequence-Labelling" ["l"="32.257,29.837"]
"ZhuiyiTechnology/AutoIE" ["l"="32.546,29.905"]
"jackielinxiao/PE-LTR" ["l"="31.267,30.587"]
"Babelscape/ner4el" ["l"="32.739,30.318"]
"nicola-decao/efficient-autoregressive-EL" ["l"="25.661,29.212"]
"sultan99/stylin" ["l"="32.97,30.501"]
"theguriev/redux-things" ["l"="32.95,30.496"]
"nooralahzadeh/DSNER-pytorch" ["l"="32.415,29.898"]
"kyang888/unilm" ["l"="32.257,30.555"]
"world2vec/atec_2018_nlp" ["l"="32.182,29.858"]
"taoyafan/jinnan" ["l"="31.821,29.752"]
"onion1003/tianchi_jinnan" ["l"="31.805,29.735"]
"zyh961117/CCKS-2017-task2" ["l"="32.625,30.435"]
"WeiChengTseng/CLA-NeRF" ["l"="31.212,30.473"]
"Karl8/Relation-Extraction-2020" ["l"="32.762,30.131"]
"BaberMuyu/relation-extraction" ["l"="32.766,30.144"]
"Wwenhui-03/2020_baidu_RE" ["l"="32.747,30.14"]
"powerycy/Efficient-GlobalPointer-rel" ["l"="32.57,30.309"]
"MengChen5770/FDDC_2" ["l"="32.902,30.136"]
"qq303067814/DQLearning-Toolbox" ["l"="32.919,30.36"]
"FSudong/eventExtractionCNN" ["l"="32.808,30.084"]
"CLUEbenchmark/KgCLUEbench" ["l"="32.436,30.493"]
"qili5/TruePIE" ["l"="32.411,29.743"]
"nh85905703/demo" ["l"="32.074,29.756"]
"msw1535540/fddc-extraction-release" ["l"="32.914,30.125"]
}