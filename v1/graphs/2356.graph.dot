digraph G {
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/crnn_plate_recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/yolov7_plate"
"we0091234/Chinese_license_plate_detection_recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/Car_recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/Chinese_license_plate_detection_recognition" -> "Big-Bear3/mushroom-di" ["e"=1]
"we0091234/Chinese_license_plate_detection_recognition" -> "yxgong0/CRPD"
"we0091234/Chinese_license_plate_detection_recognition" -> "zeusees/License-Plate-Detector"
"we0091234/Chinese_license_plate_detection_recognition" -> "lhp96/mini-vue" ["e"=1]
"we0091234/Chinese_license_plate_detection_recognition" -> "sirius-ai/LPRNet_Pytorch"
"liuruoze/EasyPR" -> "zeusees/HyperLPR"
"liuruoze/EasyPR" -> "openalpr/openalpr"
"liuruoze/EasyPR" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"liuruoze/EasyPR" -> "detectRecog/CCPD"
"liuruoze/EasyPR" -> "seetaface/SeetaFaceEngine" ["e"=1]
"liuruoze/EasyPR" -> "linuxxx/EasyPR_Android"
"liuruoze/EasyPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"liuruoze/EasyPR" -> "ShiqiYu/libfacedetection" ["e"=1]
"liuruoze/EasyPR" -> "szad670401/HyperLPR"
"liuruoze/EasyPR" -> "fan-wenjie/EasyPR-Java"
"liuruoze/EasyPR" -> "weiliu89/caffe" ["e"=1]
"liuruoze/EasyPR" -> "Tencent/ncnn" ["e"=1]
"liuruoze/EasyPR" -> "EasyDarwin/EasyDarwin" ["e"=1]
"liuruoze/EasyPR" -> "sergiomsilva/alpr-unconstrained"
"liuruoze/EasyPR" -> "rbgirshick/py-faster-rcnn" ["e"=1]
"jinmu333/python_PlateRecogntion" -> "yinghualuowu/Python_VLPR"
"jinmu333/python_PlateRecogntion" -> "simple2048/CarPlateIdentity"
"jinmu333/python_PlateRecogntion" -> "DataXujing/vehicle-license-plate-recognition"
"jinmu333/python_PlateRecogntion" -> "casuallyName/License_plate_recognition"
"jinmu333/python_PlateRecogntion" -> "hyzhangyong/platenumber"
"jinmu333/python_PlateRecogntion" -> "wzh191920/License-Plate-Recognition"
"jinmu333/python_PlateRecogntion" -> "chsobin/LicensePlateRecognition"
"jinmu333/python_PlateRecogntion" -> "zeusees/HyperLPR-Training"
"jinmu333/python_PlateRecogntion" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"jinmu333/python_PlateRecogntion" -> "jinmu333/python_car"
"jinmu333/python_PlateRecogntion" -> "jmhIcoding/car-board-reg"
"jinmu333/python_PlateRecogntion" -> "airxiechao/simple-car-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "DataXujing/vehicle-license-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "yinghualuowu/Python_VLPR"
"wzh191920/License-Plate-Recognition" -> "simple2048/CarPlateIdentity"
"wzh191920/License-Plate-Recognition" -> "casuallyName/License_plate_recognition"
"wzh191920/License-Plate-Recognition" -> "detectRecog/CCPD"
"wzh191920/License-Plate-Recognition" -> "jinmu333/python_PlateRecogntion"
"wzh191920/License-Plate-Recognition" -> "airxiechao/simple-car-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "zeusees/HyperLPR"
"wzh191920/License-Plate-Recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"wzh191920/License-Plate-Recognition" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"wzh191920/License-Plate-Recognition" -> "sirius-ai/LPRNet_Pytorch"
"wzh191920/License-Plate-Recognition" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"wzh191920/License-Plate-Recognition" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"wzh191920/License-Plate-Recognition" -> "zeusees/License-Plate-Detector"
"yinghualuowu/Python_VLPR" -> "DataXujing/vehicle-license-plate-recognition"
"yinghualuowu/Python_VLPR" -> "wzh191920/License-Plate-Recognition"
"yinghualuowu/Python_VLPR" -> "simple2048/CarPlateIdentity"
"yinghualuowu/Python_VLPR" -> "jinmu333/python_PlateRecogntion"
"yinghualuowu/Python_VLPR" -> "hyzhangyong/platenumber"
"yinghualuowu/Python_VLPR" -> "Yaoshicn/decaptcha"
"yinghualuowu/Python_VLPR" -> "casuallyName/License_plate_recognition"
"yinghualuowu/Python_VLPR" -> "xg-zhang/faceRegister"
"yinghualuowu/Python_VLPR" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"yinghualuowu/Python_VLPR" -> "Corvey/Exam-Online" ["e"=1]
"yinghualuowu/Python_VLPR" -> "zeusees/HyperLPR-Training"
"yinghualuowu/Python_VLPR" -> "jmhIcoding/car-board-reg"
"yinghualuowu/Python_VLPR" -> "Superbsco/weibo-analysis-system" ["e"=1]
"yinghualuowu/Python_VLPR" -> "airxiechao/simple-car-plate-recognition"
"yinghualuowu/Python_VLPR" -> "veraposeidon/Insect_Identification"
"zeusees/HyperLPR" -> "liuruoze/EasyPR"
"zeusees/HyperLPR" -> "detectRecog/CCPD"
"zeusees/HyperLPR" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zeusees/HyperLPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/HyperLPR" -> "sergiomsilva/alpr-unconstrained"
"zeusees/HyperLPR" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"zeusees/HyperLPR" -> "lqian/light-LPR"
"zeusees/HyperLPR" -> "openalpr/openalpr"
"zeusees/HyperLPR" -> "xiaofengShi/CHINESE-OCR" ["e"=1]
"zeusees/HyperLPR" -> "eragonruan/text-detection-ctpn" ["e"=1]
"zeusees/HyperLPR" -> "YCG09/chinese_ocr" ["e"=1]
"zeusees/HyperLPR" -> "senlinuc/caffe_ocr" ["e"=1]
"zeusees/HyperLPR" -> "chineseocr/chineseocr" ["e"=1]
"zeusees/HyperLPR" -> "zeusees/HyperLandmark" ["e"=1]
"zeusees/HyperLPR" -> "zeusees/HyperLPR-Training"
"detectRecog/CCPD" -> "zeusees/HyperLPR"
"detectRecog/CCPD" -> "sergiomsilva/alpr-unconstrained"
"detectRecog/CCPD" -> "sirius-ai/LPRNet_Pytorch"
"detectRecog/CCPD" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"detectRecog/CCPD" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"detectRecog/CCPD" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"detectRecog/CCPD" -> "szad670401/HyperLPR"
"detectRecog/CCPD" -> "zeusees/License-Plate-Detector"
"detectRecog/CCPD" -> "lqian/light-LPR"
"detectRecog/CCPD" -> "xiangweizeng/mobile-lpr"
"detectRecog/CCPD" -> "lyl8213/Plate_Recognition-LPRnet"
"detectRecog/CCPD" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"detectRecog/CCPD" -> "liuruoze/EasyPR"
"detectRecog/CCPD" -> "biubug6/Pytorch_Retinaface" ["e"=1]
"detectRecog/CCPD" -> "meijieru/crnn.pytorch" ["e"=1]
"DataXujing/vehicle-license-plate-recognition" -> "wzh191920/License-Plate-Recognition"
"DataXujing/vehicle-license-plate-recognition" -> "simple2048/CarPlateIdentity"
"DataXujing/vehicle-license-plate-recognition" -> "yinghualuowu/Python_VLPR"
"DataXujing/vehicle-license-plate-recognition" -> "casuallyName/License_plate_recognition"
"DataXujing/vehicle-license-plate-recognition" -> "jinmu333/python_PlateRecogntion"
"DataXujing/vehicle-license-plate-recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"DataXujing/vehicle-license-plate-recognition" -> "detectRecog/CCPD"
"DataXujing/vehicle-license-plate-recognition" -> "zeusees/License-Plate-Detector"
"DataXujing/vehicle-license-plate-recognition" -> "szad670401/HyperLPR"
"DataXujing/vehicle-license-plate-recognition" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"DataXujing/vehicle-license-plate-recognition" -> "derek285/generateCarPlate"
"DataXujing/vehicle-license-plate-recognition" -> "sirius-ai/LPRNet_Pytorch"
"DataXujing/vehicle-license-plate-recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"DataXujing/vehicle-license-plate-recognition" -> "hyzhangyong/platenumber"
"DataXujing/vehicle-license-plate-recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "armaab/hyperlpr-train"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "millionsofluo/FakeLPR"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "zeusees/HyperLPR-Training"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "deeplearningshare/multi-line-plate-recognition"
"Nenger/chinese_licence_plate_generator" -> "millionsofluo/FakeLPR"
"derek285/generateCarPlate" -> "zheng-yuwei/license-plate-generator"
"lqian/light-LPR" -> "xiangweizeng/mobile-lpr"
"lqian/light-LPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"lqian/light-LPR" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"lqian/light-LPR" -> "detectRecog/CCPD"
"lqian/light-LPR" -> "sirius-ai/LPRNet_Pytorch"
"lqian/light-LPR" -> "zeusees/HyperVID"
"lqian/light-LPR" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"lqian/light-LPR" -> "YonghaoHe/A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"lqian/light-LPR" -> "zeusees/License-Plate-Detector"
"lqian/light-LPR" -> "zeusees/HyperLPR"
"lqian/light-LPR" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"lqian/light-LPR" -> "zheng-yuwei/license-plate-generator"
"lqian/light-LPR" -> "olojuwin/facerecognize-for-mobile-phone" ["e"=1]
"lqian/light-LPR" -> "bleakie/MaskInsightface" ["e"=1]
"lqian/light-LPR" -> "hanson-young/nniefacelib" ["e"=1]
"lyl8213/Plate_Recognition-LPRnet" -> "sirius-ai/LPRNet_Pytorch"
"lyl8213/Plate_Recognition-LPRnet" -> "deeplearningshare/multi-line-plate-recognition"
"lyl8213/Plate_Recognition-LPRnet" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"lyl8213/Plate_Recognition-LPRnet" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"lyl8213/Plate_Recognition-LPRnet" -> "detectRecog/CCPD"
"lyl8213/Plate_Recognition-LPRnet" -> "sergiomsilva/alpr-unconstrained"
"lyl8213/Plate_Recognition-LPRnet" -> "armaab/hyperlpr-train"
"lyl8213/Plate_Recognition-LPRnet" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"lyl8213/Plate_Recognition-LPRnet" -> "ufownl/fake_chs_lp"
"lyl8213/Plate_Recognition-LPRnet" -> "gm19900510/Pytorch_Retina_License_Plate"
"matthewearl/deep-anpr" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"matthewearl/deep-anpr" -> "sergiomsilva/alpr-unconstrained"
"matthewearl/deep-anpr" -> "stevefielding/tensorflow-anpr"
"matthewearl/deep-anpr" -> "openalpr/openalpr"
"matthewearl/deep-anpr" -> "zeusees/HyperLPR"
"matthewearl/deep-anpr" -> "Dharun/Tensorflow-License-Plate-Detection"
"matthewearl/deep-anpr" -> "detectRecog/CCPD"
"matthewearl/deep-anpr" -> "pannous/tensorflow-ocr" ["e"=1]
"matthewearl/deep-anpr" -> "ankush-me/SynthText" ["e"=1]
"matthewearl/deep-anpr" -> "bgshih/crnn" ["e"=1]
"matthewearl/deep-anpr" -> "Russell91/TensorBox" ["e"=1]
"matthewearl/deep-anpr" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"matthewearl/deep-anpr" -> "da03/Attention-OCR" ["e"=1]
"matthewearl/deep-anpr" -> "liuruoze/EasyPR"
"matthewearl/deep-anpr" -> "chongyangtao/Awesome-Scene-Text-Recognition" ["e"=1]
"xuexingyu24/License_Plate_Detection_Pytorch" -> "sirius-ai/LPRNet_Pytorch"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "detectRecog/CCPD"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "xiangweizeng/mobile-lpr"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "lqian/light-LPR"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zeusees/License-Plate-Detector"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "lyl8213/Plate_Recognition-LPRnet"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "gm19900510/Pytorch_Retina_License_Plate"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "sergiomsilva/alpr-unconstrained"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "ufownl/fake_chs_lp"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "ufownl/alpr_utils"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zheng-yuwei/license-plate-generator"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "chenjun2hao/CLPR.pytorch"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "CaptainEven/Vehicle-Car-detection-and-multilabel-classification"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "zeusees/HyperVID"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "zeusees/HyperLPR"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "lqian/light-LPR"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "detectRecog/CCPD"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "Nenger/chinese_licence_plate_generator"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "xiangweizeng/mobile-lpr"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "hyh21521038/ssd-plate_detection"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "armaab/hyperlpr-train"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "zeusees/HyperLPR-Training"
"zeusees/Mobilenet-SSD-License-Plate-Detection" -> "sergiomsilva/alpr-unconstrained"
"zheng-yuwei/license-plate-generator" -> "Pengfei8324/chinese_license_plate_generator"
"zheng-yuwei/license-plate-generator" -> "derek285/generateCarPlate"
"zheng-yuwei/license-plate-generator" -> "gm19900510/Pytorch_Retina_License_Plate"
"zheng-yuwei/license-plate-generator" -> "we0091234/crnn_plate_recognition"
"zheng-yuwei/license-plate-generator" -> "deeplearningshare/multi-line-plate-recognition"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/ParkingOS_local"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/parkingos_cloud_vue_server"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/parkingos_cloud_vue"
"openalpr/openalpr" -> "liuruoze/EasyPR"
"openalpr/openalpr" -> "zeusees/HyperLPR"
"openalpr/openalpr" -> "cmusatyalab/openface" ["e"=1]
"openalpr/openalpr" -> "matthewearl/deep-anpr"
"openalpr/openalpr" -> "sergiomsilva/alpr-unconstrained"
"openalpr/openalpr" -> "tesseract-ocr/tesseract" ["e"=1]
"openalpr/openalpr" -> "detectRecog/CCPD"
"openalpr/openalpr" -> "pjreddie/darknet" ["e"=1]
"openalpr/openalpr" -> "davidsandberg/facenet" ["e"=1]
"openalpr/openalpr" -> "Itseez/opencv" ["e"=1]
"openalpr/openalpr" -> "tzutalin/labelImg" ["e"=1]
"openalpr/openalpr" -> "facebookresearch/Detectron" ["e"=1]
"openalpr/openalpr" -> "ShiqiYu/libfacedetection" ["e"=1]
"openalpr/openalpr" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"openalpr/openalpr" -> "davisking/dlib" ["e"=1]
"ParkingOS/parkingos_cloud_vue" -> "ParkingOS/parkingos_cloud_vue_server"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "rahatzamancse/Traffic-Rules-Violation-Detection"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/DREAM_Blood-Bank-Application-Android"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/Daily_iOS-App"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/DBMS-Traveling_Management_System"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/Intro-to-Tensorflow-for-Deep-Learning-Udacity"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/Turbulent-Traveler__Web-Development-Project"
"anmspro/Traffic-Signal-Violation-Detection-System" -> "anmspro/Smart-Car-Parking-System"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "detectRecog/CCPD"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "sergiomsilva/alpr-unconstrained"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "zeusees/HyperLPR"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "lqian/light-LPR"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "sirius-ai/LPRNet_Pytorch"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "xiangweizeng/mobile-lpr"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "zuoqing1988/ZQCNN" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "YonghaoHe/A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "senlinuc/caffe_ocr" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "dlunion/mtcnn" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "lyl8213/Plate_Recognition-LPRnet"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "biubug6/Face-Detector-1MB-with-landmark" ["e"=1]
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "zeusees/License-Plate-Detector"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "DataXujing/vehicle-license-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "casuallyName/License_plate_recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "derek285/generateCarPlate"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "simple2048/CarPlateIdentity"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "detectRecog/CCPD"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "yinghualuowu/Python_VLPR"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "gm19900510/Pytorch_Retina_License_Plate"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "xiangweizeng/mobile-lpr"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "zheng-yuwei/license-plate-generator"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "airxiechao/simple-car-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "sirius-ai/LPRNet_Pytorch"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "jmhIcoding/car-board-reg"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "ufownl/alpr_utils"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "szad670401/HyperLPR"
"sergiomsilva/alpr-unconstrained" -> "detectRecog/CCPD"
"sergiomsilva/alpr-unconstrained" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"sergiomsilva/alpr-unconstrained" -> "sirius-ai/LPRNet_Pytorch"
"sergiomsilva/alpr-unconstrained" -> "zeusees/HyperLPR"
"sergiomsilva/alpr-unconstrained" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"sergiomsilva/alpr-unconstrained" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"sergiomsilva/alpr-unconstrained" -> "DoubangoTelecom/ultimateALPR-SDK"
"sergiomsilva/alpr-unconstrained" -> "lyl8213/Plate_Recognition-LPRnet"
"sergiomsilva/alpr-unconstrained" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"sergiomsilva/alpr-unconstrained" -> "GuiltyNeuron/ANPR"
"sergiomsilva/alpr-unconstrained" -> "Dharun/Tensorflow-License-Plate-Detection"
"sergiomsilva/alpr-unconstrained" -> "matthewearl/deep-anpr"
"sergiomsilva/alpr-unconstrained" -> "lqian/light-LPR"
"sergiomsilva/alpr-unconstrained" -> "meijieru/crnn.pytorch" ["e"=1]
"sergiomsilva/alpr-unconstrained" -> "quangnhat185/Plate_detect_and_recognize"
"winter2897/Real-time-Auto-License-Plate-Recognition-with-Jetson-Nano" -> "anhbantre/multi_robot_ros2"
"winter2897/Real-time-Auto-License-Plate-Recognition-with-Jetson-Nano" -> "winter2897/pygimbal"
"DoubangoTelecom/ultimateALPR-SDK" -> "sergiomsilva/alpr-unconstrained"
"DoubangoTelecom/ultimateALPR-SDK" -> "parkpow/deep-license-plate-recognition"
"DoubangoTelecom/ultimateALPR-SDK" -> "marcbelmont/deep-license-plate-recognition"
"DoubangoTelecom/ultimateALPR-SDK" -> "DoubangoTelecom/compv"
"DoubangoTelecom/ultimateALPR-SDK" -> "apoorva-dave/LicensePlateDetector"
"DoubangoTelecom/ultimateALPR-SDK" -> "faisalthaheem/open-lpr"
"DoubangoTelecom/ultimateALPR-SDK" -> "Deevoluation/ALPR"
"DoubangoTelecom/ultimateALPR-SDK" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"DoubangoTelecom/ultimateALPR-SDK" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"DoubangoTelecom/ultimateALPR-SDK" -> "winter2897/Real-time-Auto-License-Plate-Recognition-with-Jetson-Nano"
"DoubangoTelecom/ultimateALPR-SDK" -> "sirius-ai/LPRNet_Pytorch"
"DoubangoTelecom/ultimateALPR-SDK" -> "ufownl/alpr_utils"
"DoubangoTelecom/ultimateALPR-SDK" -> "shreyapamecha/Speed-Estimation-of-Vehicles-with-Plate-Detection" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "theAIGuysCode/yolov4-custom-functions" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "DoubangoTelecom/FaceLivenessDetection-SDK"
"mikucy/CS131" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"mikucy/CS131" -> "xuwd11/cs131_hws"
"XiaoRobb/CarTeller" -> "PT123123/Vehicle-recognition-system"
"imistyrain/EasyPR4Android" -> "linuxxx/EasyPR_Android"
"imistyrain/EasyPR4Android" -> "guocheng0606/EasyPRForAndroid"
"StanfordVL/CS131_release" -> "StanfordVL/cs131_notes"
"StanfordVL/CS131_release" -> "mikucy/CS131"
"StanfordVL/CS131_release" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"StanfordVL/CS131_release" -> "veraposeidon/CS131_Assignments"
"StanfordVL/CS131_release" -> "kenjihata/cs231a-notes"
"StanfordVL/CS131_release" -> "zhaoxiongjun/CS131_notes_zh-CN"
"StanfordVL/CS131_release" -> "chizhang529/cs231a"
"StanfordVL/CS131_release" -> "zyxrrr/cs131"
"StanfordVL/CS131_release" -> "yihui-he/computer-vision-tutorial"
"ufownl/fake_chs_lp" -> "ufownl/alpr_utils"
"Yaoshicn/decaptcha" -> "xg-zhang/faceRegister"
"Yaoshicn/decaptcha" -> "yinghualuowu/Python_VLPR"
"Yaoshicn/decaptcha" -> "wbwj/2018-graduation-project"
"Yaoshicn/decaptcha" -> "zhaobenx/Image-stitcher"
"Yaoshicn/decaptcha" -> "skyduy/CNN_keras" ["e"=1]
"Yaoshicn/decaptcha" -> "chauncyzhu/sentimentanalysis" ["e"=1]
"Yaoshicn/decaptcha" -> "jasminecjc/lagou_data_analysis" ["e"=1]
"Yaoshicn/decaptcha" -> "mekarpeles/captcha-decoder" ["e"=1]
"Yaoshicn/decaptcha" -> "lllcho/CAPTCHA-breaking" ["e"=1]
"RobertLucian/cortex-license-plate-reader-client" -> "ThorPham/License-plate-detection"
"RobertLucian/cortex-license-plate-reader-client" -> "RobertLucian/license-plate-dataset"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "zheng-yuwei/license-plate-generator"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/HyperLPR-Training" -> "zeusees/train-detector"
"zeusees/HyperLPR-Training" -> "armaab/hyperlpr-train"
"zeusees/HyperLPR-Training" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"zeusees/HyperLPR-Training" -> "szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression"
"zeusees/HyperLPR-Training" -> "zeusees/HyperVID"
"zeusees/HyperLPR-Training" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zeusees/HyperLPR-Training" -> "hyzhangyong/platenumber"
"zeusees/HyperLabelImg" -> "olojuwin/facerecognize-for-mobile-phone" ["e"=1]
"zeusees/HyperLabelImg" -> "zeusees/HyperVID"
"zeusees/HyperLabelImg" -> "moli232777144/mtcnn_ncnn" ["e"=1]
"zeusees/HyperLabelImg" -> "xiangweizeng/mobile-lpr"
"zeusees/HyperLabelImg" -> "guoqiangqi/PFLD" ["e"=1]
"zeusees/HyperLabelImg" -> "biubug6/Face-Detector-1MB-with-landmark" ["e"=1]
"zeusees/HyperLabelImg" -> "zeusees/HyperFT" ["e"=1]
"zeusees/HyperLabelImg" -> "deepcam-cn/Face-Anti-spoofing.pytorch" ["e"=1]
"zeusees/HyperLabelImg" -> "xiangweizeng/darknet2ncnn" ["e"=1]
"zeusees/HyperVID" -> "CaptainEven/Vehicle-Car-detection-and-multilabel-classification"
"zeusees/HyperVID" -> "xiangweizeng/mobile-lpr"
"zeusees/HyperVID" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"zeusees/HyperVID" -> "HandsomeHans/Face-Tracking-Based-on-OpenTLD-and-RNet" ["e"=1]
"zeusees/HyperVID" -> "deeplearningshare/multi-line-plate-recognition"
"zeusees/HyperVID" -> "zeusees/HyperLPR-Training"
"zeusees/HyperVID" -> "zeusees/License-Plate-Detector"
"zeusees/HyperVID" -> "lqian/light-LPR"
"zeusees/HyperVID" -> "zeusees/HyperLabelImg"
"zeusees/HyperVID" -> "CaptainEven/RepNet-MDNet-VehicleReID" ["e"=1]
"zeusees/HyperVID" -> "gm19900510/Pytorch_Retina_License_Plate"
"zeusees/HyperVID" -> "Charrin/RetinaFace-Cpp" ["e"=1]
"zeusees/HyperVID" -> "PT123123/Vehicle-recognition-system"
"zeusees/HyperVID" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/HyperVID" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "kiloGrand/License-Plate-Recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "sirius-ai/LPRNet_Pytorch"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/crnn_plate_recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/yolov7_plate"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "yxgong0/CRPD"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "CaptainEven/RepNet-MDNet-VehicleReID" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "zeusees/HyperVID"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "knwng/awesome-vehicle-re-identification" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "hyk1996/Person-Attribute-Recognition-MarketDuke" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "zeusees/License-Plate-Detector"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "wangxiao5791509/Pedestrian-Attribute-Recognition-Paper-List" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "xiangweizeng/mobile-lpr"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "gm19900510/Pytorch_Retina_License_Plate"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "detectRecog/CCPD"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "JunshengFu/vehicle-detection" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "layumi/AICIty-reID-2020" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "CaptainEven/FairMOTVehicle" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "dangweili/pedestrian-attribute-recognition-pytorch" ["e"=1]
"veraposeidon/Insect_Identification" -> "veraposeidon/pytorch-tutorial"
"linuxxx/EasyPR_Android" -> "imistyrain/EasyPR4Android"
"linuxxx/EasyPR_Android" -> "fan-wenjie/EasyPR-Java"
"linuxxx/EasyPR_Android" -> "liuruoze/EasyPR"
"linuxxx/EasyPR_Android" -> "guocheng0606/EasyPRForAndroid"
"linuxxx/EasyPR_Android" -> "zcolin/ZEasyPR"
"linuxxx/EasyPR_Android" -> "lucher/EasyPR_Android_RN"
"linuxxx/EasyPR_Android" -> "lizhangqu/Camera"
"GuiltyNeuron/ANPR" -> "apoorva-dave/LicensePlateDetector"
"GuiltyNeuron/ANPR" -> "TheophileBuy/LicensePlateRecognition"
"GuiltyNeuron/ANPR" -> "sergiomsilva/alpr-unconstrained"
"GuiltyNeuron/ANPR" -> "sirius-ai/LPRNet_Pytorch"
"GuiltyNeuron/ANPR" -> "mehulgupta2016154/TCS_HUMAIN"
"GuiltyNeuron/ANPR" -> "stevefielding/tensorflow-anpr"
"GuiltyNeuron/ANPR" -> "Dharun/Tensorflow-License-Plate-Detection"
"GuiltyNeuron/ANPR" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"GuiltyNeuron/ANPR" -> "longphungtuan94/ALPR_System"
"GuiltyNeuron/ANPR" -> "Deevoluation/ALPR"
"GuiltyNeuron/ANPR" -> "sayakpaul/Vehicle-Number-Plate-Detection"
"GuiltyNeuron/ANPR" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"GuiltyNeuron/ANPR" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"GuiltyNeuron/ANPR" -> "ThorPham/License-plate-detection"
"GuiltyNeuron/ANPR" -> "mahavird/my_deep_anpr"
"blueapplehe/car_identify" -> "kinredon/brand_classification"
"blueapplehe/car_identify" -> "PT123123/Vehicle-recognition-system"
"blueapplehe/car_identify" -> "Zoushuang86/final_quiz"
"simple2048/CarPlateIdentity" -> "casuallyName/License_plate_recognition"
"simple2048/CarPlateIdentity" -> "DataXujing/vehicle-license-plate-recognition"
"simple2048/CarPlateIdentity" -> "yinghualuowu/Python_VLPR"
"simple2048/CarPlateIdentity" -> "jinmu333/python_PlateRecogntion"
"simple2048/CarPlateIdentity" -> "jmhIcoding/car-board-reg"
"simple2048/CarPlateIdentity" -> "wzh191920/License-Plate-Recognition"
"simple2048/CarPlateIdentity" -> "hyzhangyong/platenumber"
"simple2048/CarPlateIdentity" -> "airxiechao/simple-car-plate-recognition"
"simple2048/CarPlateIdentity" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"simple2048/CarPlateIdentity" -> "detectRecog/CCPD"
"simple2048/CarPlateIdentity" -> "dreamhunter2333/python_PlateRecogntion"
"simple2048/CarPlateIdentity" -> "derek285/generateCarPlate"
"simple2048/CarPlateIdentity" -> "zeusees/License-Plate-Detector"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zeusees/HyperLPR"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "detectRecog/CCPD"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "ibyte2011/end-to-end-for-chinese-plate-recognition"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "senlinuc/caffe_ocr" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "huxiaoman7/mxnet-cnn-plate-recognition"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zeusees/HyperLPR-Training"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "matthewearl/deep-anpr"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "bear63/sceneReco" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "sergiomsilva/alpr-unconstrained"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "liuruoze/EasyPR"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "Sanster/text_renderer" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "JarveeLee/SynthText_Chinese_version" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "tianzhi0549/CTPN" ["e"=1]
"szad670401/HyperLPR" -> "zeusees/License-Plate-Detector"
"szad670401/HyperLPR" -> "detectRecog/CCPD"
"szad670401/HyperLPR" -> "xiangweizeng/mobile-lpr"
"szad670401/HyperLPR" -> "sirius-ai/LPRNet_Pytorch"
"szad670401/HyperLPR" -> "we0091234/Chinese_license_plate_detection_recognition"
"szad670401/HyperLPR" -> "liuruoze/EasyPR"
"szad670401/HyperLPR" -> "lqian/light-LPR"
"szad670401/HyperLPR" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"szad670401/HyperLPR" -> "DataXujing/vehicle-license-plate-recognition"
"szad670401/HyperLPR" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"szad670401/HyperLPR" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"szad670401/HyperLPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"szad670401/HyperLPR" -> "shouzhong/Scanner" ["e"=1]
"szad670401/HyperLPR" -> "DayBreak-u/chineseocr_lite" ["e"=1]
"szad670401/HyperLPR" -> "AleynP/LPR"
"fan-wenjie/EasyPR-Java" -> "linuxxx/EasyPR_Android"
"fan-wenjie/EasyPR-Java" -> "eguid/vlpr4j"
"fan-wenjie/EasyPR-Java" -> "liuruoze/EasyPR"
"fan-wenjie/EasyPR-Java" -> "ParkingOS/ParkingOS_local"
"fan-wenjie/EasyPR-Java" -> "zeusees/HyperLPR"
"fan-wenjie/EasyPR-Java" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"fan-wenjie/EasyPR-Java" -> "lqian/light-LPR"
"fan-wenjie/EasyPR-Java" -> "imistyrain/EasyPR4Android"
"stevefielding/tensorflow-anpr" -> "stevefielding/keras-anpr"
"stevefielding/tensorflow-anpr" -> "mahavird/my_deep_anpr"
"stevefielding/tensorflow-anpr" -> "Dharun/Tensorflow-License-Plate-Detection"
"stevefielding/tensorflow-anpr" -> "rafariva/ANPR-Tensorflow"
"zeusees/License-Plate-Detector" -> "gm19900510/Pytorch_Retina_License_Plate"
"zeusees/License-Plate-Detector" -> "szad670401/HyperLPR"
"zeusees/License-Plate-Detector" -> "xiangweizeng/mobile-lpr"
"zeusees/License-Plate-Detector" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"zeusees/License-Plate-Detector" -> "sirius-ai/LPRNet_Pytorch"
"zeusees/License-Plate-Detector" -> "detectRecog/CCPD"
"zeusees/License-Plate-Detector" -> "zeusees/HyperVID"
"zeusees/License-Plate-Detector" -> "ufownl/alpr_utils"
"zeusees/License-Plate-Detector" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"zeusees/License-Plate-Detector" -> "deepcam-cn/yolov5-face" ["e"=1]
"zeusees/License-Plate-Detector" -> "lqian/light-LPR"
"zeusees/License-Plate-Detector" -> "we0091234/Chinese_license_plate_detection_recognition"
"zeusees/License-Plate-Detector" -> "biubug6/Pytorch_Retinaface" ["e"=1]
"zeusees/License-Plate-Detector" -> "midasklr/yolov5prune" ["e"=1]
"zeusees/License-Plate-Detector" -> "Buster-maker/plate"
"JamesonHuang/Graduation-Project" -> "wbwj/2018-graduation-project"
"PT123123/Vehicle-recognition-system" -> "XiaoRobb/CarTeller"
"wzb19960208/idCardRecognition" -> "465857721/IDCardOCR_China"
"wzb19960208/idCardRecognition" -> "tdk-farkas/CameraSFZ"
"wzb19960208/idCardRecognition" -> "lizhangqu/Camera"
"eguid/vlpr4j" -> "fan-wenjie/EasyPR-Java"
"eguid/vlpr4j" -> "swimfish09/ChepaiORC"
"eguid/vlpr4j" -> "InitAction/car-OCR"
"eguid/vlpr4j" -> "jtsky/EasyPR_Android"
"airxiechao/simple-car-plate-recognition" -> "airxiechao/simple-car-plate-recognition-2"
"airxiechao/simple-car-plate-recognition" -> "simple2048/CarPlateIdentity"
"airxiechao/simple-car-plate-recognition" -> "Chaway/LP_character_segmentation"
"airxiechao/simple-car-plate-recognition" -> "Feeyao/License-plate-recognition"
"465857721/IDCardOCR_China" -> "tdk-farkas/CameraSFZ"
"465857721/IDCardOCR_China" -> "wzb19960208/idCardRecognition"
"465857721/IDCardOCR_China" -> "lizhangqu/Camera"
"465857721/IDCardOCR_China" -> "mmjbds999/react-native-scanidcard"
"dreamkid/IdCardReconition" -> "itlwy/TextOcrExample"
"lizhangqu/Camera" -> "465857721/IDCardOCR_China"
"lizhangqu/Camera" -> "wzb19960208/idCardRecognition"
"lizhangqu/Camera" -> "wenchaosong/OCR_identify" ["e"=1]
"lizhangqu/Camera" -> "dreamkid/IdCardReconition"
"armaab/hyperlpr-train" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"armaab/hyperlpr-train" -> "szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression"
"armaab/hyperlpr-train" -> "zeusees/train-detector"
"armaab/hyperlpr-train" -> "zeusees/HyperLPR-Training"
"armaab/hyperlpr-train" -> "deeplearningshare/multi-line-plate-recognition"
"yxq9650/CarParking" -> "ParkingOS/ParkingOS_local"
"yxq9650/CarParking" -> "zhujainxipan/Parking-lot-management-system"
"yxq9650/CarParking" -> "watercloudss/parkweb"
"yxq9650/CarParking" -> "xuzhou530/ParkinglotWebService"
"yxq9650/CarParking" -> "ParkingOS/ParkingOS_cloud"
"yxq9650/CarParking" -> "qianliangchang/depot-system"
"yxq9650/CarParking" -> "DrXin/parkingLotSystem"
"jtsky/EasyPR_Android" -> "liumeng1201/easyPR_for_android"
"nicolas-gervais/predicting-car-price-from-scraped-data" -> "zeusees/HyperVID"
"nicolas-gervais/predicting-car-price-from-scraped-data" -> "xiangweizeng/mobile-lpr"
"StanfordVL/cs131_notes" -> "StanfordVL/CS131_release"
"StanfordVL/cs131_notes" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"StanfordVL/cs131_notes" -> "kenjihata/cs231a-notes"
"StanfordVL/cs131_notes" -> "mikucy/CS131"
"StanfordVL/cs131_notes" -> "zhaoxiongjun/CS131_notes_zh-CN"
"StanfordVL/cs131_notes" -> "veraposeidon/CS131_Assignments"
"chizhang529/cs231a" -> "zyxrrr/cs231a"
"chizhang529/cs231a" -> "mikucy/CS231A"
"chizhang529/cs231a" -> "kenjihata/cs231a-notes"
"kenjihata/cs231a-notes" -> "chizhang529/cs231a"
"kenjihata/cs231a-notes" -> "StanfordVL/CS131_release"
"kenjihata/cs231a-notes" -> "StanfordVL/cs131_notes"
"Dharun/Tensorflow-License-Plate-Detection" -> "apoorva-dave/LicensePlateDetector"
"Dharun/Tensorflow-License-Plate-Detection" -> "mahavird/my_deep_anpr"
"Dharun/Tensorflow-License-Plate-Detection" -> "stevefielding/tensorflow-anpr"
"Dharun/Tensorflow-License-Plate-Detection" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"Dharun/Tensorflow-License-Plate-Detection" -> "vjgpt/Vehicle-Number-Plate-Reading"
"Dharun/Tensorflow-License-Plate-Detection" -> "sergiomsilva/alpr-unconstrained"
"Dharun/Tensorflow-License-Plate-Detection" -> "alitourani/yolo-license-plate-detection"
"Dharun/Tensorflow-License-Plate-Detection" -> "zeusees/Mobilenet-SSD-License-Plate-Detection"
"Dharun/Tensorflow-License-Plate-Detection" -> "Deevoluation/ALPR"
"Dharun/Tensorflow-License-Plate-Detection" -> "GuiltyNeuron/ANPR"
"Dharun/Tensorflow-License-Plate-Detection" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"Dharun/Tensorflow-License-Plate-Detection" -> "matthewearl/deep-anpr"
"Dharun/Tensorflow-License-Plate-Detection" -> "sirius-ai/LPRNet_Pytorch"
"apoorva-dave/LicensePlateDetector" -> "Dharun/Tensorflow-License-Plate-Detection"
"apoorva-dave/LicensePlateDetector" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"apoorva-dave/LicensePlateDetector" -> "alitourani/yolo-license-plate-detection"
"apoorva-dave/LicensePlateDetector" -> "femioladeji/License-Plate-Recognition-Nigerian-vehicles"
"apoorva-dave/LicensePlateDetector" -> "apoorva-dave/LicensePlateDetector-deployment-flask"
"apoorva-dave/LicensePlateDetector" -> "SarthakV7/AI-based-indian-license-plate-detection"
"apoorva-dave/LicensePlateDetector" -> "vjgpt/Vehicle-Number-Plate-Reading"
"apoorva-dave/LicensePlateDetector" -> "GuiltyNeuron/ANPR"
"apoorva-dave/LicensePlateDetector" -> "parkpow/deep-license-plate-recognition"
"apoorva-dave/LicensePlateDetector" -> "mahavird/my_deep_anpr"
"apoorva-dave/LicensePlateDetector" -> "faisalthaheem/open-lpr"
"apoorva-dave/LicensePlateDetector" -> "quangnhat185/Plate_detect_and_recognize"
"apoorva-dave/LicensePlateDetector" -> "longphungtuan94/ALPR_System"
"apoorva-dave/LicensePlateDetector" -> "marcbelmont/deep-license-plate-recognition"
"apoorva-dave/LicensePlateDetector" -> "DoubangoTelecom/ultimateALPR-SDK"
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" -> "mikucy/CS131"
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" -> "BXuan694/CS131"
"ParkingOS/ParkingOS_local" -> "ParkingOS/ParkingOS_cloud"
"ParkingOS/ParkingOS_local" -> "yxq9650/CarParking"
"ParkingOS/ParkingOS_local" -> "panmingzhi815/dongluCarpark"
"itlwy/TextOcrExample" -> "dreamkid/IdCardReconition"
"casuallyName/License_plate_recognition" -> "simple2048/CarPlateIdentity"
"casuallyName/License_plate_recognition" -> "DataXujing/vehicle-license-plate-recognition"
"casuallyName/License_plate_recognition" -> "jinmu333/python_PlateRecogntion"
"casuallyName/License_plate_recognition" -> "jmhIcoding/car-board-reg"
"casuallyName/License_plate_recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"casuallyName/License_plate_recognition" -> "wzh191920/License-Plate-Recognition"
"casuallyName/License_plate_recognition" -> "yinghualuowu/Python_VLPR"
"femioladeji/License-Plate-Recognition-Nigerian-vehicles" -> "apoorva-dave/LicensePlateDetector"
"gm19900510/Pytorch_Retina_License_Plate" -> "zeusees/License-Plate-Detector"
"gm19900510/Pytorch_Retina_License_Plate" -> "zheng-yuwei/license-plate-generator"
"gm19900510/Pytorch_Retina_License_Plate" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"gm19900510/Pytorch_Retina_License_Plate" -> "derek285/generateCarPlate"
"gm19900510/Pytorch_Retina_License_Plate" -> "xiangweizeng/mobile-lpr"
"gm19900510/Pytorch_Retina_License_Plate" -> "ufownl/fake_chs_lp"
"sirius-ai/LPRNet_Pytorch" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"sirius-ai/LPRNet_Pytorch" -> "detectRecog/CCPD"
"sirius-ai/LPRNet_Pytorch" -> "lyl8213/Plate_Recognition-LPRnet"
"sirius-ai/LPRNet_Pytorch" -> "sergiomsilva/alpr-unconstrained"
"sirius-ai/LPRNet_Pytorch" -> "zeusees/License-Plate-Detector"
"sirius-ai/LPRNet_Pytorch" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"sirius-ai/LPRNet_Pytorch" -> "xiangweizeng/mobile-lpr"
"sirius-ai/LPRNet_Pytorch" -> "lqian/light-LPR"
"sirius-ai/LPRNet_Pytorch" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"sirius-ai/LPRNet_Pytorch" -> "gm19900510/Pytorch_Retina_License_Plate"
"sirius-ai/LPRNet_Pytorch" -> "ufownl/fake_chs_lp"
"sirius-ai/LPRNet_Pytorch" -> "szad670401/HyperLPR"
"sirius-ai/LPRNet_Pytorch" -> "ufownl/alpr_utils"
"sirius-ai/LPRNet_Pytorch" -> "we0091234/Chinese_license_plate_detection_recognition"
"sirius-ai/LPRNet_Pytorch" -> "deepcam-cn/yolov5-face" ["e"=1]
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" -> "armaab/hyperlpr-train"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/Raspberry_Pi_2_and_OpenCV_3_Tutorial_Part_1"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"derronqi/yolov7-face" -> "deepcam-cn/yolov5-face" ["e"=1]
"derronqi/yolov7-face" -> "derronqi/yolov8-face"
"derronqi/yolov7-face" -> "Krasjet-Yu/YOLO-FaceV2"
"derronqi/yolov7-face" -> "qinggangwu/yolov7-pose_Npoint_Ncla"
"derronqi/yolov7-face" -> "hpc203/yolov7-detect-face-onnxrun-cpp-py"
"derronqi/yolov7-face" -> "we0091234/yolov7-face-tensorrt"
"derronqi/yolov7-face" -> "we0091234/yolov7_plate"
"derronqi/yolov7-face" -> "yxgong0/CRPD"
"derronqi/yolov7-face" -> "TexasInstruments/edgeai-yolov5" ["e"=1]
"derronqi/yolov7-face" -> "FeiGeChuanShu/ncnn_Android_face" ["e"=1]
"derronqi/yolov7-face" -> "jinfagang/yolov7-face"
"ThorPham/License-plate-detection" -> "RobertLucian/license-plate-dataset"
"ThorPham/License-plate-detection" -> "RobertLucian/cortex-license-plate-reader-client"
"xiangweizeng/mobile-lpr" -> "lqian/light-LPR"
"xiangweizeng/mobile-lpr" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"xiangweizeng/mobile-lpr" -> "YonghaoHe/A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"xiangweizeng/mobile-lpr" -> "zeusees/License-Plate-Detector"
"xiangweizeng/mobile-lpr" -> "hanson-young/nniefacelib" ["e"=1]
"xiangweizeng/mobile-lpr" -> "olojuwin/facerecognize-for-mobile-phone" ["e"=1]
"xiangweizeng/mobile-lpr" -> "zeusees/HyperVID"
"xiangweizeng/mobile-lpr" -> "detectRecog/CCPD"
"xiangweizeng/mobile-lpr" -> "gm19900510/Pytorch_Retina_License_Plate"
"xiangweizeng/mobile-lpr" -> "sirius-ai/LPRNet_Pytorch"
"xiangweizeng/mobile-lpr" -> "szad670401/HyperLPR"
"xiangweizeng/mobile-lpr" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"xiangweizeng/mobile-lpr" -> "becauseofAI/lffd-pytorch" ["e"=1]
"xiangweizeng/mobile-lpr" -> "biubug6/Face-Detector-1MB-with-landmark" ["e"=1]
"xiangweizeng/mobile-lpr" -> "dlunion/DBFace" ["e"=1]
"AleynP/LPR" -> "lxhAndSmh/HyperLPR"
"AleynP/LPR" -> "imistyrain/EasyPR4Android"
"AleynP/LPR" -> "shouzhong/Scanner" ["e"=1]
"zhaobenx/Image-stitcher" -> "amusi/awesome-image-stitching"
"zhaobenx/Image-stitcher" -> "samggggflynn/image-stitching-opencv" ["e"=1]
"Pengfei8324/chinese_license_plate_generator" -> "zheng-yuwei/license-plate-generator"
"Pengfei8324/chinese_license_plate_generator" -> "yxgong0/CRPD"
"rahatzamancse/Traffic-Rules-Violation-Detection" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System"
"rahatzamancse/Traffic-Rules-Violation-Detection" -> "rohit9934/Traffic-Rules-Violation-detection-system"
"rahatzamancse/Traffic-Rules-Violation-Detection" -> "sakibreza/Traffic-Rules-Violation-Detection-System"
"hyh21521038/ssd-plate_detection" -> "chenxinpeng/SSD_scene-text-detection"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "rahatzamancse/Traffic-Rules-Violation-Detection"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "apoorva-dave/LicensePlateDetector"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "ahmetozlu/vehicle_counting_tensorflow" ["e"=1]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "bamwani/car-counting-and-speed-estimation-yolo-sort-python" ["e"=1]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "shreyapamecha/Speed-Estimation-of-Vehicles-with-Plate-Detection" ["e"=1]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "Dharun/Tensorflow-License-Plate-Detection"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "kraten/vehicle-speed-check" ["e"=1]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "alitourani/yolo-license-plate-detection"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "anmspro/Traffic-Signal-Violation-Detection-System"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "longphungtuan94/ALPR_System"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "faisalthaheem/open-lpr"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "parkpow/deep-license-plate-recognition"
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" -> "rohit9934/Traffic-Rules-Violation-detection-system"
"hyzhangyong/platenumber" -> "yinghualuowu/Python_VLPR"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/crnn_plate_recognition"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/yolov7_plate"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/crnn_plate_recognition" -> "we0091234/yolov7_plate"
"we0091234/crnn_plate_recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/crnn_plate_recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/crnn_plate_recognition" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/crnn_plate_recognition" -> "we0091234/NCNN_SAMPLE"
"we0091234/crnn_plate_recognition" -> "we0091234/Car_recognition"
"we0091234/crnn_plate_recognition" -> "yxgong0/CRPD"
"we0091234/yolov7_plate" -> "we0091234/crnn_plate_recognition"
"we0091234/yolov7_plate" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/yolov7_plate" -> "we0091234/Car_recognition"
"we0091234/yolov7_plate" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov7_plate" -> "we0091234/yolov7-face-tensorrt"
"we0091234/yolov7_plate" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/yolov7_plate" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov7_plate" -> "we0091234/yolov8-tensorrt"
"veraposeidon/CS131_Assignments" -> "veraposeidon/pytorch-tutorial"
"veraposeidon/CS131_Assignments" -> "veraposeidon/CodeWar2LeetCode"
"veraposeidon/CS131_Assignments" -> "veraposeidon/Fast.ai_Tips"
"veraposeidon/labelme2Datasets" -> "veraposeidon/pytorch-tutorial"
"ufownl/alpr_utils" -> "ufownl/fake_chs_lp"
"ufownl/alpr_utils" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"ufownl/alpr_utils" -> "zeusees/License-Plate-Detector"
"ufownl/alpr_utils" -> "armaab/hyperlpr-train"
"ufownl/alpr_utils" -> "mingbocui/Generate-LicensePlate-with-GAN"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Deevoluation/ALPR"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Link009/LPEX"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Dharun/Tensorflow-License-Plate-Detection"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "wzh191920/License-Plate-Recognition"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "apoorva-dave/LicensePlateDetector"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "longphungtuan94/ALPR_System"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "muchlisinadi/ALPR-Indonesia"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "GuiltyNeuron/ANPR"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "matthewearl/deep-anpr"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "anuj-badhwar/Indian-Number-Plate-Recognition-System"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "stevefielding/tensorflow-anpr"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "sergiomsilva/alpr-unconstrained"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp" ["e"=1]
"quangnhat185/Plate_detect_and_recognize" -> "longphungtuan94/ALPR_System"
"marcbelmont/deep-license-plate-recognition" -> "faisalthaheem/open-lpr"
"marcbelmont/deep-license-plate-recognition" -> "DoubangoTelecom/ultimateALPR-SDK"
"marcbelmont/deep-license-plate-recognition" -> "Deevoluation/ALPR"
"marcbelmont/deep-license-plate-recognition" -> "mahavird/my_deep_anpr"
"marcbelmont/deep-license-plate-recognition" -> "stevefielding/tensorflow-anpr"
"marcbelmont/deep-license-plate-recognition" -> "apoorva-dave/LicensePlateDetector"
"Krasjet-Yu/YOLO-FaceV2" -> "derronqi/yolov7-face"
"parkpow/deep-license-plate-recognition" -> "faisalthaheem/open-lpr"
"parkpow/deep-license-plate-recognition" -> "souravrs999/License-Plate-Recognition"
"we0091234/Car_recognition" -> "we0091234/yolov7_plate"
"we0091234/Car_recognition" -> "we0091234/chinese_plate_tensorrt"
"alitourani/yolo-license-plate-detection" -> "alitourani/deep-learning-vehicle-detection"
"alitourani/yolo-license-plate-detection" -> "alitourani/Iranis-dataset"
"we0091234/chinese_plate_tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov8-tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov8-tensorrt" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov7-face-tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov7-face-tensorrt" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov7-face-tensorrt" -> "we0091234/yolov8-tensorrt"
"deeplearningshare/multi-line-plate-recognition" -> "millionsofluo/FakeLPR"
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"DoubangoTelecom/compv" -> "DoubangoTelecom/ultimate"
"we0091234/Chinese_license_plate_detection_recognition" ["l"="30.91,34.792"]
"we0091234/crnn_plate_recognition" ["l"="30.935,34.779"]
"we0091234/yolov7_plate" ["l"="30.954,34.774"]
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" ["l"="30.906,34.776"]
"we0091234/Car_recognition" ["l"="30.955,34.792"]
"Ayers-github/Chinese-License-Plate-Recognition" ["l"="30.946,34.788"]
"we0091234/chinese_plate_tensorrt" ["l"="30.963,34.782"]
"Big-Bear3/mushroom-di" ["l"="-25.223,23.797"]
"yxgong0/CRPD" ["l"="30.943,34.76"]
"zeusees/License-Plate-Detector" ["l"="30.855,34.804"]
"lhp96/mini-vue" ["l"="-25.201,23.844"]
"sirius-ai/LPRNet_Pytorch" ["l"="30.827,34.809"]
"liuruoze/EasyPR" ["l"="30.832,34.906"]
"zeusees/HyperLPR" ["l"="30.803,34.878"]
"openalpr/openalpr" ["l"="30.768,34.924"]
"szad670401/end-to-end-for-chinese-plate-recognition" ["l"="30.794,34.857"]
"detectRecog/CCPD" ["l"="30.828,34.852"]
"seetaface/SeetaFaceEngine" ["l"="33.971,35.264"]
"linuxxx/EasyPR_Android" ["l"="30.873,34.968"]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" ["l"="30.812,34.839"]
"ShiqiYu/libfacedetection" ["l"="34.023,35.379"]
"szad670401/HyperLPR" ["l"="30.866,34.844"]
"fan-wenjie/EasyPR-Java" ["l"="30.859,34.938"]
"weiliu89/caffe" ["l"="34.325,35.17"]
"Tencent/ncnn" ["l"="34.142,35.514"]
"EasyDarwin/EasyDarwin" ["l"="-26.472,11.967"]
"sergiomsilva/alpr-unconstrained" ["l"="30.767,34.839"]
"rbgirshick/py-faster-rcnn" ["l"="34.264,35.232"]
"jinmu333/python_PlateRecogntion" ["l"="30.814,34.75"]
"yinghualuowu/Python_VLPR" ["l"="30.842,34.737"]
"simple2048/CarPlateIdentity" ["l"="30.839,34.76"]
"DataXujing/vehicle-license-plate-recognition" ["l"="30.838,34.782"]
"casuallyName/License_plate_recognition" ["l"="30.823,34.761"]
"hyzhangyong/platenumber" ["l"="30.851,34.75"]
"wzh191920/License-Plate-Recognition" ["l"="30.8,34.787"]
"chsobin/LicensePlateRecognition" ["l"="30.784,34.72"]
"zeusees/HyperLPR-Training" ["l"="30.804,34.802"]
"duanshengliu/End-to-end-for-chinese-plate-recognition" ["l"="30.854,34.778"]
"jinmu333/python_car" ["l"="30.799,34.719"]
"jmhIcoding/car-board-reg" ["l"="30.827,34.742"]
"airxiechao/simple-car-plate-recognition" ["l"="30.82,34.728"]
"xuexingyu24/License_Plate_Detection_Pytorch" ["l"="30.835,34.821"]
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" ["l"="30.679,34.828"]
"zeusees/Mobilenet-SSD-License-Plate-Detection" ["l"="30.794,34.833"]
"Yaoshicn/decaptcha" ["l"="30.852,34.678"]
"xg-zhang/faceRegister" ["l"="30.863,34.698"]
"Corvey/Exam-Online" ["l"="0.728,17.706"]
"Superbsco/weibo-analysis-system" ["l"="15.421,5.401"]
"veraposeidon/Insect_Identification" ["l"="30.899,34.648"]
"lqian/light-LPR" ["l"="30.839,34.838"]
"xiaofengShi/CHINESE-OCR" ["l"="29.524,34.158"]
"eragonruan/text-detection-ctpn" ["l"="29.487,34.168"]
"YCG09/chinese_ocr" ["l"="29.505,34.151"]
"senlinuc/caffe_ocr" ["l"="29.473,34.14"]
"chineseocr/chineseocr" ["l"="29.533,34.186"]
"zeusees/HyperLandmark" ["l"="34.953,33.355"]
"xiangweizeng/mobile-lpr" ["l"="30.858,34.826"]
"lyl8213/Plate_Recognition-LPRnet" ["l"="30.81,34.819"]
"biubug6/Pytorch_Retinaface" ["l"="35.048,33.299"]
"meijieru/crnn.pytorch" ["l"="29.523,34.133"]
"derek285/generateCarPlate" ["l"="30.874,34.768"]
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" ["l"="30.776,34.811"]
"armaab/hyperlpr-train" ["l"="30.783,34.794"]
"millionsofluo/FakeLPR" ["l"="30.764,34.798"]
"deeplearningshare/multi-line-plate-recognition" ["l"="30.816,34.795"]
"Nenger/chinese_licence_plate_generator" ["l"="30.751,34.812"]
"zheng-yuwei/license-plate-generator" ["l"="30.875,34.788"]
"zeusees/HyperVID" ["l"="30.873,34.82"]
"YonghaoHe/A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["l"="35.023,33.305"]
"olojuwin/facerecognize-for-mobile-phone" ["l"="35.059,33.366"]
"bleakie/MaskInsightface" ["l"="35.093,33.347"]
"hanson-young/nniefacelib" ["l"="34.963,33.343"]
"ufownl/fake_chs_lp" ["l"="30.836,34.797"]
"gm19900510/Pytorch_Retina_License_Plate" ["l"="30.87,34.802"]
"matthewearl/deep-anpr" ["l"="30.751,34.869"]
"stevefielding/tensorflow-anpr" ["l"="30.697,34.846"]
"Dharun/Tensorflow-License-Plate-Detection" ["l"="30.715,34.826"]
"pannous/tensorflow-ocr" ["l"="29.389,34.149"]
"ankush-me/SynthText" ["l"="29.513,34.116"]
"bgshih/crnn" ["l"="29.448,34.127"]
"Russell91/TensorBox" ["l"="34.353,35.043"]
"da03/Attention-OCR" ["l"="29.43,34.117"]
"chongyangtao/Awesome-Scene-Text-Recognition" ["l"="29.46,34.112"]
"ufownl/alpr_utils" ["l"="30.816,34.782"]
"chenjun2hao/CLPR.pytorch" ["l"="30.895,34.86"]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" ["l"="30.886,34.832"]
"hyh21521038/ssd-plate_detection" ["l"="30.715,34.886"]
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" ["l"="30.767,34.786"]
"Pengfei8324/chinese_license_plate_generator" ["l"="30.911,34.763"]
"ParkingOS/ParkingOS_cloud" ["l"="30.989,35.015"]
"ParkingOS/ParkingOS_local" ["l"="30.958,35.008"]
"ParkingOS/parkingos_cloud_vue_server" ["l"="31.014,35.018"]
"ParkingOS/parkingos_cloud_vue" ["l"="31.013,35.006"]
"cmusatyalab/openface" ["l"="33.917,35.305"]
"tesseract-ocr/tesseract" ["l"="33.686,35.533"]
"pjreddie/darknet" ["l"="34.122,35.348"]
"davidsandberg/facenet" ["l"="34.008,35.319"]
"Itseez/opencv" ["l"="27.1,33.803"]
"tzutalin/labelImg" ["l"="34.224,35.359"]
"facebookresearch/Detectron" ["l"="34.121,35.392"]
"davisking/dlib" ["l"="33.927,35.342"]
"anmspro/Traffic-Signal-Violation-Detection-System" ["l"="30.569,34.814"]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["l"="30.646,34.806"]
"rahatzamancse/Traffic-Rules-Violation-Detection" ["l"="30.598,34.827"]
"anmspro/DREAM_Blood-Bank-Application-Android" ["l"="30.549,34.801"]
"anmspro/Daily_iOS-App" ["l"="30.546,34.811"]
"anmspro/DBMS-Traveling_Management_System" ["l"="30.547,34.821"]
"anmspro/Intro-to-Tensorflow-for-Deep-Learning-Udacity" ["l"="30.545,34.831"]
"anmspro/Turbulent-Traveler__Web-Development-Project" ["l"="30.537,34.82"]
"anmspro/Smart-Car-Parking-System" ["l"="30.533,34.805"]
"zuoqing1988/ZQCNN" ["l"="34.038,35.349"]
"dlunion/mtcnn" ["l"="34.948,33.458"]
"biubug6/Face-Detector-1MB-with-landmark" ["l"="35.032,33.323"]
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python" ["l"="30.64,34.839"]
"DoubangoTelecom/ultimateALPR-SDK" ["l"="30.724,34.78"]
"GuiltyNeuron/ANPR" ["l"="30.7,34.824"]
"quangnhat185/Plate_detect_and_recognize" ["l"="30.719,34.805"]
"winter2897/Real-time-Auto-License-Plate-Recognition-with-Jetson-Nano" ["l"="30.685,34.728"]
"anhbantre/multi_robot_ros2" ["l"="30.677,34.71"]
"winter2897/pygimbal" ["l"="30.668,34.715"]
"parkpow/deep-license-plate-recognition" ["l"="30.662,34.761"]
"marcbelmont/deep-license-plate-recognition" ["l"="30.695,34.787"]
"DoubangoTelecom/compv" ["l"="30.709,34.715"]
"apoorva-dave/LicensePlateDetector" ["l"="30.675,34.794"]
"faisalthaheem/open-lpr" ["l"="30.675,34.775"]
"Deevoluation/ALPR" ["l"="30.7,34.802"]
"shreyapamecha/Speed-Estimation-of-Vehicles-with-Plate-Detection" ["l"="32.026,36.069"]
"theAIGuysCode/yolov4-custom-functions" ["l"="32.185,36.02"]
"DoubangoTelecom/FaceLivenessDetection-SDK" ["l"="30.717,34.741"]
"mikucy/CS131" ["l"="30.974,34.447"]
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" ["l"="30.982,34.434"]
"xuwd11/cs131_hws" ["l"="30.947,34.44"]
"XiaoRobb/CarTeller" ["l"="31.01,34.845"]
"PT123123/Vehicle-recognition-system" ["l"="30.984,34.841"]
"imistyrain/EasyPR4Android" ["l"="30.898,34.952"]
"guocheng0606/EasyPRForAndroid" ["l"="30.906,34.973"]
"StanfordVL/CS131_release" ["l"="31.014,34.441"]
"StanfordVL/cs131_notes" ["l"="31,34.46"]
"veraposeidon/CS131_Assignments" ["l"="30.984,34.495"]
"kenjihata/cs231a-notes" ["l"="31.038,34.448"]
"zhaoxiongjun/CS131_notes_zh-CN" ["l"="31.001,34.423"]
"chizhang529/cs231a" ["l"="31.06,34.433"]
"zyxrrr/cs131" ["l"="31.029,34.464"]
"yihui-he/computer-vision-tutorial" ["l"="31.022,34.399"]
"wbwj/2018-graduation-project" ["l"="30.87,34.64"]
"zhaobenx/Image-stitcher" ["l"="30.84,34.634"]
"skyduy/CNN_keras" ["l"="-18.612,-29.312"]
"chauncyzhu/sentimentanalysis" ["l"="15.402,5.353"]
"jasminecjc/lagou_data_analysis" ["l"="16.048,5.116"]
"mekarpeles/captcha-decoder" ["l"="-18.676,-29.281"]
"lllcho/CAPTCHA-breaking" ["l"="-18.672,-29.298"]
"RobertLucian/cortex-license-plate-reader-client" ["l"="30.573,34.903"]
"ThorPham/License-plate-detection" ["l"="30.608,34.888"]
"RobertLucian/license-plate-dataset" ["l"="30.589,34.916"]
"huxiaoman7/mxnet-cnn-plate-recognition" ["l"="30.791,34.817"]
"zeusees/train-detector" ["l"="30.774,34.768"]
"zeusees/HyperLabelImg" ["l"="30.914,34.824"]
"moli232777144/mtcnn_ncnn" ["l"="34.986,33.414"]
"guoqiangqi/PFLD" ["l"="34.951,33.304"]
"zeusees/HyperFT" ["l"="35.022,33.363"]
"deepcam-cn/Face-Anti-spoofing.pytorch" ["l"="35.192,33.23"]
"xiangweizeng/darknet2ncnn" ["l"="48.348,-4.862"]
"HandsomeHans/Face-Tracking-Based-on-OpenTLD-and-RNet" ["l"="35.07,33.381"]
"CaptainEven/RepNet-MDNet-VehicleReID" ["l"="33.002,37.064"]
"Charrin/RetinaFace-Cpp" ["l"="35.035,33.371"]
"kiloGrand/License-Plate-Recognition" ["l"="30.927,34.747"]
"knwng/awesome-vehicle-re-identification" ["l"="33.025,37.068"]
"hyk1996/Person-Attribute-Recognition-MarketDuke" ["l"="32.932,36.815"]
"wangxiao5791509/Pedestrian-Attribute-Recognition-Paper-List" ["l"="32.946,36.812"]
"JunshengFu/vehicle-detection" ["l"="30.907,36.29"]
"layumi/AICIty-reID-2020" ["l"="33.042,37.007"]
"CaptainEven/FairMOTVehicle" ["l"="32.255,36.27"]
"dangweili/pedestrian-attribute-recognition-pytorch" ["l"="32.918,36.788"]
"veraposeidon/pytorch-tutorial" ["l"="30.945,34.568"]
"zcolin/ZEasyPR" ["l"="30.897,34.993"]
"lucher/EasyPR_Android_RN" ["l"="30.878,34.994"]
"lizhangqu/Camera" ["l"="30.879,35.067"]
"TheophileBuy/LicensePlateRecognition" ["l"="30.693,34.765"]
"mehulgupta2016154/TCS_HUMAIN" ["l"="30.668,34.847"]
"longphungtuan94/ALPR_System" ["l"="30.672,34.81"]
"sayakpaul/Vehicle-Number-Plate-Detection" ["l"="30.68,34.857"]
"mahavird/my_deep_anpr" ["l"="30.688,34.813"]
"blueapplehe/car_identify" ["l"="31.044,34.849"]
"kinredon/brand_classification" ["l"="31.072,34.847"]
"Zoushuang86/final_quiz" ["l"="31.065,34.861"]
"dreamhunter2333/python_PlateRecogntion" ["l"="30.87,34.725"]
"ibyte2011/end-to-end-for-chinese-plate-recognition" ["l"="30.743,34.895"]
"bear63/sceneReco" ["l"="29.449,34.144"]
"Sanster/text_renderer" ["l"="29.564,34.123"]
"JarveeLee/SynthText_Chinese_version" ["l"="29.484,34.1"]
"tianzhi0549/CTPN" ["l"="29.433,34.144"]
"shouzhong/Scanner" ["l"="48.967,1.588"]
"DayBreak-u/chineseocr_lite" ["l"="29.612,34.211"]
"AleynP/LPR" ["l"="30.915,34.912"]
"eguid/vlpr4j" ["l"="30.844,34.988"]
"stevefielding/keras-anpr" ["l"="30.669,34.869"]
"rafariva/ANPR-Tensorflow" ["l"="30.68,34.878"]
"deepcam-cn/yolov5-face" ["l"="34.543,35.659"]
"midasklr/yolov5prune" ["l"="31.074,35.683"]
"Buster-maker/plate" ["l"="30.894,34.749"]
"JamesonHuang/Graduation-Project" ["l"="30.882,34.613"]
"wzb19960208/idCardRecognition" ["l"="30.882,35.092"]
"465857721/IDCardOCR_China" ["l"="30.862,35.095"]
"tdk-farkas/CameraSFZ" ["l"="30.875,35.112"]
"swimfish09/ChepaiORC" ["l"="30.83,35.005"]
"InitAction/car-OCR" ["l"="30.854,35.015"]
"jtsky/EasyPR_Android" ["l"="30.827,35.023"]
"airxiechao/simple-car-plate-recognition-2" ["l"="30.81,34.701"]
"Chaway/LP_character_segmentation" ["l"="30.827,34.702"]
"Feeyao/License-plate-recognition" ["l"="30.804,34.684"]
"mmjbds999/react-native-scanidcard" ["l"="30.846,35.12"]
"dreamkid/IdCardReconition" ["l"="30.91,35.097"]
"itlwy/TextOcrExample" ["l"="30.922,35.115"]
"wenchaosong/OCR_identify" ["l"="49.035,1.709"]
"yxq9650/CarParking" ["l"="30.992,35.04"]
"zhujainxipan/Parking-lot-management-system" ["l"="31.028,35.057"]
"watercloudss/parkweb" ["l"="31.018,35.04"]
"xuzhou530/ParkinglotWebService" ["l"="31.002,35.072"]
"qianliangchang/depot-system" ["l"="30.982,35.059"]
"DrXin/parkingLotSystem" ["l"="31.006,35.055"]
"liumeng1201/easyPR_for_android" ["l"="30.818,35.042"]
"nicolas-gervais/predicting-car-price-from-scraped-data" ["l"="30.933,34.845"]
"zyxrrr/cs231a" ["l"="31.089,34.432"]
"mikucy/CS231A" ["l"="31.077,34.416"]
"vjgpt/Vehicle-Number-Plate-Reading" ["l"="30.66,34.821"]
"alitourani/yolo-license-plate-detection" ["l"="30.645,34.79"]
"femioladeji/License-Plate-Recognition-Nigerian-vehicles" ["l"="30.636,34.771"]
"apoorva-dave/LicensePlateDetector-deployment-flask" ["l"="30.653,34.776"]
"SarthakV7/AI-based-indian-license-plate-detection" ["l"="30.642,34.754"]
"BXuan694/CS131" ["l"="30.97,34.418"]
"panmingzhi815/dongluCarpark" ["l"="30.955,35.027"]
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" ["l"="30.616,34.798"]
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp" ["l"="30.585,34.793"]
"MicrocontrollersAndMore/Raspberry_Pi_2_and_OpenCV_3_Tutorial_Part_1" ["l"="30.566,34.77"]
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" ["l"="30.602,34.81"]
"derronqi/yolov7-face" ["l"="31.009,34.744"]
"derronqi/yolov8-face" ["l"="31.01,34.719"]
"Krasjet-Yu/YOLO-FaceV2" ["l"="31.03,34.724"]
"qinggangwu/yolov7-pose_Npoint_Ncla" ["l"="31.053,34.732"]
"hpc203/yolov7-detect-face-onnxrun-cpp-py" ["l"="31.037,34.743"]
"we0091234/yolov7-face-tensorrt" ["l"="30.985,34.763"]
"TexasInstruments/edgeai-yolov5" ["l"="36.033,34.948"]
"FeiGeChuanShu/ncnn_Android_face" ["l"="31.564,36.237"]
"jinfagang/yolov7-face" ["l"="31.042,34.756"]
"becauseofAI/lffd-pytorch" ["l"="35.008,33.258"]
"dlunion/DBFace" ["l"="35.047,33.268"]
"lxhAndSmh/HyperLPR" ["l"="30.943,34.923"]
"amusi/awesome-image-stitching" ["l"="30.834,34.607"]
"samggggflynn/image-stitching-opencv" ["l"="31.473,44.036"]
"rohit9934/Traffic-Rules-Violation-detection-system" ["l"="30.618,34.822"]
"sakibreza/Traffic-Rules-Violation-Detection-System" ["l"="30.567,34.845"]
"chenxinpeng/SSD_scene-text-detection" ["l"="30.689,34.91"]
"ahmetozlu/vehicle_counting_tensorflow" ["l"="32.128,36.064"]
"bamwani/car-counting-and-speed-estimation-yolo-sort-python" ["l"="32.067,36.068"]
"kraten/vehicle-speed-check" ["l"="32.045,36.062"]
"we0091234/NCNN_SAMPLE" ["l"="30.969,34.769"]
"we0091234/yolov8-tensorrt" ["l"="30.984,34.776"]
"veraposeidon/CodeWar2LeetCode" ["l"="30.97,34.503"]
"veraposeidon/Fast.ai_Tips" ["l"="30.994,34.506"]
"veraposeidon/labelme2Datasets" ["l"="30.955,34.551"]
"mingbocui/Generate-LicensePlate-with-GAN" ["l"="30.783,34.745"]
"Link009/LPEX" ["l"="30.645,34.867"]
"muchlisinadi/ALPR-Indonesia" ["l"="30.652,34.853"]
"anuj-badhwar/Indian-Number-Plate-Recognition-System" ["l"="30.626,34.854"]
"MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp" ["l"="30.978,36.31"]
"souravrs999/License-Plate-Recognition" ["l"="30.636,34.732"]
"alitourani/deep-learning-vehicle-detection" ["l"="30.616,34.779"]
"alitourani/Iranis-dataset" ["l"="30.613,34.768"]
"DoubangoTelecom/ultimate" ["l"="30.7,34.69"]
}