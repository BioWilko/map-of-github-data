digraph G {
"meetDeveloper/freeDictionaryAPI" -> "meetDeveloper/Dictionary-Anywhere"
"meetDeveloper/freeDictionaryAPI" -> "mcnaveen/Random-Words-API"
"meetDeveloper/freeDictionaryAPI" -> "Suyash458/WiktionaryParser"
"meetDeveloper/freeDictionaryAPI" -> "wordset/wordset-dictionary"
"meetDeveloper/freeDictionaryAPI" -> "lukePeavey/quotable" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "tatuylonen/wiktextract"
"meetDeveloper/freeDictionaryAPI" -> "dwyl/english-words"
"meetDeveloper/freeDictionaryAPI" -> "words/an-array-of-english-words"
"meetDeveloper/freeDictionaryAPI" -> "argosopentech/argos-translate" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "shortcuts/no-neck-pain.nvim" ["e"=1]
"first20hours/google-10000-english" -> "dwyl/english-words"
"first20hours/google-10000-english" -> "mortenjust/cleartext-mac" ["e"=1]
"first20hours/google-10000-english" -> "LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["e"=1]
"first20hours/google-10000-english" -> "hermitdave/FrequencyWords"
"first20hours/google-10000-english" -> "dolph/dictionary"
"first20hours/google-10000-english" -> "derekchuank/high-frequency-vocabulary"
"first20hours/google-10000-english" -> "adambom/dictionary"
"first20hours/google-10000-english" -> "mahavivo/english-wordlists" ["e"=1]
"first20hours/google-10000-english" -> "dae/anki" ["e"=1]
"first20hours/google-10000-english" -> "yvoronoy/awesome-english" ["e"=1]
"first20hours/google-10000-english" -> "LuminosoInsight/wordfreq"
"first20hours/google-10000-english" -> "matthewreagan/WebstersEnglishDictionary"
"first20hours/google-10000-english" -> "skywind3000/ECDICT" ["e"=1]
"first20hours/google-10000-english" -> "berzerk0/Probable-Wordlists" ["e"=1]
"first20hours/google-10000-english" -> "NaturalNode/natural" ["e"=1]
"ChinaYiqun/ChineseAug" -> "WatsonWangZh/AIPractice"
"dwyl/english-words" -> "first20hours/google-10000-english"
"dwyl/english-words" -> "skywind3000/ECDICT" ["e"=1]
"dwyl/english-words" -> "Textualize/textual" ["e"=1]
"dwyl/english-words" -> "adambom/dictionary"
"dwyl/english-words" -> "coding-horror/basic-computer-games" ["e"=1]
"dwyl/english-words" -> "psf/black" ["e"=1]
"dwyl/english-words" -> "Textualize/rich" ["e"=1]
"dwyl/english-words" -> "dolph/dictionary"
"dwyl/english-words" -> "yt-dlp/yt-dlp" ["e"=1]
"dwyl/english-words" -> "coqui-ai/TTS" ["e"=1]
"dwyl/english-words" -> "RunaCapital/awesome-oss-alternatives" ["e"=1]
"dwyl/english-words" -> "matthewreagan/WebstersEnglishDictionary"
"dwyl/english-words" -> "willmcgugan/rich" ["e"=1]
"dwyl/english-words" -> "tqdm/tqdm" ["e"=1]
"dwyl/english-words" -> "explosion/spaCy" ["e"=1]
"crownpku/Somiao-Pinyin" -> "Kyubyong/neural_chinese_transliterator"
"crownpku/Somiao-Pinyin" -> "Pelhans/ZASR_tensorflow" ["e"=1]
"crownpku/Somiao-Pinyin" -> "LiuRoy/Pinyin_Demo" ["e"=1]
"languagetool-org/languagetool" -> "penpot/penpot" ["e"=1]
"languagetool-org/languagetool" -> "cryptomator/cryptomator" ["e"=1]
"languagetool-org/languagetool" -> "zotero/zotero" ["e"=1]
"languagetool-org/languagetool" -> "Erikvl87/docker-languagetool"
"languagetool-org/languagetool" -> "wallabag/wallabag" ["e"=1]
"languagetool-org/languagetool" -> "gorhill/uBlock" ["e"=1]
"languagetool-org/languagetool" -> "jgm/pandoc" ["e"=1]
"languagetool-org/languagetool" -> "Zettlr/Zettlr" ["e"=1]
"languagetool-org/languagetool" -> "hunspell/hunspell"
"languagetool-org/languagetool" -> "mozilla/DeepSpeech" ["e"=1]
"languagetool-org/languagetool" -> "LibreTranslate/LibreTranslate" ["e"=1]
"languagetool-org/languagetool" -> "xournalpp/xournalpp" ["e"=1]
"languagetool-org/languagetool" -> "restic/restic" ["e"=1]
"languagetool-org/languagetool" -> "ajayyy/SponsorBlock" ["e"=1]
"languagetool-org/languagetool" -> "rhysd/vim-grammarous" ["e"=1]
"HillZhang1999/MuCGEC" -> "destwang/CTCResources"
"HillZhang1999/MuCGEC" -> "blcuicall/CCL2022-CLTC"
"HillZhang1999/MuCGEC" -> "nghuyong/text-correction-papers"
"HillZhang1999/MuCGEC" -> "HillZhang1999/CTC-Report"
"HillZhang1999/MuCGEC" -> "wdimmy/Automatic-Corpus-Generation"
"HillZhang1999/MuCGEC" -> "HillZhang1999/SynGEC"
"HillZhang1999/MuCGEC" -> "DaDaMrX/ReaLiSe"
"HillZhang1999/MuCGEC" -> "liushulinle/PLOME"
"HillZhang1999/MuCGEC" -> "gitabtion/BertBasedCorrectionModels"
"HillZhang1999/MuCGEC" -> "bitallin/MiduCTC-competition"
"HillZhang1999/MuCGEC" -> "destwang/CTC2021"
"HillZhang1999/MuCGEC" -> "xlxwalex/FCGEC"
"HillZhang1999/MuCGEC" -> "HillZhang1999/gec_error_template"
"HillZhang1999/MuCGEC" -> "masr2000/CLG-CGEC"
"HillZhang1999/MuCGEC" -> "nghuyong/cscd-ime"
"destwang/CTCResources" -> "destwang/CTC2021"
"destwang/CTCResources" -> "DaDaMrX/ReaLiSe"
"destwang/CTCResources" -> "destwang/DCN"
"destwang/CTCResources" -> "liushulinle/PLOME"
"destwang/CTCResources" -> "wdimmy/Automatic-Corpus-Generation"
"destwang/CTCResources" -> "nghuyong/text-correction-papers"
"destwang/CTCResources" -> "HillZhang1999/MuCGEC"
"destwang/CTCResources" -> "gitabtion/BertBasedCorrectionModels"
"destwang/CTCResources" -> "lipiji/TtT"
"destwang/CTCResources" -> "FDChongLi/TwoWaysToImproveCSC"
"destwang/CTCResources" -> "AutoTemp/Shallow-Aggressive-Decoding"
"destwang/CTCResources" -> "blcuicall/CCL2022-CLTC"
"destwang/CTCResources" -> "ACL2020SpellGCN/SpellGCN"
"destwang/CTCResources" -> "onebula/sighan_raw"
"destwang/CTCResources" -> "zhaoyyoo/NLPCC2018_GEC"
"apanly/proofreadv1" -> "PengheLiu/Cn_Speck_Checker"
"wooorm/dictionaries" -> "hunspell/hunspell"
"wooorm/dictionaries" -> "titoBouzout/Dictionaries"
"wooorm/dictionaries" -> "wooorm/nspell"
"wooorm/dictionaries" -> "Wulf/nodehun"
"wooorm/dictionaries" -> "LibreOffice/dictionaries"
"wooorm/dictionaries" -> "cfinke/Typo.js"
"wooorm/dictionaries" -> "elastic/hunspell"
"wooorm/dictionaries" -> "aarondandy/WeCantSpell.Hunspell"
"wooorm/dictionaries" -> "wolfgarbe/SymSpell"
"wooorm/dictionaries" -> "navozenko/LinqSpecs"
"wooorm/dictionaries" -> "xceedsoftware/DocX" ["e"=1]
"wooorm/dictionaries" -> "atom/node-spellchecker"
"wooorm/dictionaries" -> "OpenTaal/opentaal-hunspell"
"wooorm/dictionaries" -> "MSeal/cython_hunspell"
"wooorm/dictionaries" -> "TylerBrinkley/Enums.NET" ["e"=1]
"wordset/wordset-dictionary" -> "freedict/fd-dictionaries"
"wordset/wordset-dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"wordset/wordset-dictionary" -> "adambom/dictionary"
"wordset/wordset-dictionary" -> "dolph/dictionary"
"howl-anderson/hanzi_chaizi" -> "kfcd/chaizi"
"howl-anderson/hanzi_chaizi" -> "howl-anderson/hanzi_char_featurizer"
"howl-anderson/hanzi_chaizi" -> "contr4l/SimilarCharacter"
"howl-anderson/hanzi_chaizi" -> "hanzi-chai/chai"
"howl-anderson/hanzi_chaizi" -> "WenDesi/Chinese_radical"
"howl-anderson/hanzi_chaizi" -> "sfyc23/python-wubi"
"howl-anderson/hanzi_chaizi" -> "liushulinle/PLOME"
"freedict/fd-dictionaries" -> "wordset/wordset-dictionary"
"freedict/fd-dictionaries" -> "freedict/tools"
"freedict/fd-dictionaries" -> "itkach/aard2-android" ["e"=1]
"google-research/lasertagger" -> "tongchangD/text_data_enhancement_with_LaserTagger"
"google-research/lasertagger" -> "425776024/lasertagger-chinese"
"google-research/lasertagger" -> "Mleader2/text_scalpel"
"google-research/lasertagger" -> "chrisjbryant/errant"
"google-research/lasertagger" -> "awasthiabhijeet/PIE"
"google-research/lasertagger" -> "grammarly/gector"
"google-research/lasertagger" -> "wdimmy/Automatic-Corpus-Generation"
"google-research/lasertagger" -> "google-research/bleurt" ["e"=1]
"google-research/lasertagger" -> "CLUEbenchmark/CLUECorpus2020" ["e"=1]
"google-research/lasertagger" -> "ymcui/Chinese-ELECTRA" ["e"=1]
"google-research/lasertagger" -> "Tiiiger/bert_score" ["e"=1]
"google-research/lasertagger" -> "ZhuiyiTechnology/pretrained-models" ["e"=1]
"google-research/lasertagger" -> "YunwenTechnology/Unilm" ["e"=1]
"google-research/lasertagger" -> "ZhuiyiTechnology/t5-pegasus" ["e"=1]
"google-research/lasertagger" -> "google-research/ALBERT" ["e"=1]
"adambom/dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"adambom/dictionary" -> "wordset/wordset-dictionary"
"adambom/dictionary" -> "dolph/dictionary"
"adambom/dictionary" -> "aviaryan/gcide-dictionary-json"
"adambom/dictionary" -> "dwyl/english-words"
"adambom/dictionary" -> "sindresorhus/word-list"
"tasdikrahman/vocabulary" -> "geekpradd/PyDictionary"
"brown-uk/dict_uk" -> "brown-uk/corpus"
"brown-uk/dict_uk" -> "brown-uk/nlp_uk"
"brown-uk/dict_uk" -> "lang-uk/ner-uk"
"brown-uk/dict_uk" -> "grammarly/ua-gec"
"brown-uk/dict_uk" -> "LinguisticAndInformationSystems/mphdict"
"brown-uk/dict_uk" -> "lang-uk/lang-uk.github.io"
"brown-uk/dict_uk" -> "asivokon/awesome-ukrainian-nlp"
"brown-uk/dict_uk" -> "lang-uk/tone-dict-uk"
"brown-uk/dict_uk" -> "lang-uk/ua-gazetteers"
"brown-uk/dict_uk" -> "lang-uk/tonal-model"
"brown-uk/dict_uk" -> "egorsmkv/speech-recognition-uk"
"brown-uk/dict_uk" -> "lang-uk/tokenize-uk"
"brown-uk/dict_uk" -> "mova-institute/zoloto"
"brown-uk/dict_uk" -> "skupriienko/Ukrainian-Stopwords"
"brown-uk/dict_uk" -> "mrgambal/elasticsearch-ukrainian-lemmatizer"
"LuminosoInsight/wordfreq" -> "LuminosoInsight/exquisite-corpus"
"Kyubyong/neural_chinese_transliterator" -> "crownpku/Somiao-Pinyin"
"Kyubyong/neural_chinese_transliterator" -> "Kyubyong/word_prediction"
"Kyubyong/neural_chinese_transliterator" -> "taiqing/pinyin2hanzi"
"Kyubyong/neural_chinese_transliterator" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"Kyubyong/neural_chinese_transliterator" -> "chqiwang/convseg"
"Kyubyong/neural_chinese_transliterator" -> "ankitp94/relationship-extraction"
"Kyubyong/neural_chinese_transliterator" -> "pln-fing-udelar/pghumor"
"Kyubyong/neural_chinese_transliterator" -> "Orekhov/SentenceBreaking"
"howl-anderson/hanzi_char_featurizer" -> "charlesXu86/char_featurizer"
"howl-anderson/hanzi_char_featurizer" -> "howl-anderson/hanzi_chaizi"
"howl-anderson/hanzi_char_featurizer" -> "kfcd/chaizi"
"howl-anderson/hanzi_char_featurizer" -> "contr4l/SimilarCharacter"
"silvio/docker-languagetool" -> "Erikvl87/docker-languagetool"
"RazorSh4rk/random-word-api" -> "mcnaveen/Random-Words-API"
"thunlp/THUCTC" -> "thunlp/THUTag"
"titoBouzout/Dictionaries" -> "wooorm/dictionaries"
"titoBouzout/Dictionaries" -> "hunspell/hunspell"
"titoBouzout/Dictionaries" -> "SublimeText-Markdown/MarkdownEditing" ["e"=1]
"titoBouzout/Dictionaries" -> "hermitdave/FrequencyWords"
"titoBouzout/Dictionaries" -> "jonschlinkert/sublime-monokai-extended" ["e"=1]
"titoBouzout/Dictionaries" -> "bartosz-antosik/vscode-spellright"
"titoBouzout/Dictionaries" -> "SublimeText/LaTeXTools" ["e"=1]
"titoBouzout/Dictionaries" -> "LibreOffice/dictionaries"
"titoBouzout/Dictionaries" -> "randy3k/LaTeXYZ"
"titoBouzout/Dictionaries" -> "jonschlinkert/sublime-markdown-extended" ["e"=1]
"titoBouzout/Dictionaries" -> "randy3k/Terminus" ["e"=1]
"titoBouzout/Dictionaries" -> "Tosche/BubbleKern" ["e"=1]
"titoBouzout/Dictionaries" -> "brown-uk/dict_uk"
"titoBouzout/Dictionaries" -> "revolunet/sublimetext-markdown-preview" ["e"=1]
"titoBouzout/Dictionaries" -> "bakwc/JamSpell"
"bakwc/JamSpell" -> "mammothb/symspellpy"
"bakwc/JamSpell" -> "wolfgarbe/SymSpell"
"bakwc/JamSpell" -> "neuspell/neuspell"
"bakwc/JamSpell" -> "R1j1t/contextualSpellCheck"
"bakwc/JamSpell" -> "IlyaGusev/rnnmorph" ["e"=1]
"bakwc/JamSpell" -> "barrust/pyspellchecker"
"bakwc/JamSpell" -> "MajorTal/DeepSpell"
"bakwc/JamSpell" -> "mhagiwara/github-typo-corpus"
"bakwc/JamSpell" -> "dkulagin/kartaslov" ["e"=1]
"bakwc/JamSpell" -> "buriy/spacy-ru" ["e"=1]
"bakwc/JamSpell" -> "vlarine/transformers-ru" ["e"=1]
"bakwc/JamSpell" -> "VKCOM/YouTokenToMe" ["e"=1]
"bakwc/JamSpell" -> "atpaino/deep-text-corrector"
"bakwc/JamSpell" -> "snakers4/open_stt" ["e"=1]
"bakwc/JamSpell" -> "mhagiwara/xfspell"
"hunspell/hunspell" -> "wooorm/dictionaries"
"hunspell/hunspell" -> "AbiWord/enchant"
"hunspell/hunspell" -> "wolfgarbe/SymSpell"
"hunspell/hunspell" -> "bakwc/JamSpell"
"hunspell/hunspell" -> "nuspell/nuspell"
"hunspell/hunspell" -> "blatinier/pyhunspell"
"hunspell/hunspell" -> "LibreOffice/dictionaries"
"hunspell/hunspell" -> "GNUAspell/aspell"
"hunspell/hunspell" -> "wooorm/nspell"
"hunspell/hunspell" -> "hunspell/hyphen"
"hunspell/hunspell" -> "MSeal/cython_hunspell"
"hunspell/hunspell" -> "titoBouzout/Dictionaries"
"hunspell/hunspell" -> "Wulf/nodehun"
"hunspell/hunspell" -> "languagetool-org/languagetool"
"hunspell/hunspell" -> "cfinke/Typo.js"
"grammarly/gector" -> "awasthiabhijeet/PIE"
"grammarly/gector" -> "chrisjbryant/errant"
"grammarly/gector" -> "kanekomasahiro/bert-gec"
"grammarly/gector" -> "nusnlp/m2scorer"
"grammarly/gector" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"grammarly/gector" -> "wdimmy/Automatic-Corpus-Generation"
"grammarly/gector" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"grammarly/gector" -> "destwang/CTC2021"
"grammarly/gector" -> "MaksTarnavskyi/gector-large"
"grammarly/gector" -> "butsugiri/gec-pseudodata"
"grammarly/gector" -> "google-research-datasets/clang8"
"grammarly/gector" -> "HillZhang1999/MuCGEC"
"grammarly/gector" -> "nusnlp/mlconvgec2018"
"grammarly/gector" -> "michiyasunaga/LM-Critic"
"grammarly/gector" -> "DaDaMrX/ReaLiSe"
"hermitdave/FrequencyWords" -> "Suyash458/WiktionaryParser"
"hermitdave/FrequencyWords" -> "oprogramador/most-common-words-by-language"
"hermitdave/FrequencyWords" -> "barrust/pyspellchecker"
"hermitdave/FrequencyWords" -> "wolfgarbe/SymSpell"
"hermitdave/FrequencyWords" -> "LuminosoInsight/wordfreq"
"hermitdave/FrequencyWords" -> "IlyaSemenov/wikipedia-word-frequency"
"hermitdave/FrequencyWords" -> "tatuylonen/wiktextract"
"hermitdave/FrequencyWords" -> "michmech/lemmatization-lists"
"hermitdave/FrequencyWords" -> "mammothb/symspellpy"
"hermitdave/FrequencyWords" -> "rspeer/wordfreq"
"hermitdave/FrequencyWords" -> "bakwc/JamSpell"
"hermitdave/FrequencyWords" -> "freedict/fd-dictionaries"
"hermitdave/FrequencyWords" -> "Tatoeba/tatoeba2"
"hermitdave/FrequencyWords" -> "titoBouzout/Dictionaries"
"hermitdave/FrequencyWords" -> "first20hours/google-10000-english"
"wolfgarbe/SymSpell" -> "mammothb/symspellpy"
"wolfgarbe/SymSpell" -> "bakwc/JamSpell"
"wolfgarbe/SymSpell" -> "barrust/pyspellchecker"
"wolfgarbe/SymSpell" -> "neuspell/neuspell"
"wolfgarbe/SymSpell" -> "hermitdave/FrequencyWords"
"wolfgarbe/SymSpell" -> "atpaino/deep-text-corrector"
"wolfgarbe/SymSpell" -> "google/sentencepiece" ["e"=1]
"wolfgarbe/SymSpell" -> "hunspell/hunspell"
"wolfgarbe/SymSpell" -> "kpu/kenlm" ["e"=1]
"wolfgarbe/SymSpell" -> "makcedward/nlpaug" ["e"=1]
"wolfgarbe/SymSpell" -> "R1j1t/contextualSpellCheck"
"wolfgarbe/SymSpell" -> "zalandoresearch/flair" ["e"=1]
"wolfgarbe/SymSpell" -> "allenai/allennlp" ["e"=1]
"wolfgarbe/SymSpell" -> "UKPLab/sentence-transformers" ["e"=1]
"wolfgarbe/SymSpell" -> "facebookresearch/StarSpace" ["e"=1]
"e-government-ua/i" -> "arysin/dict_uk"
"e-government-ua/i" -> "dontgiveafish/hryvna-today"
"e-government-ua/i" -> "olexiim/dm"
"e-government-ua/i" -> "muromec/bandera-layout" ["e"=1]
"e-government-ua/i" -> "Papka24/base"
"e-government-ua/i" -> "brown-uk/dict_uk"
"e-government-ua/i" -> "uaoleg/vvkp.in.ua"
"e-government-ua/i" -> "shuvalov-anton/largescaleJS_ru" ["e"=1]
"e-government-ua/i" -> "iliakan/javascript-nodejs" ["e"=1]
"e-government-ua/i" -> "mr-mig/ru-it-chats" ["e"=1]
"PKULCWM/PKUSUMSUM" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"PKULCWM/PKUSUMSUM" -> "Orekhov/SentenceBreaking"
"PKULCWM/PKUSUMSUM" -> "chqiwang/convseg"
"PKULCWM/PKUSUMSUM" -> "hasibi/EntityLinkingRetrieval-ELR" ["e"=1]
"PKULCWM/PKUSUMSUM" -> "ankitp94/relationship-extraction"
"PKULCWM/PKUSUMSUM" -> "thunlp/THUTag"
"PKULCWM/PKUSUMSUM" -> "sildar/potara"
"PKULCWM/PKUSUMSUM" -> "Kyubyong/word_prediction"
"PKULCWM/PKUSUMSUM" -> "boudinfl/sume"
"blcu-nlp/NLPCC_2018_TASK2_GEC" -> "zhaoyyoo/NLPCC2018_GEC"
"nusnlp/m2scorer" -> "chrisjbryant/errant"
"nusnlp/m2scorer" -> "kanekomasahiro/bert-gec"
"nusnlp/m2scorer" -> "awasthiabhijeet/PIE"
"nusnlp/m2scorer" -> "zhaoyyoo/NLPCC2018_GEC"
"nusnlp/m2scorer" -> "blcu-nlp/NLPCC_2018_TASK2_GEC"
"nusnlp/m2scorer" -> "nusnlp/mlconvgec2018"
"nusnlp/m2scorer" -> "grammatical/baselines-emnlp2016"
"nusnlp/m2scorer" -> "grammatical/neural-naacl2018"
"nusnlp/m2scorer" -> "rgcottrell/pytorch-human-performance-gec"
"nusnlp/m2scorer" -> "keisks/jfleg"
"nusnlp/m2scorer" -> "butsugiri/gec-pseudodata"
"nusnlp/m2scorer" -> "grammatical/pretraining-bea2019"
"nusnlp/m2scorer" -> "zhawe01/fairseq-gec"
"nusnlp/m2scorer" -> "cnap/gec-ranking"
"nusnlp/m2scorer" -> "nusnlp/smtgec2017"
"DaDaMrX/ReaLiSe" -> "destwang/DCN"
"DaDaMrX/ReaLiSe" -> "FDChongLi/TwoWaysToImproveCSC"
"DaDaMrX/ReaLiSe" -> "liushulinle/PLOME"
"DaDaMrX/ReaLiSe" -> "wdimmy/Automatic-Corpus-Generation"
"DaDaMrX/ReaLiSe" -> "destwang/CTCResources"
"DaDaMrX/ReaLiSe" -> "destwang/CTC2021"
"DaDaMrX/ReaLiSe" -> "nghuyong/text-correction-papers"
"DaDaMrX/ReaLiSe" -> "ACL2020SpellGCN/SpellGCN"
"DaDaMrX/ReaLiSe" -> "liushulinle/CRASpell"
"DaDaMrX/ReaLiSe" -> "Aopolin-Lv/ECSpell"
"DaDaMrX/ReaLiSe" -> "lipiji/TtT"
"DaDaMrX/ReaLiSe" -> "HillZhang1999/MuCGEC"
"thunlp/THUTag" -> "YeDeming/THUTag"
"thunlp/THUTag" -> "ankitp94/relationship-extraction"
"thunlp/THUTag" -> "thunlp/THUCTC"
"thunlp/THUTag" -> "PKULCWM/PKUSUMSUM"
"thunlp/THUTag" -> "chqiwang/convseg"
"thunlp/THUTag" -> "hasibi/EntityLinkingRetrieval-ELR" ["e"=1]
"thunlp/THUTag" -> "thunlp/THUCKE"
"thunlp/THUTag" -> "Orekhov/SentenceBreaking"
"contr4l/SimilarCharacter" -> "houbb/nlp-hanzi-similar"
"contr4l/SimilarCharacter" -> "howl-anderson/hanzi_chaizi"
"contr4l/SimilarCharacter" -> "kfcd/chaizi"
"contr4l/SimilarCharacter" -> "howl-anderson/hanzi_char_featurizer"
"contr4l/SimilarCharacter" -> "wdimmy/Automatic-Corpus-Generation"
"contr4l/SimilarCharacter" -> "qingyujean/ssc"
"contr4l/SimilarCharacter" -> "liuhuanyong/ChineseEmbedding" ["e"=1]
"contr4l/SimilarCharacter" -> "ccheng16/correction"
"tongchangD/bert_for_corrector" -> "fushengwuyu/chinese_spelling_correction"
"tongchangD/bert_for_corrector" -> "gitabtion/BertBasedCorrectionModels"
"tongchangD/bert_for_corrector" -> "whgaara/pytorch-soft-masked-bert"
"tongchangD/bert_for_corrector" -> "Wingsdh/soft_masked_bert_reiteration"
"tongchangD/bert_for_corrector" -> "beyondacm/Autochecker4Chinese"
"tatuylonen/wiktextract" -> "Suyash458/WiktionaryParser"
"tatuylonen/wiktextract" -> "tatuylonen/wikitextprocessor"
"tatuylonen/wiktextract" -> "tatuylonen/wiktfinnish"
"tatuylonen/wiktextract" -> "globalwordnet/english-wordnet"
"tatuylonen/wiktextract" -> "dkpro/dkpro-jwktl"
"tatuylonen/wiktextract" -> "open-dict-data/ipa-dict" ["e"=1]
"tatuylonen/wiktextract" -> "lingpy/lingpy"
"tatuylonen/wiktextract" -> "dmort27/panphon" ["e"=1]
"tatuylonen/wiktextract" -> "5j9/wikitextparser" ["e"=1]
"tatuylonen/wiktextract" -> "hermitdave/FrequencyWords"
"tatuylonen/wiktextract" -> "componavt/wikokit"
"tatuylonen/wiktextract" -> "adbar/simplemma"
"atpaino/deep-text-corrector" -> "nusnlp/mlconvgec2018"
"atpaino/deep-text-corrector" -> "Currie32/Spell-Checker"
"atpaino/deep-text-corrector" -> "andabi/deep-text-corrector"
"atpaino/deep-text-corrector" -> "Kyubyong/neural_chinese_transliterator"
"atpaino/deep-text-corrector" -> "stanfordmlgroup/nlc"
"atpaino/deep-text-corrector" -> "chrisjbryant/errant"
"atpaino/deep-text-corrector" -> "Kyubyong/word_prediction"
"atpaino/deep-text-corrector" -> "keisks/jfleg"
"atpaino/deep-text-corrector" -> "MajorTal/DeepSpell"
"atpaino/deep-text-corrector" -> "grammatical/baselines-emnlp2016"
"atpaino/deep-text-corrector" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"atpaino/deep-text-corrector" -> "PKULCWM/PKUSUMSUM"
"atpaino/deep-text-corrector" -> "cmusphinx/g2p-seq2seq" ["e"=1]
"atpaino/deep-text-corrector" -> "mammothb/symspellpy"
"atpaino/deep-text-corrector" -> "alvations/pywsd"
"geekpradd/PyDictionary" -> "tasdikrahman/vocabulary"
"gitabtion/BertBasedCorrectionModels" -> "liushulinle/PLOME"
"gitabtion/BertBasedCorrectionModels" -> "wdimmy/Automatic-Corpus-Generation"
"gitabtion/BertBasedCorrectionModels" -> "gitabtion/SoftMaskedBert-PyTorch"
"gitabtion/BertBasedCorrectionModels" -> "whgaara/pytorch-soft-masked-bert"
"gitabtion/BertBasedCorrectionModels" -> "destwang/CTCResources"
"gitabtion/BertBasedCorrectionModels" -> "FDChongLi/TwoWaysToImproveCSC"
"gitabtion/BertBasedCorrectionModels" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"gitabtion/BertBasedCorrectionModels" -> "DaDaMrX/ReaLiSe"
"gitabtion/BertBasedCorrectionModels" -> "destwang/CTC2021"
"gitabtion/BertBasedCorrectionModels" -> "HillZhang1999/MuCGEC"
"gitabtion/BertBasedCorrectionModels" -> "fushengwuyu/chinese_spelling_correction"
"gitabtion/BertBasedCorrectionModels" -> "ACL2020SpellGCN/SpellGCN"
"gitabtion/BertBasedCorrectionModels" -> "lipiji/TtT"
"gitabtion/BertBasedCorrectionModels" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"gitabtion/BertBasedCorrectionModels" -> "nghuyong/text-correction-papers"
"kfcd/chaizi" -> "howl-anderson/hanzi_chaizi"
"kfcd/chaizi" -> "howl-anderson/hanzi_char_featurizer"
"kfcd/chaizi" -> "zhangyics/Chinese-abbreviation-dataset" ["e"=1]
"kfcd/chaizi" -> "contr4l/SimilarCharacter"
"kfcd/chaizi" -> "cjkvi/cjkvi-ids" ["e"=1]
"kfcd/chaizi" -> "hanzi-chai/chai"
"kfcd/chaizi" -> "iqiyi/FASPell" ["e"=1]
"kfcd/chaizi" -> "nonamestreet/weixin_public_corpus" ["e"=1]
"kfcd/chaizi" -> "mozillazg/pinyin-data" ["e"=1]
"kfcd/chaizi" -> "guotong1988/chinese_dictionary" ["e"=1]
"kfcd/chaizi" -> "liushulinle/PLOME"
"kfcd/chaizi" -> "fighting41love/Chinese_from_dongxiexidian" ["e"=1]
"kfcd/chaizi" -> "wainshine/Chinese-Names-Corpus" ["e"=1]
"kfcd/chaizi" -> "skishore/makemeahanzi" ["e"=1]
"kfcd/chaizi" -> "ShannonAI/glyce" ["e"=1]
"liushulinle/PLOME" -> "DaDaMrX/ReaLiSe"
"liushulinle/PLOME" -> "FDChongLi/TwoWaysToImproveCSC"
"liushulinle/PLOME" -> "liushulinle/CRASpell"
"liushulinle/PLOME" -> "destwang/CTCResources"
"liushulinle/PLOME" -> "gitabtion/BertBasedCorrectionModels"
"liushulinle/PLOME" -> "wdimmy/Automatic-Corpus-Generation"
"liushulinle/PLOME" -> "ACL2020SpellGCN/SpellGCN"
"liushulinle/PLOME" -> "destwang/CTC2021"
"liushulinle/PLOME" -> "destwang/DCN"
"liushulinle/PLOME" -> "nghuyong/text-correction-papers"
"liushulinle/PLOME" -> "HillZhang1999/MuCGEC"
"liushulinle/PLOME" -> "lipiji/TtT"
"liushulinle/PLOME" -> "blcuicall/CCL2022-CLTC"
"liushulinle/PLOME" -> "HillZhang1999/CTC-Report"
"liushulinle/PLOME" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"filyp/autocorrect" -> "barrust/pyspellchecker"
"ACL2020SpellGCN/SpellGCN" -> "wdimmy/Automatic-Corpus-Generation"
"ACL2020SpellGCN/SpellGCN" -> "liushulinle/PLOME"
"ACL2020SpellGCN/SpellGCN" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"ACL2020SpellGCN/SpellGCN" -> "DaDaMrX/ReaLiSe"
"ACL2020SpellGCN/SpellGCN" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"ACL2020SpellGCN/SpellGCN" -> "FDChongLi/TwoWaysToImproveCSC"
"ACL2020SpellGCN/SpellGCN" -> "iqiyi/FASPell" ["e"=1]
"ACL2020SpellGCN/SpellGCN" -> "destwang/CTCResources"
"ACL2020SpellGCN/SpellGCN" -> "gitabtion/BertBasedCorrectionModels"
"ACL2020SpellGCN/SpellGCN" -> "whgaara/pytorch-soft-masked-bert"
"ACL2020SpellGCN/SpellGCN" -> "destwang/CTC2021"
"ACL2020SpellGCN/SpellGCN" -> "destwang/DCN"
"ACL2020SpellGCN/SpellGCN" -> "gitabtion/SoftMaskedBert-PyTorch"
"ACL2020SpellGCN/SpellGCN" -> "liushulinle/CRASpell"
"ACL2020SpellGCN/SpellGCN" -> "nghuyong/text-correction-papers"
"FDChongLi/TwoWaysToImproveCSC" -> "destwang/DCN"
"FDChongLi/TwoWaysToImproveCSC" -> "DaDaMrX/ReaLiSe"
"FDChongLi/TwoWaysToImproveCSC" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"FDChongLi/TwoWaysToImproveCSC" -> "liushulinle/PLOME"
"FDChongLi/TwoWaysToImproveCSC" -> "wdimmy/Automatic-Corpus-Generation"
"ccheng16/correction" -> "PengheLiu/Cn_Speck_Checker"
"ccheng16/correction" -> "taozhijiang/chinese_correct_wsd"
"ccheng16/correction" -> "beyondacm/Autochecker4Chinese"
"ccheng16/correction" -> "blcu-nlp/NLPCC_2018_TASK2_GEC"
"ccheng16/correction" -> "swjtu-gec/zlyang-master-dissertation-code"
"ccheng16/correction" -> "zhangsonglei/ChineseSpellingCheck"
"ccheng16/correction" -> "iqiyi/FASPell" ["e"=1]
"destwang/CTC2021" -> "destwang/CTCResources"
"destwang/CTC2021" -> "destwang/DCN"
"destwang/CTC2021" -> "DaDaMrX/ReaLiSe"
"destwang/CTC2021" -> "wdimmy/Automatic-Corpus-Generation"
"destwang/CTC2021" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"destwang/CTC2021" -> "liushulinle/PLOME"
"destwang/CTC2021" -> "lipiji/TtT"
"destwang/CTC2021" -> "gitabtion/SoftMaskedBert-PyTorch"
"destwang/CTC2021" -> "HillZhang1999/CTC-Report"
"destwang/CTC2021" -> "MaksTarnavskyi/gector-large"
"destwang/DCN" -> "FDChongLi/TwoWaysToImproveCSC"
"destwang/DCN" -> "DaDaMrX/ReaLiSe"
"kanekomasahiro/bert-gec" -> "butsugiri/gec-pseudodata"
"kanekomasahiro/bert-gec" -> "nusnlp/m2scorer"
"kanekomasahiro/bert-gec" -> "chrisjbryant/errant"
"kanekomasahiro/bert-gec" -> "kakaobrain/helo_word"
"kanekomasahiro/bert-gec" -> "nusnlp/mlconvgec2018"
"kanekomasahiro/bert-gec" -> "awasthiabhijeet/PIE"
"kanekomasahiro/bert-gec" -> "Katsumata420/generic-pretrained-GEC"
"kanekomasahiro/bert-gec" -> "zhawe01/fairseq-gec"
"kanekomasahiro/bert-gec" -> "grammatical/pretraining-bea2019"
"kanekomasahiro/bert-gec" -> "rgcottrell/pytorch-human-performance-gec"
"kanekomasahiro/bert-gec" -> "yuantiku/fairseq-gec"
"kanekomasahiro/bert-gec" -> "zhaoyyoo/NLPCC2018_GEC"
"kanekomasahiro/bert-gec" -> "google-research-datasets/clang8"
"kanekomasahiro/bert-gec" -> "grammatical/neural-naacl2018"
"kanekomasahiro/bert-gec" -> "swjtu-gec/zlyang-master-dissertation-code"
"qingyujean/ssc" -> "wenyangchou/SimilarCharactor"
"qingyujean/ssc" -> "houbb/nlp-hanzi-similar"
"qingyujean/ssc" -> "wdimmy/Automatic-Corpus-Generation"
"qingyujean/ssc" -> "contr4l/SimilarCharacter"
"swjtu-gec/zlyang-master-dissertation-code" -> "blcu-nlp/GEC-Reading-List"
"wdimmy/Automatic-Corpus-Generation" -> "DaDaMrX/ReaLiSe"
"wdimmy/Automatic-Corpus-Generation" -> "ACL2020SpellGCN/SpellGCN"
"wdimmy/Automatic-Corpus-Generation" -> "liushulinle/PLOME"
"wdimmy/Automatic-Corpus-Generation" -> "FDChongLi/TwoWaysToImproveCSC"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/CTCResources"
"wdimmy/Automatic-Corpus-Generation" -> "gitabtion/BertBasedCorrectionModels"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/CTC2021"
"wdimmy/Automatic-Corpus-Generation" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"wdimmy/Automatic-Corpus-Generation" -> "onebula/sighan_raw"
"wdimmy/Automatic-Corpus-Generation" -> "HillZhang1999/MuCGEC"
"wdimmy/Automatic-Corpus-Generation" -> "zhaoyyoo/NLPCC2018_GEC"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/DCN"
"wdimmy/Automatic-Corpus-Generation" -> "nghuyong/text-correction-papers"
"wdimmy/Automatic-Corpus-Generation" -> "gitabtion/SoftMaskedBert-PyTorch"
"wdimmy/Automatic-Corpus-Generation" -> "lipiji/TtT"
"nghuyong/text-correction-papers" -> "DaDaMrX/ReaLiSe"
"nghuyong/text-correction-papers" -> "liushulinle/CRASpell"
"nghuyong/text-correction-papers" -> "destwang/CTCResources"
"nghuyong/text-correction-papers" -> "masr2000/CLG-CGEC"
"nghuyong/text-correction-papers" -> "HillZhang1999/MuCGEC"
"nghuyong/text-correction-papers" -> "liushulinle/PLOME"
"nghuyong/text-correction-papers" -> "blcuicall/CCL2022-CLTC"
"nghuyong/text-correction-papers" -> "HillZhang1999/gec_error_template"
"nghuyong/text-correction-papers" -> "wdimmy/Automatic-Corpus-Generation"
"nghuyong/text-correction-papers" -> "xlxwalex/FCGEC"
"nghuyong/text-correction-papers" -> "gotutiyan/GEC-Info"
"nghuyong/text-correction-papers" -> "jiahaozhenbang/SCOPE"
"nghuyong/text-correction-papers" -> "bitallin/MiduCTC-competition"
"orenmel/context2vec" -> "wlin12/wang2vec" ["e"=1]
"getalp/Flaubert" -> "TheophileBlard/french-sentiment-analysis-with-bert"
"getalp/Flaubert" -> "getalp/UFSAC"
"globalwordnet/english-wordnet" -> "goodmami/wn"
"taozhijiang/chinese_correct_wsd" -> "PengheLiu/Cn_Speck_Checker"
"taozhijiang/chinese_correct_wsd" -> "ccheng16/correction"
"taozhijiang/chinese_correct_wsd" -> "apanly/proofreadv1"
"taozhijiang/chinese_correct_wsd" -> "beyondacm/Autochecker4Chinese"
"taozhijiang/chinese_correct_wsd" -> "BiLiangLtd/WordSimilarity" ["e"=1]
"taozhijiang/chinese_correct_wsd" -> "fssqawj/SentenceSim"
"brown-uk/nlp_uk" -> "brown-uk/corpus"
"brown-uk/nlp_uk" -> "lang-uk/lang-uk.github.io"
"lang-uk/ner-uk" -> "lang-uk/tokenize-uk"
"lang-uk/ner-uk" -> "lang-uk/ua-gazetteers"
"lang-uk/ner-uk" -> "lang-uk/tone-dict-uk"
"lang-uk/tokenize-uk" -> "lang-uk/ner-uk"
"mhagiwara/github-typo-corpus" -> "mhagiwara/xfspell"
"mhagiwara/github-typo-corpus" -> "chrisjbryant/errant"
"mhagiwara/github-typo-corpus" -> "nusnlp/m2scorer"
"mhagiwara/github-typo-corpus" -> "neuspell/neuspell"
"mhagiwara/github-typo-corpus" -> "grammarly/gector"
"mhagiwara/github-typo-corpus" -> "facebookresearch/moe"
"mhagiwara/github-typo-corpus" -> "nusnlp/mlconvgec2018"
"mhagiwara/github-typo-corpus" -> "tbai2019/HanBert-54k-N" ["e"=1]
"mhagiwara/github-typo-corpus" -> "bakwc/JamSpell"
"mhagiwara/github-typo-corpus" -> "emorynlp/ud-korean" ["e"=1]
"mhagiwara/github-typo-corpus" -> "keisks/jfleg"
"mhagiwara/github-typo-corpus" -> "kanekomasahiro/bert-gec"
"mhagiwara/github-typo-corpus" -> "kakaobrain/nlp-paper-reading" ["e"=1]
"mhagiwara/github-typo-corpus" -> "awasthiabhijeet/PIE"
"mhagiwara/github-typo-corpus" -> "snukky/wikiedits"
"R1j1t/contextualSpellCheck" -> "neuspell/neuspell"
"R1j1t/contextualSpellCheck" -> "bakwc/JamSpell"
"R1j1t/contextualSpellCheck" -> "graphbrain/graphbrain" ["e"=1]
"R1j1t/contextualSpellCheck" -> "KennethEnevoldsen/augmenty" ["e"=1]
"R1j1t/contextualSpellCheck" -> "mammothb/symspellpy"
"R1j1t/contextualSpellCheck" -> "kevinlu1248/pyate" ["e"=1]
"R1j1t/contextualSpellCheck" -> "explosion/floret" ["e"=1]
"bartosz-antosik/vscode-spellright" -> "willgm/git-workshop" ["e"=1]
"bartosz-antosik/vscode-spellright" -> "Jason-Rev/vscode-spell-checker" ["e"=1]
"beyondacm/Autochecker4Chinese" -> "PengheLiu/Cn_Speck_Checker"
"beyondacm/Autochecker4Chinese" -> "taozhijiang/chinese_correct_wsd"
"beyondacm/Autochecker4Chinese" -> "ccheng16/correction"
"beyondacm/Autochecker4Chinese" -> "apanly/proofreadv1"
"beyondacm/Autochecker4Chinese" -> "tongchangD/bert_for_corrector"
"beyondacm/Autochecker4Chinese" -> "hiyoung123/YoungCorrector"
"beyondacm/Autochecker4Chinese" -> "FreeFlyXiaoMa/pycorrector"
"beyondacm/Autochecker4Chinese" -> "fushengwuyu/chinese_spelling_correction"
"beyondacm/Autochecker4Chinese" -> "li-aolong/li-aolong.github.io"
"beyondacm/Autochecker4Chinese" -> "wanglke/Soft-Masked-BERT"
"wenyangchou/SimilarCharactor" -> "qingyujean/ssc"
"danlou/LMMS" -> "uhh-lt/bert-sense"
"danlou/LMMS" -> "getalp/disambiguate"
"danlou/LMMS" -> "getalp/UFSAC"
"nusnlp/mlconvgec2018" -> "grammatical/neural-naacl2018"
"nusnlp/mlconvgec2018" -> "grammatical/baselines-emnlp2016"
"nusnlp/mlconvgec2018" -> "zhawe01/fairseq-gec"
"nusnlp/mlconvgec2018" -> "rgcottrell/pytorch-human-performance-gec"
"nusnlp/mlconvgec2018" -> "keisks/jfleg"
"nusnlp/mlconvgec2018" -> "nusnlp/neuqe"
"nusnlp/mlconvgec2018" -> "kanekomasahiro/bert-gec"
"nusnlp/mlconvgec2018" -> "chrisjbryant/errant"
"nusnlp/mlconvgec2018" -> "nusnlp/m2scorer"
"nusnlp/mlconvgec2018" -> "nusnlp/nbest-reranker"
"nusnlp/mlconvgec2018" -> "nusnlp/smtgec2017"
"nusnlp/mlconvgec2018" -> "getao/human-performance-gec"
"nusnlp/mlconvgec2018" -> "awasthiabhijeet/PIE"
"nusnlp/mlconvgec2018" -> "nusnlp/crosentgec"
"nusnlp/mlconvgec2018" -> "grammatical/pretraining-bea2019"
"Kyubyong/word_prediction" -> "chqiwang/convseg"
"Kyubyong/word_prediction" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"Kyubyong/word_prediction" -> "Kyubyong/neural_chinese_transliterator"
"Kyubyong/word_prediction" -> "ankitp94/relationship-extraction"
"Kyubyong/word_prediction" -> "dice-group/AGDISTIS"
"Kyubyong/word_prediction" -> "PKULCWM/PKUSUMSUM"
"Kyubyong/word_prediction" -> "Orekhov/SentenceBreaking"
"Kyubyong/word_prediction" -> "hasibi/EntityLinkingRetrieval-ELR" ["e"=1]
"gitabtion/SoftMaskedBert-PyTorch" -> "gitabtion/BertBasedCorrectionModels"
"gitabtion/SoftMaskedBert-PyTorch" -> "whgaara/pytorch-soft-masked-bert"
"gitabtion/SoftMaskedBert-PyTorch" -> "destwang/CTC2021"
"matthewreagan/WebstersEnglishDictionary" -> "adambom/dictionary"
"matthewreagan/WebstersEnglishDictionary" -> "dolph/dictionary"
"matthewreagan/WebstersEnglishDictionary" -> "wordset/wordset-dictionary"
"chrisjbryant/errant" -> "nusnlp/m2scorer"
"chrisjbryant/errant" -> "awasthiabhijeet/PIE"
"chrisjbryant/errant" -> "kanekomasahiro/bert-gec"
"chrisjbryant/errant" -> "nusnlp/mlconvgec2018"
"chrisjbryant/errant" -> "grammarly/gector"
"chrisjbryant/errant" -> "keisks/jfleg"
"chrisjbryant/errant" -> "zhawe01/fairseq-gec"
"chrisjbryant/errant" -> "grammatical/neural-naacl2018"
"chrisjbryant/errant" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"chrisjbryant/errant" -> "grammatical/pretraining-bea2019"
"chrisjbryant/errant" -> "butsugiri/gec-pseudodata"
"chrisjbryant/errant" -> "grammatical/baselines-emnlp2016"
"chrisjbryant/errant" -> "kakaobrain/helo_word"
"chrisjbryant/errant" -> "yuantiku/fairseq-gec"
"chrisjbryant/errant" -> "google-research-datasets/clang8"
"xlxwalex/FCGEC" -> "masr2000/CLG-CGEC"
"xlxwalex/FCGEC" -> "HillZhang1999/gec_error_template"
"AniSkywalker/SarcasmDetection" -> "MirunaPislar/Sarcasm-Detection"
"AniSkywalker/SarcasmDetection" -> "pln-fing-udelar/pghumor"
"AniSkywalker/SarcasmDetection" -> "SenticNet/CASCADE"
"AniSkywalker/SarcasmDetection" -> "NLPrinceton/SARC"
"MirunaPislar/Sarcasm-Detection" -> "AniSkywalker/SarcasmDetection"
"MirunaPislar/Sarcasm-Detection" -> "surajr/SarcasmDetection"
"sindresorhus/word-list" -> "sindresorhus/random-word"
"bminixhofer/nlprule" -> "kitten/prosemd-lsp"
"bminixhofer/nlprule" -> "grammarly/gector"
"bminixhofer/nlprule" -> "bminixhofer/tractjs" ["e"=1]
"rspeer/wordfreq" -> "LuminosoInsight/exquisite-corpus"
"wilddom/memrise2anki-extension" -> "pschlette/memrise2anki-extension"
"alvations/pywsd" -> "google-research-datasets/word_sense_disambigation_corpora"
"alvations/pywsd" -> "atpaino/deep-text-corrector"
"alvations/pywsd" -> "kevincobain2000/sentiment_classifier"
"alvations/pywsd" -> "luofuli/word-sense-disambiguation" ["e"=1]
"alvations/pywsd" -> "dice-group/AGDISTIS"
"alvations/pywsd" -> "honnibal/spaCy" ["e"=1]
"alvations/pywsd" -> "asoroa/ukb"
"alvations/pywsd" -> "gsi-upm/sematch" ["e"=1]
"alvations/pywsd" -> "orenmel/context2vec"
"alvations/pywsd" -> "machinalis/iepy" ["e"=1]
"alvations/pywsd" -> "snkim/AutomaticKeyphraseExtraction" ["e"=1]
"alvations/pywsd" -> "Kyubyong/word_prediction"
"alvations/pywsd" -> "idio/wiki2vec" ["e"=1]
"alvations/pywsd" -> "getalp/disambiguate"
"alvations/pywsd" -> "yago-naga/aida" ["e"=1]
"chqiwang/convseg" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"chqiwang/convseg" -> "Kyubyong/word_prediction"
"chqiwang/convseg" -> "ankitp94/relationship-extraction"
"chqiwang/convseg" -> "Orekhov/SentenceBreaking"
"YeDeming/THUTag" -> "thunlp/THUTag"
"mammothb/symspellpy" -> "wolfgarbe/SymSpell"
"mammothb/symspellpy" -> "barrust/pyspellchecker"
"mammothb/symspellpy" -> "bakwc/JamSpell"
"mammothb/symspellpy" -> "neuspell/neuspell"
"mammothb/symspellpy" -> "R1j1t/contextualSpellCheck"
"mammothb/symspellpy" -> "atpaino/deep-text-corrector"
"mammothb/symspellpy" -> "mdcramer/Deep-Speeling"
"mammothb/symspellpy" -> "MajorTal/DeepSpell"
"mammothb/symspellpy" -> "filyp/autocorrect"
"mammothb/symspellpy" -> "grammarly/gector"
"mammothb/symspellpy" -> "chrisjbryant/errant"
"mammothb/symspellpy" -> "luozhouyang/python-string-similarity" ["e"=1]
"hiyoung123/YoungCorrector" -> "WatsonWangZh/AIPractice"
"hiyoung123/YoungCorrector" -> "WeijieChen-MacroAnalyst/LinearAlgebraLectures"
"hiyoung123/YoungCorrector" -> "fooldoc/php-rdkafka-sdk" ["e"=1]
"keredson/wordninja" -> "barrust/pyspellchecker"
"keredson/wordninja" -> "yishuihanhan/wordninja"
"keredson/wordninja" -> "grantjenks/python-wordsegment"
"keredson/wordninja" -> "KennethEnevoldsen/augmenty" ["e"=1]
"keredson/wordninja" -> "jbesomi/texthero" ["e"=1]
"keredson/wordninja" -> "kootenpv/contractions" ["e"=1]
"keredson/wordninja" -> "rspeer/wordfreq"
"dolph/dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"fushengwuyu/chinese_spelling_correction" -> "whgaara/pytorch-soft-masked-bert"
"gutfeeling/word_forms" -> "awasthiabhijeet/PIE"
"gutfeeling/word_forms" -> "chrisjbryant/errant"
"gutfeeling/word_forms" -> "bjascob/LemmInflect"
"gutfeeling/word_forms" -> "grammatical/pretraining-bea2019"
"gutfeeling/word_forms" -> "kanekomasahiro/bert-gec"
"gutfeeling/word_forms" -> "grammarly/gector"
"gutfeeling/word_forms" -> "tasdikrahman/vocabulary"
"gutfeeling/word_forms" -> "nusnlp/m2scorer"
"reinforced/Reinforced.Typings" -> "reinforced/Reinforced.Tecture"
"reinforced/Reinforced.Typings" -> "axelheer/nein-linq" ["e"=1]
"reinforced/Reinforced.Typings" -> "frhagn/Typewriter" ["e"=1]
"reinforced/Reinforced.Typings" -> "navozenko/LinqSpecs"
"reinforced/Reinforced.Typings" -> "jburzynski/TypeGen"
"mcnaveen/Random-Words-API" -> "RazorSh4rk/random-word-api"
"Currie32/Spell-Checker" -> "mdcramer/Deep-Speeling"
"Currie32/Spell-Checker" -> "MajorTal/DeepSpell"
"Currie32/Spell-Checker" -> "surmenok/DeepSpell"
"Currie32/Spell-Checker" -> "atpaino/deep-text-corrector"
"Currie32/Spell-Checker" -> "stanfordmlgroup/nlc"
"Currie32/Spell-Checker" -> "clips/clinspell"
"Currie32/Spell-Checker" -> "pirate/spellchecker"
"brown-uk/corpus" -> "brown-uk/nlp_uk"
"brown-uk/corpus" -> "lang-uk/lang-uk.github.io"
"brown-uk/corpus" -> "brown-uk/dict_uk"
"brown-uk/corpus" -> "lang-uk/ner-uk"
"brown-uk/corpus" -> "mova-institute/zoloto"
"grammarly/ua-gec" -> "asivokon/awesome-ukrainian-nlp"
"grammarly/ua-gec" -> "egorsmkv/speech-recognition-uk"
"grammarly/ua-gec" -> "brown-uk/corpus"
"grammarly/ua-gec" -> "brown-uk/dict_uk"
"grammarly/ua-gec" -> "brown-uk/nlp_uk"
"grammarly/ua-gec" -> "amakukha/stemmers_ukrainian"
"grammarly/ua-gec" -> "lang-uk/ner-uk"
"grammarly/ua-gec" -> "skupriienko/Ukrainian-Stopwords"
"grammarly/ua-gec" -> "lang-uk/tokenize-uk"
"whgaara/pytorch-soft-masked-bert" -> "gitabtion/BertBasedCorrectionModels"
"whgaara/pytorch-soft-masked-bert" -> "wanglke/Soft-Masked-BERT"
"whgaara/pytorch-soft-masked-bert" -> "whgaara/pytorch-roberta"
"whgaara/pytorch-soft-masked-bert" -> "fushengwuyu/chinese_spelling_correction"
"whgaara/pytorch-soft-masked-bert" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"whgaara/pytorch-soft-masked-bert" -> "gitabtion/SoftMaskedBert-PyTorch"
"Raiffeisen-DGTL/ViennaNET" -> "max-arshinov/DotNext-Moscow-2020"
"Raiffeisen-DGTL/ViennaNET" -> "reinforced/Reinforced.Tecture"
"Raiffeisen-DGTL/ViennaNET" -> "Raiffeisen-DGTL/ViennaUI"
"425776024/lasertagger-chinese" -> "Mleader2/text_scalpel"
"Mleader2/text_scalpel" -> "425776024/lasertagger-chinese"
"Mleader2/text_scalpel" -> "tongchangD/text_data_enhancement_with_LaserTagger"
"Mleader2/text_scalpel" -> "Mleader2/simple_effective_text_matching_Chinese"
"Mleader2/text_scalpel" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/text_scalpel" -> "Mleader2/albert_sentence_vector"
"Mleader2/text_scalpel" -> "Mleader2/skeleton_aided_text_generation"
"Mleader2/text_scalpel" -> "Mleader2/generate_couplet"
"PengheLiu/Cn_Speck_Checker" -> "apanly/proofreadv1"
"PengheLiu/Cn_Speck_Checker" -> "taozhijiang/chinese_correct_wsd"
"PengheLiu/Cn_Speck_Checker" -> "beyondacm/Autochecker4Chinese"
"PengheLiu/Cn_Speck_Checker" -> "ccheng16/correction"
"blcuicall/CCL2022-CLTC" -> "blcuicall/cged_datasets"
"blcuicall/CCL2022-CLTC" -> "HillZhang1999/MuCGEC"
"blcuicall/CCL2022-CLTC" -> "nghuyong/text-correction-papers"
"blcuicall/CCL2022-CLTC" -> "liushulinle/CRASpell"
"blcuicall/CCL2022-CLTC" -> "AI-confused/CCL2022_CGED-8_Top1_project"
"blcuicall/CCL2022-CLTC" -> "destwang/CTCResources"
"blcuicall/CCL2022-CLTC" -> "AI-confused/Sequence-to-Action"
"blcuicall/CCL2022-CLTC" -> "DaDaMrX/ReaLiSe"
"liushulinle/CRASpell" -> "liushulinle/PLOME"
"bjascob/pyInflect" -> "bjascob/LemmInflect"
"egorsmkv/speech-recognition-uk" -> "grammarly/ua-gec"
"egorsmkv/speech-recognition-uk" -> "robinhad/ukrainian-tts"
"egorsmkv/speech-recognition-uk" -> "robinhad/voice-recognition-ua"
"egorsmkv/speech-recognition-uk" -> "egorsmkv/ua-silero-demo"
"meetDeveloper/googleDictionaryAPI" -> "meetDeveloper/Dictionary-Anywhere"
"meetDeveloper/googleDictionaryAPI" -> "tatuylonen/wiktextract"
"neuspell/neuspell" -> "R1j1t/contextualSpellCheck"
"neuspell/neuspell" -> "bakwc/JamSpell"
"neuspell/neuspell" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"neuspell/neuspell" -> "grammarly/gector"
"neuspell/neuspell" -> "awasthiabhijeet/PIE"
"neuspell/neuspell" -> "NorskRegnesentral/skweak" ["e"=1]
"neuspell/neuspell" -> "notAI-tech/fastPunct" ["e"=1]
"neuspell/neuspell" -> "mammothb/symspellpy"
"neuspell/neuspell" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"neuspell/neuspell" -> "mhagiwara/github-typo-corpus"
"neuspell/neuspell" -> "chrisjbryant/errant"
"neuspell/neuspell" -> "GEM-benchmark/NL-Augmenter" ["e"=1]
"neuspell/neuspell" -> "recognai/rubrix" ["e"=1]
"neuspell/neuspell" -> "MaartenGr/PolyFuzz" ["e"=1]
"neuspell/neuspell" -> "nlp-uoregon/trankit" ["e"=1]
"Suyash458/WiktionaryParser" -> "tatuylonen/wiktextract"
"Suyash458/WiktionaryParser" -> "componavt/wikokit"
"Suyash458/WiktionaryParser" -> "hermitdave/FrequencyWords"
"Suyash458/WiktionaryParser" -> "words/wiktionary"
"houbb/nlp-hanzi-similar" -> "contr4l/SimilarCharacter"
"bjascob/LemmInflect" -> "bjascob/pyInflect"
"lang-uk/tone-dict-uk" -> "lang-uk/ua-gazetteers"
"hanzi-chai/chai" -> "hanzi-chai/data"
"charlesXu86/char_featurizer" -> "howl-anderson/hanzi_char_featurizer"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "FDChongLi/TwoWaysToImproveCSC"
"MajorTal/DeepSpell" -> "surmenok/DeepSpell"
"MajorTal/DeepSpell" -> "mdcramer/Deep-Speeling"
"MajorTal/DeepSpell" -> "Currie32/Spell-Checker"
"grammatical/pretraining-bea2019" -> "kakaobrain/helo_word"
"nusnlp/neuqe" -> "nusnlp/mlconvgec2018"
"uhh-lt/bert-sense" -> "getalp/disambiguate"
"zhawe01/fairseq-gec" -> "nusnlp/mlconvgec2018"
"zhawe01/fairseq-gec" -> "awasthiabhijeet/PIE"
"zhawe01/fairseq-gec" -> "grammatical/pretraining-bea2019"
"zhawe01/fairseq-gec" -> "grammatical/neural-naacl2018"
"zhawe01/fairseq-gec" -> "kakaobrain/helo_word"
"zhawe01/fairseq-gec" -> "rgcottrell/pytorch-human-performance-gec"
"zhawe01/fairseq-gec" -> "kanekomasahiro/bert-gec"
"zhawe01/fairseq-gec" -> "keisks/jfleg"
"zhawe01/fairseq-gec" -> "chrisjbryant/errant"
"zhawe01/fairseq-gec" -> "butsugiri/gec-pseudodata"
"zhawe01/fairseq-gec" -> "nusnlp/crosentgec"
"zhawe01/fairseq-gec" -> "nusnlp/m2scorer"
"zhawe01/fairseq-gec" -> "nusnlp/neuqe"
"zhawe01/fairseq-gec" -> "getao/human-performance-gec"
"google-research-datasets/word_sense_disambigation_corpora" -> "cltl/wsd-dynamic-sense-vector"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "Mleader2/text_scalpel"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "google-research/lasertagger"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "tongchangD/bert_for_corrector"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "zzy99/epidemic-sentence-pair" ["e"=1]
"tongchangD/text_data_enhancement_with_LaserTagger" -> "425776024/lasertagger-chinese"
"barrust/pyspellchecker" -> "mammothb/symspellpy"
"barrust/pyspellchecker" -> "bakwc/JamSpell"
"barrust/pyspellchecker" -> "filyp/autocorrect"
"barrust/pyspellchecker" -> "wolfgarbe/SymSpell"
"barrust/pyspellchecker" -> "pyenchant/pyenchant"
"barrust/pyspellchecker" -> "neuspell/neuspell"
"barrust/pyspellchecker" -> "R1j1t/contextualSpellCheck"
"barrust/pyspellchecker" -> "blatinier/pyhunspell"
"barrust/pyspellchecker" -> "hermitdave/FrequencyWords"
"barrust/pyspellchecker" -> "keredson/wordninja"
"barrust/pyspellchecker" -> "jxmorris12/language_tool_python" ["e"=1]
"barrust/pyspellchecker" -> "rfk/pyenchant"
"barrust/pyspellchecker" -> "phatpiglet/autocorrect"
"barrust/pyspellchecker" -> "Currie32/Spell-Checker"
"barrust/pyspellchecker" -> "mhagiwara/github-typo-corpus"
"blatinier/pyhunspell" -> "tokestermw/spacy_hunspell" ["e"=1]
"rfk/pyenchant" -> "blatinier/pyhunspell"
"Tatoeba/tatoeba2" -> "Tatoeba/tatoeba-api"
"Tatoeba/tatoeba2" -> "LBeaudoux/tatoebatools"
"Tatoeba/tatoeba2" -> "bitextor/bitextor" ["e"=1]
"Tatoeba/tatoeba2" -> "Tatoeba/imouto"
"Tatoeba/tatoeba2" -> "FooSoft/yomichan" ["e"=1]
"Tatoeba/tatoeba2" -> "michmech/lemmatization-lists"
"Tatoeba/tatoeba2" -> "KanjiVG/kanjivg" ["e"=1]
"Tatoeba/tatoeba2" -> "0xbad1d3a5/Kaku"
"Tatoeba/tatoeba2" -> "freedict/fd-dictionaries"
"Tatoeba/tatoeba2" -> "wilddom/memrise2anki-extension"
"Tatoeba/tatoeba2" -> "tatuylonen/wiktextract"
"Tatoeba/tatoeba2" -> "kantord/LibreLingo" ["e"=1]
"Erikvl87/docker-languagetool" -> "silvio/docker-languagetool"
"LibreOffice/dictionaries" -> "LibreOffice/translations"
"LibreOffice/dictionaries" -> "aarondandy/WeCantSpell.Hunspell"
"AI-confused/CCL2022_CGED-8_Top1_project" -> "AI-confused/Sequence-to-Action"
"voidful/ChineseErrorDataset" -> "imrdong/cged-crf"
"navozenko/LinqSpecs" -> "denis-tsv/AutoFilter"
"cfinke/Typo.js" -> "wooorm/nspell"
"cfinke/Typo.js" -> "Wulf/nodehun"
"cfinke/Typo.js" -> "atom/node-spellchecker"
"cfinke/Typo.js" -> "GitbookIO/hunspell-spellchecker"
"cfinke/Typo.js" -> "badsyntax/jquery-spellchecker"
"cfinke/Typo.js" -> "swenson/ace_spell_check_js"
"cfinke/Typo.js" -> "past/speller"
"arysin/dict_uk" -> "brown-uk/corpus"
"arysin/dict_uk" -> "mrgambal/elasticsearch-ukrainian-lemmatizer"
"arysin/dict_uk" -> "brown-uk/nlp_uk"
"arysin/dict_uk" -> "dontgiveafish/hryvna-today"
"TheophileBlard/french-sentiment-analysis-with-bert" -> "getalp/Flaubert"
"TheophileBlard/french-sentiment-analysis-with-bert" -> "moussaKam/BARThez"
"lipiji/TtT" -> "AutoTemp/Shallow-Aggressive-Decoding"
"lipiji/TtT" -> "imrdong/cged-crf"
"lipiji/TtT" -> "FDChongLi/TwoWaysToImproveCSC"
"lipiji/TtT" -> "destwang/DCN"
"lipiji/TtT" -> "destwang/CTCResources"
"lipiji/TtT" -> "DaDaMrX/ReaLiSe"
"lipiji/TtT" -> "destwang/CTC2021"
"awasthiabhijeet/PIE" -> "chrisjbryant/errant"
"awasthiabhijeet/PIE" -> "nusnlp/m2scorer"
"awasthiabhijeet/PIE" -> "zhawe01/fairseq-gec"
"awasthiabhijeet/PIE" -> "kanekomasahiro/bert-gec"
"awasthiabhijeet/PIE" -> "butsugiri/gec-pseudodata"
"awasthiabhijeet/PIE" -> "grammarly/gector"
"awasthiabhijeet/PIE" -> "grammatical/pretraining-bea2019"
"awasthiabhijeet/PIE" -> "yuantiku/fairseq-gec"
"awasthiabhijeet/PIE" -> "kakaobrain/helo_word"
"awasthiabhijeet/PIE" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"awasthiabhijeet/PIE" -> "google-research-datasets/clang8"
"awasthiabhijeet/PIE" -> "MaksTarnavskyi/gector-large"
"awasthiabhijeet/PIE" -> "nusnlp/mlconvgec2018"
"awasthiabhijeet/PIE" -> "nusnlp/crosentgec"
"awasthiabhijeet/PIE" -> "michiyasunaga/LM-Critic"
"Wulf/nodehun" -> "GitbookIO/hunspell-spellchecker"
"Wulf/nodehun" -> "wooorm/nspell"
"yuantiku/fairseq-gec" -> "butsugiri/gec-pseudodata"
"yuantiku/fairseq-gec" -> "michiyasunaga/LM-Critic"
"yuantiku/fairseq-gec" -> "awasthiabhijeet/PIE"
"yuantiku/fairseq-gec" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"yuantiku/fairseq-gec" -> "kanekomasahiro/bert-gec"
"UKPLab/acl2017-interactive_summarizer" -> "UKPLab/emnlp2018-april"
"Mleader2/albert_sentence_vector" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/skeleton_aided_text_generation"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/generate_couplet"
"Mleader2/skeleton_aided_text_generation" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"zhpmatrix/cged_tf" -> "imrdong/cged-crf"
"reinforced/Reinforced.Tecture" -> "reinforced/Reinforced.Stroke"
"dontgiveafish/hryvna-today" -> "dontgiveafish/hryvna-today-telegram"
"google-research-datasets/clang8" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"google-research-datasets/clang8" -> "gotutiyan/GEC-Info"
"butsugiri/gec-pseudodata" -> "kanekomasahiro/bert-gec"
"butsugiri/gec-pseudodata" -> "kakaobrain/helo_word"
"butsugiri/gec-pseudodata" -> "yuantiku/fairseq-gec"
"butsugiri/gec-pseudodata" -> "awasthiabhijeet/PIE"
"dice-group/AGDISTIS" -> "dice-group/ReCoDa"
"dice-group/AGDISTIS" -> "hasibi/EntityLinkingRetrieval-ELR" ["e"=1]
"dice-group/AGDISTIS" -> "ankitp94/relationship-extraction"
"atom/node-spellchecker" -> "electron-userland/electron-spellchecker" ["e"=1]
"atom/node-spellchecker" -> "atom/language-make"
"atom/node-spellchecker" -> "atom/language-property-list"
"atom/node-spellchecker" -> "atom/language-text" ["e"=1]
"atom/node-spellchecker" -> "atom/node-nslog"
"sildar/potara" -> "boudinfl/sume"
"sildar/potara" -> "UKPLab/acl2017-interactive_summarizer"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "google-research-datasets/clang8"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "yuantiku/fairseq-gec"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "michiyasunaga/LM-Critic"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "gotutiyan/GEC-Info"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "awasthiabhijeet/PIE"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "chrisjbryant/errant"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "thunlp/VERNet"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "nusnlp/esc"
"LaTeXing/LaTeX-cwl" -> "randy3k/LaTeXYZ"
"keisks/jfleg" -> "grammatical/baselines-emnlp2016"
"keisks/jfleg" -> "nusnlp/mlconvgec2018"
"keisks/jfleg" -> "grammatical/neural-naacl2018"
"keisks/jfleg" -> "nusnlp/smtgec2017"
"keisks/jfleg" -> "zhawe01/fairseq-gec"
"keisks/jfleg" -> "chrisjbryant/errant"
"keisks/jfleg" -> "nusnlp/m2scorer"
"keisks/jfleg" -> "getao/human-performance-gec"
"keisks/jfleg" -> "rgcottrell/pytorch-human-performance-gec"
"keisks/jfleg" -> "kanekomasahiro/bert-gec"
"keisks/jfleg" -> "nusnlp/neuqe"
"whgaara/pytorch-roberta" -> "whgaara/pytorch-transformerXL-LongTextClassify"
"kakaobrain/helo_word" -> "grammatical/pretraining-bea2019"
"kakaobrain/helo_word" -> "butsugiri/gec-pseudodata"
"kakaobrain/helo_word" -> "kanekomasahiro/bert-gec"
"kakaobrain/helo_word" -> "nusnlp/crosentgec"
"kakaobrain/helo_word" -> "zhawe01/fairseq-gec"
"kakaobrain/helo_word" -> "awasthiabhijeet/PIE"
"goodmami/wn" -> "nltk/wordnet"
"robinhad/ukrainian-tts" -> "robinhad/ukrainian-ai"
"getalp/disambiguate" -> "getalp/UFSAC"
"getalp/disambiguate" -> "uhh-lt/bert-sense"
"moussaKam/BARThez" -> "Tixierae/OrangeSum"
"moussaKam/BARThez" -> "moussaKam/OrangeSum"
"gotutiyan/GEC-Info" -> "google-research-datasets/clang8"
"gotutiyan/GEC-Info" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"rgcottrell/pytorch-human-performance-gec" -> "nusnlp/mlconvgec2018"
"Steven-Hewitt/Entailment-with-Tensorflow" -> "ankitp94/relationship-extraction"
"Steven-Hewitt/Entailment-with-Tensorflow" -> "Orekhov/SentenceBreaking"
"michiyasunaga/LM-Critic" -> "MaksTarnavskyi/gector-large"
"michiyasunaga/LM-Critic" -> "yuantiku/fairseq-gec"
"michiyasunaga/LM-Critic" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"michiyasunaga/LM-Critic" -> "google-research-datasets/clang8"
"michiyasunaga/LM-Critic" -> "AutoTemp/Shallow-Aggressive-Decoding"
"AbiWord/enchant" -> "pyenchant/pyenchant"
"AbiWord/enchant" -> "GNUAspell/aspell"
"AbiWord/enchant" -> "nuspell/nuspell"
"AbiWord/enchant" -> "zhawe01/fairseq-gec"
"AbiWord/enchant" -> "keisks/jfleg"
"AbiWord/enchant" -> "hunspell/hunspell"
"wooorm/nspell" -> "Wulf/nodehun"
"HSLCY/GlossBERT" -> "danlou/LMMS"
"grammatical/baselines-emnlp2016" -> "nusnlp/mlconvgec2018"
"grammatical/baselines-emnlp2016" -> "nusnlp/smtgec2017"
"grammatical/baselines-emnlp2016" -> "grammatical/neural-naacl2018"
"grammatical/baselines-emnlp2016" -> "getao/human-performance-gec"
"grammatical/baselines-emnlp2016" -> "keisks/jfleg"
"grammatical/baselines-emnlp2016" -> "rgcottrell/pytorch-human-performance-gec"
"grammatical/baselines-emnlp2016" -> "nusnlp/neuqe"
"zhaoyyoo/NLPCC2018_GEC" -> "blcu-nlp/NLPCC_2018_TASK2_GEC"
"zhaoyyoo/NLPCC2018_GEC" -> "voidful/ChineseErrorDataset"
"zhaoyyoo/NLPCC2018_GEC" -> "YingyWang/NLPCC_2018_TASK2_GEC"
"ankitp94/relationship-extraction" -> "Orekhov/SentenceBreaking"
"grammatical/neural-naacl2018" -> "nusnlp/mlconvgec2018"
"grammatical/neural-naacl2018" -> "grammatical/baselines-emnlp2016"
"grammatical/neural-naacl2018" -> "grammatical/pretraining-bea2019"
"grammatical/neural-naacl2018" -> "keisks/jfleg"
"grammatical/neural-naacl2018" -> "nusnlp/neuqe"
"grammatical/neural-naacl2018" -> "zhawe01/fairseq-gec"
"grammatical/neural-naacl2018" -> "nusnlp/nbest-reranker"
"grammatical/neural-naacl2018" -> "rgcottrell/pytorch-human-performance-gec"
"grammatical/neural-naacl2018" -> "nusnlp/m2scorer"
"grammatical/neural-naacl2018" -> "getao/human-performance-gec"
"grammatical/neural-naacl2018" -> "butsugiri/gec-pseudodata"
"grammatical/neural-naacl2018" -> "kakaobrain/helo_word"
"randy3k/LaTeXYZ" -> "LaTeXing/LaTeX-cwl"
"getalp/UFSAC" -> "getalp/disambiguate"
"boudinfl/sume" -> "sildar/potara"
"meetDeveloper/freeDictionaryAPI" ["l"="31.642,28.181"]
"meetDeveloper/Dictionary-Anywhere" ["l"="31.69,28.168"]
"mcnaveen/Random-Words-API" ["l"="31.681,28.127"]
"Suyash458/WiktionaryParser" ["l"="31.649,28.279"]
"wordset/wordset-dictionary" ["l"="31.575,28.187"]
"lukePeavey/quotable" ["l"="27.967,-22.477"]
"tatuylonen/wiktextract" ["l"="31.668,28.257"]
"dwyl/english-words" ["l"="31.599,28.127"]
"words/an-array-of-english-words" ["l"="31.552,28.182"]
"argosopentech/argos-translate" ["l"="-28.083,-21.828"]
"shortcuts/no-neck-pain.nvim" ["l"="-11.26,-20.264"]
"first20hours/google-10000-english" ["l"="31.598,28.213"]
"mortenjust/cleartext-mac" ["l"="28.153,-18.852"]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["l"="32.014,30.41"]
"hermitdave/FrequencyWords" ["l"="31.621,28.338"]
"dolph/dictionary" ["l"="31.593,28.165"]
"derekchuank/high-frequency-vocabulary" ["l"="31.635,28.214"]
"adambom/dictionary" ["l"="31.558,28.147"]
"mahavivo/english-wordlists" ["l"="-29.903,-15.983"]
"dae/anki" ["l"="-30.052,-16.162"]
"yvoronoy/awesome-english" ["l"="27.406,-19.536"]
"LuminosoInsight/wordfreq" ["l"="31.609,28.281"]
"matthewreagan/WebstersEnglishDictionary" ["l"="31.571,28.165"]
"skywind3000/ECDICT" ["l"="-29.912,-16.031"]
"berzerk0/Probable-Wordlists" ["l"="-7.475,-43.307"]
"NaturalNode/natural" ["l"="28.101,27.505"]
"ChinaYiqun/ChineseAug" ["l"="31.305,28.822"]
"WatsonWangZh/AIPractice" ["l"="31.326,28.807"]
"Textualize/textual" ["l"="23.366,3.961"]
"coding-horror/basic-computer-games" ["l"="32.147,-26.648"]
"psf/black" ["l"="23.219,4.004"]
"Textualize/rich" ["l"="23.314,3.976"]
"yt-dlp/yt-dlp" ["l"="-27.571,-17.073"]
"coqui-ai/TTS" ["l"="0.482,39.991"]
"RunaCapital/awesome-oss-alternatives" ["l"="32.237,-26.537"]
"willmcgugan/rich" ["l"="23.277,4.105"]
"tqdm/tqdm" ["l"="23.138,4.217"]
"explosion/spaCy" ["l"="29.888,32.736"]
"crownpku/Somiao-Pinyin" ["l"="31.388,28.371"]
"Kyubyong/neural_chinese_transliterator" ["l"="31.387,28.404"]
"Pelhans/ZASR_tensorflow" ["l"="0.75,39.74"]
"LiuRoy/Pinyin_Demo" ["l"="0.79,40.034"]
"languagetool-org/languagetool" ["l"="31.843,28.445"]
"penpot/penpot" ["l"="32.37,-26.488"]
"cryptomator/cryptomator" ["l"="-27.885,-21.893"]
"zotero/zotero" ["l"="6.187,8.485"]
"Erikvl87/docker-languagetool" ["l"="31.912,28.447"]
"wallabag/wallabag" ["l"="-32.817,-22.896"]
"gorhill/uBlock" ["l"="-27.603,-16.969"]
"jgm/pandoc" ["l"="-11.272,-18.038"]
"Zettlr/Zettlr" ["l"="-26.784,-17.726"]
"hunspell/hunspell" ["l"="31.709,28.462"]
"mozilla/DeepSpeech" ["l"="0.673,39.983"]
"LibreTranslate/LibreTranslate" ["l"="-28.093,-21.787"]
"xournalpp/xournalpp" ["l"="-36.227,3.642"]
"restic/restic" ["l"="-33.719,-20.895"]
"ajayyy/SponsorBlock" ["l"="-28.336,-21.68"]
"rhysd/vim-grammarous" ["l"="-10.616,-22.037"]
"HillZhang1999/MuCGEC" ["l"="31.559,28.706"]
"destwang/CTCResources" ["l"="31.538,28.706"]
"blcuicall/CCL2022-CLTC" ["l"="31.562,28.734"]
"nghuyong/text-correction-papers" ["l"="31.554,28.719"]
"HillZhang1999/CTC-Report" ["l"="31.548,28.691"]
"wdimmy/Automatic-Corpus-Generation" ["l"="31.524,28.707"]
"HillZhang1999/SynGEC" ["l"="31.611,28.726"]
"DaDaMrX/ReaLiSe" ["l"="31.539,28.715"]
"liushulinle/PLOME" ["l"="31.534,28.732"]
"gitabtion/BertBasedCorrectionModels" ["l"="31.508,28.713"]
"bitallin/MiduCTC-competition" ["l"="31.591,28.721"]
"destwang/CTC2021" ["l"="31.519,28.693"]
"xlxwalex/FCGEC" ["l"="31.585,28.734"]
"HillZhang1999/gec_error_template" ["l"="31.575,28.726"]
"masr2000/CLG-CGEC" ["l"="31.579,28.716"]
"nghuyong/cscd-ime" ["l"="31.602,28.706"]
"destwang/DCN" ["l"="31.528,28.72"]
"lipiji/TtT" ["l"="31.534,28.694"]
"FDChongLi/TwoWaysToImproveCSC" ["l"="31.519,28.719"]
"AutoTemp/Shallow-Aggressive-Decoding" ["l"="31.534,28.668"]
"ACL2020SpellGCN/SpellGCN" ["l"="31.515,28.729"]
"onebula/sighan_raw" ["l"="31.522,28.745"]
"zhaoyyoo/NLPCC2018_GEC" ["l"="31.515,28.65"]
"apanly/proofreadv1" ["l"="31.399,28.777"]
"PengheLiu/Cn_Speck_Checker" ["l"="31.421,28.769"]
"wooorm/dictionaries" ["l"="31.756,28.462"]
"titoBouzout/Dictionaries" ["l"="31.725,28.396"]
"wooorm/nspell" ["l"="31.741,28.497"]
"Wulf/nodehun" ["l"="31.761,28.491"]
"LibreOffice/dictionaries" ["l"="31.749,28.426"]
"cfinke/Typo.js" ["l"="31.768,28.519"]
"elastic/hunspell" ["l"="31.792,28.471"]
"aarondandy/WeCantSpell.Hunspell" ["l"="31.776,28.434"]
"wolfgarbe/SymSpell" ["l"="31.617,28.439"]
"navozenko/LinqSpecs" ["l"="31.874,28.516"]
"xceedsoftware/DocX" ["l"="25.923,17.81"]
"atom/node-spellchecker" ["l"="31.811,28.516"]
"OpenTaal/opentaal-hunspell" ["l"="31.783,28.454"]
"MSeal/cython_hunspell" ["l"="31.734,28.472"]
"TylerBrinkley/Enums.NET" ["l"="25.498,17.846"]
"freedict/fd-dictionaries" ["l"="31.577,28.246"]
"howl-anderson/hanzi_chaizi" ["l"="31.503,28.817"]
"kfcd/chaizi" ["l"="31.526,28.815"]
"howl-anderson/hanzi_char_featurizer" ["l"="31.526,28.836"]
"contr4l/SimilarCharacter" ["l"="31.516,28.793"]
"hanzi-chai/chai" ["l"="31.506,28.847"]
"WenDesi/Chinese_radical" ["l"="31.479,28.852"]
"sfyc23/python-wubi" ["l"="31.478,28.831"]
"freedict/tools" ["l"="31.599,28.25"]
"itkach/aard2-android" ["l"="-28.281,-21.671"]
"google-research/lasertagger" ["l"="31.573,28.637"]
"tongchangD/text_data_enhancement_with_LaserTagger" ["l"="31.579,28.668"]
"425776024/lasertagger-chinese" ["l"="31.605,28.653"]
"Mleader2/text_scalpel" ["l"="31.621,28.665"]
"chrisjbryant/errant" ["l"="31.53,28.563"]
"awasthiabhijeet/PIE" ["l"="31.536,28.579"]
"grammarly/gector" ["l"="31.523,28.606"]
"google-research/bleurt" ["l"="29.857,32.315"]
"CLUEbenchmark/CLUECorpus2020" ["l"="32.151,30.322"]
"ymcui/Chinese-ELECTRA" ["l"="32.176,30.299"]
"Tiiiger/bert_score" ["l"="29.84,32.289"]
"ZhuiyiTechnology/pretrained-models" ["l"="32.22,30.276"]
"YunwenTechnology/Unilm" ["l"="32.241,30.37"]
"ZhuiyiTechnology/t5-pegasus" ["l"="32.253,30.384"]
"google-research/ALBERT" ["l"="29.821,32.46"]
"aviaryan/gcide-dictionary-json" ["l"="31.534,28.132"]
"sindresorhus/word-list" ["l"="31.52,28.102"]
"tasdikrahman/vocabulary" ["l"="31.381,28.585"]
"geekpradd/PyDictionary" ["l"="31.346,28.593"]
"brown-uk/dict_uk" ["l"="31.936,28.3"]
"brown-uk/corpus" ["l"="31.963,28.294"]
"brown-uk/nlp_uk" ["l"="31.977,28.289"]
"lang-uk/ner-uk" ["l"="31.932,28.284"]
"grammarly/ua-gec" ["l"="31.958,28.27"]
"LinguisticAndInformationSystems/mphdict" ["l"="31.922,28.324"]
"lang-uk/lang-uk.github.io" ["l"="31.966,28.31"]
"asivokon/awesome-ukrainian-nlp" ["l"="31.936,28.259"]
"lang-uk/tone-dict-uk" ["l"="31.912,28.297"]
"lang-uk/ua-gazetteers" ["l"="31.914,28.284"]
"lang-uk/tonal-model" ["l"="31.943,28.325"]
"egorsmkv/speech-recognition-uk" ["l"="31.967,28.244"]
"lang-uk/tokenize-uk" ["l"="31.948,28.283"]
"mova-institute/zoloto" ["l"="31.954,28.313"]
"skupriienko/Ukrainian-Stopwords" ["l"="31.928,28.271"]
"mrgambal/elasticsearch-ukrainian-lemmatizer" ["l"="31.983,28.309"]
"LuminosoInsight/exquisite-corpus" ["l"="31.599,28.311"]
"Kyubyong/word_prediction" ["l"="31.38,28.439"]
"taiqing/pinyin2hanzi" ["l"="31.366,28.382"]
"Steven-Hewitt/Entailment-with-Tensorflow" ["l"="31.395,28.429"]
"chqiwang/convseg" ["l"="31.358,28.412"]
"ankitp94/relationship-extraction" ["l"="31.365,28.425"]
"pln-fing-udelar/pghumor" ["l"="31.333,28.346"]
"Orekhov/SentenceBreaking" ["l"="31.369,28.417"]
"charlesXu86/char_featurizer" ["l"="31.536,28.863"]
"silvio/docker-languagetool" ["l"="31.942,28.45"]
"RazorSh4rk/random-word-api" ["l"="31.697,28.103"]
"thunlp/THUCTC" ["l"="31.314,28.374"]
"thunlp/THUTag" ["l"="31.324,28.403"]
"SublimeText-Markdown/MarkdownEditing" ["l"="10.014,-35.392"]
"jonschlinkert/sublime-monokai-extended" ["l"="10.023,-35.342"]
"bartosz-antosik/vscode-spellright" ["l"="31.776,28.37"]
"SublimeText/LaTeXTools" ["l"="10.05,-35.397"]
"randy3k/LaTeXYZ" ["l"="31.744,28.358"]
"jonschlinkert/sublime-markdown-extended" ["l"="9.996,-35.376"]
"randy3k/Terminus" ["l"="9.879,-35.281"]
"Tosche/BubbleKern" ["l"="13.264,-32.587"]
"revolunet/sublimetext-markdown-preview" ["l"="10.015,-35.434"]
"bakwc/JamSpell" ["l"="31.587,28.458"]
"mammothb/symspellpy" ["l"="31.554,28.465"]
"neuspell/neuspell" ["l"="31.564,28.504"]
"R1j1t/contextualSpellCheck" ["l"="31.579,28.476"]
"IlyaGusev/rnnmorph" ["l"="-9.33,20.414"]
"barrust/pyspellchecker" ["l"="31.582,28.427"]
"MajorTal/DeepSpell" ["l"="31.515,28.453"]
"mhagiwara/github-typo-corpus" ["l"="31.546,28.522"]
"dkulagin/kartaslov" ["l"="-9.319,20.382"]
"buriy/spacy-ru" ["l"="-9.309,20.396"]
"vlarine/transformers-ru" ["l"="-9.288,20.335"]
"VKCOM/YouTokenToMe" ["l"="29.884,32.413"]
"atpaino/deep-text-corrector" ["l"="31.47,28.471"]
"snakers4/open_stt" ["l"="-9.247,20.291"]
"mhagiwara/xfspell" ["l"="31.593,28.503"]
"AbiWord/enchant" ["l"="31.639,28.504"]
"nuspell/nuspell" ["l"="31.684,28.507"]
"blatinier/pyhunspell" ["l"="31.655,28.426"]
"GNUAspell/aspell" ["l"="31.673,28.485"]
"hunspell/hyphen" ["l"="31.71,28.492"]
"kanekomasahiro/bert-gec" ["l"="31.523,28.583"]
"nusnlp/m2scorer" ["l"="31.516,28.573"]
"PrithivirajDamodaran/Gramformer" ["l"="29.525,32.463"]
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" ["l"="31.536,28.594"]
"MaksTarnavskyi/gector-large" ["l"="31.524,28.632"]
"butsugiri/gec-pseudodata" ["l"="31.548,28.579"]
"google-research-datasets/clang8" ["l"="31.547,28.606"]
"nusnlp/mlconvgec2018" ["l"="31.515,28.55"]
"michiyasunaga/LM-Critic" ["l"="31.542,28.618"]
"oprogramador/most-common-words-by-language" ["l"="31.649,28.32"]
"IlyaSemenov/wikipedia-word-frequency" ["l"="31.662,28.343"]
"michmech/lemmatization-lists" ["l"="31.577,28.311"]
"rspeer/wordfreq" ["l"="31.582,28.342"]
"Tatoeba/tatoeba2" ["l"="31.567,28.278"]
"google/sentencepiece" ["l"="29.919,32.523"]
"kpu/kenlm" ["l"="0.625,39.852"]
"makcedward/nlpaug" ["l"="29.681,32.5"]
"zalandoresearch/flair" ["l"="29.856,32.595"]
"allenai/allennlp" ["l"="29.939,32.599"]
"UKPLab/sentence-transformers" ["l"="29.808,32.535"]
"facebookresearch/StarSpace" ["l"="29.959,32.647"]
"e-government-ua/i" ["l"="32.034,28.305"]
"arysin/dict_uk" ["l"="32.006,28.292"]
"dontgiveafish/hryvna-today" ["l"="32.041,28.278"]
"olexiim/dm" ["l"="32.068,28.329"]
"muromec/bandera-layout" ["l"="7.009,-23.873"]
"Papka24/base" ["l"="32.076,28.294"]
"uaoleg/vvkp.in.ua" ["l"="32.059,28.309"]
"shuvalov-anton/largescaleJS_ru" ["l"="6.733,-23.863"]
"iliakan/javascript-nodejs" ["l"="6.846,-23.863"]
"mr-mig/ru-it-chats" ["l"="6.798,-23.913"]
"PKULCWM/PKUSUMSUM" ["l"="31.353,28.432"]
"hasibi/EntityLinkingRetrieval-ELR" ["l"="25.454,30.92"]
"sildar/potara" ["l"="31.298,28.434"]
"boudinfl/sume" ["l"="31.317,28.434"]
"blcu-nlp/NLPCC_2018_TASK2_GEC" ["l"="31.487,28.658"]
"grammatical/baselines-emnlp2016" ["l"="31.5,28.536"]
"grammatical/neural-naacl2018" ["l"="31.526,28.551"]
"rgcottrell/pytorch-human-performance-gec" ["l"="31.502,28.557"]
"keisks/jfleg" ["l"="31.527,28.538"]
"grammatical/pretraining-bea2019" ["l"="31.511,28.566"]
"zhawe01/fairseq-gec" ["l"="31.542,28.552"]
"cnap/gec-ranking" ["l"="31.574,28.577"]
"nusnlp/smtgec2017" ["l"="31.492,28.549"]
"liushulinle/CRASpell" ["l"="31.544,28.743"]
"Aopolin-Lv/ECSpell" ["l"="31.556,28.752"]
"YeDeming/THUTag" ["l"="31.288,28.383"]
"thunlp/THUCKE" ["l"="31.276,28.404"]
"houbb/nlp-hanzi-similar" ["l"="31.547,28.803"]
"qingyujean/ssc" ["l"="31.544,28.78"]
"liuhuanyong/ChineseEmbedding" ["l"="32.28,30.166"]
"ccheng16/correction" ["l"="31.447,28.753"]
"tongchangD/bert_for_corrector" ["l"="31.46,28.719"]
"fushengwuyu/chinese_spelling_correction" ["l"="31.463,28.738"]
"whgaara/pytorch-soft-masked-bert" ["l"="31.476,28.722"]
"Wingsdh/soft_masked_bert_reiteration" ["l"="31.427,28.719"]
"beyondacm/Autochecker4Chinese" ["l"="31.415,28.754"]
"tatuylonen/wikitextprocessor" ["l"="31.674,28.23"]
"tatuylonen/wiktfinnish" ["l"="31.692,28.254"]
"globalwordnet/english-wordnet" ["l"="31.746,28.22"]
"dkpro/dkpro-jwktl" ["l"="31.696,28.235"]
"open-dict-data/ipa-dict" ["l"="0.513,40.005"]
"lingpy/lingpy" ["l"="31.716,28.25"]
"dmort27/panphon" ["l"="0.4,39.969"]
"5j9/wikitextparser" ["l"="25.369,30.302"]
"componavt/wikokit" ["l"="31.68,28.278"]
"adbar/simplemma" ["l"="31.708,28.271"]
"Currie32/Spell-Checker" ["l"="31.495,28.434"]
"andabi/deep-text-corrector" ["l"="31.435,28.476"]
"stanfordmlgroup/nlc" ["l"="31.459,28.442"]
"cmusphinx/g2p-seq2seq" ["l"="0.58,39.944"]
"alvations/pywsd" ["l"="31.354,28.485"]
"gitabtion/SoftMaskedBert-PyTorch" ["l"="31.492,28.705"]
"hiyoung123/SoftMaskedBert" ["l"="33.177,37.51"]
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" ["l"="31.496,28.722"]
"zhangyics/Chinese-abbreviation-dataset" ["l"="32.313,30.145"]
"cjkvi/cjkvi-ids" ["l"="-32.89,-20.44"]
"iqiyi/FASPell" ["l"="32.106,30.314"]
"nonamestreet/weixin_public_corpus" ["l"="32.357,30.159"]
"mozillazg/pinyin-data" ["l"="0.564,39.984"]
"guotong1988/chinese_dictionary" ["l"="32.254,30.266"]
"fighting41love/Chinese_from_dongxiexidian" ["l"="32.287,30.295"]
"wainshine/Chinese-Names-Corpus" ["l"="32.035,30.255"]
"skishore/makemeahanzi" ["l"="32.759,37.409"]
"ShannonAI/glyce" ["l"="32.319,30.167"]
"filyp/autocorrect" ["l"="31.551,28.426"]
"taozhijiang/chinese_correct_wsd" ["l"="31.419,28.786"]
"swjtu-gec/zlyang-master-dissertation-code" ["l"="31.468,28.67"]
"zhangsonglei/ChineseSpellingCheck" ["l"="31.451,28.781"]
"kakaobrain/helo_word" ["l"="31.546,28.566"]
"Katsumata420/generic-pretrained-GEC" ["l"="31.573,28.594"]
"yuantiku/fairseq-gec" ["l"="31.551,28.592"]
"wenyangchou/SimilarCharactor" ["l"="31.57,28.795"]
"blcu-nlp/GEC-Reading-List" ["l"="31.441,28.674"]
"gotutiyan/GEC-Info" ["l"="31.546,28.635"]
"jiahaozhenbang/SCOPE" ["l"="31.586,28.708"]
"orenmel/context2vec" ["l"="31.296,28.482"]
"wlin12/wang2vec" ["l"="30.667,33.738"]
"getalp/Flaubert" ["l"="31.136,28.487"]
"TheophileBlard/french-sentiment-analysis-with-bert" ["l"="31.104,28.486"]
"getalp/UFSAC" ["l"="31.197,28.492"]
"goodmami/wn" ["l"="31.783,28.193"]
"BiLiangLtd/WordSimilarity" ["l"="32.216,30.296"]
"fssqawj/SentenceSim" ["l"="31.399,28.822"]
"facebookresearch/moe" ["l"="31.491,28.506"]
"tbai2019/HanBert-54k-N" ["l"="44.348,-15"]
"emorynlp/ud-korean" ["l"="44.338,-14.971"]
"kakaobrain/nlp-paper-reading" ["l"="44.455,-15.08"]
"snukky/wikiedits" ["l"="31.522,28.498"]
"graphbrain/graphbrain" ["l"="29.809,29.259"]
"KennethEnevoldsen/augmenty" ["l"="29.396,32.568"]
"kevinlu1248/pyate" ["l"="29.821,29.24"]
"explosion/floret" ["l"="29.326,32.619"]
"willgm/git-workshop" ["l"="12.83,-44.623"]
"Jason-Rev/vscode-spell-checker" ["l"="21.775,-31.559"]
"hiyoung123/YoungCorrector" ["l"="31.357,28.789"]
"FreeFlyXiaoMa/pycorrector" ["l"="31.379,28.746"]
"li-aolong/li-aolong.github.io" ["l"="31.373,28.766"]
"wanglke/Soft-Masked-BERT" ["l"="31.435,28.735"]
"danlou/LMMS" ["l"="31.201,28.51"]
"uhh-lt/bert-sense" ["l"="31.221,28.503"]
"getalp/disambiguate" ["l"="31.239,28.496"]
"nusnlp/neuqe" ["l"="31.519,28.527"]
"nusnlp/nbest-reranker" ["l"="31.551,28.54"]
"getao/human-performance-gec" ["l"="31.512,28.536"]
"nusnlp/crosentgec" ["l"="31.56,28.558"]
"dice-group/AGDISTIS" ["l"="31.352,28.456"]
"AniSkywalker/SarcasmDetection" ["l"="31.285,28.304"]
"MirunaPislar/Sarcasm-Detection" ["l"="31.263,28.285"]
"SenticNet/CASCADE" ["l"="31.288,28.279"]
"NLPrinceton/SARC" ["l"="31.258,28.306"]
"surajr/SarcasmDetection" ["l"="31.243,28.27"]
"sindresorhus/random-word" ["l"="31.503,28.076"]
"bminixhofer/nlprule" ["l"="31.436,28.635"]
"kitten/prosemd-lsp" ["l"="31.393,28.651"]
"bminixhofer/tractjs" ["l"="-0.016,38.622"]
"wilddom/memrise2anki-extension" ["l"="31.508,28.268"]
"pschlette/memrise2anki-extension" ["l"="31.483,28.26"]
"google-research-datasets/word_sense_disambigation_corpora" ["l"="31.308,28.519"]
"kevincobain2000/sentiment_classifier" ["l"="31.318,28.497"]
"luofuli/word-sense-disambiguation" ["l"="8.983,17.218"]
"honnibal/spaCy" ["l"="21.733,28.836"]
"asoroa/ukb" ["l"="31.342,28.516"]
"gsi-upm/sematch" ["l"="25.382,30.896"]
"machinalis/iepy" ["l"="27.236,34.057"]
"snkim/AutomaticKeyphraseExtraction" ["l"="28.588,33.524"]
"idio/wiki2vec" ["l"="25.549,30.888"]
"yago-naga/aida" ["l"="25.596,30.925"]
"mdcramer/Deep-Speeling" ["l"="31.524,28.438"]
"luozhouyang/python-string-similarity" ["l"="29.517,32.66"]
"WeijieChen-MacroAnalyst/LinearAlgebraLectures" ["l"="31.344,28.807"]
"fooldoc/php-rdkafka-sdk" ["l"="33.229,37.455"]
"keredson/wordninja" ["l"="31.55,28.376"]
"yishuihanhan/wordninja" ["l"="31.532,28.353"]
"grantjenks/python-wordsegment" ["l"="31.503,28.349"]
"jbesomi/texthero" ["l"="29.67,32.523"]
"kootenpv/contractions" ["l"="29.446,32.809"]
"gutfeeling/word_forms" ["l"="31.474,28.584"]
"bjascob/LemmInflect" ["l"="31.417,28.596"]
"reinforced/Reinforced.Typings" ["l"="31.955,28.553"]
"reinforced/Reinforced.Tecture" ["l"="32.014,28.572"]
"axelheer/nein-linq" ["l"="25.597,17.633"]
"frhagn/Typewriter" ["l"="25.571,18.068"]
"jburzynski/TypeGen" ["l"="31.973,28.58"]
"surmenok/DeepSpell" ["l"="31.488,28.45"]
"clips/clinspell" ["l"="31.464,28.414"]
"pirate/spellchecker" ["l"="31.482,28.4"]
"amakukha/stemmers_ukrainian" ["l"="31.985,28.26"]
"whgaara/pytorch-roberta" ["l"="31.437,28.709"]
"Raiffeisen-DGTL/ViennaNET" ["l"="32.054,28.592"]
"max-arshinov/DotNext-Moscow-2020" ["l"="32.072,28.612"]
"Raiffeisen-DGTL/ViennaUI" ["l"="32.082,28.59"]
"Mleader2/simple_effective_text_matching_Chinese" ["l"="31.651,28.679"]
"Mleader2/pytorch_lstmcrf_intent_slot" ["l"="31.642,28.67"]
"Mleader2/albert_sentence_vector" ["l"="31.645,28.657"]
"Mleader2/skeleton_aided_text_generation" ["l"="31.653,28.666"]
"Mleader2/generate_couplet" ["l"="31.638,28.682"]
"blcuicall/cged_datasets" ["l"="31.595,28.753"]
"AI-confused/CCL2022_CGED-8_Top1_project" ["l"="31.583,28.763"]
"AI-confused/Sequence-to-Action" ["l"="31.577,28.753"]
"bjascob/pyInflect" ["l"="31.395,28.608"]
"robinhad/ukrainian-tts" ["l"="31.987,28.207"]
"robinhad/voice-recognition-ua" ["l"="31.991,28.231"]
"egorsmkv/ua-silero-demo" ["l"="31.965,28.221"]
"meetDeveloper/googleDictionaryAPI" ["l"="31.706,28.198"]
"NorskRegnesentral/skweak" ["l"="29.491,32.529"]
"notAI-tech/fastPunct" ["l"="-0.062,38.679"]
"GEM-benchmark/NL-Augmenter" ["l"="29.619,32.452"]
"recognai/rubrix" ["l"="29.535,32.529"]
"MaartenGr/PolyFuzz" ["l"="29.497,32.56"]
"nlp-uoregon/trankit" ["l"="29.574,32.461"]
"words/wiktionary" ["l"="31.67,28.294"]
"hanzi-chai/data" ["l"="31.503,28.869"]
"cltl/wsd-dynamic-sense-vector" ["l"="31.284,28.532"]
"zzy99/epidemic-sentence-pair" ["l"="32.317,30.214"]
"pyenchant/pyenchant" ["l"="31.627,28.473"]
"jxmorris12/language_tool_python" ["l"="25.596,37.161"]
"rfk/pyenchant" ["l"="31.633,28.399"]
"phatpiglet/autocorrect" ["l"="31.585,28.392"]
"tokestermw/spacy_hunspell" ["l"="21.639,29.08"]
"Tatoeba/tatoeba-api" ["l"="31.543,28.264"]
"LBeaudoux/tatoebatools" ["l"="31.54,28.278"]
"bitextor/bitextor" ["l"="29.903,32.284"]
"Tatoeba/imouto" ["l"="31.544,28.291"]
"FooSoft/yomichan" ["l"="-30.246,-16.047"]
"KanjiVG/kanjivg" ["l"="-30.292,-15.938"]
"0xbad1d3a5/Kaku" ["l"="31.527,28.247"]
"kantord/LibreLingo" ["l"="-24.776,-19.771"]
"LibreOffice/translations" ["l"="31.771,28.41"]
"voidful/ChineseErrorDataset" ["l"="31.543,28.66"]
"imrdong/cged-crf" ["l"="31.562,28.679"]
"denis-tsv/AutoFilter" ["l"="31.899,28.529"]
"GitbookIO/hunspell-spellchecker" ["l"="31.787,28.505"]
"badsyntax/jquery-spellchecker" ["l"="31.8,28.569"]
"swenson/ace_spell_check_js" ["l"="31.784,28.54"]
"past/speller" ["l"="31.762,28.553"]
"moussaKam/BARThez" ["l"="31.072,28.485"]
"UKPLab/acl2017-interactive_summarizer" ["l"="31.263,28.434"]
"UKPLab/emnlp2018-april" ["l"="31.241,28.432"]
"zhpmatrix/cged_tf" ["l"="31.595,28.686"]
"reinforced/Reinforced.Stroke" ["l"="32.037,28.565"]
"dontgiveafish/hryvna-today-telegram" ["l"="32.061,28.264"]
"dice-group/ReCoDa" ["l"="31.328,28.458"]
"electron-userland/electron-spellchecker" ["l"="23.187,-30.772"]
"atom/language-make" ["l"="31.837,28.519"]
"atom/language-property-list" ["l"="31.821,28.536"]
"atom/language-text" ["l"="-6.271,-2.808"]
"atom/node-nslog" ["l"="31.839,28.537"]
"thunlp/VERNet" ["l"="31.495,28.606"]
"nusnlp/esc" ["l"="31.502,28.62"]
"LaTeXing/LaTeX-cwl" ["l"="31.756,28.34"]
"whgaara/pytorch-transformerXL-LongTextClassify" ["l"="31.411,28.706"]
"nltk/wordnet" ["l"="31.804,28.177"]
"robinhad/ukrainian-ai" ["l"="32.001,28.19"]
"Tixierae/OrangeSum" ["l"="31.051,28.478"]
"moussaKam/OrangeSum" ["l"="31.056,28.494"]
"HSLCY/GlossBERT" ["l"="31.174,28.524"]
"YingyWang/NLPCC_2018_TASK2_GEC" ["l"="31.502,28.661"]
}