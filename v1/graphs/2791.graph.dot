digraph G {
"guofei9987/scikit-opt" -> "geatpy-dev/geatpy"
"guofei9987/scikit-opt" -> "ljvmiranda921/pyswarms"
"guofei9987/scikit-opt" -> "anyoptimization/pymoo"
"guofei9987/scikit-opt" -> "DEAP/deap" ["e"=1]
"guofei9987/scikit-opt" -> "HaaLeo/swarmlib"
"guofei9987/scikit-opt" -> "ahmedfgad/GeneticAlgorithmPython"
"guofei9987/scikit-opt" -> "msu-coinlab/pymoo"
"guofei9987/scikit-opt" -> "kellenf/TSP_collection"
"guofei9987/scikit-opt" -> "PytLab/gaft"
"guofei9987/scikit-opt" -> "BIMK/PlatEMO"
"guofei9987/scikit-opt" -> "zhanwen/MathModel" ["e"=1]
"guofei9987/scikit-opt" -> "thu-ml/tianshou" ["e"=1]
"guofei9987/scikit-opt" -> "scikit-optimize/scikit-optimize" ["e"=1]
"guofei9987/scikit-opt" -> "fmfn/BayesianOptimization" ["e"=1]
"guofei9987/scikit-opt" -> "datawhalechina/easy-rl" ["e"=1]
"ljvmiranda921/pyswarms" -> "tisimst/pyswarm"
"ljvmiranda921/pyswarms" -> "nathanrooy/particle-swarm-optimization"
"ljvmiranda921/pyswarms" -> "HaaLeo/swarmlib"
"ljvmiranda921/pyswarms" -> "guofei9987/scikit-opt"
"ljvmiranda921/pyswarms" -> "NiaOrg/NiaPy"
"ljvmiranda921/pyswarms" -> "jMetal/jMetalPy"
"ljvmiranda921/pyswarms" -> "msu-coinlab/pymoo"
"ljvmiranda921/pyswarms" -> "anyoptimization/pymoo"
"ljvmiranda921/pyswarms" -> "DEAP/deap" ["e"=1]
"ljvmiranda921/pyswarms" -> "SISDevelop/SwarmPackagePy"
"ljvmiranda921/pyswarms" -> "nathanrooy/Particle-Swarm-Optimization-with-Python"
"ljvmiranda921/pyswarms" -> "jerrytheo/psopy"
"ljvmiranda921/pyswarms" -> "PytLab/gaft"
"ljvmiranda921/pyswarms" -> "esa/pagmo2"
"ljvmiranda921/pyswarms" -> "7ossam81/EvoloPy"
"jenetics/jenetics" -> "lagodiuk/genetic-algorithm"
"jenetics/jenetics" -> "MOEAFramework/MOEAFramework"
"jenetics/jenetics" -> "jMetal/jMetal"
"jenetics/jenetics" -> "dwdyer/watchmaker"
"jenetics/jenetics" -> "jenetics/jpx"
"jenetics/jenetics" -> "GMUEClab/ecj"
"jenetics/jenetics" -> "jsvazic/GAHelloWorld"
"jenetics/jenetics" -> "Apress/genetic-algorithms-in-java-basics"
"jenetics/jenetics" -> "deeplearning4j/nd4j" ["e"=1]
"jenetics/jenetics" -> "unitsofmeasurement/unit-api" ["e"=1]
"jenetics/jenetics" -> "encog/encog-java-core" ["e"=1]
"jenetics/jenetics" -> "HanSolo/charts" ["e"=1]
"jenetics/jenetics" -> "kiegroup/optaplanner" ["e"=1]
"jenetics/jenetics" -> "jenetics/prngine"
"jenetics/jenetics" -> "neuroph/neuroph" ["e"=1]
"HaaLeo/swarmlib" -> "Valdecy/pyMetaheuristic"
"HaaLeo/swarmlib" -> "LucXiong/Swarm-intelligence-optimization-algorithm"
"HaaLeo/swarmlib" -> "thieu1995/metaheuristics"
"HaaLeo/swarmlib" -> "nathanrooy/particle-swarm-optimization"
"HaaLeo/swarmlib" -> "thieu1995/mealpy"
"HaaLeo/swarmlib" -> "ljvmiranda921/pyswarms"
"HaaLeo/swarmlib" -> "7ossam81/EvoloPy"
"HaaLeo/swarmlib" -> "rwuilbercq/Hive"
"HaaLeo/swarmlib" -> "JingweiToo/Wrapper-Feature-Selection-Toolbox-Python"
"HaaLeo/swarmlib" -> "jMetal/jMetalPy"
"HaaLeo/swarmlib" -> "NiaOrg/NiaPy"
"HaaLeo/swarmlib" -> "tisimst/pyswarm"
"thieu1995/metaheuristics" -> "thieu1995/mealpy"
"thieu1995/metaheuristics" -> "chasebk/code_FLNN"
"thieu1995/metaheuristics" -> "kkg1999/MetaheuristicOptimization"
"thieu1995/metaheuristics" -> "HaaLeo/swarmlib"
"thieu1995/metaheuristics" -> "Valdecy/pyMetaheuristic"
"CodeReclaimers/neat-python" -> "uber-research/PyTorch-NEAT"
"CodeReclaimers/neat-python" -> "peter-ch/MultiNEAT"
"CodeReclaimers/neat-python" -> "uber-research/deep-neuroevolution"
"CodeReclaimers/neat-python" -> "crisbodnar/TensorFlow-NEAT"
"CodeReclaimers/neat-python" -> "noio/peas"
"CodeReclaimers/neat-python" -> "ukuleleplayer/pureples"
"CodeReclaimers/neat-python" -> "colgreen/sharpneat" ["e"=1]
"CodeReclaimers/neat-python" -> "openai/evolution-strategies-starter"
"CodeReclaimers/neat-python" -> "MorvanZhou/Evolutionary-Algorithm"
"CodeReclaimers/neat-python" -> "google/brain-tokyo-workshop" ["e"=1]
"CodeReclaimers/neat-python" -> "uber-common/deep-neuroevolution"
"CodeReclaimers/neat-python" -> "DEAP/deap" ["e"=1]
"CodeReclaimers/neat-python" -> "wagenaartje/neataptic" ["e"=1]
"CodeReclaimers/neat-python" -> "techwithtim/NEAT-Flappy-Bird" ["e"=1]
"CodeReclaimers/neat-python" -> "hardmaru/estool"
"LiYangSir/Smart-Algorithm" -> "vonsylvia/MATLAB_Algorithm_with_cases"
"LiYangSir/Smart-Algorithm" -> "Shuai-Xie/genetic-algorithm"
"LiYangSir/Smart-Algorithm" -> "kellenf/TSP_collection"
"LiYangSir/Smart-Algorithm" -> "YisuZhou/TSP"
"LiYangSir/Smart-Algorithm" -> "roadwide/AI-Homework"
"LiYangSir/Smart-Algorithm" -> "EddyGao/PSO"
"LiYangSir/Smart-Algorithm" -> "strawberry-magic-pocket/Genetic-Algorithm"
"haris989/Python-Flask-Blog" -> "haris989/Email-Id-Extractor"
"haris989/Python-Flask-Blog" -> "haris989/Email-Id-Extractor-Python"
"haris989/Python-Flask-Blog" -> "haris989/Facebook-AutoChatter"
"haris989/Python-Flask-Blog" -> "haris989/PokeGmail-Go"
"haris989/Python-Flask-Blog" -> "haris989/Utilizer-Excel-version"
"haris989/Python-Flask-Blog" -> "haris989/Similar-rectangles-on-a-larger-rectangle---2D-binpacking-solver"
"haris989/Python-Flask-Blog" -> "haris989/Utilizer"
"haris989/Python-Flask-Blog" -> "NikhilRajPandey/guessthenumber"
"chaolongzhang/tsp" -> "YisuZhou/TSP"
"kellenf/TSP_collection" -> "YisuZhou/TSP"
"kellenf/TSP_collection" -> "LiYangSir/Smart-Algorithm"
"kellenf/TSP_collection" -> "roadwide/AI-Homework"
"kellenf/TSP_collection" -> "chaolongzhang/tsp"
"kellenf/TSP_collection" -> "zifeiyu0531/ga-tsp"
"kellenf/TSP_collection" -> "vonsylvia/MATLAB_Algorithm_with_cases"
"kellenf/TSP_collection" -> "EddyGao/PSO"
"kellenf/TSP_collection" -> "mveres01/pytorch-drl4vrp" ["e"=1]
"kellenf/TSP_collection" -> "privateEye-zzy/TSP"
"kellenf/TSP_collection" -> "Greatpanc/-TSP-"
"kellenf/TSP_collection" -> "KovenYu/TSP"
"kellenf/TSP_collection" -> "guofei9987/scikit-opt"
"kellenf/TSP_collection" -> "marcoscastro/tsp_pso"
"kellenf/TSP_collection" -> "ShiSanChuan/GeneticAlgorithm"
"kellenf/TSP_collection" -> "Rintarooo/TSP_DRL_PtrNet" ["e"=1]
"harvitronix/neural-network-genetic-algorithm" -> "jliphard/DeepEvolve"
"harvitronix/neural-network-genetic-algorithm" -> "aqibsaeed/Genetic-CNN"
"harvitronix/neural-network-genetic-algorithm" -> "handcraftsman/GeneticAlgorithmsWithPython"
"harvitronix/neural-network-genetic-algorithm" -> "ahmedfgad/NeuralGenetic"
"harvitronix/neural-network-genetic-algorithm" -> "joeddav/devol" ["e"=1]
"harvitronix/neural-network-genetic-algorithm" -> "ahmedfgad/GeneticAlgorithmPython"
"harvitronix/neural-network-genetic-algorithm" -> "aqibsaeed/Genetic-Algorithm-RNN"
"harvitronix/neural-network-genetic-algorithm" -> "PytLab/gaft"
"harvitronix/neural-network-genetic-algorithm" -> "vanhooser/TF-Genetic"
"harvitronix/neural-network-genetic-algorithm" -> "MorvanZhou/Evolutionary-Algorithm"
"harvitronix/neural-network-genetic-algorithm" -> "gmontamat/gentun"
"harvitronix/neural-network-genetic-algorithm" -> "DEAP/deap" ["e"=1]
"harvitronix/neural-network-genetic-algorithm" -> "llSourcell/Drone_Flight_Controller"
"harvitronix/neural-network-genetic-algorithm" -> "trevorstephens/gplearn" ["e"=1]
"harvitronix/neural-network-genetic-algorithm" -> "paraschopra/deepneuroevolution"
"msu-coinlab/pymoo" -> "jMetal/jMetalPy"
"msu-coinlab/pymoo" -> "Project-Platypus/Platypus"
"msu-coinlab/pymoo" -> "msu-coinlab/pymop"
"msu-coinlab/pymoo" -> "ianwhale/nsga-net"
"msu-coinlab/pymoo" -> "haris989/NSGA-II"
"msu-coinlab/pymoo" -> "BIMK/PlatEMO"
"msu-coinlab/pymoo" -> "geatpy-dev/geatpy"
"msu-coinlab/pymoo" -> "esa/pagmo2"
"msu-coinlab/pymoo" -> "esa/pygmo2"
"msu-coinlab/pymoo" -> "lmarti/nsgaiii"
"msu-coinlab/pymoo" -> "wreszelewski/nsga2"
"msu-coinlab/pymoo" -> "PytLab/gaft"
"msu-coinlab/pymoo" -> "mikelzc1990/nsganetv2"
"msu-coinlab/pymoo" -> "trevorstephens/gplearn" ["e"=1]
"msu-coinlab/pymoo" -> "mbelmadani/moead-py"
"7ossam81/EvoloPy" -> "thieu1995/mealpy"
"7ossam81/EvoloPy" -> "HaaLeo/swarmlib"
"7ossam81/EvoloPy" -> "thieu1995/metaheuristics"
"7ossam81/EvoloPy" -> "NiaOrg/NiaPy"
"7ossam81/EvoloPy" -> "aljarrahcs/EvoloPy-FS"
"7ossam81/EvoloPy" -> "Valdecy/pyMetaheuristic"
"7ossam81/EvoloPy" -> "SISDevelop/SwarmPackagePy"
"7ossam81/EvoloPy" -> "JingweiToo/Wrapper-Feature-Selection-Toolbox-Python"
"7ossam81/EvoloPy" -> "7ossam81/EvoloPy-NN"
"7ossam81/EvoloPy" -> "ljvmiranda921/pyswarms"
"7ossam81/EvoloPy" -> "gugarosa/opytimizer"
"7ossam81/EvoloPy" -> "Project-Platypus/Platypus"
"7ossam81/EvoloPy" -> "thieu1995/opfunu"
"7ossam81/EvoloPy" -> "Ritam-Guha/Py_FS"
"hardmaru/pytorch_notebooks" -> "hardmaru/estool"
"hardmaru/pytorch_notebooks" -> "axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation"
"hardmaru/pytorch_notebooks" -> "sagelywizard/pytorch-mdn"
"hardmaru/pytorch_notebooks" -> "tonyduan/mdn"
"hardmaru/pytorch_notebooks" -> "hardmaru/WorldModelsExperiments" ["e"=1]
"hardmaru/pytorch_notebooks" -> "ctallec/world-models" ["e"=1]
"hardmaru/pytorch_notebooks" -> "sksq96/pytorch-mdn"
"hardmaru/pytorch_notebooks" -> "deepmind/conditional-neural-process" ["e"=1]
"MorvanZhou/Evolutionary-Algorithm" -> "openai/evolution-strategies-starter"
"MorvanZhou/Evolutionary-Algorithm" -> "handcraftsman/GeneticAlgorithmsWithPython"
"MorvanZhou/Evolutionary-Algorithm" -> "CodeReclaimers/neat-python"
"MorvanZhou/Evolutionary-Algorithm" -> "DEAP/deap" ["e"=1]
"MorvanZhou/Evolutionary-Algorithm" -> "geatpy-dev/geatpy"
"MorvanZhou/Evolutionary-Algorithm" -> "MorvanZhou/Reinforcement-learning-with-tensorflow" ["e"=1]
"MorvanZhou/Evolutionary-Algorithm" -> "uber-research/deep-neuroevolution"
"MorvanZhou/Evolutionary-Algorithm" -> "MorvanZhou/Tensorflow-Tutorial" ["e"=1]
"MorvanZhou/Evolutionary-Algorithm" -> "ahmedfgad/GeneticAlgorithmPython"
"MorvanZhou/Evolutionary-Algorithm" -> "PytLab/gaft"
"MorvanZhou/Evolutionary-Algorithm" -> "MorvanZhou/pytorch-A3C" ["e"=1]
"MorvanZhou/Evolutionary-Algorithm" -> "lmarti/evolutionary-computation-course"
"MorvanZhou/Evolutionary-Algorithm" -> "Alro10/awesome-deep-neuroevolution"
"MorvanZhou/Evolutionary-Algorithm" -> "hardmaru/estool"
"MorvanZhou/Evolutionary-Algorithm" -> "harvitronix/neural-network-genetic-algorithm"
"openai/evolution-strategies-starter" -> "hardmaru/estool"
"openai/evolution-strategies-starter" -> "uber-research/deep-neuroevolution"
"openai/evolution-strategies-starter" -> "atgambardella/pytorch-es"
"openai/evolution-strategies-starter" -> "openai/universe-starter-agent" ["e"=1]
"openai/evolution-strategies-starter" -> "openai/imitation" ["e"=1]
"openai/evolution-strategies-starter" -> "joschu/modular_rl" ["e"=1]
"openai/evolution-strategies-starter" -> "uber-common/deep-neuroevolution"
"openai/evolution-strategies-starter" -> "openai/rllab" ["e"=1]
"openai/evolution-strategies-starter" -> "miyosuda/async_deep_reinforce" ["e"=1]
"openai/evolution-strategies-starter" -> "matthiasplappert/keras-rl" ["e"=1]
"openai/evolution-strategies-starter" -> "williamFalcon/DeepRLHacks" ["e"=1]
"openai/evolution-strategies-starter" -> "pathak22/noreward-rl" ["e"=1]
"openai/evolution-strategies-starter" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"openai/evolution-strategies-starter" -> "openai/roboschool" ["e"=1]
"openai/evolution-strategies-starter" -> "openai/multiagent-competition" ["e"=1]
"uber-research/deep-neuroevolution" -> "uber-research/PyTorch-NEAT"
"uber-research/deep-neuroevolution" -> "openai/evolution-strategies-starter"
"uber-research/deep-neuroevolution" -> "uber-research/safemutations"
"uber-research/deep-neuroevolution" -> "Alro10/awesome-deep-neuroevolution"
"uber-research/deep-neuroevolution" -> "uber-research/poet"
"uber-research/deep-neuroevolution" -> "CodeReclaimers/neat-python"
"uber-research/deep-neuroevolution" -> "uber-research/go-explore" ["e"=1]
"uber-research/deep-neuroevolution" -> "hardmaru/estool"
"uber-research/deep-neuroevolution" -> "uber-research/atari-model-zoo"
"uber-research/deep-neuroevolution" -> "ShawK91/Evolutionary-Reinforcement-Learning"
"uber-research/deep-neuroevolution" -> "uber-research/differentiable-plasticity"
"uber-research/deep-neuroevolution" -> "uber-research/EvoGrad"
"uber-research/deep-neuroevolution" -> "ukuleleplayer/pureples"
"uber-research/deep-neuroevolution" -> "ShawK91/erl_paper_nips18"
"uber-research/deep-neuroevolution" -> "maximecb/gym-minigrid" ["e"=1]
"esa/pagmo2" -> "esa/pygmo2"
"esa/pagmo2" -> "esa/pagmo"
"esa/pagmo2" -> "esa/pykep" ["e"=1]
"esa/pagmo2" -> "Project-Platypus/Platypus"
"esa/pagmo2" -> "kthohr/optim" ["e"=1]
"esa/pagmo2" -> "stevengj/nlopt" ["e"=1]
"esa/pagmo2" -> "esa/pygmo"
"esa/pagmo2" -> "msu-coinlab/pymoo"
"esa/pagmo2" -> "PytLab/gaft"
"esa/pagmo2" -> "jMetal/jMetalPy"
"esa/pagmo2" -> "coin-or/Ipopt" ["e"=1]
"esa/pagmo2" -> "bluescarni/heyoka" ["e"=1]
"esa/pagmo2" -> "darioizzo/audi" ["e"=1]
"esa/pagmo2" -> "darioizzo/dcgp"
"esa/pagmo2" -> "CMA-ES/pycma"
"Project-Platypus/Platypus" -> "jMetal/jMetalPy"
"Project-Platypus/Platypus" -> "msu-coinlab/pymoo"
"Project-Platypus/Platypus" -> "Project-Platypus/Rhodium"
"Project-Platypus/Platypus" -> "esa/pagmo2"
"Project-Platypus/Platypus" -> "pablormier/yabox"
"Project-Platypus/Platypus" -> "MOEAFramework/MOEAFramework"
"Project-Platypus/Platypus" -> "esa/pygmo2"
"Project-Platypus/Platypus" -> "quaquel/EMAworkbench"
"Project-Platypus/Platypus" -> "esa/pagmo"
"Project-Platypus/Platypus" -> "thouska/spotpy" ["e"=1]
"Project-Platypus/Platypus" -> "anyoptimization/pymoo"
"Project-Platypus/Platypus" -> "pywr/pywr"
"Project-Platypus/Platypus" -> "SALib/SALib" ["e"=1]
"Project-Platypus/Platypus" -> "aarongarrett/inspyred"
"Project-Platypus/Platypus" -> "numbbo/coco"
"geatpy-dev/geatpy" -> "guofei9987/scikit-opt"
"geatpy-dev/geatpy" -> "PytLab/gaft"
"geatpy-dev/geatpy" -> "BIMK/PlatEMO"
"geatpy-dev/geatpy" -> "msu-coinlab/pymoo"
"geatpy-dev/geatpy" -> "DEAP/deap" ["e"=1]
"geatpy-dev/geatpy" -> "jMetal/jMetalPy"
"geatpy-dev/geatpy" -> "anyoptimization/pymoo"
"geatpy-dev/geatpy" -> "haris989/NSGA-II"
"geatpy-dev/geatpy" -> "MorvanZhou/Evolutionary-Algorithm"
"geatpy-dev/geatpy" -> "ljvmiranda921/pyswarms"
"geatpy-dev/geatpy" -> "ahmedfgad/GeneticAlgorithmPython"
"geatpy-dev/geatpy" -> "425776024/MOEAD"
"geatpy-dev/geatpy" -> "esa/pagmo2"
"geatpy-dev/geatpy" -> "handcraftsman/GeneticAlgorithmsWithPython"
"geatpy-dev/geatpy" -> "kellenf/TSP_collection"
"pywr/pywr" -> "Project-Platypus/Rhodium"
"haris989/Chrome-password-stealer" -> "haris989/Email-Id-Extractor"
"haris989/Chrome-password-stealer" -> "haris989/Email-Id-Extractor-Python"
"haris989/Chrome-password-stealer" -> "haris989/Facebook-AutoChatter"
"haris989/Chrome-password-stealer" -> "haris989/PokeGmail-Go"
"haris989/Chrome-password-stealer" -> "haris989/Utilizer"
"haris989/Chrome-password-stealer" -> "haris989/Utilizer-Excel-version"
"haris989/Chrome-password-stealer" -> "haris989/Similar-rectangles-on-a-larger-rectangle---2D-binpacking-solver"
"haris989/Chrome-password-stealer" -> "NikhilRajPandey/guessthenumber"
"haris989/Chrome-password-stealer" -> "haris989/Fb_messsage_copier"
"haris989/Chrome-password-stealer" -> "haris989/Python-Flask-Blog"
"modestyachts/ARS" -> "alexis-jacq/numpy_ARS"
"modestyachts/ARS" -> "brain-research/guided-evolutionary-strategies"
"modestyachts/ARS" -> "openai/evolution-strategies-starter"
"modestyachts/ARS" -> "haarnoja/softqlearning" ["e"=1]
"modestyachts/ARS" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"modestyachts/ARS" -> "PatrykChrabaszcz/Canonical_ES_Atari"
"clever-algorithms/CleverAlgorithms" -> "fcampelo/EC-Bestiary"
"parano/GeneticAlgorithm-TSP" -> "dmishin/tsp-solver" ["e"=1]
"ddehueck/pytorch-neat" -> "uber-research/PyTorch-NEAT"
"CMA-ES/pycma" -> "hardmaru/estool"
"CMA-ES/pycma" -> "openai/evolution-strategies-starter"
"CMA-ES/pycma" -> "numbbo/coco"
"CMA-ES/pycma" -> "beniz/libcmaes"
"CMA-ES/pycma" -> "CyberAgent/cmaes"
"CMA-ES/pycma" -> "hardmaru/pytorch_notebooks"
"CMA-ES/pycma" -> "CyberAgentAILab/cmaes"
"CMA-ES/pycma" -> "msu-coinlab/pymoo"
"CMA-ES/pycma" -> "facebookresearch/nevergrad" ["e"=1]
"CMA-ES/pycma" -> "automl/SMAC3" ["e"=1]
"CMA-ES/pycma" -> "esa/pagmo2"
"CMA-ES/pycma" -> "automl/RoBO" ["e"=1]
"CMA-ES/pycma" -> "automl/HpBandSter" ["e"=1]
"CMA-ES/pycma" -> "benelot/pybullet-gym" ["e"=1]
"CMA-ES/pycma" -> "brain-research/guided-evolutionary-strategies"
"handcraftsman/GeneticAlgorithmsWithPython" -> "ahmedfgad/GeneticAlgorithmPython"
"handcraftsman/GeneticAlgorithmsWithPython" -> "harvitronix/neural-network-genetic-algorithm"
"handcraftsman/GeneticAlgorithmsWithPython" -> "PytLab/gaft"
"handcraftsman/GeneticAlgorithmsWithPython" -> "MorvanZhou/Evolutionary-Algorithm"
"handcraftsman/GeneticAlgorithmsWithPython" -> "PacktPublishing/Hands-On-Genetic-Algorithms-with-Python"
"handcraftsman/GeneticAlgorithmsWithPython" -> "Lucretiel/genetics"
"handcraftsman/GeneticAlgorithmsWithPython" -> "DEAP/deap" ["e"=1]
"handcraftsman/GeneticAlgorithmsWithPython" -> "ezstoltz/genetic-algorithm"
"handcraftsman/GeneticAlgorithmsWithPython" -> "parano/GeneticAlgorithm-TSP"
"handcraftsman/GeneticAlgorithmsWithPython" -> "geatpy-dev/geatpy"
"handcraftsman/GeneticAlgorithmsWithPython" -> "trevorstephens/gplearn" ["e"=1]
"handcraftsman/GeneticAlgorithmsWithPython" -> "bz51/GeneticAlgorithm"
"handcraftsman/GeneticAlgorithmsWithPython" -> "kaushalshetty/FeatureSelectionGA" ["e"=1]
"handcraftsman/GeneticAlgorithmsWithPython" -> "guofei9987/scikit-opt"
"handcraftsman/GeneticAlgorithmsWithPython" -> "ahmedfgad/NeuralGenetic"
"haris989/NSGA-II" -> "wreszelewski/nsga2"
"haris989/NSGA-II" -> "baopng/NSGA-II"
"haris989/NSGA-II" -> "ChengHust/NSGA-II"
"haris989/NSGA-II" -> "haris989/PokeGmail-Go"
"haris989/NSGA-II" -> "lmarti/nsgaiii"
"haris989/NSGA-II" -> "haris989/Email-Id-Extractor"
"haris989/NSGA-II" -> "haris989/Email-Id-Extractor-Python"
"haris989/NSGA-II" -> "haris989/Facebook-AutoChatter"
"haris989/NSGA-II" -> "haris989/Utilizer-Excel-version"
"haris989/NSGA-II" -> "haris989/Utilizer"
"haris989/NSGA-II" -> "chudur-budur/nsga2-matlab"
"haris989/NSGA-II" -> "haris989/Python-Flask-Blog"
"haris989/NSGA-II" -> "haris989/TextUtils"
"haris989/NSGA-II" -> "haris989/Similar-rectangles-on-a-larger-rectangle---2D-binpacking-solver"
"haris989/NSGA-II" -> "haris989/Chrome-password-stealer"
"perone/Pyevolve" -> "blaa/PyGene"
"perone/Pyevolve" -> "DEAP/notebooks"
"perrygeo/simanneal" -> "tisimst/pyswarm"
"perrygeo/simanneal" -> "skylergrammer/SimulatedAnnealing"
"perrygeo/simanneal" -> "Lucretiel/genetics"
"perrygeo/simanneal" -> "capaulson/pyKriging" ["e"=1]
"perrygeo/simanneal" -> "tnlin/PokemonGo-TSP"
"perrygeo/simanneal" -> "dwavesystems/dwave-neal"
"perrygeo/simanneal" -> "udacity/AIND-Simulated_Annealing" ["e"=1]
"perrygeo/simanneal" -> "jedrazb/python-tsp-simulated-annealing"
"perrygeo/simanneal" -> "chncyhn/simulated-annealing-tsp"
"perrygeo/simanneal" -> "qulacs/qulacs" ["e"=1]
"perrygeo/simanneal" -> "rmsolgi/geneticalgorithm"
"perrygeo/simanneal" -> "toddwschneider/shiny-salesman"
"anyoptimization/pymoo" -> "jMetal/jMetalPy"
"anyoptimization/pymoo" -> "BIMK/PlatEMO"
"anyoptimization/pymoo" -> "Project-Platypus/Platypus"
"anyoptimization/pymoo" -> "esa/pygmo2"
"anyoptimization/pymoo" -> "geatpy-dev/geatpy"
"anyoptimization/pymoo" -> "guofei9987/scikit-opt"
"anyoptimization/pymoo" -> "haris989/NSGA-II"
"anyoptimization/pymoo" -> "ianwhale/nsga-net"
"anyoptimization/pymoo" -> "ahmedfgad/GeneticAlgorithmPython"
"anyoptimization/pymoo" -> "ljvmiranda921/pyswarms"
"anyoptimization/pymoo" -> "Pyomo/pyomo" ["e"=1]
"anyoptimization/pymoo" -> "baopng/NSGA-II"
"anyoptimization/pymoo" -> "scipopt/PySCIPOpt" ["e"=1]
"anyoptimization/pymoo" -> "HaaLeo/swarmlib"
"anyoptimization/pymoo" -> "SMTorg/smt" ["e"=1]
"MOEAFramework/MOEAFramework" -> "jMetal/jMetal"
"MOEAFramework/MOEAFramework" -> "jMetal/jMetalSP"
"MOEAFramework/MOEAFramework" -> "Project-Platypus/Platypus"
"MOEAFramework/MOEAFramework" -> "jenetics/jenetics"
"MOEAFramework/MOEAFramework" -> "jMetal/jMetalPy"
"MOEAFramework/MOEAFramework" -> "mxgiuliani00/M3O-Multi-Objective-Optimal-Operations"
"jMetal/jMetal" -> "MOEAFramework/MOEAFramework"
"jMetal/jMetal" -> "jMetal/jMetalDocumentation"
"jMetal/jMetal" -> "jMetal/jMetalPy"
"jMetal/jMetal" -> "jMetal/jMetalSP"
"jMetal/jMetal" -> "jMetal/jMetalCpp"
"jMetal/jMetal" -> "jenetics/jenetics"
"jMetal/jMetal" -> "BIMK/PlatEMO"
"jMetal/jMetal" -> "msu-coinlab/pymoo"
"jMetal/jMetal" -> "ianwhale/nsga-net"
"roadwide/AI-Homework" -> "kellenf/TSP_collection"
"roadwide/AI-Homework" -> "YisuZhou/TSP"
"roadwide/AI-Homework" -> "LiYangSir/Smart-Algorithm"
"BIMK/PlatEMO" -> "geatpy-dev/geatpy"
"BIMK/PlatEMO" -> "msu-coinlab/pymoo"
"BIMK/PlatEMO" -> "jMetal/jMetalPy"
"BIMK/PlatEMO" -> "anyoptimization/pymoo"
"BIMK/PlatEMO" -> "jMetal/jMetal"
"BIMK/PlatEMO" -> "guofei9987/scikit-opt"
"BIMK/PlatEMO" -> "425776024/MOEAD"
"BIMK/PlatEMO" -> "MOEAFramework/MOEAFramework"
"BIMK/PlatEMO" -> "haris989/NSGA-II"
"BIMK/PlatEMO" -> "Project-Platypus/Platypus"
"BIMK/PlatEMO" -> "EMI-Group/GMOEA"
"BIMK/PlatEMO" -> "DEAP/deap" ["e"=1]
"BIMK/PlatEMO" -> "yalmip/YALMIP" ["e"=1]
"BIMK/PlatEMO" -> "intLyc/MTO-Platform"
"BIMK/PlatEMO" -> "slow295185031/MOEA-dev"
"atgambardella/pytorch-es" -> "openai/evolution-strategies-starter"
"atgambardella/pytorch-es" -> "MadryLab/cox" ["e"=1]
"atgambardella/pytorch-es" -> "zuoxingdong/VIN_PyTorch_Visdom" ["e"=1]
"atgambardella/pytorch-es" -> "oxwhirl/treeqn" ["e"=1]
"atgambardella/pytorch-es" -> "andrewliao11/dni.pytorch" ["e"=1]
"atgambardella/pytorch-es" -> "alirezamika/evostra"
"atgambardella/pytorch-es" -> "danielkunin/Deeplearning-Visualizations" ["e"=1]
"atgambardella/pytorch-es" -> "prichemond/imperialmathslides" ["e"=1]
"atgambardella/pytorch-es" -> "hardmaru/estool"
"JingweiToo/Wrapper-Feature-Selection-Toolbox" -> "JingweiToo/Filter-Feature-Selection-Toolbox"
"thieu1995/mealpy" -> "thieu1995/metaheuristics"
"thieu1995/mealpy" -> "Valdecy/pyMetaheuristic"
"thieu1995/mealpy" -> "HaaLeo/swarmlib"
"thieu1995/mealpy" -> "gugarosa/opytimizer"
"thieu1995/mealpy" -> "7ossam81/EvoloPy"
"thieu1995/mealpy" -> "thieu1995/opfunu"
"thieu1995/mealpy" -> "kkg1999/MetaheuristicOptimization"
"thieu1995/mealpy" -> "NiaOrg/NiaPy"
"thieu1995/mealpy" -> "jMetal/jMetalPy"
"thieu1995/mealpy" -> "thieu1995/MHA-FS"
"thieu1995/mealpy" -> "LucXiong/Swarm-intelligence-optimization-algorithm"
"thieu1995/mealpy" -> "JingweiToo/Wrapper-Feature-Selection-Toolbox-Python"
"tisimst/pyswarm" -> "nathanrooy/particle-swarm-optimization"
"tisimst/pyswarm" -> "ljvmiranda921/pyswarms"
"tisimst/pyswarm" -> "nathanrooy/Particle-Swarm-Optimization-with-Python"
"tisimst/pyswarm" -> "EddyGao/PSO"
"tisimst/pyswarm" -> "dockleryxk/PSO"
"sagelywizard/pytorch-mdn" -> "tonyduan/mdn"
"sagelywizard/pytorch-mdn" -> "axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation"
"sagelywizard/pytorch-mdn" -> "sksq96/pytorch-mdn"
"sagelywizard/pytorch-mdn" -> "cpmpercussion/keras-mdn-layer"
"sagelywizard/pytorch-mdn" -> "hardmaru/pytorch_notebooks"
"sagelywizard/pytorch-mdn" -> "dusenberrymw/mixture-density-networks"
"Arash-codedev/openGA" -> "olmallet81/GALGO-2.0"
"Arash-codedev/openGA" -> "ruslankerimov/GA"
"bz51/GeneticAlgorithm" -> "Shuai-Xie/genetic-algorithm"
"bz51/GeneticAlgorithm" -> "bz51/AntColonyAlgorithm"
"bz51/GeneticAlgorithm" -> "zhongxiaolong1988/GeneticAlgorithm"
"Valdecy/pyMetaheuristic" -> "Valdecy/pyMultiobjective"
"Valdecy/pyMetaheuristic" -> "LucXiong/Swarm-intelligence-optimization-algorithm"
"Valdecy/pyMetaheuristic" -> "HaaLeo/swarmlib"
"Valdecy/pyMetaheuristic" -> "thieu1995/mealpy"
"Valdecy/pyMetaheuristic" -> "docwza/woa"
"Valdecy/pyMetaheuristic" -> "thieu1995/metaheuristics"
"hardmaru/estool" -> "openai/evolution-strategies-starter"
"hardmaru/estool" -> "CMA-ES/pycma"
"hardmaru/estool" -> "hardmaru/pytorch_notebooks"
"hardmaru/estool" -> "hardmaru/WorldModelsExperiments" ["e"=1]
"hardmaru/estool" -> "AppliedDataSciencePartners/WorldModels" ["e"=1]
"hardmaru/estool" -> "alirezamika/evostra"
"hardmaru/estool" -> "benelot/pybullet-gym" ["e"=1]
"hardmaru/estool" -> "maximecb/gym-minigrid" ["e"=1]
"hardmaru/estool" -> "atgambardella/pytorch-es"
"hardmaru/estool" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"hardmaru/estool" -> "hardmaru/slimevolleygym" ["e"=1]
"hardmaru/estool" -> "ctallec/world-models" ["e"=1]
"hardmaru/estool" -> "uber-common/deep-neuroevolution"
"hardmaru/estool" -> "uber-research/EvoGrad"
"hardmaru/estool" -> "brain-research/guided-evolutionary-strategies"
"chudur-budur/nsga2-matlab" -> "duquanquanquan/improved-NSGA2"
"LucXiong/Swarm-intelligence-optimization-algorithm" -> "changliang5811/SSA_python"
"LucXiong/Swarm-intelligence-optimization-algorithm" -> "Valdecy/pyMetaheuristic"
"LucXiong/Swarm-intelligence-optimization-algorithm" -> "HaaLeo/swarmlib"
"PytLab/gaft" -> "geatpy-dev/geatpy"
"PytLab/gaft" -> "handcraftsman/GeneticAlgorithmsWithPython"
"PytLab/gaft" -> "Lucretiel/genetics"
"PytLab/gaft" -> "esa/pagmo2"
"PytLab/gaft" -> "msu-coinlab/pymoo"
"PytLab/gaft" -> "DEAP/deap" ["e"=1]
"PytLab/gaft" -> "ahmedfgad/GeneticAlgorithmPython"
"PytLab/gaft" -> "guofei9987/scikit-opt"
"PytLab/gaft" -> "Project-Platypus/Platypus"
"PytLab/gaft" -> "jMetal/jMetalPy"
"PytLab/gaft" -> "ljvmiranda921/pyswarms"
"PytLab/gaft" -> "PytLab/VASPy" ["e"=1]
"PytLab/gaft" -> "harvitronix/neural-network-genetic-algorithm"
"PytLab/gaft" -> "MorvanZhou/Evolutionary-Algorithm"
"PytLab/gaft" -> "uber-research/deep-neuroevolution"
"425776024/MOEAD" -> "mbelmadani/moead-py"
"lagodiuk/genetic-algorithm" -> "lagodiuk/genetic-programming"
"EddyGao/PSO" -> "nathanrooy/particle-swarm-optimization"
"EddyGao/PSO" -> "tisimst/pyswarm"
"EddyGao/PSO" -> "ymzx/pso-svm"
"FatKong/Computational_Intelligence_homework" -> "guoyuantao/Intelligent_Algrithm"
"Shuai-Xie/genetic-algorithm" -> "strawberry-magic-pocket/Genetic-Algorithm"
"Shuai-Xie/genetic-algorithm" -> "LiYangSir/Smart-Algorithm"
"Shuai-Xie/genetic-algorithm" -> "yangzhen0512/IntelligentOptimizationAlgorithms"
"Shuai-Xie/genetic-algorithm" -> "vonsylvia/MATLAB_Algorithm_with_cases"
"Shuai-Xie/genetic-algorithm" -> "zhongxiaolong1988/GeneticAlgorithm"
"YisuZhou/TSP" -> "kellenf/TSP_collection"
"YisuZhou/TSP" -> "chaolongzhang/tsp"
"YisuZhou/TSP" -> "zhongxiaolong1988/GeneticAlgorithm"
"YisuZhou/TSP" -> "LiYangSir/Smart-Algorithm"
"YisuZhou/TSP" -> "roadwide/AI-Homework"
"YisuZhou/TSP" -> "privateEye-zzy/TSP"
"YisuZhou/TSP" -> "Greatpanc/-TSP-"
"YisuZhou/TSP" -> "DiamonJoy/TSP"
"YisuZhou/TSP" -> "CzRzChao/SimpleGA"
"YisuZhou/TSP" -> "Greatpanc/-TSP2-"
"YisuZhou/TSP" -> "FatKong/Computational_Intelligence_homework"
"vonsylvia/MATLAB_Algorithm_with_cases" -> "LiYangSir/Smart-Algorithm"
"vonsylvia/MATLAB_Algorithm_with_cases" -> "Shuai-Xie/genetic-algorithm"
"vonsylvia/MATLAB_Algorithm_with_cases" -> "jiaowenlong/PSO"
"vonsylvia/MATLAB_Algorithm_with_cases" -> "strawberry-magic-pocket/Genetic-Algorithm"
"peter-ch/MultiNEAT" -> "MisterTea/HyperNEAT"
"peter-ch/MultiNEAT" -> "noio/peas"
"peter-ch/MultiNEAT" -> "CodeReclaimers/neat-python"
"peter-ch/MultiNEAT" -> "uber-research/PyTorch-NEAT"
"peter-ch/MultiNEAT" -> "colgreen/sharpneat" ["e"=1]
"peter-ch/MultiNEAT" -> "FernandoTorres/NEAT"
"peter-ch/MultiNEAT" -> "ukuleleplayer/pureples"
"peter-ch/MultiNEAT" -> "nikste/tensorflow-neat"
"peter-ch/MultiNEAT" -> "OliverColeman/ahni"
"peter-ch/MultiNEAT" -> "neat-python/neat-python"
"peter-ch/MultiNEAT" -> "sean-dougherty/accneat"
"peter-ch/MultiNEAT" -> "crisbodnar/TensorFlow-NEAT"
"peter-ch/MultiNEAT" -> "hardmaru/backprop-neat-js" ["e"=1]
"peter-ch/MultiNEAT" -> "flxsosa/DeepHyperNEAT"
"ukuleleplayer/pureples" -> "simondlevy/neat-gym"
"ukuleleplayer/pureples" -> "uber-research/PyTorch-NEAT"
"ukuleleplayer/pureples" -> "flxsosa/DeepHyperNEAT"
"RunzheYang/MORL" -> "axelabels/DynMORL"
"RunzheYang/MORL" -> "mit-gfx/PGMORL"
"RunzheYang/MORL" -> "hossam-mossalam/multi-objective-deep-rl"
"RunzheYang/MORL" -> "kshitija2/Interactive-Multi-objective-Reinforcement-Learning"
"RunzheYang/MORL" -> "ttajmajer/morl-dv"
"RunzheYang/MORL" -> "jparkerholder/DvD_ES"
"RunzheYang/MORL" -> "LucasAlegre/mo-gym"
"ahmedfgad/NeuralGenetic" -> "ahmedfgad/NumPyANN"
"ahmedfgad/NeuralGenetic" -> "harvitronix/neural-network-genetic-algorithm"
"ahmedfgad/NeuralGenetic" -> "aqibsaeed/Genetic-Algorithm-RNN"
"changliang5811/SSA_python" -> "LucXiong/Swarm-intelligence-optimization-algorithm"
"chasebk/code_OTWO_ELM" -> "chasebk/code_IQSO_MLP"
"chasebk/code_OTWO_ELM" -> "chasebk/code_OCRO_MLNN"
"chasebk/code_OTWO_ELM" -> "chasebk/EO_CNN"
"strawberry-magic-pocket/Genetic-Algorithm" -> "Shuai-Xie/genetic-algorithm"
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "JingweiToo/Advanced-Feature-Selection-Toolbox"
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "JingweiToo/Wrapper-Feature-Selection-Toolbox"
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "ahcantao/PSOFeatureSelection" ["e"=1]
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "Ritam-Guha/Py_FS"
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "renatoosousa/GeneticAlgorithmForFeatureSelection" ["e"=1]
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" -> "kaushalshetty/FeatureSelectionGA" ["e"=1]
"lmarti/nsgaiii" -> "wreszelewski/nsga2"
"jMetal/jMetalPy" -> "jMetal/jMetal"
"jMetal/jMetalPy" -> "msu-coinlab/pymoo"
"jMetal/jMetalPy" -> "Project-Platypus/Platypus"
"jMetal/jMetalPy" -> "anyoptimization/pymoo"
"jMetal/jMetalPy" -> "MOEAFramework/MOEAFramework"
"jMetal/jMetalPy" -> "esa/pygmo2"
"jMetal/jMetalPy" -> "msu-coinlab/pymop"
"jMetal/jMetalPy" -> "ianwhale/nsga-net"
"jMetal/jMetalPy" -> "aarongarrett/inspyred"
"jMetal/jMetalPy" -> "jMetal/jMetalSP"
"jMetal/jMetalPy" -> "BIMK/PlatEMO"
"jMetal/jMetalPy" -> "jMetal/jMetalCpp"
"jMetal/jMetalPy" -> "esa/pagmo2"
"jMetal/jMetalPy" -> "thieu1995/mealpy"
"jMetal/jMetalPy" -> "haris989/NSGA-II"
"noio/peas" -> "neat-python/neat-python"
"noio/peas" -> "peter-ch/MultiNEAT"
"noio/peas" -> "MisterTea/HyperNEAT"
"EMI-Group/FaPN" -> "ShihuaHuang95/FaPN-full"
"EMI-Group/FaPN" -> "EMI-Group/evoxbench"
"EMI-Group/FaPN" -> "EMI-Group/RelativeNAS"
"EMI-Group/FaPN" -> "EMI-Group/GMPB"
"EMI-Group/FaPN" -> "EMI-Group/GMOEA"
"EMI-Group/FaPN" -> "EMI-Group/Incremental-Optimization"
"EMI-Group/FaPN" -> "EMI-Group/TransferLearning-Tasks"
"EMI-Group/FaPN" -> "speedinghzl/AlignSeg" ["e"=1]
"EMI-Group/FaPN" -> "Picsart-AI-Research/SeMask-Segmentation" ["e"=1]
"EMI-Group/FaPN" -> "hyz-xmaster/swa_object_detection" ["e"=1]
"EMI-Group/FaPN" -> "lxtGH/SFSegNets" ["e"=1]
"ShiSanChuan/GeneticAlgorithm" -> "ruslankerimov/GA"
"ymzx/pso-svm" -> "RamanSinghca/PSO-Based-SVR" ["e"=1]
"ahmedfgad/GeneticAlgorithmPython" -> "handcraftsman/GeneticAlgorithmsWithPython"
"ahmedfgad/GeneticAlgorithmPython" -> "rmsolgi/geneticalgorithm"
"ahmedfgad/GeneticAlgorithmPython" -> "DEAP/deap" ["e"=1]
"ahmedfgad/GeneticAlgorithmPython" -> "harvitronix/neural-network-genetic-algorithm"
"ahmedfgad/GeneticAlgorithmPython" -> "anyoptimization/pymoo"
"ahmedfgad/GeneticAlgorithmPython" -> "PytLab/gaft"
"ahmedfgad/GeneticAlgorithmPython" -> "guofei9987/scikit-opt"
"ahmedfgad/GeneticAlgorithmPython" -> "trevorstephens/gplearn" ["e"=1]
"ahmedfgad/GeneticAlgorithmPython" -> "msu-coinlab/pymoo"
"ahmedfgad/GeneticAlgorithmPython" -> "nnaisense/evotorch" ["e"=1]
"ahmedfgad/GeneticAlgorithmPython" -> "ezstoltz/genetic-algorithm"
"ahmedfgad/GeneticAlgorithmPython" -> "ahmedfgad/NeuralGenetic"
"ahmedfgad/GeneticAlgorithmPython" -> "MorvanZhou/Evolutionary-Algorithm"
"ahmedfgad/GeneticAlgorithmPython" -> "ahmedfgad/TorchGA"
"ahmedfgad/GeneticAlgorithmPython" -> "ljvmiranda921/pyswarms"
"EMI-Group/GMOEA" -> "EMI-Group/TransferLearning-Tasks"
"EMI-Group/GMOEA" -> "EMI-Group/GMPB"
"EMI-Group/GMOEA" -> "EMI-Group/Incremental-Optimization"
"EMI-Group/GMOEA" -> "EMI-Group/RelativeNAS"
"EMI-Group/GMOEA" -> "EMI-Group/DenseNAS"
"nathanrooy/particle-swarm-optimization" -> "tisimst/pyswarm"
"nathanrooy/particle-swarm-optimization" -> "HaaLeo/swarmlib"
"nathanrooy/particle-swarm-optimization" -> "shiluqiang/PSO_python"
"nathanrooy/particle-swarm-optimization" -> "EddyGao/PSO"
"NiaOrg/NiaPy" -> "buma/BatAlgorithm"
"NiaOrg/NiaPy" -> "timzatko/Sklearn-Nature-Inspired-Algorithms"
"NiaOrg/NiaPy" -> "lukapecnik/NiaAML"
"NiaOrg/NiaPy" -> "7ossam81/EvoloPy"
"NiaOrg/NiaPy" -> "NiaOrg/NiaPy-examples"
"NiaOrg/NiaPy" -> "firefly-cpp/sport-activities-features"
"NiaOrg/NiaPy" -> "thieu1995/mealpy"
"NiaOrg/NiaPy" -> "SISDevelop/SwarmPackagePy"
"mikelzc1990/nsganetv2" -> "ianwhale/nsga-net"
"mikelzc1990/nsganetv2" -> "human-analysis/neural-architecture-transfer" ["e"=1]
"mikelzc1990/nsganetv2" -> "EMI-Group/GMOEA"
"sg-nm/cgp-cnn" -> "sg-nm/cgp-cnn-PyTorch"
"sg-nm/cgp-cnn-PyTorch" -> "sg-nm/cgp-cnn"
"ianwhale/nsga-net" -> "mikelzc1990/nsganetv2"
"ianwhale/nsga-net" -> "google-research/nasbench" ["e"=1]
"ianwhale/nsga-net" -> "megvii-model/SinglePathOneShot" ["e"=1]
"ianwhale/nsga-net" -> "aqibsaeed/Genetic-CNN"
"ianwhale/nsga-net" -> "sg-nm/cgp-cnn-PyTorch"
"ianwhale/nsga-net" -> "msu-coinlab/pymoo"
"ianwhale/nsga-net" -> "xiaomi-automl/FairNAS" ["e"=1]
"ianwhale/nsga-net" -> "wreszelewski/nsga2"
"ianwhale/nsga-net" -> "human-analysis/neural-architecture-transfer" ["e"=1]
"jliphard/DeepEvolve" -> "harvitronix/neural-network-genetic-algorithm"
"yangzhen0512/IntelligentOptimizationAlgorithms" -> "heihei12305/MOPSO"
"yangzhen0512/IntelligentOptimizationAlgorithms" -> "kuhnLIN/GA_PSO"
"yangzhen0512/IntelligentOptimizationAlgorithms" -> "jullyjelly/Intelligent_Algorithm"
"karush17/esac" -> "karush17/PyTorch-Tutorials"
"karush17/esac" -> "redraven17/CapsNet-1D"
"karush17/esac" -> "karush17/Neural-Art-Tensorflow"
"karush17/esac" -> "karush17/Evolution-Strategies-PyTorch"
"karush17/esac" -> "karush17/emix"
"chncyhn/simulated-annealing-tsp" -> "jedrazb/python-tsp-simulated-annealing"
"chncyhn/simulated-annealing-tsp" -> "tnlin/PokemonGo-TSP"
"numbbo/coco" -> "beniz/libcmaes"
"numbbo/coco" -> "ryojitanabe/reproblems"
"numbbo/coco" -> "NiMlr/High-Dim-ES-RL"
"numbbo/coco" -> "CyberAgent/cmaes"
"numbbo/coco" -> "aminnayebi/HesBO" ["e"=1]
"numbbo/coco" -> "ziyuw/rembo" ["e"=1]
"numbbo/coco" -> "uber-research/TuRBO" ["e"=1]
"numbbo/coco" -> "IOHprofiler/IOHexperimenter"
"numbbo/coco" -> "mikeagn/CEC2013"
"axelabels/DynMORL" -> "RunzheYang/MORL"
"axelabels/DynMORL" -> "ttajmajer/morl-dv"
"axelabels/DynMORL" -> "hossam-mossalam/multi-objective-deep-rl"
"axelabels/DynMORL" -> "mit-gfx/PGMORL"
"beniz/libcmaes" -> "numbbo/coco"
"beniz/libcmaes" -> "CMA-ES/c-cmaes"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "sagelywizard/pytorch-mdn"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "cpmpercussion/keras-mdn-layer"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "hardmaru/pytorch_notebooks"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "tonyduan/mdn"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "RobRomijnders/RNN_basketball"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "sksq96/pytorch-mdn"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "yanji84/keras-mdn"
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "vvanirudh/deep-ensembles-uncertainty" ["e"=1]
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "hardmaru/write-rnn-tensorflow" ["e"=1]
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" -> "mbinkowski/nntimeseries"
"wreszelewski/nsga2" -> "haris989/NSGA-II"
"wreszelewski/nsga2" -> "ChengHust/NSGA-II"
"wreszelewski/nsga2" -> "lmarti/nsgaiii"
"wreszelewski/nsga2" -> "baopng/NSGA-II"
"chasebk/code_FLNN" -> "chasebk/code_IQSO_MLP"
"chasebk/code_FLNN" -> "chasebk/code_OCRO_MLNN"
"chasebk/code_FLNN" -> "chasebk/EO_CNN"
"chasebk/code_FLNN" -> "chasebk/code_OTWO_ELM"
"chasebk/code_FLNN" -> "thieunguyen5991/iot_dataset"
"chasebk/code_FLNN" -> "thieunguyen5991/opfunu"
"gugarosa/opytimizer" -> "thieu1995/mealpy"
"gugarosa/opytimizer" -> "SimonBlanke/Gradient-Free-Optimizers" ["e"=1]
"gugarosa/opytimizer" -> "thieu1995/metaheuristics"
"gugarosa/opytimizer" -> "jppbsi/LibOPT"
"gugarosa/opytimizer" -> "gugarosa/modelos_latex"
"gugarosa/opytimizer" -> "SimonBlanke/Hyperactive" ["e"=1]
"gugarosa/opytimizer" -> "gugarosa/opfython"
"Alro10/awesome-deep-neuroevolution" -> "uber-research/deep-neuroevolution"
"Alro10/awesome-deep-neuroevolution" -> "brain-research/guided-evolutionary-strategies"
"Alro10/awesome-deep-neuroevolution" -> "uber-research/safemutations"
"Alro10/awesome-deep-neuroevolution" -> "resibots/pymap_elites"
"Alro10/awesome-deep-neuroevolution" -> "ShawK91/Evolutionary-Reinforcement-Learning"
"rmsolgi/geneticalgorithm" -> "PasaOpasen/geneticalgorithm2"
"haris989/Email-Id-Extractor-Python" -> "haris989/Email-Id-Extractor"
"haris989/TextUtils" -> "haris989/Python-Flask-Blog"
"haris989/TextUtils" -> "NikhilRajPandey/guessthenumber"
"haris989/TextUtils" -> "haris989/Email-Id-Extractor"
"haris989/TextUtils" -> "haris989/Email-Id-Extractor-Python"
"haris989/TextUtils" -> "haris989/Facebook-AutoChatter"
"haris989/TextUtils" -> "haris989/PokeGmail-Go"
"haris989/TextUtils" -> "haris989/Utilizer-Excel-version"
"haris989/TextUtils" -> "haris989/Utilizer"
"haris989/TextUtils" -> "haris989/Similar-rectangles-on-a-larger-rectangle---2D-binpacking-solver"
"aqibsaeed/Genetic-CNN" -> "harvitronix/neural-network-genetic-algorithm"
"aqibsaeed/Genetic-CNN" -> "aqibsaeed/Genetic-Algorithm-RNN"
"aqibsaeed/Genetic-CNN" -> "sg-nm/cgp-cnn"
"aqibsaeed/Genetic-CNN" -> "Legendnic/GA-CNN"
"aqibsaeed/Genetic-CNN" -> "bowenbaker/metaqnn" ["e"=1]
"aqibsaeed/Genetic-CNN" -> "ianwhale/nsga-net"
"aqibsaeed/Genetic-CNN" -> "Marius-Juston/AutoCNN"
"aqibsaeed/Genetic-CNN" -> "han-cai/EAS" ["e"=1]
"aqibsaeed/Genetic-CNN" -> "titu1994/progressive-neural-architecture-search" ["e"=1]
"citiususc/hipster" -> "covid19-modeling/pyncov-19"
"citiususc/hipster" -> "imagames/jersey-container-akka-http"
"citiususc/hipster" -> "gonzalezsieira/joctomap"
"citiususc/hipster" -> "citiususc/voila"
"citiususc/hipster" -> "citiususc/calendula"
"alirezamika/evostra" -> "alirezamika/bipedal-es"
"alirezamika/evostra" -> "alirezamika/flappybird-es"
"alirezamika/evostra" -> "rlcode/per" ["e"=1]
"alirezamika/evostra" -> "hardmaru/estool"
"alirezamika/evostra" -> "atgambardella/pytorch-es"
"alirezamika/evostra" -> "kvfrans/openai-cartpole"
"Lucretiel/genetics" -> "PytLab/gaft"
"CyberAgent/cmaes" -> "srom/cma-es"
"RobRomijnders/RNN_basketball" -> "zhaoyu611/basketball_trajectory_prediction"
"cpmpercussion/keras-mdn-layer" -> "axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation"
"cpmpercussion/keras-mdn-layer" -> "yanji84/keras-mdn"
"uber-research/PyTorch-NEAT" -> "uber-research/deep-neuroevolution"
"uber-research/PyTorch-NEAT" -> "ukuleleplayer/pureples"
"uber-research/PyTorch-NEAT" -> "CodeReclaimers/neat-python"
"uber-research/PyTorch-NEAT" -> "ddehueck/pytorch-neat"
"uber-research/PyTorch-NEAT" -> "crisbodnar/TensorFlow-NEAT"
"uber-research/PyTorch-NEAT" -> "peter-ch/MultiNEAT"
"uber-research/PyTorch-NEAT" -> "google/brain-tokyo-workshop" ["e"=1]
"uber-research/PyTorch-NEAT" -> "simondlevy/neat-gym"
"uber-research/PyTorch-NEAT" -> "PaulPauls/Tensorflow-Neuroevolution" ["e"=1]
"uber-research/PyTorch-NEAT" -> "uber-research/poet"
"uber-research/PyTorch-NEAT" -> "PacktPublishing/Hands-on-Neuroevolution-with-Python"
"uber-research/PyTorch-NEAT" -> "resibots/pymap_elites"
"uber-research/PyTorch-NEAT" -> "DanieleGravina/divergence-and-quality-diversity"
"uber-research/PyTorch-NEAT" -> "uber-research/EvoGrad"
"uber-research/PyTorch-NEAT" -> "hardmaru/estool"
"fcampelo/EC-Bestiary" -> "NiaOrg/NiaPy"
"fcampelo/EC-Bestiary" -> "clever-algorithms/CleverAlgorithms"
"fcampelo/EC-Bestiary" -> "numbbo/coco"
"esa/pagmo" -> "esa/pygmo"
"esa/pagmo" -> "esa/pagmo2"
"esa/pagmo" -> "esa/pykep" ["e"=1]
"esa/pagmo" -> "Project-Platypus/Platypus"
"esa/pagmo" -> "aarongarrett/inspyred"
"esa/pagmo" -> "madebr/pyOpt"
"esa/pagmo" -> "xuy/pyipopt" ["e"=1]
"esa/pagmo" -> "esa/pygmo2"
"tnlin/PokemonGo-TSP" -> "jedrazb/python-tsp-simulated-annealing"
"tnlin/PokemonGo-TSP" -> "chncyhn/simulated-annealing-tsp"
"uber-common/deep-neuroevolution" -> "uber-common/safemutations"
"uber-common/deep-neuroevolution" -> "openai/evolution-strategies-starter"
"uber-common/deep-neuroevolution" -> "openai/gradient-checkpointing" ["e"=1]
"uber-common/deep-neuroevolution" -> "chrisstroemel/Simple" ["e"=1]
"uber-common/deep-neuroevolution" -> "hardmaru/estool"
"uber-common/deep-neuroevolution" -> "williamFalcon/DeepRLHacks" ["e"=1]
"uber-common/deep-neuroevolution" -> "deepmind/pycolab" ["e"=1]
"uber-common/deep-neuroevolution" -> "uber-common/differentiable-plasticity"
"uber-common/deep-neuroevolution" -> "posenhuang/NPMT" ["e"=1]
"uber-common/deep-neuroevolution" -> "openai/supervised-reptile" ["e"=1]
"uber-common/deep-neuroevolution" -> "brain-research/guided-evolutionary-strategies"
"uber-common/deep-neuroevolution" -> "NervanaSystems/coach" ["e"=1]
"uber-common/deep-neuroevolution" -> "reinforceio/tensorforce" ["e"=1]
"uber-common/deep-neuroevolution" -> "joeddav/devol" ["e"=1]
"uber-common/deep-neuroevolution" -> "uber-research/PyTorch-NEAT"
"ezstoltz/genetic-algorithm" -> "ezstoltz/optimization"
"karush17/Evolution-Strategies-PyTorch" -> "karush17/PyTorch-Tutorials"
"karush17/Evolution-Strategies-PyTorch" -> "karush17/Neural-Art-Tensorflow"
"uber-research/backpropamine" -> "uber-research/differentiable-plasticity"
"DEAP/notebooks" -> "lmarti/evolutionary-computation-course"
"apourchot/CEM-RL" -> "ShawK91/Evolutionary-Reinforcement-Learning"
"apourchot/CEM-RL" -> "crisbodnar/pderl"
"ShawK91/Evolutionary-Reinforcement-Learning" -> "apourchot/CEM-RL"
"ShawK91/Evolutionary-Reinforcement-Learning" -> "crisbodnar/pderl"
"ShawK91/Evolutionary-Reinforcement-Learning" -> "jparkerholder/DvD_ES"
"ShawK91/Evolutionary-Reinforcement-Learning" -> "karush17/esac"
"intLyc/MTO-Platform" -> "xiaofangxd/Multitasking-Optimization"
"pablormier/yabox" -> "covid19-modeling/pyncov-19"
"pablormier/yabox" -> "imagames/jersey-container-akka-http"
"pablormier/yabox" -> "gonzalezsieira/joctomap"
"pablormier/yabox" -> "citiususc/voila"
"pablormier/yabox" -> "citiususc/citius-invaders"
"MisterTea/HyperNEAT" -> "peter-ch/MultiNEAT"
"citiususc/calendula" -> "citiususc/voila"
"citiususc/calendula" -> "gonzalezsieira/joctomap"
"citiususc/calendula" -> "covid19-modeling/pyncov-19"
"baopng/NSGA-II" -> "ChengHust/NSGA-II"
"baopng/NSGA-II" -> "wreszelewski/nsga2"
"baopng/NSGA-II" -> "haris989/NSGA-II"
"crisbodnar/TensorFlow-NEAT" -> "uber-research/PyTorch-NEAT"
"crisbodnar/TensorFlow-NEAT" -> "PaulPauls/Tensorflow-Neuroevolution" ["e"=1]
"dwdyer/watchmaker" -> "Carrigan/EvolutionaryBlackjack"
"lmarti/evolutionary-computation-course" -> "DEAP/notebooks"
"uber-research/poet" -> "uber-research/EvoGrad"
"uber-research/poet" -> "icaros-usc/pyribs" ["e"=1]
"uber-research/poet" -> "resibots/pymap_elites"
"jenetics/jpx" -> "jenetics/prngine"
"alirezamika/bipedal-es" -> "alirezamika/evostra"
"kvfrans/openai-cartpole" -> "alirezamika/bipedal-es"
"rasmusbergpalm/evostrat" -> "enajx/HebbianMetaLearning"
"FernandoTorres/NEAT" -> "sean-dougherty/accneat"
"esa/pygmo2" -> "esa/pagmo2"
"esa/pygmo2" -> "Project-Platypus/Platypus"
"esa/pygmo2" -> "esa/pykep" ["e"=1]
"esa/pygmo2" -> "jMetal/jMetalPy"
"esa/pygmo2" -> "msu-coinlab/pymoo"
"esa/pygmo2" -> "msu-coinlab/pymop"
"esa/pygmo2" -> "ryojitanabe/reproblems"
"esa/pygmo2" -> "uqfoundation/mystic" ["e"=1]
"esa/pygmo2" -> "mdolab/pyoptsparse" ["e"=1]
"esa/pygmo2" -> "esa/pagmo"
"olmallet81/GALGO-2.0" -> "Arash-codedev/openGA"
"olmallet81/GALGO-2.0" -> "ruslankerimov/GA"
"brain-research/guided-evolutionary-strategies" -> "NiMlr/High-Dim-ES-RL"
"IOHprofiler/IOHexperimenter" -> "IOHprofiler/IOHanalyzer"
"DanieleGravina/divergence-and-quality-diversity" -> "resibots/pymap_elites"
"PatrykChrabaszcz/Canonical_ES_Atari" -> "NiMlr/High-Dim-ES-RL"
"sksq96/pytorch-mdn" -> "dusenberrymw/mixture-density-networks"
"uber-research/differentiable-plasticity" -> "uber-research/backpropamine"
"uber-research/differentiable-plasticity" -> "ThomasMiconi/LearningToLearnBOHP"
"uber-research/differentiable-plasticity" -> "enajx/HebbianMetaLearning"
"hossam-mossalam/multi-objective-deep-rl" -> "ttajmajer/morl-dv"
"thieunguyen5991/metaheuristics" -> "chasebk/code_IQSO_MLP"
"thieunguyen5991/metaheuristics" -> "thieunguyen5991/opfunu"
"thieunguyen5991/metaheuristics" -> "chasebk/code_FLNN"
"thieunguyen5991/metaheuristics" -> "thieunguyen5991/iot_dataset"
"thieunguyen5991/metaheuristics" -> "chasebk/code_OTWO_ELM"
"thieunguyen5991/metaheuristics" -> "chasebk/code_OCRO_MLNN"
"thieunguyen5991/metaheuristics" -> "chasebk/EO_CNN"
"Project-Platypus/PRIM" -> "Project-Platypus/Rhodium"
"karush17/Hierarchical-Attention-Reinforcement-Learning" -> "karush17/PyTorch-Tutorials"
"karush17/Hierarchical-Attention-Reinforcement-Learning" -> "karush17/Evolution-Strategies-PyTorch"
"resibots/pymap_elites" -> "DanieleGravina/divergence-and-quality-diversity"
"quaquel/EMAworkbench" -> "Project-Platypus/Rhodium"
"jparkerholder/DvD_ES" -> "behaviorguidedRL/BGRL"
"Project-Platypus/Rhodium" -> "Project-Platypus/PRIM"
"Project-Platypus/Rhodium" -> "quaquel/EMAworkbench"
"karush17/emix" -> "redraven17/CapsNet-1D"
"aqibsaeed/Genetic-Algorithm-RNN" -> "sunan93/Optimizing-RNN-parameters-using-Genetic-Algorithms"
"EMI-Group/RelativeNAS" -> "EMI-Group/TransferLearning-Tasks"
"EMI-Group/RelativeNAS" -> "EMI-Group/GMPB"
"EMI-Group/RelativeNAS" -> "EMI-Group/Incremental-Optimization"
"EMI-Group/RelativeNAS" -> "EMI-Group/GMOEA"
"EMI-Group/RelativeNAS" -> "EMI-Group/DenseNAS"
"EMI-Group/GMPB" -> "EMI-Group/TransferLearning-Tasks"
"EMI-Group/GMPB" -> "EMI-Group/Incremental-Optimization"
"EMI-Group/GMPB" -> "EMI-Group/RelativeNAS"
"EMI-Group/GMPB" -> "EMI-Group/DenseNAS"
"EMI-Group/Incremental-Optimization" -> "EMI-Group/TransferLearning-Tasks"
"EMI-Group/Incremental-Optimization" -> "EMI-Group/GMPB"
"EMI-Group/Incremental-Optimization" -> "EMI-Group/RelativeNAS"
"EMI-Group/TransferLearning-Tasks" -> "EMI-Group/Incremental-Optimization"
"EMI-Group/TransferLearning-Tasks" -> "EMI-Group/GMPB"
"EMI-Group/TransferLearning-Tasks" -> "EMI-Group/RelativeNAS"
"EMI-Group/TransferLearning-Tasks" -> "EMI-Group/DenseNAS"
"EMI-Group/TransferLearning-Tasks" -> "EMI-Group/GMOEA"
"LucasAlegre/mo-gym" -> "LucasAlegre/morl-baselines"
"gugarosa/modelos_latex" -> "pederzini98/academia-pokemon"
"mit-gfx/PGMORL" -> "axelabels/DynMORL"
"mit-gfx/PGMORL" -> "RunzheYang/MORL"
"mit-gfx/PGMORL" -> "johan-kallstrom/gym-mo"
"tonyduan/mdn" -> "sagelywizard/pytorch-mdn"
"chasebk/EO_CNN" -> "chasebk/code_IQSO_MLP"
"chasebk/EO_CNN" -> "chasebk/code_OCRO_MLNN"
"gonzalezsieira/joctomap" -> "imagames/jersey-container-akka-http"
"imagames/jersey-container-akka-http" -> "gonzalezsieira/joctomap"
"chasebk/code_OCRO_MLNN" -> "chasebk/code_IQSO_MLP"
"guofei9987/scikit-opt" ["l"="24.87,38.275"]
"geatpy-dev/geatpy" ["l"="24.861,38.311"]
"ljvmiranda921/pyswarms" ["l"="24.843,38.261"]
"anyoptimization/pymoo" ["l"="24.886,38.3"]
"DEAP/deap" ["l"="25.473,33.727"]
"HaaLeo/swarmlib" ["l"="24.847,38.22"]
"ahmedfgad/GeneticAlgorithmPython" ["l"="24.832,38.337"]
"msu-coinlab/pymoo" ["l"="24.89,38.318"]
"kellenf/TSP_collection" ["l"="24.968,38.192"]
"PytLab/gaft" ["l"="24.827,38.317"]
"BIMK/PlatEMO" ["l"="24.929,38.312"]
"zhanwen/MathModel" ["l"="22.104,31.457"]
"thu-ml/tianshou" ["l"="25.179,36.036"]
"scikit-optimize/scikit-optimize" ["l"="25.559,33.754"]
"fmfn/BayesianOptimization" ["l"="25.519,33.726"]
"datawhalechina/easy-rl" ["l"="25.207,36.122"]
"tisimst/pyswarm" ["l"="24.889,38.245"]
"nathanrooy/particle-swarm-optimization" ["l"="24.885,38.219"]
"NiaOrg/NiaPy" ["l"="24.795,38.212"]
"jMetal/jMetalPy" ["l"="24.905,38.297"]
"SISDevelop/SwarmPackagePy" ["l"="24.81,38.231"]
"nathanrooy/Particle-Swarm-Optimization-with-Python" ["l"="24.861,38.236"]
"jerrytheo/psopy" ["l"="24.81,38.252"]
"esa/pagmo2" ["l"="24.849,38.292"]
"7ossam81/EvoloPy" ["l"="24.828,38.209"]
"jenetics/jenetics" ["l"="25.008,38.394"]
"lagodiuk/genetic-algorithm" ["l"="25.04,38.451"]
"MOEAFramework/MOEAFramework" ["l"="24.954,38.334"]
"jMetal/jMetal" ["l"="24.943,38.346"]
"dwdyer/watchmaker" ["l"="25.069,38.433"]
"jenetics/jpx" ["l"="25.034,38.425"]
"GMUEClab/ecj" ["l"="25.042,38.402"]
"jsvazic/GAHelloWorld" ["l"="25.071,38.407"]
"Apress/genetic-algorithms-in-java-basics" ["l"="25.006,38.43"]
"deeplearning4j/nd4j" ["l"="8.747,21.481"]
"unitsofmeasurement/unit-api" ["l"="8.135,20.859"]
"encog/encog-java-core" ["l"="26.026,18.987"]
"HanSolo/charts" ["l"="6.962,19.865"]
"kiegroup/optaplanner" ["l"="19.127,23.379"]
"jenetics/prngine" ["l"="25.021,38.412"]
"neuroph/neuroph" ["l"="26.057,18.923"]
"Valdecy/pyMetaheuristic" ["l"="24.824,38.185"]
"LucXiong/Swarm-intelligence-optimization-algorithm" ["l"="24.812,38.195"]
"thieu1995/metaheuristics" ["l"="24.838,38.173"]
"thieu1995/mealpy" ["l"="24.844,38.2"]
"rwuilbercq/Hive" ["l"="24.874,38.194"]
"JingweiToo/Wrapper-Feature-Selection-Toolbox-Python" ["l"="24.802,38.178"]
"chasebk/code_FLNN" ["l"="24.808,38.092"]
"kkg1999/MetaheuristicOptimization" ["l"="24.857,38.171"]
"CodeReclaimers/neat-python" ["l"="24.614,38.364"]
"uber-research/PyTorch-NEAT" ["l"="24.588,38.39"]
"peter-ch/MultiNEAT" ["l"="24.541,38.366"]
"uber-research/deep-neuroevolution" ["l"="24.628,38.387"]
"crisbodnar/TensorFlow-NEAT" ["l"="24.573,38.368"]
"noio/peas" ["l"="24.546,38.346"]
"ukuleleplayer/pureples" ["l"="24.569,38.382"]
"colgreen/sharpneat" ["l"="26.104,19.163"]
"openai/evolution-strategies-starter" ["l"="24.657,38.361"]
"MorvanZhou/Evolutionary-Algorithm" ["l"="24.744,38.346"]
"google/brain-tokyo-workshop" ["l"="25.248,35.774"]
"uber-common/deep-neuroevolution" ["l"="24.659,38.396"]
"wagenaartje/neataptic" ["l"="28.242,27.493"]
"techwithtim/NEAT-Flappy-Bird" ["l"="24.366,36.96"]
"hardmaru/estool" ["l"="24.677,38.374"]
"LiYangSir/Smart-Algorithm" ["l"="24.968,38.156"]
"vonsylvia/MATLAB_Algorithm_with_cases" ["l"="24.954,38.137"]
"Shuai-Xie/genetic-algorithm" ["l"="24.954,38.12"]
"YisuZhou/TSP" ["l"="25.008,38.163"]
"roadwide/AI-Homework" ["l"="24.984,38.169"]
"EddyGao/PSO" ["l"="24.922,38.205"]
"strawberry-magic-pocket/Genetic-Algorithm" ["l"="24.977,38.117"]
"haris989/Python-Flask-Blog" ["l"="25.018,38.308"]
"haris989/Email-Id-Extractor" ["l"="25.008,38.298"]
"haris989/Email-Id-Extractor-Python" ["l"="25.018,38.295"]
"haris989/Facebook-AutoChatter" ["l"="25.008,38.322"]
"haris989/PokeGmail-Go" ["l"="25.018,38.324"]
"haris989/Utilizer-Excel-version" ["l"="25.01,38.316"]
"haris989/Similar-rectangles-on-a-larger-rectangle---2D-binpacking-solver" ["l"="25.004,38.313"]
"haris989/Utilizer" ["l"="25.005,38.305"]
"NikhilRajPandey/guessthenumber" ["l"="25.046,38.306"]
"chaolongzhang/tsp" ["l"="25.006,38.148"]
"zifeiyu0531/ga-tsp" ["l"="25.01,38.207"]
"mveres01/pytorch-drl4vrp" ["l"="19.076,23.573"]
"privateEye-zzy/TSP" ["l"="24.994,38.181"]
"Greatpanc/-TSP-" ["l"="25.008,38.18"]
"KovenYu/TSP" ["l"="24.99,38.201"]
"marcoscastro/tsp_pso" ["l"="25.02,38.192"]
"ShiSanChuan/GeneticAlgorithm" ["l"="25.032,38.119"]
"Rintarooo/TSP_DRL_PtrNet" ["l"="19.093,23.65"]
"harvitronix/neural-network-genetic-algorithm" ["l"="24.808,38.369"]
"jliphard/DeepEvolve" ["l"="24.792,38.394"]
"aqibsaeed/Genetic-CNN" ["l"="24.867,38.382"]
"handcraftsman/GeneticAlgorithmsWithPython" ["l"="24.806,38.325"]
"ahmedfgad/NeuralGenetic" ["l"="24.827,38.38"]
"joeddav/devol" ["l"="25.627,33.732"]
"aqibsaeed/Genetic-Algorithm-RNN" ["l"="24.838,38.398"]
"vanhooser/TF-Genetic" ["l"="24.812,38.398"]
"gmontamat/gentun" ["l"="24.772,38.401"]
"llSourcell/Drone_Flight_Controller" ["l"="24.807,38.413"]
"trevorstephens/gplearn" ["l"="25.595,33.737"]
"paraschopra/deepneuroevolution" ["l"="24.787,38.415"]
"Project-Platypus/Platypus" ["l"="24.911,38.28"]
"msu-coinlab/pymop" ["l"="24.909,38.319"]
"ianwhale/nsga-net" ["l"="24.907,38.348"]
"haris989/NSGA-II" ["l"="24.977,38.312"]
"esa/pygmo2" ["l"="24.89,38.285"]
"lmarti/nsgaiii" ["l"="24.966,38.325"]
"wreszelewski/nsga2" ["l"="24.953,38.317"]
"mikelzc1990/nsganetv2" ["l"="24.945,38.362"]
"mbelmadani/moead-py" ["l"="24.945,38.287"]
"aljarrahcs/EvoloPy-FS" ["l"="24.792,38.195"]
"7ossam81/EvoloPy-NN" ["l"="24.839,38.187"]
"gugarosa/opytimizer" ["l"="24.84,38.15"]
"thieu1995/opfunu" ["l"="24.854,38.186"]
"Ritam-Guha/Py_FS" ["l"="24.812,38.169"]
"hardmaru/pytorch_notebooks" ["l"="24.703,38.434"]
"axelbrando/Mixture-Density-Networks-for-distribution-and-uncertainty-estimation" ["l"="24.697,38.488"]
"sagelywizard/pytorch-mdn" ["l"="24.713,38.47"]
"tonyduan/mdn" ["l"="24.7,38.46"]
"hardmaru/WorldModelsExperiments" ["l"="25.166,35.726"]
"ctallec/world-models" ["l"="25.184,35.715"]
"sksq96/pytorch-mdn" ["l"="24.696,38.471"]
"deepmind/conditional-neural-process" ["l"="23.106,34.126"]
"MorvanZhou/Reinforcement-learning-with-tensorflow" ["l"="25.049,36.093"]
"MorvanZhou/Tensorflow-Tutorial" ["l"="23.768,31.145"]
"MorvanZhou/pytorch-A3C" ["l"="25.103,35.939"]
"lmarti/evolutionary-computation-course" ["l"="24.638,38.266"]
"Alro10/awesome-deep-neuroevolution" ["l"="24.634,38.403"]
"atgambardella/pytorch-es" ["l"="24.68,38.345"]
"openai/universe-starter-agent" ["l"="24.919,35.858"]
"openai/imitation" ["l"="25.018,35.893"]
"joschu/modular_rl" ["l"="24.965,35.878"]
"openai/rllab" ["l"="24.923,35.871"]
"miyosuda/async_deep_reinforce" ["l"="24.899,35.87"]
"matthiasplappert/keras-rl" ["l"="24.894,35.902"]
"williamFalcon/DeepRLHacks" ["l"="25.01,35.879"]
"pathak22/noreward-rl" ["l"="25.045,35.841"]
"ikostrikov/pytorch-a2c-ppo-acktr" ["l"="25.045,35.899"]
"openai/roboschool" ["l"="25.048,35.87"]
"openai/multiagent-competition" ["l"="25.164,35.891"]
"uber-research/safemutations" ["l"="24.634,38.422"]
"uber-research/poet" ["l"="24.6,38.426"]
"uber-research/go-explore" ["l"="25.16,35.795"]
"uber-research/atari-model-zoo" ["l"="24.582,38.346"]
"ShawK91/Evolutionary-Reinforcement-Learning" ["l"="24.533,38.438"]
"uber-research/differentiable-plasticity" ["l"="24.578,38.471"]
"uber-research/EvoGrad" ["l"="24.617,38.409"]
"ShawK91/erl_paper_nips18" ["l"="24.598,38.407"]
"maximecb/gym-minigrid" ["l"="25.206,35.84"]
"esa/pagmo" ["l"="24.901,38.261"]
"esa/pykep" ["l"="17.217,36.52"]
"kthohr/optim" ["l"="28.143,41.99"]
"stevengj/nlopt" ["l"="28.072,42.018"]
"esa/pygmo" ["l"="24.87,38.252"]
"coin-or/Ipopt" ["l"="27.961,42.025"]
"bluescarni/heyoka" ["l"="17.277,36.531"]
"darioizzo/audi" ["l"="17.297,36.534"]
"darioizzo/dcgp" ["l"="24.804,38.284"]
"CMA-ES/pycma" ["l"="24.735,38.323"]
"Project-Platypus/Rhodium" ["l"="24.978,38.251"]
"pablormier/yabox" ["l"="25.071,38.255"]
"quaquel/EMAworkbench" ["l"="24.964,38.261"]
"thouska/spotpy" ["l"="20.261,28.114"]
"pywr/pywr" ["l"="24.956,38.245"]
"SALib/SALib" ["l"="-11.431,29.236"]
"aarongarrett/inspyred" ["l"="24.93,38.266"]
"numbbo/coco" ["l"="24.748,38.267"]
"425776024/MOEAD" ["l"="24.929,38.293"]
"haris989/Chrome-password-stealer" ["l"="25.029,38.303"]
"haris989/Fb_messsage_copier" ["l"="25.061,38.296"]
"modestyachts/ARS" ["l"="24.612,38.319"]
"alexis-jacq/numpy_ARS" ["l"="24.574,38.299"]
"brain-research/guided-evolutionary-strategies" ["l"="24.66,38.342"]
"haarnoja/softqlearning" ["l"="25.111,35.845"]
"PatrykChrabaszcz/Canonical_ES_Atari" ["l"="24.636,38.291"]
"clever-algorithms/CleverAlgorithms" ["l"="24.685,38.177"]
"fcampelo/EC-Bestiary" ["l"="24.717,38.201"]
"parano/GeneticAlgorithm-TSP" ["l"="24.76,38.376"]
"dmishin/tsp-solver" ["l"="19.196,23.608"]
"ddehueck/pytorch-neat" ["l"="24.561,38.406"]
"beniz/libcmaes" ["l"="24.716,38.271"]
"CyberAgent/cmaes" ["l"="24.717,38.289"]
"CyberAgentAILab/cmaes" ["l"="24.705,38.31"]
"facebookresearch/nevergrad" ["l"="25.543,33.689"]
"automl/SMAC3" ["l"="25.628,33.677"]
"automl/RoBO" ["l"="25.663,33.616"]
"automl/HpBandSter" ["l"="25.667,33.641"]
"benelot/pybullet-gym" ["l"="25.243,35.867"]
"PacktPublishing/Hands-On-Genetic-Algorithms-with-Python" ["l"="24.768,38.301"]
"Lucretiel/genetics" ["l"="24.854,38.357"]
"ezstoltz/genetic-algorithm" ["l"="24.792,38.352"]
"bz51/GeneticAlgorithm" ["l"="24.907,38.171"]
"kaushalshetty/FeatureSelectionGA" ["l"="25.805,33.854"]
"baopng/NSGA-II" ["l"="24.958,38.302"]
"ChengHust/NSGA-II" ["l"="24.981,38.298"]
"chudur-budur/nsga2-matlab" ["l"="25.048,38.323"]
"haris989/TextUtils" ["l"="25.026,38.315"]
"perone/Pyevolve" ["l"="24.543,38.207"]
"blaa/PyGene" ["l"="24.514,38.191"]
"DEAP/notebooks" ["l"="24.594,38.237"]
"perrygeo/simanneal" ["l"="24.91,38.409"]
"skylergrammer/SimulatedAnnealing" ["l"="24.899,38.441"]
"capaulson/pyKriging" ["l"="19.697,28.336"]
"tnlin/PokemonGo-TSP" ["l"="24.938,38.451"]
"dwavesystems/dwave-neal" ["l"="24.914,38.434"]
"udacity/AIND-Simulated_Annealing" ["l"="23.566,29.442"]
"jedrazb/python-tsp-simulated-annealing" ["l"="24.933,38.432"]
"chncyhn/simulated-annealing-tsp" ["l"="24.95,38.438"]
"qulacs/qulacs" ["l"="16.123,38.744"]
"rmsolgi/geneticalgorithm" ["l"="24.865,38.406"]
"toddwschneider/shiny-salesman" ["l"="24.913,38.468"]
"Pyomo/pyomo" ["l"="27.825,41.972"]
"scipopt/PySCIPOpt" ["l"="27.798,41.954"]
"SMTorg/smt" ["l"="-11.471,29.25"]
"jMetal/jMetalSP" ["l"="24.933,38.33"]
"mxgiuliani00/M3O-Multi-Objective-Optimal-Operations" ["l"="24.985,38.351"]
"jMetal/jMetalDocumentation" ["l"="24.97,38.374"]
"jMetal/jMetalCpp" ["l"="24.918,38.336"]
"EMI-Group/GMOEA" ["l"="25.028,38.356"]
"yalmip/YALMIP" ["l"="7.64,10.469"]
"intLyc/MTO-Platform" ["l"="24.988,38.283"]
"slow295185031/MOEA-dev" ["l"="24.965,38.287"]
"MadryLab/cox" ["l"="28.185,32.661"]
"zuoxingdong/VIN_PyTorch_Visdom" ["l"="24.982,35.814"]
"oxwhirl/treeqn" ["l"="28.18,32.658"]
"andrewliao11/dni.pytorch" ["l"="27.493,34.364"]
"alirezamika/evostra" ["l"="24.651,38.326"]
"danielkunin/Deeplearning-Visualizations" ["l"="28.148,32.657"]
"prichemond/imperialmathslides" ["l"="28.143,32.659"]
"JingweiToo/Wrapper-Feature-Selection-Toolbox" ["l"="24.763,38.14"]
"JingweiToo/Filter-Feature-Selection-Toolbox" ["l"="24.748,38.125"]
"thieu1995/MHA-FS" ["l"="24.867,38.179"]
"dockleryxk/PSO" ["l"="24.907,38.227"]
"cpmpercussion/keras-mdn-layer" ["l"="24.716,38.503"]
"dusenberrymw/mixture-density-networks" ["l"="24.724,38.484"]
"Arash-codedev/openGA" ["l"="25.097,38.054"]
"olmallet81/GALGO-2.0" ["l"="25.112,38.067"]
"ruslankerimov/GA" ["l"="25.079,38.081"]
"bz51/AntColonyAlgorithm" ["l"="24.903,38.129"]
"zhongxiaolong1988/GeneticAlgorithm" ["l"="24.973,38.139"]
"Valdecy/pyMultiobjective" ["l"="24.795,38.156"]
"docwza/woa" ["l"="24.807,38.145"]
"AppliedDataSciencePartners/WorldModels" ["l"="25.12,35.695"]
"hardmaru/slimevolleygym" ["l"="25.293,35.841"]
"duquanquanquan/improved-NSGA2" ["l"="25.076,38.323"]
"changliang5811/SSA_python" ["l"="24.782,38.179"]
"PytLab/VASPy" ["l"="16.843,37.623"]
"lagodiuk/genetic-programming" ["l"="25.06,38.481"]
"ymzx/pso-svm" ["l"="24.935,38.181"]
"FatKong/Computational_Intelligence_homework" ["l"="25.057,38.164"]
"guoyuantao/Intelligent_Algrithm" ["l"="25.085,38.159"]
"yangzhen0512/IntelligentOptimizationAlgorithms" ["l"="24.97,38.059"]
"DiamonJoy/TSP" ["l"="25.06,38.146"]
"CzRzChao/SimpleGA" ["l"="25.04,38.138"]
"Greatpanc/-TSP2-" ["l"="25.037,38.159"]
"jiaowenlong/PSO" ["l"="24.95,38.101"]
"MisterTea/HyperNEAT" ["l"="24.518,38.353"]
"FernandoTorres/NEAT" ["l"="24.489,38.363"]
"nikste/tensorflow-neat" ["l"="24.494,38.344"]
"OliverColeman/ahni" ["l"="24.497,38.383"]
"neat-python/neat-python" ["l"="24.523,38.338"]
"sean-dougherty/accneat" ["l"="24.505,38.368"]
"hardmaru/backprop-neat-js" ["l"="28.301,27.47"]
"flxsosa/DeepHyperNEAT" ["l"="24.529,38.384"]
"simondlevy/neat-gym" ["l"="24.55,38.391"]
"RunzheYang/MORL" ["l"="24.386,38.513"]
"axelabels/DynMORL" ["l"="24.368,38.522"]
"mit-gfx/PGMORL" ["l"="24.382,38.533"]
"hossam-mossalam/multi-objective-deep-rl" ["l"="24.354,38.512"]
"kshitija2/Interactive-Multi-objective-Reinforcement-Learning" ["l"="24.38,38.496"]
"ttajmajer/morl-dv" ["l"="24.366,38.506"]
"jparkerholder/DvD_ES" ["l"="24.454,38.481"]
"LucasAlegre/mo-gym" ["l"="24.345,38.533"]
"ahmedfgad/NumPyANN" ["l"="24.824,38.428"]
"chasebk/code_OTWO_ELM" ["l"="24.787,38.076"]
"chasebk/code_IQSO_MLP" ["l"="24.799,38.073"]
"chasebk/code_OCRO_MLNN" ["l"="24.81,38.077"]
"chasebk/EO_CNN" ["l"="24.796,38.083"]
"JingweiToo/Advanced-Feature-Selection-Toolbox" ["l"="24.774,38.16"]
"ahcantao/PSOFeatureSelection" ["l"="25.877,33.831"]
"renatoosousa/GeneticAlgorithmForFeatureSelection" ["l"="25.86,33.835"]
"EMI-Group/FaPN" ["l"="25.084,38.365"]
"ShihuaHuang95/FaPN-full" ["l"="25.111,38.378"]
"EMI-Group/evoxbench" ["l"="25.12,38.364"]
"EMI-Group/RelativeNAS" ["l"="25.051,38.367"]
"EMI-Group/GMPB" ["l"="25.065,38.357"]
"EMI-Group/Incremental-Optimization" ["l"="25.064,38.368"]
"EMI-Group/TransferLearning-Tasks" ["l"="25.053,38.358"]
"speedinghzl/AlignSeg" ["l"="31.883,37.124"]
"Picsart-AI-Research/SeMask-Segmentation" ["l"="34.819,35.92"]
"hyz-xmaster/swa_object_detection" ["l"="34.801,35.635"]
"lxtGH/SFSegNets" ["l"="31.831,37.078"]
"RamanSinghca/PSO-Based-SVR" ["l"="22.225,35.62"]
"nnaisense/evotorch" ["l"="25.45,35.739"]
"ahmedfgad/TorchGA" ["l"="24.784,38.337"]
"EMI-Group/DenseNAS" ["l"="25.049,38.349"]
"shiluqiang/PSO_python" ["l"="24.899,38.196"]
"buma/BatAlgorithm" ["l"="24.76,38.189"]
"timzatko/Sklearn-Nature-Inspired-Algorithms" ["l"="24.76,38.202"]
"lukapecnik/NiaAML" ["l"="24.762,38.214"]
"NiaOrg/NiaPy-examples" ["l"="24.775,38.219"]
"firefly-cpp/sport-activities-features" ["l"="24.775,38.204"]
"human-analysis/neural-architecture-transfer" ["l"="28.419,34.439"]
"sg-nm/cgp-cnn" ["l"="24.901,38.388"]
"sg-nm/cgp-cnn-PyTorch" ["l"="24.915,38.378"]
"google-research/nasbench" ["l"="28.439,34.361"]
"megvii-model/SinglePathOneShot" ["l"="28.455,34.409"]
"xiaomi-automl/FairNAS" ["l"="28.488,34.396"]
"heihei12305/MOPSO" ["l"="24.981,38.03"]
"kuhnLIN/GA_PSO" ["l"="24.99,38.047"]
"jullyjelly/Intelligent_Algorithm" ["l"="24.96,38.039"]
"karush17/esac" ["l"="24.466,38.444"]
"karush17/PyTorch-Tutorials" ["l"="24.435,38.447"]
"redraven17/CapsNet-1D" ["l"="24.448,38.454"]
"karush17/Neural-Art-Tensorflow" ["l"="24.45,38.433"]
"karush17/Evolution-Strategies-PyTorch" ["l"="24.435,38.437"]
"karush17/emix" ["l"="24.461,38.46"]
"ryojitanabe/reproblems" ["l"="24.808,38.271"]
"NiMlr/High-Dim-ES-RL" ["l"="24.68,38.296"]
"aminnayebi/HesBO" ["l"="25.693,33.541"]
"ziyuw/rembo" ["l"="25.707,33.501"]
"uber-research/TuRBO" ["l"="25.665,33.583"]
"IOHprofiler/IOHexperimenter" ["l"="24.711,38.242"]
"mikeagn/CEC2013" ["l"="24.732,38.242"]
"CMA-ES/c-cmaes" ["l"="24.685,38.251"]
"RobRomijnders/RNN_basketball" ["l"="24.707,38.535"]
"yanji84/keras-mdn" ["l"="24.697,38.51"]
"vvanirudh/deep-ensembles-uncertainty" ["l"="24.041,34.663"]
"hardmaru/write-rnn-tensorflow" ["l"="30.964,32.17"]
"mbinkowski/nntimeseries" ["l"="24.671,38.524"]
"thieunguyen5991/iot_dataset" ["l"="24.79,38.068"]
"thieunguyen5991/opfunu" ["l"="24.82,38.072"]
"SimonBlanke/Gradient-Free-Optimizers" ["l"="25.792,33.785"]
"jppbsi/LibOPT" ["l"="24.824,38.123"]
"gugarosa/modelos_latex" ["l"="24.843,38.113"]
"SimonBlanke/Hyperactive" ["l"="25.768,33.904"]
"gugarosa/opfython" ["l"="24.853,38.126"]
"resibots/pymap_elites" ["l"="24.585,38.418"]
"PasaOpasen/geneticalgorithm2" ["l"="24.862,38.439"]
"Legendnic/GA-CNN" ["l"="24.877,38.419"]
"bowenbaker/metaqnn" ["l"="28.518,34.296"]
"Marius-Juston/AutoCNN" ["l"="24.883,38.401"]
"han-cai/EAS" ["l"="28.516,34.317"]
"titu1994/progressive-neural-architecture-search" ["l"="28.47,34.331"]
"citiususc/hipster" ["l"="25.137,38.239"]
"covid19-modeling/pyncov-19" ["l"="25.117,38.247"]
"imagames/jersey-container-akka-http" ["l"="25.104,38.243"]
"gonzalezsieira/joctomap" ["l"="25.112,38.253"]
"citiususc/voila" ["l"="25.119,38.258"]
"citiususc/calendula" ["l"="25.144,38.258"]
"alirezamika/bipedal-es" ["l"="24.632,38.309"]
"alirezamika/flappybird-es" ["l"="24.652,38.303"]
"rlcode/per" ["l"="25.054,36.017"]
"kvfrans/openai-cartpole" ["l"="24.609,38.296"]
"srom/cma-es" ["l"="24.688,38.275"]
"zhaoyu611/basketball_trajectory_prediction" ["l"="24.708,38.557"]
"PaulPauls/Tensorflow-Neuroevolution" ["l"="25.65,36.864"]
"PacktPublishing/Hands-on-Neuroevolution-with-Python" ["l"="24.541,38.409"]
"DanieleGravina/divergence-and-quality-diversity" ["l"="24.566,38.423"]
"madebr/pyOpt" ["l"="24.929,38.234"]
"xuy/pyipopt" ["l"="27.851,41.998"]
"uber-common/safemutations" ["l"="24.667,38.426"]
"openai/gradient-checkpointing" ["l"="27.562,35.345"]
"chrisstroemel/Simple" ["l"="1.847,38.754"]
"deepmind/pycolab" ["l"="25.166,35.834"]
"uber-common/differentiable-plasticity" ["l"="24.645,38.448"]
"posenhuang/NPMT" ["l"="1.871,38.751"]
"openai/supervised-reptile" ["l"="23.797,35.455"]
"NervanaSystems/coach" ["l"="25.079,35.885"]
"reinforceio/tensorforce" ["l"="24.99,35.887"]
"ezstoltz/optimization" ["l"="24.779,38.366"]
"uber-research/backpropamine" ["l"="24.577,38.49"]
"apourchot/CEM-RL" ["l"="24.515,38.454"]
"crisbodnar/pderl" ["l"="24.502,38.444"]
"xiaofangxd/Multitasking-Optimization" ["l"="25.02,38.27"]
"citiususc/citius-invaders" ["l"="25.087,38.238"]
"Carrigan/EvolutionaryBlackjack" ["l"="25.093,38.447"]
"icaros-usc/pyribs" ["l"="25.528,35.738"]
"rasmusbergpalm/evostrat" ["l"="24.534,38.542"]
"enajx/HebbianMetaLearning" ["l"="24.552,38.514"]
"uqfoundation/mystic" ["l"="25.224,33.571"]
"mdolab/pyoptsparse" ["l"="-11.531,29.26"]
"IOHprofiler/IOHanalyzer" ["l"="24.689,38.228"]
"ThomasMiconi/LearningToLearnBOHP" ["l"="24.554,38.485"]
"thieunguyen5991/metaheuristics" ["l"="24.804,38.064"]
"Project-Platypus/PRIM" ["l"="25.002,38.242"]
"karush17/Hierarchical-Attention-Reinforcement-Learning" ["l"="24.415,38.442"]
"behaviorguidedRL/BGRL" ["l"="24.438,38.494"]
"sunan93/Optimizing-RNN-parameters-using-Genetic-Algorithms" ["l"="24.843,38.422"]
"LucasAlegre/morl-baselines" ["l"="24.321,38.543"]
"pederzini98/academia-pokemon" ["l"="24.846,38.096"]
"johan-kallstrom/gym-mo" ["l"="24.378,38.551"]
}