digraph G {
"nltk/nltk" -> "explosion/spaCy"
"nltk/nltk" -> "RaRe-Technologies/gensim"
"nltk/nltk" -> "stanfordnlp/CoreNLP"
"nltk/nltk" -> "sloria/TextBlob"
"nltk/nltk" -> "facebookresearch/fastText"
"nltk/nltk" -> "clips/pattern" ["e"=1]
"nltk/nltk" -> "scikit-learn/scikit-learn" ["e"=1]
"nltk/nltk" -> "allenai/allennlp"
"nltk/nltk" -> "Theano/Theano" ["e"=1]
"nltk/nltk" -> "stanfordnlp/GloVe"
"nltk/nltk" -> "fchollet/keras" ["e"=1]
"nltk/nltk" -> "sebastianruder/NLP-progress"
"nltk/nltk" -> "google-research/bert"
"nltk/nltk" -> "fxsjy/jieba" ["e"=1]
"nltk/nltk" -> "dmlc/xgboost" ["e"=1]
"huggingface/datasets" -> "PyTorchLightning/pytorch-lightning" ["e"=1]
"huggingface/datasets" -> "huggingface/transformers" ["e"=1]
"huggingface/datasets" -> "huggingface/tokenizers"
"huggingface/datasets" -> "eugeneyan/applied-ml" ["e"=1]
"huggingface/datasets" -> "huggingface/diffusers" ["e"=1]
"huggingface/datasets" -> "huggingface/accelerate" ["e"=1]
"huggingface/datasets" -> "pytorch/fairseq"
"huggingface/datasets" -> "gradio-app/gradio" ["e"=1]
"huggingface/datasets" -> "UKPLab/sentence-transformers"
"huggingface/datasets" -> "explosion/spaCy"
"huggingface/datasets" -> "openai/CLIP" ["e"=1]
"huggingface/datasets" -> "google/jax"
"huggingface/datasets" -> "deepset-ai/haystack"
"huggingface/datasets" -> "allenai/allennlp"
"huggingface/datasets" -> "jina-ai/jina" ["e"=1]
"THUNLP-MT/MT-Reading-List" -> "rsennrich/subword-nmt"
"THUNLP-MT/MT-Reading-List" -> "facebookresearch/XLM"
"THUNLP-MT/MT-Reading-List" -> "OpenNMT/OpenNMT-py"
"THUNLP-MT/MT-Reading-List" -> "moses-smt/mosesdecoder"
"THUNLP-MT/MT-Reading-List" -> "clab/fast_align"
"THUNLP-MT/MT-Reading-List" -> "THUNLP-MT/THUMT"
"THUNLP-MT/MT-Reading-List" -> "facebookresearch/UnsupervisedMT"
"THUNLP-MT/MT-Reading-List" -> "thunlp/PLMpapers"
"THUNLP-MT/MT-Reading-List" -> "facebookresearch/LASER"
"THUNLP-MT/MT-Reading-List" -> "facebookresearch/MUSE"
"THUNLP-MT/MT-Reading-List" -> "microsoft/MASS"
"THUNLP-MT/MT-Reading-List" -> "pytorch/fairseq"
"THUNLP-MT/MT-Reading-List" -> "marian-nmt/marian"
"THUNLP-MT/MT-Reading-List" -> "tensorflow/nmt"
"THUNLP-MT/MT-Reading-List" -> "google/sentencepiece"
"facebookresearch/fairseq" -> "tensorflow/tensor2tensor"
"facebookresearch/fairseq" -> "microsoft/unilm" ["e"=1]
"facebookresearch/fairseq" -> "facebookresearch/ParlAI"
"facebookresearch/fairseq" -> "OpenNMT/OpenNMT-py"
"facebookresearch/fairseq" -> "google/seq2seq"
"facebookresearch/fairseq" -> "facebookresearch/fastText"
"facebookresearch/fairseq" -> "facebookresearch/faiss"
"facebookresearch/fairseq" -> "google/sentencepiece"
"facebookresearch/fairseq" -> "allenai/allennlp"
"facebookresearch/fairseq" -> "tensorflow/nmt"
"facebookresearch/fairseq" -> "deepmind/sonnet" ["e"=1]
"facebookresearch/fairseq" -> "espnet/espnet" ["e"=1]
"facebookresearch/fairseq" -> "OpenNMT/OpenNMT"
"facebookresearch/fairseq" -> "pytorch/fairseq"
"facebookresearch/fairseq" -> "jadore801120/attention-is-all-you-need-pytorch"
"pytorch/fairseq" -> "allenai/allennlp"
"pytorch/fairseq" -> "sebastianruder/NLP-progress"
"pytorch/fairseq" -> "huggingface/pytorch-pretrained-BERT"
"pytorch/fairseq" -> "OpenNMT/OpenNMT-py"
"pytorch/fairseq" -> "google-research/bert"
"pytorch/fairseq" -> "zihangdai/xlnet"
"pytorch/fairseq" -> "google/sentencepiece"
"pytorch/fairseq" -> "UKPLab/sentence-transformers"
"pytorch/fairseq" -> "tensorflow/tensor2tensor"
"pytorch/fairseq" -> "hanxiao/bert-as-service"
"pytorch/fairseq" -> "microsoft/unilm" ["e"=1]
"pytorch/fairseq" -> "google-research/google-research"
"pytorch/fairseq" -> "facebookresearch/faiss"
"pytorch/fairseq" -> "jadore801120/attention-is-all-you-need-pytorch"
"pytorch/fairseq" -> "google-research/text-to-text-transfer-transformer"
"ZiJianZhao/SeqGAN-PyTorch" -> "suragnair/seqGAN"
"ZiJianZhao/SeqGAN-PyTorch" -> "X-czh/SeqGAN-PyTorch"
"ZiJianZhao/SeqGAN-PyTorch" -> "LantaoYu/SeqGAN"
"ZiJianZhao/SeqGAN-PyTorch" -> "wiseodd/controlled-text-generation"
"ZiJianZhao/SeqGAN-PyTorch" -> "bhushan23/Transformer-SeqGAN-PyTorch"
"ZiJianZhao/SeqGAN-PyTorch" -> "natnij/seqGAN_pytorch"
"ZiJianZhao/SeqGAN-PyTorch" -> "williamSYSU/TextGAN-PyTorch"
"ZiJianZhao/SeqGAN-PyTorch" -> "geek-ai/Texygen"
"ZiJianZhao/SeqGAN-PyTorch" -> "ruotianluo/NeuralDialog-CVAE-pytorch" ["e"=1]
"facebookresearch/fairseq-py" -> "taolei87/sru"
"facebookresearch/fairseq-py" -> "MaximumEntropy/Seq2Seq-PyTorch"
"facebookresearch/fairseq-py" -> "eladhoffer/seq2seq.pytorch"
"facebookresearch/fairseq-py" -> "salesforce/pytorch-qrnn"
"facebookresearch/fairseq-py" -> "mila-udem/welcome_tutorials"
"facebookresearch/fairseq-py" -> "facebookresearch/Starspace"
"facebookresearch/fairseq-py" -> "facebookresearch/InferSent"
"facebookresearch/fairseq-py" -> "salesforce/matchbox"
"facebookresearch/fairseq-py" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"facebookresearch/fairseq-py" -> "lanpa/tensorboard-pytorch" ["e"=1]
"facebookresearch/fairseq-py" -> "harvardnlp/seq2seq-attn" ["e"=1]
"facebookresearch/fairseq-py" -> "IBM/pytorch-seq2seq"
"facebookresearch/fairseq-py" -> "facebookresearch/MUSE"
"facebookresearch/fairseq-py" -> "OpenNMT/OpenNMT-py"
"facebookresearch/fairseq-py" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"apachecn/stanford-cs224n-notes-zh" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"apachecn/stanford-cs224n-notes-zh" -> "LooperXX/CS224n-Reading-Notes"
"apachecn/stanford-cs224n-notes-zh" -> "apachecn/stanford-cs234-notes-zh" ["e"=1]
"apachecn/stanford-cs224n-notes-zh" -> "ZacBi/CS224n-2019-solutions"
"apachecn/stanford-cs224n-notes-zh" -> "LooperXX/CS224n-2019-Reading-Notes"
"graykode/nlp-tutorial" -> "sebastianruder/NLP-progress"
"graykode/nlp-tutorial" -> "FudanNLP/nlp-beginner" ["e"=1]
"graykode/nlp-tutorial" -> "NLP-LOVE/ML-NLP" ["e"=1]
"graykode/nlp-tutorial" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"graykode/nlp-tutorial" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"graykode/nlp-tutorial" -> "DA-southampton/NLP_ability" ["e"=1]
"graykode/nlp-tutorial" -> "yandexdataschool/nlp_course"
"graykode/nlp-tutorial" -> "google-research/bert"
"graykode/nlp-tutorial" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"graykode/nlp-tutorial" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"graykode/nlp-tutorial" -> "brightmart/text_classification"
"graykode/nlp-tutorial" -> "hanxiao/bert-as-service"
"graykode/nlp-tutorial" -> "yunjey/pytorch-tutorial" ["e"=1]
"graykode/nlp-tutorial" -> "allenai/allennlp"
"graykode/nlp-tutorial" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"sannykim/deep-learning-guide" -> "sannykim/transformers"
"sannykim/deep-learning-guide" -> "zeusees/HyperDL-Tutorial" ["e"=1]
"sannykim/deep-learning-guide" -> "mihail911/nlp-library"
"sannykim/deep-learning-guide" -> "yassouali/ML_paper_notes"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "ZacBi/CS224n-2019-solutions"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "xixiaoyao/CS224n-winter-together"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "LooperXX/CS224n-Reading-Notes"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "apachecn/stanford-cs224n-notes-zh"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "Luvata/CS224N-2019"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "LooperXX/CS224n-Resource"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "songyingxin/NLPer-Interview" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "apachecn/nlp-pytorch-zh" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "hankcs/CS224n"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "learning511/cs224n-learning-camp"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "stanfordnlp/cs224n-winter17-notes"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "cgpotts/cs224u"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "zibuyu/research_tao" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "msgi/nlp-journey" ["e"=1]
"Kyubyong/transformer" -> "tensorflow/tensor2tensor"
"Kyubyong/transformer" -> "tensorflow/nmt"
"Kyubyong/transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"Kyubyong/transformer" -> "kimiyoung/transformer-xl"
"Kyubyong/transformer" -> "zihangdai/xlnet"
"Kyubyong/transformer" -> "bojone/attention" ["e"=1]
"Kyubyong/transformer" -> "google/seq2seq"
"Kyubyong/transformer" -> "brightmart/text_classification"
"Kyubyong/transformer" -> "brightmart/albert_zh" ["e"=1]
"Kyubyong/transformer" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"Kyubyong/transformer" -> "hanxiao/bert-as-service"
"Kyubyong/transformer" -> "allenai/bilm-tf"
"Kyubyong/transformer" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"Kyubyong/transformer" -> "codertimo/BERT-pytorch"
"Kyubyong/transformer" -> "abisee/pointer-generator" ["e"=1]
"google-research/google-research" -> "pytorch/fairseq"
"google-research/google-research" -> "google-research/bert"
"google-research/google-research" -> "google/jax"
"google-research/google-research" -> "rwightman/pytorch-image-models" ["e"=1]
"google-research/google-research" -> "deepmind/deepmind-research" ["e"=1]
"google-research/google-research" -> "huggingface/transformers" ["e"=1]
"google-research/google-research" -> "facebookresearch/faiss"
"google-research/google-research" -> "facebookresearch/detectron2" ["e"=1]
"google-research/google-research" -> "openai/CLIP" ["e"=1]
"google-research/google-research" -> "PyTorchLightning/pytorch-lightning" ["e"=1]
"google-research/google-research" -> "pytorch/pytorch" ["e"=1]
"google-research/google-research" -> "sebastianruder/NLP-progress"
"google-research/google-research" -> "lucidrains/vit-pytorch" ["e"=1]
"google-research/google-research" -> "tensorflow/models" ["e"=1]
"google-research/google-research" -> "rusty1s/pytorch_geometric" ["e"=1]
"openai/gpt-3" -> "openai/gpt-2"
"openai/gpt-3" -> "karpathy/minGPT" ["e"=1]
"openai/gpt-3" -> "google-research/bert"
"openai/gpt-3" -> "pytorch/fairseq"
"openai/gpt-3" -> "huggingface/transformers" ["e"=1]
"openai/gpt-3" -> "elyase/awesome-gpt3"
"openai/gpt-3" -> "microsoft/DeepSpeed" ["e"=1]
"openai/gpt-3" -> "facebookresearch/llama" ["e"=1]
"openai/gpt-3" -> "google-research/google-research"
"openai/gpt-3" -> "EleutherAI/gpt-neo" ["e"=1]
"openai/gpt-3" -> "google-research/text-to-text-transfer-transformer"
"openai/gpt-3" -> "google/jax"
"openai/gpt-3" -> "openai/CLIP" ["e"=1]
"openai/gpt-3" -> "openai/gym" ["e"=1]
"openai/gpt-3" -> "tatsu-lab/stanford_alpaca" ["e"=1]
"minimaxir/gpt-2-simple" -> "nshepperd/gpt-2"
"minimaxir/gpt-2-simple" -> "minimaxir/aitextgen"
"minimaxir/gpt-2-simple" -> "minimaxir/textgenrnn"
"minimaxir/gpt-2-simple" -> "openai/gpt-2"
"minimaxir/gpt-2-simple" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/gpt-2-simple" -> "salesforce/ctrl"
"minimaxir/gpt-2-simple" -> "graykode/gpt-2-Pytorch"
"minimaxir/gpt-2-simple" -> "openai/gpt-2-output-dataset"
"minimaxir/gpt-2-simple" -> "ConnorJL/GPT2" ["e"=1]
"minimaxir/gpt-2-simple" -> "imcaspar/gpt2-ml" ["e"=1]
"minimaxir/gpt-2-simple" -> "ak9250/gpt-2-colab"
"minimaxir/gpt-2-simple" -> "huggingface/transfer-learning-conv-ai"
"minimaxir/gpt-2-simple" -> "rish-16/gpt2client"
"minimaxir/gpt-2-simple" -> "microsoft/DialoGPT" ["e"=1]
"minimaxir/gpt-2-simple" -> "huggingface/pytorch-pretrained-BERT"
"RasaHQ/rasa" -> "hanxiao/bert-as-service"
"RasaHQ/rasa" -> "deepmipt/DeepPavlov"
"RasaHQ/rasa" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"RasaHQ/rasa" -> "gunthercox/ChatterBot" ["e"=1]
"RasaHQ/rasa" -> "facebookresearch/ParlAI"
"RasaHQ/rasa" -> "explosion/spaCy"
"RasaHQ/rasa" -> "UKPLab/sentence-transformers"
"RasaHQ/rasa" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"RasaHQ/rasa" -> "deepset-ai/haystack"
"RasaHQ/rasa" -> "sebastianruder/NLP-progress"
"RasaHQ/rasa" -> "google-research/bert"
"RasaHQ/rasa" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"RasaHQ/rasa" -> "allenai/allennlp"
"RasaHQ/rasa" -> "pytorch/fairseq"
"RasaHQ/rasa" -> "brightmart/albert_zh" ["e"=1]
"deepset-ai/haystack" -> "deepset-ai/FARM"
"deepset-ai/haystack" -> "UKPLab/sentence-transformers"
"deepset-ai/haystack" -> "neuml/txtai"
"deepset-ai/haystack" -> "MaartenGr/BERTopic"
"deepset-ai/haystack" -> "jina-ai/jina" ["e"=1]
"deepset-ai/haystack" -> "flairNLP/flair"
"deepset-ai/haystack" -> "hwchase17/langchain" ["e"=1]
"deepset-ai/haystack" -> "ddangelov/Top2Vec"
"deepset-ai/haystack" -> "makcedward/nlpaug"
"deepset-ai/haystack" -> "gradio-app/gradio" ["e"=1]
"deepset-ai/haystack" -> "jerryjliu/gpt_index" ["e"=1]
"deepset-ai/haystack" -> "qdrant/qdrant"
"deepset-ai/haystack" -> "milvus-io/milvus" ["e"=1]
"deepset-ai/haystack" -> "ThilinaRajapakse/simpletransformers"
"deepset-ai/haystack" -> "semi-technologies/weaviate"
"microsoft/nlp" -> "firmai/data-science-career" ["e"=1]
"microsoft/nlp" -> "huggingface/pytorch-transformers"
"microsoft/nlp" -> "fastai/course-nlp"
"microsoft/nlp" -> "kaushaltrivedi/fast-bert"
"microsoft/nlp" -> "ines/spacy-course"
"microsoft/nlp" -> "stanfordnlp/stanfordnlp"
"microsoft/nlp" -> "zalandoresearch/flair"
"microsoft/nlp" -> "NervanaSystems/nlp-architect"
"microsoft/nlp" -> "tomohideshibata/BERT-related-papers"
"microsoft/nlp" -> "facebookresearch/pytext"
"microsoft/nlp" -> "zihangdai/xlnet"
"microsoft/nlp" -> "huggingface/awesome-papers"
"microsoft/nlp" -> "salesforce/decaNLP"
"microsoft/nlp" -> "neubig/nn4nlp-code"
"microsoft/nlp" -> "omarsar/nlp_overview"
"google-research/bert" -> "hanxiao/bert-as-service"
"google-research/bert" -> "sebastianruder/NLP-progress"
"google-research/bert" -> "huggingface/transformers" ["e"=1]
"google-research/bert" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"google-research/bert" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"google-research/bert" -> "tensorflow/tensor2tensor"
"google-research/bert" -> "huggingface/pytorch-pretrained-BERT"
"google-research/bert" -> "pytorch/fairseq"
"google-research/bert" -> "allenai/allennlp"
"google-research/bert" -> "facebookresearch/fastText"
"google-research/bert" -> "zihangdai/xlnet"
"google-research/bert" -> "tensorflow/models" ["e"=1]
"google-research/bert" -> "openai/gpt-2"
"google-research/bert" -> "fighting41love/funNLP" ["e"=1]
"google-research/bert" -> "brightmart/text_classification"
"elyase/awesome-gpt3" -> "shreyashankar/gpt3-sandbox"
"elyase/awesome-gpt3" -> "openai/gpt-3"
"elyase/awesome-gpt3" -> "EleutherAI/gpt-neo" ["e"=1]
"elyase/awesome-gpt3" -> "humanloop/awesome-chatgpt" ["e"=1]
"elyase/awesome-gpt3" -> "karpathy/minGPT" ["e"=1]
"elyase/awesome-gpt3" -> "jerryjliu/gpt_index" ["e"=1]
"elyase/awesome-gpt3" -> "google-research/text-to-text-transfer-transformer"
"elyase/awesome-gpt3" -> "jbesomi/texthero"
"elyase/awesome-gpt3" -> "minimaxir/gpt-3-experiments"
"elyase/awesome-gpt3" -> "visenger/awesome-mlops" ["e"=1]
"elyase/awesome-gpt3" -> "huggingface/tokenizers"
"elyase/awesome-gpt3" -> "pytorch/fairseq"
"elyase/awesome-gpt3" -> "openai/gpt-2"
"elyase/awesome-gpt3" -> "mikhail-bot/awesome-gpt3"
"elyase/awesome-gpt3" -> "imcaspar/gpt2-ml" ["e"=1]
"openai/gpt-2" -> "google-research/bert"
"openai/gpt-2" -> "openai/gpt-3"
"openai/gpt-2" -> "huggingface/pytorch-pretrained-BERT"
"openai/gpt-2" -> "zihangdai/xlnet"
"openai/gpt-2" -> "pytorch/fairseq"
"openai/gpt-2" -> "sebastianruder/NLP-progress"
"openai/gpt-2" -> "allenai/allennlp"
"openai/gpt-2" -> "tensorflow/tensor2tensor"
"openai/gpt-2" -> "Morizeyao/GPT2-Chinese" ["e"=1]
"openai/gpt-2" -> "hanxiao/bert-as-service"
"openai/gpt-2" -> "minimaxir/gpt-2-simple"
"openai/gpt-2" -> "google-research/google-research"
"openai/gpt-2" -> "facebookresearch/fastText"
"openai/gpt-2" -> "huggingface/transformers" ["e"=1]
"openai/gpt-2" -> "karpathy/minGPT" ["e"=1]
"graykode/nlp-roadmap" -> "graykode/nlp-tutorial"
"graykode/nlp-roadmap" -> "thunlp/PLMpapers"
"graykode/nlp-roadmap" -> "graykode/distribution-is-all-you-need" ["e"=1]
"graykode/nlp-roadmap" -> "yandexdataschool/nlp_course"
"graykode/nlp-roadmap" -> "sebastianruder/NLP-progress"
"graykode/nlp-roadmap" -> "mhagiwara/100-nlp-papers"
"graykode/nlp-roadmap" -> "FudanNLP/nlp-beginner" ["e"=1]
"graykode/nlp-roadmap" -> "microsoft/nlp-recipes"
"graykode/nlp-roadmap" -> "keon/awesome-nlp" ["e"=1]
"graykode/nlp-roadmap" -> "songyingxin/NLPer-Interview" ["e"=1]
"graykode/nlp-roadmap" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"graykode/nlp-roadmap" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"graykode/nlp-roadmap" -> "zihangdai/xlnet"
"graykode/nlp-roadmap" -> "zibuyu/research_tao" ["e"=1]
"graykode/nlp-roadmap" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"OmkarPathak/pyresparser" -> "OmkarPathak/ResumeParser"
"OmkarPathak/pyresparser" -> "bjherger/ResumeParser"
"OmkarPathak/pyresparser" -> "DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy"
"OmkarPathak/pyresparser" -> "chen0040/keras-english-resume-parser-and-analyzer"
"OmkarPathak/pyresparser" -> "JAIJANYANI/Automated-Resume-Screening-System"
"OmkarPathak/pyresparser" -> "perminder-klair/resume-parser"
"OmkarPathak/pyresparser" -> "divapriya/Language_Processing"
"OmkarPathak/pyresparser" -> "kbrajwani/resume_parser"
"OmkarPathak/pyresparser" -> "0dust/ResumeFilter"
"OmkarPathak/pyresparser" -> "wanghaisheng/resume-parse-evaluation"
"OmkarPathak/pyresparser" -> "jineshdhruv8/ResumeParser"
"OmkarPathak/pyresparser" -> "ongteckwu/Resume-Rater"
"OmkarPathak/pyresparser" -> "itsjafer/resume-parser"
"OmkarPathak/pyresparser" -> "likerRr/code4goal-resume-parser"
"philipperemy/keras-tcn" -> "locuslab/TCN"
"philipperemy/keras-tcn" -> "philipperemy/keras-attention-mechanism" ["e"=1]
"philipperemy/keras-tcn" -> "Baichenjia/Tensorflow-TCN"
"philipperemy/keras-tcn" -> "JEddy92/TimeSeries_Seq2Seq" ["e"=1]
"philipperemy/keras-tcn" -> "gantheory/TPA-LSTM" ["e"=1]
"philipperemy/keras-tcn" -> "hfawaz/dl-4-tsc" ["e"=1]
"philipperemy/keras-tcn" -> "philipperemy/n-beats" ["e"=1]
"philipperemy/keras-tcn" -> "YuanTingHsieh/TF_TCN"
"philipperemy/keras-tcn" -> "timeseriesAI/tsai" ["e"=1]
"philipperemy/keras-tcn" -> "awslabs/gluon-ts" ["e"=1]
"philipperemy/keras-tcn" -> "EvilPsyCHo/Deep-Time-Series-Prediction" ["e"=1]
"philipperemy/keras-tcn" -> "CyberZHG/keras-self-attention" ["e"=1]
"philipperemy/keras-tcn" -> "jdb78/pytorch-forecasting" ["e"=1]
"philipperemy/keras-tcn" -> "LongxingTan/Time-series-prediction" ["e"=1]
"philipperemy/keras-tcn" -> "philipperemy/keract" ["e"=1]
"tensorflow/tensor2tensor" -> "google-research/bert"
"tensorflow/tensor2tensor" -> "Kyubyong/transformer"
"tensorflow/tensor2tensor" -> "tensorflow/nmt"
"tensorflow/tensor2tensor" -> "pytorch/fairseq"
"tensorflow/tensor2tensor" -> "allenai/allennlp"
"tensorflow/tensor2tensor" -> "zihangdai/xlnet"
"tensorflow/tensor2tensor" -> "hanxiao/bert-as-service"
"tensorflow/tensor2tensor" -> "jadore801120/attention-is-all-you-need-pytorch"
"tensorflow/tensor2tensor" -> "huggingface/pytorch-pretrained-BERT"
"tensorflow/tensor2tensor" -> "google/seq2seq"
"tensorflow/tensor2tensor" -> "facebookresearch/fastText"
"tensorflow/tensor2tensor" -> "sebastianruder/NLP-progress"
"tensorflow/tensor2tensor" -> "OpenNMT/OpenNMT-py"
"tensorflow/tensor2tensor" -> "google/sentencepiece"
"tensorflow/tensor2tensor" -> "google/trax"
"RaRe-Technologies/gensim" -> "explosion/spaCy"
"RaRe-Technologies/gensim" -> "facebookresearch/fastText"
"RaRe-Technologies/gensim" -> "nltk/nltk"
"RaRe-Technologies/gensim" -> "allenai/allennlp"
"RaRe-Technologies/gensim" -> "google-research/bert"
"RaRe-Technologies/gensim" -> "stanfordnlp/GloVe"
"RaRe-Technologies/gensim" -> "sebastianruder/NLP-progress"
"RaRe-Technologies/gensim" -> "hanxiao/bert-as-service"
"RaRe-Technologies/gensim" -> "dmlc/xgboost" ["e"=1]
"RaRe-Technologies/gensim" -> "brightmart/text_classification"
"RaRe-Technologies/gensim" -> "facebookresearch/faiss"
"RaRe-Technologies/gensim" -> "stanfordnlp/CoreNLP"
"RaRe-Technologies/gensim" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"RaRe-Technologies/gensim" -> "keon/awesome-nlp" ["e"=1]
"RaRe-Technologies/gensim" -> "sloria/TextBlob"
"chartbeat-labs/textacy" -> "huggingface/neuralcoref"
"chartbeat-labs/textacy" -> "explosion/thinc"
"chartbeat-labs/textacy" -> "explosion/sense2vec"
"chartbeat-labs/textacy" -> "DerwenAI/pytextrank" ["e"=1]
"chartbeat-labs/textacy" -> "JasonKessler/scattertext"
"chartbeat-labs/textacy" -> "aboSamoor/polyglot"
"chartbeat-labs/textacy" -> "allenai/scispacy" ["e"=1]
"chartbeat-labs/textacy" -> "explosion/projects"
"chartbeat-labs/textacy" -> "boudinfl/pke" ["e"=1]
"chartbeat-labs/textacy" -> "ines/spacy-course"
"chartbeat-labs/textacy" -> "explosion/spacy-transformers"
"chartbeat-labs/textacy" -> "LIAAD/yake" ["e"=1]
"chartbeat-labs/textacy" -> "cemoody/lda2vec"
"chartbeat-labs/textacy" -> "explosion/spaCy"
"chartbeat-labs/textacy" -> "openeventdata/mordecai"
"ivan-bilan/The-NLP-Pandect" -> "dair-ai/nlp_paper_summaries"
"ivan-bilan/The-NLP-Pandect" -> "PAIR-code/lit"
"ivan-bilan/The-NLP-Pandect" -> "microsoft/nlp-recipes"
"ivan-bilan/The-NLP-Pandect" -> "recognai/rubrix"
"ivan-bilan/The-NLP-Pandect" -> "makcedward/nlpaug"
"ivan-bilan/The-NLP-Pandect" -> "ddangelov/Top2Vec"
"ivan-bilan/The-NLP-Pandect" -> "jalammar/ecco"
"ivan-bilan/The-NLP-Pandect" -> "practical-nlp/practical-nlp"
"ivan-bilan/The-NLP-Pandect" -> "mhagiwara/100-nlp-papers"
"ivan-bilan/The-NLP-Pandect" -> "QData/TextAttack"
"ivan-bilan/The-NLP-Pandect" -> "fastai/course-nlp"
"ivan-bilan/The-NLP-Pandect" -> "huggingface/awesome-papers"
"ivan-bilan/The-NLP-Pandect" -> "MaartenGr/BERTopic"
"ivan-bilan/The-NLP-Pandect" -> "deepset-ai/FARM"
"ivan-bilan/The-NLP-Pandect" -> "NiuTrans/ABigSurvey"
"NorskRegnesentral/skweak" -> "recognai/rubrix"
"NorskRegnesentral/skweak" -> "autonlab/weasel"
"NorskRegnesentral/skweak" -> "erre-quadro/spikex"
"NorskRegnesentral/skweak" -> "cdpierse/transformers-interpret"
"NorskRegnesentral/skweak" -> "huggingface/setfit"
"NorskRegnesentral/skweak" -> "jalammar/ecco"
"NorskRegnesentral/skweak" -> "ddangelov/Top2Vec"
"NorskRegnesentral/skweak" -> "snorkel-team/snorkel"
"NorskRegnesentral/skweak" -> "webis-de/small-text"
"NorskRegnesentral/skweak" -> "MilaNLProc/contextualized-topic-models"
"NorskRegnesentral/skweak" -> "Pandora-Intelligence/concise-concepts"
"NorskRegnesentral/skweak" -> "KennethEnevoldsen/augmenty"
"NorskRegnesentral/skweak" -> "HazyResearch/flyingsquid"
"NorskRegnesentral/skweak" -> "yueyu1030/COSINE"
"NorskRegnesentral/skweak" -> "koaning/doubtlab" ["e"=1]
"explosion/floret" -> "explosion/spacy-experimental"
"explosion/floret" -> "KennethEnevoldsen/augmenty"
"explosion/floret" -> "explosion/coreferee"
"explosion/floret" -> "pmbaumgartner/spacy-html-tokenizer"
"explosion/spaCy" -> "RaRe-Technologies/gensim"
"explosion/spaCy" -> "allenai/allennlp"
"explosion/spaCy" -> "facebookresearch/fastText"
"explosion/spaCy" -> "nltk/nltk"
"explosion/spaCy" -> "sebastianruder/NLP-progress"
"explosion/spaCy" -> "google-research/bert"
"explosion/spaCy" -> "keon/awesome-nlp" ["e"=1]
"explosion/spaCy" -> "fastai/fastai" ["e"=1]
"explosion/spaCy" -> "scikit-learn/scikit-learn" ["e"=1]
"explosion/spaCy" -> "huggingface/transformers" ["e"=1]
"explosion/spaCy" -> "pytorch/pytorch" ["e"=1]
"explosion/spaCy" -> "streamlit/streamlit" ["e"=1]
"explosion/spaCy" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"explosion/spaCy" -> "dmlc/xgboost" ["e"=1]
"explosion/spaCy" -> "facebookresearch/faiss"
"huggingface/setfit" -> "recognai/rubrix"
"huggingface/setfit" -> "argilla-io/argilla"
"huggingface/setfit" -> "huggingface/optimum" ["e"=1]
"huggingface/setfit" -> "webis-de/small-text"
"huggingface/setfit" -> "cdpierse/transformers-interpret"
"huggingface/setfit" -> "NorskRegnesentral/skweak"
"huggingface/setfit" -> "huggingface/evaluate" ["e"=1]
"huggingface/setfit" -> "HKUNLP/instructor-embedding" ["e"=1]
"huggingface/setfit" -> "MaartenGr/KeyBERT"
"huggingface/setfit" -> "huggingface/text-generation-inference" ["e"=1]
"huggingface/setfit" -> "MaartenGr/BERTopic"
"huggingface/setfit" -> "huggingface/peft" ["e"=1]
"huggingface/setfit" -> "ddangelov/Top2Vec"
"huggingface/setfit" -> "TimDettmers/bitsandbytes" ["e"=1]
"huggingface/setfit" -> "ELS-RD/transformer-deploy" ["e"=1]
"recognai/rubrix" -> "NorskRegnesentral/skweak"
"recognai/rubrix" -> "huggingface/setfit"
"recognai/rubrix" -> "webis-de/small-text"
"recognai/rubrix" -> "jalammar/ecco"
"recognai/rubrix" -> "MilaNLProc/contextualized-topic-models"
"recognai/rubrix" -> "MaartenGr/PolyFuzz"
"recognai/rubrix" -> "cdpierse/transformers-interpret"
"recognai/rubrix" -> "erre-quadro/spikex"
"recognai/rubrix" -> "huggingface/optimum" ["e"=1]
"recognai/rubrix" -> "PrithivirajDamodaran/Gramformer"
"recognai/rubrix" -> "ddangelov/Top2Vec"
"recognai/rubrix" -> "neuml/txtai"
"recognai/rubrix" -> "ivan-bilan/The-NLP-Pandect"
"recognai/rubrix" -> "Pandora-Intelligence/concise-concepts"
"recognai/rubrix" -> "MaartenGr/BERTopic"
"code-kern-ai/refinery" -> "code-kern-ai/bricks" ["e"=1]
"code-kern-ai/refinery" -> "argilla-io/argilla"
"code-kern-ai/refinery" -> "NorskRegnesentral/skweak"
"code-kern-ai/refinery" -> "recognai/rubrix"
"code-kern-ai/refinery" -> "huggingface/setfit"
"code-kern-ai/refinery" -> "webis-de/small-text"
"code-kern-ai/refinery" -> "impira/docquery" ["e"=1]
"code-kern-ai/refinery" -> "code-kern-ai/automl-docker"
"code-kern-ai/refinery" -> "CrowdDotDev/crowd.dev" ["e"=1]
"code-kern-ai/refinery" -> "qdrant/quaterion" ["e"=1]
"code-kern-ai/refinery" -> "HLasse/TextDescriptives"
"code-kern-ai/refinery" -> "cleanlab/cleanlab" ["e"=1]
"code-kern-ai/refinery" -> "agermanidis/pigeon" ["e"=1]
"code-kern-ai/refinery" -> "neuml/txtai"
"code-kern-ai/refinery" -> "qdrant/qdrant"
"3Top/word2vec-api" -> "Kyubyong/wordvectors"
"3Top/word2vec-api" -> "idio/wiki2vec" ["e"=1]
"3Top/word2vec-api" -> "danielfrg/word2vec"
"3Top/word2vec-api" -> "yoonkim/CNN_sentence"
"3Top/word2vec-api" -> "stanfordnlp/GloVe"
"3Top/word2vec-api" -> "cemoody/lda2vec"
"3Top/word2vec-api" -> "ryankiros/skip-thoughts"
"3Top/word2vec-api" -> "farizrahman4u/seq2seq" ["e"=1]
"3Top/word2vec-api" -> "dennybritz/cnn-text-classification-tf"
"3Top/word2vec-api" -> "facebookresearch/InferSent"
"3Top/word2vec-api" -> "facebook/MemNN" ["e"=1]
"3Top/word2vec-api" -> "Hironsan/awesome-embedding-models"
"3Top/word2vec-api" -> "andrewt3000/DL4NLP"
"3Top/word2vec-api" -> "facebookresearch/fastText"
"3Top/word2vec-api" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"facebookresearch/fastText" -> "google-research/bert"
"facebookresearch/fastText" -> "facebookresearch/faiss"
"facebookresearch/fastText" -> "RaRe-Technologies/gensim"
"facebookresearch/fastText" -> "allenai/allennlp"
"facebookresearch/fastText" -> "sebastianruder/NLP-progress"
"facebookresearch/fastText" -> "dmlc/xgboost" ["e"=1]
"facebookresearch/fastText" -> "explosion/spaCy"
"facebookresearch/fastText" -> "tensorflow/tensor2tensor"
"facebookresearch/fastText" -> "brightmart/text_classification"
"facebookresearch/fastText" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"facebookresearch/fastText" -> "fchollet/keras" ["e"=1]
"facebookresearch/fastText" -> "stanfordnlp/GloVe"
"facebookresearch/fastText" -> "hanxiao/bert-as-service"
"facebookresearch/fastText" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"facebookresearch/fastText" -> "tensorflow/models" ["e"=1]
"niderhoff/nlp-datasets" -> "sebastianruder/NLP-progress"
"niderhoff/nlp-datasets" -> "keon/awesome-nlp" ["e"=1]
"niderhoff/nlp-datasets" -> "allenai/allennlp"
"niderhoff/nlp-datasets" -> "zalandoresearch/flair"
"niderhoff/nlp-datasets" -> "huggingface/pytorch-pretrained-BERT"
"niderhoff/nlp-datasets" -> "hanxiao/bert-as-service"
"niderhoff/nlp-datasets" -> "google/sentencepiece"
"niderhoff/nlp-datasets" -> "brightmart/text_classification"
"niderhoff/nlp-datasets" -> "Kyubyong/nlp_tasks"
"niderhoff/nlp-datasets" -> "stanfordnlp/GloVe"
"niderhoff/nlp-datasets" -> "OpenNMT/OpenNMT-py"
"niderhoff/nlp-datasets" -> "pytorch/fairseq"
"niderhoff/nlp-datasets" -> "facebookresearch/fastText"
"niderhoff/nlp-datasets" -> "pytorch/text"
"niderhoff/nlp-datasets" -> "jacobeisenstein/gt-nlp-class"
"salestock/fastText.py" -> "vrasneur/pyfasttext"
"salestock/fastText.py" -> "yoonkim/CNN_sentence"
"salestock/fastText.py" -> "apcode/tensorflow_fasttext"
"salestock/fastText.py" -> "facebookresearch/fastText"
"salestock/fastText.py" -> "Hironsan/anago" ["e"=1]
"salestock/fastText.py" -> "Kyubyong/wordvectors"
"salestock/fastText.py" -> "dennybritz/chatbot-retrieval" ["e"=1]
"salestock/fastText.py" -> "dennybritz/cnn-text-classification-tf"
"salestock/fastText.py" -> "facebookresearch/Starspace"
"salestock/fastText.py" -> "glample/tagger" ["e"=1]
"salestock/fastText.py" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"salestock/fastText.py" -> "brightmart/text_classification"
"salestock/fastText.py" -> "vinhkhuc/JFastText" ["e"=1]
"salestock/fastText.py" -> "harvardnlp/seq2seq-attn" ["e"=1]
"salestock/fastText.py" -> "richliao/textClassifier" ["e"=1]
"google/cld3" -> "bsolomon1124/pycld3"
"google/cld3" -> "CLD2Owners/cld2"
"google/cld3" -> "aboSamoor/pycld2"
"google/cld3" -> "Elizafox/cld3"
"google/cld3" -> "saffsd/langid.py"
"google/cld3" -> "Mimino666/langdetect"
"google/cld3" -> "mikemccand/chromium-compact-language-detector"
"google/cld3" -> "google-research/multilingual-t5"
"google/cld3" -> "mjpost/sacrebleu"
"google/cld3" -> "akihikodaki/cld3-ruby" ["e"=1]
"google/cld3" -> "shuyo/language-detection"
"mchen24/iclr2017" -> "IBM/WordMoversEmbeddings"
"microsoft/nlp-recipes" -> "dair-ai/nlp_paper_summaries"
"microsoft/nlp-recipes" -> "microsoft/forecasting" ["e"=1]
"microsoft/nlp-recipes" -> "sebastianruder/NLP-progress"
"microsoft/nlp-recipes" -> "keon/awesome-nlp" ["e"=1]
"microsoft/nlp-recipes" -> "huggingface/tokenizers"
"microsoft/nlp-recipes" -> "ivan-bilan/The-NLP-Pandect"
"microsoft/nlp-recipes" -> "microsoft/computervision-recipes" ["e"=1]
"microsoft/nlp-recipes" -> "fastai/course-nlp"
"microsoft/nlp-recipes" -> "microsoft/recommenders" ["e"=1]
"microsoft/nlp-recipes" -> "UKPLab/sentence-transformers"
"microsoft/nlp-recipes" -> "huggingface/awesome-papers"
"microsoft/nlp-recipes" -> "chiphuyen/machine-learning-systems-design" ["e"=1]
"microsoft/nlp-recipes" -> "makcedward/nlpaug"
"microsoft/nlp-recipes" -> "zalandoresearch/flair"
"microsoft/nlp-recipes" -> "allenai/allennlp"
"wasiahmad/paraphrase_identification" -> "iamaaditya/neural-paraphrase-generation"
"scoutbee/pytorch-nlp-notebooks" -> "joosthub/PyTorchNLPBook"
"scoutbee/pytorch-nlp-notebooks" -> "sotte/pytorch_tutorial"
"scoutbee/pytorch-nlp-notebooks" -> "ddelange/pipgrip"
"spotify/annoy" -> "facebookresearch/faiss"
"spotify/annoy" -> "erikbern/ann-benchmarks" ["e"=1]
"spotify/annoy" -> "nmslib/nmslib" ["e"=1]
"spotify/annoy" -> "facebookresearch/fastText"
"spotify/annoy" -> "UKPLab/sentence-transformers"
"spotify/annoy" -> "hanxiao/bert-as-service"
"spotify/annoy" -> "nmslib/hnswlib" ["e"=1]
"spotify/annoy" -> "allenai/allennlp"
"spotify/annoy" -> "spotify/luigi" ["e"=1]
"spotify/annoy" -> "dmlc/xgboost" ["e"=1]
"spotify/annoy" -> "RaRe-Technologies/gensim"
"spotify/annoy" -> "lyst/lightfm" ["e"=1]
"spotify/annoy" -> "hyperopt/hyperopt" ["e"=1]
"spotify/annoy" -> "marcotcr/lime" ["e"=1]
"spotify/annoy" -> "google/sentencepiece"
"BiuBiuBiLL/NPEET_LNC" -> "gregversteeg/NPEET"
"google/seq2seq" -> "tensorflow/nmt"
"google/seq2seq" -> "farizrahman4u/seq2seq" ["e"=1]
"google/seq2seq" -> "tensorflow/tensor2tensor"
"google/seq2seq" -> "Kyubyong/transformer"
"google/seq2seq" -> "OpenNMT/OpenNMT-py"
"google/seq2seq" -> "rsennrich/subword-nmt"
"google/seq2seq" -> "dennybritz/cnn-text-classification-tf"
"google/seq2seq" -> "LantaoYu/SeqGAN"
"google/seq2seq" -> "ematvey/tensorflow-seq2seq-tutorials"
"google/seq2seq" -> "facebookresearch/fastText"
"google/seq2seq" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"google/seq2seq" -> "google/sentencepiece"
"google/seq2seq" -> "abisee/pointer-generator" ["e"=1]
"google/seq2seq" -> "deepmind/sonnet" ["e"=1]
"google/seq2seq" -> "facebookresearch/fairseq"
"google/trax" -> "tensorflow/tensor2tensor"
"google/trax" -> "google/jax"
"google/trax" -> "google/flax" ["e"=1]
"google/trax" -> "google/sentencepiece"
"google/trax" -> "pytorch/fairseq"
"google/trax" -> "google-research/text-to-text-transfer-transformer"
"google/trax" -> "lucidrains/reformer-pytorch"
"google/trax" -> "zihangdai/xlnet"
"google/trax" -> "huggingface/tokenizers"
"google/trax" -> "google-research/google-research"
"google/trax" -> "deepmind/dm-haiku" ["e"=1]
"google/trax" -> "UKPLab/sentence-transformers"
"google/trax" -> "allenai/allennlp"
"google/trax" -> "arogozhnikov/einops" ["e"=1]
"google/trax" -> "PyTorchLightning/pytorch-lightning" ["e"=1]
"tensorflow/lingvo" -> "kimiyoung/transformer-xl"
"tensorflow/lingvo" -> "mravanelli/pytorch-kaldi" ["e"=1]
"tensorflow/lingvo" -> "espnet/espnet" ["e"=1]
"tensorflow/lingvo" -> "NVIDIA/OpenSeq2Seq" ["e"=1]
"tensorflow/lingvo" -> "zihangdai/xlnet"
"tensorflow/lingvo" -> "google/sentencepiece"
"tensorflow/lingvo" -> "huggingface/pytorch-pretrained-BERT"
"tensorflow/lingvo" -> "facebookresearch/XLM"
"tensorflow/lingvo" -> "rsennrich/subword-nmt"
"tensorflow/lingvo" -> "syhw/wer_are_we" ["e"=1]
"tensorflow/lingvo" -> "PaddlePaddle/LARK" ["e"=1]
"tensorflow/lingvo" -> "tensorflow/tensor2tensor"
"tensorflow/lingvo" -> "facebookresearch/wav2letter" ["e"=1]
"tensorflow/lingvo" -> "facebookresearch/pytext"
"tensorflow/lingvo" -> "HawkAaron/warp-transducer" ["e"=1]
"huggingface/neuralcoref" -> "kentonl/e2e-coref"
"huggingface/neuralcoref" -> "chartbeat-labs/textacy"
"huggingface/neuralcoref" -> "allenai/allennlp"
"huggingface/neuralcoref" -> "zalandoresearch/flair"
"huggingface/neuralcoref" -> "mandarjoshi90/coref"
"huggingface/neuralcoref" -> "facebookresearch/InferSent"
"huggingface/neuralcoref" -> "huggingface/pytorch-pretrained-BERT"
"huggingface/neuralcoref" -> "clarkkev/deep-coref"
"huggingface/neuralcoref" -> "explosion/thinc"
"huggingface/neuralcoref" -> "shayneobrien/coreference-resolution"
"huggingface/neuralcoref" -> "hanxiao/bert-as-service"
"huggingface/neuralcoref" -> "allenai/scispacy" ["e"=1]
"huggingface/neuralcoref" -> "attardi/wikiextractor"
"huggingface/neuralcoref" -> "huggingface/hmtl"
"huggingface/neuralcoref" -> "zihangdai/xlnet"
"hanxiao/bert-as-service" -> "google-research/bert"
"hanxiao/bert-as-service" -> "huggingface/pytorch-pretrained-BERT"
"hanxiao/bert-as-service" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"hanxiao/bert-as-service" -> "zihangdai/xlnet"
"hanxiao/bert-as-service" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"hanxiao/bert-as-service" -> "UKPLab/sentence-transformers"
"hanxiao/bert-as-service" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"hanxiao/bert-as-service" -> "allenai/allennlp"
"hanxiao/bert-as-service" -> "sebastianruder/NLP-progress"
"hanxiao/bert-as-service" -> "brightmart/text_classification"
"hanxiao/bert-as-service" -> "brightmart/albert_zh" ["e"=1]
"hanxiao/bert-as-service" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"hanxiao/bert-as-service" -> "pytorch/fairseq"
"hanxiao/bert-as-service" -> "tensorflow/tensor2tensor"
"hanxiao/bert-as-service" -> "zalandoresearch/flair"
"apcode/tensorflow_fasttext" -> "zhengwsh/text-classification" ["e"=1]
"fuzhenxin/Style-Transfer-in-Text" -> "shentianxiao/language-style-transfer"
"fuzhenxin/Style-Transfer-in-Text" -> "zhijing-jin/Text_Style_Transfer_Survey"
"fuzhenxin/Style-Transfer-in-Text" -> "lijuncen/Sentiment-and-Style-Transfer"
"fuzhenxin/Style-Transfer-in-Text" -> "asyml/texar"
"fuzhenxin/Style-Transfer-in-Text" -> "luofuli/DualRL"
"fuzhenxin/Style-Transfer-in-Text" -> "THUNLP-MT/TG-Reading-List"
"fuzhenxin/Style-Transfer-in-Text" -> "vineetjohn/linguistic-style-transfer"
"fuzhenxin/Style-Transfer-in-Text" -> "fastnlp/style-transformer"
"fuzhenxin/Style-Transfer-in-Text" -> "Maluuba/nlg-eval" ["e"=1]
"fuzhenxin/Style-Transfer-in-Text" -> "shrimai/Style-Transfer-Through-Back-Translation"
"fuzhenxin/Style-Transfer-in-Text" -> "Nrgeup/controllable-text-attribute-transfer"
"fuzhenxin/Style-Transfer-in-Text" -> "uber-research/PPLM"
"fuzhenxin/Style-Transfer-in-Text" -> "geek-ai/Texygen"
"fuzhenxin/Style-Transfer-in-Text" -> "thunlp/TAADpapers"
"fuzhenxin/Style-Transfer-in-Text" -> "facebookresearch/XLM"
"vineetjohn/linguistic-style-transfer" -> "fuzhenxin/text_style_transfer"
"vineetjohn/linguistic-style-transfer" -> "h3lio5/linguistic-style-transfer-pytorch"
"vineetjohn/linguistic-style-transfer" -> "Nrgeup/controllable-text-attribute-transfer"
"vineetjohn/linguistic-style-transfer" -> "shentianxiao/language-style-transfer"
"vineetjohn/linguistic-style-transfer" -> "rpryzant/delete_retrieve_generate"
"vineetjohn/linguistic-style-transfer" -> "agaralabs/transformer-drg-style-transfer"
"vineetjohn/linguistic-style-transfer" -> "lijuncen/Sentiment-and-Style-Transfer"
"vineetjohn/linguistic-style-transfer" -> "shrimai/Style-Transfer-Through-Back-Translation"
"vineetjohn/linguistic-style-transfer" -> "VAShibaev/text_style_transfer"
"amueller/word_cloud" -> "fxsjy/jieba" ["e"=1]
"amueller/word_cloud" -> "isnowfy/snownlp" ["e"=1]
"amueller/word_cloud" -> "RaRe-Technologies/gensim"
"amueller/word_cloud" -> "bokeh/bokeh" ["e"=1]
"amueller/word_cloud" -> "sloria/TextBlob"
"amueller/word_cloud" -> "nltk/nltk"
"amueller/word_cloud" -> "mwaskom/seaborn" ["e"=1]
"amueller/word_cloud" -> "facebookresearch/fastText"
"amueller/word_cloud" -> "pyecharts/pyecharts" ["e"=1]
"amueller/word_cloud" -> "tqdm/tqdm" ["e"=1]
"amueller/word_cloud" -> "explosion/spaCy"
"amueller/word_cloud" -> "littlecodersh/ItChat" ["e"=1]
"amueller/word_cloud" -> "python-visualization/folium" ["e"=1]
"amueller/word_cloud" -> "dmlc/xgboost" ["e"=1]
"amueller/word_cloud" -> "plotly/plotly.py" ["e"=1]
"taolei87/sru" -> "salesforce/pytorch-qrnn"
"taolei87/sru" -> "facebookresearch/fairseq-py"
"taolei87/sru" -> "lanpa/tensorboard-pytorch" ["e"=1]
"taolei87/sru" -> "salesforce/awd-lstm-lm"
"taolei87/sru" -> "MaximumEntropy/Seq2Seq-PyTorch"
"taolei87/sru" -> "eladhoffer/seq2seq.pytorch"
"taolei87/sru" -> "allenai/bi-att-flow" ["e"=1]
"taolei87/sru" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"taolei87/sru" -> "spro/practical-pytorch"
"taolei87/sru" -> "facebookresearch/InferSent"
"taolei87/sru" -> "rguthrie3/DeepLearningForNLPInPytorch"
"taolei87/sru" -> "facebookresearch/DrQA"
"taolei87/sru" -> "kimiyoung/transformer-xl"
"taolei87/sru" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"taolei87/sru" -> "pytorch/text"
"fastai/course-nlp" -> "fastai/course-v3" ["e"=1]
"fastai/course-nlp" -> "microsoft/nlp-recipes"
"fastai/course-nlp" -> "fastai/numerical-linear-algebra" ["e"=1]
"fastai/course-nlp" -> "yandexdataschool/nlp_course"
"fastai/course-nlp" -> "graykode/nlp-tutorial"
"fastai/course-nlp" -> "joosthub/PyTorchNLPBook"
"fastai/course-nlp" -> "ivan-bilan/The-NLP-Pandect"
"fastai/course-nlp" -> "keon/awesome-nlp" ["e"=1]
"fastai/course-nlp" -> "sebastianruder/NLP-progress"
"fastai/course-nlp" -> "fastai/fastai" ["e"=1]
"fastai/course-nlp" -> "mihail911/nlp-library"
"fastai/course-nlp" -> "fastai/fastbook" ["e"=1]
"fastai/course-nlp" -> "susanli2016/NLP-with-Python"
"fastai/course-nlp" -> "jacobeisenstein/gt-nlp-class"
"fastai/course-nlp" -> "llSourcell/Learn-Natural-Language-Processing-Curriculum" ["e"=1]
"cjhutto/vaderSentiment" -> "sloria/TextBlob"
"cjhutto/vaderSentiment" -> "RaRe-Technologies/gensim"
"cjhutto/vaderSentiment" -> "flairNLP/flair"
"cjhutto/vaderSentiment" -> "xiamx/awesome-sentiment-analysis" ["e"=1]
"cjhutto/vaderSentiment" -> "nltk/nltk"
"cjhutto/vaderSentiment" -> "explosion/spaCy"
"cjhutto/vaderSentiment" -> "clips/pattern" ["e"=1]
"cjhutto/vaderSentiment" -> "chartbeat-labs/textacy"
"cjhutto/vaderSentiment" -> "openai/generating-reviews-discovering-sentiment"
"cjhutto/vaderSentiment" -> "JasonKessler/scattertext"
"cjhutto/vaderSentiment" -> "facebookresearch/fastText"
"cjhutto/vaderSentiment" -> "huggingface/neuralcoref"
"cjhutto/vaderSentiment" -> "stanfordnlp/GloVe"
"cjhutto/vaderSentiment" -> "niderhoff/nlp-datasets"
"cjhutto/vaderSentiment" -> "bmabey/pyLDAvis"
"seatgeek/fuzzywuzzy" -> "seatgeek/thefuzz"
"seatgeek/fuzzywuzzy" -> "clips/pattern" ["e"=1]
"seatgeek/fuzzywuzzy" -> "sloria/TextBlob"
"seatgeek/fuzzywuzzy" -> "crsmithdev/arrow" ["e"=1]
"seatgeek/fuzzywuzzy" -> "spotify/luigi" ["e"=1]
"seatgeek/fuzzywuzzy" -> "explosion/spaCy"
"seatgeek/fuzzywuzzy" -> "joke2k/faker" ["e"=1]
"seatgeek/fuzzywuzzy" -> "pandas-profiling/pandas-profiling" ["e"=1]
"seatgeek/fuzzywuzzy" -> "ztane/python-Levenshtein"
"seatgeek/fuzzywuzzy" -> "modin-project/modin" ["e"=1]
"seatgeek/fuzzywuzzy" -> "RaRe-Technologies/gensim"
"seatgeek/fuzzywuzzy" -> "vi3k6i5/flashtext" ["e"=1]
"seatgeek/fuzzywuzzy" -> "dedupeio/dedupe" ["e"=1]
"seatgeek/fuzzywuzzy" -> "dbader/schedule" ["e"=1]
"seatgeek/fuzzywuzzy" -> "codelucas/newspaper" ["e"=1]
"QData/TextAttack" -> "makcedward/nlpaug"
"QData/TextAttack" -> "thunlp/TAADpapers"
"QData/TextAttack" -> "thunlp/OpenAttack"
"QData/TextAttack" -> "marcotcr/checklist"
"QData/TextAttack" -> "jind11/TextFooler"
"QData/TextAttack" -> "jasonwei20/eda_nlp" ["e"=1]
"QData/TextAttack" -> "PAIR-code/lit"
"QData/TextAttack" -> "GEM-benchmark/NL-Augmenter"
"QData/TextAttack" -> "styfeng/DataAug4NLP"
"QData/TextAttack" -> "jessevig/bertviz"
"QData/TextAttack" -> "UKPLab/sentence-transformers"
"QData/TextAttack" -> "huggingface/awesome-papers"
"QData/TextAttack" -> "princeton-nlp/SimCSE" ["e"=1]
"QData/TextAttack" -> "huggingface/nlp"
"QData/TextAttack" -> "timoschick/pet" ["e"=1]
"google/jax" -> "google/flax" ["e"=1]
"google/jax" -> "HIPS/autograd" ["e"=1]
"google/jax" -> "ray-project/ray" ["e"=1]
"google/jax" -> "PyTorchLightning/pytorch-lightning" ["e"=1]
"google/jax" -> "google-research/google-research"
"google/jax" -> "pytorch/pytorch" ["e"=1]
"google/jax" -> "google/trax"
"google/jax" -> "deepmind/dm-haiku" ["e"=1]
"google/jax" -> "arogozhnikov/einops" ["e"=1]
"google/jax" -> "deepmind/deepmind-research" ["e"=1]
"google/jax" -> "facebookresearch/faiss"
"google/jax" -> "slundberg/shap" ["e"=1]
"google/jax" -> "rwightman/pytorch-image-models" ["e"=1]
"google/jax" -> "pytorch/fairseq"
"google/jax" -> "microsoft/DeepSpeed" ["e"=1]
"makcedward/nlpaug" -> "QData/TextAttack"
"makcedward/nlpaug" -> "jasonwei20/eda_nlp" ["e"=1]
"makcedward/nlpaug" -> "UKPLab/sentence-transformers"
"makcedward/nlpaug" -> "princeton-nlp/SimCSE" ["e"=1]
"makcedward/nlpaug" -> "google-research/uda" ["e"=1]
"makcedward/nlpaug" -> "marcotcr/checklist"
"makcedward/nlpaug" -> "jessevig/bertviz"
"makcedward/nlpaug" -> "ThilinaRajapakse/simpletransformers"
"makcedward/nlpaug" -> "pytorch/fairseq"
"makcedward/nlpaug" -> "flairNLP/flair"
"makcedward/nlpaug" -> "PAIR-code/lit"
"makcedward/nlpaug" -> "styfeng/DataAug4NLP"
"makcedward/nlpaug" -> "MaartenGr/BERTopic"
"makcedward/nlpaug" -> "thunlp/PLMpapers"
"makcedward/nlpaug" -> "hanxiao/bert-as-service"
"huggingface/pytorch-transformers" -> "zihangdai/xlnet"
"huggingface/pytorch-transformers" -> "allenai/allennlp"
"huggingface/pytorch-transformers" -> "hanxiao/bert-as-service"
"huggingface/pytorch-transformers" -> "pytorch/fairseq"
"huggingface/pytorch-transformers" -> "zalandoresearch/flair"
"huggingface/pytorch-transformers" -> "sebastianruder/NLP-progress"
"huggingface/pytorch-transformers" -> "brightmart/albert_zh" ["e"=1]
"huggingface/pytorch-transformers" -> "facebookresearch/XLM"
"huggingface/pytorch-transformers" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"huggingface/pytorch-transformers" -> "UKPLab/sentence-transformers"
"huggingface/pytorch-transformers" -> "OpenNMT/OpenNMT-py"
"huggingface/pytorch-transformers" -> "google-research/bert"
"huggingface/pytorch-transformers" -> "tensorflow/tensor2tensor"
"huggingface/pytorch-transformers" -> "thunlp/PLMpapers"
"huggingface/pytorch-transformers" -> "kimiyoung/transformer-xl"
"yueyu1030/COSINE" -> "Lingkai-Kong/Calibrated-BERT-Fine-Tuning"
"yueyu1030/COSINE" -> "microsoft/ASTRA"
"UKPLab/sentence-transformers" -> "hanxiao/bert-as-service"
"UKPLab/sentence-transformers" -> "pytorch/fairseq"
"UKPLab/sentence-transformers" -> "princeton-nlp/SimCSE" ["e"=1]
"UKPLab/sentence-transformers" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"UKPLab/sentence-transformers" -> "facebookresearch/faiss"
"UKPLab/sentence-transformers" -> "MaartenGr/BERTopic"
"UKPLab/sentence-transformers" -> "sebastianruder/NLP-progress"
"UKPLab/sentence-transformers" -> "allenai/allennlp"
"UKPLab/sentence-transformers" -> "jessevig/bertviz"
"UKPLab/sentence-transformers" -> "makcedward/nlpaug"
"UKPLab/sentence-transformers" -> "google/sentencepiece"
"UKPLab/sentence-transformers" -> "flairNLP/flair"
"UKPLab/sentence-transformers" -> "ThilinaRajapakse/simpletransformers"
"UKPLab/sentence-transformers" -> "google-research/bert"
"UKPLab/sentence-transformers" -> "deepset-ai/haystack"
"makcedward/nlp" -> "adsieg/text_similarity"
"makcedward/nlp" -> "kavgan/nlp-in-practice"
"makcedward/nlp" -> "nlptown/nlp-notebooks"
"makcedward/nlp" -> "susanli2016/NLP-with-Python"
"makcedward/nlp" -> "makcedward/nlpaug"
"makcedward/nlp" -> "msgi/nlp-journey" ["e"=1]
"makcedward/nlp" -> "fastai/course-nlp"
"makcedward/nlp" -> "gaoisbest/NLP-Projects"
"makcedward/nlp" -> "kk7nc/Text_Classification" ["e"=1]
"makcedward/nlp" -> "huseinzol05/NLP-Models-Tensorflow" ["e"=1]
"makcedward/nlp" -> "lihanghang/Knowledge-Graph" ["e"=1]
"makcedward/nlp" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"makcedward/nlp" -> "dair-ai/nlp_paper_summaries"
"makcedward/nlp" -> "juand-r/entity-recognition-datasets" ["e"=1]
"makcedward/nlp" -> "dmlc/gluon-nlp"
"craffel/dl3d-seminar" -> "stanleyn/Comp790-166-Comp-Bio"
"jtibshirani/text-embeddings" -> "Hironsan/bertsearch"
"NiuTrans/MTBook" -> "NiuTrans/NiuTensor"
"NiuTrans/MTBook" -> "NiuTrans/MT-paper-lists"
"NiuTrans/MTBook" -> "THUNLP-MT/MT-Reading-List"
"NiuTrans/MTBook" -> "NiuTrans/ABigSurvey"
"NiuTrans/MTBook" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/MTBook" -> "songyingxin/NLPer-Interview" ["e"=1]
"NiuTrans/MTBook" -> "rsennrich/subword-nmt"
"NiuTrans/MTBook" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/MTBook" -> "NiuTrans/CNSurvey"
"NiuTrans/MTBook" -> "FudanNLP/nlp-beginner" ["e"=1]
"NiuTrans/MTBook" -> "bytedance/lightseq" ["e"=1]
"NiuTrans/MTBook" -> "OpenNMT/OpenNMT-py"
"NiuTrans/MTBook" -> "DA-southampton/NLP_ability" ["e"=1]
"NiuTrans/MTBook" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"NiuTrans/MTBook" -> "CLUEbenchmark/CLUEDatasetSearch" ["e"=1]
"facebookresearch/faiss" -> "spotify/annoy"
"facebookresearch/faiss" -> "facebookresearch/fastText"
"facebookresearch/faiss" -> "UKPLab/sentence-transformers"
"facebookresearch/faiss" -> "milvus-io/milvus" ["e"=1]
"facebookresearch/faiss" -> "pytorch/fairseq"
"facebookresearch/faiss" -> "google-research/bert"
"facebookresearch/faiss" -> "hanxiao/bert-as-service"
"facebookresearch/faiss" -> "allenai/allennlp"
"facebookresearch/faiss" -> "google-research/google-research"
"facebookresearch/faiss" -> "erikbern/ann-benchmarks" ["e"=1]
"facebookresearch/faiss" -> "tensorflow/tensor2tensor"
"facebookresearch/faiss" -> "dmlc/xgboost" ["e"=1]
"facebookresearch/faiss" -> "sebastianruder/NLP-progress"
"facebookresearch/faiss" -> "google/jax"
"facebookresearch/faiss" -> "google/sentencepiece"
"microsoft/MASS" -> "facebookresearch/XLM"
"microsoft/MASS" -> "rsennrich/subword-nmt"
"microsoft/MASS" -> "facebookresearch/UnsupervisedMT"
"microsoft/MASS" -> "zihangdai/xlnet"
"microsoft/MASS" -> "THUNLP-MT/MT-Reading-List"
"microsoft/MASS" -> "namisan/mt-dnn"
"microsoft/MASS" -> "nlpyang/PreSumm" ["e"=1]
"microsoft/MASS" -> "kimiyoung/transformer-xl"
"microsoft/MASS" -> "nlpyang/BertSum" ["e"=1]
"microsoft/MASS" -> "clab/fast_align"
"microsoft/MASS" -> "abisee/pointer-generator" ["e"=1]
"microsoft/MASS" -> "moses-smt/mosesdecoder"
"microsoft/MASS" -> "thunlp/ERNIE" ["e"=1]
"microsoft/MASS" -> "OpenNMT/OpenNMT-py"
"microsoft/MASS" -> "google-research/text-to-text-transfer-transformer"
"arpan74/ctci-python-solutions" -> "hfbassani/RLBookExercises"
"arpan74/ctci-python-solutions" -> "erre-quadro/spikex"
"google-research/text-to-text-transfer-transformer" -> "zihangdai/xlnet"
"google-research/text-to-text-transfer-transformer" -> "pytorch/fairseq"
"google-research/text-to-text-transfer-transformer" -> "google/sentencepiece"
"google-research/text-to-text-transfer-transformer" -> "kimiyoung/transformer-xl"
"google-research/text-to-text-transfer-transformer" -> "google-research/electra"
"google-research/text-to-text-transfer-transformer" -> "facebookresearch/XLM"
"google-research/text-to-text-transfer-transformer" -> "NVIDIA/Megatron-LM" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "UKPLab/sentence-transformers"
"google-research/text-to-text-transfer-transformer" -> "brightmart/albert_zh" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "microsoft/unilm" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "google-research/multilingual-t5"
"google-research/text-to-text-transfer-transformer" -> "allenai/allennlp"
"google-research/text-to-text-transfer-transformer" -> "google-research/t5x" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "hanxiao/bert-as-service"
"google-research/text-to-text-transfer-transformer" -> "huggingface/pytorch-pretrained-BERT"
"google/sentencepiece" -> "rsennrich/subword-nmt"
"google/sentencepiece" -> "pytorch/fairseq"
"google/sentencepiece" -> "allenai/allennlp"
"google/sentencepiece" -> "OpenNMT/OpenNMT-py"
"google/sentencepiece" -> "huggingface/pytorch-pretrained-BERT"
"google/sentencepiece" -> "zihangdai/xlnet"
"google/sentencepiece" -> "facebookresearch/XLM"
"google/sentencepiece" -> "google-research/text-to-text-transfer-transformer"
"google/sentencepiece" -> "hanxiao/bert-as-service"
"google/sentencepiece" -> "tensorflow/tensor2tensor"
"google/sentencepiece" -> "kimiyoung/transformer-xl"
"google/sentencepiece" -> "huggingface/tokenizers"
"google/sentencepiece" -> "UKPLab/sentence-transformers"
"google/sentencepiece" -> "sebastianruder/NLP-progress"
"google/sentencepiece" -> "facebookresearch/MUSE"
"huggingface/knockknock" -> "huggingface/tokenizers"
"huggingface/knockknock" -> "huggingface/awesome-papers"
"huggingface/knockknock" -> "huggingface/accelerate" ["e"=1]
"huggingface/knockknock" -> "williamFalcon/pytorch-lightning" ["e"=1]
"huggingface/knockknock" -> "huggingface/nlp"
"huggingface/knockknock" -> "huggingface/pytorch-pretrained-BERT"
"huggingface/knockknock" -> "facebookresearch/XLM"
"huggingface/knockknock" -> "google/sentencepiece"
"huggingface/knockknock" -> "makcedward/nlpaug"
"huggingface/knockknock" -> "zalandoresearch/flair"
"huggingface/knockknock" -> "facebookresearch/pytext"
"huggingface/knockknock" -> "kaushaltrivedi/fast-bert"
"huggingface/knockknock" -> "pytorch/ignite" ["e"=1]
"huggingface/knockknock" -> "arogozhnikov/einops" ["e"=1]
"huggingface/knockknock" -> "jettify/pytorch-optimizer" ["e"=1]
"salesforce/decaNLP" -> "NervanaSystems/nlp-architect"
"salesforce/decaNLP" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/decaNLP" -> "huggingface/pytorch-pretrained-BERT"
"salesforce/decaNLP" -> "facebookresearch/XLM"
"salesforce/decaNLP" -> "allenai/allennlp"
"salesforce/decaNLP" -> "salesforce/awd-lstm-lm"
"salesforce/decaNLP" -> "openai/finetune-transformer-lm"
"salesforce/decaNLP" -> "facebookresearch/pytext"
"salesforce/decaNLP" -> "zihangdai/xlnet"
"salesforce/decaNLP" -> "facebookresearch/UnsupervisedMT"
"salesforce/decaNLP" -> "dmlc/gluon-nlp"
"salesforce/decaNLP" -> "huggingface/hmtl"
"salesforce/decaNLP" -> "zalandoresearch/flair"
"salesforce/decaNLP" -> "jacobeisenstein/gt-nlp-class"
"salesforce/decaNLP" -> "PetrochukM/PyTorch-NLP"
"MaartenGr/KeyBERT" -> "MaartenGr/BERTopic"
"MaartenGr/KeyBERT" -> "LIAAD/yake" ["e"=1]
"MaartenGr/KeyBERT" -> "boudinfl/pke" ["e"=1]
"MaartenGr/KeyBERT" -> "ddangelov/Top2Vec"
"MaartenGr/KeyBERT" -> "UKPLab/sentence-transformers"
"MaartenGr/KeyBERT" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/KeyBERT" -> "thunlp/BERT-KPE" ["e"=1]
"MaartenGr/KeyBERT" -> "flairNLP/flair"
"MaartenGr/KeyBERT" -> "huggingface/setfit"
"MaartenGr/KeyBERT" -> "makcedward/nlpaug"
"MaartenGr/KeyBERT" -> "MaartenGr/PolyFuzz"
"MaartenGr/KeyBERT" -> "deepset-ai/haystack"
"MaartenGr/KeyBERT" -> "neuml/txtai"
"MaartenGr/KeyBERT" -> "swisscom/ai-research-keyphrase-extraction" ["e"=1]
"MaartenGr/KeyBERT" -> "recognai/rubrix"
"flairNLP/flair" -> "UKPLab/sentence-transformers"
"flairNLP/flair" -> "MaartenGr/BERTopic"
"flairNLP/flair" -> "makcedward/nlpaug"
"flairNLP/flair" -> "stanfordnlp/stanza"
"flairNLP/flair" -> "doccano/doccano" ["e"=1]
"flairNLP/flair" -> "allenai/allennlp"
"flairNLP/flair" -> "deepset-ai/haystack"
"flairNLP/flair" -> "sebastianruder/NLP-progress"
"flairNLP/flair" -> "ThilinaRajapakse/simpletransformers"
"flairNLP/flair" -> "pytorch/fairseq"
"flairNLP/flair" -> "huggingface/tokenizers"
"flairNLP/flair" -> "google/sentencepiece"
"flairNLP/flair" -> "ddangelov/Top2Vec"
"flairNLP/flair" -> "MaartenGr/KeyBERT"
"flairNLP/flair" -> "jessevig/bertviz"
"tensorflow/nmt" -> "google/seq2seq"
"tensorflow/nmt" -> "tensorflow/tensor2tensor"
"tensorflow/nmt" -> "OpenNMT/OpenNMT-py"
"tensorflow/nmt" -> "Kyubyong/transformer"
"tensorflow/nmt" -> "rsennrich/subword-nmt"
"tensorflow/nmt" -> "brightmart/text_classification"
"tensorflow/nmt" -> "hanxiao/bert-as-service"
"tensorflow/nmt" -> "allenai/allennlp"
"tensorflow/nmt" -> "OpenNMT/OpenNMT-tf"
"tensorflow/nmt" -> "google/sentencepiece"
"tensorflow/nmt" -> "dennybritz/cnn-text-classification-tf"
"tensorflow/nmt" -> "zihangdai/xlnet"
"tensorflow/nmt" -> "farizrahman4u/seq2seq" ["e"=1]
"tensorflow/nmt" -> "spro/practical-pytorch"
"tensorflow/nmt" -> "facebookresearch/fastText"
"stanfordnlp/CoreNLP" -> "nltk/nltk"
"stanfordnlp/CoreNLP" -> "allenai/allennlp"
"stanfordnlp/CoreNLP" -> "stanfordnlp/GloVe"
"stanfordnlp/CoreNLP" -> "facebookresearch/fastText"
"stanfordnlp/CoreNLP" -> "RaRe-Technologies/gensim"
"stanfordnlp/CoreNLP" -> "explosion/spaCy"
"stanfordnlp/CoreNLP" -> "sebastianruder/NLP-progress"
"stanfordnlp/CoreNLP" -> "stanfordnlp/stanza"
"stanfordnlp/CoreNLP" -> "HIT-SCIR/ltp" ["e"=1]
"stanfordnlp/CoreNLP" -> "google-research/bert"
"stanfordnlp/CoreNLP" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"stanfordnlp/CoreNLP" -> "keon/awesome-nlp" ["e"=1]
"stanfordnlp/CoreNLP" -> "hankcs/HanLP" ["e"=1]
"stanfordnlp/CoreNLP" -> "NLPchina/ansj_seg" ["e"=1]
"stanfordnlp/CoreNLP" -> "hanxiao/bert-as-service"
"huggingface/pytorch-openai-transformer-lm" -> "openai/finetune-transformer-lm"
"huggingface/pytorch-openai-transformer-lm" -> "huggingface/pytorch-pretrained-BERT"
"huggingface/pytorch-openai-transformer-lm" -> "kimiyoung/transformer-xl"
"huggingface/pytorch-openai-transformer-lm" -> "salesforce/decaNLP"
"huggingface/pytorch-openai-transformer-lm" -> "salesforce/awd-lstm-lm"
"huggingface/pytorch-openai-transformer-lm" -> "facebookresearch/XLM"
"huggingface/pytorch-openai-transformer-lm" -> "huggingface/naacl_transfer_learning_tutorial"
"huggingface/pytorch-openai-transformer-lm" -> "codertimo/BERT-pytorch"
"huggingface/pytorch-openai-transformer-lm" -> "PetrochukM/PyTorch-NLP"
"huggingface/pytorch-openai-transformer-lm" -> "zihangdai/xlnet"
"huggingface/pytorch-openai-transformer-lm" -> "facebookresearch/UnsupervisedMT"
"huggingface/pytorch-openai-transformer-lm" -> "allenai/bilm-tf"
"huggingface/pytorch-openai-transformer-lm" -> "namisan/mt-dnn"
"huggingface/pytorch-openai-transformer-lm" -> "huggingface/transfer-learning-conv-ai"
"huggingface/pytorch-openai-transformer-lm" -> "huggingface/hmtl"
"jacobeisenstein/gt-nlp-class" -> "sebastianruder/NLP-progress"
"jacobeisenstein/gt-nlp-class" -> "allenai/allennlp"
"jacobeisenstein/gt-nlp-class" -> "huggingface/pytorch-pretrained-BERT"
"jacobeisenstein/gt-nlp-class" -> "salesforce/decaNLP"
"jacobeisenstein/gt-nlp-class" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"jacobeisenstein/gt-nlp-class" -> "zalandoresearch/flair"
"jacobeisenstein/gt-nlp-class" -> "spro/practical-pytorch"
"jacobeisenstein/gt-nlp-class" -> "keon/awesome-nlp" ["e"=1]
"jacobeisenstein/gt-nlp-class" -> "yandexdataschool/nlp_course"
"jacobeisenstein/gt-nlp-class" -> "niderhoff/nlp-datasets"
"jacobeisenstein/gt-nlp-class" -> "facebookresearch/pytext"
"jacobeisenstein/gt-nlp-class" -> "zihangdai/xlnet"
"jacobeisenstein/gt-nlp-class" -> "DSKSD/DeepNLP-models-Pytorch"
"jacobeisenstein/gt-nlp-class" -> "ctgk/PRML" ["e"=1]
"jacobeisenstein/gt-nlp-class" -> "google/sentencepiece"
"locuslab/TCN" -> "philipperemy/keras-tcn"
"locuslab/TCN" -> "zhouhaoyi/Informer2020" ["e"=1]
"locuslab/TCN" -> "jadore801120/attention-is-all-you-need-pytorch"
"locuslab/TCN" -> "kimiyoung/transformer-xl"
"locuslab/TCN" -> "locuslab/trellisnet" ["e"=1]
"locuslab/TCN" -> "huggingface/pytorch-pretrained-BERT"
"locuslab/TCN" -> "pytorch/fairseq"
"locuslab/TCN" -> "codertimo/BERT-pytorch"
"locuslab/TCN" -> "jdb78/pytorch-forecasting" ["e"=1]
"locuslab/TCN" -> "yysijie/st-gcn" ["e"=1]
"locuslab/TCN" -> "rusty1s/pytorch_geometric" ["e"=1]
"locuslab/TCN" -> "tensorflow/tensor2tensor"
"locuslab/TCN" -> "philipperemy/keras-attention-mechanism" ["e"=1]
"locuslab/TCN" -> "tkipf/pygcn" ["e"=1]
"locuslab/TCN" -> "salesforce/awd-lstm-lm"
"sebastianruder/NLP-progress" -> "google-research/bert"
"sebastianruder/NLP-progress" -> "allenai/allennlp"
"sebastianruder/NLP-progress" -> "pytorch/fairseq"
"sebastianruder/NLP-progress" -> "huggingface/pytorch-pretrained-BERT"
"sebastianruder/NLP-progress" -> "hanxiao/bert-as-service"
"sebastianruder/NLP-progress" -> "keon/awesome-nlp" ["e"=1]
"sebastianruder/NLP-progress" -> "graykode/nlp-tutorial"
"sebastianruder/NLP-progress" -> "zihangdai/xlnet"
"sebastianruder/NLP-progress" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"sebastianruder/NLP-progress" -> "facebookresearch/fastText"
"sebastianruder/NLP-progress" -> "UKPLab/sentence-transformers"
"sebastianruder/NLP-progress" -> "brightmart/text_classification"
"sebastianruder/NLP-progress" -> "tensorflow/tensor2tensor"
"sebastianruder/NLP-progress" -> "zalandoresearch/flair"
"sebastianruder/NLP-progress" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"deepset-ai/FARM" -> "deepset-ai/haystack"
"deepset-ai/FARM" -> "kaushaltrivedi/fast-bert"
"deepset-ai/FARM" -> "ThilinaRajapakse/simpletransformers"
"deepset-ai/FARM" -> "linkedin/detext"
"deepset-ai/FARM" -> "recognai/rubrix"
"deepset-ai/FARM" -> "ddangelov/Top2Vec"
"deepset-ai/FARM" -> "QData/TextAttack"
"deepset-ai/FARM" -> "UKPLab/sentence-transformers"
"deepset-ai/FARM" -> "PAIR-code/lit"
"deepset-ai/FARM" -> "jalammar/ecco"
"deepset-ai/FARM" -> "huggingface/tokenizers"
"deepset-ai/FARM" -> "huggingface/awesome-papers"
"deepset-ai/FARM" -> "zalandoresearch/flair"
"deepset-ai/FARM" -> "huggingface/neuralcoref"
"deepset-ai/FARM" -> "dair-ai/nlp_paper_summaries"
"jadore801120/attention-is-all-you-need-pytorch" -> "codertimo/BERT-pytorch"
"jadore801120/attention-is-all-you-need-pytorch" -> "huggingface/pytorch-pretrained-BERT"
"jadore801120/attention-is-all-you-need-pytorch" -> "OpenNMT/OpenNMT-py"
"jadore801120/attention-is-all-you-need-pytorch" -> "pytorch/fairseq"
"jadore801120/attention-is-all-you-need-pytorch" -> "tensorflow/tensor2tensor"
"jadore801120/attention-is-all-you-need-pytorch" -> "Kyubyong/transformer"
"jadore801120/attention-is-all-you-need-pytorch" -> "allenai/allennlp"
"jadore801120/attention-is-all-you-need-pytorch" -> "harvardnlp/annotated-transformer"
"jadore801120/attention-is-all-you-need-pytorch" -> "kimiyoung/transformer-xl"
"jadore801120/attention-is-all-you-need-pytorch" -> "spro/practical-pytorch"
"jadore801120/attention-is-all-you-need-pytorch" -> "pytorch/examples" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "zihangdai/xlnet"
"jadore801120/attention-is-all-you-need-pytorch" -> "rusty1s/pytorch_geometric" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "tkipf/pygcn" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"marcotcr/checklist" -> "QData/TextAttack"
"marcotcr/checklist" -> "makcedward/nlpaug"
"marcotcr/checklist" -> "PAIR-code/lit"
"marcotcr/checklist" -> "huggingface/awesome-papers"
"marcotcr/checklist" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"marcotcr/checklist" -> "google-research/language" ["e"=1]
"marcotcr/checklist" -> "huggingface/nlp"
"marcotcr/checklist" -> "jalammar/ecco"
"marcotcr/checklist" -> "facebookresearch/SentEval"
"marcotcr/checklist" -> "princeton-nlp/SimCSE" ["e"=1]
"marcotcr/checklist" -> "timoschick/pet" ["e"=1]
"marcotcr/checklist" -> "namisan/mt-dnn"
"marcotcr/checklist" -> "allenai/longformer"
"marcotcr/checklist" -> "robustness-gym/robustness-gym"
"marcotcr/checklist" -> "thunlp/TAADpapers"
"stanfordnlp/GloVe" -> "facebookresearch/fastText"
"stanfordnlp/GloVe" -> "allenai/allennlp"
"stanfordnlp/GloVe" -> "RaRe-Technologies/gensim"
"stanfordnlp/GloVe" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"stanfordnlp/GloVe" -> "maciejkula/glove-python"
"stanfordnlp/GloVe" -> "stanfordnlp/CoreNLP"
"stanfordnlp/GloVe" -> "zihangdai/xlnet"
"stanfordnlp/GloVe" -> "hanxiao/bert-as-service"
"stanfordnlp/GloVe" -> "google-research/bert"
"stanfordnlp/GloVe" -> "google/sentencepiece"
"stanfordnlp/GloVe" -> "brightmart/text_classification"
"stanfordnlp/GloVe" -> "dennybritz/cnn-text-classification-tf"
"stanfordnlp/GloVe" -> "sebastianruder/NLP-progress"
"stanfordnlp/GloVe" -> "tensorflow/tensor2tensor"
"stanfordnlp/GloVe" -> "google/seq2seq"
"marqo-ai/marqo" -> "neuml/txtai"
"marqo-ai/marqo" -> "deepset-ai/haystack"
"marqo-ai/marqo" -> "qdrant/qdrant"
"marqo-ai/marqo" -> "jerryjliu/gpt_index" ["e"=1]
"marqo-ai/marqo" -> "promptslab/Promptify" ["e"=1]
"marqo-ai/marqo" -> "bigscience-workshop/petals" ["e"=1]
"marqo-ai/marqo" -> "MaartenGr/BERTopic"
"marqo-ai/marqo" -> "huggingface/setfit"
"marqo-ai/marqo" -> "BlinkDL/RWKV-LM" ["e"=1]
"marqo-ai/marqo" -> "semi-technologies/weaviate"
"marqo-ai/marqo" -> "replicate/cog" ["e"=1]
"marqo-ai/marqo" -> "hwchase17/langchain" ["e"=1]
"marqo-ai/marqo" -> "lucidrains/PaLM-rlhf-pytorch" ["e"=1]
"marqo-ai/marqo" -> "jina-ai/jina" ["e"=1]
"marqo-ai/marqo" -> "chroma-core/chroma" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "adashofdata/intro-to-text-analytics"
"adashofdata/nlp-in-python-tutorial" -> "susanli2016/NLP-with-Python"
"adashofdata/nlp-in-python-tutorial" -> "adashofdata/muffin-cupcake"
"adashofdata/nlp-in-python-tutorial" -> "fastai/course-nlp"
"adashofdata/nlp-in-python-tutorial" -> "dipanjanS/text-analytics-with-python"
"adashofdata/nlp-in-python-tutorial" -> "microsoft/nlp-recipes"
"adashofdata/nlp-in-python-tutorial" -> "hse-aml/natural-language-processing" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "kavgan/nlp-in-practice"
"adashofdata/nlp-in-python-tutorial" -> "makcedward/nlp"
"adashofdata/nlp-in-python-tutorial" -> "dipanjanS/practical-machine-learning-with-python"
"adashofdata/nlp-in-python-tutorial" -> "susanli2016/Machine-Learning-with-Python" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "hundredblocks/concrete_NLP_tutorial"
"adashofdata/nlp-in-python-tutorial" -> "yandexdataschool/nlp_course"
"adashofdata/nlp-in-python-tutorial" -> "graykode/nlp-tutorial"
"adashofdata/nlp-in-python-tutorial" -> "lyeoni/nlp-tutorial"
"qdrant/qdrant" -> "semi-technologies/weaviate"
"qdrant/qdrant" -> "milvus-io/milvus" ["e"=1]
"qdrant/qdrant" -> "weaviate/weaviate" ["e"=1]
"qdrant/qdrant" -> "deepset-ai/haystack"
"qdrant/qdrant" -> "meilisearch/meilisearch" ["e"=1]
"qdrant/qdrant" -> "chroma-core/chroma" ["e"=1]
"qdrant/qdrant" -> "pola-rs/polars" ["e"=1]
"qdrant/qdrant" -> "neuml/txtai"
"qdrant/qdrant" -> "quickwit-oss/tantivy" ["e"=1]
"qdrant/qdrant" -> "vectordotdev/vector" ["e"=1]
"qdrant/qdrant" -> "datafuselabs/databend" ["e"=1]
"qdrant/qdrant" -> "apache/arrow-datafusion" ["e"=1]
"qdrant/qdrant" -> "facebookresearch/faiss"
"qdrant/qdrant" -> "jerryjliu/gpt_index" ["e"=1]
"qdrant/qdrant" -> "DioxusLabs/dioxus" ["e"=1]
"OpenNMT/OpenNMT-tf" -> "OpenNMT/OpenNMT-py"
"OpenNMT/OpenNMT-tf" -> "tensorflow/nmt"
"OpenNMT/OpenNMT-tf" -> "OpenNMT/OpenNMT"
"OpenNMT/OpenNMT-tf" -> "rsennrich/subword-nmt"
"OpenNMT/OpenNMT-tf" -> "facebookresearch/UnsupervisedMT"
"OpenNMT/OpenNMT-tf" -> "EdinburghNLP/nematus"
"OpenNMT/OpenNMT-tf" -> "google/seq2seq"
"OpenNMT/OpenNMT-tf" -> "THUNLP-MT/MT-Reading-List"
"OpenNMT/OpenNMT-tf" -> "abisee/pointer-generator" ["e"=1]
"OpenNMT/OpenNMT-tf" -> "OpenNMT/CTranslate2"
"OpenNMT/OpenNMT-tf" -> "google/sentencepiece"
"OpenNMT/OpenNMT-tf" -> "kimiyoung/transformer-xl"
"OpenNMT/OpenNMT-tf" -> "allenai/bilm-tf"
"OpenNMT/OpenNMT-tf" -> "tensorflow/lingvo"
"OpenNMT/OpenNMT-tf" -> "openai/finetune-transformer-lm"
"clab/dynet" -> "clab/dynet_tutorial_examples"
"clab/dynet" -> "tensorflow/fold" ["e"=1]
"clab/dynet" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"clab/dynet" -> "google/seq2seq"
"clab/dynet" -> "allenai/allennlp"
"clab/dynet" -> "dmlc/mxnet" ["e"=1]
"clab/dynet" -> "OpenNMT/OpenNMT-py"
"clab/dynet" -> "pytorch/text"
"clab/dynet" -> "blei-lab/edward" ["e"=1]
"clab/dynet" -> "facebook/MemNN" ["e"=1]
"clab/dynet" -> "spro/practical-pytorch"
"clab/dynet" -> "tiny-dnn/tiny-dnn" ["e"=1]
"clab/dynet" -> "kjw0612/awesome-rnn" ["e"=1]
"clab/dynet" -> "zsdonghao/tensorlayer" ["e"=1]
"clab/dynet" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/pytext" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/pytext" -> "zalandoresearch/flair"
"facebookresearch/pytext" -> "allenai/allennlp"
"facebookresearch/pytext" -> "zihangdai/xlnet"
"facebookresearch/pytext" -> "pytorch/text"
"facebookresearch/pytext" -> "hanxiao/bert-as-service"
"facebookresearch/pytext" -> "facebookresearch/ParlAI"
"facebookresearch/pytext" -> "pytorch/fairseq"
"facebookresearch/pytext" -> "facebookresearch/XLM"
"facebookresearch/pytext" -> "google/sentencepiece"
"facebookresearch/pytext" -> "sebastianruder/NLP-progress"
"facebookresearch/pytext" -> "facebookresearch/LASER"
"facebookresearch/pytext" -> "PetrochukM/PyTorch-NLP"
"facebookresearch/pytext" -> "facebookresearch/pythia"
"facebookresearch/pytext" -> "codertimo/BERT-pytorch"
"pytorch/translate" -> "facebookresearch/vizseq"
"pytorch/translate" -> "glample/fastBPE"
"pytorch/translate" -> "facebookresearch/UnsupervisedMT"
"pytorch/translate" -> "marian-nmt/marian"
"pytorch/translate" -> "rsennrich/subword-nmt"
"pytorch/translate" -> "elbayadm/attn2d"
"pytorch/translate" -> "pytorch/text"
"pytorch/translate" -> "artetxem/undreamt"
"pytorch/translate" -> "eladhoffer/seq2seq.pytorch"
"pytorch/translate" -> "lium-lst/nmtpytorch"
"pytorch/translate" -> "facebookresearch/fairseq-py"
"pytorch/translate" -> "mjpost/sacreBLEU"
"pytorch/translate" -> "awslabs/sockeye"
"pytorch/translate" -> "MultiPath/Squirrel"
"pytorch/translate" -> "alvations/sacremoses"
"Andras7/word2vec-pytorch" -> "theeluwin/pytorch-sgns"
"Andras7/word2vec-pytorch" -> "OlgaChernytska/word2vec-pytorch"
"allenai/allennlp" -> "huggingface/pytorch-pretrained-BERT"
"allenai/allennlp" -> "sebastianruder/NLP-progress"
"allenai/allennlp" -> "pytorch/fairseq"
"allenai/allennlp" -> "hanxiao/bert-as-service"
"allenai/allennlp" -> "OpenNMT/OpenNMT-py"
"allenai/allennlp" -> "google-research/bert"
"allenai/allennlp" -> "zihangdai/xlnet"
"allenai/allennlp" -> "zalandoresearch/flair"
"allenai/allennlp" -> "tensorflow/tensor2tensor"
"allenai/allennlp" -> "google/sentencepiece"
"allenai/allennlp" -> "facebookresearch/fastText"
"allenai/allennlp" -> "codertimo/BERT-pytorch"
"allenai/allennlp" -> "facebookresearch/pytext"
"allenai/allennlp" -> "facebookresearch/ParlAI"
"allenai/allennlp" -> "explosion/spaCy"
"NervanaSystems/nlp-architect" -> "salesforce/decaNLP"
"NervanaSystems/nlp-architect" -> "facebookresearch/pytext"
"NervanaSystems/nlp-architect" -> "dmlc/gluon-nlp"
"NervanaSystems/nlp-architect" -> "zalandoresearch/flair"
"NervanaSystems/nlp-architect" -> "PetrochukM/PyTorch-NLP"
"NervanaSystems/nlp-architect" -> "stanfordnlp/stanfordnlp"
"NervanaSystems/nlp-architect" -> "allenai/allennlp"
"NervanaSystems/nlp-architect" -> "deepmipt/DeepPavlov"
"NervanaSystems/nlp-architect" -> "RasaHQ/rasa_nlu" ["e"=1]
"NervanaSystems/nlp-architect" -> "facebookresearch/InferSent"
"NervanaSystems/nlp-architect" -> "huggingface/neuralcoref"
"NervanaSystems/nlp-architect" -> "huggingface/pytorch-pretrained-BERT"
"NervanaSystems/nlp-architect" -> "niderhoff/nlp-datasets"
"NervanaSystems/nlp-architect" -> "facebookresearch/LASER"
"NervanaSystems/nlp-architect" -> "zihangdai/xlnet"
"facebookresearch/ParlAI" -> "allenai/allennlp"
"facebookresearch/ParlAI" -> "pytorch/fairseq"
"facebookresearch/ParlAI" -> "facebookresearch/DrQA"
"facebookresearch/ParlAI" -> "tensorflow/tensor2tensor"
"facebookresearch/ParlAI" -> "facebookresearch/fastText"
"facebookresearch/ParlAI" -> "deepmipt/DeepPavlov"
"facebookresearch/ParlAI" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/ParlAI" -> "sebastianruder/NLP-progress"
"facebookresearch/ParlAI" -> "facebookresearch/pytext"
"facebookresearch/ParlAI" -> "facebookresearch/faiss"
"facebookresearch/ParlAI" -> "google/sentencepiece"
"facebookresearch/ParlAI" -> "OpenNMT/OpenNMT-py"
"facebookresearch/ParlAI" -> "facebookresearch/fairseq"
"facebookresearch/ParlAI" -> "hanxiao/bert-as-service"
"facebookresearch/ParlAI" -> "UKPLab/sentence-transformers"
"dbamman/anlp19" -> "dbamman/book-nlp"
"dbamman/anlp19" -> "dbamman/litbank"
"keon/seq2seq" -> "AuCson/PyTorch-Batch-Attention-Seq2seq"
"keon/seq2seq" -> "IBM/pytorch-seq2seq"
"keon/seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"keon/seq2seq" -> "eladhoffer/seq2seq.pytorch"
"keon/seq2seq" -> "ymfa/seq2seq-summarizer" ["e"=1]
"keon/seq2seq" -> "spro/practical-pytorch"
"keon/seq2seq" -> "suragnair/seqGAN"
"keon/seq2seq" -> "atulkum/pointer_summarizer" ["e"=1]
"keon/seq2seq" -> "timbmg/Sentence-VAE"
"keon/seq2seq" -> "bentrevett/pytorch-seq2seq"
"keon/seq2seq" -> "lium-lst/nmtpytorch"
"keon/seq2seq" -> "facebookresearch/fairseq-py"
"keon/seq2seq" -> "harvardnlp/seq2seq-attn" ["e"=1]
"keon/seq2seq" -> "EdGENetworks/attention-networks-for-classification" ["e"=1]
"keon/seq2seq" -> "OpenNMT/OpenNMT-py"
"minimaxir/textgenrnn" -> "minimaxir/gpt-2-simple"
"minimaxir/textgenrnn" -> "minimaxir/aitextgen"
"minimaxir/textgenrnn" -> "jsvine/markovify" ["e"=1]
"minimaxir/textgenrnn" -> "karpathy/char-rnn" ["e"=1]
"minimaxir/textgenrnn" -> "openai/gpt-2"
"minimaxir/textgenrnn" -> "asyml/texar"
"minimaxir/textgenrnn" -> "minimaxir/tweet-generator"
"minimaxir/textgenrnn" -> "deepmipt/DeepPavlov"
"minimaxir/textgenrnn" -> "huggingface/pytorch-pretrained-BERT"
"minimaxir/textgenrnn" -> "allenai/allennlp"
"minimaxir/textgenrnn" -> "geek-ai/Texygen"
"minimaxir/textgenrnn" -> "nshepperd/gpt-2"
"minimaxir/textgenrnn" -> "dmlc/gluon-nlp"
"minimaxir/textgenrnn" -> "hanxiao/bert-as-service"
"minimaxir/textgenrnn" -> "jcjohnson/torch-rnn" ["e"=1]
"ThilinaRajapakse/simpletransformers" -> "UKPLab/sentence-transformers"
"ThilinaRajapakse/simpletransformers" -> "makcedward/nlpaug"
"ThilinaRajapakse/simpletransformers" -> "kaushaltrivedi/fast-bert"
"ThilinaRajapakse/simpletransformers" -> "jessevig/bertviz"
"ThilinaRajapakse/simpletransformers" -> "MaartenGr/BERTopic"
"ThilinaRajapakse/simpletransformers" -> "huggingface/tokenizers"
"ThilinaRajapakse/simpletransformers" -> "flairNLP/flair"
"ThilinaRajapakse/simpletransformers" -> "deepset-ai/FARM"
"ThilinaRajapakse/simpletransformers" -> "pytorch/fairseq"
"ThilinaRajapakse/simpletransformers" -> "google-research/text-to-text-transfer-transformer"
"ThilinaRajapakse/simpletransformers" -> "deepset-ai/haystack"
"ThilinaRajapakse/simpletransformers" -> "hanxiao/bert-as-service"
"ThilinaRajapakse/simpletransformers" -> "allenai/allennlp"
"ThilinaRajapakse/simpletransformers" -> "princeton-nlp/SimCSE" ["e"=1]
"ThilinaRajapakse/simpletransformers" -> "PAIR-code/lit"
"dennybritz/cnn-text-classification-tf" -> "yoonkim/CNN_sentence"
"dennybritz/cnn-text-classification-tf" -> "brightmart/text_classification"
"dennybritz/cnn-text-classification-tf" -> "gaussic/text-classification-cnn-rnn" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "facebookresearch/fastText"
"dennybritz/cnn-text-classification-tf" -> "tensorflow/nmt"
"dennybritz/cnn-text-classification-tf" -> "google/seq2seq"
"dennybritz/cnn-text-classification-tf" -> "Kyubyong/transformer"
"dennybritz/cnn-text-classification-tf" -> "hanxiao/bert-as-service"
"dennybritz/cnn-text-classification-tf" -> "guillaumegenthial/sequence_tagging" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "stanfordnlp/GloVe"
"dennybritz/cnn-text-classification-tf" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "zihangdai/xlnet"
"codertimo/BERT-pytorch" -> "huggingface/pytorch-pretrained-BERT"
"codertimo/BERT-pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"codertimo/BERT-pytorch" -> "zihangdai/xlnet"
"codertimo/BERT-pytorch" -> "kimiyoung/transformer-xl"
"codertimo/BERT-pytorch" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"codertimo/BERT-pytorch" -> "allenai/allennlp"
"codertimo/BERT-pytorch" -> "hanxiao/bert-as-service"
"codertimo/BERT-pytorch" -> "google-research/bert"
"codertimo/BERT-pytorch" -> "pytorch/fairseq"
"codertimo/BERT-pytorch" -> "harvardnlp/annotated-transformer"
"codertimo/BERT-pytorch" -> "OpenNMT/OpenNMT-py"
"codertimo/BERT-pytorch" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"codertimo/BERT-pytorch" -> "brightmart/albert_zh" ["e"=1]
"codertimo/BERT-pytorch" -> "jessevig/bertviz"
"codertimo/BERT-pytorch" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"saffsd/langid.py" -> "Mimino666/langdetect"
"saffsd/langid.py" -> "aboSamoor/polyglot"
"saffsd/langid.py" -> "google/cld3"
"saffsd/langid.py" -> "shuyo/ldig"
"saffsd/langid.py" -> "shuyo/language-detection"
"saffsd/langid.py" -> "observerss/textfilter" ["e"=1]
"saffsd/langid.py" -> "piskvorky/gensim" ["e"=1]
"saffsd/langid.py" -> "CLD2Owners/cld2"
"saffsd/langid.py" -> "moses-smt/mosesdecoder"
"saffsd/langid.py" -> "grangier/python-goose" ["e"=1]
"saffsd/langid.py" -> "rsennrich/subword-nmt"
"saffsd/langid.py" -> "facebookresearch/LASER"
"saffsd/langid.py" -> "kpu/kenlm" ["e"=1]
"saffsd/langid.py" -> "google/sentencepiece"
"saffsd/langid.py" -> "sloria/TextBlob"
"huggingface/tokenizers" -> "google/sentencepiece"
"huggingface/tokenizers" -> "huggingface/awesome-papers"
"huggingface/tokenizers" -> "UKPLab/sentence-transformers"
"huggingface/tokenizers" -> "huggingface/accelerate" ["e"=1]
"huggingface/tokenizers" -> "huggingface/nlp"
"huggingface/tokenizers" -> "google-research/text-to-text-transfer-transformer"
"huggingface/tokenizers" -> "allenai/allennlp"
"huggingface/tokenizers" -> "pytorch/fairseq"
"huggingface/tokenizers" -> "huggingface/knockknock"
"huggingface/tokenizers" -> "google-research/electra"
"huggingface/tokenizers" -> "jessevig/bertviz"
"huggingface/tokenizers" -> "hanxiao/bert-as-service"
"huggingface/tokenizers" -> "huggingface/datasets"
"huggingface/tokenizers" -> "zihangdai/xlnet"
"huggingface/tokenizers" -> "ThilinaRajapakse/simpletransformers"
"cs230-stanford/cs230-code-examples" -> "jcjohnson/pytorch-examples" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "niudd/kaggle-cloud"
"cs230-stanford/cs230-code-examples" -> "victoresque/pytorch-template" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "afshinea/stanford-cs-230-deep-learning" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "DSKSD/DeepNLP-models-Pytorch"
"cs230-stanford/cs230-code-examples" -> "cgpotts/cs224u"
"cs230-stanford/cs230-code-examples" -> "dsgiitr/d2l-pytorch" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "MorvanZhou/PyTorch-Tutorial" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "joosthub/PyTorchNLPBook"
"cs230-stanford/cs230-code-examples" -> "moemen95/Pytorch-Project-Template" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "yunjey/pytorch-tutorial" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "ctgk/PRML" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "chiphuyen/stanford-tensorflow-tutorials" ["e"=1]
"cs230-stanford/cs230-code-examples" -> "ritchieng/the-incredible-pytorch" ["e"=1]
"dipanjanS/data_science_for_all" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/data_science_for_all" -> "dipanjanS/nlp_essentials"
"seatgeek/thefuzz" -> "maxbachmann/RapidFuzz"
"seatgeek/thefuzz" -> "seatgeek/fuzzywuzzy"
"seatgeek/thefuzz" -> "ztane/python-Levenshtein"
"seatgeek/thefuzz" -> "MaartenGr/KeyBERT"
"seatgeek/thefuzz" -> "MaartenGr/PolyFuzz"
"seatgeek/thefuzz" -> "dedupeio/dedupe" ["e"=1]
"seatgeek/thefuzz" -> "pandera-dev/pandera" ["e"=1]
"seatgeek/thefuzz" -> "makcedward/nlpaug"
"seatgeek/thefuzz" -> "neuml/txtai"
"seatgeek/thefuzz" -> "fbdesignpro/sweetviz" ["e"=1]
"seatgeek/thefuzz" -> "feature-engine/feature_engine" ["e"=1]
"seatgeek/thefuzz" -> "fabiocaccamo/python-benedict" ["e"=1]
"seatgeek/thefuzz" -> "MaartenGr/BERTopic"
"seatgeek/thefuzz" -> "evidentlyai/evidently" ["e"=1]
"seatgeek/thefuzz" -> "recognai/rubrix"
"PracticalDL/Practical-Deep-Learning-Book" -> "hundredblocks/ml-powered-applications" ["e"=1]
"PracticalDL/Practical-Deep-Learning-Book" -> "moelgendy/deep_learning_for_vision_systems" ["e"=1]
"PracticalDL/Practical-Deep-Learning-Book" -> "PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2"
"PracticalDL/Practical-Deep-Learning-Book" -> "margaretmz/awesome-tflite"
"PracticalDL/Practical-Deep-Learning-Book" -> "sayakpaul/TF-2.0-Hacks"
"PracticalDL/Practical-Deep-Learning-Book" -> "emadboctorx/yolov3-keras-tf2" ["e"=1]
"PracticalDL/Practical-Deep-Learning-Book" -> "swordest/mec_drl" ["e"=1]
"PracticalDL/Practical-Deep-Learning-Book" -> "Robofied/Awesome-NLP-Resources"
"OvidijusParsiunas/myvision" -> "minimaxir/gpt-3-experiments"
"OvidijusParsiunas/myvision" -> "vuejs/docs-next" ["e"=1]
"OvidijusParsiunas/myvision" -> "lidangzzz/hedgehog-lab"
"cltk/cltk" -> "cltk/tutorials"
"cltk/cltk" -> "OpenGreekAndLatin/First1KGreek"
"cltk/cltk" -> "PerseusDL/canonical-greekLit"
"cltk/cltk" -> "scaife-viewer/scaife-viewer"
"cltk/cltk" -> "dbamman/latin-bert"
"cltk/cltk" -> "jtauber/greek-accentuation"
"cltk/cltk" -> "biblissima/collatinus"
"cltk/cltk" -> "anoopkunchukuttan/indic_nlp_library"
"cltk/cltk" -> "cltk/cltk_frontend"
"cltk/cltk" -> "PerseusDL/canonical-latinLit"
"cltk/cltk" -> "computationalstylistics/stylo"
"cltk/cltk" -> "OpenGreekAndLatin/csel-dev"
"cltk/cltk" -> "PerseusDL/lexica"
"cltk/cltk" -> "papyri/idp.data"
"cltk/cltk" -> "sommerschield/ancient-text-restoration"
"facebookresearch/StarSpace" -> "facebookresearch/InferSent"
"facebookresearch/StarSpace" -> "facebookresearch/SentEval"
"facebookresearch/StarSpace" -> "facebookresearch/MUSE"
"facebookresearch/StarSpace" -> "facebookresearch/pytext"
"facebookresearch/StarSpace" -> "epfml/sent2vec"
"facebookresearch/StarSpace" -> "zalandoresearch/flair"
"facebookresearch/StarSpace" -> "facebookresearch/poincare-embeddings" ["e"=1]
"facebookresearch/StarSpace" -> "facebookresearch/PyTorch-BigGraph" ["e"=1]
"facebookresearch/StarSpace" -> "spotify/annoy"
"facebookresearch/StarSpace" -> "chihming/awesome-network-embedding" ["e"=1]
"facebookresearch/StarSpace" -> "facebookresearch/fastText"
"facebookresearch/StarSpace" -> "allenai/allennlp"
"facebookresearch/StarSpace" -> "facebookresearch/faiss"
"facebookresearch/StarSpace" -> "maciejkula/spotlight" ["e"=1]
"facebookresearch/StarSpace" -> "hanxiao/bert-as-service"
"EvilPsyCHo/Attention-PyTorch" -> "thomlake/pytorch-attention"
"hellohaptik/multi-task-NLP" -> "hellohaptik/chatbot_ner"
"huggingface/hmtl" -> "namisan/mt-dnn"
"huggingface/hmtl" -> "salesforce/decaNLP"
"huggingface/hmtl" -> "huggingface/naacl_transfer_learning_tutorial"
"huggingface/hmtl" -> "facebookresearch/XLM"
"huggingface/hmtl" -> "zalandoresearch/flair"
"huggingface/hmtl" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/hmtl" -> "huggingface/neuralcoref"
"huggingface/hmtl" -> "huggingface/pytorch-pretrained-BERT"
"huggingface/hmtl" -> "facebookresearch/SentEval"
"huggingface/hmtl" -> "kaushaltrivedi/fast-bert"
"huggingface/hmtl" -> "huggingface/torchMoji"
"huggingface/hmtl" -> "openai/finetune-transformer-lm"
"huggingface/hmtl" -> "nyu-mll/jiant"
"huggingface/hmtl" -> "Separius/BERT-keras" ["e"=1]
"huggingface/hmtl" -> "huggingface/awesome-papers"
"zhezhaoa/cluster-driven" -> "zhezhaoa/Weighted-Paragraph-Vector"
"zhezhaoa/neural_BOW_toolkit" -> "zhezhaoa/cluster-driven"
"zhezhaoa/neural_BOW_toolkit" -> "zhezhaoa/Weighted-Paragraph-Vector"
"zhezhaoa/ngram2vec" -> "Leonard-Xu/CWE" ["e"=1]
"zhezhaoa/ngram2vec" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"zhezhaoa/ngram2vec" -> "allenai/bilm-tf"
"zhezhaoa/ngram2vec" -> "zhezhaoa/neural_BOW_toolkit"
"zhezhaoa/ngram2vec" -> "dbiir/UER-py" ["e"=1]
"zhezhaoa/ngram2vec" -> "huyingxi/Synonyms" ["e"=1]
"zhezhaoa/ngram2vec" -> "HIT-SCIR/ELMoForManyLangs"
"zhezhaoa/ngram2vec" -> "PaddlePaddle/LARK" ["e"=1]
"zhezhaoa/ngram2vec" -> "HIT-SCIR/pyltp" ["e"=1]
"zhezhaoa/ngram2vec" -> "PrincetonML/SIF"
"zhezhaoa/ngram2vec" -> "yaleimeng/Final_word_Similarity" ["e"=1]
"zhezhaoa/ngram2vec" -> "faneshion/MatchZoo" ["e"=1]
"zhezhaoa/ngram2vec" -> "rockingdingo/deepnlp" ["e"=1]
"zhezhaoa/ngram2vec" -> "zjy-ucas/ChineseNER" ["e"=1]
"zhezhaoa/ngram2vec" -> "svn2github/word2vec"
"explosion/prodigy-recipes" -> "explosion/projects"
"explosion/prodigy-recipes" -> "explosion/jupyterlab-prodigy"
"explosion/prodigy-recipes" -> "ahalterman/multiuser_prodigy"
"explosion/prodigy-recipes" -> "explosion/spacy-transformers"
"explosion/prodigy-recipes" -> "explosion/spacy-notebooks"
"explosion/prodigy-recipes" -> "explosion/sense2vec"
"explosion/prodigy-recipes" -> "explosion/spacy-pytorch-transformers"
"explosion/prodigy-recipes" -> "explosion/spacy-lookups-data"
"explosion/prodigy-recipes" -> "explosion/thinc"
"explosion/prodigy-recipes" -> "explosion/spacy-streamlit" ["e"=1]
"Kyubyong/nlp_tasks" -> "DSKSD/DeepNLP-models-Pytorch"
"Kyubyong/nlp_tasks" -> "niderhoff/nlp-datasets"
"Kyubyong/nlp_tasks" -> "keon/awesome-nlp" ["e"=1]
"Kyubyong/nlp_tasks" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"Kyubyong/nlp_tasks" -> "allenai/allennlp"
"Kyubyong/nlp_tasks" -> "spro/practical-pytorch"
"Kyubyong/nlp_tasks" -> "brightmart/text_classification"
"Kyubyong/nlp_tasks" -> "RedditSota/state-of-the-art-result-for-machine-learning-problems" ["e"=1]
"Kyubyong/nlp_tasks" -> "huggingface/pytorch-pretrained-BERT"
"Kyubyong/nlp_tasks" -> "google/seq2seq"
"Kyubyong/nlp_tasks" -> "sebastianruder/NLP-progress"
"Kyubyong/nlp_tasks" -> "andrewt3000/DL4NLP"
"Kyubyong/nlp_tasks" -> "facebookresearch/DrQA"
"Kyubyong/nlp_tasks" -> "zalandoresearch/flair"
"Kyubyong/nlp_tasks" -> "Kyubyong/transformer"
"salesforce/ctrl" -> "uber-research/PPLM"
"salesforce/ctrl" -> "facebookresearch/XLM"
"salesforce/ctrl" -> "google-research/text-to-text-transfer-transformer"
"salesforce/ctrl" -> "kimiyoung/transformer-xl"
"salesforce/ctrl" -> "fuzhenxin/Style-Transfer-in-Text"
"salesforce/ctrl" -> "google-research/electra"
"salesforce/ctrl" -> "namisan/mt-dnn"
"salesforce/ctrl" -> "rowanz/grover"
"salesforce/ctrl" -> "zihangdai/xlnet"
"salesforce/ctrl" -> "asyml/texar-pytorch"
"salesforce/ctrl" -> "Tiiiger/bert_score"
"salesforce/ctrl" -> "openai/finetune-transformer-lm"
"salesforce/ctrl" -> "google-research/bleurt"
"salesforce/ctrl" -> "THUNLP-MT/TG-Reading-List"
"salesforce/ctrl" -> "microsoft/MASS"
"xixiaoyao/CS224n-winter-together" -> "ZacBi/CS224n-2019-solutions"
"xixiaoyao/CS224n-winter-together" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"xixiaoyao/CS224n-winter-together" -> "LooperXX/CS224n-Reading-Notes"
"xixiaoyao/CS224n-winter-together" -> "ZhuiyiTechnology/pretrained-models" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "songyingxin/NLPer-Interview" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "LooperXX/CS224n-Resource"
"xixiaoyao/CS224n-winter-together" -> "changwookjun/nlp-paper" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "DataTerminatorX/Keyword-BERT" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "basketballandlearn/MRC_Competition_Dureader" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "leerumor/nlp_tutorial" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "loujie0822/DeepIE" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "pengshuang/Text-Similarity" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "DA-southampton/Tech_Aarticle" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "FudanNLP/nlp-beginner" ["e"=1]
"yuanxiaosc/Google-Machine-learning-crash-course" -> "yassouali/ML_paper_notes"
"yuanxiaosc/Google-Machine-learning-crash-course" -> "yuanxiaosc/yuanxiaosc.github.io"
"sloria/TextBlob" -> "clips/pattern" ["e"=1]
"sloria/TextBlob" -> "nltk/nltk"
"sloria/TextBlob" -> "isnowfy/snownlp" ["e"=1]
"sloria/TextBlob" -> "RaRe-Technologies/gensim"
"sloria/TextBlob" -> "explosion/spaCy"
"sloria/TextBlob" -> "codelucas/newspaper" ["e"=1]
"sloria/TextBlob" -> "cjhutto/vaderSentiment"
"sloria/TextBlob" -> "seatgeek/fuzzywuzzy"
"sloria/TextBlob" -> "stanfordnlp/CoreNLP"
"sloria/TextBlob" -> "facebookresearch/fastText"
"sloria/TextBlob" -> "allenai/allennlp"
"sloria/TextBlob" -> "aboSamoor/polyglot"
"sloria/TextBlob" -> "piskvorky/gensim" ["e"=1]
"sloria/TextBlob" -> "tweepy/tweepy" ["e"=1]
"sloria/TextBlob" -> "chartbeat-labs/textacy"
"NiuTrans/ABigSurvey" -> "NiuTrans/CNSurvey"
"NiuTrans/ABigSurvey" -> "dair-ai/nlp_paper_summaries"
"NiuTrans/ABigSurvey" -> "eugeneyan/ml-surveys" ["e"=1]
"NiuTrans/ABigSurvey" -> "mhagiwara/100-nlp-papers"
"NiuTrans/ABigSurvey" -> "thunlp/PromptPapers" ["e"=1]
"NiuTrans/ABigSurvey" -> "thunlp/PLMpapers"
"NiuTrans/ABigSurvey" -> "ivan-bilan/The-NLP-Pandect"
"NiuTrans/ABigSurvey" -> "THUNLP-MT/MT-Reading-List"
"NiuTrans/ABigSurvey" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/ABigSurvey" -> "tomohideshibata/BERT-related-papers"
"NiuTrans/ABigSurvey" -> "NiuTrans/MTBook"
"NiuTrans/ABigSurvey" -> "xcfcode/Summarization-Papers" ["e"=1]
"NiuTrans/ABigSurvey" -> "styfeng/DataAug4NLP"
"NiuTrans/ABigSurvey" -> "changwookjun/nlp-paper" ["e"=1]
"NiuTrans/ABigSurvey" -> "NiuTrans/NiuTrans.NMT"
"omarsar/nlp_overview" -> "dair-ai/nlp_paper_summaries"
"omarsar/nlp_overview" -> "omarsar/nlp_highlights"
"omarsar/nlp_overview" -> "huggingface/awesome-papers"
"omarsar/nlp_overview" -> "huggingface/naacl_transfer_learning_tutorial"
"omarsar/nlp_overview" -> "microsoft/nlp-recipes"
"omarsar/nlp_overview" -> "mihail911/nlp-library"
"omarsar/nlp_overview" -> "ivan-bilan/The-NLP-Pandect"
"omarsar/nlp_overview" -> "jacobeisenstein/gt-nlp-class"
"omarsar/nlp_overview" -> "facebookresearch/pytext"
"omarsar/nlp_overview" -> "brianspiering/awesome-dl4nlp"
"omarsar/nlp_overview" -> "tomohideshibata/BERT-related-papers"
"omarsar/nlp_overview" -> "joosthub/PyTorchNLPBook"
"omarsar/nlp_overview" -> "fastai/course-nlp"
"omarsar/nlp_overview" -> "mhagiwara/100-nlp-papers"
"omarsar/nlp_overview" -> "keon/awesome-nlp" ["e"=1]
"CogComp/cogcomp-nlp" -> "CogComp/cogcomp-nlpy"
"CogComp/cogcomp-nlp" -> "allenai/semanticilp"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "keon/seq2seq"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "eladhoffer/seq2seq.pytorch"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "IBM/pytorch-seq2seq"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "mttk/rnn-classifier" ["e"=1]
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "thomlake/pytorch-attention"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "Seanny123/da-rnn" ["e"=1]
"bentrevett/pytorch-seq2seq" -> "bentrevett/pytorch-sentiment-analysis"
"bentrevett/pytorch-seq2seq" -> "jadore801120/attention-is-all-you-need-pytorch"
"bentrevett/pytorch-seq2seq" -> "OpenNMT/OpenNMT-py"
"bentrevett/pytorch-seq2seq" -> "pytorch/fairseq"
"bentrevett/pytorch-seq2seq" -> "spro/practical-pytorch"
"bentrevett/pytorch-seq2seq" -> "graykode/nlp-tutorial"
"bentrevett/pytorch-seq2seq" -> "codertimo/BERT-pytorch"
"bentrevett/pytorch-seq2seq" -> "UKPLab/sentence-transformers"
"bentrevett/pytorch-seq2seq" -> "allenai/allennlp"
"bentrevett/pytorch-seq2seq" -> "IBM/pytorch-seq2seq"
"bentrevett/pytorch-seq2seq" -> "harvardnlp/annotated-transformer"
"bentrevett/pytorch-seq2seq" -> "pytorch/text"
"bentrevett/pytorch-seq2seq" -> "jessevig/bertviz"
"bentrevett/pytorch-seq2seq" -> "sebastianruder/NLP-progress"
"bentrevett/pytorch-seq2seq" -> "huggingface/pytorch-pretrained-BERT"
"ematvey/tensorflow-seq2seq-tutorials" -> "JayParks/tf-seq2seq"
"ematvey/tensorflow-seq2seq-tutorials" -> "suriyadeepan/practical_seq2seq" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "google/seq2seq"
"ematvey/tensorflow-seq2seq-tutorials" -> "j-min/tf_tutorial_plus"
"ematvey/tensorflow-seq2seq-tutorials" -> "tensorflow/nmt"
"ematvey/tensorflow-seq2seq-tutorials" -> "farizrahman4u/seq2seq" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "applenob/RNN-for-Joint-NLU" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "ilivans/tf-rnn-attention" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "eske/seq2seq"
"ematvey/tensorflow-seq2seq-tutorials" -> "chiphuyen/tf-stanford-tutorials" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "carpedm20/MemN2N-tensorflow" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "domluna/memn2n" ["e"=1]
"ematvey/tensorflow-seq2seq-tutorials" -> "Kyubyong/transformer"
"ematvey/tensorflow-seq2seq-tutorials" -> "Marsan-Ma/tf_chatbot_seq2seq_antilm" ["e"=1]
"mmihaltz/word2vec-GoogleNews-vectors" -> "chrisjmccormick/inspect_word2vec"
"spro/practical-pytorch" -> "rguthrie3/DeepLearningForNLPInPytorch"
"spro/practical-pytorch" -> "OpenNMT/OpenNMT-py"
"spro/practical-pytorch" -> "jcjohnson/pytorch-examples" ["e"=1]
"spro/practical-pytorch" -> "DSKSD/DeepNLP-models-Pytorch"
"spro/practical-pytorch" -> "pytorch/text"
"spro/practical-pytorch" -> "huggingface/pytorch-pretrained-BERT"
"spro/practical-pytorch" -> "ritchieng/the-incredible-pytorch" ["e"=1]
"spro/practical-pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"spro/practical-pytorch" -> "hunkim/PyTorchZeroToAll" ["e"=1]
"spro/practical-pytorch" -> "allenai/allennlp"
"spro/practical-pytorch" -> "IBM/pytorch-seq2seq"
"spro/practical-pytorch" -> "lanpa/tensorboard-pytorch" ["e"=1]
"spro/practical-pytorch" -> "pytorch/examples" ["e"=1]
"spro/practical-pytorch" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"spro/practical-pytorch" -> "pytorch/tutorials" ["e"=1]
"yassouali/ML_paper_notes" -> "vlgiitr/papers_we_read"
"yassouali/ML_paper_notes" -> "yuanxiaosc/Google-Machine-learning-crash-course"
"yassouali/ML_paper_notes" -> "vlgiitr/DL_Topics"
"yassouali/ML_paper_notes" -> "mrgloom/Network-Speed-and-Compression" ["e"=1]
"yassouali/ML_paper_notes" -> "kweonwooj/papers"
"yassouali/ML_paper_notes" -> "yassouali/deeplearning.ai_notes"
"yassouali/ML_paper_notes" -> "fregu856/papers" ["e"=1]
"yoonkim/CNN_sentence" -> "dennybritz/cnn-text-classification-tf"
"yoonkim/CNN_sentence" -> "harvardnlp/sent-conv-torch" ["e"=1]
"yoonkim/CNN_sentence" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"yoonkim/CNN_sentence" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"yoonkim/CNN_sentence" -> "brightmart/text_classification"
"yoonkim/CNN_sentence" -> "yoonkim/lstm-char-cnn" ["e"=1]
"yoonkim/CNN_sentence" -> "ryankiros/skip-thoughts"
"yoonkim/CNN_sentence" -> "zhangxiangxiao/Crepe" ["e"=1]
"yoonkim/CNN_sentence" -> "richliao/textClassifier" ["e"=1]
"yoonkim/CNN_sentence" -> "klb3713/sentence2vec"
"yoonkim/CNN_sentence" -> "farizrahman4u/seq2seq" ["e"=1]
"yoonkim/CNN_sentence" -> "harvardnlp/seq2seq-attn" ["e"=1]
"yoonkim/CNN_sentence" -> "gaussic/text-classification-cnn-rnn" ["e"=1]
"yoonkim/CNN_sentence" -> "facebook/MemNN" ["e"=1]
"yoonkim/CNN_sentence" -> "facebookresearch/InferSent"
"aws-samples/aws-machine-learning-university-accelerated-cv" -> "aws-samples/aws-machine-learning-university-accelerated-tab"
"aws-samples/aws-machine-learning-university-accelerated-cv" -> "aws-samples/aws-machine-learning-university-accelerated-nlp"
"aws-samples/aws-machine-learning-university-accelerated-cv" -> "aws-samples/aws-machine-learning-university-dte"
"aws-samples/aws-machine-learning-university-accelerated-cv" -> "Palashio/libra"
"brightmart/text_classification" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"brightmart/text_classification" -> "dennybritz/cnn-text-classification-tf"
"brightmart/text_classification" -> "gaussic/text-classification-cnn-rnn" ["e"=1]
"brightmart/text_classification" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"brightmart/text_classification" -> "hanxiao/bert-as-service"
"brightmart/text_classification" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"brightmart/text_classification" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"brightmart/text_classification" -> "brightmart/albert_zh" ["e"=1]
"brightmart/text_classification" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"brightmart/text_classification" -> "zihangdai/xlnet"
"brightmart/text_classification" -> "google-research/bert"
"brightmart/text_classification" -> "huggingface/pytorch-pretrained-BERT"
"brightmart/text_classification" -> "sebastianruder/NLP-progress"
"brightmart/text_classification" -> "allenai/allennlp"
"brightmart/text_classification" -> "facebookresearch/fastText"
"lidian007/EmotiW2016" -> "xujinchang/EmotiW-2017-Audio-video-Emotion-Recognition"
"lidian007/EmotiW2016" -> "ebadawy/EmotiW2017"
"lidian007/EmotiW2016" -> "erinhp/SSE"
"lidian007/EmotiW2016" -> "bknyaz/emotiw"
"lidian007/EmotiW2016" -> "zeroQiaoba/EmotiW2018"
"lidian007/EmotiW2016" -> "saebrahimi/Emotion-Recognition-RNN" ["e"=1]
"jalammar/jalammar.github.io" -> "jalammar/ecco"
"jalammar/jalammar.github.io" -> "graykode/nlp-roadmap"
"jalammar/jalammar.github.io" -> "kaushaltrivedi/fast-bert"
"jalammar/jalammar.github.io" -> "kaushaltrivedi/bert-toxic-comments-multilabel" ["e"=1]
"allenai/longformer" -> "lucidrains/reformer-pytorch"
"allenai/longformer" -> "google-research/electra"
"allenai/longformer" -> "google-research/bigbird"
"allenai/longformer" -> "facebookresearch/DPR" ["e"=1]
"allenai/longformer" -> "google-research/language" ["e"=1]
"allenai/longformer" -> "princeton-nlp/SimCSE" ["e"=1]
"allenai/longformer" -> "kimiyoung/transformer-xl"
"allenai/longformer" -> "facebookresearch/SpanBERT"
"allenai/longformer" -> "allenai/dont-stop-pretraining" ["e"=1]
"allenai/longformer" -> "google-research/text-to-text-transfer-transformer"
"allenai/longformer" -> "facebookresearch/XLM"
"allenai/longformer" -> "nlpyang/PreSumm" ["e"=1]
"allenai/longformer" -> "microsoft/DeBERTa"
"allenai/longformer" -> "timoschick/pet" ["e"=1]
"allenai/longformer" -> "UKPLab/sentence-transformers"
"lucidrains/reformer-pytorch" -> "allenai/longformer"
"lucidrains/reformer-pytorch" -> "lucidrains/performer-pytorch" ["e"=1]
"lucidrains/reformer-pytorch" -> "idiap/fast-transformers" ["e"=1]
"lucidrains/reformer-pytorch" -> "kimiyoung/transformer-xl"
"lucidrains/reformer-pytorch" -> "lucidrains/linear-attention-transformer" ["e"=1]
"lucidrains/reformer-pytorch" -> "google-research/electra"
"lucidrains/reformer-pytorch" -> "google/trax"
"lucidrains/reformer-pytorch" -> "facebookresearch/adaptive-span"
"lucidrains/reformer-pytorch" -> "tatp22/linformer-pytorch" ["e"=1]
"lucidrains/reformer-pytorch" -> "lucidrains/x-transformers" ["e"=1]
"lucidrains/reformer-pytorch" -> "Smerity/sha-rnn"
"lucidrains/reformer-pytorch" -> "facebookresearch/XLM"
"lucidrains/reformer-pytorch" -> "lucidrains/routing-transformer" ["e"=1]
"lucidrains/reformer-pytorch" -> "openai/sparse_attention"
"lucidrains/reformer-pytorch" -> "mit-han-lab/lite-transformer" ["e"=1]
"tecoholic/ner-annotator" -> "ManivannanMurugavel/spacy-ner-annotator"
"tecoholic/ner-annotator" -> "MaartenGr/PolyFuzz"
"tecoholic/ner-annotator" -> "amrrs/custom-ner-with-spacy3"
"tecoholic/ner-annotator" -> "ieriii/spacy-annotator"
"tecoholic/ner-annotator" -> "kevinlu1248/pyate" ["e"=1]
"tecoholic/ner-annotator" -> "doccano/doccano-transformer"
"tecoholic/ner-annotator" -> "explosion/projects"
"tecoholic/ner-annotator" -> "recognai/rubrix"
"tecoholic/ner-annotator" -> "Liquid-Legal-Institute/Legal-Text-Analytics" ["e"=1]
"tecoholic/ner-annotator" -> "explosion/spacy-streamlit" ["e"=1]
"tecoholic/ner-annotator" -> "erre-quadro/spikex"
"hb20007/hands-on-nltk-tutorial" -> "mihail911/nlp-library"
"hb20007/hands-on-nltk-tutorial" -> "NirantK/nlp-python-deep-learning"
"hb20007/hands-on-nltk-tutorial" -> "llSourcell/Learn-Natural-Language-Processing-Curriculum" ["e"=1]
"hb20007/hands-on-nltk-tutorial" -> "NirantK/NLP_Quickbook" ["e"=1]
"hb20007/hands-on-nltk-tutorial" -> "susanli2016/NLP-with-Python"
"hb20007/hands-on-nltk-tutorial" -> "costezki/awesome-nlprojects"
"hb20007/hands-on-nltk-tutorial" -> "brianspiering/awesome-dl4nlp"
"hb20007/hands-on-nltk-tutorial" -> "jmugan/modern_practical_nlp" ["e"=1]
"hb20007/hands-on-nltk-tutorial" -> "nlptown/nlp-notebooks"
"OpenNMT/CTranslate2" -> "guillaumekln/faster-whisper" ["e"=1]
"OpenNMT/CTranslate2" -> "OpenNMT/Tokenizer"
"OpenNMT/CTranslate2" -> "marian-nmt/marian"
"OpenNMT/CTranslate2" -> "linzehui/mRASP" ["e"=1]
"OpenNMT/CTranslate2" -> "Helsinki-NLP/OpusFilter"
"OpenNMT/CTranslate2" -> "Tencent/TurboTransformers" ["e"=1]
"OpenNMT/CTranslate2" -> "OpenNMT/OpenNMT-tf"
"OpenNMT/CTranslate2" -> "mjpost/sacrebleu"
"OpenNMT/CTranslate2" -> "bytedance/effective_transformer" ["e"=1]
"OpenNMT/CTranslate2" -> "Helsinki-NLP/Opus-MT"
"OpenNMT/CTranslate2" -> "thammegowda/mtdata"
"OpenNMT/CTranslate2" -> "clab/fast_align"
"OpenNMT/CTranslate2" -> "Helsinki-NLP/OPUS-MT-train"
"OpenNMT/CTranslate2" -> "huggingface/text-generation-inference" ["e"=1]
"OpenNMT/CTranslate2" -> "facebookresearch/flores"
"zihangdai/xlnet" -> "huggingface/pytorch-pretrained-BERT"
"zihangdai/xlnet" -> "kimiyoung/transformer-xl"
"zihangdai/xlnet" -> "hanxiao/bert-as-service"
"zihangdai/xlnet" -> "brightmart/albert_zh" ["e"=1]
"zihangdai/xlnet" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"zihangdai/xlnet" -> "pytorch/fairseq"
"zihangdai/xlnet" -> "allenai/allennlp"
"zihangdai/xlnet" -> "google-research/bert"
"zihangdai/xlnet" -> "google-research/text-to-text-transfer-transformer"
"zihangdai/xlnet" -> "brightmart/roberta_zh" ["e"=1]
"zihangdai/xlnet" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"zihangdai/xlnet" -> "codertimo/BERT-pytorch"
"zihangdai/xlnet" -> "facebookresearch/XLM"
"zihangdai/xlnet" -> "namisan/mt-dnn"
"zihangdai/xlnet" -> "sebastianruder/NLP-progress"
"commonsense/conceptnet5" -> "commonsense/conceptnet-numberbatch"
"commonsense/conceptnet5" -> "atcbosselut/comet-commonsense" ["e"=1]
"commonsense/conceptnet5" -> "thunlp/OpenKE" ["e"=1]
"commonsense/conceptnet5" -> "commonsense/conceptnet"
"commonsense/conceptnet5" -> "allenai/allennlp"
"commonsense/conceptnet5" -> "ryankiros/skip-thoughts"
"commonsense/conceptnet5" -> "huggingface/pytorch-pretrained-BERT"
"commonsense/conceptnet5" -> "facebookresearch/LAMA" ["e"=1]
"commonsense/conceptnet5" -> "INK-USC/KagNet" ["e"=1]
"commonsense/conceptnet5" -> "attardi/wikiextractor"
"commonsense/conceptnet5" -> "thunlp/ERNIE" ["e"=1]
"commonsense/conceptnet5" -> "huggingface/neuralcoref"
"commonsense/conceptnet5" -> "facebookresearch/InferSent"
"commonsense/conceptnet5" -> "thunlp/KB2E" ["e"=1]
"commonsense/conceptnet5" -> "zihangdai/xlnet"
"Palashio/libra" -> "aws-samples/aws-machine-learning-university-accelerated-cv"
"Palashio/libra" -> "aws-samples/aws-machine-learning-university-accelerated-nlp"
"Palashio/libra" -> "PAIR-code/lit"
"Palashio/libra" -> "jbesomi/texthero"
"Palashio/libra" -> "h1st-ai/h1st" ["e"=1]
"Palashio/libra" -> "KartikChugh/Otto" ["e"=1]
"Palashio/libra" -> "aws-samples/aws-machine-learning-university-accelerated-tab"
"Palashio/libra" -> "unsplash/datasets" ["e"=1]
"Palashio/libra" -> "arkadiyt/bounty-targets-data" ["e"=1]
"Palashio/libra" -> "maiot-io/zenml" ["e"=1]
"Palashio/libra" -> "rocketseat-education/bootcamp-gostack-desafios" ["e"=1]
"Palashio/libra" -> "naiveHobo/InvoiceNet" ["e"=1]
"Palashio/libra" -> "microsoft/computervision-recipes" ["e"=1]
"Palashio/libra" -> "jalammar/ecco"
"Palashio/libra" -> "ivan-bilan/The-NLP-Pandect"
"facebookresearch/XLM" -> "facebookresearch/UnsupervisedMT"
"facebookresearch/XLM" -> "facebookresearch/MUSE"
"facebookresearch/XLM" -> "facebookresearch/LASER"
"facebookresearch/XLM" -> "rsennrich/subword-nmt"
"facebookresearch/XLM" -> "kimiyoung/transformer-xl"
"facebookresearch/XLM" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/XLM" -> "zihangdai/xlnet"
"facebookresearch/XLM" -> "microsoft/MASS"
"facebookresearch/XLM" -> "google/sentencepiece"
"facebookresearch/XLM" -> "THUNLP-MT/MT-Reading-List"
"facebookresearch/XLM" -> "pytorch/fairseq"
"facebookresearch/XLM" -> "namisan/mt-dnn"
"facebookresearch/XLM" -> "glample/fastBPE"
"facebookresearch/XLM" -> "google-research/text-to-text-transfer-transformer"
"facebookresearch/XLM" -> "OpenNMT/OpenNMT-py"
"huggingface/pytorch-pretrained-BERT" -> "zihangdai/xlnet"
"huggingface/pytorch-pretrained-BERT" -> "allenai/allennlp"
"huggingface/pytorch-pretrained-BERT" -> "hanxiao/bert-as-service"
"huggingface/pytorch-pretrained-BERT" -> "codertimo/BERT-pytorch"
"huggingface/pytorch-pretrained-BERT" -> "kimiyoung/transformer-xl"
"huggingface/pytorch-pretrained-BERT" -> "zalandoresearch/flair"
"huggingface/pytorch-pretrained-BERT" -> "google-research/bert"
"huggingface/pytorch-pretrained-BERT" -> "pytorch/fairseq"
"huggingface/pytorch-pretrained-BERT" -> "sebastianruder/NLP-progress"
"huggingface/pytorch-pretrained-BERT" -> "facebookresearch/pytext"
"huggingface/pytorch-pretrained-BERT" -> "OpenNMT/OpenNMT-py"
"huggingface/pytorch-pretrained-BERT" -> "jadore801120/attention-is-all-you-need-pytorch"
"huggingface/pytorch-pretrained-BERT" -> "facebookresearch/XLM"
"huggingface/pytorch-pretrained-BERT" -> "google/sentencepiece"
"huggingface/pytorch-pretrained-BERT" -> "brightmart/text_classification"
"facebookresearch/InferSent" -> "facebookresearch/SentEval"
"facebookresearch/InferSent" -> "facebookresearch/MUSE"
"facebookresearch/InferSent" -> "ryankiros/skip-thoughts"
"facebookresearch/InferSent" -> "epfml/sent2vec"
"facebookresearch/InferSent" -> "facebookresearch/DrQA"
"facebookresearch/InferSent" -> "Separius/awesome-sentence-embedding"
"facebookresearch/InferSent" -> "PrincetonML/SIF"
"facebookresearch/InferSent" -> "pytorch/text"
"facebookresearch/InferSent" -> "facebookresearch/StarSpace"
"facebookresearch/InferSent" -> "allenai/allennlp"
"facebookresearch/InferSent" -> "facebookresearch/poincare-embeddings" ["e"=1]
"facebookresearch/InferSent" -> "allenai/bi-att-flow" ["e"=1]
"facebookresearch/InferSent" -> "facebookresearch/LASER"
"facebookresearch/InferSent" -> "salesforce/awd-lstm-lm"
"facebookresearch/InferSent" -> "huggingface/pytorch-pretrained-BERT"
"jessevig/bertviz" -> "UKPLab/sentence-transformers"
"jessevig/bertviz" -> "zihangdai/xlnet"
"jessevig/bertviz" -> "hanxiao/bert-as-service"
"jessevig/bertviz" -> "pytorch/fairseq"
"jessevig/bertviz" -> "huggingface/pytorch-pretrained-BERT"
"jessevig/bertviz" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"jessevig/bertviz" -> "allenai/allennlp"
"jessevig/bertviz" -> "codertimo/BERT-pytorch"
"jessevig/bertviz" -> "makcedward/nlpaug"
"jessevig/bertviz" -> "princeton-nlp/SimCSE" ["e"=1]
"jessevig/bertviz" -> "google-research/text-to-text-transfer-transformer"
"jessevig/bertviz" -> "brightmart/albert_zh" ["e"=1]
"jessevig/bertviz" -> "sebastianruder/NLP-progress"
"jessevig/bertviz" -> "kimiyoung/transformer-xl"
"jessevig/bertviz" -> "facebookresearch/XLM"
"yandexdataschool/nlp_course" -> "graykode/nlp-tutorial"
"yandexdataschool/nlp_course" -> "sebastianruder/NLP-progress"
"yandexdataschool/nlp_course" -> "FudanNLP/nlp-beginner" ["e"=1]
"yandexdataschool/nlp_course" -> "yandexdataschool/Practical_RL" ["e"=1]
"yandexdataschool/nlp_course" -> "yandexdataschool/Practical_DL" ["e"=1]
"yandexdataschool/nlp_course" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"yandexdataschool/nlp_course" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"yandexdataschool/nlp_course" -> "brightmart/text_classification"
"yandexdataschool/nlp_course" -> "google-research/bert"
"yandexdataschool/nlp_course" -> "keon/awesome-nlp" ["e"=1]
"yandexdataschool/nlp_course" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"yandexdataschool/nlp_course" -> "hanxiao/bert-as-service"
"yandexdataschool/nlp_course" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"yandexdataschool/nlp_course" -> "NLP-LOVE/ML-NLP" ["e"=1]
"yandexdataschool/nlp_course" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"dair-ai/nlp_paper_summaries" -> "huggingface/awesome-papers"
"dair-ai/nlp_paper_summaries" -> "dair-ai/nlp_fundamentals"
"dair-ai/nlp_paper_summaries" -> "ivan-bilan/The-NLP-Pandect"
"dair-ai/nlp_paper_summaries" -> "dair-ai/nlp_newsletter"
"dair-ai/nlp_paper_summaries" -> "dair-ai/pytorch_notebooks"
"dair-ai/nlp_paper_summaries" -> "microsoft/nlp-recipes"
"dair-ai/nlp_paper_summaries" -> "tomohideshibata/BERT-related-papers"
"dair-ai/nlp_paper_summaries" -> "mhagiwara/100-nlp-papers"
"dair-ai/nlp_paper_summaries" -> "dair-ai/d2l-study-group"
"dair-ai/nlp_paper_summaries" -> "practical-nlp/practical-nlp"
"dair-ai/nlp_paper_summaries" -> "NiuTrans/ABigSurvey"
"dair-ai/nlp_paper_summaries" -> "omarsar/nlp_overview"
"dair-ai/nlp_paper_summaries" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_paper_summaries" -> "deepset-ai/FARM"
"dair-ai/nlp_paper_summaries" -> "QData/TextAttack"
"huggingface/nlp" -> "huggingface/awesome-papers"
"huggingface/nlp" -> "huggingface/tokenizers"
"huggingface/nlp" -> "marcotcr/checklist"
"huggingface/nlp" -> "QData/TextAttack"
"huggingface/nlp" -> "huggingface/knockknock"
"huggingface/nlp" -> "allenai/longformer"
"huggingface/nlp" -> "google-research/text-to-text-transfer-transformer"
"huggingface/nlp" -> "PAIR-code/lit"
"huggingface/nlp" -> "google-research/electra"
"huggingface/nlp" -> "kaushaltrivedi/fast-bert"
"huggingface/nlp" -> "ThilinaRajapakse/simpletransformers"
"huggingface/nlp" -> "UKPLab/sentence-transformers"
"huggingface/nlp" -> "jbesomi/texthero"
"huggingface/nlp" -> "tomohideshibata/BERT-related-papers"
"huggingface/nlp" -> "stanfordnlp/stanza"
"t-makaro/animatplot" -> "IndicoDataSolutions/finetune"
"OpenNMT/OpenNMT-py" -> "pytorch/fairseq"
"OpenNMT/OpenNMT-py" -> "allenai/allennlp"
"OpenNMT/OpenNMT-py" -> "huggingface/pytorch-pretrained-BERT"
"OpenNMT/OpenNMT-py" -> "tensorflow/nmt"
"OpenNMT/OpenNMT-py" -> "jadore801120/attention-is-all-you-need-pytorch"
"OpenNMT/OpenNMT-py" -> "google/sentencepiece"
"OpenNMT/OpenNMT-py" -> "rsennrich/subword-nmt"
"OpenNMT/OpenNMT-py" -> "spro/practical-pytorch"
"OpenNMT/OpenNMT-py" -> "OpenNMT/OpenNMT-tf"
"OpenNMT/OpenNMT-py" -> "tensorflow/tensor2tensor"
"OpenNMT/OpenNMT-py" -> "pytorch/text"
"OpenNMT/OpenNMT-py" -> "kimiyoung/transformer-xl"
"OpenNMT/OpenNMT-py" -> "abisee/pointer-generator" ["e"=1]
"OpenNMT/OpenNMT-py" -> "codertimo/BERT-pytorch"
"OpenNMT/OpenNMT-py" -> "zihangdai/xlnet"
"pytorch/text" -> "allenai/allennlp"
"pytorch/text" -> "huggingface/pytorch-pretrained-BERT"
"pytorch/text" -> "PetrochukM/PyTorch-NLP"
"pytorch/text" -> "OpenNMT/OpenNMT-py"
"pytorch/text" -> "spro/practical-pytorch"
"pytorch/text" -> "facebookresearch/pytext"
"pytorch/text" -> "IBM/pytorch-seq2seq"
"pytorch/text" -> "facebookresearch/InferSent"
"pytorch/text" -> "salesforce/awd-lstm-lm"
"pytorch/text" -> "zalandoresearch/flair"
"pytorch/text" -> "facebookresearch/XLM"
"pytorch/text" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"pytorch/text" -> "jadore801120/attention-is-all-you-need-pytorch"
"pytorch/text" -> "google/sentencepiece"
"pytorch/text" -> "DSKSD/DeepNLP-models-Pytorch"
"tomohideshibata/BERT-related-papers" -> "thunlp/PLMpapers"
"tomohideshibata/BERT-related-papers" -> "namisan/mt-dnn"
"tomohideshibata/BERT-related-papers" -> "Jiakui/awesome-bert" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "google-research/electra"
"tomohideshibata/BERT-related-papers" -> "huggingface/awesome-papers"
"tomohideshibata/BERT-related-papers" -> "jessevig/bertviz"
"tomohideshibata/BERT-related-papers" -> "facebookresearch/XLM"
"tomohideshibata/BERT-related-papers" -> "brightmart/albert_zh" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "thunlp/ERNIE" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "airaria/TextBrewer" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "zihangdai/xlnet"
"tomohideshibata/BERT-related-papers" -> "Separius/awesome-sentence-embedding"
"tomohideshibata/BERT-related-papers" -> "huggingface/pytorch-pretrained-BERT"
"tomohideshibata/BERT-related-papers" -> "dair-ai/nlp_paper_summaries"
"tomohideshibata/BERT-related-papers" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"bamtercelboo/pytorch_word2vec" -> "Adoni/word2vec_pytorch"
"bamtercelboo/pytorch_word2vec" -> "lonePatient/chinese-word2vec-pytorch"
"fastnlp/style-transformer" -> "cookielee77/DAST"
"fastnlp/style-transformer" -> "lijuncen/Sentiment-and-Style-Transfer"
"fastnlp/style-transformer" -> "luofuli/DualRL"
"fastnlp/style-transformer" -> "agaralabs/transformer-drg-style-transfer"
"fastnlp/style-transformer" -> "rpryzant/delete_retrieve_generate"
"fastnlp/style-transformer" -> "VAShibaev/text_style_transfer"
"fastnlp/style-transformer" -> "Nrgeup/controllable-text-attribute-transfer"
"fastnlp/style-transformer" -> "zhijing-jin/Text_Style_Transfer_Survey"
"fastnlp/style-transformer" -> "martiansideofthemoon/style-transfer-paraphrase"
"fastnlp/style-transformer" -> "vineetjohn/linguistic-style-transfer"
"fastnlp/style-transformer" -> "zhijing-jin/IMaT"
"luofuli/DualRL" -> "fastnlp/style-transformer"
"luofuli/DualRL" -> "dixonzhao/Java_Study_Zhao" ["e"=1]
"luofuli/DualRL" -> "rpryzant/delete_retrieve_generate"
"luofuli/DualRL" -> "lijuncen/Sentiment-and-Style-Transfer"
"luofuli/DualRL" -> "VideoOS/VideoOS-iOS-SDK" ["e"=1]
"luofuli/DualRL" -> "ljphilp/vue-element-super"
"luofuli/DualRL" -> "xksoft/xky" ["e"=1]
"luofuli/DualRL" -> "airuikun/crawler" ["e"=1]
"luofuli/DualRL" -> "cookielee77/DAST"
"luofuli/DualRL" -> "shentianxiao/language-style-transfer"
"luofuli/DualRL" -> "geduo83/FlyRefreshLayout" ["e"=1]
"luofuli/DualRL" -> "cindyxinyiwang/deep-latent-sequence-model"
"luofuli/DualRL" -> "luofuli/Fine-grained-Sentiment-Transfer"
"luofuli/DualRL" -> "fuzhenxin/Style-Transfer-in-Text"
"luofuli/DualRL" -> "entanmo/etm" ["e"=1]
"rpryzant/delete_retrieve_generate" -> "lijuncen/Sentiment-and-Style-Transfer"
"rpryzant/delete_retrieve_generate" -> "agaralabs/transformer-drg-style-transfer"
"rpryzant/delete_retrieve_generate" -> "fastnlp/style-transformer"
"rpryzant/delete_retrieve_generate" -> "luofuli/DualRL"
"rpryzant/delete_retrieve_generate" -> "vineetjohn/linguistic-style-transfer"
"facebookresearch/DrQA" -> "allenai/bi-att-flow" ["e"=1]
"facebookresearch/DrQA" -> "allenai/allennlp"
"facebookresearch/DrQA" -> "facebookresearch/ParlAI"
"facebookresearch/DrQA" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/DrQA" -> "facebookresearch/InferSent"
"facebookresearch/DrQA" -> "attardi/wikiextractor"
"facebookresearch/DrQA" -> "zihangdai/xlnet"
"facebookresearch/DrQA" -> "baidu/AnyQ" ["e"=1]
"facebookresearch/DrQA" -> "baidu/DuReader" ["e"=1]
"facebookresearch/DrQA" -> "hanxiao/bert-as-service"
"facebookresearch/DrQA" -> "facebookresearch/DPR" ["e"=1]
"facebookresearch/DrQA" -> "OpenNMT/OpenNMT-py"
"facebookresearch/DrQA" -> "kimiyoung/transformer-xl"
"facebookresearch/DrQA" -> "Conchylicultor/DeepQA" ["e"=1]
"facebookresearch/DrQA" -> "deepmipt/DeepPavlov"
"bjherger/ResumeParser" -> "chen0040/keras-english-resume-parser-and-analyzer"
"bjherger/ResumeParser" -> "OmkarPathak/pyresparser"
"bjherger/ResumeParser" -> "antonydeepak/ResumeParser"
"bjherger/ResumeParser" -> "OmkarPathak/ResumeParser"
"bjherger/ResumeParser" -> "perminder-klair/resume-parser"
"bjherger/ResumeParser" -> "likerRr/code4goal-resume-parser"
"bjherger/ResumeParser" -> "Satrat/Resume-Parser"
"bjherger/ResumeParser" -> "DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy"
"bjherger/ResumeParser" -> "divapriya/Language_Processing"
"bjherger/ResumeParser" -> "JAIJANYANI/Automated-Resume-Screening-System"
"bjherger/ResumeParser" -> "ashaywalke/resume-parser"
"bjherger/ResumeParser" -> "binoydutt/Resume-Job-Description-Matching"
"bjherger/ResumeParser" -> "jineshdhruv8/ResumeParser"
"explosion/thinc" -> "chartbeat-labs/textacy"
"explosion/thinc" -> "explosion/sense2vec"
"explosion/thinc" -> "explosion/spacy-transformers"
"explosion/thinc" -> "huggingface/neuralcoref"
"explosion/thinc" -> "explosion/spacy-models"
"explosion/thinc" -> "explosion/projects"
"explosion/thinc" -> "explosion/spaCy"
"explosion/thinc" -> "ines/spacy-course"
"explosion/thinc" -> "zalandoresearch/flair"
"explosion/thinc" -> "allenai/scispacy" ["e"=1]
"explosion/thinc" -> "pytorch/text"
"explosion/thinc" -> "explosion/prodigy-recipes"
"explosion/thinc" -> "huggingface/tokenizers"
"explosion/thinc" -> "explosion/spacy-pytorch-transformers"
"explosion/thinc" -> "allenai/allennlp"
"plasticityai/magnitude" -> "zalandoresearch/flair"
"plasticityai/magnitude" -> "facebookresearch/SentEval"
"plasticityai/magnitude" -> "facebookresearch/StarSpace"
"plasticityai/magnitude" -> "facebookresearch/InferSent"
"plasticityai/magnitude" -> "IndicoDataSolutions/finetune"
"plasticityai/magnitude" -> "chartbeat-labs/textacy"
"plasticityai/magnitude" -> "chakki-works/doccano"
"plasticityai/magnitude" -> "ThoughtRiver/lmdb-embeddings" ["e"=1]
"plasticityai/magnitude" -> "huggingface/neuralcoref"
"plasticityai/magnitude" -> "facebookresearch/MUSE"
"plasticityai/magnitude" -> "bheinzerling/bpemb"
"plasticityai/magnitude" -> "deepset-ai/FARM"
"plasticityai/magnitude" -> "facebookresearch/LASER"
"plasticityai/magnitude" -> "kaushaltrivedi/fast-bert"
"plasticityai/magnitude" -> "PetrochukM/PyTorch-NLP"
"NingMiao/CGMH" -> "dreasysnail/POINTER"
"Toni-Antonova/VAE-Text-Generation" -> "NicGian/text_VAE"
"bentrevett/pytorch-sentiment-analysis" -> "bentrevett/pytorch-seq2seq"
"bentrevett/pytorch-sentiment-analysis" -> "pytorch/text"
"bentrevett/pytorch-sentiment-analysis" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "graykode/nlp-tutorial"
"bentrevett/pytorch-sentiment-analysis" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "spro/practical-pytorch"
"bentrevett/pytorch-sentiment-analysis" -> "joosthub/PyTorchNLPBook"
"bentrevett/pytorch-sentiment-analysis" -> "UKPLab/sentence-transformers"
"bentrevett/pytorch-sentiment-analysis" -> "allenai/allennlp"
"bentrevett/pytorch-sentiment-analysis" -> "sebastianruder/NLP-progress"
"bentrevett/pytorch-sentiment-analysis" -> "codertimo/BERT-pytorch"
"bentrevett/pytorch-sentiment-analysis" -> "huggingface/pytorch-pretrained-BERT"
"bentrevett/pytorch-sentiment-analysis" -> "pytorch/fairseq"
"bentrevett/pytorch-sentiment-analysis" -> "DSKSD/DeepNLP-models-Pytorch"
"bentrevett/pytorch-sentiment-analysis" -> "brightmart/text_classification"
"huggingface/torchMoji" -> "bfelbo/DeepMoji"
"huggingface/torchMoji" -> "huggingface/hmtl"
"huggingface/torchMoji" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/torchMoji" -> "NVIDIA/sentiment-discovery"
"huggingface/torchMoji" -> "facebookresearch/InferSent"
"huggingface/torchMoji" -> "huggingface/neuralcoref"
"huggingface/torchMoji" -> "graykode/ALBERT-Pytorch" ["e"=1]
"huggingface/torchMoji" -> "openai/generating-reviews-discovering-sentiment"
"huggingface/torchMoji" -> "uber-research/PPLM"
"huggingface/torchMoji" -> "salesforce/awd-lstm-lm"
"huggingface/torchMoji" -> "pytorch/text"
"huggingface/torchMoji" -> "salesforce/decaNLP"
"huggingface/torchMoji" -> "huggingface/100-times-faster-nlp"
"huggingface/torchMoji" -> "huggingface/pytorch-pretrained-BERT"
"huggingface/torchMoji" -> "EdGENetworks/attention-networks-for-classification" ["e"=1]
"kelvinguu/neural-editor" -> "jiacheng-xu/vmf_vae_nlp" ["e"=1]
"kelvinguu/neural-editor" -> "shentianxiao/language-style-transfer"
"kelvinguu/neural-editor" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"kelvinguu/neural-editor" -> "snakeztc/NeuralDialog-CVAE" ["e"=1]
"kelvinguu/neural-editor" -> "harvardnlp/neural-template-gen" ["e"=1]
"kelvinguu/neural-editor" -> "Chung-I/Variational-Recurrent-Autoencoder-Tensorflow"
"kelvinguu/neural-editor" -> "NingMiao/CGMH"
"maciejkula/glove-python" -> "hans/glove.py"
"maciejkula/glove-python" -> "stanfordnlp/GloVe"
"maciejkula/glove-python" -> "piskvorky/gensim" ["e"=1]
"maciejkula/glove-python" -> "IndicoDataSolutions/Passage" ["e"=1]
"maciejkula/glove-python" -> "danielfrg/word2vec"
"maciejkula/glove-python" -> "ryankiros/skip-thoughts"
"maciejkula/glove-python" -> "GradySimon/tensorflow-glove"
"maciejkula/glove-python" -> "harvardnlp/seq2seq-attn" ["e"=1]
"maciejkula/glove-python" -> "allenai/bilm-tf"
"maciejkula/glove-python" -> "yoonkim/CNN_sentence"
"maciejkula/glove-python" -> "klb3713/sentence2vec"
"maciejkula/glove-python" -> "idio/wiki2vec" ["e"=1]
"maciejkula/glove-python" -> "HIT-SCIR/ELMoForManyLangs"
"maciejkula/glove-python" -> "codekansas/keras-language-modeling" ["e"=1]
"maciejkula/glove-python" -> "stanfordnlp/treelstm" ["e"=1]
"timbmg/Sentence-VAE" -> "kefirski/pytorch_RVAE"
"timbmg/Sentence-VAE" -> "wiseodd/controlled-text-generation"
"timbmg/Sentence-VAE" -> "Chung-I/Variational-Recurrent-Autoencoder-Tensorflow"
"timbmg/Sentence-VAE" -> "snakeztc/NeuralDialog-CVAE" ["e"=1]
"timbmg/Sentence-VAE" -> "jxhe/vae-lagging-encoder" ["e"=1]
"timbmg/Sentence-VAE" -> "ChunyuanLI/Optimus"
"timbmg/Sentence-VAE" -> "rohithreddy024/VAE-Text-Generation"
"timbmg/Sentence-VAE" -> "jiacheng-xu/vmf_vae_nlp" ["e"=1]
"timbmg/Sentence-VAE" -> "NicGian/text_VAE"
"timbmg/Sentence-VAE" -> "fuzhenxin/Style-Transfer-in-Text"
"timbmg/Sentence-VAE" -> "geek-ai/Texygen"
"timbmg/Sentence-VAE" -> "williamSYSU/TextGAN-PyTorch"
"timbmg/Sentence-VAE" -> "sodawater/T-CVAE" ["e"=1]
"timbmg/Sentence-VAE" -> "kelvinguu/neural-editor"
"timbmg/Sentence-VAE" -> "snakeztc/NeuralDialog-LAED" ["e"=1]
"kengz/aiva" -> "kengz/CGKB"
"kengz/aiva" -> "kengz/spacy-nlp"
"kengz/aiva" -> "explosion/spacy-services"
"kengz/aiva" -> "spacy-io/spaCy"
"kengz/aiva" -> "patrickjquinn/P-Brain.ai"
"kengz/aiva" -> "macournoyer/neuralconvo" ["e"=1]
"kengz/aiva" -> "golastmile/rasa_nlu" ["e"=1]
"kengz/aiva" -> "explosion/displacy"
"kengz/aiva" -> "ritwik12/Virtual-Assistant"
"LantaoYu/SeqGAN" -> "suragnair/seqGAN"
"LantaoYu/SeqGAN" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"LantaoYu/SeqGAN" -> "ofirnachum/sequence_gan"
"LantaoYu/SeqGAN" -> "CR-Gjx/LeakGAN"
"LantaoYu/SeqGAN" -> "geek-ai/Texygen"
"LantaoYu/SeqGAN" -> "igul222/improved_wgan_training" ["e"=1]
"LantaoYu/SeqGAN" -> "wiseodd/generative-models" ["e"=1]
"LantaoYu/SeqGAN" -> "martinarjovsky/WassersteinGAN" ["e"=1]
"LantaoYu/SeqGAN" -> "google/seq2seq"
"LantaoYu/SeqGAN" -> "abisee/pointer-generator" ["e"=1]
"LantaoYu/SeqGAN" -> "Kyubyong/transformer"
"LantaoYu/SeqGAN" -> "ZiJianZhao/SeqGAN-PyTorch"
"LantaoYu/SeqGAN" -> "geek-ai/irgan" ["e"=1]
"LantaoYu/SeqGAN" -> "facebook/MemNN" ["e"=1]
"LantaoYu/SeqGAN" -> "openai/improved-gan" ["e"=1]
"facebookresearch/SentEval" -> "facebookresearch/InferSent"
"facebookresearch/SentEval" -> "facebookresearch/MUSE"
"facebookresearch/SentEval" -> "ryankiros/skip-thoughts"
"facebookresearch/SentEval" -> "facebookresearch/XLM"
"facebookresearch/SentEval" -> "PrincetonML/SIF"
"facebookresearch/SentEval" -> "Separius/awesome-sentence-embedding"
"facebookresearch/SentEval" -> "princeton-nlp/SimCSE" ["e"=1]
"facebookresearch/SentEval" -> "nyu-mll/jiant"
"facebookresearch/SentEval" -> "facebookresearch/LASER"
"facebookresearch/SentEval" -> "brmson/dataset-sts"
"facebookresearch/SentEval" -> "facebookresearch/StarSpace"
"facebookresearch/SentEval" -> "epfml/sent2vec"
"facebookresearch/SentEval" -> "google/sentencepiece"
"facebookresearch/SentEval" -> "namisan/mt-dnn"
"facebookresearch/SentEval" -> "huggingface/pytorch-pretrained-BERT"
"google-research/ALBERT" -> "brightmart/albert_zh" ["e"=1]
"google-research/ALBERT" -> "google-research/electra"
"google-research/ALBERT" -> "zihangdai/xlnet"
"google-research/ALBERT" -> "ymcui/Chinese-PreTrained-XLNet" ["e"=1]
"google-research/ALBERT" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"google-research/ALBERT" -> "brightmart/roberta_zh" ["e"=1]
"google-research/ALBERT" -> "CLUEbenchmark/CLUE" ["e"=1]
"google-research/ALBERT" -> "ymcui/Chinese-ELECTRA" ["e"=1]
"google-research/ALBERT" -> "google-research/text-to-text-transfer-transformer"
"google-research/ALBERT" -> "lonePatient/albert_pytorch" ["e"=1]
"google-research/ALBERT" -> "facebookresearch/XLM"
"google-research/ALBERT" -> "kimiyoung/transformer-xl"
"google-research/ALBERT" -> "namisan/mt-dnn"
"google-research/ALBERT" -> "kpe/bert-for-tf2" ["e"=1]
"google-research/ALBERT" -> "tomohideshibata/BERT-related-papers"
"namisan/mt-dnn" -> "zihangdai/xlnet"
"namisan/mt-dnn" -> "huggingface/pytorch-pretrained-BERT"
"namisan/mt-dnn" -> "facebookresearch/XLM"
"namisan/mt-dnn" -> "kimiyoung/transformer-xl"
"namisan/mt-dnn" -> "thunlp/ERNIE" ["e"=1]
"namisan/mt-dnn" -> "PaddlePaddle/LARK" ["e"=1]
"namisan/mt-dnn" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"namisan/mt-dnn" -> "princeton-nlp/SimCSE" ["e"=1]
"namisan/mt-dnn" -> "allenai/bilm-tf"
"namisan/mt-dnn" -> "tomohideshibata/BERT-related-papers"
"namisan/mt-dnn" -> "google-research/electra"
"namisan/mt-dnn" -> "brightmart/roberta_zh" ["e"=1]
"namisan/mt-dnn" -> "nyu-mll/jiant"
"namisan/mt-dnn" -> "brightmart/albert_zh" ["e"=1]
"namisan/mt-dnn" -> "google-research/text-to-text-transfer-transformer"
"HazyResearch/snorkel" -> "HazyResearch/deepdive"
"HazyResearch/snorkel" -> "huggingface/pytorch-pretrained-BERT"
"HazyResearch/snorkel" -> "zalandoresearch/flair"
"HazyResearch/snorkel" -> "HazyResearch/metal"
"HazyResearch/snorkel" -> "facebookresearch/pytext"
"HazyResearch/snorkel" -> "allenai/allennlp"
"HazyResearch/snorkel" -> "facebookresearch/StarSpace"
"HazyResearch/snorkel" -> "chakki-works/doccano"
"HazyResearch/snorkel" -> "microsoft/interpret" ["e"=1]
"HazyResearch/snorkel" -> "Featuretools/featuretools" ["e"=1]
"HazyResearch/snorkel" -> "cemoody/lda2vec"
"HazyResearch/snorkel" -> "zihangdai/xlnet"
"HazyResearch/snorkel" -> "blei-lab/edward" ["e"=1]
"HazyResearch/snorkel" -> "TeamHG-Memex/eli5" ["e"=1]
"HazyResearch/snorkel" -> "facebookresearch/InferSent"
"brmson/dataset-sts" -> "facebookresearch/SentEval"
"brmson/dataset-sts" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"brmson/dataset-sts" -> "ryankiros/skip-thoughts"
"brmson/dataset-sts" -> "dhwajraj/deep-siamese-text-similarity" ["e"=1]
"brmson/dataset-sts" -> "zhiguowang/BiMPM" ["e"=1]
"brmson/dataset-sts" -> "shuzi/insuranceQA" ["e"=1]
"brmson/dataset-sts" -> "facebookresearch/InferSent"
"brmson/dataset-sts" -> "alvations/stasis"
"brmson/dataset-sts" -> "aditya1503/Siamese-LSTM" ["e"=1]
"brmson/dataset-sts" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"brmson/dataset-sts" -> "mfaruqui/retrofitting" ["e"=1]
"brmson/dataset-sts" -> "facebook/MemNN" ["e"=1]
"brmson/dataset-sts" -> "taolei87/rcnn" ["e"=1]
"brmson/dataset-sts" -> "PrincetonML/SIF"
"brmson/dataset-sts" -> "aseveryn/deep-qa" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "dmlc/gluon-nlp"
"GauravBh1010tt/DeepLearn" -> "Kyubyong/nlp_tasks"
"GauravBh1010tt/DeepLearn" -> "jerryli27/TwinGAN" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "salesforce/decaNLP"
"GauravBh1010tt/DeepLearn" -> "NervanaSystems/nlp-architect"
"GauravBh1010tt/DeepLearn" -> "PetrochukM/PyTorch-NLP"
"GauravBh1010tt/DeepLearn" -> "facebookresearch/InferSent"
"GauravBh1010tt/DeepLearn" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "Prodicode/ann-visualizer" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "Ahmkel/Keras-Project-Template" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "eBay/Sequence-Semantic-Embedding"
"GauravBh1010tt/DeepLearn" -> "ilkarman/DeepLearningFrameworks" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "Separius/awesome-sentence-embedding"
"GauravBh1010tt/DeepLearn" -> "Mrgemy95/Tensorflow-Project-Template"
"GauravBh1010tt/DeepLearn" -> "DSKSD/DeepNLP-models-Pytorch"
"asyml/texar" -> "asyml/texar-pytorch"
"asyml/texar" -> "geek-ai/Texygen"
"asyml/texar" -> "fuzhenxin/Style-Transfer-in-Text"
"asyml/texar" -> "huggingface/pytorch-pretrained-BERT"
"asyml/texar" -> "kimiyoung/transformer-xl"
"asyml/texar" -> "abisee/pointer-generator" ["e"=1]
"asyml/texar" -> "allenai/allennlp"
"asyml/texar" -> "zihangdai/xlnet"
"asyml/texar" -> "ChenChengKuan/awesome-text-generation"
"asyml/texar" -> "salesforce/decaNLP"
"asyml/texar" -> "shentianxiao/language-style-transfer"
"asyml/texar" -> "hanxiao/bert-as-service"
"asyml/texar" -> "wiseodd/controlled-text-generation"
"asyml/texar" -> "allenai/bilm-tf"
"asyml/texar" -> "LantaoYu/SeqGAN"
"benkrause/dynamic-evaluation" -> "zihangdai/mos"
"bfelbo/DeepMoji" -> "huggingface/torchMoji"
"bfelbo/DeepMoji" -> "lukalabs/cakechat" ["e"=1]
"bfelbo/DeepMoji" -> "openai/generating-reviews-discovering-sentiment"
"bfelbo/DeepMoji" -> "NVIDIA/sentiment-discovery"
"bfelbo/DeepMoji" -> "facebookresearch/InferSent"
"bfelbo/DeepMoji" -> "richliao/textClassifier" ["e"=1]
"bfelbo/DeepMoji" -> "uclmr/emoji2vec"
"bfelbo/DeepMoji" -> "facebookresearch/SentEval"
"bfelbo/DeepMoji" -> "commonsense/conceptnet-numberbatch"
"bfelbo/DeepMoji" -> "uber-research/PPLM"
"bfelbo/DeepMoji" -> "openai/finetune-transformer-lm"
"bfelbo/DeepMoji" -> "microsoft/DialoGPT" ["e"=1]
"bfelbo/DeepMoji" -> "ryankiros/skip-thoughts"
"bfelbo/DeepMoji" -> "huggingface/neuralcoref"
"bfelbo/DeepMoji" -> "atpaino/deep-text-corrector" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "keon/awesome-nlp" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "ivan-bilan/The-NLP-Pandect"
"brianspiering/awesome-dl4nlp" -> "astorfi/Deep-Learning-NLP"
"brianspiering/awesome-dl4nlp" -> "andrewt3000/DL4NLP"
"brianspiering/awesome-dl4nlp" -> "omarsar/nlp_overview"
"brianspiering/awesome-dl4nlp" -> "mihail911/nlp-library"
"brianspiering/awesome-dl4nlp" -> "rguthrie3/DeepLearningForNLPInPytorch"
"brianspiering/awesome-dl4nlp" -> "stepthom/text_mining_resources"
"brianspiering/awesome-dl4nlp" -> "Kyubyong/nlp_tasks"
"brianspiering/awesome-dl4nlp" -> "stanfordnlp/cs224n-winter17-notes"
"brianspiering/awesome-dl4nlp" -> "endymecy/awesome-deeplearning-resources" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"brianspiering/awesome-dl4nlp" -> "neubig/nn4nlp-code"
"brianspiering/awesome-dl4nlp" -> "ElizaLo/NLP-Natural-Language-Processing" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "Hironsan/awesome-embedding-models"
"eBay/Sequence-Semantic-Embedding" -> "faneshion/MatchZoo" ["e"=1]
"eBay/Sequence-Semantic-Embedding" -> "clab/dynet_tutorial_examples"
"eBay/Sequence-Semantic-Embedding" -> "epfml/sent2vec"
"eBay/Sequence-Semantic-Embedding" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"eBay/Sequence-Semantic-Embedding" -> "lgalke/vec4ir"
"eladhoffer/seq2seq.pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch"
"eladhoffer/seq2seq.pytorch" -> "IBM/pytorch-seq2seq"
"eladhoffer/seq2seq.pytorch" -> "facebookresearch/fairseq-py"
"eladhoffer/seq2seq.pytorch" -> "keon/seq2seq"
"eladhoffer/seq2seq.pytorch" -> "lium-lst/nmtpytorch"
"eladhoffer/seq2seq.pytorch" -> "salesforce/pytorch-qrnn"
"eladhoffer/seq2seq.pytorch" -> "taolei87/sru"
"eladhoffer/seq2seq.pytorch" -> "eladhoffer/captionGen" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "kimhc6028/relational-networks" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "harvardnlp/seq2seq-attn" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "spro/practical-pytorch"
"eladhoffer/seq2seq.pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "AuCson/PyTorch-Batch-Attention-Seq2seq"
"eladhoffer/seq2seq.pytorch" -> "artetxem/undreamt"
"eladhoffer/seq2seq.pytorch" -> "jakezhaojb/ARAE"
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/fairseq-py"
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/CommAI-env" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "facebook/MemNN" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "facebook/bAbI-tasks" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "snakeztc/NeuralDialogPapers" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "stanfordnlp/cocoa" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "MiuLab/TC-Bot" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/clevr-iep" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/DrQA"
"facebookresearch/end-to-end-negotiator" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "taolei87/sru"
"facebookresearch/end-to-end-negotiator" -> "openai/generating-reviews-discovering-sentiment"
"facebookresearch/end-to-end-negotiator" -> "kimhc6028/relational-networks" ["e"=1]
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/ParlAI"
"facebookresearch/end-to-end-negotiator" -> "facebookresearch/InferSent"
"jakezhaojb/ARAE" -> "shentianxiao/language-style-transfer"
"jakezhaojb/ARAE" -> "wiseodd/controlled-text-generation"
"jakezhaojb/ARAE" -> "lijuncen/Sentiment-and-Style-Transfer"
"jakezhaojb/ARAE" -> "amirbar/rnn.wgan"
"jakezhaojb/ARAE" -> "ofirnachum/sequence_gan"
"jakezhaojb/ARAE" -> "geek-ai/Texygen"
"jakezhaojb/ARAE" -> "kefirski/pytorch_RVAE"
"jakezhaojb/ARAE" -> "GBLin5566/toward-controlled-generation-of-text-pytorch"
"jakezhaojb/ARAE" -> "zhengliz/natural-adversary" ["e"=1]
"jakezhaojb/ARAE" -> "guxd/DialogWAE" ["e"=1]
"jakezhaojb/ARAE" -> "harvardnlp/sa-vae" ["e"=1]
"jakezhaojb/ARAE" -> "harvardnlp/var-attn" ["e"=1]
"jakezhaojb/ARAE" -> "jxhe/vae-lagging-encoder" ["e"=1]
"jakezhaojb/ARAE" -> "snakeztc/NeuralDialog-LAED" ["e"=1]
"jakezhaojb/ARAE" -> "CR-Gjx/LeakGAN"
"ryankiros/skip-thoughts" -> "ryankiros/neural-storyteller" ["e"=1]
"ryankiros/skip-thoughts" -> "facebook/MemNN" ["e"=1]
"ryankiros/skip-thoughts" -> "facebookresearch/InferSent"
"ryankiros/skip-thoughts" -> "harvardnlp/seq2seq-attn" ["e"=1]
"ryankiros/skip-thoughts" -> "deepmind/rc-data" ["e"=1]
"ryankiros/skip-thoughts" -> "facebookresearch/SentEval"
"ryankiros/skip-thoughts" -> "zhangxiangxiao/Crepe" ["e"=1]
"ryankiros/skip-thoughts" -> "piskvorky/gensim" ["e"=1]
"ryankiros/skip-thoughts" -> "stanfordnlp/treelstm" ["e"=1]
"ryankiros/skip-thoughts" -> "klb3713/sentence2vec"
"ryankiros/skip-thoughts" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"ryankiros/skip-thoughts" -> "paarthneekhara/text-to-image" ["e"=1]
"ryankiros/skip-thoughts" -> "farizrahman4u/seq2seq" ["e"=1]
"ryankiros/skip-thoughts" -> "kjw0612/awesome-rnn" ["e"=1]
"ryankiros/skip-thoughts" -> "yoonkim/lstm-char-cnn" ["e"=1]
"salesforce/awd-lstm-lm" -> "salesforce/pytorch-qrnn"
"salesforce/awd-lstm-lm" -> "zihangdai/mos"
"salesforce/awd-lstm-lm" -> "kimiyoung/transformer-xl"
"salesforce/awd-lstm-lm" -> "pytorch/text"
"salesforce/awd-lstm-lm" -> "huggingface/pytorch-pretrained-BERT"
"salesforce/awd-lstm-lm" -> "allenai/bilm-tf"
"salesforce/awd-lstm-lm" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/awd-lstm-lm" -> "facebookresearch/XLM"
"salesforce/awd-lstm-lm" -> "taolei87/sru"
"salesforce/awd-lstm-lm" -> "salesforce/decaNLP"
"salesforce/awd-lstm-lm" -> "rsennrich/subword-nmt"
"salesforce/awd-lstm-lm" -> "facebookresearch/InferSent"
"salesforce/awd-lstm-lm" -> "OpenNMT/OpenNMT-py"
"salesforce/awd-lstm-lm" -> "google/sentencepiece"
"salesforce/awd-lstm-lm" -> "yikangshen/Ordered-Neurons" ["e"=1]
"keonkim/awesome-nlp" -> "andrewt3000/DL4NLP"
"keonkim/awesome-nlp" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"keonkim/awesome-nlp" -> "LeavesBreathe/tensorflow_with_latest_papers" ["e"=1]
"keonkim/awesome-nlp" -> "ryankiros/skip-thoughts"
"keonkim/awesome-nlp" -> "kjw0612/awesome-rnn" ["e"=1]
"keonkim/awesome-nlp" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"keonkim/awesome-nlp" -> "macournoyer/neuralconvo" ["e"=1]
"keonkim/awesome-nlp" -> "harvardnlp/seq2seq-attn" ["e"=1]
"keonkim/awesome-nlp" -> "deepmind/rc-data" ["e"=1]
"keonkim/awesome-nlp" -> "joanbruna/stat212b" ["e"=1]
"keonkim/awesome-nlp" -> "zer0n/deepframeworks" ["e"=1]
"keonkim/awesome-nlp" -> "Newmu/Theano-Tutorials" ["e"=1]
"keonkim/awesome-nlp" -> "karthikncode/nlp-datasets" ["e"=1]
"keonkim/awesome-nlp" -> "yoonkim/CNN_sentence"
"keonkim/awesome-nlp" -> "saiprashanths/dl-setup" ["e"=1]
"Hironsan/bertsearch" -> "koursaros-ai/nboost"
"Hironsan/bertsearch" -> "jtibshirani/text-embeddings"
"Hironsan/bertsearch" -> "gnes-ai/gnes"
"Hironsan/bertsearch" -> "md-experiments/elastic_transformers"
"Hironsan/bertsearch" -> "lior-k/fast-elasticsearch-vector-scoring" ["e"=1]
"Hironsan/bertsearch" -> "alexklibisz/elastiknn" ["e"=1]
"Hironsan/bertsearch" -> "o19s/elasticsearch-learning-to-rank" ["e"=1]
"Hironsan/bertsearch" -> "kaushaltrivedi/fast-bert"
"Hironsan/bertsearch" -> "castorini/anserini" ["e"=1]
"Hironsan/bertsearch" -> "oborchers/Fast_Sentence_Embeddings"
"Hironsan/bertsearch" -> "kamalkraj/BERT-NER" ["e"=1]
"Hironsan/bertsearch" -> "deepset-ai/FARM"
"Hironsan/bertsearch" -> "thunlp/OpenMatch" ["e"=1]
"Hironsan/bertsearch" -> "Hironsan/anago" ["e"=1]
"Hironsan/bertsearch" -> "opendistro-for-elasticsearch/k-NN" ["e"=1]
"sebastianarnold/WikiSection" -> "sebastianarnold/SECTOR"
"Kyubyong/wordvectors" -> "3Top/word2vec-api"
"Kyubyong/wordvectors" -> "HIT-SCIR/ELMoForManyLangs"
"Kyubyong/wordvectors" -> "lovit/soynlp" ["e"=1]
"Kyubyong/wordvectors" -> "Kyubyong/nlp_tasks"
"Kyubyong/wordvectors" -> "SKTBrain/KoBERT" ["e"=1]
"Kyubyong/wordvectors" -> "facebookresearch/fastText"
"Kyubyong/wordvectors" -> "rsennrich/subword-nmt"
"Kyubyong/wordvectors" -> "google/sentencepiece"
"Kyubyong/wordvectors" -> "brightmart/text_classification"
"Kyubyong/wordvectors" -> "salestock/fastText.py"
"Kyubyong/wordvectors" -> "yoonkim/CNN_sentence"
"Kyubyong/wordvectors" -> "Hironsan/awesome-embedding-models"
"Kyubyong/wordvectors" -> "stanfordnlp/GloVe"
"Kyubyong/wordvectors" -> "allenai/bilm-tf"
"Kyubyong/wordvectors" -> "monologg/KoELECTRA" ["e"=1]
"dav/word2vec" -> "danielfrg/word2vec"
"dav/word2vec" -> "tmikolov/word2vec"
"dav/word2vec" -> "jdeng/word2vec" ["e"=1]
"dav/word2vec" -> "stanfordnlp/GloVe"
"dav/word2vec" -> "svn2github/word2vec"
"dav/word2vec" -> "chrisjmccormick/word2vec_commented"
"dav/word2vec" -> "yoonkim/CNN_sentence"
"dav/word2vec" -> "guestwalk/libffm" ["e"=1]
"dav/word2vec" -> "dennybritz/cnn-text-classification-tf"
"dav/word2vec" -> "guestwalk/kaggle-2014-criteo" ["e"=1]
"dav/word2vec" -> "phanein/deepwalk" ["e"=1]
"dav/word2vec" -> "allenai/bilm-tf"
"dav/word2vec" -> "srendle/libfm" ["e"=1]
"dav/word2vec" -> "jiesutd/NCRFpp" ["e"=1]
"dav/word2vec" -> "rockingdingo/deepnlp" ["e"=1]
"rish-16/gpt2client" -> "Morizeyao/Decoders-Chinese-TF2.0" ["e"=1]
"rish-16/gpt2client" -> "akanyaani/gpt-2-tensorflow2.0"
"rish-16/gpt2client" -> "prakhar21/TextAugmentation-GPT2"
"rish-16/gpt2client" -> "shawwn/gpt-2"
"rish-16/gpt2client" -> "rish-16/sight"
"rish-16/gpt2client" -> "minimaxir/gpt-2-cloud-run"
"rish-16/gpt2client" -> "ak9250/gpt-2-colab"
"rish-16/gpt2client" -> "minimaxir/gpt-2-simple"
"aboSamoor/polyglot" -> "chartbeat-labs/textacy"
"aboSamoor/polyglot" -> "saffsd/langid.py"
"aboSamoor/polyglot" -> "Mimino666/langdetect"
"aboSamoor/polyglot" -> "facebookresearch/MUSE"
"aboSamoor/polyglot" -> "sloria/TextBlob"
"aboSamoor/polyglot" -> "facebookresearch/LASER"
"aboSamoor/polyglot" -> "stanfordnlp/stanza"
"aboSamoor/polyglot" -> "huggingface/neuralcoref"
"aboSamoor/polyglot" -> "facebookresearch/XLM"
"aboSamoor/polyglot" -> "RaRe-Technologies/gensim"
"aboSamoor/polyglot" -> "google/sentencepiece"
"aboSamoor/polyglot" -> "cemoody/lda2vec"
"aboSamoor/polyglot" -> "allenai/allennlp"
"aboSamoor/polyglot" -> "PetrochukM/PyTorch-NLP"
"aboSamoor/polyglot" -> "zalandoresearch/flair"
"dsgiitr/VisualML" -> "dsgiitr/reading-group"
"dsgiitr/VisualML" -> "dsgiitr/adversarial_lab"
"dsgiitr/VisualML" -> "sahilg06/Global-Wheat-Detection-2021"
"dsgiitr/VisualML" -> "dsgiitr/ML-InterviewQs"
"dsgiitr/VisualML" -> "dsgiitr/BOSCH-MODEL-EXTRACTION-ATTACK-FOR-VIDEO-CLASSIFICATION"
"koursaros-ai/nboost" -> "Hironsan/bertsearch"
"koursaros-ai/nboost" -> "gnes-ai/gnes"
"koursaros-ai/nboost" -> "nyu-dl/dl4marco-bert" ["e"=1]
"koursaros-ai/nboost" -> "castorini/anserini" ["e"=1]
"koursaros-ai/nboost" -> "deepset-ai/FARM"
"koursaros-ai/nboost" -> "kaushaltrivedi/fast-bert"
"koursaros-ai/nboost" -> "oborchers/Fast_Sentence_Embeddings"
"koursaros-ai/nboost" -> "facebookresearch/DPR" ["e"=1]
"koursaros-ai/nboost" -> "jina-ai/examples" ["e"=1]
"koursaros-ai/nboost" -> "md-experiments/elastic_transformers"
"koursaros-ai/nboost" -> "ULTR-Community/ULTRA" ["e"=1]
"koursaros-ai/nboost" -> "PolyAI-LDN/polyai-models" ["e"=1]
"koursaros-ai/nboost" -> "castorini/pyserini" ["e"=1]
"koursaros-ai/nboost" -> "facebookresearch/BLINK" ["e"=1]
"koursaros-ai/nboost" -> "jtibshirani/text-embeddings"
"PrincetonML/SIF" -> "peter3125/sentence2vec"
"PrincetonML/SIF" -> "facebookresearch/InferSent"
"PrincetonML/SIF" -> "facebookresearch/SentEval"
"PrincetonML/SIF" -> "oborchers/Fast_Sentence_Embeddings"
"PrincetonML/SIF" -> "epfml/sent2vec"
"PrincetonML/SIF" -> "jx00109/sentence2vec"
"PrincetonML/SIF" -> "ryankiros/skip-thoughts"
"PrincetonML/SIF" -> "allenai/bilm-tf"
"PrincetonML/SIF" -> "dhwajraj/deep-siamese-text-similarity" ["e"=1]
"PrincetonML/SIF" -> "UKPLab/arxiv2018-xling-sentence-embeddings"
"PrincetonML/SIF" -> "Separius/awesome-sentence-embedding"
"PrincetonML/SIF" -> "richliao/textClassifier" ["e"=1]
"PrincetonML/SIF" -> "NTMC-Community/MatchZoo" ["e"=1]
"PrincetonML/SIF" -> "HIT-SCIR/ELMoForManyLangs"
"PrincetonML/SIF" -> "llhthinker/NLP-Papers"
"llhthinker/NLP-Papers" -> "llhthinker/BDCI2017-MingLue" ["e"=1]
"llhthinker/NLP-Papers" -> "PrincetonML/SIF"
"llhthinker/NLP-Papers" -> "changwookjun/nlp-paper" ["e"=1]
"llhthinker/NLP-Papers" -> "mhagiwara/100-nlp-papers"
"llhthinker/NLP-Papers" -> "madrugado/deep-learning-nlp-rl-papers" ["e"=1]
"Mimino666/langdetect" -> "saffsd/langid.py"
"Mimino666/langdetect" -> "shuyo/language-detection"
"Mimino666/langdetect" -> "aboSamoor/polyglot"
"Mimino666/langdetect" -> "google/cld3"
"Mimino666/langdetect" -> "bsolomon1124/pycld3"
"Mimino666/langdetect" -> "pemistahl/lingua-py"
"Mimino666/langdetect" -> "facebookresearch/LASER"
"Mimino666/langdetect" -> "aboSamoor/pycld2"
"Mimino666/langdetect" -> "chartbeat-labs/textacy"
"Mimino666/langdetect" -> "CLD2Owners/cld2"
"Mimino666/langdetect" -> "scrapinghub/dateparser" ["e"=1]
"Mimino666/langdetect" -> "miso-belica/jusText" ["e"=1]
"Mimino666/langdetect" -> "life4/textdistance"
"Mimino666/langdetect" -> "summanlp/textrank" ["e"=1]
"Mimino666/langdetect" -> "shuyo/ldig"
"jfilter/clean-text" -> "nipunsadvilkar/pySBD" ["e"=1]
"jfilter/clean-text" -> "MaartenGr/PolyFuzz"
"jfilter/clean-text" -> "linkedin/detext"
"jfilter/clean-text" -> "jbesomi/texthero"
"jfilter/clean-text" -> "chartbeat-labs/textacy"
"jfilter/clean-text" -> "PrithivirajDamodaran/Styleformer"
"jfilter/clean-text" -> "recognai/rubrix"
"jfilter/clean-text" -> "deepset-ai/FARM"
"jfilter/clean-text" -> "ddangelov/Top2Vec"
"jfilter/clean-text" -> "ICLRandD/Blackstone" ["e"=1]
"jfilter/clean-text" -> "erre-quadro/spikex"
"jfilter/clean-text" -> "NorskRegnesentral/skweak"
"jfilter/clean-text" -> "life4/textdistance"
"jfilter/clean-text" -> "webis-de/small-text"
"jfilter/clean-text" -> "LIAAD/yake" ["e"=1]
"google-research/bleurt" -> "Tiiiger/bert_score"
"google-research/bleurt" -> "Unbabel/COMET"
"google-research/bleurt" -> "neulab/BARTScore" ["e"=1]
"google-research/bleurt" -> "mjpost/sacrebleu"
"google-research/bleurt" -> "AIPHES/emnlp19-moverscore"
"google-research/bleurt" -> "Yale-LILY/SummEval" ["e"=1]
"google-research/bleurt" -> "alvations/sacremoses"
"google-research/bleurt" -> "google-research/lasertagger" ["e"=1]
"google-research/bleurt" -> "facebookresearch/unlikelihood_training"
"google-research/bleurt" -> "salesforce/simpletod" ["e"=1]
"google-research/bleurt" -> "neulab/compare-mt"
"google-research/bleurt" -> "google-research/language" ["e"=1]
"google-research/bleurt" -> "salesforce/ctrl"
"google-research/bleurt" -> "cisnlp/simalign"
"google-research/bleurt" -> "clab/fast_align"
"CLD2Owners/cld2" -> "mikemccand/chromium-compact-language-detector"
"CLD2Owners/cld2" -> "google/cld3"
"CLD2Owners/cld2" -> "optimaize/language-detector"
"CLD2Owners/cld2" -> "shuyo/language-detection"
"CLD2Owners/cld2" -> "shuyo/ldig"
"CLD2Owners/cld2" -> "facebookresearch/cc_net"
"CLD2Owners/cld2" -> "saffsd/langid.py"
"CLD2Owners/cld2" -> "aboSamoor/pycld2"
"CLD2Owners/cld2" -> "Mimino666/langdetect"
"CLD2Owners/cld2" -> "aboSamoor/polyglot"
"CLD2Owners/cld2" -> "clab/fast_align"
"CLD2Owners/cld2" -> "scrapinghub/python-cld2"
"CLD2Owners/cld2" -> "glample/fastBPE"
"CLD2Owners/cld2" -> "GregBowyer/cld2-cffi"
"CLD2Owners/cld2" -> "facebookresearch/LASER"
"EdinburghNLP/nematus" -> "marian-nmt/marian"
"EdinburghNLP/nematus" -> "rsennrich/subword-nmt"
"EdinburghNLP/nematus" -> "nyu-dl/dl4mt-tutorial"
"EdinburghNLP/nematus" -> "rsennrich/wmt16-scripts"
"EdinburghNLP/nematus" -> "facebookresearch/UnsupervisedMT"
"EdinburghNLP/nematus" -> "clab/fast_align"
"EdinburghNLP/nematus" -> "jonsafari/nmt-list"
"EdinburghNLP/nematus" -> "moses-smt/mosesdecoder"
"EdinburghNLP/nematus" -> "OpenNMT/OpenNMT-tf"
"EdinburghNLP/nematus" -> "ufal/neuralmonkey"
"EdinburghNLP/nematus" -> "awslabs/sockeye"
"EdinburghNLP/nematus" -> "neubig/nmt-tips"
"EdinburghNLP/nematus" -> "lvapeab/nmt-keras" ["e"=1]
"EdinburghNLP/nematus" -> "lmthang/nmt.hybrid"
"EdinburghNLP/nematus" -> "moses-smt/giza-pp"
"Nrgeup/controllable-text-attribute-transfer" -> "agaralabs/transformer-drg-style-transfer"
"Nrgeup/controllable-text-attribute-transfer" -> "lijuncen/Sentiment-and-Style-Transfer"
"Nrgeup/controllable-text-attribute-transfer" -> "cookielee77/DAST"
"Nrgeup/controllable-text-attribute-transfer" -> "vineetjohn/linguistic-style-transfer"
"Nrgeup/controllable-text-attribute-transfer" -> "ChenWu98/Point-Then-Operate"
"Nrgeup/controllable-text-attribute-transfer" -> "h3lio5/linguistic-style-transfer-pytorch"
"UKPLab/deeplearning4nlp-tutorial" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"UKPLab/deeplearning4nlp-tutorial" -> "clab/dynet_tutorial_examples"
"UKPLab/deeplearning4nlp-tutorial" -> "neubig/nn4nlp2017-code"
"UKPLab/deeplearning4nlp-tutorial" -> "attardi/deepnl" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "UKPLab/emnlp2017-relation-extraction" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "hadyelsahar/CNN-RelationExtraction" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "lipiji/App-DL" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "thunlp/NRE" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "andrewt3000/DL4NLP"
"UKPLab/deeplearning4nlp-tutorial" -> "karthikncode/nlp-datasets" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "richliao/textClassifier" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "roomylee/cnn-relation-extraction" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "snakeztc/NeuralDialogPapers" ["e"=1]
"deepmipt/DeepPavlov" -> "facebookresearch/ParlAI"
"deepmipt/DeepPavlov" -> "hanxiao/bert-as-service"
"deepmipt/DeepPavlov" -> "allenai/allennlp"
"deepmipt/DeepPavlov" -> "huggingface/pytorch-pretrained-BERT"
"deepmipt/DeepPavlov" -> "zalandoresearch/flair"
"deepmipt/DeepPavlov" -> "facebookresearch/DrQA"
"deepmipt/DeepPavlov" -> "RasaHQ/rasa"
"deepmipt/DeepPavlov" -> "sebastianruder/NLP-progress"
"deepmipt/DeepPavlov" -> "RasaHQ/rasa_nlu" ["e"=1]
"deepmipt/DeepPavlov" -> "snipsco/snips-nlu" ["e"=1]
"deepmipt/DeepPavlov" -> "zihangdai/xlnet"
"deepmipt/DeepPavlov" -> "facebookresearch/pytext"
"deepmipt/DeepPavlov" -> "brightmart/text_classification"
"deepmipt/DeepPavlov" -> "UKPLab/sentence-transformers"
"deepmipt/DeepPavlov" -> "gunthercox/ChatterBot" ["e"=1]
"facebookresearch/MUSE" -> "facebookresearch/XLM"
"facebookresearch/MUSE" -> "artetxem/vecmap"
"facebookresearch/MUSE" -> "facebookresearch/LASER"
"facebookresearch/MUSE" -> "facebookresearch/UnsupervisedMT"
"facebookresearch/MUSE" -> "rsennrich/subword-nmt"
"facebookresearch/MUSE" -> "facebookresearch/InferSent"
"facebookresearch/MUSE" -> "google/sentencepiece"
"facebookresearch/MUSE" -> "facebookresearch/SentEval"
"facebookresearch/MUSE" -> "OpenNMT/OpenNMT-py"
"facebookresearch/MUSE" -> "allenai/allennlp"
"facebookresearch/MUSE" -> "THUNLP-MT/MT-Reading-List"
"facebookresearch/MUSE" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/MUSE" -> "clab/fast_align"
"facebookresearch/MUSE" -> "facebookresearch/StarSpace"
"facebookresearch/MUSE" -> "moses-smt/mosesdecoder"
"argilla-io/argilla" -> "huggingface/setfit"
"argilla-io/argilla" -> "code-kern-ai/refinery"
"argilla-io/argilla" -> "NorskRegnesentral/skweak"
"argilla-io/argilla" -> "Unstructured-IO/unstructured" ["e"=1]
"argilla-io/argilla" -> "Pandora-Intelligence/concise-concepts"
"argilla-io/argilla" -> "pemistahl/lingua-py"
"argilla-io/argilla" -> "webis-de/small-text"
"argilla-io/argilla" -> "autonlab/weasel"
"argilla-io/argilla" -> "explosion/spacy-course" ["e"=1]
"argilla-io/argilla" -> "infinitylogesh/mutate"
"argilla-io/argilla" -> "koaning/embetter" ["e"=1]
"argilla-io/argilla" -> "explosion/prodigy-openai-recipes"
"argilla-io/argilla" -> "koaning/bulk" ["e"=1]
"argilla-io/argilla" -> "embeddings-benchmark/mteb" ["e"=1]
"argilla-io/argilla" -> "MilaNLProc/contextualized-topic-models"
"edobashira/speech-language-processing" -> "zzw922cn/awesome-speech-recognition-speech-synthesis-papers" ["e"=1]
"edobashira/speech-language-processing" -> "andrewt3000/DL4NLP"
"edobashira/speech-language-processing" -> "theimpossibleastronaut/awesome-linguistics" ["e"=1]
"edobashira/speech-language-processing" -> "kjw0612/awesome-rnn" ["e"=1]
"edobashira/speech-language-processing" -> "syhw/wer_are_we" ["e"=1]
"edobashira/speech-language-processing" -> "srvk/eesen" ["e"=1]
"edobashira/speech-language-processing" -> "keonkim/awesome-nlp"
"edobashira/speech-language-processing" -> "Kyubyong/nlp_tasks"
"edobashira/speech-language-processing" -> "keon/awesome-nlp" ["e"=1]
"edobashira/speech-language-processing" -> "pkmital/tensorflow_tutorials" ["e"=1]
"edobashira/speech-language-processing" -> "pykaldi/pykaldi" ["e"=1]
"edobashira/speech-language-processing" -> "zer0n/deepframeworks" ["e"=1]
"edobashira/speech-language-processing" -> "rushter/data-science-blogs" ["e"=1]
"edobashira/speech-language-processing" -> "hangtwenty/dive-into-machine-learning" ["e"=1]
"edobashira/speech-language-processing" -> "brianspiering/awesome-dl4nlp"
"explosion/displacy" -> "explosion/displacy-ent"
"explosion/displacy" -> "explosion/spacy-dev-resources"
"JieyuZ2/Awesome-Weak-Supervision" -> "JieyuZ2/wrench"
"JieyuZ2/Awesome-Weak-Supervision" -> "autonlab/weasel"
"kaushaltrivedi/fast-bert" -> "kaushaltrivedi/bert-toxic-comments-multilabel" ["e"=1]
"kaushaltrivedi/fast-bert" -> "ThilinaRajapakse/simpletransformers"
"kaushaltrivedi/fast-bert" -> "deepset-ai/FARM"
"kaushaltrivedi/fast-bert" -> "facebookresearch/XLM"
"kaushaltrivedi/fast-bert" -> "zihangdai/xlnet"
"kaushaltrivedi/fast-bert" -> "huggingface/pytorch-pretrained-BERT"
"kaushaltrivedi/fast-bert" -> "hanxiao/bert-as-service"
"kaushaltrivedi/fast-bert" -> "google-research/ALBERT"
"kaushaltrivedi/fast-bert" -> "huggingface/naacl_transfer_learning_tutorial"
"kaushaltrivedi/fast-bert" -> "huggingface/hmtl"
"kaushaltrivedi/fast-bert" -> "namisan/mt-dnn"
"kaushaltrivedi/fast-bert" -> "zalandoresearch/flair"
"kaushaltrivedi/fast-bert" -> "huggingface/awesome-papers"
"kaushaltrivedi/fast-bert" -> "huggingface/nlp"
"kaushaltrivedi/fast-bert" -> "facebookresearch/SentEval"
"indicnlpweb/indicnlp_catalog" -> "ai4bharat-indicnlp/indicnlp_corpus"
"indicnlpweb/indicnlp_catalog" -> "anoopkunchukuttan/indic_nlp_library"
"Lynten/stanford-corenlp" -> "stanfordnlp/python-stanford-corenlp"
"Lynten/stanford-corenlp" -> "HIT-SCIR/pyltp" ["e"=1]
"Lynten/stanford-corenlp" -> "hankcs/pyhanlp" ["e"=1]
"Lynten/stanford-corenlp" -> "smilli/py-corenlp"
"Lynten/stanford-corenlp" -> "stanfordnlp/stanfordnlp"
"Lynten/stanford-corenlp" -> "abisee/pointer-generator" ["e"=1]
"Lynten/stanford-corenlp" -> "stanfordnlp/CoreNLP"
"Lynten/stanford-corenlp" -> "thunlp/THULAC-Python" ["e"=1]
"Lynten/stanford-corenlp" -> "pltrdy/rouge" ["e"=1]
"Lynten/stanford-corenlp" -> "FudanNLP/fnlp" ["e"=1]
"Lynten/stanford-corenlp" -> "allenai/bilm-tf"
"Lynten/stanford-corenlp" -> "huggingface/neuralcoref"
"Lynten/stanford-corenlp" -> "stanfordnlp/stanza"
"Lynten/stanford-corenlp" -> "kentonl/e2e-coref"
"Lynten/stanford-corenlp" -> "fastnlp/fastNLP" ["e"=1]
"OpenNMT/OpenNMT" -> "harvardnlp/seq2seq-attn" ["e"=1]
"OpenNMT/OpenNMT" -> "OpenNMT/OpenNMT-py"
"OpenNMT/OpenNMT" -> "OpenNMT/OpenNMT-tf"
"OpenNMT/OpenNMT" -> "buriburisuri/speech-to-text-wavenet" ["e"=1]
"OpenNMT/OpenNMT" -> "google/seq2seq"
"OpenNMT/OpenNMT" -> "rsennrich/subword-nmt"
"OpenNMT/OpenNMT" -> "junyanz/iGAN" ["e"=1]
"OpenNMT/OpenNMT" -> "moses-smt/mosesdecoder"
"OpenNMT/OpenNMT" -> "facebookresearch/fairseq"
"OpenNMT/OpenNMT" -> "MrNothing/AI-Blocks" ["e"=1]
"OpenNMT/OpenNMT" -> "tensorflow/nmt"
"OpenNMT/OpenNMT" -> "facebookresearch/fairseq-py"
"OpenNMT/OpenNMT" -> "awslabs/sockeye"
"OpenNMT/OpenNMT" -> "lisa-groundhog/GroundHog" ["e"=1]
"OpenNMT/OpenNMT" -> "facebookresearch/MUSE"
"allenai/bilm-tf" -> "HIT-SCIR/ELMoForManyLangs"
"allenai/bilm-tf" -> "openai/finetune-transformer-lm"
"allenai/bilm-tf" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"allenai/bilm-tf" -> "kimiyoung/transformer-xl"
"allenai/bilm-tf" -> "PaddlePaddle/LARK" ["e"=1]
"allenai/bilm-tf" -> "zihangdai/xlnet"
"allenai/bilm-tf" -> "allenai/bi-att-flow" ["e"=1]
"allenai/bilm-tf" -> "allenai/allennlp"
"allenai/bilm-tf" -> "UKPLab/emnlp2017-bilstm-cnn-crf" ["e"=1]
"allenai/bilm-tf" -> "abisee/pointer-generator" ["e"=1]
"allenai/bilm-tf" -> "Kyubyong/transformer"
"allenai/bilm-tf" -> "NLPLearn/QANet" ["e"=1]
"allenai/bilm-tf" -> "guillaumegenthial/sequence_tagging" ["e"=1]
"allenai/bilm-tf" -> "namisan/mt-dnn"
"allenai/bilm-tf" -> "jiesutd/NCRFpp" ["e"=1]
"google/sling" -> "facebookresearch/InferSent"
"google/sling" -> "percyliang/sempre" ["e"=1]
"google/sling" -> "huggingface/neuralcoref"
"google/sling" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"google/sling" -> "facebookresearch/DrQA"
"google/sling" -> "baidu/Familia" ["e"=1]
"google/sling" -> "taolei87/sru"
"google/sling" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"google/sling" -> "allenai/allennlp"
"google/sling" -> "facebookresearch/SentEval"
"google/sling" -> "NervanaSystems/nlp-architect"
"google/sling" -> "RasaHQ/rasa_nlu" ["e"=1]
"google/sling" -> "faneshion/MatchZoo" ["e"=1]
"google/sling" -> "facebookresearch/StarSpace"
"google/sling" -> "google/seq2seq"
"rguthrie3/DeepLearningForNLPInPytorch" -> "spro/practical-pytorch"
"rguthrie3/DeepLearningForNLPInPytorch" -> "DSKSD/DeepNLP-models-Pytorch"
"rguthrie3/DeepLearningForNLPInPytorch" -> "PetrochukM/PyTorch-NLP"
"rguthrie3/DeepLearningForNLPInPytorch" -> "pytorch/text"
"rguthrie3/DeepLearningForNLPInPytorch" -> "clab/dynet_tutorial_examples"
"rguthrie3/DeepLearningForNLPInPytorch" -> "stanfordnlp/cs224n-winter17-notes"
"rguthrie3/DeepLearningForNLPInPytorch" -> "taolei87/sru"
"rguthrie3/DeepLearningForNLPInPytorch" -> "facebookresearch/fairseq-py"
"rguthrie3/DeepLearningForNLPInPytorch" -> "andrewt3000/DL4NLP"
"rguthrie3/DeepLearningForNLPInPytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "jcjohnson/pytorch-examples" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "OpenNMT/OpenNMT-py"
"rguthrie3/DeepLearningForNLPInPytorch" -> "EdGENetworks/attention-networks-for-classification" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "huggingface/pytorch-pretrained-BERT"
"rguthrie3/DeepLearningForNLPInPytorch" -> "hunkim/PyTorchZeroToAll" ["e"=1]
"shayneobrien/coreference-resolution" -> "kentonl/e2e-coref"
"shayneobrien/coreference-resolution" -> "mandarjoshi90/coref"
"shayneobrien/coreference-resolution" -> "ShannonAI/CorefQA"
"shayneobrien/coreference-resolution" -> "clarkkev/deep-coref"
"shayneobrien/coreference-resolution" -> "ontonotes/conll-formatted-ontonotes-5.0"
"shayneobrien/coreference-resolution" -> "lxucs/coref-hoi"
"shayneobrien/coreference-resolution" -> "kkjawz/coref-ee"
"shayneobrien/coreference-resolution" -> "conll/reference-coreference-scorers"
"shayneobrien/coreference-resolution" -> "google-research-datasets/gap-coreference"
"shayneobrien/coreference-resolution" -> "YangXuanyue/pytorch-e2e-coref"
"shayneobrien/coreference-resolution" -> "swiseman/nn_coref"
"shayneobrien/coreference-resolution" -> "cheniison/e2e-coref-pytorch"
"smilli/py-corenlp" -> "dasmith/stanford-corenlp-python"
"smilli/py-corenlp" -> "hhsecond/corenlp_pywrap"
"smilli/py-corenlp" -> "stanfordnlp/python-stanford-corenlp"
"smilli/py-corenlp" -> "Lynten/stanford-corenlp"
"smilli/py-corenlp" -> "brendano/stanford_corenlp_pywrapper"
"smilli/py-corenlp" -> "smartschat/cort" ["e"=1]
"smilli/py-corenlp" -> "interrogator/corpkit" ["e"=1]
"facebookresearch/UnsupervisedMT" -> "facebookresearch/XLM"
"facebookresearch/UnsupervisedMT" -> "artetxem/undreamt"
"facebookresearch/UnsupervisedMT" -> "facebookresearch/MUSE"
"facebookresearch/UnsupervisedMT" -> "rsennrich/subword-nmt"
"facebookresearch/UnsupervisedMT" -> "glample/fastBPE"
"facebookresearch/UnsupervisedMT" -> "artetxem/vecmap"
"facebookresearch/UnsupervisedMT" -> "facebookresearch/LASER"
"facebookresearch/UnsupervisedMT" -> "THUNLP-MT/MT-Reading-List"
"facebookresearch/UnsupervisedMT" -> "microsoft/MASS"
"facebookresearch/UnsupervisedMT" -> "EdinburghNLP/nematus"
"facebookresearch/UnsupervisedMT" -> "clab/fast_align"
"facebookresearch/UnsupervisedMT" -> "moses-smt/mosesdecoder"
"facebookresearch/UnsupervisedMT" -> "artetxem/monoses"
"facebookresearch/UnsupervisedMT" -> "marian-nmt/marian"
"facebookresearch/UnsupervisedMT" -> "salesforce/decaNLP"
"marian-nmt/marian" -> "clab/fast_align"
"marian-nmt/marian" -> "marian-nmt/marian-dev"
"marian-nmt/marian" -> "EdinburghNLP/nematus"
"marian-nmt/marian" -> "rsennrich/subword-nmt"
"marian-nmt/marian" -> "glample/fastBPE"
"marian-nmt/marian" -> "moses-smt/mosesdecoder"
"marian-nmt/marian" -> "awslabs/sockeye"
"marian-nmt/marian" -> "alvations/sacremoses"
"marian-nmt/marian" -> "bitextor/bitextor"
"marian-nmt/marian" -> "mjpost/sacreBLEU"
"marian-nmt/marian" -> "facebookresearch/UnsupervisedMT"
"marian-nmt/marian" -> "marian-nmt/marian-examples"
"marian-nmt/marian" -> "THUNLP-MT/MT-Reading-List"
"marian-nmt/marian" -> "OpenNMT/CTranslate2"
"marian-nmt/marian" -> "rsennrich/wmt16-scripts"
"yistLin/pytorch-dual-learning" -> "pcyin/pytorch_nmt"
"yistLin/pytorch-dual-learning" -> "thompsonb/DL4MT"
"yistLin/pytorch-dual-learning" -> "0uO/Dual-learning"
"openai/generating-reviews-discovering-sentiment" -> "NVIDIA/sentiment-discovery"
"openai/generating-reviews-discovering-sentiment" -> "guillitte/pytorch-sentiment-neuron"
"openai/generating-reviews-discovering-sentiment" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "ryankiros/skip-thoughts"
"openai/generating-reviews-discovering-sentiment" -> "openai/finetune-transformer-lm"
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/InferSent"
"openai/generating-reviews-discovering-sentiment" -> "yoonkim/CNN_sentence"
"openai/generating-reviews-discovering-sentiment" -> "salesforce/awd-lstm-lm"
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/fairseq-py"
"openai/generating-reviews-discovering-sentiment" -> "openai/evolution-strategies-starter" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "taolei87/sru"
"openai/generating-reviews-discovering-sentiment" -> "deepmind/rc-data" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/SentEval"
"openai/generating-reviews-discovering-sentiment" -> "bfelbo/DeepMoji"
"openai/generating-reviews-discovering-sentiment" -> "OpenNMT/OpenNMT"
"astorfi/Deep-Learning-NLP" -> "NirantK/nlp-python-deep-learning"
"astorfi/Deep-Learning-NLP" -> "brianspiering/awesome-dl4nlp"
"astorfi/Deep-Learning-NLP" -> "gaoisbest/NLP-Projects"
"astorfi/Deep-Learning-NLP" -> "Tixierae/deep_learning_NLP" ["e"=1]
"eric-mitchell/detect-gpt" -> "BurhanUlTayyab/DetectGPT"
"DSKSD/DeepNLP-models-Pytorch" -> "rguthrie3/DeepLearningForNLPInPytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "spro/practical-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "graykode/nlp-tutorial"
"DSKSD/DeepNLP-models-Pytorch" -> "FudanNLP/nlp-beginner" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "allenai/allennlp"
"DSKSD/DeepNLP-models-Pytorch" -> "PetrochukM/PyTorch-NLP"
"DSKSD/DeepNLP-models-Pytorch" -> "huggingface/pytorch-pretrained-BERT"
"DSKSD/DeepNLP-models-Pytorch" -> "codertimo/BERT-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "OpenNMT/OpenNMT-py"
"DSKSD/DeepNLP-models-Pytorch" -> "pytorch/text"
"DSKSD/DeepNLP-models-Pytorch" -> "Kyubyong/nlp_tasks"
"DSKSD/DeepNLP-models-Pytorch" -> "brightmart/text_classification"
"DSKSD/DeepNLP-models-Pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "jiesutd/NCRFpp" ["e"=1]
"harvardnlp/annotated-transformer" -> "codertimo/BERT-pytorch"
"harvardnlp/annotated-transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"harvardnlp/annotated-transformer" -> "OpenNMT/OpenNMT-py"
"harvardnlp/annotated-transformer" -> "kimiyoung/transformer-xl"
"harvardnlp/annotated-transformer" -> "huggingface/pytorch-pretrained-BERT"
"harvardnlp/annotated-transformer" -> "Kyubyong/transformer"
"harvardnlp/annotated-transformer" -> "tensorflow/tensor2tensor"
"harvardnlp/annotated-transformer" -> "zihangdai/xlnet"
"harvardnlp/annotated-transformer" -> "pytorch/fairseq"
"harvardnlp/annotated-transformer" -> "allenai/allennlp"
"harvardnlp/annotated-transformer" -> "hanxiao/bert-as-service"
"harvardnlp/annotated-transformer" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"harvardnlp/annotated-transformer" -> "google/sentencepiece"
"harvardnlp/annotated-transformer" -> "graykode/nlp-tutorial"
"harvardnlp/annotated-transformer" -> "rsennrich/subword-nmt"
"mhagiwara/100-nlp-papers" -> "dair-ai/nlp_paper_summaries"
"mhagiwara/100-nlp-papers" -> "sebastianruder/NLP-progress"
"mhagiwara/100-nlp-papers" -> "keon/awesome-nlp" ["e"=1]
"mhagiwara/100-nlp-papers" -> "graykode/nlp-tutorial"
"mhagiwara/100-nlp-papers" -> "ivan-bilan/The-NLP-Pandect"
"mhagiwara/100-nlp-papers" -> "NiuTrans/ABigSurvey"
"mhagiwara/100-nlp-papers" -> "tomohideshibata/BERT-related-papers"
"mhagiwara/100-nlp-papers" -> "allenai/allennlp"
"mhagiwara/100-nlp-papers" -> "microsoft/nlp-recipes"
"mhagiwara/100-nlp-papers" -> "huggingface/awesome-papers"
"mhagiwara/100-nlp-papers" -> "thunlp/PLMpapers"
"mhagiwara/100-nlp-papers" -> "graykode/nlp-roadmap"
"mhagiwara/100-nlp-papers" -> "jacobeisenstein/gt-nlp-class"
"mhagiwara/100-nlp-papers" -> "makcedward/nlpaug"
"mhagiwara/100-nlp-papers" -> "google/sentencepiece"
"zalandoresearch/flair" -> "huggingface/pytorch-pretrained-BERT"
"zalandoresearch/flair" -> "allenai/allennlp"
"zalandoresearch/flair" -> "facebookresearch/pytext"
"zalandoresearch/flair" -> "hanxiao/bert-as-service"
"zalandoresearch/flair" -> "zihangdai/xlnet"
"zalandoresearch/flair" -> "sebastianruder/NLP-progress"
"zalandoresearch/flair" -> "pytorch/fairseq"
"zalandoresearch/flair" -> "huggingface/pytorch-transformers"
"zalandoresearch/flair" -> "facebookresearch/LASER"
"zalandoresearch/flair" -> "kimiyoung/transformer-xl"
"zalandoresearch/flair" -> "google/sentencepiece"
"zalandoresearch/flair" -> "pytorch/text"
"zalandoresearch/flair" -> "chakki-works/doccano"
"zalandoresearch/flair" -> "stanfordnlp/stanfordnlp"
"zalandoresearch/flair" -> "facebookresearch/XLM"
"ztane/python-Levenshtein" -> "miohtama/python-Levenshtein"
"ztane/python-Levenshtein" -> "seatgeek/fuzzywuzzy"
"ztane/python-Levenshtein" -> "seatgeek/thefuzz"
"ztane/python-Levenshtein" -> "jamesturk/jellyfish"
"ztane/python-Levenshtein" -> "aflc/editdistance"
"ztane/python-Levenshtein" -> "life4/textdistance"
"ztane/python-Levenshtein" -> "WojciechMula/pyahocorasick" ["e"=1]
"ztane/python-Levenshtein" -> "roy-ht/editdistance" ["e"=1]
"ztane/python-Levenshtein" -> "dedupeio/dedupe" ["e"=1]
"ztane/python-Levenshtein" -> "Mimino666/langdetect"
"ztane/python-Levenshtein" -> "mammothb/symspellpy" ["e"=1]
"ztane/python-Levenshtein" -> "maxbachmann/RapidFuzz"
"ztane/python-Levenshtein" -> "aneesha/RAKE" ["e"=1]
"ztane/python-Levenshtein" -> "doukremt/distance"
"ztane/python-Levenshtein" -> "seperman/deepdiff" ["e"=1]
"neuml/txtai" -> "deepset-ai/haystack"
"neuml/txtai" -> "ddangelov/Top2Vec"
"neuml/txtai" -> "MaartenGr/BERTopic"
"neuml/txtai" -> "recognai/rubrix"
"neuml/txtai" -> "neuml/paperai"
"neuml/txtai" -> "MaartenGr/KeyBERT"
"neuml/txtai" -> "UKPLab/sentence-transformers"
"neuml/txtai" -> "huggingface/setfit"
"neuml/txtai" -> "qdrant/qdrant"
"neuml/txtai" -> "semi-technologies/weaviate"
"neuml/txtai" -> "flairNLP/flair"
"neuml/txtai" -> "makcedward/nlpaug"
"neuml/txtai" -> "jbesomi/texthero"
"neuml/txtai" -> "jalammar/ecco"
"neuml/txtai" -> "deepset-ai/FARM"
"adsieg/text_similarity" -> "nlptown/nlp-notebooks"
"adsieg/text_similarity" -> "adsieg/Multi_Text_Classification"
"adsieg/text_similarity" -> "TharinduDR/Simple-Sentence-Similarity"
"adsieg/text_similarity" -> "makcedward/nlp"
"adsieg/text_similarity" -> "AndriyMulyar/semantic-text-similarity" ["e"=1]
"adsieg/text_similarity" -> "amansrivastava17/lstm-siamese-text-similarity" ["e"=1]
"adsieg/text_similarity" -> "mankadronit/Automated-Essay--Scoring" ["e"=1]
"bheinzerling/bpemb" -> "rsennrich/subword-nmt"
"bheinzerling/bpemb" -> "glample/fastBPE"
"bheinzerling/bpemb" -> "google/sentencepiece"
"bheinzerling/bpemb" -> "facebookresearch/XLM"
"bheinzerling/bpemb" -> "facebookresearch/SentEval"
"bheinzerling/bpemb" -> "facebookresearch/MUSE"
"bheinzerling/bpemb" -> "facebookresearch/InferSent"
"bheinzerling/bpemb" -> "facebookresearch/LASER"
"bheinzerling/bpemb" -> "VKCOM/YouTokenToMe"
"bheinzerling/bpemb" -> "salesforce/awd-lstm-lm"
"bheinzerling/bpemb" -> "artetxem/vecmap"
"bheinzerling/bpemb" -> "HIT-SCIR/ELMoForManyLangs"
"bheinzerling/bpemb" -> "facebookresearch/UnsupervisedMT"
"bheinzerling/bpemb" -> "salesforce/cove" ["e"=1]
"bheinzerling/bpemb" -> "huggingface/pytorch-openai-transformer-lm"
"chakki-works/doccano" -> "zalandoresearch/flair"
"chakki-works/doccano" -> "Hironsan/anago" ["e"=1]
"chakki-works/doccano" -> "jiesutd/YEDDA" ["e"=1]
"chakki-works/doccano" -> "nlplab/brat" ["e"=1]
"chakki-works/doccano" -> "deepwel/Chinese-Annotator" ["e"=1]
"chakki-works/doccano" -> "HazyResearch/snorkel"
"chakki-works/doccano" -> "facebookresearch/pytext"
"chakki-works/doccano" -> "hanxiao/bert-as-service"
"chakki-works/doccano" -> "huggingface/pytorch-pretrained-BERT"
"chakki-works/doccano" -> "plasticityai/magnitude"
"chakki-works/doccano" -> "zihangdai/xlnet"
"chakki-works/doccano" -> "juand-r/entity-recognition-datasets" ["e"=1]
"chakki-works/doccano" -> "allenai/allennlp"
"chakki-works/doccano" -> "NervanaSystems/nlp-architect"
"chakki-works/doccano" -> "gnes-ai/gnes"
"epfml/sent2vec" -> "facebookresearch/InferSent"
"epfml/sent2vec" -> "swisscom/ai-research-keyphrase-extraction" ["e"=1]
"epfml/sent2vec" -> "facebookresearch/SentEval"
"epfml/sent2vec" -> "PrincetonML/SIF"
"epfml/sent2vec" -> "Separius/awesome-sentence-embedding"
"epfml/sent2vec" -> "facebookresearch/StarSpace"
"epfml/sent2vec" -> "ncbi-nlp/BioSentVec" ["e"=1]
"epfml/sent2vec" -> "ryankiros/skip-thoughts"
"epfml/sent2vec" -> "allenai/bilm-tf"
"epfml/sent2vec" -> "jhlau/doc2vec"
"epfml/sent2vec" -> "peter3125/sentence2vec"
"epfml/sent2vec" -> "oborchers/Fast_Sentence_Embeddings"
"epfml/sent2vec" -> "facebookresearch/MUSE"
"epfml/sent2vec" -> "allenai/scibert" ["e"=1]
"epfml/sent2vec" -> "eBay/Sequence-Semantic-Embedding"
"facebookresearch/LASER" -> "facebookresearch/XLM"
"facebookresearch/LASER" -> "facebookresearch/MUSE"
"facebookresearch/LASER" -> "google/sentencepiece"
"facebookresearch/LASER" -> "rsennrich/subword-nmt"
"facebookresearch/LASER" -> "facebookresearch/UnsupervisedMT"
"facebookresearch/LASER" -> "THUNLP-MT/MT-Reading-List"
"facebookresearch/LASER" -> "facebookresearch/pytext"
"facebookresearch/LASER" -> "zalandoresearch/flair"
"facebookresearch/LASER" -> "facebookresearch/SentEval"
"facebookresearch/LASER" -> "pytorch/fairseq"
"facebookresearch/LASER" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/LASER" -> "glample/fastBPE"
"facebookresearch/LASER" -> "facebookresearch/InferSent"
"facebookresearch/LASER" -> "artetxem/vecmap"
"facebookresearch/LASER" -> "clab/fast_align"
"facebookresearch/cc_net" -> "google-research/multilingual-t5"
"facebookresearch/cc_net" -> "google-research/xtreme"
"facebookresearch/cc_net" -> "facebookresearch/XLM"
"facebookresearch/cc_net" -> "facebookresearch/SentAugment"
"facebookresearch/cc_net" -> "glample/fastBPE"
"facebookresearch/cc_net" -> "facebookresearch/LASER"
"facebookresearch/cc_net" -> "facebookresearch/flores"
"facebookresearch/cc_net" -> "clab/fast_align"
"facebookresearch/cc_net" -> "alvations/sacremoses"
"facebookresearch/cc_net" -> "google-research-datasets/paws"
"facebookresearch/cc_net" -> "facebookresearch/Mask-Predict" ["e"=1]
"facebookresearch/cc_net" -> "allenai/natural-instructions" ["e"=1]
"facebookresearch/cc_net" -> "bitextor/bitextor"
"facebookresearch/cc_net" -> "mjpost/sacreBLEU"
"facebookresearch/cc_net" -> "facebookresearch/MLQA"
"hal3/ciml" -> "rasbt/deep-learning-book" ["e"=1]
"hal3/ciml" -> "clab/dynet_tutorial_examples"
"hal3/ciml" -> "dmlc/mxnet-notebooks" ["e"=1]
"hal3/ciml" -> "saiprashanths/dl-setup" ["e"=1]
"hal3/ciml" -> "jacobeisenstein/gt-nlp-class"
"hal3/ciml" -> "joanbruna/stat212b" ["e"=1]
"hal3/ciml" -> "mavam/stat-cookbook" ["e"=1]
"hal3/ciml" -> "jxieeducation/DIY-Data-Science" ["e"=1]
"hal3/ciml" -> "ben519/MLPB" ["e"=1]
"hal3/ciml" -> "neulab/nn4nlp-concepts"
"hal3/ciml" -> "markdregan/Bayesian-Modelling-in-Python" ["e"=1]
"hal3/ciml" -> "data-8/textbook" ["e"=1]
"hal3/ciml" -> "hal3/vwnlp" ["e"=1]
"hal3/ciml" -> "fonnesbeck/Bios8366" ["e"=1]
"imgarylai/bert-embedding" -> "Kyubyong/bert-token-embeddings"
"imgarylai/bert-embedding" -> "PrincetonML/SIF"
"imgarylai/bert-embedding" -> "dmlc/gluon-nlp"
"imgarylai/bert-embedding" -> "szha/KDD18-Gluon" ["e"=1]
"imgarylai/bert-embedding" -> "epfml/sent2vec"
"imgarylai/bert-embedding" -> "howardhsu/BERT-for-RRC-ABSA" ["e"=1]
"imgarylai/bert-embedding" -> "brightmart/bert_language_understanding" ["e"=1]
"jamesturk/jellyfish" -> "J535D165/recordlinkage" ["e"=1]
"jamesturk/jellyfish" -> "dedupeio/dedupe" ["e"=1]
"jamesturk/jellyfish" -> "life4/textdistance"
"jamesturk/jellyfish" -> "chartbeat-labs/textacy"
"jamesturk/jellyfish" -> "seatgeek/fuzzywuzzy"
"jamesturk/jellyfish" -> "ztane/python-Levenshtein"
"jamesturk/jellyfish" -> "datamade/parserator" ["e"=1]
"jamesturk/jellyfish" -> "datamade/probablepeople" ["e"=1]
"jamesturk/jellyfish" -> "datamade/usaddress" ["e"=1]
"jamesturk/jellyfish" -> "luozhouyang/python-string-similarity"
"jamesturk/jellyfish" -> "TeamHG-Memex/eli5" ["e"=1]
"jamesturk/jellyfish" -> "gfairchild/pyxDamerauLevenshtein"
"jamesturk/jellyfish" -> "psolin/cleanco"
"jamesturk/jellyfish" -> "plasticityai/magnitude"
"jamesturk/jellyfish" -> "orsinium/textdistance" ["e"=1]
"life4/textdistance" -> "jamesturk/jellyfish"
"life4/textdistance" -> "maxbachmann/RapidFuzz"
"life4/textdistance" -> "luozhouyang/python-string-similarity"
"life4/textdistance" -> "recognai/rubrix"
"life4/textdistance" -> "ddangelov/Top2Vec"
"life4/textdistance" -> "deepset-ai/FARM"
"life4/textdistance" -> "NorskRegnesentral/skweak"
"life4/textdistance" -> "MaartenGr/BERTopic"
"life4/textdistance" -> "MaartenGr/PolyFuzz"
"life4/textdistance" -> "jbesomi/texthero"
"life4/textdistance" -> "DerwenAI/pytextrank" ["e"=1]
"life4/textdistance" -> "huggingface/setfit"
"life4/textdistance" -> "jfilter/clean-text"
"life4/textdistance" -> "chartbeat-labs/textacy"
"life4/textdistance" -> "webis-de/small-text"
"microsoft/BlingFire" -> "facebookresearch/cc_net"
"nlptown/nlp-notebooks" -> "adsieg/text_similarity"
"nlptown/nlp-notebooks" -> "makcedward/nlp"
"nlptown/nlp-notebooks" -> "PrincetonML/SIF"
"nlptown/nlp-notebooks" -> "oborchers/Fast_Sentence_Embeddings"
"nlptown/nlp-notebooks" -> "kavgan/nlp-in-practice"
"nlptown/nlp-notebooks" -> "susanli2016/NLP-with-Python"
"nlptown/nlp-notebooks" -> "NirantK/nlp-python-deep-learning"
"nlptown/nlp-notebooks" -> "pengshuang/Text-Similarity" ["e"=1]
"nlptown/nlp-notebooks" -> "msgi/nlp-journey" ["e"=1]
"nlptown/nlp-notebooks" -> "llhthinker/NLP-Papers"
"nlptown/nlp-notebooks" -> "joosthub/PyTorchNLPBook"
"nlptown/nlp-notebooks" -> "yanqiangmiffy/sentence-similarity" ["e"=1]
"nlptown/nlp-notebooks" -> "ddangelov/Top2Vec"
"nlptown/nlp-notebooks" -> "ElizaLo/NLP-Natural-Language-Processing" ["e"=1]
"nlptown/nlp-notebooks" -> "songyingxin/Bert-TextClassification" ["e"=1]
"nshepperd/gpt-2" -> "minimaxir/gpt-2-simple"
"nshepperd/gpt-2" -> "ak9250/gpt-2-colab"
"nshepperd/gpt-2" -> "lopuhin/transformer-lm"
"nshepperd/gpt-2" -> "openai/gpt-2-output-dataset"
"nshepperd/gpt-2" -> "graykode/gpt-2-Pytorch"
"nshepperd/gpt-2" -> "huggingface/transfer-learning-conv-ai"
"nshepperd/gpt-2" -> "ConnorJL/GPT2" ["e"=1]
"nshepperd/gpt-2" -> "openai/gpt-2"
"nshepperd/gpt-2" -> "shawwn/gpt-2"
"nshepperd/gpt-2" -> "minimaxir/aitextgen"
"nshepperd/gpt-2" -> "akanyaani/gpt-2-tensorflow2.0"
"nshepperd/gpt-2" -> "jcpeterson/openwebtext"
"nshepperd/gpt-2" -> "minimaxir/gpt-2-cloud-run"
"nshepperd/gpt-2" -> "rowanz/grover"
"nshepperd/gpt-2" -> "salesforce/ctrl"
"openai/gpt-2-output-dataset" -> "openai/gpt-2"
"openai/gpt-2-output-dataset" -> "nshepperd/gpt-2"
"openai/gpt-2-output-dataset" -> "minimaxir/gpt-2-simple"
"openai/gpt-2-output-dataset" -> "rowanz/grover"
"openai/gpt-2-output-dataset" -> "microsoft/DialoGPT" ["e"=1]
"openai/gpt-2-output-dataset" -> "salesforce/ctrl"
"openai/gpt-2-output-dataset" -> "HendrikStrobelt/detecting-fake-text"
"openai/gpt-2-output-dataset" -> "graykode/gpt-2-Pytorch"
"openai/gpt-2-output-dataset" -> "huggingface/pytorch-openai-transformer-lm"
"openai/gpt-2-output-dataset" -> "google-research/text-to-text-transfer-transformer"
"openai/gpt-2-output-dataset" -> "jcpeterson/openwebtext"
"openai/gpt-2-output-dataset" -> "kimiyoung/transformer-xl"
"openai/gpt-2-output-dataset" -> "NVIDIA/Megatron-LM" ["e"=1]
"openai/gpt-2-output-dataset" -> "openai/finetune-transformer-lm"
"openai/gpt-2-output-dataset" -> "ConnorJL/GPT2" ["e"=1]
"uber-research/PPLM" -> "salesforce/ctrl"
"uber-research/PPLM" -> "XiangLi1999/Diffusion-LM" ["e"=1]
"uber-research/PPLM" -> "THUNLP-MT/TG-Reading-List"
"uber-research/PPLM" -> "fuzhenxin/Style-Transfer-in-Text"
"uber-research/PPLM" -> "XiangLi1999/PrefixTuning" ["e"=1]
"uber-research/PPLM" -> "yxuansu/SimCTG" ["e"=1]
"uber-research/PPLM" -> "salesforce/GeDi"
"uber-research/PPLM" -> "Maluuba/nlg-eval" ["e"=1]
"uber-research/PPLM" -> "ChunyuanLI/Optimus"
"uber-research/PPLM" -> "Tiiiger/bert_score"
"uber-research/PPLM" -> "huggingface/transfer-learning-conv-ai"
"uber-research/PPLM" -> "rikdz/GraphWriter"
"uber-research/PPLM" -> "timoschick/pet" ["e"=1]
"uber-research/PPLM" -> "google-research/electra"
"uber-research/PPLM" -> "minimaxir/gpt-2-keyword-generation"
"nickwalton/AIDungeon" -> "minimaxir/ctrl-gce"
"minimaxir/gpt-2-cloud-run" -> "minimaxir/twitter-cloud-run"
"minimaxir/gpt-2-cloud-run" -> "ak9250/gpt-2-colab"
"minimaxir/gpt-2-cloud-run" -> "minimaxir/gpt-2-simple"
"minimaxir/gpt-2-cloud-run" -> "minimaxir/gpt-2-keyword-generation"
"minimaxir/gpt-2-cloud-run" -> "kylemcdonald/gpt-2-poetry"
"minimaxir/gpt-2-cloud-run" -> "jingw222/gpt2-app"
"minimaxir/gpt-2-cloud-run" -> "t04glovern/gpt-2-flask-api"
"shreyashankar/gpt3-sandbox" -> "elyase/awesome-gpt3"
"shreyashankar/gpt3-sandbox" -> "minimaxir/gpt-3-experiments"
"shreyashankar/gpt3-sandbox" -> "openai/gpt-3"
"shreyashankar/gpt3-sandbox" -> "bhattbhavesh91/gpt-3-simple-tutorial"
"shreyashankar/gpt3-sandbox" -> "mrdbourke/machine-learning-roadmap" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "surya-veer/movement-tracking" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "EleutherAI/gpt-neo" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "mikhail-bot/awesome-gpt3"
"shreyashankar/gpt3-sandbox" -> "karpathy/minGPT" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "bkane1/gpt3-instruct-sandbox"
"shreyashankar/gpt3-sandbox" -> "minimaxir/gpt-2-simple"
"shreyashankar/gpt3-sandbox" -> "jbesomi/texthero"
"shreyashankar/gpt3-sandbox" -> "openai/gpt-2"
"shreyashankar/gpt3-sandbox" -> "jerryjliu/gpt_index" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"apache/opennlp" -> "stanfordnlp/CoreNLP"
"apache/opennlp" -> "apache/tika" ["e"=1]
"apache/opennlp" -> "mimno/Mallet"
"apache/opennlp" -> "dkpro/dkpro-core" ["e"=1]
"apache/opennlp" -> "dbpedia/extraction-framework" ["e"=1]
"apache/opennlp" -> "apache/jena" ["e"=1]
"apache/opennlp" -> "FudanNLP/fnlp" ["e"=1]
"apache/opennlp" -> "apache/mahout" ["e"=1]
"apache/opennlp" -> "CogComp/cogcomp-nlp"
"apache/opennlp" -> "apache/giraph" ["e"=1]
"apache/opennlp" -> "apache/lucene-solr" ["e"=1]
"apache/opennlp" -> "deeplearning4j/dl4j-examples" ["e"=1]
"apache/opennlp" -> "apache/nutch" ["e"=1]
"apache/opennlp" -> "NLPchina/Word2VEC_java" ["e"=1]
"apache/opennlp" -> "apache/drill" ["e"=1]
"BurhanUlTayyab/GPTZero" -> "BurhanUlTayyab/DetectGPT"
"eukaryote31/openwebtext" -> "jcpeterson/openwebtext"
"graykode/gpt-2-Pytorch" -> "affjljoo3581/GPT2"
"graykode/gpt-2-Pytorch" -> "nshepperd/gpt-2"
"graykode/gpt-2-Pytorch" -> "minimaxir/gpt-2-simple"
"graykode/gpt-2-Pytorch" -> "akanyaani/gpt-2-tensorflow2.0"
"graykode/gpt-2-Pytorch" -> "graykode/xlnet-Pytorch"
"graykode/gpt-2-Pytorch" -> "openai/gpt-2-output-dataset"
"graykode/gpt-2-Pytorch" -> "ConnorJL/GPT2" ["e"=1]
"graykode/gpt-2-Pytorch" -> "Morizeyao/Decoders-Chinese-TF2.0" ["e"=1]
"graykode/gpt-2-Pytorch" -> "minimaxir/gpt-2-cloud-run"
"graykode/gpt-2-Pytorch" -> "huggingface/pytorch-pretrained-BERT"
"graykode/gpt-2-Pytorch" -> "fuzhenxin/Style-Transfer-in-Text"
"graykode/gpt-2-Pytorch" -> "huggingface/pytorch-openai-transformer-lm"
"graykode/gpt-2-Pytorch" -> "uber-research/PPLM"
"graykode/gpt-2-Pytorch" -> "eukaryote31/openwebtext"
"graykode/gpt-2-Pytorch" -> "ak9250/gpt-2-colab"
"stanfordnlp/cs224n-winter17-notes" -> "hankcs/CS224n"
"stanfordnlp/cs224n-winter17-notes" -> "learning511/cs224n-learning-camp"
"stanfordnlp/cs224n-winter17-notes" -> "rguthrie3/DeepLearningForNLPInPytorch"
"stanfordnlp/cs224n-winter17-notes" -> "DSKSD/DeepNLP-models-Pytorch"
"stanfordnlp/cs224n-winter17-notes" -> "chiphuyen/tf-stanford-tutorials" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "spro/practical-pytorch"
"stanfordnlp/cs224n-winter17-notes" -> "cgpotts/cs224u"
"stanfordnlp/cs224n-winter17-notes" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"stanfordnlp/cs224n-winter17-notes" -> "google/seq2seq"
"stanfordnlp/cs224n-winter17-notes" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "pytorch/text"
"stanfordnlp/cs224n-winter17-notes" -> "jacobeisenstein/gt-nlp-class"
"stanfordnlp/cs224n-winter17-notes" -> "kjw0612/awesome-rnn" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "dennybritz/chatbot-retrieval" ["e"=1]
"brandomr/document_cluster" -> "utkuozbulak/unsupervised-learning-document-clustering"
"brandomr/document_cluster" -> "arnab64/textclusteringDBSCAN"
"brandomr/document_cluster" -> "bmabey/pyLDAvis"
"brandomr/document_cluster" -> "olafmaas/hackdelft"
"brandomr/document_cluster" -> "jseabold/depy" ["e"=1]
"brandomr/document_cluster" -> "jayantj/w2vec-similarity"
"rowanz/grover" -> "salesforce/ctrl"
"rowanz/grover" -> "HendrikStrobelt/detecting-fake-text"
"rowanz/grover" -> "KaiDMML/FakeNewsNet" ["e"=1]
"rowanz/grover" -> "huggingface/naacl_transfer_learning_tutorial"
"rowanz/grover" -> "openai/gpt-2-output-dataset"
"rowanz/grover" -> "entitize/Fakeddit" ["e"=1]
"rowanz/grover" -> "facebookresearch/XLM"
"rowanz/grover" -> "nelson-liu/contextual-repr-analysis"
"rowanz/grover" -> "uber-research/PPLM"
"rowanz/grover" -> "sumeetkr/AwesomeFakeNews" ["e"=1]
"rowanz/grover" -> "google-research/bleurt"
"rowanz/grover" -> "minimaxir/gpt-2-simple"
"rowanz/grover" -> "jcpeterson/openwebtext"
"rowanz/grover" -> "huggingface/hmtl"
"rowanz/grover" -> "sannykim/transformers"
"minimaxir/gpt-3-experiments" -> "OvidijusParsiunas/myvision"
"minimaxir/gpt-3-experiments" -> "maraoz/gpt-scrolls"
"minimaxir/gpt-3-experiments" -> "mikhail-bot/awesome-gpt3"
"minimaxir/gpt-3-experiments" -> "sevazhidkov/prompts-ai"
"minimaxir/gpt-3-experiments" -> "sw-yx/gpt3-list"
"minimaxir/gpt-3-experiments" -> "shreyashankar/gpt3-sandbox"
"minimaxir/gpt-3-experiments" -> "minimaxir/gpt-3-client"
"minimaxir/gpt-3-experiments" -> "semiosis/prompts"
"minimaxir/gpt-3-experiments" -> "minimaxir/download-tweets-ai-text-gen"
"minimaxir/gpt-3-experiments" -> "minimaxir/aitextgen"
"minimaxir/gpt-3-experiments" -> "belay-labs/gpt-explorer"
"minimaxir/gpt-3-experiments" -> "elyase/awesome-gpt3"
"minimaxir/gpt-3-experiments" -> "vuejs/docs-next" ["e"=1]
"minimaxir/gpt-3-experiments" -> "minimaxir/gpt-2-simple"
"semi-technologies/weaviate" -> "qdrant/qdrant"
"semi-technologies/weaviate" -> "deepset-ai/haystack"
"semi-technologies/weaviate" -> "vdaas/vald" ["e"=1]
"semi-technologies/weaviate" -> "recognai/rubrix"
"semi-technologies/weaviate" -> "neuml/txtai"
"semi-technologies/weaviate" -> "ddangelov/Top2Vec"
"semi-technologies/weaviate" -> "milvus-io/milvus" ["e"=1]
"semi-technologies/weaviate" -> "MaartenGr/BERTopic"
"semi-technologies/weaviate" -> "vespa-engine/vespa" ["e"=1]
"semi-technologies/weaviate" -> "axa-group/Parsr"
"semi-technologies/weaviate" -> "koursaros-ai/nboost"
"semi-technologies/weaviate" -> "frutik/awesome-search" ["e"=1]
"semi-technologies/weaviate" -> "UKPLab/sentence-transformers"
"semi-technologies/weaviate" -> "linkedin/detext"
"semi-technologies/weaviate" -> "jina-ai/jina" ["e"=1]
"semiosis/prompts" -> "semiosis/pen.el" ["e"=1]
"semiosis/prompts" -> "maraoz/gpt-scrolls"
"semiosis/prompts" -> "sevazhidkov/prompts-ai"
"semiosis/prompts" -> "socketteer/loom" ["e"=1]
"sevazhidkov/prompts-ai" -> "semiosis/prompts"
"sevazhidkov/prompts-ai" -> "krrishdholakia/betterprompt" ["e"=1]
"sevazhidkov/prompts-ai" -> "giosilvi/GPT-Prompter" ["e"=1]
"sevazhidkov/prompts-ai" -> "mikhail-bot/awesome-gpt3"
"sevazhidkov/prompts-ai" -> "oughtinc/ice" ["e"=1]
"sevazhidkov/prompts-ai" -> "minimaxir/gpt-3-experiments"
"sevazhidkov/prompts-ai" -> "OpenBioLink/ThoughtSource" ["e"=1]
"jind11/TextFooler" -> "thunlp/OpenAttack"
"jind11/TextFooler" -> "LinyangLee/BERT-Attack"
"jind11/TextFooler" -> "nesl/nlp_adversarial_examples"
"jind11/TextFooler" -> "thunlp/TAADpapers"
"jind11/TextFooler" -> "QData/TextAttack"
"jind11/TextFooler" -> "JHL-HUST/PWWS"
"jind11/TextFooler" -> "zhuchen03/FreeLB"
"jind11/TextFooler" -> "thunlp/SememePSO-Attack"
"jind11/TextFooler" -> "Eric-Wallace/universal-triggers"
"jind11/TextFooler" -> "robinjia/certified-word-sub"
"jind11/TextFooler" -> "miyyer/scpn"
"jind11/TextFooler" -> "marcotcr/sears"
"jind11/TextFooler" -> "nmrksic/counter-fitting" ["e"=1]
"jind11/TextFooler" -> "deepmind/interval-bound-propagation" ["e"=1]
"jind11/TextFooler" -> "lushleaf/Structure-free-certified-NLP"
"upmasked/number-verifier" -> "Nick-Gottschlich/Social-Amnesia" ["e"=1]
"upmasked/number-verifier" -> "luspr/awesome-ml-courses" ["e"=1]
"upmasked/number-verifier" -> "lidangzzz/hedgehog-lab"
"upmasked/number-verifier" -> "transitive-bullshit/sms-number-verifier" ["e"=1]
"upmasked/number-verifier" -> "LetsUpgrade/AI-ML-July-2020" ["e"=1]
"upmasked/number-verifier" -> "NerdyPepper/dijo" ["e"=1]
"upmasked/number-verifier" -> "OvidijusParsiunas/myvision"
"upmasked/number-verifier" -> "covidgreen/covid-green-app" ["e"=1]
"upmasked/number-verifier" -> "vector-im/riotX-android" ["e"=1]
"upmasked/number-verifier" -> "TheFrenchGhosty/TheFrenchGhostys-YouTube-DL-Archivist-Scripts" ["e"=1]
"upmasked/number-verifier" -> "vuejs/docs-next" ["e"=1]
"upmasked/number-verifier" -> "pedrolemoz/MagicMagnet-Python" ["e"=1]
"dasmith/stanford-corenlp-python" -> "smilli/py-corenlp"
"dasmith/stanford-corenlp-python" -> "brendano/stanford_corenlp_pywrapper"
"dasmith/stanford-corenlp-python" -> "japerk/nltk-trainer" ["e"=1]
"dasmith/stanford-corenlp-python" -> "piskvorky/gensim" ["e"=1]
"dasmith/stanford-corenlp-python" -> "Wordseer/stanford-corenlp-python"
"dasmith/stanford-corenlp-python" -> "brendano/ark-tweet-nlp" ["e"=1]
"dasmith/stanford-corenlp-python" -> "erickrf/nlpnet" ["e"=1]
"dasmith/stanford-corenlp-python" -> "klb3713/sentence2vec"
"dasmith/stanford-corenlp-python" -> "machinalis/iepy" ["e"=1]
"dasmith/stanford-corenlp-python" -> "relwell/stanford-corenlp-python"
"dasmith/stanford-corenlp-python" -> "knowitall/reverb" ["e"=1]
"dasmith/stanford-corenlp-python" -> "turian/neural-language-model" ["e"=1]
"dasmith/stanford-corenlp-python" -> "knowitall/openie" ["e"=1]
"dasmith/stanford-corenlp-python" -> "biplab-iitb/practNLPTools" ["e"=1]
"dasmith/stanford-corenlp-python" -> "IndicoDataSolutions/Passage" ["e"=1]
"minimaxir/aitextgen" -> "minimaxir/gpt-2-simple"
"minimaxir/aitextgen" -> "minimaxir/textgenrnn"
"minimaxir/aitextgen" -> "nshepperd/gpt-2"
"minimaxir/aitextgen" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/aitextgen" -> "Xirider/finetune-gpt2xl" ["e"=1]
"minimaxir/aitextgen" -> "EleutherAI/gpt-neo" ["e"=1]
"minimaxir/aitextgen" -> "minimaxir/gpt-2-keyword-generation"
"minimaxir/aitextgen" -> "minimaxir/gpt-3-experiments"
"minimaxir/aitextgen" -> "EleutherAI/gpt-neox" ["e"=1]
"minimaxir/aitextgen" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"minimaxir/aitextgen" -> "neuml/txtai"
"minimaxir/aitextgen" -> "minimaxir/download-tweets-ai-text-gen"
"minimaxir/aitextgen" -> "microsoft/DialoGPT" ["e"=1]
"minimaxir/aitextgen" -> "uber-research/PPLM"
"minimaxir/aitextgen" -> "graykode/gpt-2-Pytorch"
"pemistahl/lingua-py" -> "adbar/trafilatura" ["e"=1]
"pemistahl/lingua-py" -> "HLasse/TextDescriptives"
"pemistahl/lingua-py" -> "argilla-io/argilla"
"pemistahl/lingua-py" -> "huggingface/setfit"
"pemistahl/lingua-py" -> "huggingface/optimum" ["e"=1]
"pemistahl/lingua-py" -> "Mimino666/langdetect"
"pemistahl/lingua-py" -> "R1j1t/contextualSpellCheck" ["e"=1]
"pemistahl/lingua-py" -> "HKUNLP/instructor-embedding" ["e"=1]
"pemistahl/lingua-py" -> "adbar/simplemma" ["e"=1]
"bmabey/pyLDAvis" -> "cemoody/lda2vec"
"bmabey/pyLDAvis" -> "cpsievert/LDAvis" ["e"=1]
"bmabey/pyLDAvis" -> "JasonKessler/scattertext"
"bmabey/pyLDAvis" -> "chartbeat-labs/textacy"
"bmabey/pyLDAvis" -> "ddangelov/Top2Vec"
"bmabey/pyLDAvis" -> "RaRe-Technologies/gensim"
"bmabey/pyLDAvis" -> "lda-project/lda"
"bmabey/pyLDAvis" -> "TeamHG-Memex/eli5" ["e"=1]
"bmabey/pyLDAvis" -> "MaartenGr/BERTopic"
"bmabey/pyLDAvis" -> "vi3k6i5/GuidedLDA"
"bmabey/pyLDAvis" -> "DistrictDataLabs/yellowbrick" ["e"=1]
"bmabey/pyLDAvis" -> "piskvorky/gensim" ["e"=1]
"bmabey/pyLDAvis" -> "bigartm/bigartm" ["e"=1]
"bmabey/pyLDAvis" -> "zalandoresearch/flair"
"bmabey/pyLDAvis" -> "marcotcr/lime" ["e"=1]
"ines/spacy-course" -> "ines/course-starter-python" ["e"=1]
"ines/spacy-course" -> "chartbeat-labs/textacy"
"ines/spacy-course" -> "ines/course-starter-r" ["e"=1]
"ines/spacy-course" -> "explosion/projects"
"ines/spacy-course" -> "explosion/thinc"
"ines/spacy-course" -> "allenai/scispacy" ["e"=1]
"ines/spacy-course" -> "huggingface/neuralcoref"
"ines/spacy-course" -> "explosion/spacy-transformers"
"ines/spacy-course" -> "zalandoresearch/flair"
"ines/spacy-course" -> "explosion/sense2vec"
"ines/spacy-course" -> "fastai/course-nlp"
"ines/spacy-course" -> "facebookresearch/pytext"
"ines/spacy-course" -> "microsoft/nlp"
"ines/spacy-course" -> "microsoft/nlp-recipes"
"ines/spacy-course" -> "chakki-works/doccano"
"EricFillion/happy-transformer" -> "asahi417/tner"
"EricFillion/happy-transformer" -> "neuspell/neuspell" ["e"=1]
"EricFillion/happy-transformer" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" ["e"=1]
"EricFillion/happy-transformer" -> "Xirider/finetune-gpt2xl" ["e"=1]
"EricFillion/happy-transformer" -> "Pandora-Intelligence/concise-concepts"
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/text-analytics-with-python"
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/hands-on-transfer-learning-with-python"
"dipanjanS/practical-machine-learning-with-python" -> "susanli2016/Machine-Learning-with-Python" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "tirthajyoti/Machine-Learning-with-Python" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "susanli2016/NLP-with-Python"
"dipanjanS/practical-machine-learning-with-python" -> "hundredblocks/concrete_NLP_tutorial"
"dipanjanS/practical-machine-learning-with-python" -> "rasbt/python-machine-learning-book-2nd-edition" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "alicezheng/feature-engineering-book" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "rasbt/mlxtend" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/practical-machine-learning-with-python" -> "WillKoehrsen/Data-Analysis" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/practical-machine-learning-with-python" -> "Featuretools/featuretools" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "justmarkham/scikit-learn-videos" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "microsoft/DialoGPT" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "SivilTaram/Persona-Dialogue-Generation" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "atselousov/transformer_chatbot" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "PolyAI-LDN/conversational-datasets" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "thu-coai/CDial-GPT" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "budzianowski/multiwoz" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "facebookresearch/ParlAI"
"huggingface/transfer-learning-conv-ai" -> "uber-research/PPLM"
"huggingface/transfer-learning-conv-ai" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/transfer-learning-conv-ai" -> "yangjianxin1/GPT2-chitchat" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "huggingface/naacl_transfer_learning_tutorial"
"huggingface/transfer-learning-conv-ai" -> "Maluuba/nlg-eval" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "DeepPavlov/convai" ["e"=1]
"huggingface/transfer-learning-conv-ai" -> "salesforce/ctrl"
"huggingface/transfer-learning-conv-ai" -> "huggingface/awesome-papers"
"minimaxir/download-tweets-ai-text-gen" -> "minimaxir/twitter-cloud-run"
"minimaxir/download-tweets-ai-text-gen" -> "sdelgadoc/download-tweets-ai-text-gen-plus"
"odashi/latexify_py" -> "connorferster/handcalcs" ["e"=1]
"odashi/latexify_py" -> "williamFalcon/pytorch-lightning" ["e"=1]
"odashi/latexify_py" -> "vahidk/EffectivePyTorch" ["e"=1]
"odashi/latexify_py" -> "facebookresearch/hiplot" ["e"=1]
"odashi/latexify_py" -> "PAIR-code/lit"
"odashi/latexify_py" -> "google/objax" ["e"=1]
"odashi/latexify_py" -> "dair-ai/nlp_paper_summaries"
"odashi/latexify_py" -> "google-research/arxiv-latex-cleaner" ["e"=1]
"odashi/latexify_py" -> "penrose/penrose" ["e"=1]
"odashi/latexify_py" -> "digantamisra98/Mish" ["e"=1]
"odashi/latexify_py" -> "arogozhnikov/einops" ["e"=1]
"odashi/latexify_py" -> "microsoft/hummingbird" ["e"=1]
"odashi/latexify_py" -> "emeryberger/scalene" ["e"=1]
"odashi/latexify_py" -> "Smerity/sha-rnn"
"odashi/latexify_py" -> "garrettj403/SciencePlots" ["e"=1]
"axa-group/Parsr" -> "deepset-ai/haystack"
"axa-group/Parsr" -> "recognai/rubrix"
"axa-group/Parsr" -> "Layout-Parser/layout-parser" ["e"=1]
"axa-group/Parsr" -> "MaartenGr/BERTopic"
"axa-group/Parsr" -> "neuml/txtai"
"axa-group/Parsr" -> "online-ml/river" ["e"=1]
"axa-group/Parsr" -> "deepchecks/deepchecks" ["e"=1]
"axa-group/Parsr" -> "ddangelov/Top2Vec"
"axa-group/Parsr" -> "flairNLP/flair"
"axa-group/Parsr" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"axa-group/Parsr" -> "cleanlab/cleanlab" ["e"=1]
"axa-group/Parsr" -> "Nixtla/statsforecast" ["e"=1]
"axa-group/Parsr" -> "orchest/orchest" ["e"=1]
"axa-group/Parsr" -> "holoviz/panel" ["e"=1]
"axa-group/Parsr" -> "ploomber/ploomber" ["e"=1]
"nyu-dl/bert-gen" -> "uwnlp/piqa" ["e"=1]
"nyu-dl/bert-gen" -> "harvardnlp/data2text" ["e"=1]
"nyu-dl/bert-gen" -> "momohuang/FlowQA" ["e"=1]
"tmikolov/word2vec" -> "dav/word2vec"
"tmikolov/word2vec" -> "danielfrg/word2vec"
"tmikolov/word2vec" -> "chrisjmccormick/word2vec_commented"
"tmikolov/word2vec" -> "stanfordnlp/GloVe"
"tmikolov/word2vec" -> "dmlc/ps-lite" ["e"=1]
"tmikolov/word2vec" -> "wzhe06/Reco-papers" ["e"=1]
"tmikolov/word2vec" -> "wzhe06/Ad-papers" ["e"=1]
"tmikolov/word2vec" -> "aditya-grover/node2vec" ["e"=1]
"tmikolov/word2vec" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"tmikolov/word2vec" -> "zhougr1993/DeepInterestNetwork" ["e"=1]
"tmikolov/word2vec" -> "alibaba/euler" ["e"=1]
"tmikolov/word2vec" -> "allenai/bilm-tf"
"tmikolov/word2vec" -> "attardi/wikiextractor"
"tmikolov/word2vec" -> "guestwalk/kaggle-2014-criteo" ["e"=1]
"tmikolov/word2vec" -> "phanein/deepwalk" ["e"=1]
"ddangelov/Top2Vec" -> "MaartenGr/BERTopic"
"ddangelov/Top2Vec" -> "MilaNLProc/contextualized-topic-models"
"ddangelov/Top2Vec" -> "MaartenGr/KeyBERT"
"ddangelov/Top2Vec" -> "UKPLab/sentence-transformers"
"ddangelov/Top2Vec" -> "MIND-Lab/OCTIS"
"ddangelov/Top2Vec" -> "deepset-ai/haystack"
"ddangelov/Top2Vec" -> "neuml/txtai"
"ddangelov/Top2Vec" -> "PAIR-code/lit"
"ddangelov/Top2Vec" -> "recognai/rubrix"
"ddangelov/Top2Vec" -> "flairNLP/flair"
"ddangelov/Top2Vec" -> "ivan-bilan/The-NLP-Pandect"
"ddangelov/Top2Vec" -> "NorskRegnesentral/skweak"
"ddangelov/Top2Vec" -> "huggingface/setfit"
"ddangelov/Top2Vec" -> "JasonKessler/scattertext"
"ddangelov/Top2Vec" -> "jalammar/ecco"
"NiuTrans/CNSurvey" -> "NiuTrans/LanguageCodes"
"NiuTrans/CNSurvey" -> "NiuTrans/ABigSurvey"
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/CNSurvey" -> "NiuTrans/NASPapers"
"NiuTrans/CNSurvey" -> "SimmerChan/corpus" ["e"=1]
"NiuTrans/CNSurvey" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"NiuTrans/CNSurvey" -> "NiuTrans/MT-paper-lists"
"NiuTrans/CNSurvey" -> "thunlp/SOS4NLP" ["e"=1]
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTensor"
"NiuTrans/CNSurvey" -> "KaiyuanGao/AI-Surveys" ["e"=1]
"NiuTrans/CNSurvey" -> "NiuTrans/MTVenues"
"NiuTrans/CNSurvey" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"NiuTrans/CNSurvey" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/CNSurvey" -> "leerumor/nlp_tutorial" ["e"=1]
"neuml/tldrstory" -> "neuml/codequestion"
"neuml/tldrstory" -> "neuml/paperetl"
"neuml/tldrstory" -> "neuml/paperai"
"harvardnlp/namedtensor" -> "ofnote/tsalib"
"harvardnlp/namedtensor" -> "harvardnlp/pytorch-struct"
"cocoxu/Shakespeare" -> "harsh19/Shakespearizing-Modern-English"
"CSTR-Edinburgh/mlpractical" -> "michael-camilleri/IAML2018"
"CSTR-Edinburgh/mlpractical" -> "raharrasy/RL2019-BaseCodes"
"CSTR-Edinburgh/mlpractical" -> "MirunaClinciu/DME"
"CSTR-Edinburgh/mlpractical" -> "vsee/uoe_programmingclub"
"CSTR-Edinburgh/mlpractical" -> "agamemnonc/iaml"
"CSTR-Edinburgh/mlpractical" -> "JamesOwers/iaml2017"
"CSTR-Edinburgh/mlpractical" -> "conormdurkan/mlpr-tutorials"
"CSTR-Edinburgh/mlpractical" -> "EdinburghNLP/nematus"
"CSTR-Edinburgh/mlpractical" -> "raharrasy/HFO"
"CSTR-Edinburgh/mlpractical" -> "JZ95/RLPractical"
"CSTR-Edinburgh/mlpractical" -> "bfranke1973/IRR-Template"
"earthspecies/from_zero_to_DSP" -> "earthspecies/birdcall"
"earthspecies/from_zero_to_DSP" -> "earthspecies/freesound"
"neuml/codequestion" -> "neuml/tldrstory"
"neuml/codequestion" -> "neuml/paperai"
"neuml/codequestion" -> "neuml/txtai"
"RaRe-Technologies/gensim-data" -> "commonsense/conceptnet-numberbatch"
"RaRe-Technologies/gensim-data" -> "RaRe-Technologies/gensim"
"RaRe-Technologies/gensim-data" -> "alexandres/lexvec" ["e"=1]
"RaRe-Technologies/gensim-data" -> "strongio/keras-elmo" ["e"=1]
"RaRe-Technologies/gensim-data" -> "stanfordnlp/GloVe"
"RaRe-Technologies/gensim-data" -> "ncbi-nlp/BioSentVec" ["e"=1]
"RaRe-Technologies/gensim-data" -> "facebookresearch/InferSent"
"RaRe-Technologies/gensim-data" -> "facebookresearch/SentEval"
"RaRe-Technologies/gensim-data" -> "Hironsan/awesome-embedding-models"
"RaRe-Technologies/gensim-data" -> "PrincetonML/SIF"
"RaRe-Technologies/gensim-data" -> "3Top/word2vec-api"
"RaRe-Technologies/gensim-data" -> "maciejkula/glove-python"
"RaRe-Technologies/gensim-data" -> "allenai/bilm-tf"
"RaRe-Technologies/gensim-data" -> "chartbeat-labs/textacy"
"RaRe-Technologies/gensim-data" -> "explosion/projects"
"HazyResearch/flyingsquid" -> "microsoft/ASTRA"
"HazyResearch/flyingsquid" -> "autonlab/weasel"
"HazyResearch/flyingsquid" -> "HazyResearch/epoxy"
"HazyResearch/flyingsquid" -> "NorskRegnesentral/skweak"
"Microsoft/BlingFire" -> "ines/spacy-course"
"Microsoft/BlingFire" -> "Microsoft/pyright" ["e"=1]
"Microsoft/BlingFire" -> "zalandoresearch/flair"
"Microsoft/BlingFire" -> "rhasspy/rapidfuzz" ["e"=1]
"Microsoft/BlingFire" -> "boyerjohn/rapidstring" ["e"=1]
"Microsoft/BlingFire" -> "microsoft/SPTAG" ["e"=1]
"Microsoft/BlingFire" -> "microsoft/nlp"
"Microsoft/BlingFire" -> "facebookresearch/XLM"
"Microsoft/BlingFire" -> "Microsoft/BuildXL"
"Microsoft/BlingFire" -> "allenai/beaker" ["e"=1]
"Microsoft/BlingFire" -> "TheBerkin/rant" ["e"=1]
"Microsoft/BlingFire" -> "microsoft/interpret" ["e"=1]
"Microsoft/BlingFire" -> "chakki-works/doccano"
"Microsoft/BlingFire" -> "NervanaSystems/nlp-architect"
"Microsoft/BlingFire" -> "facebookresearch/pytext"
"JohnSnowLabs/spark-nlp" -> "JohnSnowLabs/spark-nlp-workshop"
"JohnSnowLabs/spark-nlp" -> "flairNLP/flair"
"JohnSnowLabs/spark-nlp" -> "stanfordnlp/stanza"
"JohnSnowLabs/spark-nlp" -> "databricks/spark-deep-learning" ["e"=1]
"JohnSnowLabs/spark-nlp" -> "Azure/mmlspark" ["e"=1]
"JohnSnowLabs/spark-nlp" -> "UKPLab/sentence-transformers"
"JohnSnowLabs/spark-nlp" -> "PAIR-code/lit"
"JohnSnowLabs/spark-nlp" -> "yahoo/TensorFlowOnSpark" ["e"=1]
"JohnSnowLabs/spark-nlp" -> "MaartenGr/BERTopic"
"JohnSnowLabs/spark-nlp" -> "makcedward/nlpaug"
"JohnSnowLabs/spark-nlp" -> "databricks/koalas" ["e"=1]
"JohnSnowLabs/spark-nlp" -> "microsoft/nlp-recipes"
"JohnSnowLabs/spark-nlp" -> "allenai/allennlp"
"JohnSnowLabs/spark-nlp" -> "ddangelov/Top2Vec"
"JohnSnowLabs/spark-nlp" -> "JohnSnowLabs/nlu"
"VKCOM/YouTokenToMe" -> "vlarine/transformers-ru" ["e"=1]
"VKCOM/YouTokenToMe" -> "glample/fastBPE"
"VKCOM/YouTokenToMe" -> "bheinzerling/bpemb"
"VKCOM/YouTokenToMe" -> "DanAnastasyev/DeepNLP-Course" ["e"=1]
"VKCOM/YouTokenToMe" -> "google/sentencepiece"
"VKCOM/YouTokenToMe" -> "facebookresearch/XLM"
"VKCOM/YouTokenToMe" -> "mjpost/sacreBLEU"
"VKCOM/YouTokenToMe" -> "rsennrich/subword-nmt"
"VKCOM/YouTokenToMe" -> "neulab/compare-mt"
"VKCOM/YouTokenToMe" -> "natasha/corus" ["e"=1]
"VKCOM/YouTokenToMe" -> "bigartm/bigartm" ["e"=1]
"VKCOM/YouTokenToMe" -> "harvardnlp/pytorch-struct"
"VKCOM/YouTokenToMe" -> "snakers4/open_stt" ["e"=1]
"VKCOM/YouTokenToMe" -> "huggingface/naacl_transfer_learning_tutorial"
"VKCOM/YouTokenToMe" -> "MyLtYkRiTiK/dl_in_nlp_2019" ["e"=1]
"vlgiitr/papers_we_read" -> "vlgiitr/DL_Topics"
"vlgiitr/papers_we_read" -> "vlgiitr/GenZoo"
"vlgiitr/papers_we_read" -> "hardik2396/Dynamic-Memory-network-plus" ["e"=1]
"vlgiitr/papers_we_read" -> "vlgiitr/Group-Level-Emotion-Recognition"
"vlgiitr/papers_we_read" -> "vlgiitr/ntm-pytorch" ["e"=1]
"harsh19/Shakespearizing-Modern-English" -> "cocoxu/Shakespeare"
"rsennrich/subword-nmt" -> "moses-smt/mosesdecoder"
"rsennrich/subword-nmt" -> "google/sentencepiece"
"rsennrich/subword-nmt" -> "clab/fast_align"
"rsennrich/subword-nmt" -> "THUNLP-MT/MT-Reading-List"
"rsennrich/subword-nmt" -> "facebookresearch/XLM"
"rsennrich/subword-nmt" -> "glample/fastBPE"
"rsennrich/subword-nmt" -> "OpenNMT/OpenNMT-py"
"rsennrich/subword-nmt" -> "facebookresearch/UnsupervisedMT"
"rsennrich/subword-nmt" -> "facebookresearch/MUSE"
"rsennrich/subword-nmt" -> "EdinburghNLP/nematus"
"rsennrich/subword-nmt" -> "marian-nmt/marian"
"rsennrich/subword-nmt" -> "bheinzerling/bpemb"
"rsennrich/subword-nmt" -> "kimiyoung/transformer-xl"
"rsennrich/subword-nmt" -> "tensorflow/nmt"
"rsennrich/subword-nmt" -> "facebookresearch/LASER"
"cemoody/lda2vec" -> "meereeum/lda2vec-tf"
"cemoody/lda2vec" -> "bmabey/pyLDAvis"
"cemoody/lda2vec" -> "lda-project/lda"
"cemoody/lda2vec" -> "piskvorky/gensim" ["e"=1]
"cemoody/lda2vec" -> "ryankiros/skip-thoughts"
"cemoody/lda2vec" -> "baidu/Familia" ["e"=1]
"cemoody/lda2vec" -> "blei-lab/edward" ["e"=1]
"cemoody/lda2vec" -> "RaRe-Technologies/gensim"
"cemoody/lda2vec" -> "facebookresearch/fastText"
"cemoody/lda2vec" -> "chartbeat-labs/textacy"
"cemoody/lda2vec" -> "stanfordnlp/GloVe"
"cemoody/lda2vec" -> "zalandoresearch/flair"
"cemoody/lda2vec" -> "allenai/allennlp"
"cemoody/lda2vec" -> "facebookresearch/StarSpace"
"cemoody/lda2vec" -> "dennybritz/cnn-text-classification-tf"
"neulab/RIPPLe" -> "thunlp/HiddenKiller"
"neulab/RIPPLe" -> "ShannonAI/backdoor_nlg"
"antonydeepak/ResumeParser" -> "likerRr/code4goal-resume-parser"
"antonydeepak/ResumeParser" -> "bjherger/ResumeParser"
"antonydeepak/ResumeParser" -> "Satrat/Resume-Parser"
"antonydeepak/ResumeParser" -> "chen0040/keras-english-resume-parser-and-analyzer"
"antonydeepak/ResumeParser" -> "jineshdhruv8/ResumeParser"
"antonydeepak/ResumeParser" -> "skcript/cvscan"
"danijar/handout" -> "williamFalcon/pytorch-lightning" ["e"=1]
"danijar/handout" -> "huggingface/knockknock"
"danijar/handout" -> "microsoft/interpret" ["e"=1]
"danijar/handout" -> "microsoft/tensorwatch" ["e"=1]
"danijar/handout" -> "facebookresearch/hiplot" ["e"=1]
"danijar/handout" -> "jwkvam/celluloid" ["e"=1]
"danijar/handout" -> "keras-team/keras-tuner" ["e"=1]
"danijar/handout" -> "IDSIA/sacred" ["e"=1]
"danijar/handout" -> "QuantStack/voila" ["e"=1]
"danijar/handout" -> "mwouts/jupytext" ["e"=1]
"danijar/handout" -> "facebookresearch/pytext"
"danijar/handout" -> "deepmind/bsuite" ["e"=1]
"danijar/handout" -> "emeryberger/scalene" ["e"=1]
"danijar/handout" -> "facebookresearch/pythia"
"danijar/handout" -> "mihail911/nlp-library"
"Smerity/sha-rnn" -> "lucidrains/reformer-pytorch"
"Smerity/sha-rnn" -> "facebookresearch/adaptive-span"
"Smerity/sha-rnn" -> "kimiyoung/transformer-xl"
"Smerity/sha-rnn" -> "yikangshen/Ordered-Neurons" ["e"=1]
"Smerity/sha-rnn" -> "zihangdai/xlnet"
"Smerity/sha-rnn" -> "google-research/electra"
"Smerity/sha-rnn" -> "facebookresearch/XLM"
"Smerity/sha-rnn" -> "namisan/mt-dnn"
"Smerity/sha-rnn" -> "salesforce/ctrl"
"Smerity/sha-rnn" -> "brightmart/albert_zh" ["e"=1]
"Smerity/sha-rnn" -> "harvardnlp/pytorch-struct"
"Smerity/sha-rnn" -> "huggingface/pytorch-pretrained-BERT"
"Smerity/sha-rnn" -> "tomohideshibata/BERT-related-papers"
"Smerity/sha-rnn" -> "facebookresearch/SpanBERT"
"Smerity/sha-rnn" -> "google-research/ALBERT"
"aboSamoor/pycld2" -> "bsolomon1124/pycld3"
"explosion/displacy-ent" -> "explosion/displacy"
"explosion/displacy-ent" -> "explosion/spacy-services"
"ofirnachum/sequence_gan" -> "LantaoYu/SeqGAN"
"ofirnachum/sequence_gan" -> "codekansas/seqgan-text-tensorflow"
"ofirnachum/sequence_gan" -> "CR-Gjx/LeakGAN"
"ofirnachum/sequence_gan" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"ofirnachum/sequence_gan" -> "geek-ai/Texygen"
"ofirnachum/sequence_gan" -> "jakezhaojb/ARAE"
"ofirnachum/sequence_gan" -> "olofmogren/c-rnn-gan" ["e"=1]
"ofirnachum/sequence_gan" -> "amirbar/rnn.wgan"
"ofirnachum/sequence_gan" -> "AustinStoneProjects/TextGAN"
"ofirnachum/sequence_gan" -> "kelvinguu/neural-editor"
"ofirnachum/sequence_gan" -> "tokestermw/text-gan-tensorflow"
"openeventdata/mordecai" -> "openeventdata/es-geonames"
"openeventdata/mordecai" -> "chartbeat-labs/textacy"
"openeventdata/mordecai" -> "openeventdata/petrarch2"
"openeventdata/mordecai" -> "explosion/projects"
"openeventdata/mordecai" -> "mpuig/spacy-lookup" ["e"=1]
"openeventdata/mordecai" -> "openeventdata/phoenix_pipeline"
"openeventdata/mordecai" -> "huggingface/neuralcoref"
"openeventdata/mordecai" -> "stuartemiddleton/geoparsepy"
"openeventdata/mordecai" -> "explosion/sense2vec"
"openeventdata/mordecai" -> "msg-systems/holmes-extractor" ["e"=1]
"openeventdata/mordecai" -> "explosion/prodigy-recipes"
"openeventdata/mordecai" -> "openvenues/libpostal" ["e"=1]
"openeventdata/mordecai" -> "ICLRandD/Blackstone" ["e"=1]
"openeventdata/mordecai" -> "msg-systems/coreferee"
"openeventdata/mordecai" -> "kororo/excelcy"
"yannvgn/laserembeddings" -> "EdinburghNLP/opus-100-corpus"
"thunlp/PLMpapers" -> "tomohideshibata/BERT-related-papers"
"thunlp/PLMpapers" -> "thunlp/PromptPapers" ["e"=1]
"thunlp/PLMpapers" -> "zihangdai/xlnet"
"thunlp/PLMpapers" -> "thunlp/KRLPapers" ["e"=1]
"thunlp/PLMpapers" -> "brightmart/albert_zh" ["e"=1]
"thunlp/PLMpapers" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"thunlp/PLMpapers" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"thunlp/PLMpapers" -> "princeton-nlp/SimCSE" ["e"=1]
"thunlp/PLMpapers" -> "THUNLP-MT/MT-Reading-List"
"thunlp/PLMpapers" -> "thunlp/ERNIE" ["e"=1]
"thunlp/PLMpapers" -> "allenai/allennlp"
"thunlp/PLMpapers" -> "CLUEbenchmark/CLUE" ["e"=1]
"thunlp/PLMpapers" -> "thunlp/RCPapers" ["e"=1]
"thunlp/PLMpapers" -> "facebookresearch/XLM"
"thunlp/PLMpapers" -> "pytorch/fairseq"
"nyu-mll/jiant" -> "nyu-mll/GLUE-baselines"
"nyu-mll/jiant" -> "namisan/mt-dnn"
"nyu-mll/jiant" -> "facebookresearch/SentEval"
"nyu-mll/jiant" -> "facebookresearch/LAMA" ["e"=1]
"nyu-mll/jiant" -> "facebookresearch/SpanBERT"
"nyu-mll/jiant" -> "facebookresearch/XLM"
"nyu-mll/jiant" -> "john-hewitt/structural-probes"
"nyu-mll/jiant" -> "Adapter-Hub/adapter-transformers"
"nyu-mll/jiant" -> "google-research/language" ["e"=1]
"nyu-mll/jiant" -> "google-research/electra"
"nyu-mll/jiant" -> "marcotcr/checklist"
"nyu-mll/jiant" -> "QData/TextAttack"
"nyu-mll/jiant" -> "google-research/xtreme"
"nyu-mll/jiant" -> "facebookresearch/KILT" ["e"=1]
"nyu-mll/jiant" -> "facebookresearch/DPR" ["e"=1]
"Eric-Wallace/universal-triggers" -> "Hsuan-Tung/universal_attack_natural_trigger"
"Eric-Wallace/universal-triggers" -> "lushleaf/Structure-free-certified-NLP"
"Eric-Wallace/universal-triggers" -> "thunlp/TAADpapers"
"Eric-Wallace/universal-triggers" -> "jind11/TextFooler"
"Eric-Wallace/universal-triggers" -> "ucinlp/autoprompt" ["e"=1]
"Eric-Wallace/universal-triggers" -> "robinjia/certified-word-sub"
"Eric-Wallace/universal-triggers" -> "Eric-Wallace/interpretability-tutorial-emnlp2020"
"Mini-Conf/Mini-Conf" -> "acl-org/acl-2020-virtual-conference"
"Mini-Conf/Mini-Conf" -> "harvardnlp/pytorch-struct"
"PAIR-code/lit" -> "marcotcr/checklist"
"PAIR-code/lit" -> "jalammar/ecco"
"PAIR-code/lit" -> "makcedward/nlpaug"
"PAIR-code/lit" -> "QData/TextAttack"
"PAIR-code/lit" -> "jessevig/bertviz"
"PAIR-code/lit" -> "MaartenGr/BERTopic"
"PAIR-code/lit" -> "ddangelov/Top2Vec"
"PAIR-code/lit" -> "huggingface/awesome-papers"
"PAIR-code/lit" -> "ivan-bilan/The-NLP-Pandect"
"PAIR-code/lit" -> "UKPLab/sentence-transformers"
"PAIR-code/lit" -> "linkedin/detext"
"PAIR-code/lit" -> "huggingface/tokenizers"
"PAIR-code/lit" -> "ThilinaRajapakse/simpletransformers"
"PAIR-code/lit" -> "microsoft/nlp-recipes"
"PAIR-code/lit" -> "recognai/rubrix"
"commonsense/conceptnet-numberbatch" -> "commonsense/conceptnet5"
"commonsense/conceptnet-numberbatch" -> "j-min/tf_tutorial_plus"
"commonsense/conceptnet-numberbatch" -> "mfaruqui/retrofitting" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "atcbosselut/comet-commonsense" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "Currie32/Text-Summarization-with-Amazon-Reviews"
"commonsense/conceptnet-numberbatch" -> "facebookresearch/SentEval"
"commonsense/conceptnet-numberbatch" -> "facebookresearch/InferSent"
"commonsense/conceptnet-numberbatch" -> "ryankiros/skip-thoughts"
"commonsense/conceptnet-numberbatch" -> "openai/generating-reviews-discovering-sentiment"
"commonsense/conceptnet-numberbatch" -> "facebookresearch/poincare-embeddings" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "codekansas/keras-language-modeling" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "brmson/dataset-sts"
"commonsense/conceptnet-numberbatch" -> "deepmind/rc-data" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "gsi-upm/sematch" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "huggingface/neuralcoref"
"facebookresearch/SpanBERT" -> "mandarjoshi90/coref"
"facebookresearch/SpanBERT" -> "kentonl/e2e-coref"
"facebookresearch/SpanBERT" -> "ShannonAI/CorefQA"
"facebookresearch/SpanBERT" -> "princeton-nlp/PURE" ["e"=1]
"facebookresearch/SpanBERT" -> "markus-eberts/spert" ["e"=1]
"facebookresearch/SpanBERT" -> "thunlp/ERNIE" ["e"=1]
"facebookresearch/SpanBERT" -> "mrqa/MRQA-Shared-Task-2019" ["e"=1]
"facebookresearch/SpanBERT" -> "princeton-nlp/SimCSE" ["e"=1]
"facebookresearch/SpanBERT" -> "juntaoy/biaffine-ner" ["e"=1]
"facebookresearch/SpanBERT" -> "google-research/electra"
"facebookresearch/SpanBERT" -> "ShannonAI/mrc-for-flat-nested-ner" ["e"=1]
"facebookresearch/SpanBERT" -> "namisan/mt-dnn"
"facebookresearch/SpanBERT" -> "cooelf/AwesomeMRC" ["e"=1]
"facebookresearch/SpanBERT" -> "allenai/longformer"
"facebookresearch/SpanBERT" -> "dwadden/dygiepp" ["e"=1]
"facebookresearch/pythia" -> "hengyuan-hu/bottom-up-attention-vqa" ["e"=1]
"facebookresearch/pythia" -> "peteanderson80/bottom-up-attention" ["e"=1]
"facebookresearch/pythia" -> "facebookresearch/pytext"
"facebookresearch/pythia" -> "huggingface/pytorch-pretrained-BERT"
"facebookresearch/pythia" -> "facebookresearch/XLM"
"facebookresearch/pythia" -> "zihangdai/xlnet"
"facebookresearch/pythia" -> "Cadene/vqa.pytorch" ["e"=1]
"facebookresearch/pythia" -> "williamFalcon/pytorch-lightning" ["e"=1]
"facebookresearch/pythia" -> "jnhwkim/ban-vqa" ["e"=1]
"facebookresearch/pythia" -> "salesforce/decaNLP"
"facebookresearch/pythia" -> "zalandoresearch/flair"
"facebookresearch/pythia" -> "MILVLG/mcan-vqa" ["e"=1]
"facebookresearch/pythia" -> "airsplay/lxmert" ["e"=1]
"facebookresearch/pythia" -> "facebookresearch/LASER"
"facebookresearch/pythia" -> "roytseng-tw/Detectron.pytorch" ["e"=1]
"huggingface/awesome-papers" -> "dair-ai/nlp_paper_summaries"
"huggingface/awesome-papers" -> "huggingface/tokenizers"
"huggingface/awesome-papers" -> "huggingface/nlp"
"huggingface/awesome-papers" -> "marcotcr/checklist"
"huggingface/awesome-papers" -> "tomohideshibata/BERT-related-papers"
"huggingface/awesome-papers" -> "google-research/electra"
"huggingface/awesome-papers" -> "huggingface/knockknock"
"huggingface/awesome-papers" -> "PAIR-code/lit"
"huggingface/awesome-papers" -> "facebookresearch/XLM"
"huggingface/awesome-papers" -> "QData/TextAttack"
"huggingface/awesome-papers" -> "allenai/longformer"
"huggingface/awesome-papers" -> "google-research/text-to-text-transfer-transformer"
"huggingface/awesome-papers" -> "microsoft/nlp-recipes"
"huggingface/awesome-papers" -> "thunlp/PLMpapers"
"huggingface/awesome-papers" -> "neubig/lowresource-nlp-bootcamp-2020"
"malllabiisc/SGCP" -> "tagoyal/sow-reap-paraphrasing"
"malllabiisc/SGCP" -> "tomhosking/separator"
"neuml/paperai" -> "neuml/paperetl"
"neuml/paperai" -> "neuml/txtai"
"neuml/paperai" -> "neuml/tldrstory"
"neuml/paperai" -> "neuml/codequestion"
"neuml/paperai" -> "neuml/txtchat"
"neuml/paperai" -> "allenai/scibert" ["e"=1]
"neuml/paperai" -> "EdCo95/scientific-paper-summarisation" ["e"=1]
"neuml/paperai" -> "ddangelov/Top2Vec"
"neuml/paperai" -> "allenai/science-parse" ["e"=1]
"neuml/paperai" -> "allenai/specter" ["e"=1]
"neuml/paperai" -> "ferru97/PyPaperBot" ["e"=1]
"neuml/paperai" -> "allenai/s2orc" ["e"=1]
"neuml/paperai" -> "kermitt2/grobid" ["e"=1]
"joosthub/PyTorchNLPBook" -> "apachecn/nlp-pytorch-zh" ["e"=1]
"joosthub/PyTorchNLPBook" -> "DSKSD/DeepNLP-models-Pytorch"
"joosthub/PyTorchNLPBook" -> "fastai/course-nlp"
"joosthub/PyTorchNLPBook" -> "bentrevett/pytorch-sentiment-analysis"
"joosthub/PyTorchNLPBook" -> "graykode/nlp-tutorial"
"joosthub/PyTorchNLPBook" -> "PetrochukM/PyTorch-NLP"
"joosthub/PyTorchNLPBook" -> "neubig/nn4nlp-code"
"joosthub/PyTorchNLPBook" -> "cgpotts/cs224u"
"joosthub/PyTorchNLPBook" -> "jacobeisenstein/gt-nlp-class"
"joosthub/PyTorchNLPBook" -> "lyeoni/nlp-tutorial"
"joosthub/PyTorchNLPBook" -> "spro/practical-pytorch"
"joosthub/PyTorchNLPBook" -> "rguthrie3/DeepLearningForNLPInPytorch"
"joosthub/PyTorchNLPBook" -> "thunlp/PLMpapers"
"joosthub/PyTorchNLPBook" -> "ZacBi/CS224n-2019-solutions"
"joosthub/PyTorchNLPBook" -> "codertimo/BERT-pytorch"
"neubig/nn4nlp-code" -> "neulab/nn4nlp-concepts"
"neubig/nn4nlp-code" -> "neubig/nlptutorial"
"neubig/nn4nlp-code" -> "neubig/lowresource-nlp-bootcamp-2020"
"neubig/nn4nlp-code" -> "joosthub/PyTorchNLPBook"
"neubig/nn4nlp-code" -> "DSKSD/DeepNLP-models-Pytorch"
"neubig/nn4nlp-code" -> "huggingface/naacl_transfer_learning_tutorial"
"neubig/nn4nlp-code" -> "google-research/language" ["e"=1]
"neubig/nn4nlp-code" -> "huggingface/awesome-papers"
"neubig/nn4nlp-code" -> "jacobeisenstein/gt-nlp-class"
"neubig/nn4nlp-code" -> "tomohideshibata/BERT-related-papers"
"neubig/nn4nlp-code" -> "namisan/mt-dnn"
"neubig/nn4nlp-code" -> "thunlp/PLMpapers"
"neubig/nn4nlp-code" -> "marcotcr/checklist"
"neubig/nn4nlp-code" -> "salesforce/awd-lstm-lm"
"neubig/nn4nlp-code" -> "facebookresearch/MUSE"
"RandyPen/TextCluster" -> "Edward1Chou/textClustering"
"RandyPen/TextCluster" -> "murray-z/text_clustering" ["e"=1]
"RandyPen/TextCluster" -> "FesonX/cn-text-classifier"
"dsfsi/textaugment" -> "pfnet-research/contextual_augmentation" ["e"=1]
"dsfsi/textaugment" -> "styfeng/DataAug4NLP"
"dsfsi/textaugment" -> "jasonwei20/eda_nlp" ["e"=1]
"dsfsi/textaugment" -> "clovaai/ssmix"
"dsfsi/textaugment" -> "makcedward/nlpaug"
"rikdz/GraphWriter" -> "diegma/graph-2-text"
"rikdz/GraphWriter" -> "THUNLP-MT/TG-Reading-List"
"rikdz/GraphWriter" -> "jcyk/gtos"
"rikdz/GraphWriter" -> "lancopku/Graph-to-seq-comment-generation"
"rikdz/GraphWriter" -> "freesunshine0316/neural-graph-to-seq-mp"
"rikdz/GraphWriter" -> "UKPLab/kg2text"
"rikdz/GraphWriter" -> "atulkum/pointer_summarizer" ["e"=1]
"rikdz/GraphWriter" -> "wenhuchen/KGPT"
"rikdz/GraphWriter" -> "AmitMY/chimera"
"rikdz/GraphWriter" -> "INK-USC/KagNet" ["e"=1]
"rikdz/GraphWriter" -> "nlpyang/hiersumm" ["e"=1]
"rikdz/GraphWriter" -> "yicheng-w/CommonSenseMultiHopQA" ["e"=1]
"rikdz/GraphWriter" -> "ratishsp/data2text-plan-py" ["e"=1]
"rikdz/GraphWriter" -> "lipiji/TranSummar" ["e"=1]
"rikdz/GraphWriter" -> "uber-research/PPLM"
"CR-Gjx/LeakGAN" -> "geek-ai/Texygen"
"CR-Gjx/LeakGAN" -> "LantaoYu/SeqGAN"
"CR-Gjx/LeakGAN" -> "ofirnachum/sequence_gan"
"CR-Gjx/LeakGAN" -> "suragnair/seqGAN"
"CR-Gjx/LeakGAN" -> "codekansas/seqgan-text-tensorflow"
"CR-Gjx/LeakGAN" -> "ChenChengKuan/awesome-text-generation"
"CR-Gjx/LeakGAN" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"CR-Gjx/LeakGAN" -> "williamSYSU/TextGAN-PyTorch"
"CR-Gjx/LeakGAN" -> "lancopku/DPGAN" ["e"=1]
"CR-Gjx/LeakGAN" -> "liuyuemaicha/Adversarial-Learning-for-Neural-Dialogue-Generation-in-Tensorflow" ["e"=1]
"CR-Gjx/LeakGAN" -> "ChenChengKuan/SeqGAN_tensorflow"
"CR-Gjx/LeakGAN" -> "jakezhaojb/ARAE"
"CR-Gjx/LeakGAN" -> "amirbar/rnn.wgan"
"CR-Gjx/LeakGAN" -> "weilinie/RelGAN"
"CR-Gjx/LeakGAN" -> "asyml/texar"
"HazyResearch/deepdive" -> "HazyResearch/snorkel"
"HazyResearch/deepdive" -> "crownpku/Information-Extraction-Chinese" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/NRE" ["e"=1]
"HazyResearch/deepdive" -> "mit-nlp/MITIE" ["e"=1]
"HazyResearch/deepdive" -> "memect/kg-beijing" ["e"=1]
"HazyResearch/deepdive" -> "piskvorky/gensim" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/OpenNRE" ["e"=1]
"HazyResearch/deepdive" -> "qq547276542/Agriculture_KnowledgeGraph" ["e"=1]
"HazyResearch/deepdive" -> "ryankiros/skip-thoughts"
"HazyResearch/deepdive" -> "Pelhans/Z_knowledge_graph" ["e"=1]
"HazyResearch/deepdive" -> "machinalis/iepy" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/KB2E" ["e"=1]
"HazyResearch/deepdive" -> "cemoody/lda2vec"
"HazyResearch/deepdive" -> "nlplab/brat" ["e"=1]
"HazyResearch/deepdive" -> "crownpku/Chinese-Annotator" ["e"=1]
"explosion/spacy-services" -> "jgontrum/spacy-api-docker"
"explosion/spacy-services" -> "explosion/spacy-dev-resources"
"explosion/spacy-services" -> "explosion/displacy-ent"
"explosion/spacy-services" -> "explosion/spacy-notebooks"
"jonsafari/nmt-list" -> "rsennrich/nematus"
"jonsafari/nmt-list" -> "neubig/nmt-tips"
"jonsafari/nmt-list" -> "clab/fast_align"
"jonsafari/nmt-list" -> "jhclark/multeval"
"jonsafari/nmt-list" -> "rsennrich/Bleualign"
"jonsafari/nmt-list" -> "mjpost/sacreBLEU"
"jonsafari/nmt-list" -> "artetxem/undreamt"
"jonsafari/nmt-list" -> "nyu-dl/dl4mt-tutorial"
"jonsafari/nmt-list" -> "isi-nlp/Zoph_RNN"
"jonsafari/nmt-list" -> "lvapeab/nmt-keras" ["e"=1]
"jonsafari/nmt-list" -> "rsennrich/wmt16-scripts"
"jonsafari/nmt-list" -> "artetxem/monoses"
"jonsafari/nmt-list" -> "neulab/xnmt"
"jonsafari/nmt-list" -> "EdinburghNLP/nematus"
"jonsafari/nmt-list" -> "nyu-dl/dl4mt-cdec"
"MaartenGr/BERTopic" -> "ddangelov/Top2Vec"
"MaartenGr/BERTopic" -> "MaartenGr/KeyBERT"
"MaartenGr/BERTopic" -> "UKPLab/sentence-transformers"
"MaartenGr/BERTopic" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/BERTopic" -> "deepset-ai/haystack"
"MaartenGr/BERTopic" -> "flairNLP/flair"
"MaartenGr/BERTopic" -> "MIND-Lab/OCTIS"
"MaartenGr/BERTopic" -> "makcedward/nlpaug"
"MaartenGr/BERTopic" -> "ThilinaRajapakse/simpletransformers"
"MaartenGr/BERTopic" -> "PAIR-code/lit"
"MaartenGr/BERTopic" -> "neuml/txtai"
"MaartenGr/BERTopic" -> "doccano/doccano" ["e"=1]
"MaartenGr/BERTopic" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"MaartenGr/BERTopic" -> "recognai/rubrix"
"MaartenGr/BERTopic" -> "huggingface/setfit"
"openai/finetune-transformer-lm" -> "huggingface/pytorch-openai-transformer-lm"
"openai/finetune-transformer-lm" -> "allenai/bilm-tf"
"openai/finetune-transformer-lm" -> "kimiyoung/transformer-xl"
"openai/finetune-transformer-lm" -> "huggingface/pytorch-pretrained-BERT"
"openai/finetune-transformer-lm" -> "zihangdai/xlnet"
"openai/finetune-transformer-lm" -> "facebookresearch/XLM"
"openai/finetune-transformer-lm" -> "Kyubyong/transformer"
"openai/finetune-transformer-lm" -> "namisan/mt-dnn"
"openai/finetune-transformer-lm" -> "IndicoDataSolutions/finetune"
"openai/finetune-transformer-lm" -> "PaddlePaddle/LARK" ["e"=1]
"openai/finetune-transformer-lm" -> "salesforce/decaNLP"
"openai/finetune-transformer-lm" -> "allenai/bi-att-flow" ["e"=1]
"openai/finetune-transformer-lm" -> "rsennrich/subword-nmt"
"openai/finetune-transformer-lm" -> "NLPLearn/QANet" ["e"=1]
"openai/finetune-transformer-lm" -> "abisee/pointer-generator" ["e"=1]
"attardi/wikiextractor" -> "facebookresearch/DrQA"
"attardi/wikiextractor" -> "google/sentencepiece"
"attardi/wikiextractor" -> "facebookresearch/XLM"
"attardi/wikiextractor" -> "rsennrich/subword-nmt"
"attardi/wikiextractor" -> "huggingface/pytorch-pretrained-BERT"
"attardi/wikiextractor" -> "allenai/allennlp"
"attardi/wikiextractor" -> "facebookresearch/MUSE"
"attardi/wikiextractor" -> "facebookresearch/DPR" ["e"=1]
"attardi/wikiextractor" -> "zihangdai/xlnet"
"attardi/wikiextractor" -> "facebookresearch/SentEval"
"attardi/wikiextractor" -> "hanxiao/bert-as-service"
"attardi/wikiextractor" -> "google-research/text-to-text-transfer-transformer"
"attardi/wikiextractor" -> "pytorch/fairseq"
"attardi/wikiextractor" -> "OpenNMT/OpenNMT-py"
"attardi/wikiextractor" -> "facebookresearch/LASER"
"lda-project/lda" -> "cemoody/lda2vec"
"lda-project/lda" -> "dongwookim-ml/python-topic-model" ["e"=1]
"lda-project/lda" -> "shuyo/iir" ["e"=1]
"lda-project/lda" -> "meereeum/lda2vec-tf"
"lda-project/lda" -> "a55509432/python-LDA" ["e"=1]
"lda-project/lda" -> "baidu/Familia" ["e"=1]
"lda-project/lda" -> "bmabey/pyLDAvis"
"lda-project/lda" -> "yangliuy/LDAGibbsSampling" ["e"=1]
"lda-project/lda" -> "blei-lab/onlineldavb" ["e"=1]
"lda-project/lda" -> "xiaohuiyan/BTM" ["e"=1]
"lda-project/lda" -> "vi3k6i5/GuidedLDA"
"lda-project/lda" -> "Microsoft/LightLDA" ["e"=1]
"lda-project/lda" -> "galesour/BTM" ["e"=1]
"lda-project/lda" -> "vladsandulescu/topics"
"lda-project/lda" -> "joewandy/hlda"
"explosion/spacy-models" -> "explosion/spacy-transformers"
"explosion/spacy-models" -> "explosion/thinc"
"explosion/spacy-models" -> "explosion/projects"
"explosion/spacy-models" -> "huggingface/neuralcoref"
"explosion/spacy-models" -> "explosion/sense2vec"
"explosion/spacy-models" -> "chartbeat-labs/textacy"
"explosion/spacy-models" -> "explosion/spaCy"
"explosion/spacy-models" -> "explosion/spacy-notebooks"
"explosion/spacy-models" -> "nltk/nltk_data" ["e"=1]
"explosion/spacy-models" -> "allenai/scispacy" ["e"=1]
"explosion/spacy-models" -> "ines/spacy-course"
"explosion/spacy-models" -> "DerwenAI/pytextrank" ["e"=1]
"explosion/spacy-models" -> "stanfordnlp/stanza"
"explosion/spacy-models" -> "princeton-nlp/SimCSE" ["e"=1]
"explosion/spacy-models" -> "CLUEbenchmark/CLUE" ["e"=1]
"textflint/textflint" -> "thunlp/OpenAttack"
"textflint/textflint" -> "thunlp/TAADpapers"
"textflint/textflint" -> "QData/TextAttack"
"textflint/textflint" -> "txsun1997/LMaaS-Papers" ["e"=1]
"textflint/textflint" -> "neulab/ExplainaBoard" ["e"=1]
"textflint/textflint" -> "marcotcr/checklist"
"textflint/textflint" -> "zhuchen03/FreeLB"
"textflint/textflint" -> "fastnlp/fastHan" ["e"=1]
"textflint/textflint" -> "fastnlp/CPT" ["e"=1]
"textflint/textflint" -> "intro-nlp/intro-nlp.github.io"
"textflint/textflint" -> "txsun1997/MOSS" ["e"=1]
"textflint/textflint" -> "facebookresearch/SentAugment"
"textflint/textflint" -> "princeton-nlp/LM-BFF" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "dipanjanS/practical-machine-learning-with-python"
"hundredblocks/concrete_NLP_tutorial" -> "marcotcr/lime" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "susanli2016/NLP-with-Python"
"hundredblocks/concrete_NLP_tutorial" -> "fastai/course-nlp"
"hundredblocks/concrete_NLP_tutorial" -> "hse-aml/natural-language-processing" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "jacobeisenstein/gt-nlp-class"
"hundredblocks/concrete_NLP_tutorial" -> "salesforce/decaNLP"
"hundredblocks/concrete_NLP_tutorial" -> "rouseguy/DeepLearning-NLP" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "huseinzol05/NLP-Models-Tensorflow" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "NirantK/nlp-python-deep-learning"
"hundredblocks/concrete_NLP_tutorial" -> "lyeoni/nlp-tutorial"
"hundredblocks/concrete_NLP_tutorial" -> "hundredblocks/ml-powered-applications" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "mihail911/nlp-library"
"hundredblocks/concrete_NLP_tutorial" -> "Hironsan/anago" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "rguthrie3/DeepLearningForNLPInPytorch"
"moses-smt/mosesdecoder" -> "rsennrich/subword-nmt"
"moses-smt/mosesdecoder" -> "clab/fast_align"
"moses-smt/mosesdecoder" -> "THUNLP-MT/MT-Reading-List"
"moses-smt/mosesdecoder" -> "alvations/sacremoses"
"moses-smt/mosesdecoder" -> "marian-nmt/marian"
"moses-smt/mosesdecoder" -> "moses-smt/mgiza"
"moses-smt/mosesdecoder" -> "kpu/kenlm" ["e"=1]
"moses-smt/mosesdecoder" -> "facebookresearch/XLM"
"moses-smt/mosesdecoder" -> "mjpost/sacreBLEU"
"moses-smt/mosesdecoder" -> "glample/fastBPE"
"moses-smt/mosesdecoder" -> "OpenNMT/OpenNMT-py"
"moses-smt/mosesdecoder" -> "facebookresearch/UnsupervisedMT"
"moses-smt/mosesdecoder" -> "facebookresearch/MUSE"
"moses-smt/mosesdecoder" -> "mjpost/sacrebleu"
"moses-smt/mosesdecoder" -> "nyu-dl/dl4mt-tutorial"
"danielfrg/word2vec" -> "dav/word2vec"
"danielfrg/word2vec" -> "stanfordnlp/GloVe"
"danielfrg/word2vec" -> "tmikolov/word2vec"
"danielfrg/word2vec" -> "yoonkim/CNN_sentence"
"danielfrg/word2vec" -> "maciejkula/glove-python"
"danielfrg/word2vec" -> "RaRe-Technologies/gensim"
"danielfrg/word2vec" -> "piskvorky/gensim" ["e"=1]
"danielfrg/word2vec" -> "dennybritz/cnn-text-classification-tf"
"danielfrg/word2vec" -> "HIT-SCIR/ltp" ["e"=1]
"danielfrg/word2vec" -> "google/seq2seq"
"danielfrg/word2vec" -> "isnowfy/snownlp" ["e"=1]
"danielfrg/word2vec" -> "facebookresearch/fastText"
"danielfrg/word2vec" -> "brightmart/text_classification"
"danielfrg/word2vec" -> "phanein/deepwalk" ["e"=1]
"danielfrg/word2vec" -> "3Top/word2vec-api"
"UKPLab/EasyNMT" -> "nlp-uoregon/trankit"
"UKPLab/EasyNMT" -> "huggingface/setfit"
"UKPLab/EasyNMT" -> "Helsinki-NLP/Opus-MT"
"UKPLab/EasyNMT" -> "jalammar/ecco"
"UKPLab/EasyNMT" -> "MaartenGr/PolyFuzz"
"UKPLab/EasyNMT" -> "webis-de/small-text"
"UKPLab/EasyNMT" -> "recognai/rubrix"
"UKPLab/EasyNMT" -> "PrithivirajDamodaran/Gramformer"
"UKPLab/EasyNMT" -> "joeynmt/joeynmt"
"UKPLab/EasyNMT" -> "cisnlp/simalign"
"UKPLab/EasyNMT" -> "MilaNLProc/contextualized-topic-models"
"UKPLab/EasyNMT" -> "UKPLab/gpl" ["e"=1]
"UKPLab/EasyNMT" -> "makcedward/nlpaug"
"UKPLab/EasyNMT" -> "NorskRegnesentral/skweak"
"UKPLab/EasyNMT" -> "MaartenGr/KeyBERT"
"ZIYU-DEEP/Awesome-Information-Bottleneck" -> "snap-stanford/GIB"
"ZIYU-DEEP/Awesome-Information-Bottleneck" -> "RyanWangZf/PAC-Bayes-IB"
"ZIYU-DEEP/Awesome-Information-Bottleneck" -> "djstrouse/information-bottleneck"
"ZIYU-DEEP/Awesome-Information-Bottleneck" -> "ShizheHu/Awesome-Information-Bottleneck"
"google-research/electra" -> "ymcui/Chinese-ELECTRA" ["e"=1]
"google-research/electra" -> "google-research/ALBERT"
"google-research/electra" -> "google-research/text-to-text-transfer-transformer"
"google-research/electra" -> "zihangdai/xlnet"
"google-research/electra" -> "kimiyoung/transformer-xl"
"google-research/electra" -> "brightmart/albert_zh" ["e"=1]
"google-research/electra" -> "brightmart/roberta_zh" ["e"=1]
"google-research/electra" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"google-research/electra" -> "allenai/longformer"
"google-research/electra" -> "namisan/mt-dnn"
"google-research/electra" -> "princeton-nlp/SimCSE" ["e"=1]
"google-research/electra" -> "facebookresearch/XLM"
"google-research/electra" -> "CLUEbenchmark/CLUE" ["e"=1]
"google-research/electra" -> "google/sentencepiece"
"google-research/electra" -> "tomohideshibata/BERT-related-papers"
"lijuncen/Sentiment-and-Style-Transfer" -> "rpryzant/delete_retrieve_generate"
"lijuncen/Sentiment-and-Style-Transfer" -> "shentianxiao/language-style-transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "shrimai/Style-Transfer-Through-Back-Translation"
"lijuncen/Sentiment-and-Style-Transfer" -> "agaralabs/transformer-drg-style-transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "lancopku/Unpaired-Sentiment-Translation" ["e"=1]
"lijuncen/Sentiment-and-Style-Transfer" -> "fastnlp/style-transformer"
"lijuncen/Sentiment-and-Style-Transfer" -> "Nrgeup/controllable-text-attribute-transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "raosudha89/GYAFC-corpus"
"lijuncen/Sentiment-and-Style-Transfer" -> "VAShibaev/text_style_transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "fuzhenxin/Style-Transfer-in-Text"
"lijuncen/Sentiment-and-Style-Transfer" -> "luofuli/DualRL"
"lijuncen/Sentiment-and-Style-Transfer" -> "vineetjohn/linguistic-style-transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "wiseodd/controlled-text-generation"
"lijuncen/Sentiment-and-Style-Transfer" -> "fuzhenxin/text_style_transfer"
"lijuncen/Sentiment-and-Style-Transfer" -> "passeul/style-transfer-model-evaluation"
"mkusner/wmd" -> "src-d/wmd-relax"
"mkusner/wmd" -> "gaohuang/S-WMD" ["e"=1]
"mkusner/wmd" -> "wmayner/pyemd" ["e"=1]
"mkusner/wmd" -> "mchen24/iclr2017"
"mkusner/wmd" -> "ryankiros/skip-thoughts"
"mkusner/wmd" -> "largelymfs/topical_word_embeddings" ["e"=1]
"mkusner/wmd" -> "aseveryn/deep-qa" ["e"=1]
"mkusner/wmd" -> "PrincetonML/SIF"
"mkusner/wmd" -> "jwieting/iclr2016" ["e"=1]
"mkusner/wmd" -> "stephenhky/PyWMD"
"mkusner/wmd" -> "facebookresearch/InferSent"
"mkusner/wmd" -> "klb3713/sentence2vec"
"mkusner/wmd" -> "brmson/dataset-sts"
"mkusner/wmd" -> "taolei87/rcnn" ["e"=1]
"mkusner/wmd" -> "licstar/compare" ["e"=1]
"soskek/bookcorpus" -> "EleutherAI/the-pile" ["e"=1]
"soskek/bookcorpus" -> "alvations/sacremoses"
"soskek/bookcorpus" -> "jcpeterson/openwebtext"
"soskek/bookcorpus" -> "mjpost/sacreBLEU"
"soskek/bookcorpus" -> "sgraaf/Replicate-Toronto-BookCorpus"
"soskek/bookcorpus" -> "google-research-datasets/paws"
"soskek/bookcorpus" -> "nyu-mll/jiant"
"soskek/bookcorpus" -> "attardi/wikiextractor"
"soskek/bookcorpus" -> "atcbosselut/comet-commonsense" ["e"=1]
"soskek/bookcorpus" -> "facebookresearch/cc_net"
"soskek/bookcorpus" -> "ciprian-chelba/1-billion-word-language-modeling-benchmark" ["e"=1]
"soskek/bookcorpus" -> "rsennrich/subword-nmt"
"HaowenHOU/single-pass-clustering-for-chinese-text" -> "FesonX/cn-text-classifier"
"margaretmz/awesome-tflite" -> "sayakpaul/Adventures-in-TensorFlow-Lite"
"margaretmz/awesome-tflite" -> "ml-gde/e2e-tflite-tutorials"
"margaretmz/awesome-tflite" -> "margaretmz/selfie2anime-with-tflite"
"margaretmz/awesome-tflite" -> "sayakpaul/TF-2.0-Hacks"
"margaretmz/awesome-tflite" -> "margaretmz/segmentation-style-transfer"
"margaretmz/awesome-tflite" -> "tensorflow/tflite-support" ["e"=1]
"margaretmz/awesome-tflite" -> "sayakpaul/ML-Bootcamp-Launchpad"
"margaretmz/awesome-tflite" -> "huggingface/tflite-android-transformers" ["e"=1]
"prajdabre/yanmtt" -> "AI4Bharat/indic-bart"
"aonotas/adversarial_text" -> "enry12/adversarial_training_methods"
"aonotas/adversarial_text" -> "aonotas/interpretable-adv"
"stanfordnlp/stanfordnlp" -> "zalandoresearch/flair"
"stanfordnlp/stanfordnlp" -> "huggingface/pytorch-pretrained-BERT"
"stanfordnlp/stanfordnlp" -> "facebookresearch/pytext"
"stanfordnlp/stanfordnlp" -> "zihangdai/xlnet"
"stanfordnlp/stanfordnlp" -> "allenai/allennlp"
"stanfordnlp/stanfordnlp" -> "facebookresearch/XLM"
"stanfordnlp/stanfordnlp" -> "facebookresearch/LASER"
"stanfordnlp/stanfordnlp" -> "NervanaSystems/nlp-architect"
"stanfordnlp/stanfordnlp" -> "stanfordnlp/CoreNLP"
"stanfordnlp/stanfordnlp" -> "salesforce/decaNLP"
"stanfordnlp/stanfordnlp" -> "PaddlePaddle/LARK" ["e"=1]
"stanfordnlp/stanfordnlp" -> "hanxiao/bert-as-service"
"stanfordnlp/stanfordnlp" -> "huggingface/neuralcoref"
"stanfordnlp/stanfordnlp" -> "kimiyoung/transformer-xl"
"stanfordnlp/stanfordnlp" -> "namisan/mt-dnn"
"sommerschield/ancient-text-restoration" -> "dbamman/latin-bert"
"sommerschield/ancient-text-restoration" -> "sommerschield/iphi"
"SamLynnEvans/Transformer" -> "Kyubyong/transformer"
"SamLynnEvans/Transformer" -> "jayparks/transformer"
"SamLynnEvans/Transformer" -> "harvardnlp/annotated-transformer"
"SamLynnEvans/Transformer" -> "kimiyoung/transformer-xl"
"SamLynnEvans/Transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"SamLynnEvans/Transformer" -> "bentrevett/pytorch-seq2seq"
"SamLynnEvans/Transformer" -> "huggingface/pytorch-openai-transformer-lm"
"SamLynnEvans/Transformer" -> "hyunwoongko/transformer" ["e"=1]
"SamLynnEvans/Transformer" -> "codertimo/BERT-pytorch"
"SamLynnEvans/Transformer" -> "facebookresearch/XLM"
"SamLynnEvans/Transformer" -> "OpenNMT/OpenNMT-py"
"SamLynnEvans/Transformer" -> "rsennrich/subword-nmt"
"SamLynnEvans/Transformer" -> "microsoft/MASS"
"SamLynnEvans/Transformer" -> "spro/practical-pytorch"
"SamLynnEvans/Transformer" -> "huggingface/pytorch-pretrained-BERT"
"vene/sparsemap" -> "andre-martins/AD3" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "allenai/bilm-tf"
"HIT-SCIR/ELMoForManyLangs" -> "huggingface/pytorch-pretrained-BERT"
"HIT-SCIR/ELMoForManyLangs" -> "ymcui/Chinese-PreTrained-XLNet" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "PaddlePaddle/LARK" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "jiesutd/LatticeLSTM" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "jiesutd/NCRFpp" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "allenai/allennlp"
"HIT-SCIR/ELMoForManyLangs" -> "brightmart/albert_zh" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "Jiakui/awesome-bert" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "kimiyoung/transformer-xl"
"HIT-SCIR/ELMoForManyLangs" -> "dbiir/UER-py" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "zihangdai/xlnet"
"HIT-SCIR/ELMoForManyLangs" -> "brightmart/roberta_zh" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "namisan/mt-dnn"
"geek-ai/Texygen" -> "CR-Gjx/LeakGAN"
"geek-ai/Texygen" -> "LantaoYu/SeqGAN"
"geek-ai/Texygen" -> "asyml/texar"
"geek-ai/Texygen" -> "williamSYSU/TextGAN-PyTorch"
"geek-ai/Texygen" -> "ChenChengKuan/awesome-text-generation"
"geek-ai/Texygen" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"geek-ai/Texygen" -> "ofirnachum/sequence_gan"
"geek-ai/Texygen" -> "jakezhaojb/ARAE"
"geek-ai/Texygen" -> "yaserkl/RLSeq2Seq" ["e"=1]
"geek-ai/Texygen" -> "fuzhenxin/Style-Transfer-in-Text"
"geek-ai/Texygen" -> "THUNLP-MT/TG-Reading-List"
"geek-ai/Texygen" -> "suragnair/seqGAN"
"geek-ai/Texygen" -> "shentianxiao/language-style-transfer"
"geek-ai/Texygen" -> "Maluuba/nlg-eval" ["e"=1]
"geek-ai/Texygen" -> "wiseodd/controlled-text-generation"
"google-research/multilingual-t5" -> "google-research/text-to-text-transfer-transformer"
"google-research/multilingual-t5" -> "bojone/t5_in_bert4keras" ["e"=1]
"google-research/multilingual-t5" -> "ZhuiyiTechnology/t5-pegasus" ["e"=1]
"google-research/multilingual-t5" -> "facebookresearch/cc_net"
"google-research/multilingual-t5" -> "google-research/byt5" ["e"=1]
"google-research/multilingual-t5" -> "timoschick/pet" ["e"=1]
"google-research/multilingual-t5" -> "alexa/bort"
"google-research/multilingual-t5" -> "microsoft/DeBERTa"
"google-research/multilingual-t5" -> "google-research/electra"
"google-research/multilingual-t5" -> "google-research/t5x" ["e"=1]
"google-research/multilingual-t5" -> "allenai/longformer"
"google-research/multilingual-t5" -> "google-research/language" ["e"=1]
"google-research/multilingual-t5" -> "monologg/KoELECTRA" ["e"=1]
"google-research/multilingual-t5" -> "google-research/xtreme"
"google-research/multilingual-t5" -> "facebookresearch/SpanBERT"
"atnlp/torchtext-summary" -> "keitakurita/practical-torchtext"
"atnlp/torchtext-summary" -> "songyingxin/TextClassification-Pytorch" ["e"=1]
"atnlp/torchtext-summary" -> "bigboNed3/chinese_text_cnn" ["e"=1]
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/MT-paper-lists"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/NiuTensor"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/MTVenues"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/LanguageCodes"
"Edward1Chou/Textclassification" -> "x-hacker/CNN_ChineseTextBinaryClassify"
"Edward1Chou/Textclassification" -> "yongfengxuemei/NLP"
"Edward1Chou/Textclassification" -> "Edward1Chou/textClustering"
"sotte/pytorch_tutorial" -> "scoutbee/pytorch-nlp-notebooks"
"margaretmz/awesome-tensorflow-lite" -> "ml-gde/e2e-tflite-tutorials"
"margaretmz/awesome-tensorflow-lite" -> "margaretmz/Cartoonizer-with-TFLite"
"margaretmz/awesome-tensorflow-lite" -> "tensorflow/tflite-support" ["e"=1]
"margaretmz/awesome-tensorflow-lite" -> "dailystudio/tensorflow-lite-examples-android"
"margaretmz/awesome-tensorflow-lite" -> "tulasiram58827/ocr_tflite" ["e"=1]
"margaretmz/awesome-tensorflow-lite" -> "am15h/tflite_flutter_plugin" ["e"=1]
"margaretmz/awesome-tensorflow-lite" -> "iwatake2222/play_with_tflite" ["e"=1]
"margaretmz/awesome-tensorflow-lite" -> "margaretmz/Selfie2Anime-with-TFLite"
"margaretmz/awesome-tensorflow-lite" -> "margaretmz/segmentation-style-transfer"
"stanfordnlp/stanza" -> "flairNLP/flair"
"stanfordnlp/stanza" -> "UKPLab/sentence-transformers"
"stanfordnlp/stanza" -> "allenai/allennlp"
"stanfordnlp/stanza" -> "huggingface/tokenizers"
"stanfordnlp/stanza" -> "stanfordnlp/CoreNLP"
"stanfordnlp/stanza" -> "makcedward/nlpaug"
"stanfordnlp/stanza" -> "pytorch/fairseq"
"stanfordnlp/stanza" -> "google/sentencepiece"
"stanfordnlp/stanza" -> "doccano/doccano" ["e"=1]
"stanfordnlp/stanza" -> "google-research/text-to-text-transfer-transformer"
"stanfordnlp/stanza" -> "explosion/spaCy"
"stanfordnlp/stanza" -> "sebastianruder/NLP-progress"
"stanfordnlp/stanza" -> "ThilinaRajapakse/simpletransformers"
"stanfordnlp/stanza" -> "JohnSnowLabs/spark-nlp"
"stanfordnlp/stanza" -> "huggingface/neuralcoref"
"sayakpaul/TF-2.0-Hacks" -> "sayakpaul/ML-Bootcamp-Launchpad"
"sayakpaul/TF-2.0-Hacks" -> "margaretmz/awesome-tflite"
"sayakpaul/TF-2.0-Hacks" -> "PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2"
"susanli2016/NLP-with-Python" -> "susanli2016/Machine-Learning-with-Python" ["e"=1]
"susanli2016/NLP-with-Python" -> "kavgan/nlp-in-practice"
"susanli2016/NLP-with-Python" -> "fastai/course-nlp"
"susanli2016/NLP-with-Python" -> "makcedward/nlp"
"susanli2016/NLP-with-Python" -> "adashofdata/nlp-in-python-tutorial"
"susanli2016/NLP-with-Python" -> "dipanjanS/practical-machine-learning-with-python"
"susanli2016/NLP-with-Python" -> "RaRe-Technologies/gensim"
"susanli2016/NLP-with-Python" -> "microsoft/nlp-recipes"
"susanli2016/NLP-with-Python" -> "nlptown/nlp-notebooks"
"susanli2016/NLP-with-Python" -> "niderhoff/nlp-datasets"
"susanli2016/NLP-with-Python" -> "keon/awesome-nlp" ["e"=1]
"susanli2016/NLP-with-Python" -> "susanli2016/PySpark-and-MLlib" ["e"=1]
"susanli2016/NLP-with-Python" -> "cemoody/lda2vec"
"susanli2016/NLP-with-Python" -> "JasonKessler/scattertext"
"susanli2016/NLP-with-Python" -> "brightmart/text_classification"
"dipanjanS/hands-on-transfer-learning-with-python" -> "artix41/awesome-transfer-learning" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/practical-machine-learning-with-python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/hands-on-transfer-learning-with-python" -> "PacktPublishing/Hands-On-Transfer-Learning-with-Python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/text-analytics-with-python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "easezyc/deep-transfer-learning" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "hfawaz/bigdata18" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/hands-on-transfer-learning-with-python" -> "jindongwang/transferlearning-tutorial" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "yaoyao-liu/meta-transfer-learning" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "huggingface/naacl_transfer_learning_tutorial"
"dipanjanS/hands-on-transfer-learning-with-python" -> "keras-team/keras-applications" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/hands-on-transfer-learning-with-python" -> "thuml/Transfer-Learning-Library" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "thuml/Xlearn" ["e"=1]
"costezki/awesome-nlprojects" -> "NirantK/nlp-python-deep-learning"
"explosion/sense2vec" -> "explosion/projects"
"explosion/sense2vec" -> "chartbeat-labs/textacy"
"explosion/sense2vec" -> "explosion/thinc"
"explosion/sense2vec" -> "explosion/prodigy-recipes"
"explosion/sense2vec" -> "explosion/spacy-transformers"
"explosion/sense2vec" -> "huggingface/neuralcoref"
"explosion/sense2vec" -> "ICLRandD/Blackstone" ["e"=1]
"explosion/sense2vec" -> "ddangelov/Top2Vec"
"explosion/sense2vec" -> "JasonKessler/scattertext"
"explosion/sense2vec" -> "allenai/scispacy" ["e"=1]
"explosion/sense2vec" -> "facebookresearch/InferSent"
"explosion/sense2vec" -> "NorskRegnesentral/skweak"
"explosion/sense2vec" -> "graphbrain/graphbrain" ["e"=1]
"explosion/sense2vec" -> "DerwenAI/pytextrank" ["e"=1]
"explosion/sense2vec" -> "explosion/spacy-models"
"thompsonb/vecalign" -> "danielvarga/hunalign"
"thompsonb/vecalign" -> "rsennrich/Bleualign"
"thompsonb/vecalign" -> "bitextor/bitextor"
"thompsonb/vecalign" -> "bitextor/bicleaner"
"thompsonb/vecalign" -> "bfsujason/bertalign"
"thompsonb/vecalign" -> "Helsinki-NLP/OpusFilter"
"thompsonb/vecalign" -> "thammegowda/mtdata"
"explosion/spacy-transformers" -> "explosion/projects"
"explosion/spacy-transformers" -> "explosion/spacy-models"
"explosion/spacy-transformers" -> "explosion/thinc"
"explosion/spacy-transformers" -> "allenai/scispacy" ["e"=1]
"explosion/spacy-transformers" -> "explosion/prodigy-recipes"
"explosion/spacy-transformers" -> "explosion/spacy-streamlit" ["e"=1]
"explosion/spacy-transformers" -> "chartbeat-labs/textacy"
"explosion/spacy-transformers" -> "explosion/sense2vec"
"explosion/spacy-transformers" -> "explosion/spacy-stanza"
"explosion/spacy-transformers" -> "deepset-ai/FARM"
"explosion/spacy-transformers" -> "huggingface/neuralcoref"
"explosion/spacy-transformers" -> "DerwenAI/pytextrank" ["e"=1]
"explosion/spacy-transformers" -> "ines/spacy-course"
"explosion/spacy-transformers" -> "kevinlu1248/pyate" ["e"=1]
"explosion/spacy-transformers" -> "kormilitzin/med7" ["e"=1]
"ronxin/wevi" -> "miyyer/dan"
"ronxin/wevi" -> "chrisjmccormick/word2vec_commented"
"ronxin/wevi" -> "seomoz/word2gauss" ["e"=1]
"ronxin/wevi" -> "clab/dynet_tutorial_examples"
"ronxin/wevi" -> "mesnilgr/nbsvm" ["e"=1]
"ronxin/wevi" -> "cemoody/lda2vec"
"ronxin/wevi" -> "tmikolov/word2vec"
"ronxin/wevi" -> "wlin12/wang2vec" ["e"=1]
"ronxin/wevi" -> "dewarim/reddit-data-tools"
"ronxin/wevi" -> "kojisekig/word2vec-lucene"
"THUNLP-MT/Document-Transformer" -> "lena-voita/good-translation-wrong-in-context" ["e"=1]
"JohnSnowLabs/nlu" -> "explosion/spacy-streamlit" ["e"=1]
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp-models"
"JohnSnowLabs/nlu" -> "NorskRegnesentral/skweak"
"JohnSnowLabs/nlu" -> "recognai/rubrix"
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp-workshop"
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp"
"JohnSnowLabs/nlu" -> "allenai/pawls"
"JohnSnowLabs/nlu" -> "MaartenGr/PolyFuzz"
"JohnSnowLabs/nlu" -> "PrithivirajDamodaran/Gramformer"
"JohnSnowLabs/nlu" -> "ddangelov/Top2Vec"
"JohnSnowLabs/nlu" -> "MilaNLProc/contextualized-topic-models"
"JohnSnowLabs/nlu" -> "graphbrain/graphbrain" ["e"=1]
"JohnSnowLabs/nlu" -> "Novetta/adaptnlp" ["e"=1]
"JohnSnowLabs/nlu" -> "PrithivirajDamodaran/Styleformer"
"JohnSnowLabs/nlu" -> "Pandora-Intelligence/concise-concepts"
"erre-quadro/spikex" -> "KennethEnevoldsen/augmenty"
"erre-quadro/spikex" -> "NorskRegnesentral/skweak"
"erre-quadro/spikex" -> "UB-Mannheim/spacyopentapioca" ["e"=1]
"erre-quadro/spikex" -> "recognai/rubrix"
"erre-quadro/spikex" -> "graphbrain/graphbrain" ["e"=1]
"erre-quadro/spikex" -> "jenojp/negspacy" ["e"=1]
"erre-quadro/spikex" -> "DerwenAI/kglab" ["e"=1]
"erre-quadro/spikex" -> "DFKI-NLP/thermostat"
"erre-quadro/spikex" -> "kevinlu1248/pyate" ["e"=1]
"erre-quadro/spikex" -> "MaartenGr/PolyFuzz"
"Bergvca/string_grouper" -> "MaartenGr/PolyFuzz"
"Bergvca/string_grouper" -> "ing-bank/sparse_dot_topn"
"jcyk/gtos" -> "jcyk/AMR-gs"
"jcyk/gtos" -> "rikdz/GraphWriter"
"jcyk/gtos" -> "QAQ-v/HetGT"
"jcyk/gtos" -> "hugochan/RL-based-Graph2Seq-for-NQG" ["e"=1]
"jcyk/gtos" -> "beckdaniel/acl2018_graph2seq"
"ChunyuanLI/Optimus" -> "dreasysnail/POINTER"
"ChunyuanLI/Optimus" -> "WHUIR/PPVAE"
"ChunyuanLI/Optimus" -> "sodawater/T-CVAE" ["e"=1]
"ChunyuanLI/Optimus" -> "cindyxinyiwang/deep-latent-sequence-model"
"ChunyuanLI/Optimus" -> "timbmg/Sentence-VAE"
"ChunyuanLI/Optimus" -> "Nrgeup/controllable-text-attribute-transfer"
"ChunyuanLI/Optimus" -> "guangyliu/LatentOps" ["e"=1]
"ChunyuanLI/Optimus" -> "fangleai/TransformerCVAE" ["e"=1]
"ChunyuanLI/Optimus" -> "uber-research/PPLM"
"ChunyuanLI/Optimus" -> "XiangLi1999/Diffusion-LM" ["e"=1]
"ChunyuanLI/Optimus" -> "cookielee77/DAST"
"ChunyuanLI/Optimus" -> "jxhe/vae-lagging-encoder" ["e"=1]
"ChunyuanLI/Optimus" -> "roomylee/EMNLP-2019-Papers"
"ChunyuanLI/Optimus" -> "mingdachen/disentangle-semantics-syntax" ["e"=1]
"lidangzzz/hedgehog-lab" -> "OvidijusParsiunas/myvision"
"lidangzzz/hedgehog-lab" -> "vuejs/docs-next" ["e"=1]
"lidangzzz/hedgehog-lab" -> "monyhar/monyhar" ["e"=1]
"lidangzzz/hedgehog-lab" -> "monyhar/monyhar-lite" ["e"=1]
"lidangzzz/hedgehog-lab" -> "BeautyYuYanli/full-mark-composition-generator" ["e"=1]
"lidangzzz/hedgehog-lab" -> "upmasked/number-verifier"
"lidangzzz/hedgehog-lab" -> "Himself65/did-zhihu-close-down-today"
"lidangzzz/hedgehog-lab" -> "elvinmahmudov/jget" ["e"=1]
"lidangzzz/hedgehog-lab" -> "boism-org/northpole" ["e"=1]
"lidangzzz/hedgehog-lab" -> "MrRameshRajendran/Hybrid_MultiCloud_Overlay" ["e"=1]
"lidangzzz/hedgehog-lab" -> "Chi-Task-Force/Chi-Corpus" ["e"=1]
"lidangzzz/hedgehog-lab" -> "fabien-h/acta" ["e"=1]
"lidangzzz/hedgehog-lab" -> "fast-ide/fast-ide" ["e"=1]
"lidangzzz/hedgehog-lab" -> "celer-network/goCeler-oss" ["e"=1]
"lidangzzz/hedgehog-lab" -> "minimaxir/gpt-3-experiments"
"learning511/cs224n-learning-camp" -> "hankcs/CS224n"
"learning511/cs224n-learning-camp" -> "stanfordnlp/cs224n-winter17-notes"
"learning511/cs224n-learning-camp" -> "sharedeeply/cs231n-camp" ["e"=1]
"learning511/cs224n-learning-camp" -> "MLjian/TextClassificationImplement" ["e"=1]
"learning511/cs224n-learning-camp" -> "thunlp/RCPapers" ["e"=1]
"learning511/cs224n-learning-camp" -> "learning511/Stanford-Machine-Learning-camp" ["e"=1]
"learning511/cs224n-learning-camp" -> "zibuyu/research_tao" ["e"=1]
"learning511/cs224n-learning-camp" -> "Y1ran/NLP-BERT--ChineseVersion" ["e"=1]
"learning511/cs224n-learning-camp" -> "ZacBi/CS224n-2019-solutions"
"learning511/cs224n-learning-camp" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"learning511/cs224n-learning-camp" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["e"=1]
"learning511/cs224n-learning-camp" -> "Pelhans/Z_knowledge_graph" ["e"=1]
"learning511/cs224n-learning-camp" -> "jiangxinyang227/textClassifier" ["e"=1]
"learning511/cs224n-learning-camp" -> "moneyDboat/data_grand" ["e"=1]
"learning511/cs224n-learning-camp" -> "RedstoneWill/MachineLearningInAction-Camp" ["e"=1]
"IBM/pytorch-seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"IBM/pytorch-seq2seq" -> "eladhoffer/seq2seq.pytorch"
"IBM/pytorch-seq2seq" -> "keon/seq2seq"
"IBM/pytorch-seq2seq" -> "pytorch/text"
"IBM/pytorch-seq2seq" -> "spro/practical-pytorch"
"IBM/pytorch-seq2seq" -> "OpenNMT/OpenNMT-py"
"IBM/pytorch-seq2seq" -> "jadore801120/attention-is-all-you-need-pytorch"
"IBM/pytorch-seq2seq" -> "huggingface/pytorch-pretrained-BERT"
"IBM/pytorch-seq2seq" -> "facebookresearch/fairseq-py"
"IBM/pytorch-seq2seq" -> "abisee/pointer-generator" ["e"=1]
"IBM/pytorch-seq2seq" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"IBM/pytorch-seq2seq" -> "salesforce/awd-lstm-lm"
"IBM/pytorch-seq2seq" -> "google/seq2seq"
"IBM/pytorch-seq2seq" -> "lanpa/tensorboard-pytorch" ["e"=1]
"IBM/pytorch-seq2seq" -> "codertimo/BERT-pytorch"
"NVIDIA/sentiment-discovery" -> "openai/generating-reviews-discovering-sentiment"
"NVIDIA/sentiment-discovery" -> "guillitte/pytorch-sentiment-neuron"
"NVIDIA/sentiment-discovery" -> "facebookresearch/fairseq-py"
"NVIDIA/sentiment-discovery" -> "dnouri/skorch" ["e"=1]
"NVIDIA/sentiment-discovery" -> "zihangdai/mos"
"NVIDIA/sentiment-discovery" -> "facebookresearch/InferSent"
"NVIDIA/sentiment-discovery" -> "salesforce/awd-lstm-lm"
"NVIDIA/sentiment-discovery" -> "huggingface/torchMoji"
"NVIDIA/sentiment-discovery" -> "salesforce/pytorch-qrnn"
"NVIDIA/sentiment-discovery" -> "facebookresearch/SentEval"
"NVIDIA/sentiment-discovery" -> "openai/finetune-transformer-lm"
"NVIDIA/sentiment-discovery" -> "facebookresearch/MUSE"
"NVIDIA/sentiment-discovery" -> "huggingface/pytorch-openai-transformer-lm"
"NVIDIA/sentiment-discovery" -> "NVIDIA/OpenSeq2Seq" ["e"=1]
"NVIDIA/sentiment-discovery" -> "faneshion/MatchZoo" ["e"=1]
"deborausujono/word2vecpy" -> "tscheepers/word2vec"
"deborausujono/word2vecpy" -> "klb3713/word2vec"
"deborausujono/word2vecpy" -> "fanglanting/skip-gram-pytorch"
"deborausujono/word2vecpy" -> "bamtercelboo/Word_Similarity_and_Word_Analogy" ["e"=1]
"deborausujono/word2vecpy" -> "tankle/word2vec"
"deborausujono/word2vecpy" -> "enewe101/word2vec"
"deborausujono/word2vecpy" -> "hans/glove.py"
"deborausujono/word2vecpy" -> "Adoni/word2vec_pytorch"
"rohithreddy024/VAE-Text-Generation" -> "iconix/pytorch-text-vae"
"salesforce/pytorch-qrnn" -> "salesforce/awd-lstm-lm"
"salesforce/pytorch-qrnn" -> "taolei87/sru"
"salesforce/pytorch-qrnn" -> "facebookresearch/fairseq-py"
"salesforce/pytorch-qrnn" -> "lanpa/tensorboard-pytorch" ["e"=1]
"salesforce/pytorch-qrnn" -> "mila-udem/welcome_tutorials"
"salesforce/pytorch-qrnn" -> "eladhoffer/seq2seq.pytorch"
"salesforce/pytorch-qrnn" -> "salesforce/cove" ["e"=1]
"salesforce/pytorch-qrnn" -> "salesforce/matchbox"
"salesforce/pytorch-qrnn" -> "zihangdai/mos"
"salesforce/pytorch-qrnn" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"salesforce/pytorch-qrnn" -> "MaximumEntropy/Seq2Seq-PyTorch"
"salesforce/pytorch-qrnn" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/pytorch-qrnn" -> "IBM/pytorch-seq2seq"
"salesforce/pytorch-qrnn" -> "pytorch/text"
"salesforce/pytorch-qrnn" -> "spro/practical-pytorch"
"suragnair/seqGAN" -> "ZiJianZhao/SeqGAN-PyTorch"
"suragnair/seqGAN" -> "LantaoYu/SeqGAN"
"suragnair/seqGAN" -> "williamSYSU/TextGAN-PyTorch"
"suragnair/seqGAN" -> "X-czh/SeqGAN-PyTorch"
"suragnair/seqGAN" -> "CR-Gjx/LeakGAN"
"suragnair/seqGAN" -> "geek-ai/Texygen"
"suragnair/seqGAN" -> "MaximumEntropy/Seq2Seq-PyTorch"
"suragnair/seqGAN" -> "wiseodd/controlled-text-generation"
"suragnair/seqGAN" -> "Maluuba/nlg-eval" ["e"=1]
"suragnair/seqGAN" -> "keon/seq2seq"
"suragnair/seqGAN" -> "snakeztc/NeuralDialog-CVAE" ["e"=1]
"suragnair/seqGAN" -> "codekansas/seqgan-text-tensorflow"
"suragnair/seqGAN" -> "jakezhaojb/ARAE"
"suragnair/seqGAN" -> "lancopku/DPGAN" ["e"=1]
"suragnair/seqGAN" -> "IBM/pytorch-seq2seq"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTensor"
"NiuTrans/MT-paper-lists" -> "NiuTrans/LanguageCodes"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTrans.NMT"
"lyeoni/nlp-tutorial" -> "graykode/nlp-tutorial"
"lyeoni/nlp-tutorial" -> "joosthub/PyTorchNLPBook"
"lyeoni/nlp-tutorial" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"lyeoni/nlp-tutorial" -> "thunlp/PLMpapers"
"lyeoni/nlp-tutorial" -> "msgi/nlp-journey" ["e"=1]
"lyeoni/nlp-tutorial" -> "huseinzol05/NLP-Models-Tensorflow" ["e"=1]
"lyeoni/nlp-tutorial" -> "Separius/awesome-sentence-embedding"
"lyeoni/nlp-tutorial" -> "DSKSD/DeepNLP-models-Pytorch"
"lyeoni/nlp-tutorial" -> "songyingxin/NLPer-Interview" ["e"=1]
"lyeoni/nlp-tutorial" -> "kk7nc/Text_Classification" ["e"=1]
"lyeoni/nlp-tutorial" -> "Jiakui/awesome-bert" ["e"=1]
"lyeoni/nlp-tutorial" -> "changwookjun/nlp-paper" ["e"=1]
"lyeoni/nlp-tutorial" -> "ivan-bilan/The-NLP-Pandect"
"lyeoni/nlp-tutorial" -> "zibuyu/research_tao" ["e"=1]
"lyeoni/nlp-tutorial" -> "liuhuanyong/ChineseNLPCorpus" ["e"=1]
"Tiiiger/bert_score" -> "google-research/bleurt"
"Tiiiger/bert_score" -> "Maluuba/nlg-eval" ["e"=1]
"Tiiiger/bert_score" -> "AIPHES/emnlp19-moverscore"
"Tiiiger/bert_score" -> "mjpost/sacrebleu"
"Tiiiger/bert_score" -> "nlpyang/PreSumm" ["e"=1]
"Tiiiger/bert_score" -> "neulab/BARTScore" ["e"=1]
"Tiiiger/bert_score" -> "facebookresearch/DPR" ["e"=1]
"Tiiiger/bert_score" -> "google-research/language" ["e"=1]
"Tiiiger/bert_score" -> "pltrdy/rouge" ["e"=1]
"Tiiiger/bert_score" -> "Yale-LILY/SummEval" ["e"=1]
"Tiiiger/bert_score" -> "fuzhenxin/Style-Transfer-in-Text"
"Tiiiger/bert_score" -> "uber-research/PPLM"
"Tiiiger/bert_score" -> "THUNLP-MT/TG-Reading-List"
"Tiiiger/bert_score" -> "facebookresearch/XLM"
"Tiiiger/bert_score" -> "google-research-datasets/paws"
"snorkel-team/snorkel" -> "snorkel-team/snorkel-tutorials"
"snorkel-team/snorkel" -> "NorskRegnesentral/skweak"
"snorkel-team/snorkel" -> "makcedward/nlpaug"
"snorkel-team/snorkel" -> "cgnorthcutt/cleanlab" ["e"=1]
"snorkel-team/snorkel" -> "recognai/rubrix"
"snorkel-team/snorkel" -> "doccano/doccano" ["e"=1]
"snorkel-team/snorkel" -> "mlflow/mlflow" ["e"=1]
"snorkel-team/snorkel" -> "QData/TextAttack"
"snorkel-team/snorkel" -> "marcotcr/checklist"
"snorkel-team/snorkel" -> "iterative/cml" ["e"=1]
"snorkel-team/snorkel" -> "bentoml/BentoML" ["e"=1]
"snorkel-team/snorkel" -> "huggingface/tokenizers"
"snorkel-team/snorkel" -> "UKPLab/sentence-transformers"
"snorkel-team/snorkel" -> "PAIR-code/lit"
"snorkel-team/snorkel" -> "heartexlabs/label-studio" ["e"=1]
"NiuTrans/NiuTensor" -> "NiuTrans/MT-paper-lists"
"NiuTrans/NiuTensor" -> "NiuTrans/MTBook"
"NiuTrans/NiuTensor" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/NiuTensor" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NiuTensor" -> "NiuTrans/LanguageCodes"
"NiuTrans/NiuTensor" -> "NiuTrans/MTVenues"
"LooperXX/CS224n-Reading-Notes" -> "LooperXX/CS224n-Resource"
"LooperXX/CS224n-Reading-Notes" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"LooperXX/CS224n-Reading-Notes" -> "apachecn/stanford-cs224n-notes-zh"
"LooperXX/CS224n-Reading-Notes" -> "ZacBi/CS224n-2019-solutions"
"LooperXX/CS224n-Reading-Notes" -> "xixiaoyao/CS224n-winter-together"
"LooperXX/CS224n-Reading-Notes" -> "leerumor/nlp_tutorial" ["e"=1]
"LooperXX/CS224n-Reading-Notes" -> "LooperXX/LooperXX.github.io"
"LooperXX/CS224n-Reading-Notes" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"bert-nmt/bert-nmt" -> "kanekomasahiro/bert-gec" ["e"=1]
"bert-nmt/bert-nmt" -> "bzhangGo/zero"
"bert-nmt/bert-nmt" -> "yokusama/NMT_Papers"
"bert-nmt/bert-nmt" -> "neulab/compare-mt"
"bert-nmt/bert-nmt" -> "butsugiri/gec-pseudodata" ["e"=1]
"bert-nmt/bert-nmt" -> "chrisjbryant/errant" ["e"=1]
"bert-nmt/bert-nmt" -> "alvations/sacremoses"
"bert-nmt/bert-nmt" -> "clab/fast_align"
"bert-nmt/bert-nmt" -> "rsennrich/subword-nmt"
"bert-nmt/bert-nmt" -> "lemmonation/abnet"
"bert-nmt/bert-nmt" -> "THUNLP-MT/MT-Reading-List"
"bert-nmt/bert-nmt" -> "nusnlp/m2scorer" ["e"=1]
"bert-nmt/bert-nmt" -> "thu-coai/DA-Transformer" ["e"=1]
"bert-nmt/bert-nmt" -> "marian-nmt/marian"
"bert-nmt/bert-nmt" -> "TharinduDR/TransQuest"
"meereeum/lda2vec-tf" -> "nateraw/Lda2vec-Tensorflow"
"meereeum/lda2vec-tf" -> "cemoody/lda2vec"
"meereeum/lda2vec-tf" -> "mansweet/Gaussian-LDA-word2vec" ["e"=1]
"meereeum/lda2vec-tf" -> "vladsandulescu/topics"
"meereeum/lda2vec-tf" -> "datquocnguyen/LFTM" ["e"=1]
"meereeum/lda2vec-tf" -> "askerlee/topicvec" ["e"=1]
"meereeum/lda2vec-tf" -> "lda-project/lda"
"meereeum/lda2vec-tf" -> "vi3k6i5/GuidedLDA"
"meereeum/lda2vec-tf" -> "rajarshd/Gaussian_LDA" ["e"=1]
"meereeum/lda2vec-tf" -> "largelymfs/topical_word_embeddings" ["e"=1]
"meereeum/lda2vec-tf" -> "akashgit/autoencoding_vi_for_topic_models" ["e"=1]
"meereeum/lda2vec-tf" -> "AYLIEN/docnade"
"alexa/bort" -> "yitu-opensource/ConvBert"
"alexa/bort" -> "google-research/multilingual-t5"
"alexa/bort" -> "kakaobrain/KorNLUDatasets" ["e"=1]
"alexa/bort" -> "monologg/DistilKoBERT" ["e"=1]
"alexa/bort" -> "microsoft/fastformers"
"alexa/bort" -> "facebookresearch/SentAugment"
"alexa/bort" -> "bohanli/BERT-flow" ["e"=1]
"alexa/bort" -> "clovaai/AdamP" ["e"=1]
"alexa/bort" -> "google-research/electra"
"alexa/bort" -> "facebookresearch/cc_net"
"alexa/bort" -> "studio-ousia/luke" ["e"=1]
"alexa/bort" -> "microsoft/DeBERTa"
"Separius/awesome-sentence-embedding" -> "facebookresearch/InferSent"
"Separius/awesome-sentence-embedding" -> "facebookresearch/SentEval"
"Separius/awesome-sentence-embedding" -> "Hironsan/awesome-embedding-models"
"Separius/awesome-sentence-embedding" -> "UKPLab/sentence-transformers"
"Separius/awesome-sentence-embedding" -> "hanxiao/bert-as-service"
"Separius/awesome-sentence-embedding" -> "huggingface/pytorch-pretrained-BERT"
"Separius/awesome-sentence-embedding" -> "Jiakui/awesome-bert" ["e"=1]
"Separius/awesome-sentence-embedding" -> "zalandoresearch/flair"
"Separius/awesome-sentence-embedding" -> "epfml/sent2vec"
"Separius/awesome-sentence-embedding" -> "zihangdai/xlnet"
"Separius/awesome-sentence-embedding" -> "HIT-SCIR/ELMoForManyLangs"
"Separius/awesome-sentence-embedding" -> "tomohideshibata/BERT-related-papers"
"Separius/awesome-sentence-embedding" -> "kimiyoung/transformer-xl"
"Separius/awesome-sentence-embedding" -> "thunlp/PLMpapers"
"Separius/awesome-sentence-embedding" -> "namisan/mt-dnn"
"microsoft/DeBERTa" -> "facebookresearch/DPR" ["e"=1]
"microsoft/DeBERTa" -> "google-research/electra"
"microsoft/DeBERTa" -> "allenai/longformer"
"microsoft/DeBERTa" -> "facebookresearch/SpanBERT"
"microsoft/DeBERTa" -> "timoschick/pet" ["e"=1]
"microsoft/DeBERTa" -> "princeton-nlp/SimCSE" ["e"=1]
"microsoft/DeBERTa" -> "NVIDIA/Megatron-LM" ["e"=1]
"microsoft/DeBERTa" -> "google-research/text-to-text-transfer-transformer"
"microsoft/DeBERTa" -> "google-research/multilingual-t5"
"microsoft/DeBERTa" -> "namisan/mt-dnn"
"microsoft/DeBERTa" -> "princeton-nlp/LM-BFF" ["e"=1]
"microsoft/DeBERTa" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"microsoft/DeBERTa" -> "bigscience-workshop/promptsource" ["e"=1]
"microsoft/DeBERTa" -> "google-research/FLAN" ["e"=1]
"microsoft/DeBERTa" -> "thunlp/OpenPrompt" ["e"=1]
"zhuchen03/FreeLB" -> "AI-secure/InfoBERT"
"zhuchen03/FreeLB" -> "jind11/TextFooler"
"zhuchen03/FreeLB" -> "geyingli/unif"
"roomylee/ACL-2020-Papers" -> "roomylee/EMNLP-2019-Papers"
"roomylee/ACL-2020-Papers" -> "neubig/lowresource-nlp-bootcamp-2020"
"roomylee/ACL-2020-Papers" -> "pingpong-ai/dialogue-generation-models" ["e"=1]
"roomylee/ACL-2020-Papers" -> "google-research/xtreme"
"kimiyoung/transformer-xl" -> "zihangdai/xlnet"
"kimiyoung/transformer-xl" -> "huggingface/pytorch-pretrained-BERT"
"kimiyoung/transformer-xl" -> "facebookresearch/XLM"
"kimiyoung/transformer-xl" -> "codertimo/BERT-pytorch"
"kimiyoung/transformer-xl" -> "Kyubyong/transformer"
"kimiyoung/transformer-xl" -> "openai/finetune-transformer-lm"
"kimiyoung/transformer-xl" -> "brightmart/albert_zh" ["e"=1]
"kimiyoung/transformer-xl" -> "google/sentencepiece"
"kimiyoung/transformer-xl" -> "pytorch/fairseq"
"kimiyoung/transformer-xl" -> "allenai/bilm-tf"
"kimiyoung/transformer-xl" -> "OpenNMT/OpenNMT-py"
"kimiyoung/transformer-xl" -> "google-research/text-to-text-transfer-transformer"
"kimiyoung/transformer-xl" -> "tensorflow/tensor2tensor"
"kimiyoung/transformer-xl" -> "namisan/mt-dnn"
"kimiyoung/transformer-xl" -> "brightmart/roberta_zh" ["e"=1]
"leuchine/S-LSTM" -> "freesunshine0316/neural-graph-to-seq-mp"
"gaoisbest/NLP-Projects" -> "lihanghang/Knowledge-Graph" ["e"=1]
"gaoisbest/NLP-Projects" -> "l11x0m7/Question_Answering_Models" ["e"=1]
"gaoisbest/NLP-Projects" -> "astorfi/Deep-Learning-NLP"
"gaoisbest/NLP-Projects" -> "THUDM/NLP4Rec-Papers" ["e"=1]
"gaoisbest/NLP-Projects" -> "seriousran/awesome-qa" ["e"=1]
"gaoisbest/NLP-Projects" -> "quincyliang/nlp-data-augmentation" ["e"=1]
"gaoisbest/NLP-Projects" -> "lx865712528/EMNLP2018-JMEE" ["e"=1]
"xujinchang/EmotiW-2017-Audio-video-Emotion-Recognition" -> "ebadawy/EmotiW2017"
"jayparks/transformer" -> "wmathor/nlp-tutorial" ["e"=1]
"jayparks/transformer" -> "leviswind/pytorch-transformer"
"jayparks/transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"jayparks/transformer" -> "SamLynnEvans/Transformer"
"jayparks/transformer" -> "maxjcohen/transformer" ["e"=1]
"jayparks/transformer" -> "hyunwoongko/transformer" ["e"=1]
"elbayadm/attn2d" -> "salesforce/nonauto-nmt" ["e"=1]
"elbayadm/attn2d" -> "lium-lst/nmtpy"
"elbayadm/attn2d" -> "lium-lst/nmtpytorch"
"elbayadm/attn2d" -> "artetxem/undreamt"
"elbayadm/attn2d" -> "jsalt18-sentence-repl/jiant"
"elbayadm/attn2d" -> "ofirpress/YouMayNotNeedAttention" ["e"=1]
"elbayadm/attn2d" -> "pytorch/translate"
"elbayadm/attn2d" -> "nyu-dl/dl4mt-nonauto" ["e"=1]
"facebookresearch/flores" -> "neulab/compare-mt"
"facebookresearch/flores" -> "clab/fast_align"
"facebookresearch/flores" -> "thammegowda/mtdata"
"facebookresearch/flores" -> "mjpost/sacrebleu"
"facebookresearch/flores" -> "alvations/sacremoses"
"facebookresearch/flores" -> "facebookresearch/LASER"
"facebookresearch/flores" -> "mjpost/sacreBLEU"
"facebookresearch/flores" -> "Unbabel/COMET"
"facebookresearch/flores" -> "bzhangGo/zero"
"facebookresearch/flores" -> "glample/fastBPE"
"facebookresearch/flores" -> "artetxem/vecmap"
"facebookresearch/flores" -> "Jingjing-NLP/VOLT" ["e"=1]
"facebookresearch/flores" -> "facebookresearch/cc_net"
"facebookresearch/flores" -> "rsennrich/Bleualign"
"facebookresearch/flores" -> "facebookresearch/UnsupervisedMT"
"awslabs/sockeye" -> "clab/fast_align"
"awslabs/sockeye" -> "rsennrich/subword-nmt"
"awslabs/sockeye" -> "marian-nmt/marian"
"awslabs/sockeye" -> "mjpost/sacreBLEU"
"awslabs/sockeye" -> "neubig/nmt-tips"
"awslabs/sockeye" -> "moses-smt/mosesdecoder"
"awslabs/sockeye" -> "jonsafari/nmt-list"
"awslabs/sockeye" -> "zackchase/mxnet-the-straight-dope" ["e"=1]
"awslabs/sockeye" -> "dmlc/gluon-nlp"
"awslabs/sockeye" -> "EdinburghNLP/nematus"
"awslabs/sockeye" -> "neulab/compare-mt"
"awslabs/sockeye" -> "facebookresearch/UnsupervisedMT"
"awslabs/sockeye" -> "artetxem/undreamt"
"awslabs/sockeye" -> "nyu-dl/dl4mt-tutorial"
"awslabs/sockeye" -> "magic282/MXNMT"
"neulab/xnmt" -> "alicank/Translation-Augmented-LibriSpeech-Corpus"
"neulab/xnmt" -> "mjpost/sacreBLEU"
"neulab/xnmt" -> "neubig/lamtram"
"neulab/xnmt" -> "rsennrich/nematus"
"neulab/xnmt" -> "neulab/dynet-benchmark"
"Luvata/CS224N-2019" -> "ZacBi/CS224n-2019-solutions"
"Luvata/CS224N-2019" -> "rishabh-16/cs231n-2019-assignments"
"Luvata/CS224N-2019" -> "lrs1353281004/CS224n_winter2019_notes_and_assignments"
"Luvata/CS224N-2019" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"Luvata/CS224N-2019" -> "chrischute/squad" ["e"=1]
"Luvata/CS224N-2019" -> "alongstar518/CS224NHomeworks"
"MaximumEntropy/Seq2Seq-PyTorch" -> "eladhoffer/seq2seq.pytorch"
"MaximumEntropy/Seq2Seq-PyTorch" -> "IBM/pytorch-seq2seq"
"MaximumEntropy/Seq2Seq-PyTorch" -> "facebookresearch/fairseq-py"
"MaximumEntropy/Seq2Seq-PyTorch" -> "keon/seq2seq"
"MaximumEntropy/Seq2Seq-PyTorch" -> "spro/practical-pytorch"
"MaximumEntropy/Seq2Seq-PyTorch" -> "taolei87/sru"
"MaximumEntropy/Seq2Seq-PyTorch" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "pytorch/text"
"MaximumEntropy/Seq2Seq-PyTorch" -> "suragnair/seqGAN"
"MaximumEntropy/Seq2Seq-PyTorch" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "OpenNMT/OpenNMT-py"
"MaximumEntropy/Seq2Seq-PyTorch" -> "salesforce/pytorch-qrnn"
"MaximumEntropy/Seq2Seq-PyTorch" -> "dasguptar/treelstm.pytorch" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "lanpa/tensorboard-pytorch" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "ywk991112/pytorch-chatbot" ["e"=1]
"THUNLP-MT/THUMT" -> "THUNLP-MT/MT-Reading-List"
"THUNLP-MT/THUMT" -> "rsennrich/subword-nmt"
"THUNLP-MT/THUMT" -> "THUNLP-MT/Document-Transformer"
"THUNLP-MT/THUMT" -> "clab/fast_align"
"THUNLP-MT/THUMT" -> "linzehui/mRASP" ["e"=1]
"THUNLP-MT/THUMT" -> "lilt/alignment-scripts"
"THUNLP-MT/THUMT" -> "twairball/fairseq-zh-en" ["e"=1]
"THUNLP-MT/THUMT" -> "moses-smt/mosesdecoder"
"THUNLP-MT/THUMT" -> "mjpost/sacrebleu"
"THUNLP-MT/THUMT" -> "facebookresearch/UnsupervisedMT"
"THUNLP-MT/THUMT" -> "marian-nmt/marian"
"THUNLP-MT/THUMT" -> "OpenNMT/OpenNMT-tf"
"THUNLP-MT/THUMT" -> "THUNLP-MT/Mask-Align"
"THUNLP-MT/THUMT" -> "PANXiao1994/mRASP2" ["e"=1]
"THUNLP-MT/THUMT" -> "facebookresearch/XLM"
"THUNLP-MT/TG-Reading-List" -> "rikdz/GraphWriter"
"THUNLP-MT/TG-Reading-List" -> "ChenChengKuan/awesome-text-generation"
"THUNLP-MT/TG-Reading-List" -> "THUNLP-AIPoet/PaperList" ["e"=1]
"THUNLP-MT/TG-Reading-List" -> "fuzhenxin/Style-Transfer-in-Text"
"THUNLP-MT/TG-Reading-List" -> "asyml/texar-pytorch"
"THUNLP-MT/TG-Reading-List" -> "lancopku/Graph-to-seq-comment-generation"
"THUNLP-MT/TG-Reading-List" -> "FranxYao/Deep-Generative-Models-for-Natural-Language-Processing"
"THUNLP-MT/TG-Reading-List" -> "hit-computer/MTA-LSTM"
"THUNLP-MT/TG-Reading-List" -> "luofuli/DualRL"
"THUNLP-MT/TG-Reading-List" -> "uber-research/PPLM"
"THUNLP-MT/TG-Reading-List" -> "iwangjian/Paper-Reading" ["e"=1]
"THUNLP-MT/TG-Reading-List" -> "geek-ai/Texygen"
"THUNLP-MT/TG-Reading-List" -> "williamSYSU/TextGAN-PyTorch"
"THUNLP-MT/TG-Reading-List" -> "Tiiiger/bert_score"
"THUNLP-MT/TG-Reading-List" -> "wyu97/KENLG-Reading" ["e"=1]
"google-research/xtreme" -> "facebookresearch/MLQA"
"google-research/xtreme" -> "facebookresearch/cc_net"
"google-research/xtreme" -> "facebookresearch/XLM"
"google-research/xtreme" -> "roomylee/ACL-2020-Papers"
"google-research/xtreme" -> "neulab/awesome-align"
"google-research/xtreme" -> "google-research-datasets/tydiqa"
"google-research/xtreme" -> "facebookresearch/XNLI"
"google-research/xtreme" -> "cisnlp/simalign"
"google-research/xtreme" -> "shijie-wu/crosslingual-nlp"
"google-research/xtreme" -> "deepmind/xquad"
"google-research/xtreme" -> "google-research/multilingual-t5"
"google-research/xtreme" -> "nyu-mll/jiant"
"google-research/xtreme" -> "Adapter-Hub/adapter-transformers"
"google-research/xtreme" -> "facebookresearch/LASER"
"google-research/xtreme" -> "facebookresearch/anli" ["e"=1]
"clab/fast_align" -> "moses-smt/mosesdecoder"
"clab/fast_align" -> "rsennrich/subword-nmt"
"clab/fast_align" -> "neulab/awesome-align"
"clab/fast_align" -> "moses-smt/giza-pp"
"clab/fast_align" -> "marian-nmt/marian"
"clab/fast_align" -> "artetxem/vecmap"
"clab/fast_align" -> "cisnlp/simalign"
"clab/fast_align" -> "neulab/compare-mt"
"clab/fast_align" -> "alvations/sacremoses"
"clab/fast_align" -> "glample/fastBPE"
"clab/fast_align" -> "mjpost/sacreBLEU"
"clab/fast_align" -> "Unbabel/OpenKiwi"
"clab/fast_align" -> "moses-smt/mgiza"
"clab/fast_align" -> "rsennrich/wmt16-scripts"
"clab/fast_align" -> "lilt/alignment-scripts"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "aws-samples/aws-machine-learning-university-accelerated-cv"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "aws-samples/aws-machine-learning-university-accelerated-tab"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "aws-samples/aws-machine-learning-university-dte"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "Palashio/libra"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "PAIR-code/lit"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "microsoft/nlp-recipes"
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "tirthajyoti/Data-science-best-resources" ["e"=1]
"aws-samples/aws-machine-learning-university-accelerated-nlp" -> "justmarkham/scikit-learn-tips" ["e"=1]
"maxbachmann/RapidFuzz" -> "seatgeek/thefuzz"
"maxbachmann/RapidFuzz" -> "MaartenGr/PolyFuzz"
"maxbachmann/RapidFuzz" -> "life4/textdistance"
"maxbachmann/RapidFuzz" -> "moj-analytical-services/splink" ["e"=1]
"maxbachmann/RapidFuzz" -> "ddangelov/Top2Vec"
"maxbachmann/RapidFuzz" -> "dedupeio/dedupe" ["e"=1]
"maxbachmann/RapidFuzz" -> "Bergvca/string_grouper"
"maxbachmann/RapidFuzz" -> "huggingface/setfit"
"maxbachmann/RapidFuzz" -> "seatgeek/fuzzywuzzy"
"maxbachmann/RapidFuzz" -> "J535D165/recordlinkage" ["e"=1]
"maxbachmann/RapidFuzz" -> "pymupdf/PyMuPDF" ["e"=1]
"maxbachmann/RapidFuzz" -> "nalepae/pandarallel" ["e"=1]
"maxbachmann/RapidFuzz" -> "ing-bank/sparse_dot_topn"
"maxbachmann/RapidFuzz" -> "luozhouyang/python-string-similarity"
"maxbachmann/RapidFuzz" -> "mito-ds/monorepo" ["e"=1]
"spacy-io/spaCy" -> "spacy-io/sense2vec"
"spacy-io/spaCy" -> "piskvorky/gensim" ["e"=1]
"spacy-io/spaCy" -> "facebook/NAMAS" ["e"=1]
"spacy-io/spaCy" -> "chartbeat-labs/textacy"
"spacy-io/spaCy" -> "keonkim/awesome-nlp"
"spacy-io/spaCy" -> "smilli/py-corenlp"
"spacy-io/spaCy" -> "tensorflow/skflow" ["e"=1]
"spacy-io/spaCy" -> "ryankiros/skip-thoughts"
"spacy-io/spaCy" -> "cemoody/lda2vec"
"spacy-io/spaCy" -> "kengz/aiva"
"spacy-io/spaCy" -> "317070/kaggle-heart" ["e"=1]
"spacy-io/spaCy" -> "dbpedia/fact-extractor" ["e"=1]
"spacy-io/spaCy" -> "avisingh599/visual-qa" ["e"=1]
"spacy-io/spaCy" -> "knowitall/openie" ["e"=1]
"spacy-io/spaCy" -> "attardi/deepnl" ["e"=1]
"AmitMY/chimera" -> "diegma/graph-2-text"
"HendrikStrobelt/detecting-fake-text" -> "rowanz/grover"
"HendrikStrobelt/detecting-fake-text" -> "eric-mitchell/detect-gpt"
"cfmrp/tutorial" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_fundamentals"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_paper_summaries"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_newsletter"
"dair-ai/pytorch_notebooks" -> "omarsar/pytorch_notebooks"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_overview"
"dair-ai/pytorch_notebooks" -> "dair-ai/d2l-study-group"
"dair-ai/pytorch_notebooks" -> "vahidk/EffectivePyTorch" ["e"=1]
"dair-ai/pytorch_notebooks" -> "rasbt/stat453-deep-learning-ss20" ["e"=1]
"dair-ai/pytorch_notebooks" -> "earthspecies/from_zero_to_DSP"
"dair-ai/pytorch_notebooks" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/pytorch_notebooks" -> "omarsar/nlp_overview"
"keitakurita/practical-torchtext" -> "atnlp/torchtext-summary"
"keitakurita/practical-torchtext" -> "keitakurita/Practical_NLP_in_PyTorch"
"openai/sparse_attention" -> "openai/blocksparse" ["e"=1]
"openai/sparse_attention" -> "kimiyoung/transformer-xl"
"openai/sparse_attention" -> "allenai/longformer"
"openai/sparse_attention" -> "lucidrains/reformer-pytorch"
"openai/sparse_attention" -> "namisan/mt-dnn"
"openai/sparse_attention" -> "facebookresearch/adaptive-span"
"openai/sparse_attention" -> "zihangdai/xlnet"
"openai/sparse_attention" -> "openai/finetune-transformer-lm"
"openai/sparse_attention" -> "epfml/attention-cnn" ["e"=1]
"openai/sparse_attention" -> "tensorflow/lingvo"
"openai/sparse_attention" -> "facebookresearch/XLM"
"openai/sparse_attention" -> "bojone/attention" ["e"=1]
"openai/sparse_attention" -> "deep-spin/entmax"
"openai/sparse_attention" -> "NVIDIA/Megatron-LM" ["e"=1]
"openai/sparse_attention" -> "google-research/electra"
"thunlp/TAADpapers" -> "thunlp/OpenAttack"
"thunlp/TAADpapers" -> "QData/TextAttack"
"thunlp/TAADpapers" -> "jind11/TextFooler"
"thunlp/TAADpapers" -> "nesl/nlp_adversarial_examples"
"thunlp/TAADpapers" -> "thunlp/PLMpapers"
"thunlp/TAADpapers" -> "Eric-Wallace/universal-triggers"
"thunlp/TAADpapers" -> "P2333/Papers-of-Robust-ML" ["e"=1]
"thunlp/TAADpapers" -> "fuzhenxin/Style-Transfer-in-Text"
"thunlp/TAADpapers" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"thunlp/TAADpapers" -> "thunlp/PromptPapers" ["e"=1]
"thunlp/TAADpapers" -> "thunlp/RCPapers" ["e"=1]
"thunlp/TAADpapers" -> "namisan/mt-dnn"
"thunlp/TAADpapers" -> "marcotcr/checklist"
"thunlp/TAADpapers" -> "THUYimingLi/backdoor-learning-resources" ["e"=1]
"thunlp/TAADpapers" -> "textflint/textflint"
"UKPLab/kg2text" -> "zhaochaocs/DualEnc"
"cedrickchee/awesome-bert-nlp" -> "Jiakui/awesome-bert" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "tomohideshibata/BERT-related-papers"
"cedrickchee/awesome-bert-nlp" -> "thunlp/PLMpapers"
"cedrickchee/awesome-bert-nlp" -> "kaushaltrivedi/fast-bert"
"cedrickchee/awesome-bert-nlp" -> "msgi/nlp-journey" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "chineseGLUE/chineseGLUE" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "huggingface/awesome-papers"
"cedrickchee/awesome-bert-nlp" -> "brightmart/sentiment_analysis_fine_grain" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "thunlp/ERNIE" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "dair-ai/nlp_paper_summaries"
"cedrickchee/awesome-bert-nlp" -> "hscspring/All4NLP" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "NirantK/nlp-python-deep-learning"
"cedrickchee/awesome-bert-nlp" -> "yuquanle/Attention-Mechanisms-paper"
"cedrickchee/awesome-bert-nlp" -> "SunYanCN/BERT-chinese-text-classification-and-deployment" ["e"=1]
"cedrickchee/awesome-bert-nlp" -> "lihanghang/Knowledge-Graph" ["e"=1]
"diegma/graph-2-text" -> "freesunshine0316/neural-graph-to-seq-mp"
"diegma/graph-2-text" -> "AmitMY/chimera"
"diegma/graph-2-text" -> "rikdz/GraphWriter"
"diegma/graph-2-text" -> "zhaochaocs/DualEnc"
"diegma/graph-2-text" -> "mdtux89/OpenNMT-py-AMR-to-text"
"diegma/graph-2-text" -> "bastings/neuralmonkey"
"jhlau/doc2vec" -> "inejc/paragraph-vectors"
"jhlau/doc2vec" -> "jhlau/gensim"
"jhlau/doc2vec" -> "epfml/sent2vec"
"jhlau/doc2vec" -> "peter3125/sentence2vec"
"jhlau/doc2vec" -> "fbkarsdorp/doc2vec" ["e"=1]
"jhlau/doc2vec" -> "PrincetonML/SIF"
"jhlau/doc2vec" -> "ibrahimsharaf/doc2vec"
"jhlau/doc2vec" -> "MaxwellRebo/awesome-2vec" ["e"=1]
"jhlau/doc2vec" -> "iamxiaomu/doc2vec"
"jhlau/doc2vec" -> "sachinruk/doc2vec_tf"
"jhlau/doc2vec" -> "cemoody/lda2vec"
"jhlau/doc2vec" -> "JonathanRaiman/PVDM"
"jhlau/doc2vec" -> "facebookresearch/SentEval"
"jhlau/doc2vec" -> "salestock/fastText.py"
"jhlau/doc2vec" -> "jwieting/iclr2016" ["e"=1]
"jx00109/sentence2vec" -> "peter3125/sentence2vec"
"Robofied/Awesome-NLP-Resources" -> "Robofied/Awesome-Computer-Vision-Guide"
"andrewt3000/DL4NLP" -> "keonkim/awesome-nlp"
"andrewt3000/DL4NLP" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"andrewt3000/DL4NLP" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"andrewt3000/DL4NLP" -> "kjw0612/awesome-rnn" ["e"=1]
"andrewt3000/DL4NLP" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"andrewt3000/DL4NLP" -> "yoonkim/CNN_sentence"
"andrewt3000/DL4NLP" -> "rguthrie3/DeepLearningForNLPInPytorch"
"andrewt3000/DL4NLP" -> "Kyubyong/nlp_tasks"
"andrewt3000/DL4NLP" -> "facebook/MemNN" ["e"=1]
"andrewt3000/DL4NLP" -> "lipiji/App-DL" ["e"=1]
"andrewt3000/DL4NLP" -> "ryankiros/skip-thoughts"
"andrewt3000/DL4NLP" -> "edobashira/speech-language-processing"
"andrewt3000/DL4NLP" -> "cemoody/lda2vec"
"andrewt3000/DL4NLP" -> "dennybritz/chatbot-retrieval" ["e"=1]
"andrewt3000/DL4NLP" -> "dennybritz/cnn-text-classification-tf"
"IndicoDataSolutions/finetune" -> "explosion/spacy-pytorch-transformers"
"IndicoDataSolutions/finetune" -> "openai/finetune-transformer-lm"
"IndicoDataSolutions/finetune" -> "IndicoDataSolutions/Enso"
"IndicoDataSolutions/finetune" -> "huggingface/pytorch-openai-transformer-lm"
"IndicoDataSolutions/finetune" -> "t-makaro/animatplot"
"IndicoDataSolutions/finetune" -> "plasticityai/magnitude"
"IndicoDataSolutions/finetune" -> "chartbeat-labs/textacy"
"IndicoDataSolutions/finetune" -> "dmlc/gluon-nlp"
"IndicoDataSolutions/finetune" -> "huggingface/hmtl"
"IndicoDataSolutions/finetune" -> "huggingface/naacl_transfer_learning_tutorial"
"IndicoDataSolutions/finetune" -> "kaushaltrivedi/fast-bert"
"IndicoDataSolutions/finetune" -> "deepset-ai/FARM"
"IndicoDataSolutions/finetune" -> "feedly/transfer-nlp"
"IndicoDataSolutions/finetune" -> "textpipe/textpipe" ["e"=1]
"cisnlp/simalign" -> "neulab/awesome-align"
"cisnlp/simalign" -> "robertostling/eflomal"
"cisnlp/simalign" -> "clab/fast_align"
"cisnlp/simalign" -> "lilt/alignment-scripts"
"cisnlp/simalign" -> "artetxem/vecmap"
"cisnlp/simalign" -> "google-research-datasets/tydiqa"
"cisnlp/simalign" -> "thammegowda/mtdata"
"cisnlp/simalign" -> "Unbabel/OpenKiwi"
"cisnlp/simalign" -> "nttcslab-nlp/word_align"
"cisnlp/simalign" -> "alvations/sacremoses"
"neulab/awesome-align" -> "cisnlp/simalign"
"neulab/awesome-align" -> "robertostling/eflomal"
"neulab/awesome-align" -> "lilt/alignment-scripts"
"neulab/awesome-align" -> "clab/fast_align"
"neulab/awesome-align" -> "Unbabel/COMET"
"neulab/awesome-align" -> "Helsinki-NLP/OpusFilter"
"neulab/awesome-align" -> "TharinduDR/TransQuest"
"neulab/awesome-align" -> "thompsonb/vecalign"
"neulab/awesome-align" -> "thammegowda/mtdata"
"neulab/awesome-align" -> "thompsonb/prism"
"neulab/awesome-align" -> "alvations/sacremoses"
"neulab/awesome-align" -> "Unbabel/OpenKiwi"
"neulab/awesome-align" -> "THUNLP-MT/Mask-Align"
"neulab/awesome-align" -> "rsennrich/Bleualign"
"neulab/awesome-align" -> "shijie-wu/crosslingual-nlp"
"Amin-Tgz/awesome-tensorflow-2" -> "adhiraiyan/DeepLearningWithTF2.0"
"Amin-Tgz/awesome-tensorflow-2" -> "zhedongzheng/tensorflow-nlp"
"Amin-Tgz/awesome-tensorflow-2" -> "ageron/tf2_course" ["e"=1]
"Amin-Tgz/awesome-tensorflow-2" -> "YunYang1994/TensorFlow2.0-Examples" ["e"=1]
"Amin-Tgz/awesome-tensorflow-2" -> "PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2"
"Amin-Tgz/awesome-tensorflow-2" -> "sayakpaul/TF-2.0-Hacks"
"Amin-Tgz/awesome-tensorflow-2" -> "dragen1860/TensorFlow-2.x-Tutorials" ["e"=1]
"Amin-Tgz/awesome-tensorflow-2" -> "yusugomori/deeplearning-tf2"
"Amin-Tgz/awesome-tensorflow-2" -> "taki0112/Tensorflow2-Cookbook" ["e"=1]
"Amin-Tgz/awesome-tensorflow-2" -> "yassouali/ML_paper_notes"
"Amin-Tgz/awesome-tensorflow-2" -> "TrickyGo/Dive-into-DL-TensorFlow2.0" ["e"=1]
"Amin-Tgz/awesome-tensorflow-2" -> "jinfagang/yolov3_tf2"
"Amin-Tgz/awesome-tensorflow-2" -> "vahidk/EffectivePyTorch" ["e"=1]
"koomri/text-segmentation" -> "sedflix/awesome-topic-segmentation"
"koomri/text-segmentation" -> "pinkeshbadjatiya/neuralTextSegmentation"
"koomri/text-segmentation" -> "sebastianarnold/SECTOR"
"koomri/text-segmentation" -> "lxing532/improve_topic_seg"
"koomri/text-segmentation" -> "dennlinger/TopicalChange"
"koomri/text-segmentation" -> "EducationalTestingService/CATS"
"koomri/text-segmentation" -> "ReemHal/Semantic-Text-Segmentation-with-Embeddings"
"koomri/text-segmentation" -> "gdamaskinos/unsupervised_topic_segmentation"
"koomri/text-segmentation" -> "chschock/textsplit"
"gregversteeg/NPEET" -> "BiuBiuBiLL/NPEET_LNC"
"gregversteeg/NPEET" -> "gregversteeg/CorEx"
"gregversteeg/NPEET" -> "artemyk/ibsgd"
"gregversteeg/NPEET" -> "paulbrodersen/entropy_estimators"
"gregversteeg/NPEET" -> "simomarsili/ndd"
"gregversteeg/NPEET" -> "ravidziv/IDNNs"
"gregversteeg/NPEET" -> "gregversteeg/gaussianize"
"gregversteeg/NPEET" -> "sungyubkim/MINE-Mutual-Information-Neural-Estimation-"
"gregversteeg/NPEET" -> "sudiptodip15/CCMI"
"gregversteeg/NPEET" -> "artemyk/nonlinearIB"
"rishabh-16/cs231n-2019-assignments" -> "Luvata/CS224N-2019"
"miyyer/scpn" -> "ale3otik/paraphrases-generator"
"miyyer/scpn" -> "mingdachen/syntactic-template-generation"
"miyyer/scpn" -> "malllabiisc/SGCP"
"miyyer/scpn" -> "iamaaditya/neural-paraphrase-generation"
"miyyer/scpn" -> "tagoyal/sow-reap-paraphrasing"
"miyyer/scpn" -> "jwieting/para-nmt-50m"
"miyyer/scpn" -> "vsuthichai/paraphraser"
"miyyer/scpn" -> "marcotcr/sears"
"miyyer/scpn" -> "HarshTrivedi/paraphrase-generation"
"miyyer/scpn" -> "pmichel31415/teapot-nlp"
"miyyer/scpn" -> "danishpruthi/Adversarial-Misspellings"
"luozhouyang/python-string-similarity" -> "life4/textdistance"
"luozhouyang/python-string-similarity" -> "mammothb/symspellpy" ["e"=1]
"luozhouyang/python-string-similarity" -> "yaleimeng/Final_word_Similarity" ["e"=1]
"luozhouyang/python-string-similarity" -> "jamesturk/jellyfish"
"luozhouyang/python-string-similarity" -> "boudinfl/pke" ["e"=1]
"luozhouyang/python-string-similarity" -> "tdebatty/java-string-similarity" ["e"=1]
"luozhouyang/python-string-similarity" -> "panchunguang/ccks_baidu_entity_link" ["e"=1]
"luozhouyang/python-string-similarity" -> "zhanzecheng/Time_NLP" ["e"=1]
"luozhouyang/python-string-similarity" -> "GEM-benchmark/NL-Augmenter"
"luozhouyang/python-string-similarity" -> "maxbachmann/RapidFuzz"
"luozhouyang/python-string-similarity" -> "stephenhky/PyShortTextCategorization"
"luozhouyang/python-string-similarity" -> "ZhuiyiTechnology/pretrained-models" ["e"=1]
"luozhouyang/python-string-similarity" -> "liuhuanyong/SiameseSentenceSimilarity" ["e"=1]
"luozhouyang/python-string-similarity" -> "dbiir/UER-py" ["e"=1]
"luozhouyang/python-string-similarity" -> "NTMC-Community/MatchZoo" ["e"=1]
"HazyResearch/metal" -> "HazyResearch/babble"
"HazyResearch/metal" -> "HazyResearch/tanda"
"HazyResearch/metal" -> "HazyResearch/snorkel"
"HazyResearch/metal" -> "HazyResearch/reef"
"HazyResearch/metal" -> "snorkel-team/snorkel-tutorials"
"emorynlp/coref-hoi" -> "lxucs/coref-hoi"
"jalammar/ecco" -> "cdpierse/transformers-interpret"
"jalammar/ecco" -> "PAIR-code/lit"
"jalammar/ecco" -> "recognai/rubrix"
"jalammar/ecco" -> "NorskRegnesentral/skweak"
"jalammar/ecco" -> "marcotcr/checklist"
"jalammar/ecco" -> "jessevig/bertviz"
"jalammar/ecco" -> "ivan-bilan/The-NLP-Pandect"
"jalammar/ecco" -> "QData/TextAttack"
"jalammar/ecco" -> "ddangelov/Top2Vec"
"jalammar/ecco" -> "makcedward/nlpaug"
"jalammar/ecco" -> "MaartenGr/BERTopic"
"jalammar/ecco" -> "deepset-ai/FARM"
"jalammar/ecco" -> "huggingface/setfit"
"jalammar/ecco" -> "MaartenGr/KeyBERT"
"jalammar/ecco" -> "GEM-benchmark/NL-Augmenter"
"thunlp/HiddenKiller" -> "thunlp/ONION"
"thunlp/HiddenKiller" -> "thunlp/BkdAtk-LWS"
"thunlp/OpenAttack" -> "thunlp/TAADpapers"
"thunlp/OpenAttack" -> "QData/TextAttack"
"thunlp/OpenAttack" -> "jind11/TextFooler"
"thunlp/OpenAttack" -> "thunlp/SememePSO-Attack"
"thunlp/OpenAttack" -> "textflint/textflint"
"thunlp/OpenAttack" -> "thunlp/OpenBackdoor"
"thunlp/OpenAttack" -> "LinyangLee/BERT-Attack"
"thunlp/OpenAttack" -> "JHL-HUST/PWWS"
"thunlp/OpenAttack" -> "nesl/nlp_adversarial_examples"
"thunlp/OpenAttack" -> "neulab/RIPPLe"
"thunlp/OpenAttack" -> "thunlp/HiddenKiller"
"thunlp/OpenAttack" -> "robinjia/certified-word-sub"
"thunlp/OpenAttack" -> "THUYimingLi/backdoor-learning-resources" ["e"=1]
"thunlp/OpenAttack" -> "sfzhou5678/TextualAdversarialAttack-Tianchi"
"thunlp/OpenAttack" -> "lushleaf/Structure-free-certified-NLP"
"elastic/elasticsearch-java" -> "elastic/elasticsearch-specification"
"elastic/eland" -> "walterra/jupyter2kibana"
"elastic/eland" -> "infinitylogesh/mutate"
"elastic/eland" -> "elastic/elasticsearch-specification"
"mikhail-bot/awesome-gpt3" -> "sw-yx/gpt3-list"
"mikhail-bot/awesome-gpt3" -> "minimaxir/gpt-3-experiments"
"mikhail-bot/awesome-gpt3" -> "sevazhidkov/prompts-ai"
"sw-yx/gpt3-list" -> "mikhail-bot/awesome-gpt3"
"facebookresearch/SentAugment" -> "microsoft/fastformers"
"facebookresearch/SentAugment" -> "VITA-Group/BERT-Tickets"
"facebookresearch/SentAugment" -> "facebookresearch/KILT" ["e"=1]
"facebookresearch/SentAugment" -> "laiguokun/Funnel-Transformer" ["e"=1]
"lmthang/nmt.hybrid" -> "lmthang/nmt.matlab"
"lmthang/nmt.hybrid" -> "rsennrich/nematus"
"lmthang/nmt.hybrid" -> "rsennrich/wmt16-scripts"
"google-research/bigbird" -> "allenai/longformer"
"google-research/bigbird" -> "google-research/long-range-arena" ["e"=1]
"google-research/bigbird" -> "armancohan/long-summarization" ["e"=1]
"google-research/bigbird" -> "LowinLi/chinese-bigbird"
"google-research/bigbird" -> "google-research/multilingual-t5"
"google-research/bigbird" -> "vasudevgupta7/bigbird"
"google-research/bigbird" -> "openai/sparse_attention"
"google-research/bigbird" -> "microsoft/DeBERTa"
"google-research/bigbird" -> "KLUE-benchmark/KLUE" ["e"=1]
"google-research/bigbird" -> "HHousen/TransformerSum" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "kefirski/pytorch_RVAE"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "stas-semeniuta/textvae"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "cheng6076/Variational-LSTM-Autoencoder"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "timbmg/Sentence-VAE"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "carpedm20/variational-text-tensorflow" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "kelvinguu/neural-editor"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "snakeztc/NeuralDialog-CVAE" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "kefirski/contiguous-succotash" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "yiyang92/vae_for_text"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "shentianxiao/language-style-transfer"
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "iwyoo/LSTM-autoencoder" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "phreeza/tensorflow-vrnn" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "snowkylin/rnn-vae" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "twairball/keras_lstm_vae" ["e"=1]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" -> "shaohua0116/VAE-Tensorflow" ["e"=1]
"artetxem/undreamt" -> "artetxem/monoses"
"artetxem/undreamt" -> "artetxem/vecmap"
"artetxem/undreamt" -> "facebookresearch/UnsupervisedMT"
"artetxem/undreamt" -> "ZhenYangIACAS/unsupervised-NMT"
"artetxem/undreamt" -> "salesforce/matchbox"
"artetxem/undreamt" -> "mjpost/sacreBLEU"
"artetxem/undreamt" -> "jonsafari/nmt-list"
"artetxem/undreamt" -> "salesforce/nonauto-nmt" ["e"=1]
"artetxem/undreamt" -> "yistLin/pytorch-dual-learning"
"artetxem/undreamt" -> "clab/fast_align"
"artetxem/undreamt" -> "glample/fastBPE"
"artetxem/undreamt" -> "neulab/xnmt"
"artetxem/undreamt" -> "facebookresearch/MUSE"
"artetxem/undreamt" -> "marian-nmt/marian"
"artetxem/undreamt" -> "neulab/compare-mt"
"tokestermw/text-gan-tensorflow" -> "AustinStoneProjects/TextGAN"
"tuzhaopeng/NMT-Coverage" -> "tuzhaopeng/NMT"
"propbank/propbank-frames" -> "propbank/propbank-release"
"propbank/propbank-frames" -> "IBM/graph_ensemble_learning"
"hankcs/CS224n" -> "stanfordnlp/cs224n-winter17-notes"
"hankcs/CS224n" -> "learning511/cs224n-learning-camp"
"hankcs/CS224n" -> "maxim5/cs224n-winter-2017"
"hankcs/CS224n" -> "ZacBi/CS224n-2019-solutions"
"hankcs/CS224n" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"hankcs/CS224n" -> "yasiemir/cs224n"
"hankcs/CS224n" -> "DSKSD/DeepNLP-models-Pytorch"
"hankcs/CS224n" -> "Observerspy/CS224n"
"hankcs/CS224n" -> "chenghuige/wenzheng" ["e"=1]
"hankcs/CS224n" -> "nishithbsk/tensorflow_tutorials"
"hankcs/CS224n" -> "zyxue/stanford-cs229" ["e"=1]
"hankcs/CS224n" -> "allenai/bi-att-flow" ["e"=1]
"hankcs/CS224n" -> "baidu/DuReader" ["e"=1]
"hankcs/CS224n" -> "iphysresearch/DataSciComp" ["e"=1]
"hankcs/CS224n" -> "bogatyy/cs224d" ["e"=1]
"alvations/sacremoses" -> "mjpost/sacrebleu"
"alvations/sacremoses" -> "mjpost/sacreBLEU"
"alvations/sacremoses" -> "glample/fastBPE"
"alvations/sacremoses" -> "clab/fast_align"
"alvations/sacremoses" -> "thammegowda/mtdata"
"alvations/sacremoses" -> "neulab/compare-mt"
"alvations/sacremoses" -> "moses-smt/mosesdecoder"
"alvations/sacremoses" -> "rsennrich/subword-nmt"
"alvations/sacremoses" -> "Unbabel/OpenKiwi"
"alvations/sacremoses" -> "neulab/awesome-align"
"alvations/sacremoses" -> "bitextor/bitextor"
"alvations/sacremoses" -> "lilt/alignment-scripts"
"alvations/sacremoses" -> "marian-nmt/marian"
"alvations/sacremoses" -> "facebookresearch/flores"
"alvations/sacremoses" -> "cisnlp/simalign"
"Songweiping/TCN-TF" -> "YuanTingHsieh/TF_TCN"
"Songweiping/TCN-TF" -> "Baichenjia/Tensorflow-TCN"
"StefOe/indrnn-pytorch" -> "Sunnydreamrain/IndRNN_pytorch"
"StefOe/indrnn-pytorch" -> "theSage21/IndRNN"
"ChenChengKuan/awesome-text-generation" -> "wiseodd/controlled-text-generation"
"ChenChengKuan/awesome-text-generation" -> "THUNLP-MT/TG-Reading-List"
"ChenChengKuan/awesome-text-generation" -> "geek-ai/Texygen"
"ChenChengKuan/awesome-text-generation" -> "williamSYSU/TextGAN-PyTorch"
"ChenChengKuan/awesome-text-generation" -> "asyml/texar-pytorch"
"ChenChengKuan/awesome-text-generation" -> "CR-Gjx/LeakGAN"
"ChenChengKuan/awesome-text-generation" -> "asyml/texar"
"ChenChengKuan/awesome-text-generation" -> "tokenmill/awesome-nlg" ["e"=1]
"ChenChengKuan/awesome-text-generation" -> "timbmg/Sentence-VAE"
"ChenChengKuan/awesome-text-generation" -> "fuzhenxin/Style-Transfer-in-Text"
"ChenChengKuan/awesome-text-generation" -> "CLUEbenchmark/CLGE" ["e"=1]
"ChenChengKuan/awesome-text-generation" -> "hit-computer/MTA-LSTM"
"ChenChengKuan/awesome-text-generation" -> "salesforce/ctrl"
"ChenChengKuan/awesome-text-generation" -> "weilinie/RelGAN"
"ChenChengKuan/awesome-text-generation" -> "NLPScott/bert-Chinese-classification-task" ["e"=1]
"TobiasLee/MTA-LSTM-TensorFlow" -> "hit-computer/MTA-LSTM"
"TobiasLee/MTA-LSTM-TensorFlow" -> "libing125/CTEG"
"graykode/xlnet-Pytorch" -> "pingpong-ai/xlnet-pytorch"
"graykode/xlnet-Pytorch" -> "zihangdai/xlnet"
"graykode/xlnet-Pytorch" -> "ymcui/Chinese-PreTrained-XLNet" ["e"=1]
"graykode/xlnet-Pytorch" -> "kimiyoung/transformer-xl"
"graykode/xlnet-Pytorch" -> "nyu-dl/bert-gen"
"graykode/xlnet-Pytorch" -> "asyml/texar-pytorch"
"graykode/xlnet-Pytorch" -> "dhlee347/pytorchic-bert" ["e"=1]
"graykode/xlnet-Pytorch" -> "nlpyang/BertSum" ["e"=1]
"graykode/xlnet-Pytorch" -> "thunlp/ERNIE" ["e"=1]
"graykode/xlnet-Pytorch" -> "mrqa/MRQA-Shared-Task-2019" ["e"=1]
"graykode/xlnet-Pytorch" -> "huggingface/naacl_transfer_learning_tutorial"
"graykode/xlnet-Pytorch" -> "namisan/mt-dnn"
"graykode/xlnet-Pytorch" -> "codertimo/BERT-pytorch"
"graykode/xlnet-Pytorch" -> "Jiakui/awesome-bert" ["e"=1]
"graykode/xlnet-Pytorch" -> "nlpyang/PreSumm" ["e"=1]
"affjljoo3581/GPT2" -> "affjljoo3581/Expanda"
"affjljoo3581/GPT2" -> "affjljoo3581/canrevan"
"allenai/writing-code-for-nlp-research-emnlp2018" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "Tiiiger/bert_score"
"allenai/writing-code-for-nlp-research-emnlp2018" -> "neulab/compare-mt"
"allenai/writing-code-for-nlp-research-emnlp2018" -> "jasonwu0731/GLMP" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "AtmaHou/Task-Oriented-Dialogue-Dataset-Survey" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "budzianowski/multiwoz" ["e"=1]
"VICO-UoE/mlpractical" -> "uoe-iaml/iaml-labs"
"VICO-UoE/mlpractical" -> "bfranke1973/IRR-Template"
"VICO-UoE/mlpractical" -> "uoe-agents/Building-a-Complete-RL-System_Demonstration"
"nesl/nlp_adversarial_examples" -> "JHL-HUST/PWWS"
"nesl/nlp_adversarial_examples" -> "thunlp/SememePSO-Attack"
"nesl/nlp_adversarial_examples" -> "marcotcr/sears"
"nesl/nlp_adversarial_examples" -> "jind11/TextFooler"
"nesl/nlp_adversarial_examples" -> "robinjia/certified-word-sub"
"nesl/nlp_adversarial_examples" -> "pmichel31415/teapot-nlp"
"nesl/nlp_adversarial_examples" -> "lushleaf/Structure-free-certified-NLP"
"nesl/nlp_adversarial_examples" -> "nmrksic/counter-fitting" ["e"=1]
"nesl/nlp_adversarial_examples" -> "thunlp/TAADpapers"
"nesl/nlp_adversarial_examples" -> "aonotas/interpretable-adv"
"nesl/nlp_adversarial_examples" -> "miyyer/scpn"
"artetxem/vecmap" -> "artetxem/undreamt"
"artetxem/vecmap" -> "facebookresearch/MUSE"
"artetxem/vecmap" -> "artetxem/monoses"
"artetxem/vecmap" -> "clab/fast_align"
"artetxem/vecmap" -> "facebookresearch/XLM"
"artetxem/vecmap" -> "facebookresearch/UnsupervisedMT"
"artetxem/vecmap" -> "cisnlp/simalign"
"artetxem/vecmap" -> "ccsasuke/umwe"
"artetxem/vecmap" -> "neulab/compare-mt"
"artetxem/vecmap" -> "facebookresearch/LASER"
"artetxem/vecmap" -> "mjpost/sacreBLEU"
"artetxem/vecmap" -> "glample/fastBPE"
"artetxem/vecmap" -> "rsennrich/subword-nmt"
"artetxem/vecmap" -> "facebookresearch/flores"
"artetxem/vecmap" -> "lmthang/bivec"
"jbesomi/texthero" -> "fbdesignpro/sweetviz" ["e"=1]
"jbesomi/texthero" -> "JasonKessler/scattertext"
"jbesomi/texthero" -> "huggingface/nlp"
"jbesomi/texthero" -> "QData/TextAttack"
"jbesomi/texthero" -> "PAIR-code/lit"
"jbesomi/texthero" -> "neuml/txtai"
"jbesomi/texthero" -> "ddangelov/Top2Vec"
"jbesomi/texthero" -> "sfu-db/dataprep" ["e"=1]
"jbesomi/texthero" -> "alfiopuglisi/guietta" ["e"=1]
"jbesomi/texthero" -> "ivan-bilan/The-NLP-Pandect"
"jbesomi/texthero" -> "MaartenGr/BERTopic"
"jbesomi/texthero" -> "microsoft/nlp-recipes"
"jbesomi/texthero" -> "flairNLP/flair"
"jbesomi/texthero" -> "makcedward/nlpaug"
"jbesomi/texthero" -> "jfilter/clean-text"
"gregversteeg/corex_topic" -> "vi3k6i5/GuidedLDA"
"gregversteeg/corex_topic" -> "gregversteeg/CorEx"
"gregversteeg/corex_topic" -> "adjidieng/ETM" ["e"=1]
"gregversteeg/corex_topic" -> "gregversteeg/bio_corex"
"gregversteeg/corex_topic" -> "MilaNLProc/contextualized-topic-models"
"gregversteeg/corex_topic" -> "xiaohuiyan/BTM" ["e"=1]
"gregversteeg/corex_topic" -> "jhlau/topic_interpretability" ["e"=1]
"gregversteeg/corex_topic" -> "bab2min/tomotopy"
"gregversteeg/corex_topic" -> "akashgit/autoencoding_vi_for_topic_models" ["e"=1]
"gregversteeg/corex_topic" -> "martingerlach/hSBM_Topicmodel" ["e"=1]
"gregversteeg/corex_topic" -> "rwalk/gsdmm" ["e"=1]
"gregversteeg/corex_topic" -> "derekgreene/dynamic-nmf" ["e"=1]
"gregversteeg/corex_topic" -> "zll17/Neural_Topic_Models" ["e"=1]
"gregversteeg/corex_topic" -> "ddangelov/Top2Vec"
"gregversteeg/corex_topic" -> "MIND-Lab/OCTIS"
"NiuTrans/LanguageCodes" -> "NiuTrans/MTVenues"
"NiuTrans/LanguageCodes" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/LanguageCodes" -> "NiuTrans/NiuTrans.SMT"
"FesonX/cn-text-classifier" -> "HaowenHOU/single-pass-clustering-for-chinese-text"
"FesonX/cn-text-classifier" -> "zhangfazhan/text_clustering"
"Adoni/word2vec_pytorch" -> "bamtercelboo/pytorch_word2vec"
"Adoni/word2vec_pytorch" -> "theeluwin/pytorch-sgns"
"Adoni/word2vec_pytorch" -> "jojonki/word2vec-pytorch"
"Adoni/word2vec_pytorch" -> "fanglanting/skip-gram-pytorch"
"Adoni/word2vec_pytorch" -> "kefirski/pytorch_NEG_loss"
"Adoni/word2vec_pytorch" -> "deborausujono/word2vecpy"
"Adoni/word2vec_pytorch" -> "ray1007/pytorch-word2vec"
"Adoni/word2vec_pytorch" -> "Andras7/word2vec-pytorch"
"john-hewitt/structural-probes" -> "nelson-liu/contextual-repr-analysis"
"john-hewitt/structural-probes" -> "clarkkev/attention-analysis" ["e"=1]
"john-hewitt/structural-probes" -> "strubell/LISA" ["e"=1]
"john-hewitt/structural-probes" -> "yoavg/bert-syntax"
"john-hewitt/structural-probes" -> "harvardnlp/urnng" ["e"=1]
"john-hewitt/structural-probes" -> "facebookresearch/colorlessgreenRNNs"
"john-hewitt/structural-probes" -> "BeckyMarvin/LM_syneval"
"john-hewitt/structural-probes" -> "nikitakit/self-attentive-parser" ["e"=1]
"john-hewitt/structural-probes" -> "tommccoy1/hans" ["e"=1]
"john-hewitt/structural-probes" -> "miyyer/scpn"
"john-hewitt/structural-probes" -> "facebookresearch/LAMA" ["e"=1]
"john-hewitt/structural-probes" -> "neulab/compare-mt"
"john-hewitt/structural-probes" -> "nyu-mll/jiant"
"john-hewitt/structural-probes" -> "yikangshen/PRPN" ["e"=1]
"john-hewitt/structural-probes" -> "jihunchoi/unsupervised-treelstm" ["e"=1]
"BeckyMarvin/LM_syneval" -> "facebookresearch/colorlessgreenRNNs"
"Hironsan/awesome-embedding-models" -> "Separius/awesome-sentence-embedding"
"Hironsan/awesome-embedding-models" -> "MaxwellRebo/awesome-2vec" ["e"=1]
"Hironsan/awesome-embedding-models" -> "chihming/awesome-network-embedding" ["e"=1]
"Hironsan/awesome-embedding-models" -> "Hironsan/anago" ["e"=1]
"Hironsan/awesome-embedding-models" -> "facebookresearch/InferSent"
"Hironsan/awesome-embedding-models" -> "facebookresearch/MUSE"
"Hironsan/awesome-embedding-models" -> "facebookresearch/SentEval"
"Hironsan/awesome-embedding-models" -> "chakki-works/chakin" ["e"=1]
"Hironsan/awesome-embedding-models" -> "thunlp/NRLPapers" ["e"=1]
"Hironsan/awesome-embedding-models" -> "ryankiros/skip-thoughts"
"Hironsan/awesome-embedding-models" -> "Kyubyong/wordvectors"
"Hironsan/awesome-embedding-models" -> "huggingface/pytorch-pretrained-BERT"
"Hironsan/awesome-embedding-models" -> "facebookresearch/poincare-embeddings" ["e"=1]
"Hironsan/awesome-embedding-models" -> "plasticityai/magnitude"
"Hironsan/awesome-embedding-models" -> "allenai/bilm-tf"
"ari-holtzman/degen" -> "facebookresearch/unlikelihood_training"
"bitextor/bicleaner" -> "bitextor/bitextor"
"bitextor/bicleaner" -> "sortiz/tmxt"
"bitextor/bicleaner" -> "lilt/alignment-scripts"
"bitextor/bicleaner" -> "hainan-xv/zipporah"
"bitextor/bicleaner" -> "robertostling/eflomal"
"bitextor/bicleaner" -> "thompsonb/vecalign"
"bitextor/bicleaner" -> "M4t1ss/SoftAlignments"
"bitextor/bicleaner" -> "Helsinki-NLP/OpusFilter"
"facebookresearch/XNLI" -> "facebookresearch/XLM"
"facebookresearch/XNLI" -> "google-research/xtreme"
"facebookresearch/XNLI" -> "artetxem/vecmap"
"facebookresearch/XNLI" -> "facebookresearch/MLDoc"
"facebookresearch/XNLI" -> "facebookresearch/MUSE"
"facebookresearch/XNLI" -> "facebookresearch/MLQA"
"facebookresearch/adaptive-span" -> "facebookresearch/unlikelihood_training"
"facebookresearch/adaptive-span" -> "lucidrains/reformer-pytorch"
"facebookresearch/adaptive-span" -> "Smerity/sha-rnn"
"facebookresearch/adaptive-span" -> "huggingface/naacl_transfer_learning_tutorial"
"facebookresearch/adaptive-span" -> "nelson-liu/contextual-repr-analysis"
"facebookresearch/adaptive-span" -> "kimiyoung/transformer-xl"
"facebookresearch/adaptive-span" -> "mit-han-lab/lite-transformer" ["e"=1]
"facebookresearch/adaptive-span" -> "lucidrains/routing-transformer" ["e"=1]
"facebookresearch/adaptive-span" -> "openai/sparse_attention"
"facebookresearch/adaptive-span" -> "idiap/fast-transformers" ["e"=1]
"facebookresearch/adaptive-span" -> "allenai/tpu_pretrain"
"facebookresearch/adaptive-span" -> "facebookresearch/XLM"
"facebookresearch/adaptive-span" -> "mrqa/MRQA-Shared-Task-2019" ["e"=1]
"joeynmt/joeynmt" -> "neccam/slt" ["e"=1]
"joeynmt/joeynmt" -> "alvations/sacremoses"
"joeynmt/joeynmt" -> "kayoyin/transformer-slt" ["e"=1]
"joeynmt/joeynmt" -> "neccam/nslt" ["e"=1]
"joeynmt/joeynmt" -> "mjpost/sacreBLEU"
"joeynmt/joeynmt" -> "neulab/compare-mt"
"joeynmt/joeynmt" -> "facebookresearch/flores"
"joeynmt/joeynmt" -> "Unbabel/OpenKiwi"
"joeynmt/joeynmt" -> "rsennrich/subword-nmt"
"joeynmt/joeynmt" -> "neubig/lowresource-nlp-bootcamp-2020"
"joeynmt/joeynmt" -> "thammegowda/mtdata"
"joeynmt/joeynmt" -> "clab/fast_align"
"joeynmt/joeynmt" -> "neubig/nmt-tips"
"joeynmt/joeynmt" -> "bzhangGo/zero"
"joeynmt/joeynmt" -> "moses-smt/mosesdecoder"
"propbank/propbank-release" -> "propbank/propbank-frames"
"shivam5992/textstat" -> "cdimascio/py-readability-metrics"
"shivam5992/textstat" -> "wimmuskee/readability-score"
"shivam5992/textstat" -> "mmautner/readability"
"shivam5992/textstat" -> "chartbeat-labs/textacy"
"shivam5992/textstat" -> "life4/textdistance"
"shivam5992/textstat" -> "andreasvc/readability"
"shivam5992/textstat" -> "jfilter/clean-text"
"shivam5992/textstat" -> "kootenpv/contractions"
"shivam5992/textstat" -> "boudinfl/pke" ["e"=1]
"shivam5992/textstat" -> "nipunsadvilkar/pySBD" ["e"=1]
"shivam5992/textstat" -> "booknlp/booknlp"
"shivam5992/textstat" -> "aboSamoor/polyglot"
"shivam5992/textstat" -> "plasticityai/magnitude"
"shivam5992/textstat" -> "jbesomi/texthero"
"shivam5992/textstat" -> "artitw/text2text" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "Lynten/stanford-corenlp"
"stanfordnlp/python-stanford-corenlp" -> "smilli/py-corenlp"
"stanfordnlp/python-stanford-corenlp" -> "sina-al/pynlp"
"stanfordnlp/python-stanford-corenlp" -> "kentonl/e2e-coref"
"stanfordnlp/python-stanford-corenlp" -> "clarkkev/deep-coref"
"stanfordnlp/python-stanford-corenlp" -> "stanfordnlp/stanfordnlp"
"stanfordnlp/python-stanford-corenlp" -> "allenai/document-qa" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"PrithivirajDamodaran/Parrot_Paraphraser" -> "PrithivirajDamodaran/Styleformer"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "Vamsi995/Paraphrase-Generator"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "PrithivirajDamodaran/Gramformer"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "vsuthichai/paraphraser"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "RasaHQ/paraphraser"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "ramsrigouthamg/Questgen.ai" ["e"=1]
"PrithivirajDamodaran/Parrot_Paraphraser" -> "cdpierse/transformers-interpret"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "martiansideofthemoon/style-transfer-paraphrase"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "recognai/rubrix"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "EricFillion/happy-transformer"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "huggingface/setfit"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "google-research/pegasus" ["e"=1]
"PrithivirajDamodaran/Parrot_Paraphraser" -> "MaartenGr/KeyBERT"
"PrithivirajDamodaran/Parrot_Paraphraser" -> "neuspell/neuspell" ["e"=1]
"PrithivirajDamodaran/Parrot_Paraphraser" -> "makcedward/nlpaug"
"linkedin/detext" -> "deepset-ai/FARM"
"linkedin/detext" -> "linkedin/gdmix"
"linkedin/detext" -> "PAIR-code/lit"
"linkedin/detext" -> "oborchers/Fast_Sentence_Embeddings"
"linkedin/detext" -> "ddangelov/Top2Vec"
"linkedin/detext" -> "ivan-bilan/The-NLP-Pandect"
"linkedin/detext" -> "jfilter/clean-text"
"linkedin/detext" -> "microsoft/fastformers"
"linkedin/detext" -> "facebookresearch/TransCoder" ["e"=1]
"linkedin/detext" -> "huggingface/awesome-papers"
"linkedin/detext" -> "JohnSnowLabs/spark-nlp"
"linkedin/detext" -> "recognai/rubrix"
"linkedin/detext" -> "dair-ai/nlp_paper_summaries"
"linkedin/detext" -> "MaartenGr/BERTopic"
"linkedin/detext" -> "marcotcr/checklist"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicnlp_catalog"
"anoopkunchukuttan/indic_nlp_library" -> "libindic/indic-trans"
"anoopkunchukuttan/indic_nlp_library" -> "anoopkunchukuttan/indic_nlp_resources"
"anoopkunchukuttan/indic_nlp_library" -> "indicnlpweb/indicnlp_catalog"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indic-bert"
"anoopkunchukuttan/indic_nlp_library" -> "goru001/inltk"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicnlp_corpus"
"anoopkunchukuttan/indic_nlp_library" -> "taranjeet/hindi-tokenizer"
"anoopkunchukuttan/indic_nlp_library" -> "sanskrit-coders/indic_transliteration"
"anoopkunchukuttan/indic_nlp_library" -> "libindic/Transliteration"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicTrans"
"anoopkunchukuttan/indic_nlp_library" -> "google-research-datasets/dakshina"
"anoopkunchukuttan/indic_nlp_library" -> "facebookresearch/flores"
"anoopkunchukuttan/indic_nlp_library" -> "Open-Speech-EkStep/vakyansh-models"
"anoopkunchukuttan/indic_nlp_library" -> "artetxem/vecmap"
"artetxem/monoses" -> "artetxem/undreamt"
"artetxem/monoses" -> "artetxem/vecmap"
"artetxem/monoses" -> "artetxem/phrase2vec"
"artetxem/monoses" -> "facebookresearch/UnsupervisedMT"
"artetxem/monoses" -> "jonsafari/nmt-list"
"lilt/alignment-scripts" -> "M4t1ss/SoftAlignments"
"lilt/alignment-scripts" -> "THUNLP-MT/Mask-Align"
"lilt/alignment-scripts" -> "sufe-nlp/transformer-alignment"
"lilt/alignment-scripts" -> "neulab/awesome-align"
"mjpost/sacreBLEU" -> "neulab/compare-mt"
"mjpost/sacreBLEU" -> "alvations/sacremoses"
"mjpost/sacreBLEU" -> "marian-nmt/marian-examples"
"mjpost/sacreBLEU" -> "neubig/nmt-tips"
"mjpost/sacreBLEU" -> "clab/fast_align"
"mjpost/sacreBLEU" -> "neulab/xnmt"
"mjpost/sacreBLEU" -> "bitextor/bitextor"
"mjpost/sacreBLEU" -> "rsennrich/nematus"
"mjpost/sacreBLEU" -> "rsennrich/Bleualign"
"mjpost/sacreBLEU" -> "jonsafari/nmt-list"
"mjpost/sacreBLEU" -> "rsennrich/wmt16-scripts"
"mjpost/sacreBLEU" -> "glample/fastBPE"
"mjpost/sacreBLEU" -> "chrishokamp/constrained_decoding"
"mjpost/sacreBLEU" -> "moses-smt/mosesdecoder"
"mjpost/sacreBLEU" -> "jhclark/multeval"
"neulab/compare-mt" -> "thammegowda/mtdata"
"neulab/compare-mt" -> "mjpost/sacreBLEU"
"neulab/compare-mt" -> "clab/fast_align"
"neulab/compare-mt" -> "facebookresearch/Mask-Predict" ["e"=1]
"neulab/compare-mt" -> "facebookresearch/flores"
"neulab/compare-mt" -> "Unbabel/COMET"
"neulab/compare-mt" -> "alvations/sacremoses"
"neulab/compare-mt" -> "glample/fastBPE"
"neulab/compare-mt" -> "neulab/xnmt"
"neulab/compare-mt" -> "lilt/alignment-scripts"
"neulab/compare-mt" -> "harvardnlp/pytorch-struct"
"neulab/compare-mt" -> "nelson-liu/contextual-repr-analysis"
"neulab/compare-mt" -> "artetxem/vecmap"
"neulab/compare-mt" -> "neulab/awesome-align"
"neulab/compare-mt" -> "kahne/NonAutoregGenProgress" ["e"=1]
"j-min/tf_tutorial_plus" -> "Currie32/Text-Summarization-with-Amazon-Reviews"
"j-min/tf_tutorial_plus" -> "JayParks/tf-seq2seq"
"j-min/tf_tutorial_plus" -> "ematvey/tensorflow-seq2seq-tutorials"
"j-min/tf_tutorial_plus" -> "commonsense/conceptnet-numberbatch"
"JonathanRaiman/PVDM" -> "klb3713/sentence2vec"
"JonathanRaiman/PVDM" -> "zseymour/phrase2vec"
"JonathanRaiman/PVDM" -> "inejc/paragraph-vectors"
"JonathanRaiman/PVDM" -> "mesnilgr/iclr15" ["e"=1]
"JonathanRaiman/PVDM" -> "attardi/deepnl" ["e"=1]
"inejc/paragraph-vectors" -> "jhlau/doc2vec"
"inejc/paragraph-vectors" -> "JonathanRaiman/PVDM"
"inejc/paragraph-vectors" -> "theeluwin/pytorch-sgns"
"maxim5/cs224n-winter-2017" -> "hankcs/CS224n"
"PrithivirajDamodaran/Styleformer" -> "PrithivirajDamodaran/Gramformer"
"PrithivirajDamodaran/Styleformer" -> "PrithivirajDamodaran/Parrot_Paraphraser"
"PrithivirajDamodaran/Styleformer" -> "martiansideofthemoon/style-transfer-paraphrase"
"PrithivirajDamodaran/Styleformer" -> "zhijing-jin/Text_Style_Transfer_Survey"
"PrithivirajDamodaran/Styleformer" -> "lijuncen/Sentiment-and-Style-Transfer"
"PrithivirajDamodaran/Styleformer" -> "cdpierse/transformers-interpret"
"PrithivirajDamodaran/Styleformer" -> "tunib-ai/parallelformers" ["e"=1]
"PrithivirajDamodaran/Styleformer" -> "agaralabs/transformer-drg-style-transfer"
"PrithivirajDamodaran/Styleformer" -> "infinitylogesh/mutate"
"PrithivirajDamodaran/Styleformer" -> "rpryzant/delete_retrieve_generate"
"PrithivirajDamodaran/Styleformer" -> "artitw/text2text" ["e"=1]
"PrithivirajDamodaran/Styleformer" -> "ramsrigouthamg/Questgen.ai" ["e"=1]
"PrithivirajDamodaran/Styleformer" -> "lalitpagaria/obsei"
"bknyaz/emotiw" -> "ebadawy/EmotiW2017"
"ebadawy/EmotiW2017" -> "xujinchang/EmotiW-2017-Audio-video-Emotion-Recognition"
"ebadawy/EmotiW2017" -> "arassadin/emotiw2017"
"srvk/how2-dataset" -> "jayleicn/TVCaption" ["e"=1]
"stepthom/data_mining_resources" -> "stepthom/869_course"
"stepthom/data_mining_resources" -> "stepthom/sandbox"
"stepthom/data_mining_resources" -> "stepthom/NLP_course"
"stepthom/text_mining_resources" -> "stepthom/data_mining_resources"
"stepthom/text_mining_resources" -> "stepthom/NLP_course"
"stepthom/text_mining_resources" -> "brianspiering/awesome-dl4nlp"
"stepthom/text_mining_resources" -> "mihail911/nlp-library"
"stepthom/text_mining_resources" -> "stepthom/sandbox"
"stepthom/text_mining_resources" -> "stepthom/869_course"
"stepthom/text_mining_resources" -> "ivan-bilan/The-NLP-Pandect"
"stepthom/text_mining_resources" -> "stepthom/awesome-nlp"
"stepthom/text_mining_resources" -> "stephenhky/PyShortTextCategorization"
"PetrochukM/PyTorch-NLP" -> "pytorch/text"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/pytext"
"PetrochukM/PyTorch-NLP" -> "DSKSD/DeepNLP-models-Pytorch"
"PetrochukM/PyTorch-NLP" -> "allenai/allennlp"
"PetrochukM/PyTorch-NLP" -> "spro/practical-pytorch"
"PetrochukM/PyTorch-NLP" -> "outcastofmusic/quick-nlp"
"PetrochukM/PyTorch-NLP" -> "huggingface/pytorch-pretrained-BERT"
"PetrochukM/PyTorch-NLP" -> "rguthrie3/DeepLearningForNLPInPytorch"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/XLM"
"PetrochukM/PyTorch-NLP" -> "zalandoresearch/flair"
"PetrochukM/PyTorch-NLP" -> "salesforce/decaNLP"
"PetrochukM/PyTorch-NLP" -> "huggingface/pytorch-openai-transformer-lm"
"PetrochukM/PyTorch-NLP" -> "OpenNMT/OpenNMT-py"
"PetrochukM/PyTorch-NLP" -> "williamFalcon/pytorch-lightning" ["e"=1]
"PetrochukM/PyTorch-NLP" -> "NervanaSystems/nlp-architect"
"chiphuyen/lazynlp" -> "chiphuyen/python-is-cool" ["e"=1]
"chiphuyen/lazynlp" -> "chiphuyen/sotawhat"
"chiphuyen/lazynlp" -> "facebookresearch/XLM"
"chiphuyen/lazynlp" -> "facebookresearch/pytext"
"chiphuyen/lazynlp" -> "huggingface/hmtl"
"chiphuyen/lazynlp" -> "huggingface/pytorch-pretrained-BERT"
"chiphuyen/lazynlp" -> "zalandoresearch/flair"
"chiphuyen/lazynlp" -> "kimiyoung/transformer-xl"
"chiphuyen/lazynlp" -> "chiphuyen/coding-exercises" ["e"=1]
"chiphuyen/lazynlp" -> "chakki-works/doccano"
"chiphuyen/lazynlp" -> "dair-ai/nlp_paper_summaries"
"chiphuyen/lazynlp" -> "facebookresearch/LASER"
"chiphuyen/lazynlp" -> "ines/spacy-course"
"chiphuyen/lazynlp" -> "facebookresearch/pythia"
"chiphuyen/lazynlp" -> "salesforce/decaNLP"
"renatoviolin/next_word_prediction" -> "renatoviolin/Question-Answering-Albert-Electra"
"renatoviolin/next_word_prediction" -> "renatoviolin/Semantic-Search"
"renatoviolin/next_word_prediction" -> "goru001/inltk"
"renatoviolin/next_word_prediction" -> "dair-ai/nlp_paper_summaries"
"renatoviolin/next_word_prediction" -> "renatoviolin/Bart_T5-summarization"
"renatoviolin/next_word_prediction" -> "timoschick/pet" ["e"=1]
"renatoviolin/next_word_prediction" -> "QData/TextAttack"
"renatoviolin/next_word_prediction" -> "renatoviolin/Multiple-Choice-Question-Generation-T5-and-Text2Text"
"renatoviolin/next_word_prediction" -> "renatoviolin/T5-paraphrase-generation"
"renatoviolin/next_word_prediction" -> "craffel/dl3d-seminar"
"renatoviolin/next_word_prediction" -> "huggingface/awesome-papers"
"renatoviolin/next_word_prediction" -> "kaushaltrivedi/fast-bert"
"renatoviolin/next_word_prediction" -> "Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning"
"renatoviolin/next_word_prediction" -> "EricFillion/happy-transformer"
"renatoviolin/next_word_prediction" -> "jalammar/ecco"
"snorkel-team/snorkel-tutorials" -> "snorkel-team/snorkel"
"snorkel-team/snorkel-tutorials" -> "snorkel-team/snorkel-extraction"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/metal"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/snorkel-superglue"
"shrimai/Style-Transfer-Through-Back-Translation" -> "lijuncen/Sentiment-and-Style-Transfer"
"shrimai/Style-Transfer-Through-Back-Translation" -> "fuzhenxin/text_style_transfer"
"shrimai/Style-Transfer-Through-Back-Translation" -> "shentianxiao/language-style-transfer"
"shrimai/Style-Transfer-Through-Back-Translation" -> "lancopku/Unpaired-Sentiment-Translation" ["e"=1]
"shrimai/Style-Transfer-Through-Back-Translation" -> "vineetjohn/linguistic-style-transfer"
"shrimai/Style-Transfer-Through-Back-Translation" -> "raosudha89/GYAFC-corpus"
"shrimai/Style-Transfer-Through-Back-Translation" -> "harsh19/Shakespearizing-Modern-English"
"glample/fastBPE" -> "rsennrich/subword-nmt"
"glample/fastBPE" -> "alvations/sacremoses"
"glample/fastBPE" -> "clab/fast_align"
"glample/fastBPE" -> "facebookresearch/XLM"
"glample/fastBPE" -> "facebookresearch/UnsupervisedMT"
"glample/fastBPE" -> "marian-nmt/marian"
"glample/fastBPE" -> "neulab/compare-mt"
"glample/fastBPE" -> "mjpost/sacreBLEU"
"glample/fastBPE" -> "moses-smt/mosesdecoder"
"glample/fastBPE" -> "bheinzerling/bpemb"
"glample/fastBPE" -> "mjpost/sacrebleu"
"glample/fastBPE" -> "facebookresearch/LASER"
"glample/fastBPE" -> "artetxem/monoses"
"glample/fastBPE" -> "artetxem/undreamt"
"glample/fastBPE" -> "VKCOM/YouTokenToMe"
"microsoft/fastformers" -> "facebookresearch/SentAugment"
"microsoft/fastformers" -> "huggingface/nn_pruning" ["e"=1]
"microsoft/fastformers" -> "microsoft/fastseq" ["e"=1]
"microsoft/fastformers" -> "huggingface/optimum" ["e"=1]
"microsoft/fastformers" -> "Tencent/TurboTransformers" ["e"=1]
"microsoft/fastformers" -> "laiguokun/Funnel-Transformer" ["e"=1]
"microsoft/fastformers" -> "alexa/bort"
"microsoft/fastformers" -> "facebookresearch/KILT" ["e"=1]
"microsoft/fastformers" -> "studio-ousia/bpr" ["e"=1]
"microsoft/fastformers" -> "deepset-ai/FARM"
"microsoft/fastformers" -> "robustness-gym/robustness-gym"
"microsoft/fastformers" -> "lucidrains/reformer-pytorch"
"microsoft/fastformers" -> "huggingface/awesome-papers"
"microsoft/fastformers" -> "asappresearch/sru" ["e"=1]
"microsoft/fastformers" -> "kakaobrain/KorNLUDatasets" ["e"=1]
"gnes-ai/gnes" -> "koursaros-ai/nboost"
"gnes-ai/gnes" -> "Hironsan/bertsearch"
"gnes-ai/gnes" -> "castorini/anserini" ["e"=1]
"gnes-ai/gnes" -> "hanxiao/bert-as-service"
"gnes-ai/gnes" -> "chakki-works/doccano"
"gnes-ai/gnes" -> "plasticityai/magnitude"
"gnes-ai/gnes" -> "deepset-ai/FARM"
"gnes-ai/gnes" -> "kaushaltrivedi/fast-bert"
"gnes-ai/gnes" -> "microsoft/SPTAG" ["e"=1]
"gnes-ai/gnes" -> "facebookresearch/SentEval"
"gnes-ai/gnes" -> "zalandoresearch/flair"
"gnes-ai/gnes" -> "linkedin/detext"
"gnes-ai/gnes" -> "uber-research/plato-research-dialogue-system" ["e"=1]
"gnes-ai/gnes" -> "vearch/vearch" ["e"=1]
"gnes-ai/gnes" -> "google-research/lasertagger" ["e"=1]
"nyu-dl/dl4mt-tutorial" -> "rsennrich/nematus"
"nyu-dl/dl4mt-tutorial" -> "rsennrich/wmt16-scripts"
"nyu-dl/dl4mt-tutorial" -> "lisa-groundhog/GroundHog" ["e"=1]
"nyu-dl/dl4mt-tutorial" -> "neubig/nmt-tips"
"nyu-dl/dl4mt-tutorial" -> "thumt/THUMT"
"nyu-dl/dl4mt-tutorial" -> "harvardnlp/seq2seq-attn" ["e"=1]
"nyu-dl/dl4mt-tutorial" -> "EdinburghNLP/nematus"
"nyu-dl/dl4mt-tutorial" -> "nyu-dl/dl4mt-multi"
"nyu-dl/dl4mt-tutorial" -> "lium-lst/nmtpy"
"nyu-dl/dl4mt-tutorial" -> "tuzhaopeng/NMT-Coverage"
"nyu-dl/dl4mt-tutorial" -> "nyu-dl/dl4mt-cdec"
"nyu-dl/dl4mt-tutorial" -> "jonsafari/nmt-list"
"nyu-dl/dl4mt-tutorial" -> "moses-smt/mosesdecoder"
"nyu-dl/dl4mt-tutorial" -> "isi-nlp/Zoph_RNN"
"nyu-dl/dl4mt-tutorial" -> "rsennrich/subword-nmt"
"cgpotts/cs224u" -> "joosthub/PyTorchNLPBook"
"cgpotts/cs224u" -> "wcmac/sippycup" ["e"=1]
"cgpotts/cs224u" -> "stanfordnlp/cs224n-winter17-notes"
"cgpotts/cs224u" -> "jacobeisenstein/gt-nlp-class"
"cgpotts/cs224u" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"cgpotts/cs224u" -> "neubig/nn4nlp-code"
"cgpotts/cs224u" -> "fastai/course-nlp"
"cgpotts/cs224u" -> "thunlp/ERNIE" ["e"=1]
"cgpotts/cs224u" -> "cs230-stanford/cs230-code-examples"
"cgpotts/cs224u" -> "ZacBi/CS224n-2019-solutions"
"cgpotts/cs224u" -> "thunlp/PLMpapers"
"cgpotts/cs224u" -> "huggingface/naacl_transfer_learning_tutorial"
"cgpotts/cs224u" -> "salesforce/decaNLP"
"cgpotts/cs224u" -> "thunlp/OpenNRE" ["e"=1]
"cgpotts/cs224u" -> "rguthrie3/DeepLearningForNLPInPytorch"
"chiphuyen/sotawhat" -> "chiphuyen/lazynlp"
"chiphuyen/sotawhat" -> "chiphuyen/coding-exercises" ["e"=1]
"chiphuyen/sotawhat" -> "salesforce/decaNLP"
"chiphuyen/sotawhat" -> "huggingface/naacl_transfer_learning_tutorial"
"chiphuyen/sotawhat" -> "facebookresearch/Horizon" ["e"=1]
"chiphuyen/sotawhat" -> "facebookresearch/DME"
"chiphuyen/sotawhat" -> "uber-research/plato-research-dialogue-system" ["e"=1]
"chiphuyen/sotawhat" -> "tensorflow/adanet" ["e"=1]
"chiphuyen/sotawhat" -> "GauravBh1010tt/DeepLearn"
"chiphuyen/sotawhat" -> "NervanaSystems/nlp-architect"
"chiphuyen/sotawhat" -> "Tencent/tencent-ml-images" ["e"=1]
"chiphuyen/sotawhat" -> "facebookresearch/UnsupervisedMT"
"chiphuyen/sotawhat" -> "facebookresearch/nevergrad" ["e"=1]
"chiphuyen/sotawhat" -> "huggingface/hmtl"
"chiphuyen/sotawhat" -> "ikostrikov/pytorch-flows" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "dipanjanS/practical-machine-learning-with-python"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/hands-on-transfer-learning-with-python"
"dipanjanS/text-analytics-with-python" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "dipanjanS/nlp_essentials"
"dipanjanS/text-analytics-with-python" -> "susanli2016/NLP-with-Python"
"dipanjanS/text-analytics-with-python" -> "chartbeat-labs/textacy"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/text-analytics-with-python" -> "JasonKessler/scattertext"
"dipanjanS/text-analytics-with-python" -> "NirantK/nlp-python-deep-learning"
"dipanjanS/text-analytics-with-python" -> "niderhoff/nlp-datasets"
"dipanjanS/text-analytics-with-python" -> "adashofdata/nlp-in-python-tutorial"
"dipanjanS/text-analytics-with-python" -> "abdulfatir/twitter-sentiment-analysis" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "Roshanson/TextInfoExp" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "RubensZimbres/Repo-2017" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "keitakurita/practical-torchtext"
"keitakurita/Practical_NLP_in_PyTorch" -> "mhagiwara/realworldnlp"
"keitakurita/Practical_NLP_in_PyTorch" -> "joosthub/PyTorchNLPBook"
"keitakurita/Practical_NLP_in_PyTorch" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "kaushaltrivedi/fast-bert"
"keitakurita/Practical_NLP_in_PyTorch" -> "allenai/writing-code-for-nlp-research-emnlp2018"
"keitakurita/Practical_NLP_in_PyTorch" -> "facebookresearch/adaptive-span"
"keitakurita/Practical_NLP_in_PyTorch" -> "graykode/xlnet-Pytorch"
"keitakurita/Practical_NLP_in_PyTorch" -> "huggingface/naacl_transfer_learning_tutorial"
"gutfeeling/beginner_nlp" -> "andrewt3000/DL4NLP"
"GEM-benchmark/NL-Augmenter" -> "google/BIG-bench" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "styfeng/DataAug4NLP"
"GEM-benchmark/NL-Augmenter" -> "QData/TextAttack"
"GEM-benchmark/NL-Augmenter" -> "makcedward/nlpaug"
"GEM-benchmark/NL-Augmenter" -> "marcotcr/checklist"
"GEM-benchmark/NL-Augmenter" -> "robustness-gym/robustness-gym"
"GEM-benchmark/NL-Augmenter" -> "bigscience-workshop/promptsource" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "cdpierse/transformers-interpret"
"GEM-benchmark/NL-Augmenter" -> "google-research/FLAN" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "tunib-ai/parallelformers" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "facebookresearch/LAMA" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "timoschick/pet" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "ELS-RD/transformer-deploy" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "UKPLab/beir" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "nyu-mll/jiant"
"MilaNLProc/contextualized-topic-models" -> "MIND-Lab/OCTIS"
"MilaNLProc/contextualized-topic-models" -> "ddangelov/Top2Vec"
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/BERTopic"
"MilaNLProc/contextualized-topic-models" -> "bab2min/tomotopy"
"MilaNLProc/contextualized-topic-models" -> "adjidieng/ETM" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "recognai/rubrix"
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/KeyBERT"
"MilaNLProc/contextualized-topic-models" -> "zll17/Neural_Topic_Models" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "gregversteeg/corex_topic"
"MilaNLProc/contextualized-topic-models" -> "NorskRegnesentral/skweak"
"MilaNLProc/contextualized-topic-models" -> "cdpierse/transformers-interpret"
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/PolyFuzz"
"MilaNLProc/contextualized-topic-models" -> "akashgit/autoencoding_vi_for_topic_models" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "huggingface/setfit"
"MilaNLProc/contextualized-topic-models" -> "jalammar/ecco"
"google-research/adapter-bert" -> "AsaCooperStickland/Bert-n-Pals"
"gtegner/mine-pytorch" -> "sungyubkim/MINE-Mutual-Information-Neural-Estimation-"
"gtegner/mine-pytorch" -> "ermongroup/smile-mi-estimator"
"gtegner/mine-pytorch" -> "MasanoriYamada/Mine_pytorch"
"gtegner/mine-pytorch" -> "Linear95/CLUB"
"nyu-mll/GLUE-baselines" -> "nyu-mll/jiant"
"nyu-mll/GLUE-baselines" -> "jsalt18-sentence-repl/jiant"
"nyu-mll/GLUE-baselines" -> "facebookresearch/SentEval"
"nyu-mll/GLUE-baselines" -> "namisan/mt-dnn"
"nyu-mll/GLUE-baselines" -> "openai/finetune-transformer-lm"
"nyu-mll/GLUE-baselines" -> "facebookresearch/XLM"
"nyu-mll/GLUE-baselines" -> "Tiiiger/bert_score"
"nyu-mll/GLUE-baselines" -> "intersun/PKD-for-BERT-Model-Compression" ["e"=1]
"nyu-mll/GLUE-baselines" -> "facebookresearch/SpanBERT"
"nyu-mll/GLUE-baselines" -> "allenai/vampire"
"nyu-mll/GLUE-baselines" -> "acl-org/aclpubcheck" ["e"=1]
"nyu-mll/GLUE-baselines" -> "thunlp/ERNIE" ["e"=1]
"nyu-mll/GLUE-baselines" -> "huggingface/hmtl"
"nyu-mll/GLUE-baselines" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"lmthang/thesis" -> "nyu-dl/dl4mt-tutorial"
"lmthang/thesis" -> "harvardnlp/seq2seq-attn" ["e"=1]
"lmthang/thesis" -> "tensorflow/nmt"
"lmthang/thesis" -> "kimiyoung/review_net" ["e"=1]
"lmthang/thesis" -> "jonsafari/nmt-list"
"lmthang/thesis" -> "artetxem/undreamt"
"lmthang/thesis" -> "neubig/nmt-tips"
"lmthang/thesis" -> "facebookresearch/UnsupervisedMT"
"lmthang/thesis" -> "stanfordnlp/treelstm" ["e"=1]
"lmthang/thesis" -> "yoonkim/lstm-char-cnn" ["e"=1]
"lmthang/thesis" -> "artetxem/vecmap"
"lmthang/thesis" -> "JayParks/tf-seq2seq"
"c-amr/camr" -> "jflanigan/jamr"
"c-amr/camr" -> "mdtux89/amr-eager"
"c-amr/camr" -> "sheng-z/stog"
"zhangfazhan/text_clustering" -> "FesonX/cn-text-classifier"
"zhangfazhan/text_clustering" -> "yanqiangmiffy/text-cluster"
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" -> "FranxYao/dgm_latent_bow"
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" -> "THUNLP-MT/TG-Reading-List"
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" -> "harvardnlp/pytorch-struct"
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" -> "FranxYao/Gumbel-CRF"
"chrisjmccormick/inspect_word2vec" -> "chrisjmccormick/word2vec_commented"
"bsolomon1124/pycld3" -> "aboSamoor/pycld2"
"JieyuZ2/wrench" -> "JieyuZ2/Awesome-Weak-Supervision"
"JieyuZ2/wrench" -> "rt219/Unpaired-Sketch-to-Photo-Translation"
"JieyuZ2/wrench" -> "microsoft/ASTRA"
"aws-samples/aws-machine-learning-university-accelerated-tab" -> "aws-samples/aws-machine-learning-university-accelerated-cv"
"aws-samples/aws-machine-learning-university-accelerated-tab" -> "aws-samples/aws-machine-learning-university-accelerated-nlp"
"aws-samples/aws-machine-learning-university-accelerated-tab" -> "aws-samples/aws-machine-learning-university-dte"
"cfmrp/mtool" -> "danielhers/tupa"
"booknlp/booknlp" -> "dbamman/litbank"
"booknlp/booknlp" -> "dbamman/book-nlp"
"booknlp/booknlp" -> "recognai/rubrix"
"booknlp/booknlp" -> "NorskRegnesentral/skweak"
"booknlp/booknlp" -> "MilaNLProc/contextualized-topic-models"
"booknlp/booknlp" -> "erre-quadro/spikex"
"booknlp/booknlp" -> "explosion/projects"
"booknlp/booknlp" -> "ryanjgallagher/shifterator" ["e"=1]
"booknlp/booknlp" -> "Pandora-Intelligence/concise-concepts"
"booknlp/booknlp" -> "MaartenGr/PolyFuzz"
"booknlp/booknlp" -> "ELS-RD/transformer-deploy" ["e"=1]
"booknlp/booknlp" -> "koaning/doubtlab" ["e"=1]
"booknlp/booknlp" -> "ddangelov/Top2Vec"
"booknlp/booknlp" -> "PrithivirajDamodaran/Gramformer"
"booknlp/booknlp" -> "Pandora-Intelligence/crosslingual-coreference"
"GBLin5566/toward-controlled-generation-of-text-pytorch" -> "wiseodd/controlled-text-generation"
"GBLin5566/toward-controlled-generation-of-text-pytorch" -> "DSKSD/Controlled_Text_Generation"
"paarthneekhara/byteNet-tensorflow" -> "buriburisuri/ByteNet" ["e"=1]
"paarthneekhara/byteNet-tensorflow" -> "nyu-dl/dl4mt-c2c"
"paarthneekhara/byteNet-tensorflow" -> "tokestermw/tensorflow-shakespeare"
"paarthneekhara/byteNet-tensorflow" -> "nyu-dl/dl4mt-cdec"
"paarthneekhara/byteNet-tensorflow" -> "LeavesBreathe/tensorflow_with_latest_papers" ["e"=1]
"paarthneekhara/byteNet-tensorflow" -> "Kyubyong/quasi-rnn"
"paarthneekhara/byteNet-tensorflow" -> "nyu-dl/dl4mt-multi"
"rdspring1/PyTorch_GBW_LM" -> "leimao/Sampled_Softmax_PyTorch"
"titu1994/Keras-IndRNN" -> "Sunnydreamrain/IndRNN_Theano_Lasagne"
"dmlc/gluon-nlp" -> "dmlc/gluon-cv" ["e"=1]
"dmlc/gluon-nlp" -> "salesforce/decaNLP"
"dmlc/gluon-nlp" -> "NervanaSystems/nlp-architect"
"dmlc/gluon-nlp" -> "awslabs/sockeye"
"dmlc/gluon-nlp" -> "allenai/allennlp"
"dmlc/gluon-nlp" -> "zalandoresearch/flair"
"dmlc/gluon-nlp" -> "facebookresearch/pytext"
"dmlc/gluon-nlp" -> "allenai/bilm-tf"
"dmlc/gluon-nlp" -> "chinakook/Awesome-MXNet" ["e"=1]
"dmlc/gluon-nlp" -> "zihangdai/xlnet"
"dmlc/gluon-nlp" -> "zackchase/mxnet-the-straight-dope" ["e"=1]
"dmlc/gluon-nlp" -> "mli/gluon-tutorials-zh" ["e"=1]
"dmlc/gluon-nlp" -> "facebookresearch/XLM"
"dmlc/gluon-nlp" -> "huggingface/pytorch-pretrained-BERT"
"dmlc/gluon-nlp" -> "kimiyoung/transformer-xl"
"adashofdata/muffin-cupcake" -> "adashofdata/intro-to-text-analytics"
"akanazawa/vgan" -> "akanimax/Variational_Discriminator_Bottleneck"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "MasanoriYamada/Mine_pytorch"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "gtegner/mine-pytorch"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "DuaneNielsen/DeepInfomaxPytorch" ["e"=1]
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "rdevon/DIM" ["e"=1]
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "Linear95/CLUB"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "ermongroup/smile-mi-estimator"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "1Konny/VIB-pytorch"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "ccha23/MI-NEE"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "bojone/infomax" ["e"=1]
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "alexalemi/vib_demo"
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" -> "rmaestre/Mutual-Information"
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "PacktPublishing/Mastering-Computer-Vision-with-TensorFlow-2.0"
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "sayakpaul/TF-2.0-Hacks"
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "PacktPublishing/Tensorflow-2.0-Computer-Vision-Cookbook"
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "PacktPublishing/Hands-On-Neural-Networks-with-TensorFlow-2.0" ["e"=1]
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "Amin-Tgz/awesome-tensorflow-2"
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "PacktPublishing/Deep-Learning-with-TensorFlow-2-and-Keras" ["e"=1]
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" -> "PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0"
"JAIJANYANI/Automated-Resume-Screening-System" -> "DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy"
"JAIJANYANI/Automated-Resume-Screening-System" -> "ongteckwu/Resume-Rater"
"JAIJANYANI/Automated-Resume-Screening-System" -> "OmkarPathak/pyresparser"
"JAIJANYANI/Automated-Resume-Screening-System" -> "OmkarPathak/ResumeParser"
"JAIJANYANI/Automated-Resume-Screening-System" -> "chen0040/keras-english-resume-parser-and-analyzer"
"JAIJANYANI/Automated-Resume-Screening-System" -> "prateekguptaiiitk/Resume_Filtering"
"JAIJANYANI/Automated-Resume-Screening-System" -> "bjherger/ResumeParser"
"JAIJANYANI/Automated-Resume-Screening-System" -> "meghnalohani/Resume-Scoring-using-NLP"
"JAIJANYANI/Automated-Resume-Screening-System" -> "0dust/ResumeFilter"
"JAIJANYANI/Automated-Resume-Screening-System" -> "srbhr/Naive-Resume-Matching"
"JAIJANYANI/Automated-Resume-Screening-System" -> "Satrat/Resume-Parser"
"Stonesjtu/Pytorch-NCE" -> "rdspring1/PyTorch_GBW_LM"
"Stonesjtu/Pytorch-NCE" -> "demelin/Noise-Contrastive-Estimation-NCE-for-pyTorch"
"Stonesjtu/Pytorch-NCE" -> "rafaljozefowicz/lm" ["e"=1]
"Stonesjtu/Pytorch-NCE" -> "kefirski/pytorch_NEG_loss"
"hit-computer/MTA-LSTM" -> "TobiasLee/MTA-LSTM-TensorFlow"
"hit-computer/MTA-LSTM" -> "libing125/CTEG"
"hit-computer/MTA-LSTM" -> "hit-computer/SC-LSTM" ["e"=1]
"iamaaditya/neural-paraphrase-generation" -> "paulx3/keras_generative_pg"
"iamaaditya/neural-paraphrase-generation" -> "vsuthichai/paraphraser"
"iamaaditya/neural-paraphrase-generation" -> "leechihahchiu/DRLParaphrase"
"iamaaditya/neural-paraphrase-generation" -> "ale3otik/paraphrases-generator"
"iamaaditya/neural-paraphrase-generation" -> "miyyer/scpn"
"iamaaditya/neural-paraphrase-generation" -> "arvind385801/paraphraseGen"
"iamaaditya/neural-paraphrase-generation" -> "malllabiisc/DiPS"
"iamaaditya/neural-paraphrase-generation" -> "lancopku/WEAN" ["e"=1]
"iamaaditya/neural-paraphrase-generation" -> "HarshTrivedi/paraphrase-generation"
"iamaaditya/neural-paraphrase-generation" -> "wasiahmad/paraphrase_identification"
"zihangdai/mos" -> "benkrause/dynamic-evaluation"
"zihangdai/mos" -> "salesforce/awd-lstm-lm"
"zihangdai/mos" -> "salesforce/nonauto-nmt" ["e"=1]
"zihangdai/mos" -> "nyu-dl/dl4mt-nonauto" ["e"=1]
"zihangdai/mos" -> "clab/rnng" ["e"=1]
"zihangdai/mos" -> "salesforce/pytorch-qrnn"
"zihangdai/mos" -> "XMUNLP/Tagger" ["e"=1]
"zihangdai/mos" -> "facebookresearch/fairseq-py"
"zihangdai/mos" -> "kelvinguu/neural-editor"
"jcpeterson/openwebtext" -> "eukaryote31/openwebtext"
"jcpeterson/openwebtext" -> "yet-another-account/openwebtext"
"jcpeterson/openwebtext" -> "EleutherAI/the-pile" ["e"=1]
"jcpeterson/openwebtext" -> "soskek/bookcorpus"
"jcpeterson/openwebtext" -> "nyu-dl/bert-gen"
"jcpeterson/openwebtext" -> "facebookresearch/cc_net"
"jcpeterson/openwebtext" -> "VKCOM/YouTokenToMe"
"jcpeterson/openwebtext" -> "salesforce/ctrl"
"jcpeterson/openwebtext" -> "nshepperd/gpt-2"
"jcpeterson/openwebtext" -> "rowanz/grover"
"jcpeterson/openwebtext" -> "bigscience-workshop/bigscience" ["e"=1]
"jcpeterson/openwebtext" -> "mjpost/sacreBLEU"
"gregversteeg/CorEx" -> "gregversteeg/bio_corex"
"gregversteeg/CorEx" -> "gregversteeg/corex_topic"
"gregversteeg/CorEx" -> "gregversteeg/NPEET"
"gregversteeg/CorEx" -> "gregversteeg/gaussianize"
"gregversteeg/CorEx" -> "gregversteeg/LinearCorex"
"explosion/projects" -> "explosion/spacy-transformers"
"explosion/projects" -> "explosion/prodigy-recipes"
"explosion/projects" -> "explosion/sense2vec"
"explosion/projects" -> "allenai/scispacy" ["e"=1]
"explosion/projects" -> "explosion/spacy-streamlit" ["e"=1]
"explosion/projects" -> "msg-systems/holmes-extractor" ["e"=1]
"explosion/projects" -> "chartbeat-labs/textacy"
"explosion/projects" -> "recognai/rubrix"
"explosion/projects" -> "explosion/thinc"
"explosion/projects" -> "erre-quadro/spikex"
"explosion/projects" -> "ines/spacy-course"
"explosion/projects" -> "explosion/spacy-models"
"explosion/projects" -> "explosion/spacy-stanza"
"explosion/projects" -> "ICLRandD/Blackstone" ["e"=1]
"explosion/projects" -> "facebookresearch/BLINK" ["e"=1]
"JasonKessler/scattertext" -> "chartbeat-labs/textacy"
"JasonKessler/scattertext" -> "ddangelov/Top2Vec"
"JasonKessler/scattertext" -> "bmabey/pyLDAvis"
"JasonKessler/scattertext" -> "jbesomi/texthero"
"JasonKessler/scattertext" -> "MaartenGr/BERTopic"
"JasonKessler/scattertext" -> "explosion/sense2vec"
"JasonKessler/scattertext" -> "huggingface/neuralcoref"
"JasonKessler/scattertext" -> "PAIR-code/lit"
"JasonKessler/scattertext" -> "cemoody/lda2vec"
"JasonKessler/scattertext" -> "TeamHG-Memex/eli5" ["e"=1]
"JasonKessler/scattertext" -> "plasticityai/magnitude"
"JasonKessler/scattertext" -> "JasonKessler/Scattertext-PyData"
"JasonKessler/scattertext" -> "vi3k6i5/flashtext" ["e"=1]
"JasonKessler/scattertext" -> "zalandoresearch/flair"
"JasonKessler/scattertext" -> "boudinfl/pke" ["e"=1]
"shentianxiao/language-style-transfer" -> "lijuncen/Sentiment-and-Style-Transfer"
"shentianxiao/language-style-transfer" -> "fuzhenxin/Style-Transfer-in-Text"
"shentianxiao/language-style-transfer" -> "shrimai/Style-Transfer-Through-Back-Translation"
"shentianxiao/language-style-transfer" -> "jakezhaojb/ARAE"
"shentianxiao/language-style-transfer" -> "vineetjohn/linguistic-style-transfer"
"shentianxiao/language-style-transfer" -> "luofuli/DualRL"
"shentianxiao/language-style-transfer" -> "wiseodd/controlled-text-generation"
"shentianxiao/language-style-transfer" -> "fuzhenxin/text_style_transfer"
"shentianxiao/language-style-transfer" -> "rpryzant/delete_retrieve_generate"
"shentianxiao/language-style-transfer" -> "Nrgeup/controllable-text-attribute-transfer"
"shentianxiao/language-style-transfer" -> "snakeztc/NeuralDialog-CVAE" ["e"=1]
"shentianxiao/language-style-transfer" -> "fuzhenxin/textstyletransferdata"
"shentianxiao/language-style-transfer" -> "lancopku/Unpaired-Sentiment-Translation" ["e"=1]
"shentianxiao/language-style-transfer" -> "kelvinguu/neural-editor"
"shentianxiao/language-style-transfer" -> "cocoxu/Shakespeare"
"thunlp/SememePSO-Attack" -> "JHL-HUST/PWWS"
"thunlp/SememePSO-Attack" -> "RishabhMaheshwary/hard-label-attack"
"vsuthichai/paraphraser" -> "iamaaditya/neural-paraphrase-generation"
"vsuthichai/paraphraser" -> "Vamsi995/Paraphrase-Generator"
"vsuthichai/paraphraser" -> "miyyer/scpn"
"vsuthichai/paraphraser" -> "paulx3/keras_generative_pg"
"vsuthichai/paraphraser" -> "HarshTrivedi/paraphrase-generation"
"vsuthichai/paraphraser" -> "ale3otik/paraphrases-generator"
"vsuthichai/paraphraser" -> "badripatro/PQG"
"vsuthichai/paraphraser" -> "websymphony/paraphrasing-tool"
"vsuthichai/paraphraser" -> "PrithivirajDamodaran/Parrot_Paraphraser"
"vsuthichai/paraphraser" -> "FranxYao/dgm_latent_bow"
"vsuthichai/paraphraser" -> "jwieting/para-nmt-50m"
"vsuthichai/paraphraser" -> "ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-"
"vsuthichai/paraphraser" -> "dev-chauhan/PQG-pytorch"
"vsuthichai/paraphraser" -> "wyu-du/Reinforce-Paraphrase-Generation"
"vsuthichai/paraphraser" -> "laubonghaudoi/paraphraser"
"kentonl/e2e-coref" -> "mandarjoshi90/coref"
"kentonl/e2e-coref" -> "shayneobrien/coreference-resolution"
"kentonl/e2e-coref" -> "clarkkev/deep-coref"
"kentonl/e2e-coref" -> "ShannonAI/CorefQA"
"kentonl/e2e-coref" -> "google-research-datasets/gap-coreference"
"kentonl/e2e-coref" -> "facebookresearch/SpanBERT"
"kentonl/e2e-coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"kentonl/e2e-coref" -> "swiseman/nn_coref"
"kentonl/e2e-coref" -> "kkjawz/coref-ee"
"kentonl/e2e-coref" -> "huggingface/neuralcoref"
"kentonl/e2e-coref" -> "conll/reference-coreference-scorers"
"kentonl/e2e-coref" -> "lxucs/coref-hoi"
"kentonl/e2e-coref" -> "tcxdgit/e2e-coref-old"
"kentonl/e2e-coref" -> "dwadden/dygiepp" ["e"=1]
"kentonl/e2e-coref" -> "luheng/deep_srl" ["e"=1]
"ing-bank/sparse_dot_topn" -> "lukewhyte/textpack"
"ing-bank/sparse_dot_topn" -> "Bergvca/string_grouper"
"ing-bank/sparse_dot_topn" -> "ing-bank/popmon" ["e"=1]
"MasanoriYamada/Mine_pytorch" -> "sungyubkim/MINE-Mutual-Information-Neural-Estimation-"
"MasanoriYamada/Mine_pytorch" -> "mzgubic/MINE"
"MasanoriYamada/Mine_pytorch" -> "DuaneNielsen/DeepInfomaxPytorch" ["e"=1]
"MasanoriYamada/Mine_pytorch" -> "rdevon/DIM" ["e"=1]
"MasanoriYamada/Mine_pytorch" -> "gtegner/mine-pytorch"
"OpenGreekAndLatin/First1KGreek" -> "PerseusDL/canonical-greekLit"
"OpenGreekAndLatin/First1KGreek" -> "scaife-viewer/scaife-viewer"
"OpenGreekAndLatin/First1KGreek" -> "helmadik/LSJLogeion"
"OpenNMT/Tokenizer" -> "OpenNMT/CTranslate2"
"harvardnlp/pytorch-struct" -> "harvardnlp/compound-pcfg" ["e"=1]
"harvardnlp/pytorch-struct" -> "nikitakit/self-attentive-parser" ["e"=1]
"harvardnlp/pytorch-struct" -> "neulab/compare-mt"
"harvardnlp/pytorch-struct" -> "FranxYao/Deep-Generative-Models-for-Natural-Language-Processing"
"harvardnlp/pytorch-struct" -> "deep-spin/entmax"
"harvardnlp/pytorch-struct" -> "harvardnlp/urnng" ["e"=1]
"harvardnlp/pytorch-struct" -> "facebookresearch/higher" ["e"=1]
"harvardnlp/pytorch-struct" -> "facebookresearch/XLM"
"harvardnlp/pytorch-struct" -> "asyml/texar-pytorch"
"harvardnlp/pytorch-struct" -> "neubig/lowresource-nlp-bootcamp-2020"
"harvardnlp/pytorch-struct" -> "facebookresearch/SentEval"
"harvardnlp/pytorch-struct" -> "marcotcr/checklist"
"harvardnlp/pytorch-struct" -> "lucidrains/reformer-pytorch"
"harvardnlp/pytorch-struct" -> "google-research/language" ["e"=1]
"harvardnlp/pytorch-struct" -> "allenai/allentune" ["e"=1]
"LinyangLee/BERT-Attack" -> "jind11/TextFooler"
"LooperXX/CS224n-Resource" -> "LooperXX/CS224n-Reading-Notes"
"LooperXX/CS224n-Resource" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"LooperXX/CS224n-Resource" -> "ZacBi/CS224n-2019-solutions"
"kweonwooj/papers" -> "mjpost/sacreBLEU"
"kweonwooj/papers" -> "marian-nmt/marian"
"kweonwooj/papers" -> "neulab/compare-mt"
"kweonwooj/papers" -> "neubig/nmt-tips"
"kweonwooj/papers" -> "wangqiangneu/MT-PaperReading" ["e"=1]
"kweonwooj/papers" -> "nyu-dl/dl4mt-nonauto" ["e"=1]
"kweonwooj/papers" -> "alvations/sacremoses"
"kweonwooj/papers" -> "marian-nmt/marian-examples"
"kweonwooj/papers" -> "M4t1ss/SoftAlignments"
"xsocket/job" -> "altraman00/hrweb"
"nateraw/Lda2vec-Tensorflow" -> "meereeum/lda2vec-tf"
"nateraw/Lda2vec-Tensorflow" -> "whcjimmy/lda2vec"
"outcastofmusic/quick-nlp" -> "PetrochukM/PyTorch-NLP"
"Adapter-Hub/adapter-transformers" -> "facebookresearch/KILT" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "nyu-mll/jiant"
"Adapter-Hub/adapter-transformers" -> "facebookresearch/LAMA" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "google-research/xtreme"
"Adapter-Hub/adapter-transformers" -> "XiangLi1999/PrefixTuning" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "princeton-nlp/LM-BFF" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "google-research/language" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "timoschick/pet" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "thunlp/OpenDelta" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "google-research/adapter-bert"
"Adapter-Hub/adapter-transformers" -> "google/BIG-bench" ["e"=1]
"Adapter-Hub/adapter-transformers" -> "allenai/longformer"
"Adapter-Hub/adapter-transformers" -> "uber-research/PPLM"
"Adapter-Hub/adapter-transformers" -> "huggingface/awesome-papers"
"Adapter-Hub/adapter-transformers" -> "GEM-benchmark/NL-Augmenter"
"BurhanUlTayyab/DetectGPT" -> "BurhanUlTayyab/GPTZero"
"ZacBi/CS224n-2019-solutions" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"ZacBi/CS224n-2019-solutions" -> "Luvata/CS224N-2019"
"ZacBi/CS224n-2019-solutions" -> "xixiaoyao/CS224n-winter-together"
"ZacBi/CS224n-2019-solutions" -> "lrs1353281004/CS224n_winter2019_notes_and_assignments"
"ZacBi/CS224n-2019-solutions" -> "LooperXX/CS224n-Reading-Notes"
"ZacBi/CS224n-2019-solutions" -> "LooperXX/CS224n-Resource"
"ZacBi/CS224n-2019-solutions" -> "apachecn/stanford-cs224n-notes-zh"
"ZacBi/CS224n-2019-solutions" -> "hankcs/CS224n"
"ZacBi/CS224n-2019-solutions" -> "jon-tow/cs224n"
"ZacBi/CS224n-2019-solutions" -> "chrischute/squad" ["e"=1]
"ZacBi/CS224n-2019-solutions" -> "joosthub/PyTorchNLPBook"
"ZacBi/CS224n-2019-solutions" -> "learning511/cs224n-learning-camp"
"ZacBi/CS224n-2019-solutions" -> "stanfordnlp/cs224n-winter17-notes"
"ZacBi/CS224n-2019-solutions" -> "apachecn/nlp-pytorch-zh" ["e"=1]
"ZacBi/CS224n-2019-solutions" -> "DSKSD/DeepNLP-models-Pytorch"
"amaiya/ktrain" -> "ThilinaRajapakse/simpletransformers"
"amaiya/ktrain" -> "kaushaltrivedi/fast-bert"
"amaiya/ktrain" -> "deepset-ai/FARM"
"amaiya/ktrain" -> "ddangelov/Top2Vec"
"amaiya/ktrain" -> "MaartenGr/BERTopic"
"amaiya/ktrain" -> "PAIR-code/lit"
"amaiya/ktrain" -> "flairNLP/flair"
"amaiya/ktrain" -> "makcedward/nlpaug"
"amaiya/ktrain" -> "QData/TextAttack"
"amaiya/ktrain" -> "MilaNLProc/contextualized-topic-models"
"amaiya/ktrain" -> "keras-team/keras-tuner" ["e"=1]
"amaiya/ktrain" -> "MaartenGr/KeyBERT"
"amaiya/ktrain" -> "cdpierse/transformers-interpret"
"amaiya/ktrain" -> "UKPLab/sentence-transformers"
"amaiya/ktrain" -> "neuml/txtai"
"peter3125/sentence2vec" -> "jx00109/sentence2vec"
"peter3125/sentence2vec" -> "PrincetonML/SIF"
"peter3125/sentence2vec" -> "UKPLab/arxiv2018-xling-sentence-embeddings"
"peter3125/sentence2vec" -> "YingyuLiang/SIF"
"peter3125/sentence2vec" -> "lajanugen/S2V" ["e"=1]
"peter3125/sentence2vec" -> "mchen24/iclr2017"
"peter3125/sentence2vec" -> "klb3713/sentence2vec"
"peter3125/sentence2vec" -> "epfml/sent2vec"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/Illustrated_GPT2_With_Code"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/ranknet-tensorflow2.0"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/Phrase_Extraction_Bi-LSTM"
"akanyaani/gpt-2-tensorflow2.0" -> "prakhar21/TextAugmentation-GPT2"
"lancopku/Graph-to-seq-comment-generation" -> "Walleclipse/AGPC"
"lancopku/Graph-to-seq-comment-generation" -> "rikdz/GraphWriter"
"lancopku/Graph-to-seq-comment-generation" -> "hugochan/RL-based-Graph2Seq-for-NQG" ["e"=1]
"stephenhky/PyShortTextCategorization" -> "rwalk/gsdmm" ["e"=1]
"stephenhky/PyShortTextCategorization" -> "vi3k6i5/GuidedLDA"
"stephenhky/PyShortTextCategorization" -> "src-d/wmd-relax"
"stephenhky/PyShortTextCategorization" -> "RaRe-Technologies/movie-plots-by-genre" ["e"=1]
"stephenhky/PyShortTextCategorization" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"styfeng/DataAug4NLP" -> "makcedward/nlpaug"
"styfeng/DataAug4NLP" -> "jasonwei20/eda_nlp" ["e"=1]
"styfeng/DataAug4NLP" -> "GEM-benchmark/NL-Augmenter"
"styfeng/DataAug4NLP" -> "QData/TextAttack"
"styfeng/DataAug4NLP" -> "facebookresearch/SentAugment"
"styfeng/DataAug4NLP" -> "dsfsi/textaugment"
"styfeng/DataAug4NLP" -> "webis-de/small-text"
"styfeng/DataAug4NLP" -> "marcotcr/checklist"
"styfeng/DataAug4NLP" -> "zhijing-jin/nlp-phd-global-equality" ["e"=1]
"styfeng/DataAug4NLP" -> "thunlp/SOS4NLP" ["e"=1]
"styfeng/DataAug4NLP" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"styfeng/DataAug4NLP" -> "princeton-nlp/SimCSE" ["e"=1]
"styfeng/DataAug4NLP" -> "GT-SALT/MixText" ["e"=1]
"styfeng/DataAug4NLP" -> "thunlp/PromptPapers" ["e"=1]
"styfeng/DataAug4NLP" -> "yym6472/ConSERT" ["e"=1]
"asyml/texar-pytorch" -> "asyml/texar"
"asyml/texar-pytorch" -> "THUNLP-MT/TG-Reading-List"
"asyml/texar-pytorch" -> "ChenChengKuan/awesome-text-generation"
"asyml/texar-pytorch" -> "harvardnlp/pytorch-struct"
"asyml/texar-pytorch" -> "neulab/compare-mt"
"asyml/texar-pytorch" -> "salesforce/ctrl"
"asyml/texar-pytorch" -> "fuzhenxin/Style-Transfer-in-Text"
"asyml/texar-pytorch" -> "EdinburghNLP/XSum" ["e"=1]
"asyml/texar-pytorch" -> "squareRoot3/Target-Guided-Conversation" ["e"=1]
"asyml/texar-pytorch" -> "huggingface/naacl_transfer_learning_tutorial"
"asyml/texar-pytorch" -> "timbmg/Sentence-VAE"
"asyml/texar-pytorch" -> "geek-ai/Texygen"
"asyml/texar-pytorch" -> "uber-research/PPLM"
"asyml/texar-pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch"
"asyml/texar-pytorch" -> "wiseodd/controlled-text-generation"
"nschneid/amr-tutorial" -> "amrisi/amr-guidelines"
"nschneid/amr-tutorial" -> "nschneid/amr-hackathon"
"nschneid/amr-tutorial" -> "snowblink14/smatch"
"nschneid/amr-tutorial" -> "goodmami/penman"
"AIPHES/emnlp19-moverscore" -> "Yale-LILY/SummEval" ["e"=1]
"AIPHES/emnlp19-moverscore" -> "eaclark07/sms"
"AIPHES/emnlp19-moverscore" -> "Tiiiger/bert_score"
"AIPHES/emnlp19-moverscore" -> "google-research/bleurt"
"AIPHES/emnlp19-moverscore" -> "yg211/acl20-ref-free-eval" ["e"=1]
"AIPHES/emnlp19-moverscore" -> "neulab/BARTScore" ["e"=1]
"AIPHES/emnlp19-moverscore" -> "salesforce/factCC" ["e"=1]
"src-d/wmd-relax" -> "mkusner/wmd"
"src-d/wmd-relax" -> "stephenhky/PyWMD"
"src-d/wmd-relax" -> "eaclark07/sms"
"src-d/wmd-relax" -> "google-research-datasets/sentence-compression"
"PrithivirajDamodaran/Gramformer" -> "PrithivirajDamodaran/Styleformer"
"PrithivirajDamodaran/Gramformer" -> "grammarly/gector" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "PrithivirajDamodaran/Parrot_Paraphraser"
"PrithivirajDamodaran/Gramformer" -> "recognai/rubrix"
"PrithivirajDamodaran/Gramformer" -> "neuspell/neuspell" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "chrisjbryant/errant" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "patil-suraj/question_generation" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "cdpierse/transformers-interpret"
"PrithivirajDamodaran/Gramformer" -> "awasthiabhijeet/PIE" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "ivan-bilan/The-NLP-Pandect"
"PrithivirajDamodaran/Gramformer" -> "MilaNLProc/contextualized-topic-models"
"PrithivirajDamodaran/Gramformer" -> "JohnSnowLabs/nlu"
"PrithivirajDamodaran/Gramformer" -> "nlp-uoregon/trankit"
"PrithivirajDamodaran/Gramformer" -> "NielsRogge/Transformers-Tutorials" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "MaartenGr/PolyFuzz"
"eske/multivec" -> "lmthang/bivec"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/LanguageCodes"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/MTVenues"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/NASPapers"
"vi3k6i5/GuidedLDA" -> "gregversteeg/corex_topic"
"vi3k6i5/GuidedLDA" -> "bab2min/tomotopy"
"vi3k6i5/GuidedLDA" -> "JoeZJH/Labeled-LDA-Python" ["e"=1]
"vi3k6i5/GuidedLDA" -> "meereeum/lda2vec-tf"
"vi3k6i5/GuidedLDA" -> "stephenhky/PyShortTextCategorization"
"vi3k6i5/GuidedLDA" -> "MilaNLProc/contextualized-topic-models"
"vi3k6i5/GuidedLDA" -> "MIND-Lab/OCTIS"
"vi3k6i5/GuidedLDA" -> "lda-project/lda"
"vi3k6i5/GuidedLDA" -> "cemoody/lda2vec"
"vi3k6i5/GuidedLDA" -> "akashgit/autoencoding_vi_for_topic_models" ["e"=1]
"vi3k6i5/GuidedLDA" -> "bmabey/pyLDAvis"
"vi3k6i5/GuidedLDA" -> "datquocnguyen/LFTM" ["e"=1]
"vi3k6i5/GuidedLDA" -> "rwalk/gsdmm" ["e"=1]
"vi3k6i5/GuidedLDA" -> "swisscom/ai-research-keyphrase-extraction" ["e"=1]
"vi3k6i5/GuidedLDA" -> "kk7nc/HDLTex" ["e"=1]
"vlgiitr/Group-Level-Emotion-Recognition" -> "zeroQiaoba/EmotiW2018"
"vlgiitr/Group-Level-Emotion-Recognition" -> "arassadin/emotiw2017"
"vlgiitr/Group-Level-Emotion-Recognition" -> "Marsrocky/Emotiw-Engagement-Prediction"
"NSchrading/intro-spacy-nlp" -> "explosion/spacy-notebooks"
"xdqkid/S2S-AMR-Parser" -> "RikVN/AMR"
"amarasovic/interpretability-literature" -> "sannykim/transformers"
"zhijing-jin/Text_Style_Transfer_Survey" -> "fuzhenxin/Style-Transfer-in-Text"
"zhijing-jin/Text_Style_Transfer_Survey" -> "martiansideofthemoon/style-transfer-paraphrase"
"zhijing-jin/Text_Style_Transfer_Survey" -> "fastnlp/style-transformer"
"zhijing-jin/Text_Style_Transfer_Survey" -> "raosudha89/GYAFC-corpus"
"zhijing-jin/Text_Style_Transfer_Survey" -> "rpryzant/delete_retrieve_generate"
"zhijing-jin/Text_Style_Transfer_Survey" -> "LeoLaugier/conditional-auto-encoder-text-to-text-transfer-transformer"
"zhijing-jin/Text_Style_Transfer_Survey" -> "cindyxinyiwang/deep-latent-sequence-model"
"zhijing-jin/Text_Style_Transfer_Survey" -> "lijuncen/Sentiment-and-Style-Transfer"
"zhijing-jin/Text_Style_Transfer_Survey" -> "jind11/TitleStylist"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "OmkarPathak/ResumeParser"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "chen0040/keras-english-resume-parser-and-analyzer"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "OmkarPathak/pyresparser"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "JAIJANYANI/Automated-Resume-Screening-System"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "divapriya/Language_Processing"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "bjherger/ResumeParser"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "ongteckwu/Resume-Rater"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "perminder-klair/resume-parser"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "Satrat/Resume-Parser"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "0dust/ResumeFilter"
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" -> "ManivannanMurugavel/spacy-ner-annotator"
"ManivannanMurugavel/spacy-ner-annotator" -> "ieriii/spacy-annotator"
"ManivannanMurugavel/spacy-ner-annotator" -> "tecoholic/ner-annotator"
"thumt/THUMT" -> "nyu-dl/dl4mt-tutorial"
"thumt/THUMT" -> "ZhenYangIACAS/unsupervised-NMT"
"thumt/THUMT" -> "thumt/THUCC"
"thumt/THUMT" -> "Glaceon31/Document-Transformer"
"thumt/THUMT" -> "clab/fast_align"
"thumt/THUMT" -> "tuzhaopeng/NMT-Coverage"
"thumt/THUMT" -> "rsennrich/wmt16-scripts"
"thumt/THUMT" -> "lisa-groundhog/GroundHog" ["e"=1]
"mila-udem/welcome_tutorials" -> "facebookresearch/fairseq-py"
"mila-udem/welcome_tutorials" -> "salesforce/pytorch-qrnn"
"mila-udem/welcome_tutorials" -> "Kyubyong/pytorch_exercises" ["e"=1]
"mila-udem/welcome_tutorials" -> "salesforce/matchbox"
"mila-udem/welcome_tutorials" -> "lanpa/tensorboard-pytorch" ["e"=1]
"mila-udem/welcome_tutorials" -> "dnouri/skorch" ["e"=1]
"mila-udem/welcome_tutorials" -> "ikostrikov/pytorch-a2c-ppo-acktr" ["e"=1]
"mila-udem/welcome_tutorials" -> "spro/practical-pytorch"
"mila-udem/welcome_tutorials" -> "timomernick/pytorch-capsule" ["e"=1]
"mila-udem/welcome_tutorials" -> "DSKSD/DeepNLP-models-Pytorch"
"mila-udem/welcome_tutorials" -> "probtorch/probtorch" ["e"=1]
"mila-udem/welcome_tutorials" -> "adambielski/CapsNet-pytorch" ["e"=1]
"mila-udem/welcome_tutorials" -> "QuantScientist/Deep-Learning-Boot-Camp" ["e"=1]
"mila-udem/welcome_tutorials" -> "rguthrie3/DeepLearningForNLPInPytorch"
"mila-udem/welcome_tutorials" -> "ilkarman/DeepLearningFrameworks" ["e"=1]
"NiuTrans/NASPapers" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NASPapers" -> "NiuTrans/LanguageCodes"
"CalculatedContent/WeightWatcher" -> "f-dangel/cockpit" ["e"=1]
"CalculatedContent/WeightWatcher" -> "cdpierse/transformers-interpret"
"CalculatedContent/WeightWatcher" -> "recognai/rubrix"
"CalculatedContent/WeightWatcher" -> "huggingface/setfit"
"CalculatedContent/WeightWatcher" -> "clementchadebec/benchmark_VAE" ["e"=1]
"CalculatedContent/WeightWatcher" -> "koaning/doubtlab" ["e"=1]
"CalculatedContent/WeightWatcher" -> "deepchecks/deepchecks" ["e"=1]
"CalculatedContent/WeightWatcher" -> "jalammar/ecco"
"CalculatedContent/WeightWatcher" -> "NannyML/nannyml" ["e"=1]
"CalculatedContent/WeightWatcher" -> "online-ml/river" ["e"=1]
"CalculatedContent/WeightWatcher" -> "mosaicml/composer" ["e"=1]
"CalculatedContent/WeightWatcher" -> "archinetai/surgeon-pytorch" ["e"=1]
"CalculatedContent/WeightWatcher" -> "patrick-kidger/equinox" ["e"=1]
"CalculatedContent/WeightWatcher" -> "aimhubio/aim" ["e"=1]
"CalculatedContent/WeightWatcher" -> "patrick-kidger/torchtyping" ["e"=1]
"obsei/obsei" -> "recognai/rubrix"
"obsei/obsei" -> "gradsflow/gradsflow"
"obsei/obsei" -> "ramsrigouthamg/Questgen.ai" ["e"=1]
"obsei/obsei" -> "PrithivirajDamodaran/Gramformer"
"minimaxir/tweet-generator" -> "minimaxir/autotweet-from-googlesheet"
"Currie32/Text-Summarization-with-Amazon-Reviews" -> "j-min/tf_tutorial_plus"
"Currie32/Text-Summarization-with-Amazon-Reviews" -> "commonsense/conceptnet-numberbatch"
"Currie32/Text-Summarization-with-Amazon-Reviews" -> "surmenok/TextSum" ["e"=1]
"Currie32/Text-Summarization-with-Amazon-Reviews" -> "theamrzaki/text_summurization_abstractive_methods" ["e"=1]
"Currie32/Text-Summarization-with-Amazon-Reviews" -> "chen0040/keras-text-summarization" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "Sarasra/models" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "openai/gradient-checkpointing" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "hannw/nlstm"
"Mrgemy95/Tensorflow-Project-Template" -> "arogozhnikov/python3_with_pleasure" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "GauravBh1010tt/DeepLearn"
"Mrgemy95/Tensorflow-Project-Template" -> "sjchoi86/advanced-tensorflow" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "Mrgemy95/visual-interaction-networks-pytorch" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "astorfi/TensorFlow-World-Resources" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "mila-udem/welcome_tutorials"
"Mrgemy95/Tensorflow-Project-Template" -> "sjchoi86/bayes-nn" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "khanrc/tf.gans-comparison" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "mind/wheels" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "naturomics/CapsNet-Tensorflow" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "taehoonlee/tensornets" ["e"=1]
"Mrgemy95/Tensorflow-Project-Template" -> "hunkim/deep_architecture_genealogy" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/spark-nlp"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/spark-nlp-models"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/nlu"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/nlptest"
"JohnSnowLabs/spark-nlp-workshop" -> "MaartenGr/PolyFuzz"
"JohnSnowLabs/spark-nlp-workshop" -> "explosion/projects"
"JohnSnowLabs/spark-nlp-workshop" -> "ivan-bilan/The-NLP-Pandect"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/spark-ocr-workshop"
"JohnSnowLabs/spark-nlp-workshop" -> "Liquid-Legal-Institute/Legal-Text-Analytics" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "deepset-ai/FARM"
"JohnSnowLabs/spark-nlp-workshop" -> "alexander-n-thomas/spark-nlp-book"
"JohnSnowLabs/spark-nlp-workshop" -> "explosion/spacy-transformers"
"JohnSnowLabs/spark-nlp-workshop" -> "dmis-lab/biobert" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "recognai/rubrix"
"JohnSnowLabs/spark-nlp-workshop" -> "microsoft/nlp-recipes"
"roomylee/EMNLP-2019-Papers" -> "roomylee/ACL-2020-Papers"
"roomylee/EMNLP-2019-Papers" -> "facebookresearch/unlikelihood_training"
"roomylee/EMNLP-2019-Papers" -> "pingpong-ai/dialogue-generation-models" ["e"=1]
"miohtama/python-Levenshtein" -> "ztane/python-Levenshtein"
"mjpost/sacrebleu" -> "alvations/sacremoses"
"mjpost/sacrebleu" -> "Unbabel/COMET"
"mjpost/sacrebleu" -> "Tiiiger/bert_score"
"mjpost/sacrebleu" -> "clab/fast_align"
"mjpost/sacrebleu" -> "google-research/bleurt"
"mjpost/sacrebleu" -> "glample/fastBPE"
"mjpost/sacrebleu" -> "facebookresearch/flores"
"mjpost/sacrebleu" -> "rsennrich/subword-nmt"
"mjpost/sacrebleu" -> "moses-smt/mosesdecoder"
"mjpost/sacrebleu" -> "neulab/compare-mt"
"mjpost/sacrebleu" -> "thammegowda/mtdata"
"mjpost/sacrebleu" -> "neulab/awesome-align"
"mjpost/sacrebleu" -> "Maluuba/nlg-eval" ["e"=1]
"mjpost/sacrebleu" -> "OpenNMT/CTranslate2"
"mjpost/sacrebleu" -> "lilt/alignment-scripts"
"huggingface/naacl_transfer_learning_tutorial" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/naacl_transfer_learning_tutorial" -> "huggingface/hmtl"
"huggingface/naacl_transfer_learning_tutorial" -> "facebookresearch/randsent" ["e"=1]
"huggingface/naacl_transfer_learning_tutorial" -> "alexandra-chron/siatl"
"huggingface/naacl_transfer_learning_tutorial" -> "clarkkev/attention-analysis" ["e"=1]
"huggingface/naacl_transfer_learning_tutorial" -> "nelson-liu/contextual-repr-analysis"
"huggingface/naacl_transfer_learning_tutorial" -> "facebookresearch/XLM"
"huggingface/naacl_transfer_learning_tutorial" -> "facebookresearch/adaptive-span"
"huggingface/naacl_transfer_learning_tutorial" -> "namisan/mt-dnn"
"huggingface/naacl_transfer_learning_tutorial" -> "huggingface/awesome-papers"
"huggingface/naacl_transfer_learning_tutorial" -> "kaushaltrivedi/fast-bert"
"huggingface/naacl_transfer_learning_tutorial" -> "feedly/transfer-nlp"
"huggingface/naacl_transfer_learning_tutorial" -> "huggingface/transfer-learning-conv-ai"
"huggingface/naacl_transfer_learning_tutorial" -> "asyml/texar-pytorch"
"huggingface/naacl_transfer_learning_tutorial" -> "harvardnlp/pytorch-struct"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/awesome-ML-projects-guide"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/notebooks"
"asahi417/tner" -> "kabirkhan/recon"
"asahi417/tner" -> "HLasse/TextDescriptives"
"asahi417/tner" -> "Pandora-Intelligence/concise-concepts"
"ufal/neuralmonkey" -> "rsennrich/nematus"
"ufal/neuralmonkey" -> "neubig/nmt-tips"
"ufal/neuralmonkey" -> "rsennrich/wmt16-scripts"
"ufal/neuralmonkey" -> "lium-lst/nmtpy"
"ufal/neuralmonkey" -> "jonsafari/nmt-list"
"ufal/neuralmonkey" -> "nyu-dl/dl4mt-c2c"
"ufal/neuralmonkey" -> "mjpost/sacreBLEU"
"ufal/neuralmonkey" -> "EdinburghNLP/nematus"
"ufal/neuralmonkey" -> "nyu-dl/dl4mt-multi"
"ufal/neuralmonkey" -> "lmthang/nmt.hybrid"
"ufal/neuralmonkey" -> "neubig/lamtram"
"ufal/neuralmonkey" -> "rsennrich/subword-nmt"
"ufal/neuralmonkey" -> "lisa-groundhog/GroundHog" ["e"=1]
"ufal/neuralmonkey" -> "awslabs/sockeye"
"ufal/neuralmonkey" -> "google/seq2seq"
"dair-ai/nlp_newsletter" -> "dair-ai/nlp_fundamentals"
"dair-ai/nlp_newsletter" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_newsletter" -> "dair-ai/nlp_paper_summaries"
"dair-ai/nlp_newsletter" -> "dair-ai/pytorch_notebooks"
"dair-ai/nlp_newsletter" -> "sannykim/transformers"
"dair-ai/nlp_newsletter" -> "dair-ai/d2l-study-group"
"optimaize/language-detector" -> "shuyo/language-detection"
"optimaize/language-detector" -> "CLD2Owners/cld2"
"optimaize/language-detector" -> "pemistahl/lingua"
"optimaize/language-detector" -> "carrotsearch/langid-java"
"optimaize/language-detector" -> "mikemccand/chromium-compact-language-detector"
"optimaize/language-detector" -> "shuyo/ldig"
"optimaize/language-detector" -> "rmtheis/language-detection"
"neubig/lowresource-nlp-bootcamp-2020" -> "roomylee/ACL-2020-Papers"
"neubig/lowresource-nlp-bootcamp-2020" -> "neubig/nn4nlp-code"
"neubig/lowresource-nlp-bootcamp-2020" -> "harvardnlp/pytorch-struct"
"neubig/lowresource-nlp-bootcamp-2020" -> "huggingface/awesome-papers"
"neubig/lowresource-nlp-bootcamp-2020" -> "marcotcr/checklist"
"neubig/lowresource-nlp-bootcamp-2020" -> "facebookresearch/flores"
"neubig/lowresource-nlp-bootcamp-2020" -> "facebookresearch/KILT" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "joeynmt/joeynmt"
"neubig/lowresource-nlp-bootcamp-2020" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "google-research/language" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "neulab/compare-mt"
"neubig/lowresource-nlp-bootcamp-2020" -> "ivan-bilan/The-NLP-Pandect"
"neubig/lowresource-nlp-bootcamp-2020" -> "google-research/xtreme"
"neubig/lowresource-nlp-bootcamp-2020" -> "dair-ai/nlp_paper_summaries"
"neubig/lowresource-nlp-bootcamp-2020" -> "neulab/nn4nlp-concepts"
"amrisi/amr-guidelines" -> "jflanigan/jamr"
"amrisi/amr-guidelines" -> "goodmami/penman"
"amrisi/amr-guidelines" -> "sheng-z/stog"
"amrisi/amr-guidelines" -> "bjascob/amrlib"
"amrisi/amr-guidelines" -> "nschneid/amr-tutorial"
"amrisi/amr-guidelines" -> "propbank/propbank-frames"
"amrisi/amr-guidelines" -> "c-amr/camr"
"amrisi/amr-guidelines" -> "snowblink14/smatch"
"amrisi/amr-guidelines" -> "SapienzaNLP/spring"
"amrisi/amr-guidelines" -> "IBM/transition-amr-parser"
"bjascob/amrlib" -> "goodmami/penman"
"bjascob/amrlib" -> "SapienzaNLP/spring"
"bjascob/amrlib" -> "IBM/transition-amr-parser"
"bjascob/amrlib" -> "IBM/graph_ensemble_learning"
"bjascob/amrlib" -> "amrisi/amr-guidelines"
"bjascob/amrlib" -> "jcyk/AMR-gs"
"bjascob/amrlib" -> "bjascob/amrlib-models"
"bjascob/amrlib" -> "sheng-z/stog"
"bjascob/amrlib" -> "RikVN/AMR"
"google-research-datasets/paws" -> "neulab/compare-mt"
"google-research-datasets/paws" -> "wasiahmad/paraphrase_identification"
"google-research-datasets/paws" -> "Tiiiger/bert_score"
"google-research-datasets/paws" -> "miyyer/scpn"
"google-research-datasets/paws" -> "google-research-datasets/tydiqa"
"google-research-datasets/paws" -> "naver/nlp-challenge" ["e"=1]
"google-research-datasets/paws" -> "facebookresearch/cc_net"
"google-research-datasets/paws" -> "deepmind/xquad"
"google-research-datasets/paws" -> "nelson-liu/contextual-repr-analysis"
"google-research-datasets/paws" -> "Vamsi995/Paraphrase-Generator"
"google-research-datasets/paws" -> "uwnlp/piqa" ["e"=1]
"google-research-datasets/paws" -> "john-hewitt/structural-probes"
"google-research-datasets/paws" -> "malllabiisc/SGCP"
"google-research-datasets/paws" -> "ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-"
"google-research-datasets/paws" -> "jwieting/para-nmt-50m"
"chrisjmccormick/word2vec_commented" -> "chrisjmccormick/inspect_word2vec"
"chrisjmccormick/word2vec_commented" -> "tmikolov/word2vec"
"chrisjmccormick/word2vec_commented" -> "dav/word2vec"
"chrisjmccormick/word2vec_commented" -> "theeluwin/pytorch-sgns"
"chrisjmccormick/word2vec_commented" -> "ronxin/wevi"
"chrisjmccormick/word2vec_commented" -> "deborausujono/word2vecpy"
"chrisjmccormick/word2vec_commented" -> "srendle/libfm" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "stanfordnlp/GloVe"
"chrisjmccormick/word2vec_commented" -> "guestwalk/libffm" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "ryankiros/skip-thoughts"
"chrisjmccormick/word2vec_commented" -> "hankcs/CS224n"
"chrisjmccormick/word2vec_commented" -> "maxoodf/word2vec" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "ycjuan/libffm" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "lambdaji/tf_repos" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "tensorflow/nmt"
"zeroQiaoba/EmotiW2018" -> "bknyaz/emotiw"
"zeroQiaoba/EmotiW2018" -> "Marsrocky/Emotiw-Engagement-Prediction"
"zeroQiaoba/EmotiW2018" -> "vlgiitr/Group-Level-Emotion-Recognition"
"zeroQiaoba/EmotiW2018" -> "lemin0922/EmotiW-2018"
"zeroQiaoba/EmotiW2018" -> "EvelynFan/DSN"
"conll/reference-coreference-scorers" -> "kiankd/events"
"williamSYSU/TextGAN-PyTorch" -> "geek-ai/Texygen"
"williamSYSU/TextGAN-PyTorch" -> "suragnair/seqGAN"
"williamSYSU/TextGAN-PyTorch" -> "ChenChengKuan/awesome-text-generation"
"williamSYSU/TextGAN-PyTorch" -> "ZiJianZhao/SeqGAN-PyTorch"
"williamSYSU/TextGAN-PyTorch" -> "THUNLP-MT/TG-Reading-List"
"williamSYSU/TextGAN-PyTorch" -> "CR-Gjx/LeakGAN"
"williamSYSU/TextGAN-PyTorch" -> "LantaoYu/SeqGAN"
"williamSYSU/TextGAN-PyTorch" -> "weilinie/RelGAN"
"williamSYSU/TextGAN-PyTorch" -> "timbmg/Sentence-VAE"
"williamSYSU/TextGAN-PyTorch" -> "fuzhenxin/Style-Transfer-in-Text"
"williamSYSU/TextGAN-PyTorch" -> "asyml/texar-pytorch"
"williamSYSU/TextGAN-PyTorch" -> "uber-research/PPLM"
"williamSYSU/TextGAN-PyTorch" -> "atulkum/pointer_summarizer" ["e"=1]
"williamSYSU/TextGAN-PyTorch" -> "Maluuba/nlg-eval" ["e"=1]
"williamSYSU/TextGAN-PyTorch" -> "rikdz/GraphWriter"
"AkariAsai/CORA" -> "AkariAsai/XORQA"
"Unbabel/COMET" -> "thammegowda/mtdata"
"Unbabel/COMET" -> "thompsonb/prism"
"Unbabel/COMET" -> "TharinduDR/TransQuest"
"Unbabel/COMET" -> "Unbabel/OpenKiwi"
"Unbabel/COMET" -> "google-research/bleurt"
"Unbabel/COMET" -> "neulab/awesome-align"
"Unbabel/COMET" -> "mjpost/sacrebleu"
"Unbabel/COMET" -> "Unbabel/MT-Telescope"
"Unbabel/COMET" -> "neulab/compare-mt"
"Unbabel/COMET" -> "google-research/mt-metrics-eval"
"Unbabel/COMET" -> "bzhangGo/zero"
"Unbabel/COMET" -> "zhengxxn/adaptive-knn-mt" ["e"=1]
"Unbabel/COMET" -> "Helsinki-NLP/OpusFilter"
"Unbabel/COMET" -> "wmt-conference/wmt22-news-systems"
"Unbabel/COMET" -> "bitextor/bicleaner"
"nlp-uoregon/trankit" -> "vncorenlp/VnCoreNLP" ["e"=1]
"nlp-uoregon/trankit" -> "UKPLab/EasyNMT"
"nlp-uoregon/trankit" -> "VinAIResearch/PhoBERT" ["e"=1]
"nlp-uoregon/trankit" -> "neulab/awesome-align"
"nlp-uoregon/trankit" -> "VinAIResearch/PhoNLP" ["e"=1]
"nlp-uoregon/trankit" -> "binhvq/news-corpus" ["e"=1]
"nlp-uoregon/trankit" -> "recognai/rubrix"
"nlp-uoregon/trankit" -> "NorskRegnesentral/skweak"
"nlp-uoregon/trankit" -> "trungtv/pyvi" ["e"=1]
"nlp-uoregon/trankit" -> "webis-de/small-text"
"nlp-uoregon/trankit" -> "microsoft/fastformers"
"nlp-uoregon/trankit" -> "PrithivirajDamodaran/Gramformer"
"nlp-uoregon/trankit" -> "MaartenGr/PolyFuzz"
"nlp-uoregon/trankit" -> "neuspell/neuspell" ["e"=1]
"nlp-uoregon/trankit" -> "stanfordnlp/stanza"
"webis-de/small-text" -> "recognai/rubrix"
"webis-de/small-text" -> "huggingface/setfit"
"webis-de/small-text" -> "Pandora-Intelligence/crosslingual-coreference"
"webis-de/small-text" -> "KennethEnevoldsen/augmenty"
"webis-de/small-text" -> "HLasse/TextDescriptives"
"webis-de/small-text" -> "allenai/pawls"
"webis-de/small-text" -> "DFKI-NLP/thermostat"
"webis-de/small-text" -> "MLSysOps/Active-Learning-as-a-Service"
"webis-de/small-text" -> "TimSchopf/KeyphraseVectorizers"
"webis-de/small-text" -> "Pandora-Intelligence/concise-concepts"
"webis-de/small-text" -> "NorskRegnesentral/skweak"
"webis-de/small-text" -> "koaning/embetter" ["e"=1]
"robustness-gym/robustness-gym" -> "facebookresearch/anli" ["e"=1]
"robustness-gym/robustness-gym" -> "marcotcr/checklist"
"robustness-gym/robustness-gym" -> "GEM-benchmark/NL-Augmenter"
"robustness-gym/robustness-gym" -> "neulab/InterpretEval"
"robustness-gym/robustness-gym" -> "facebookresearch/SentAugment"
"robustness-gym/robustness-gym" -> "timoschick/dino" ["e"=1]
"robustness-gym/robustness-gym" -> "microsoft/fastformers"
"robustness-gym/robustness-gym" -> "jalammar/ecco"
"freesunshine0316/neural-graph-to-seq-mp" -> "sinantie/NeuralAmr"
"freesunshine0316/neural-graph-to-seq-mp" -> "beckdaniel/acl2018_graph2seq"
"freesunshine0316/neural-graph-to-seq-mp" -> "diegma/graph-2-text"
"freesunshine0316/neural-graph-to-seq-mp" -> "freesunshine0316/semantic-nmt"
"freesunshine0316/neural-graph-to-seq-mp" -> "jflanigan/jamr"
"freesunshine0316/neural-graph-to-seq-mp" -> "sheng-z/stog"
"freesunshine0316/neural-graph-to-seq-mp" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"freesunshine0316/neural-graph-to-seq-mp" -> "freesunshine0316/nary-grn" ["e"=1]
"freesunshine0316/neural-graph-to-seq-mp" -> "Amazing-J/structural-transformer"
"freesunshine0316/neural-graph-to-seq-mp" -> "mdtux89/OpenNMT-py-AMR-to-text"
"renatoviolin/Question-Answering-Albert-Electra" -> "renatoviolin/Semantic-Search"
"renatoviolin/Question-Answering-Albert-Electra" -> "renatoviolin/Bart_T5-summarization"
"pemywei/attention-nmt" -> "pemywei/basic-encoder-decoder"
"mihail911/nlp-library" -> "hb20007/hands-on-nltk-tutorial"
"mihail911/nlp-library" -> "huggingface/naacl_transfer_learning_tutorial"
"mihail911/nlp-library" -> "dair-ai/nlp_paper_summaries"
"mihail911/nlp-library" -> "fastai/course-nlp"
"mihail911/nlp-library" -> "omarsar/nlp_overview"
"mihail911/nlp-library" -> "ivan-bilan/The-NLP-Pandect"
"mihail911/nlp-library" -> "brianspiering/awesome-dl4nlp"
"mihail911/nlp-library" -> "jacobeisenstein/gt-nlp-class"
"mihail911/nlp-library" -> "VKCOM/YouTokenToMe"
"mihail911/nlp-library" -> "huggingface/awesome-papers"
"mihail911/nlp-library" -> "mhagiwara/100-nlp-papers"
"mihail911/nlp-library" -> "facebookresearch/XLM"
"mihail911/nlp-library" -> "zalandoresearch/flair"
"mihail911/nlp-library" -> "neulab/nn4nlp-concepts"
"mihail911/nlp-library" -> "salesforce/decaNLP"
"Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning" -> "LaxmiChaudhary/Amzon-Product-Recommendation"
"pemistahl/lingua" -> "optimaize/language-detector"
"pemistahl/lingua" -> "michaelbull/kotlin-retry" ["e"=1]
"pemistahl/lingua" -> "ajalt/mordant" ["e"=1]
"pemistahl/lingua" -> "JetBrains/KotlinDL" ["e"=1]
"pemistahl/lingua" -> "sksamuel/hoplite" ["e"=1]
"Helsinki-NLP/Opus-MT" -> "Helsinki-NLP/OPUS-MT-train"
"Helsinki-NLP/Opus-MT" -> "Helsinki-NLP/Tatoeba-Challenge"
"Helsinki-NLP/Opus-MT" -> "cisnlp/simalign"
"Helsinki-NLP/Opus-MT" -> "marian-nmt/marian"
"Helsinki-NLP/Opus-MT" -> "UKPLab/EasyNMT"
"Helsinki-NLP/Opus-MT" -> "robertostling/eflomal"
"Helsinki-NLP/Opus-MT" -> "OpenNMT/CTranslate2"
"yitu-opensource/ConvBert" -> "alexa/bort"
"raosudha89/GYAFC-corpus" -> "fuzhenxin/textstyletransferdata"
"raosudha89/GYAFC-corpus" -> "jimth001/formality_emnlp19"
"raosudha89/GYAFC-corpus" -> "lijuncen/Sentiment-and-Style-Transfer"
"raosudha89/GYAFC-corpus" -> "cookielee77/DAST"
"batzner/indrnn" -> "Sunnydreamrain/IndRNN_Theano_Lasagne"
"batzner/indrnn" -> "StefOe/indrnn-pytorch"
"batzner/indrnn" -> "Sunnydreamrain/IndRNN_pytorch"
"batzner/indrnn" -> "titu1994/Keras-IndRNN"
"batzner/indrnn" -> "hannw/nlstm"
"batzner/indrnn" -> "salesforce/pytorch-qrnn"
"batzner/indrnn" -> "theSage21/IndRNN"
"goodmami/penman" -> "sheng-z/stog"
"goodmami/penman" -> "bjascob/amrlib"
"goodmami/penman" -> "amrisi/amr-guidelines"
"goodmami/penman" -> "IBM/graph_ensemble_learning"
"goodmami/penman" -> "jcyk/AMR-gs"
"goodmami/penman" -> "RikVN/AMR"
"goodmami/penman" -> "SapienzaNLP/spring"
"goodmami/penman" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"goodmami/penman" -> "snowblink14/smatch"
"summarization/semantic_summ" -> "sheffieldnlp/AMR2Text-summ"
"kootenpv/contractions" -> "ian-beaver/pycontractions"
"jgontrum/spacy-api-docker" -> "explosion/spacy-services"
"jgontrum/spacy-api-docker" -> "ines/spacy-js"
"jgontrum/spacy-api-docker" -> "neelkamath/spacy-server"
"jgontrum/spacy-api-docker" -> "ines/spacy-graphql"
"hellohaptik/chatbot_ner" -> "hellohaptik/spello"
"hellohaptik/chatbot_ner" -> "viraja1/mitm_postman"
"hellohaptik/chatbot_ner" -> "hellohaptik/multi-task-NLP"
"explosion/spacy-notebooks" -> "explosion/spacy-services"
"explosion/spacy-notebooks" -> "NSchrading/intro-spacy-nlp"
"explosion/spacy-notebooks" -> "explosion/talks"
"explosion/spacy-notebooks" -> "explosion/spacy-dev-resources"
"explosion/spacy-notebooks" -> "explosion/prodigy-recipes"
"mandarjoshi90/coref" -> "kentonl/e2e-coref"
"mandarjoshi90/coref" -> "ShannonAI/CorefQA"
"mandarjoshi90/coref" -> "shayneobrien/coreference-resolution"
"mandarjoshi90/coref" -> "facebookresearch/SpanBERT"
"mandarjoshi90/coref" -> "kkjawz/coref-ee"
"mandarjoshi90/coref" -> "clarkkev/deep-coref"
"mandarjoshi90/coref" -> "troublemaker-r/Chinese_Coreference_Resolution"
"mandarjoshi90/coref" -> "lxucs/coref-hoi"
"mandarjoshi90/coref" -> "conll/reference-coreference-scorers"
"mandarjoshi90/coref" -> "google-research-datasets/gap-coreference"
"mandarjoshi90/coref" -> "vdobrovolskii/wl-coref"
"mandarjoshi90/coref" -> "thunlp/CorefBERT"
"mandarjoshi90/coref" -> "huggingface/neuralcoref"
"mandarjoshi90/coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"mandarjoshi90/coref" -> "emorynlp/coref-hoi"
"amirbar/rnn.wgan" -> "jakezhaojb/ARAE"
"amirbar/rnn.wgan" -> "ofirnachum/sequence_gan"
"amirbar/rnn.wgan" -> "CR-Gjx/LeakGAN"
"IBM/transition-amr-parser" -> "bjascob/amrlib"
"IBM/transition-amr-parser" -> "SapienzaNLP/spring"
"IBM/transition-amr-parser" -> "jcyk/AMR-gs"
"IBM/transition-amr-parser" -> "zhangzx-uiuc/AMR-IE"
"IBM/transition-amr-parser" -> "jflanigan/jamr"
"IBM/transition-amr-parser" -> "IBM/graph_ensemble_learning"
"IBM/transition-amr-parser" -> "goodmami/penman"
"IBM/transition-amr-parser" -> "RikVN/AMR"
"NicGian/text_VAE" -> "alexeyev/Keras-Generating-Sentences-from-a-Continuous-Space"
"snowblink14/smatch" -> "mdtux89/amr-evaluation"
"oborchers/Fast_Sentence_Embeddings" -> "PrincetonML/SIF"
"oborchers/Fast_Sentence_Embeddings" -> "linkedin/detext"
"oborchers/Fast_Sentence_Embeddings" -> "epfml/sent2vec"
"oborchers/Fast_Sentence_Embeddings" -> "kevinlu1248/pyate" ["e"=1]
"oborchers/Fast_Sentence_Embeddings" -> "kawine/usif"
"oborchers/Fast_Sentence_Embeddings" -> "Separius/awesome-sentence-embedding"
"oborchers/Fast_Sentence_Embeddings" -> "koursaros-ai/nboost"
"oborchers/Fast_Sentence_Embeddings" -> "recognai/rubrix"
"oborchers/Fast_Sentence_Embeddings" -> "deepset-ai/FARM"
"oborchers/Fast_Sentence_Embeddings" -> "cdpierse/transformers-interpret"
"oborchers/Fast_Sentence_Embeddings" -> "MilaNLProc/contextualized-topic-models"
"oborchers/Fast_Sentence_Embeddings" -> "plasticityai/magnitude"
"oborchers/Fast_Sentence_Embeddings" -> "ddangelov/Top2Vec"
"oborchers/Fast_Sentence_Embeddings" -> "facebookresearch/SentAugment"
"oborchers/Fast_Sentence_Embeddings" -> "MaartenGr/PolyFuzz"
"neubig/nlptutorial" -> "neubig/nn4nlp2017-code"
"neubig/nlptutorial" -> "neubig/nn4nlp-code"
"neubig/nlptutorial" -> "clab/dynet_tutorial_examples"
"neubig/nlptutorial" -> "neubig/kytea" ["e"=1]
"neubig/nlptutorial" -> "ymym3412/acl-papers" ["e"=1]
"Baichenjia/Tensorflow-TCN" -> "YuanTingHsieh/TF_TCN"
"Baichenjia/Tensorflow-TCN" -> "Songweiping/TCN-TF"
"KrisKorrel/sparsemax-pytorch" -> "vene/sparse-structured-attention"
"KrisKorrel/sparsemax-pytorch" -> "gokceneraslan/SparseMax.torch"
"mimno/Mallet" -> "factorie/factorie" ["e"=1]
"mimno/Mallet" -> "cpsievert/LDAvis" ["e"=1]
"mimno/Mallet" -> "brendano/ark-tweet-nlp" ["e"=1]
"mimno/Mallet" -> "piskvorky/gensim" ["e"=1]
"mimno/Mallet" -> "cemoody/lda2vec"
"mimno/Mallet" -> "xiaohuiyan/BTM" ["e"=1]
"mimno/Mallet" -> "shuyo/iir" ["e"=1]
"mimno/Mallet" -> "apache/opennlp"
"mimno/Mallet" -> "ryankiros/skip-thoughts"
"mimno/Mallet" -> "aritter/twitter_nlp" ["e"=1]
"mimno/Mallet" -> "jhlau/topic_interpretability" ["e"=1]
"mimno/Mallet" -> "lintool/Mr.LDA" ["e"=1]
"mimno/Mallet" -> "bmabey/pyLDAvis"
"mimno/Mallet" -> "datumbox/datumbox-framework" ["e"=1]
"mimno/Mallet" -> "stanfordnlp/CoreNLP"
"danielvarga/hunalign" -> "thompsonb/vecalign"
"danielvarga/hunalign" -> "rsennrich/Bleualign"
"marian-nmt/marian-dev" -> "marian-nmt/marian"
"facebookresearch/unlikelihood_training" -> "ari-holtzman/degen"
"minimaxir/gpt-2-keyword-generation" -> "minimaxir/ctrl-gce"
"minimaxir/gpt-2-keyword-generation" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/gpt-2-keyword-generation" -> "uber-research/PPLM"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "andrewt3000/DL4NLP"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "attardi/deepnl" ["e"=1]
"shashankg7/Deep-Learning-for-NLP-Resources" -> "UKPLab/deeplearning4nlp-tutorial"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "keonkim/awesome-nlp"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "kristjankorjus/applied-deep-learning-resources" ["e"=1]
"shashankg7/Deep-Learning-for-NLP-Resources" -> "leriomaggio/deep-learning-keras-euroscipy2016" ["e"=1]
"shashankg7/Deep-Learning-for-NLP-Resources" -> "karthikncode/nlp-datasets" ["e"=1]
"deepmind/ithaca" -> "sommerschield/iphi"
"deepmind/ithaca" -> "sommerschield/ancient-text-restoration"
"deepmind/ithaca" -> "facebookresearch/StyleNeRF" ["e"=1]
"dphi-official/Data_Science_Bootcamp" -> "dphi-official/Machine_Learning_Bootcamp"
"dphi-official/Data_Science_Bootcamp" -> "pycaret/pycaret-demo-dphi"
"dphi-official/Data_Science_Bootcamp" -> "dphi-official/Deep_Learning_Bootcamp"
"dphi-official/Data_Science_Bootcamp" -> "dphi-official/Datasets"
"kengz/spacy-nlp" -> "ines/spacy-js"
"kengz/spacy-nlp" -> "kengz/CGKB"
"explosion/spacy-pytorch-transformers" -> "IndicoDataSolutions/finetune"
"explosion/spacy-pytorch-transformers" -> "explosion/srsly"
"explosion/spacy-pytorch-transformers" -> "explosion/spacy-stanfordnlp" ["e"=1]
"explosion/spacy-pytorch-transformers" -> "kabirkhan/recon"
"patrickjquinn/P-Brain.ai" -> "patrickjquinn/P-Brain.ai-RasPi"
"nyu-dl/dl4mt-cdec" -> "nyu-dl/dl4mt-c2c"
"nyu-dl/dl4mt-cdec" -> "nyu-dl/dl4mt-multi"
"nyu-dl/dl4mt-cdec" -> "SwordYork/DCNMT"
"Edward1Chou/textClustering" -> "arnab64/textclusteringDBSCAN"
"Edward1Chou/textClustering" -> "RandyPen/TextCluster"
"Edward1Chou/textClustering" -> "zhangfazhan/text_clustering"
"Edward1Chou/textClustering" -> "Edward1Chou/Textclassification"
"sedflix/awesome-topic-segmentation" -> "koomri/text-segmentation"
"sedflix/awesome-topic-segmentation" -> "pinkeshbadjatiya/neuralTextSegmentation"
"sedflix/awesome-topic-segmentation" -> "chschock/textsplit"
"sedflix/awesome-topic-segmentation" -> "gdamaskinos/unsupervised_topic_segmentation"
"sedflix/awesome-topic-segmentation" -> "riedlma/topictiling"
"sedflix/awesome-topic-segmentation" -> "lxing532/improve_topic_seg"
"rsennrich/nematus" -> "emjotde/amunmt"
"rsennrich/nematus" -> "rsennrich/wmt16-scripts"
"rsennrich/nematus" -> "neubig/nmt-tips"
"rsennrich/nematus" -> "neubig/lamtram"
"rsennrich/nematus" -> "kyunghyuncho/dl4mt-material"
"rsennrich/nematus" -> "jonsafari/nmt-list"
"rsennrich/nematus" -> "nyu-dl/dl4mt-tutorial"
"rsennrich/nematus" -> "nyu-dl/dl4mt-multi"
"rsennrich/nematus" -> "nyu-dl/dl4mt-c2c"
"rsennrich/nematus" -> "ufal/neuralmonkey"
"rsennrich/nematus" -> "jhclark/multeval"
"rsennrich/nematus" -> "mila-udem/blocks-examples" ["e"=1]
"rsennrich/nematus" -> "mjpost/sacreBLEU"
"rsennrich/nematus" -> "lium-lst/nmtpy"
"rsennrich/nematus" -> "nyu-dl/dl4mt-cdec"
"ChenChengKuan/SeqGAN_tensorflow" -> "TobiasLee/SeqGAN_Poem"
"ChenChengKuan/SeqGAN_tensorflow" -> "codekansas/seqgan-text-tensorflow"
"chrishokamp/constrained_decoding" -> "raymondhs/constrained-levt"
"sannykim/transformers" -> "amarasovic/interpretability-literature"
"sannykim/transformers" -> "dair-ai/nlp_newsletter"
"sannykim/transformers" -> "explosion/spacy-pytorch-transformers"
"JayParks/tf-seq2seq" -> "eske/seq2seq"
"JayParks/tf-seq2seq" -> "ematvey/tensorflow-seq2seq-tutorials"
"JayParks/tf-seq2seq" -> "j-min/tf_tutorial_plus"
"JayParks/tf-seq2seq" -> "suriyadeepan/practical_seq2seq" ["e"=1]
"JayParks/tf-seq2seq" -> "carpedm20/MemN2N-tensorflow" ["e"=1]
"JayParks/tf-seq2seq" -> "liuyuemaicha/Adversarial-Learning-for-Neural-Dialogue-Generation-in-Tensorflow" ["e"=1]
"JayParks/tf-seq2seq" -> "chilynn/sequence-labeling" ["e"=1]
"JayParks/tf-seq2seq" -> "vrenkens/nabu" ["e"=1]
"cdimascio/py-readability-metrics" -> "shivam5992/textstat"
"yoavg/bert-syntax" -> "TalLinzen/rnn_agreement"
"yoavg/bert-syntax" -> "nelson-liu/contextual-repr-analysis"
"dbamman/litbank" -> "dbamman/book-nlp"
"dbamman/litbank" -> "booknlp/booknlp"
"dbamman/litbank" -> "mandarjoshi90/coref"
"dbamman/litbank" -> "pitrack/incremental-coref"
"dbamman/litbank" -> "cohure/CoHuRe"
"dbamman/litbank" -> "rtmdrr/testSignificanceNLP" ["e"=1]
"clarkkev/deep-coref" -> "swiseman/nn_coref"
"clarkkev/deep-coref" -> "kentonl/e2e-coref"
"clarkkev/deep-coref" -> "shayneobrien/coreference-resolution"
"clarkkev/deep-coref" -> "mandarjoshi90/coref"
"clarkkev/deep-coref" -> "smartschat/cort" ["e"=1]
"clarkkev/deep-coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"clarkkev/deep-coref" -> "google-research-datasets/gap-coreference"
"clarkkev/deep-coref" -> "ShannonAI/CorefQA"
"clarkkev/deep-coref" -> "kkjawz/coref-ee"
"clarkkev/deep-coref" -> "huggingface/neuralcoref"
"clarkkev/deep-coref" -> "gregdurrett/berkeley-entity" ["e"=1]
"thunlp/OpenBackdoor" -> "thunlp/HiddenKiller"
"thunlp/OpenBackdoor" -> "thunlp/ONION"
"Sunnydreamrain/IndRNN_pytorch" -> "StefOe/indrnn-pytorch"
"Sunnydreamrain/IndRNN_pytorch" -> "zibeu/Independently-Recurrent-Neural-Network---IndRNN"
"Sunnydreamrain/IndRNN_pytorch" -> "theSage21/IndRNN"
"Sunnydreamrain/IndRNN_pytorch" -> "batzner/indrnn"
"svn2github/word2vec" -> "zhezhaoa/ngram2vec"
"svn2github/word2vec" -> "dav/word2vec"
"svn2github/word2vec" -> "siegfang/word2vec" ["e"=1]
"svn2github/word2vec" -> "largelymfs/topical_word_embeddings" ["e"=1]
"XiaoYee/emotion_classification" -> "ebadawy/EmotiW2017"
"XiaoYee/emotion_classification" -> "xujinchang/EmotiW-2017-Audio-video-Emotion-Recognition"
"troublemaker-r/Chinese_Coreference_Resolution" -> "vdobrovolskii/wl-coref"
"eske/seq2seq" -> "JayParks/tf-seq2seq"
"eske/seq2seq" -> "NickShahML/tensorflow_with_latest_papers" ["e"=1]
"eske/seq2seq" -> "ematvey/tensorflow-seq2seq-tutorials"
"eske/seq2seq" -> "jacoxu/encoder_decoder" ["e"=1]
"eske/seq2seq" -> "jonsafari/nmt-list"
"eske/seq2seq" -> "pemywei/attention-nmt"
"eske/seq2seq" -> "Marsan-Ma/tf_chatbot_seq2seq_antilm" ["e"=1]
"Helsinki-NLP/Tatoeba-Challenge" -> "Helsinki-NLP/Opus-MT"
"Helsinki-NLP/Tatoeba-Challenge" -> "Helsinki-NLP/OpusFilter"
"Helsinki-NLP/Tatoeba-Challenge" -> "facebookresearch/flores"
"Helsinki-NLP/Tatoeba-Challenge" -> "thammegowda/mtdata"
"Helsinki-NLP/Tatoeba-Challenge" -> "Unbabel/COMET"
"Helsinki-NLP/Tatoeba-Challenge" -> "neulab/awesome-align"
"Helsinki-NLP/Tatoeba-Challenge" -> "Helsinki-NLP/OPUS-MT-train"
"Helsinki-NLP/Tatoeba-Challenge" -> "mjpost/sacrebleu"
"Helsinki-NLP/Tatoeba-Challenge" -> "neulab/compare-mt"
"Helsinki-NLP/Tatoeba-Challenge" -> "clab/fast_align"
"Helsinki-NLP/Tatoeba-Challenge" -> "cisnlp/simalign"
"Helsinki-NLP/Tatoeba-Challenge" -> "glample/fastBPE"
"Helsinki-NLP/Tatoeba-Challenge" -> "google-research/bleurt"
"Helsinki-NLP/Tatoeba-Challenge" -> "marian-nmt/marian"
"Helsinki-NLP/Tatoeba-Challenge" -> "facebookresearch/cc_net"
"beckdaniel/acl2018_graph2seq" -> "freesunshine0316/neural-graph-to-seq-mp"
"x-hacker/CNN_ChineseTextBinaryClassify" -> "Edward1Chou/Textclassification"
"neulab/nn4nlp-concepts" -> "neubig/nn4nlp-code"
"neulab/nn4nlp-concepts" -> "neulab/Text-Summarization-Papers" ["e"=1]
"neulab/nn4nlp-concepts" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["e"=1]
"neulab/nn4nlp-concepts" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"neulab/nn4nlp-concepts" -> "roomylee/EMNLP-2019-Papers"
"neulab/nn4nlp-concepts" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"clab/dynet_tutorial_examples" -> "clab/cnn"
"clab/dynet_tutorial_examples" -> "clab/lstm-parser" ["e"=1]
"clab/dynet_tutorial_examples" -> "clab/dynet"
"clab/dynet_tutorial_examples" -> "kyunghyuncho/dl4mt-material"
"clab/dynet_tutorial_examples" -> "neubig/nn4nlp2017-code"
"clab/dynet_tutorial_examples" -> "facebook/NAMAS" ["e"=1]
"clab/dynet_tutorial_examples" -> "rguthrie3/DeepLearningForNLPInPytorch"
"clab/dynet_tutorial_examples" -> "taolei87/rcnn" ["e"=1]
"clab/dynet_tutorial_examples" -> "nyu-dl/dl4mt-multi"
"clab/dynet_tutorial_examples" -> "elikip/bist-parser" ["e"=1]
"codekansas/seqgan-text-tensorflow" -> "carrotflakes/seqgan-text-tensorflow"
"lium-lst/nmtpy" -> "nyu-dl/dl4mt-multi"
"lium-lst/nmtpy" -> "lium-lst/wmt17-mmt"
"neubig/nmt-tips" -> "neubig/lamtram"
"neubig/nmt-tips" -> "rsennrich/nematus"
"neubig/nmt-tips" -> "jonsafari/nmt-list"
"neubig/nmt-tips" -> "mjpost/sacreBLEU"
"neubig/nmt-tips" -> "nyu-dl/dl4mt-tutorial"
"neubig/nmt-tips" -> "nyu-dl/dl4mt-c2c"
"neubig/nmt-tips" -> "isi-nlp/Zoph_RNN"
"neubig/nmt-tips" -> "rsennrich/wmt16-scripts"
"neubig/nmt-tips" -> "ufal/neuralmonkey"
"neubig/nmt-tips" -> "nyu-dl/dl4mt-multi"
"neubig/nmt-tips" -> "harvardnlp/seq2seq-attn" ["e"=1]
"neubig/nmt-tips" -> "tokestermw/tensorflow-shakespeare"
"neubig/nmt-tips" -> "awslabs/sockeye"
"neubig/nmt-tips" -> "lium-lst/nmtpy"
"neubig/nmt-tips" -> "tuzhaopeng/NMT-Coverage"
"nyu-dl/dl4mt-multi" -> "lium-lst/nmtpy"
"nyu-dl/dl4mt-multi" -> "nyu-dl/dl4mt-cdec"
"nyu-dl/dl4mt-multi" -> "chrishokamp/dl4mt_exercises"
"nyu-dl/dl4mt-multi" -> "rsennrich/wmt16-scripts"
"nyu-dl/dl4mt-multi" -> "rsennrich/nematus"
"nyu-dl/dl4mt-multi" -> "kyunghyuncho/dl4mt-material"
"deep-spin/entmax" -> "KrisKorrel/sparsemax-pytorch"
"deep-spin/entmax" -> "harvardnlp/pytorch-struct"
"deep-spin/entmax" -> "vene/sparsemap"
"deep-spin/entmax" -> "vene/sparse-structured-attention"
"jhclark/multeval" -> "rsennrich/wmt16-scripts"
"jhclark/multeval" -> "rsennrich/nematus"
"jhclark/multeval" -> "jonsafari/nmt-list"
"jhclark/multeval" -> "cmu-mtlab/meteor"
"jhclark/multeval" -> "mjpost/sacreBLEU"
"jhclark/multeval" -> "redpony/cdec" ["e"=1]
"hans/glove.py" -> "GradySimon/tensorflow-glove"
"hans/glove.py" -> "maciejkula/glove-python"
"hans/glove.py" -> "JonathanRaiman/glove"
"ale3otik/paraphrases-generator" -> "arvind385801/paraphraseGen"
"leechihahchiu/DRLParaphrase" -> "ale3otik/paraphrases-generator"
"mingdachen/syntactic-template-generation" -> "ale3otik/paraphrases-generator"
"tagoyal/sow-reap-paraphrasing" -> "malllabiisc/SGCP"
"wyu-du/Reinforce-Paraphrase-Generation" -> "dev-chauhan/PQG-pytorch"
"Babylonpartners/fastText_multilingual" -> "facebookresearch/MUSE"
"Babylonpartners/fastText_multilingual" -> "artetxem/vecmap"
"Babylonpartners/fastText_multilingual" -> "salestock/fastText.py"
"Babylonpartners/fastText_multilingual" -> "facebookresearch/XLM"
"Babylonpartners/fastText_multilingual" -> "bheinzerling/bpemb"
"Babylonpartners/fastText_multilingual" -> "facebookresearch/LASER"
"Babylonpartners/fastText_multilingual" -> "Kyubyong/wordvectors"
"Babylonpartners/fastText_multilingual" -> "mfaruqui/crosslingual-cca"
"Babylonpartners/fastText_multilingual" -> "facebookresearch/StarSpace"
"Babylonpartners/fastText_multilingual" -> "facebookresearch/SentEval"
"Babylonpartners/fastText_multilingual" -> "aboSamoor/polyglot"
"Babylonpartners/fastText_multilingual" -> "karthikncode/nlp-datasets" ["e"=1]
"Babylonpartners/fastText_multilingual" -> "facebookresearch/InferSent"
"Babylonpartners/fastText_multilingual" -> "OpenNMT/OpenNMT"
"Babylonpartners/fastText_multilingual" -> "mkusner/wmd"
"kefirski/pytorch_RVAE" -> "timbmg/Sentence-VAE"
"kefirski/pytorch_RVAE" -> "kefirski/contiguous-succotash" ["e"=1]
"kefirski/pytorch_RVAE" -> "Chung-I/Variational-Recurrent-Autoencoder-Tensorflow"
"kefirski/pytorch_RVAE" -> "paulx3/keras_generative_pg"
"kefirski/pytorch_RVAE" -> "wiseodd/controlled-text-generation"
"kefirski/pytorch_RVAE" -> "jhclark/multeval"
"kefirski/pytorch_RVAE" -> "ale3otik/paraphrases-generator"
"kefirski/pytorch_RVAE" -> "jakezhaojb/ARAE"
"kefirski/pytorch_RVAE" -> "miyyer/scpn"
"kefirski/pytorch_RVAE" -> "google/vae-seq" ["e"=1]
"kefirski/pytorch_RVAE" -> "snakeztc/NeuralDialog-LAED" ["e"=1]
"kefirski/pytorch_RVAE" -> "cheng6076/Variational-LSTM-Autoencoder"
"kefirski/pytorch_RVAE" -> "jiacheng-xu/vmf_vae_nlp" ["e"=1]
"kefirski/pytorch_RVAE" -> "GBLin5566/toward-controlled-generation-of-text-pytorch"
"kefirski/pytorch_RVAE" -> "kefirski/hybrid_rvae"
"artpar/languagecrunch" -> "DeNeutoy/spacy-vis" ["e"=1]
"artpar/languagecrunch" -> "ines/spacy-graphql"
"artpar/languagecrunch" -> "ines/spacymoji"
"lium-lst/nmtpytorch" -> "salesforce/nonauto-nmt" ["e"=1]
"lium-lst/nmtpytorch" -> "lium-lst/nmtpy"
"lium-lst/nmtpytorch" -> "eladhoffer/seq2seq.pytorch"
"lium-lst/nmtpytorch" -> "srvk/how2-dataset"
"lium-lst/nmtpytorch" -> "jonsafari/nmt-list"
"lium-lst/nmtpytorch" -> "salesforce/cove" ["e"=1]
"lium-lst/nmtpytorch" -> "artetxem/undreamt"
"lium-lst/nmtpytorch" -> "MultiPath/NA-NMT" ["e"=1]
"lium-lst/nmtpytorch" -> "lium-lst/wmt17-mmt"
"explosion/spacy-stanza" -> "jenojp/negspacy" ["e"=1]
"explosion/spacy-stanza" -> "explosion/jupyterlab-prodigy"
"explosion/spacy-stanza" -> "explosion/coreferee"
"explosion/spacy-stanza" -> "TakeLab/spacy-udpipe" ["e"=1]
"explosion/spacy-stanza" -> "explosion/spacy-transformers"
"facebookresearch/Starspace" -> "facebookresearch/fairseq-py"
"facebookresearch/Starspace" -> "salesforce/matchbox"
"facebookresearch/Starspace" -> "taolei87/sru"
"facebookresearch/Starspace" -> "facebookresearch/InferSent"
"facebookresearch/Starspace" -> "facebookresearch/poincare-embeddings" ["e"=1]
"facebookresearch/Starspace" -> "salesforce/pytorch-qrnn"
"facebookresearch/Starspace" -> "ryankiros/skip-thoughts"
"facebookresearch/Starspace" -> "harvardnlp/seq2seq-attn" ["e"=1]
"facebookresearch/Starspace" -> "facebookresearch/SentEval"
"facebookresearch/Starspace" -> "salestock/fastText.py"
"facebookresearch/Starspace" -> "zihangdai/mos"
"facebookresearch/Starspace" -> "searchivarius/nmslib" ["e"=1]
"facebookresearch/Starspace" -> "szagoruyko/diracnets" ["e"=1]
"facebookresearch/Starspace" -> "mila-udem/welcome_tutorials"
"facebookresearch/Starspace" -> "twitter/torch-autograd" ["e"=1]
"jinfagang/yolov3_tf2" -> "tangxingwang/yousan.ai"
"joewandy/hlda" -> "KenHBS/LDA_thesis"
"joewandy/hlda" -> "blei-lab/hlda" ["e"=1]
"GradySimon/tensorflow-glove" -> "hans/glove.py"
"GradySimon/tensorflow-glove" -> "guillaume-chevalier/GloVe-as-a-TensorFlow-Embedding-Layer"
"GradySimon/tensorflow-glove" -> "maciejkula/glove-python"
"GradySimon/tensorflow-glove" -> "carpedm20/neural-summary-tensorflow" ["e"=1]
"shuyo/language-detection" -> "optimaize/language-detector"
"shuyo/language-detection" -> "Mimino666/langdetect"
"shuyo/language-detection" -> "CLD2Owners/cld2"
"shuyo/language-detection" -> "saffsd/langid.py"
"shuyo/language-detection" -> "mikemccand/chromium-compact-language-detector"
"shuyo/language-detection" -> "shuyo/ldig"
"shuyo/language-detection" -> "google/cld3"
"shuyo/language-detection" -> "pemistahl/lingua"
"HLasse/TextDescriptives" -> "KennethEnevoldsen/augmenty"
"HLasse/TextDescriptives" -> "sayef/fsner"
"HLasse/TextDescriptives" -> "Pandora-Intelligence/crosslingual-coreference"
"pbloem/former" -> "harvardnlp/annotated-transformer"
"pbloem/former" -> "dair-ai/nlp_newsletter"
"pbloem/former" -> "SamLynnEvans/Transformer"
"pbloem/former" -> "kheyer/Genomic-ULMFiT" ["e"=1]
"pbloem/former" -> "asyml/texar-pytorch"
"pbloem/former" -> "lucidrains/linear-attention-transformer" ["e"=1]
"pbloem/former" -> "dpressel/dliss-tutorial" ["e"=1]
"pbloem/former" -> "openai/sparse_attention"
"pbloem/former" -> "facebookresearch/adaptive-span"
"pbloem/former" -> "tomohideshibata/BERT-related-papers"
"pbloem/former" -> "gordicaleksa/pytorch-original-transformer" ["e"=1]
"pbloem/former" -> "facebookresearch/XLM"
"Pandora-Intelligence/crosslingual-coreference" -> "Pandora-Intelligence/fast-sentence-transformers"
"Pandora-Intelligence/crosslingual-coreference" -> "SapienzaNLP/extend" ["e"=1]
"Pandora-Intelligence/crosslingual-coreference" -> "KennethEnevoldsen/augmenty"
"wiseodd/controlled-text-generation" -> "GBLin5566/toward-controlled-generation-of-text-pytorch"
"wiseodd/controlled-text-generation" -> "timbmg/Sentence-VAE"
"wiseodd/controlled-text-generation" -> "lijuncen/Sentiment-and-Style-Transfer"
"wiseodd/controlled-text-generation" -> "ChenChengKuan/awesome-text-generation"
"wiseodd/controlled-text-generation" -> "shentianxiao/language-style-transfer"
"wiseodd/controlled-text-generation" -> "kefirski/pytorch_RVAE"
"wiseodd/controlled-text-generation" -> "snakeztc/NeuralDialog-LAED" ["e"=1]
"wiseodd/controlled-text-generation" -> "jakezhaojb/ARAE"
"wiseodd/controlled-text-generation" -> "jxhe/vae-lagging-encoder" ["e"=1]
"wiseodd/controlled-text-generation" -> "hit-computer/MTA-LSTM"
"wiseodd/controlled-text-generation" -> "ZiJianZhao/SeqGAN-PyTorch"
"wiseodd/controlled-text-generation" -> "fuzhenxin/Personal-Emotional-Stylized-Dialog" ["e"=1]
"IBM/zshot" -> "IBM/hspo-ontology"
"IBM/zshot" -> "Pandora-Intelligence/concise-concepts"
"cindyxinyiwang/deep-latent-sequence-model" -> "XiaoyuanYi/StyIns"
"cindyxinyiwang/deep-latent-sequence-model" -> "martiansideofthemoon/style-transfer-paraphrase"
"Unbabel/OpenKiwi" -> "TharinduDR/TransQuest"
"Unbabel/OpenKiwi" -> "lovecambi/qebrain"
"Unbabel/OpenKiwi" -> "sheffieldnlp/deepQuest"
"Unbabel/OpenKiwi" -> "facebookresearch/mlqe"
"Unbabel/OpenKiwi" -> "Unbabel/COMET"
"Unbabel/OpenKiwi" -> "clab/fast_align"
"Unbabel/OpenKiwi" -> "ghpaetzold/questplusplus"
"Unbabel/OpenKiwi" -> "alvations/sacremoses"
"Unbabel/OpenKiwi" -> "xlniu/Quality-Estimation1"
"Unbabel/OpenKiwi" -> "neulab/awesome-align"
"Unbabel/OpenKiwi" -> "Helsinki-NLP/OpusFilter"
"Unbabel/OpenKiwi" -> "Unbabel/KiwiCutter"
"Unbabel/OpenKiwi" -> "bitextor/bicleaner"
"Unbabel/OpenKiwi" -> "cisnlp/simalign"
"Unbabel/OpenKiwi" -> "robertostling/eflomal"
"lovecambi/qebrain" -> "xlniu/Quality-Estimation1"
"lovecambi/qebrain" -> "xlniu/Quality-Estimation2"
"lovecambi/qebrain" -> "sheffieldnlp/deepQuest"
"VITA-Group/BERT-Tickets" -> "llyx97/TAMT"
"goru001/inltk" -> "anoopkunchukuttan/indic_nlp_library"
"goru001/inltk" -> "AI4Bharat/indicnlp_catalog"
"goru001/inltk" -> "AI4Bharat/indic-bert"
"goru001/inltk" -> "indicnlpweb/indicnlp_catalog"
"goru001/inltk" -> "libindic/indic-trans"
"goru001/inltk" -> "goru001/nlp-for-hindi"
"goru001/inltk" -> "renatoviolin/next_word_prediction"
"goru001/inltk" -> "theainerd/MLInterview" ["e"=1]
"goru001/inltk" -> "dair-ai/nlp_paper_summaries"
"goru001/inltk" -> "AI4Bharat/indicnlp_corpus"
"goru001/inltk" -> "neubig/lowresource-nlp-bootcamp-2020"
"goru001/inltk" -> "google-research-datasets/dakshina"
"goru001/inltk" -> "huggingface/knockknock"
"goru001/inltk" -> "goru001/nlp-for-sanskrit"
"goru001/inltk" -> "hellohaptik/chatbot_ner"
"wanghaisheng/resume-parse-evaluation" -> "ccccsy99/resume-parse-python"
"wanghaisheng/resume-parse-evaluation" -> "orgatAI/resume-parse-python"
"wanghaisheng/resume-parse-evaluation" -> "xsocket/job"
"wanghaisheng/resume-parse-evaluation" -> "lietou1986/xparser"
"wanghaisheng/resume-parse-evaluation" -> "altraman00/hrweb"
"wanghaisheng/resume-parse-evaluation" -> "Agwave/PDF-Resume-Information-Extraction"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_fundamentals"
"dair-ai/d2l-study-group" -> "dair-ai/keep-learning-ml"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_paper_summaries"
"dair-ai/d2l-study-group" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/d2l-study-group" -> "dair-ai/pytorch_notebooks"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_newsletter"
"dair-ai/d2l-study-group" -> "practical-nlp/practical-nlp"
"dair-ai/d2l-study-group" -> "dair-ai/notebooks"
"dair-ai/d2l-study-group" -> "dair-ai/dair-ai.github.io"
"dair-ai/d2l-study-group" -> "omarsar/nlp_overview"
"dair-ai/d2l-study-group" -> "dair-ai/awesome-ML-projects-guide"
"machinalis/yalign" -> "FrancisGregoire/parSentExtract"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/data_science_for_all"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/nlp_essentials"
"dipanjanS/nlp_essentials" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/nlp_essentials" -> "dipanjanS/data_science_for_all"
"dipanjanS/nlp_essentials" -> "dipanjanS/transformers_nlp_essentials"
"dipanjanS/nlp_essentials" -> "dipanjanS/nlp_crash_course_plugin20"
"dipanjanS/nlp_essentials" -> "dphi-official/nlp_essentials"
"djstrouse/information-bottleneck" -> "artemyk/nonlinearIB"
"clab/cnn" -> "clab/lstm-parser" ["e"=1]
"clab/cnn" -> "neubig/lamtram"
"clab/cnn" -> "kyunghyuncho/dl4mt-material"
"clab/cnn" -> "clab/dynet_tutorial_examples"
"clab/cnn" -> "rsennrich/nematus"
"clab/cnn" -> "ofirnachum/tree_rnn" ["e"=1]
"clab/cnn" -> "lisa-groundhog/GroundHog" ["e"=1]
"clab/cnn" -> "wlin12/wang2vec" ["e"=1]
"clab/cnn" -> "turian/neural-language-model" ["e"=1]
"clab/cnn" -> "clab/rnng" ["e"=1]
"clab/cnn" -> "facebook/NAMAS" ["e"=1]
"clab/cnn" -> "mesnilgr/iclr15" ["e"=1]
"clab/cnn" -> "facebook/SCRNNs" ["e"=1]
"clab/cnn" -> "joshua-decoder/joshua" ["e"=1]
"amansrivastava17/embedding-as-service" -> "hellohaptik/spello"
"salesforce/matchbox" -> "nearai/pytorch-tools"
"salesforce/matchbox" -> "artetxem/undreamt"
"salesforce/matchbox" -> "facebookresearch/fairseq-py"
"salesforce/matchbox" -> "mila-udem/welcome_tutorials"
"salesforce/matchbox" -> "vene/sparsemap"
"salesforce/matchbox" -> "harvardnlp/sa-vae" ["e"=1]
"salesforce/matchbox" -> "salesforce/pytorch-qrnn"
"salesforce/matchbox" -> "jihunchoi/unsupervised-treelstm" ["e"=1]
"salesforce/matchbox" -> "neulab/compare-mt"
"jsalt18-sentence-repl/jiant" -> "kevinduh/san_mrc" ["e"=1]
"jsalt18-sentence-repl/jiant" -> "nelson-liu/contextual-repr-analysis"
"jsalt18-sentence-repl/jiant" -> "nyu-mll/GLUE-baselines"
"jsalt18-sentence-repl/jiant" -> "jihunchoi/unsupervised-treelstm" ["e"=1]
"jsalt18-sentence-repl/jiant" -> "yoavg/bert-syntax"
"jsalt18-sentence-repl/jiant" -> "yikangshen/PRPN" ["e"=1]
"jsalt18-sentence-repl/jiant" -> "allenai/vampire"
"fanglanting/skip-gram-pytorch" -> "theeluwin/pytorch-sgns"
"fanglanting/skip-gram-pytorch" -> "ray1007/pytorch-word2vec"
"fanglanting/skip-gram-pytorch" -> "blackredscarf/pytorch-SkipGram"
"NirantK/nlp-python-deep-learning" -> "hb20007/hands-on-nltk-tutorial"
"NirantK/nlp-python-deep-learning" -> "astorfi/Deep-Learning-NLP"
"NirantK/nlp-python-deep-learning" -> "costezki/awesome-nlprojects"
"NirantK/nlp-python-deep-learning" -> "kavgan/nlp-in-practice"
"NirantK/nlp-python-deep-learning" -> "PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0"
"NirantK/nlp-python-deep-learning" -> "cedrickchee/awesome-bert-nlp"
"NirantK/nlp-python-deep-learning" -> "sannykim/transformers"
"NirantK/nlp-python-deep-learning" -> "nlptown/nlp-notebooks"
"yassouali/deeplearning.ai_notes" -> "yassouali/fast.ai_notes"
"libindic/indic-trans" -> "libindic/Transliteration"
"libindic/indic-trans" -> "anoopkunchukuttan/indic_nlp_library"
"libindic/indic-trans" -> "AI4Bharat/indicTrans"
"libindic/indic-trans" -> "indic-transliteration/indic_transliteration_py"
"libindic/indic-trans" -> "sanskrit-coders/indic_transliteration"
"libindic/indic-trans" -> "google-research-datasets/dakshina"
"libindic/indic-trans" -> "anoopkunchukuttan/crowd-indic-transliteration-data"
"libindic/indic-trans" -> "anoopkunchukuttan/indic_nlp_resources"
"libindic/indic-trans" -> "AI4Bharat/indicnlp_catalog"
"libindic/indic-trans" -> "AI4Bharat/IndianNLP-Transliteration"
"libindic/indic-trans" -> "AI4Bharat/indic-bert"
"libindic/indic-trans" -> "sanskrit/sanskrit"
"tscheepers/word2vec" -> "deborausujono/word2vecpy"
"sfzhou5678/TextualAdversarialAttack-Tianchi" -> "linzhk/Tianchi-Text-Classification-Counter-Attack-Project"
"google-research-datasets/tydiqa" -> "facebookresearch/MLQA"
"google-research-datasets/tydiqa" -> "AkariAsai/XORQA"
"google-research-datasets/tydiqa" -> "deepmind/xquad"
"google-research-datasets/tydiqa" -> "thunlp/XQA"
"google-research-datasets/tydiqa" -> "cisnlp/simalign"
"google-research-datasets/tydiqa" -> "facebookresearch/MLDoc"
"google-research-datasets/tydiqa" -> "facebookresearch/reconsider" ["e"=1]
"ddelange/pipgrip" -> "sdispater/mixology"
"Pandora-Intelligence/classy-classification" -> "Pandora-Intelligence/crosslingual-coreference"
"Pandora-Intelligence/classy-classification" -> "KennethEnevoldsen/augmenty"
"FranxYao/dgm_latent_bow" -> "wyu-du/Reinforce-Paraphrase-Generation"
"FranxYao/dgm_latent_bow" -> "FranxYao/Deep-Generative-Models-for-Natural-Language-Processing"
"FranxYao/dgm_latent_bow" -> "dev-chauhan/PQG-pytorch"
"FranxYao/dgm_latent_bow" -> "arvind385801/paraphraseGen"
"FranxYao/dgm_latent_bow" -> "malllabiisc/SGCP"
"FranxYao/dgm_latent_bow" -> "malllabiisc/DiPS"
"nelson-liu/contextual-repr-analysis" -> "swabhs/scaffolding"
"nelson-liu/contextual-repr-analysis" -> "john-hewitt/structural-probes"
"nelson-liu/contextual-repr-analysis" -> "vered1986/lexcomp"
"nelson-liu/contextual-repr-analysis" -> "yoavg/bert-syntax"
"nelson-liu/contextual-repr-analysis" -> "harvardnlp/urnng" ["e"=1]
"akanimax/Variational_Discriminator_Bottleneck" -> "akanazawa/vgan"
"Linear95/CLUB" -> "sungyubkim/MINE-Mutual-Information-Neural-Estimation-"
"Linear95/CLUB" -> "Wendison/VQMIVC" ["e"=1]
"Linear95/CLUB" -> "alexalemi/vib_demo"
"Linear95/CLUB" -> "mfederici/Multi-View-Information-Bottleneck"
"Linear95/CLUB" -> "1Konny/VIB-pytorch"
"Linear95/CLUB" -> "ermongroup/smile-mi-estimator"
"Linear95/CLUB" -> "gtegner/mine-pytorch"
"Linear95/CLUB" -> "MehdiZouitine/Learning-Disentangled-Representations-via-Mutual-Information-Estimation"
"Linear95/CLUB" -> "rdevon/DIM" ["e"=1]
"bitextor/bitextor" -> "bitextor/bicleaner"
"bitextor/bitextor" -> "thompsonb/vecalign"
"bitextor/bitextor" -> "modernmt/modernmt" ["e"=1]
"bitextor/bitextor" -> "mjpost/sacreBLEU"
"bitextor/bitextor" -> "robertostling/eflomal"
"bitextor/bitextor" -> "thammegowda/mtdata"
"bitextor/bitextor" -> "alvations/sacremoses"
"bitextor/bitextor" -> "clab/fast_align"
"bitextor/bitextor" -> "danielvarga/hunalign"
"bitextor/bitextor" -> "marian-nmt/marian"
"bitextor/bitextor" -> "hainan-xv/zipporah"
"bitextor/bitextor" -> "M4t1ss/parallel-corpora-tools"
"maraoz/gpt-scrolls" -> "semiosis/prompts"
"maraoz/gpt-scrolls" -> "DNE-Digital/dolores"
"maraoz/gpt-scrolls" -> "minimaxir/gpt-3-experiments"
"kavgan/nlp-in-practice" -> "susanli2016/NLP-with-Python"
"kavgan/nlp-in-practice" -> "makcedward/nlp"
"kavgan/nlp-in-practice" -> "msgi/nlp-journey" ["e"=1]
"kavgan/nlp-in-practice" -> "NirantK/nlp-python-deep-learning"
"kavgan/nlp-in-practice" -> "nlptown/nlp-notebooks"
"kavgan/nlp-in-practice" -> "gaoisbest/NLP-Projects"
"kavgan/nlp-in-practice" -> "cedrickchee/awesome-bert-nlp"
"kavgan/nlp-in-practice" -> "kk7nc/Text_Classification" ["e"=1]
"kavgan/nlp-in-practice" -> "explosion/projects"
"kavgan/nlp-in-practice" -> "mihail911/nlp-library"
"kavgan/nlp-in-practice" -> "fastai/course-nlp"
"kavgan/nlp-in-practice" -> "boudinfl/pke" ["e"=1]
"kavgan/nlp-in-practice" -> "practical-nlp/practical-nlp"
"kavgan/nlp-in-practice" -> "adsieg/text_similarity"
"kavgan/nlp-in-practice" -> "dipanjanS/text-analytics-with-python"
"MaartenGr/PolyFuzz" -> "recognai/rubrix"
"MaartenGr/PolyFuzz" -> "maxbachmann/RapidFuzz"
"MaartenGr/PolyFuzz" -> "MaartenGr/KeyBERT"
"MaartenGr/PolyFuzz" -> "erre-quadro/spikex"
"MaartenGr/PolyFuzz" -> "kevinlu1248/pyate" ["e"=1]
"MaartenGr/PolyFuzz" -> "ddangelov/Top2Vec"
"MaartenGr/PolyFuzz" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/PolyFuzz" -> "Bergvca/string_grouper"
"MaartenGr/PolyFuzz" -> "koaning/bulk" ["e"=1]
"MaartenGr/PolyFuzz" -> "neomatrix369/nlp_profiler" ["e"=1]
"MaartenGr/PolyFuzz" -> "NorskRegnesentral/skweak"
"MaartenGr/PolyFuzz" -> "tecoholic/ner-annotator"
"MaartenGr/PolyFuzz" -> "webis-de/small-text"
"MaartenGr/PolyFuzz" -> "DerwenAI/kglab" ["e"=1]
"MaartenGr/PolyFuzz" -> "nipunsadvilkar/pySBD" ["e"=1]
"AI4Bharat/indic-bert" -> "AI4Bharat/indicnlp_catalog"
"AI4Bharat/indic-bert" -> "anoopkunchukuttan/indic_nlp_library"
"AI4Bharat/indic-bert" -> "libindic/indic-trans"
"AI4Bharat/indic-bert" -> "AI4Bharat/indicnlp_corpus"
"AI4Bharat/indic-bert" -> "goru001/inltk"
"AI4Bharat/indic-bert" -> "prajdabre/yanmtt"
"AI4Bharat/indic-bert" -> "google-research-datasets/dakshina"
"AI4Bharat/indic-bert" -> "AI4Bharat/indic-bart"
"AI4Bharat/indic-bert" -> "Open-Speech-EkStep/vakyansh-models"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/vakyansh-wav2vec2-experimentation"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/audio-to-speech-pipeline"
"Open-Speech-EkStep/vakyansh-models" -> "google/language-resources" ["e"=1]
"bab2min/tomotopy" -> "MilaNLProc/contextualized-topic-models"
"bab2min/tomotopy" -> "MIND-Lab/OCTIS"
"bab2min/tomotopy" -> "adjidieng/ETM" ["e"=1]
"bab2min/tomotopy" -> "vi3k6i5/GuidedLDA"
"bab2min/tomotopy" -> "joewandy/hlda"
"bab2min/tomotopy" -> "gregversteeg/corex_topic"
"bab2min/tomotopy" -> "ddangelov/Top2Vec"
"bab2min/tomotopy" -> "recognai/rubrix"
"bab2min/tomotopy" -> "MaartenGr/BERTopic"
"bab2min/tomotopy" -> "Savvysherpa/slda"
"bab2min/tomotopy" -> "WZBSocialScienceCenter/tmtoolkit"
"bab2min/tomotopy" -> "dongwookim-ml/python-topic-model" ["e"=1]
"bab2min/tomotopy" -> "zll17/Neural_Topic_Models" ["e"=1]
"bab2min/tomotopy" -> "NorskRegnesentral/skweak"
"bab2min/tomotopy" -> "williamleif/histwords" ["e"=1]
"mhagiwara/realworldnlp" -> "keitakurita/Practical_NLP_in_PyTorch"
"mhagiwara/realworldnlp" -> "allenai/allennlp-as-a-library-example" ["e"=1]
"mhagiwara/realworldnlp" -> "epwalsh/nlp-models"
"tuzhaopeng/NMT" -> "tuzhaopeng/NMT-Coverage"
"cdpierse/transformers-interpret" -> "jalammar/ecco"
"cdpierse/transformers-interpret" -> "recognai/rubrix"
"cdpierse/transformers-interpret" -> "huggingface/setfit"
"cdpierse/transformers-interpret" -> "NorskRegnesentral/skweak"
"cdpierse/transformers-interpret" -> "g8a9/ferret"
"cdpierse/transformers-interpret" -> "huggingface/optimum" ["e"=1]
"cdpierse/transformers-interpret" -> "MilaNLProc/contextualized-topic-models"
"cdpierse/transformers-interpret" -> "GEM-benchmark/NL-Augmenter"
"cdpierse/transformers-interpret" -> "webis-de/small-text"
"cdpierse/transformers-interpret" -> "pytorch/captum" ["e"=1]
"cdpierse/transformers-interpret" -> "PyTorchLightning/lightning-transformers" ["e"=1]
"cdpierse/transformers-interpret" -> "hila-chefer/Transformer-Explainability" ["e"=1]
"cdpierse/transformers-interpret" -> "CalculatedContent/WeightWatcher"
"cdpierse/transformers-interpret" -> "MaartenGr/BERTopic"
"cdpierse/transformers-interpret" -> "makcedward/nlpaug"
"vlgiitr/DL_Topics" -> "vlgiitr/papers_we_read"
"vlgiitr/DL_Topics" -> "vlgiitr/GenZoo"
"vlgiitr/DL_Topics" -> "yassouali/ML_paper_notes"
"vlgiitr/DL_Topics" -> "ChanBong/s4-jax"
"vlgiitr/DL_Topics" -> "dsgiitr/reading-group"
"mikemccand/chromium-compact-language-detector" -> "CLD2Owners/cld2"
"OmkarPathak/ResumeParser" -> "OmkarPathak/pyresparser"
"OmkarPathak/ResumeParser" -> "DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy"
"OmkarPathak/ResumeParser" -> "chen0040/keras-english-resume-parser-and-analyzer"
"OmkarPathak/ResumeParser" -> "bjherger/ResumeParser"
"OmkarPathak/ResumeParser" -> "perminder-klair/resume-parser"
"OmkarPathak/ResumeParser" -> "divapriya/Language_Processing"
"OmkarPathak/ResumeParser" -> "Satrat/Resume-Parser"
"OmkarPathak/ResumeParser" -> "JAIJANYANI/Automated-Resume-Screening-System"
"dsgiitr/adversarial_lab" -> "dsgiitr/reading-group"
"ak9250/gpt-2-colab" -> "nshepperd/gpt-2"
"ak9250/gpt-2-colab" -> "lopuhin/transformer-lm"
"ak9250/gpt-2-colab" -> "minimaxir/gpt-2-cloud-run"
"ak9250/gpt-2-colab" -> "ilopezfr/gpt-2"
"lopuhin/transformer-lm" -> "ak9250/gpt-2-colab"
"EdinburghNLP/opus-100-corpus" -> "bzhangGo/zero"
"aws-samples/aws-machine-learning-university-dte" -> "aws-samples/aws-machine-learning-university-accelerated-tab"
"aws-samples/aws-machine-learning-university-dte" -> "aws-samples/aws-machine-learning-university-accelerated-cv"
"Huffon/sentence-similarity" -> "TharinduDR/Simple-Sentence-Similarity"
"deepmind/xquad" -> "facebookresearch/MLQA"
"deepmind/xquad" -> "thunlp/XQA"
"AI4Bharat/indicnlp_catalog" -> "anoopkunchukuttan/indic_nlp_library"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/indic-bert"
"AI4Bharat/indicnlp_catalog" -> "libindic/indic-trans"
"AI4Bharat/indicnlp_catalog" -> "goru001/inltk"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/indicnlp_corpus"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/IndianNLP-Transliteration"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/indicTrans"
"AI4Bharat/indicnlp_catalog" -> "google-research-datasets/dakshina"
"AI4Bharat/indicnlp_catalog" -> "prajdabre/yanmtt"
"AI4Bharat/indicnlp_catalog" -> "ArushiSinghal/Neural-Machine-Translation-English-Hindi-for-domain-data"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_newsletter"
"dair-ai/nlp_fundamentals" -> "dair-ai/pytorch_notebooks"
"dair-ai/nlp_fundamentals" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_overview"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_paper_summaries"
"dair-ai/nlp_fundamentals" -> "dair-ai/d2l-study-group"
"dair-ai/nlp_fundamentals" -> "dair-ai/keep-learning-ml"
"dair-ai/nlp_fundamentals" -> "dair-ai/notebooks"
"dair-ai/nlp_fundamentals" -> "Machine-Learning-Tokyo/Math_resources" ["e"=1]
"dair-ai/nlp_fundamentals" -> "dair-ai/awesome-research-proposals-guide"
"robertostling/eflomal" -> "robertostling/efmaral"
"robertostling/eflomal" -> "cisnlp/simalign"
"robertostling/eflomal" -> "neulab/awesome-align"
"robertostling/eflomal" -> "Helsinki-NLP/OpusFilter"
"robertostling/eflomal" -> "lilt/alignment-scripts"
"robertostling/efmaral" -> "robertostling/eflomal"
"adashofdata/intro-to-text-analytics" -> "adashofdata/muffin-cupcake"
"explosion/srsly" -> "explosion/spacy-pytorch-transformers"
"practical-nlp/practical-nlp" -> "ivan-bilan/The-NLP-Pandect"
"practical-nlp/practical-nlp" -> "dair-ai/nlp_paper_summaries"
"practical-nlp/practical-nlp" -> "dair-ai/d2l-study-group"
"practical-nlp/practical-nlp" -> "abhimishra91/insight" ["e"=1]
"practical-nlp/practical-nlp" -> "PacktPublishing/Transformers-for-Natural-Language-Processing" ["e"=1]
"practical-nlp/practical-nlp" -> "abhishekkrthakur/approaching_almost_nlp" ["e"=1]
"practical-nlp/practical-nlp" -> "NiuTrans/ABigSurvey"
"practical-nlp/practical-nlp" -> "fastai/course-nlp"
"practical-nlp/practical-nlp" -> "graviraja/100-Days-of-NLP" ["e"=1]
"practical-nlp/practical-nlp" -> "dair-ai/keep-learning-ml"
"binoydutt/Resume-Job-Description-Matching" -> "lyoshiwo/resume_job_matching"
"jflanigan/jamr" -> "amrisi/amr-guidelines"
"jflanigan/jamr" -> "c-amr/camr"
"jflanigan/jamr" -> "sheng-z/stog"
"jflanigan/jamr" -> "sinantie/NeuralAmr"
"jflanigan/jamr" -> "freesunshine0316/neural-graph-to-seq-mp"
"jflanigan/jamr" -> "summarization/semantic_summ"
"jflanigan/jamr" -> "goodmami/penman"
"jflanigan/jamr" -> "mdtux89/amr-eager"
"jflanigan/jamr" -> "IBM/transition-amr-parser"
"jflanigan/jamr" -> "Juicechuan/AMRParsing"
"jflanigan/jamr" -> "jcyk/AMR-gs"
"jflanigan/jamr" -> "bjascob/amrlib"
"jflanigan/jamr" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"jflanigan/jamr" -> "snowblink14/smatch"
"jflanigan/jamr" -> "Oneplus/tamr"
"allenai/pawls" -> "webis-de/small-text"
"allenai/pawls" -> "allenai/mmda"
"allenai/pawls" -> "dennlinger/TopicalChange"
"pmichel31415/teapot-nlp" -> "pmichel31415/translate"
"likerRr/code4goal-resume-parser" -> "perminder-klair/resume-parser"
"likerRr/code4goal-resume-parser" -> "antonydeepak/ResumeParser"
"perminder-klair/resume-parser" -> "likerRr/code4goal-resume-parser"
"bzhangGo/zero" -> "EdinburghNLP/opus-100-corpus"
"bzhangGo/zero" -> "thammegowda/mtdata"
"bzhangGo/zero" -> "zhengxxn/adaptive-knn-mt" ["e"=1]
"facebookresearch/stopes" -> "thammegowda/mtdata"
"rsennrich/wmt16-scripts" -> "rsennrich/nematus"
"rsennrich/wmt16-scripts" -> "emjotde/amunmt"
"rsennrich/wmt16-scripts" -> "nyu-dl/dl4mt-multi"
"rsennrich/wmt16-scripts" -> "nyu-dl/dl4mt-tutorial"
"rsennrich/wmt16-scripts" -> "marian-nmt/marian-examples"
"rsennrich/wmt16-scripts" -> "jhclark/multeval"
"kiankd/events" -> "shanybar/event_entity_coref_ecb_plus"
"kiankd/events" -> "prafulla77/ACL-2018-Event-Coreference"
"ontonotes/conll-formatted-ontonotes-5.0" -> "shayneobrien/coreference-resolution"
"ontonotes/conll-formatted-ontonotes-5.0" -> "yuchenlin/OntoNotes-5.0-NER-BIO" ["e"=1]
"ontonotes/conll-formatted-ontonotes-5.0" -> "yhcc/OntoNotes-5.0-NER" ["e"=1]
"ontonotes/conll-formatted-ontonotes-5.0" -> "kentonl/e2e-coref"
"ontonotes/conll-formatted-ontonotes-5.0" -> "propbank/propbank-release"
"ontonotes/conll-formatted-ontonotes-5.0" -> "clarkkev/deep-coref"
"dair-ai/awesome-ML-projects-guide" -> "dair-ai/awesome-research-proposals-guide"
"yassouali/fast.ai_notes" -> "yassouali/deeplearning.ai_notes"
"JHL-HUST/PWWS" -> "nesl/nlp_adversarial_examples"
"1Konny/VIB-pytorch" -> "alexalemi/vib_demo"
"1Konny/VIB-pytorch" -> "SeojinBang/VIBI"
"1Konny/VIB-pytorch" -> "sungyubkim/MINE-Mutual-Information-Neural-Estimation-"
"1Konny/VIB-pytorch" -> "Linear95/CLUB"
"1Konny/VIB-pytorch" -> "mfederici/Multi-View-Information-Bottleneck"
"1Konny/VIB-pytorch" -> "djstrouse/information-bottleneck"
"1Konny/VIB-pytorch" -> "akanimax/Variational_Discriminator_Bottleneck"
"1Konny/VIB-pytorch" -> "zhuchen03/VIBNet"
"1Konny/VIB-pytorch" -> "makezur/VIB_pytorch"
"alexalemi/vib_demo" -> "1Konny/VIB-pytorch"
"alexalemi/vib_demo" -> "zhuchen03/VIBNet"
"yuanqidu/GraphGT" -> "yuanqidu/awesome-graph-generation"
"yuanqidu/GraphGT" -> "rt219/Unpaired-Sketch-to-Photo-Translation"
"yuanqidu/awesome-graph-generation" -> "yuanqidu/GraphGT"
"NirantK/hindi2vec" -> "goru001/nlp-for-hindi"
"NirantK/hindi2vec" -> "anoopkunchukuttan/crowd-indic-transliteration-data"
"theeluwin/pytorch-sgns" -> "fanglanting/skip-gram-pytorch"
"theeluwin/pytorch-sgns" -> "Adoni/word2vec_pytorch"
"theeluwin/pytorch-sgns" -> "kefirski/pytorch_NEG_loss"
"theeluwin/pytorch-sgns" -> "dthiagarajan/word2vec-pytorch"
"theeluwin/pytorch-sgns" -> "Andras7/word2vec-pytorch"
"theeluwin/pytorch-sgns" -> "bamtercelboo/pytorch_word2vec"
"theeluwin/pytorch-sgns" -> "blackredscarf/pytorch-SkipGram"
"theeluwin/pytorch-sgns" -> "ray1007/pytorch-word2vec"
"vladsandulescu/topics" -> "vladsandulescu/phrases"
"cheng6076/Variational-LSTM-Autoencoder" -> "Chung-I/Variational-Recurrent-Autoencoder-Tensorflow"
"neubig/lamtram" -> "neubig/nmt-tips"
"neubig/lamtram" -> "rsennrich/nematus"
"neubig/lamtram" -> "emjotde/amunmt"
"stas-semeniuta/textvae" -> "ryokamoi/hybrid_textvae"
"stas-semeniuta/textvae" -> "robinsloan/sentence-space"
"stas-semeniuta/textvae" -> "Chung-I/Variational-Recurrent-Autoencoder-Tensorflow"
"stas-semeniuta/textvae" -> "harvardnlp/sa-vae" ["e"=1]
"ZhihongShao/Planning-based-Hierarchical-Variational-Model" -> "WHUIR/PPVAE"
"ZhihongShao/Planning-based-Hierarchical-Variational-Model" -> "UKPLab/kg2text"
"adhiraiyan/DeepLearningWithTF2.0" -> "Amin-Tgz/Awesome-TensorFlow-2"
"adhiraiyan/DeepLearningWithTF2.0" -> "Amin-Tgz/awesome-tensorflow-2"
"adhiraiyan/DeepLearningWithTF2.0" -> "mukeshmithrakumar/Book_List" ["e"=1]
"dreasysnail/POINTER" -> "NLPCode/CBART"
"artemyk/ibsgd" -> "ravidziv/IDNNs"
"artemyk/ibsgd" -> "sphinxteam/dnner"
"artemyk/ibsgd" -> "stevenliuyi/information-bottleneck"
"artemyk/ibsgd" -> "adityashrm21/information-theory-deep-learning"
"artemyk/ibsgd" -> "artemyk/nonlinearIB"
"artemyk/ibsgd" -> "djstrouse/information-bottleneck"
"artemyk/ibsgd" -> "artemyk/ibcurve"
"ShannonAI/CorefQA" -> "mandarjoshi90/coref"
"ShannonAI/CorefQA" -> "kentonl/e2e-coref"
"ShannonAI/CorefQA" -> "shayneobrien/coreference-resolution"
"ShannonAI/CorefQA" -> "lxucs/coref-hoi"
"ShannonAI/CorefQA" -> "yuvalkirstain/s2e-coref"
"ShannonAI/CorefQA" -> "thunlp/CorefBERT"
"ShannonAI/CorefQA" -> "kkjawz/coref-ee"
"ShannonAI/CorefQA" -> "conll/reference-coreference-scorers"
"ShannonAI/CorefQA" -> "vdobrovolskii/wl-coref"
"ShannonAI/CorefQA" -> "pitrack/incremental-coref"
"ShannonAI/CorefQA" -> "eladsegal/tag-based-multi-span-extraction" ["e"=1]
"danielhers/tupa" -> "cfmrp/mtool"
"vdobrovolskii/wl-coref" -> "troublemaker-r/Chinese_Coreference_Resolution"
"vdobrovolskii/wl-coref" -> "lxucs/coref-hoi"
"vdobrovolskii/wl-coref" -> "pitrack/incremental-coref"
"dair-ai/ml-nlp-paper-discussions" -> "dair-ai/nlp_newsletter"
"dair-ai/ml-nlp-paper-discussions" -> "dair-ai/nlp_fundamentals"
"Pandora-Intelligence/concise-concepts" -> "Pandora-Intelligence/crosslingual-coreference"
"Pandora-Intelligence/concise-concepts" -> "KennethEnevoldsen/augmenty"
"Pandora-Intelligence/concise-concepts" -> "explosion/holmes-extractor"
"Pandora-Intelligence/concise-concepts" -> "IBM/zshot"
"Pandora-Intelligence/concise-concepts" -> "sayef/fsner"
"Pandora-Intelligence/concise-concepts" -> "kabirkhan/recon"
"Pandora-Intelligence/concise-concepts" -> "explosion/floret"
"Pandora-Intelligence/concise-concepts" -> "Pandora-Intelligence/fast-sentence-transformers"
"Pandora-Intelligence/concise-concepts" -> "Pandora-Intelligence/classy-classification"
"Helsinki-NLP/OPUS-MT-train" -> "Helsinki-NLP/Opus-MT"
"fuzhenxin/textstyletransferdata" -> "fuzhenxin/text_style_transfer"
"Vamsi995/Paraphrase-Generator" -> "vsuthichai/paraphraser"
"Vamsi995/Paraphrase-Generator" -> "ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-"
"Vamsi995/Paraphrase-Generator" -> "websymphony/paraphrasing-tool"
"Vamsi995/Paraphrase-Generator" -> "PrithivirajDamodaran/Parrot_Paraphraser"
"Vamsi995/Paraphrase-Generator" -> "renatoviolin/T5-paraphrase-generation"
"Vamsi995/Paraphrase-Generator" -> "AudayBerro/automatedParaphrase"
"Vamsi995/Paraphrase-Generator" -> "google-research-datasets/paws"
"ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-" -> "Vamsi995/Paraphrase-Generator"
"ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-" -> "renatoviolin/T5-paraphrase-generation"
"pcyin/pytorch_nmt" -> "yistLin/pytorch-dual-learning"
"pcyin/pytorch_nmt" -> "pcyin/pytorch_basic_nmt"
"xlniu/Quality-Estimation1" -> "lovecambi/qebrain"
"xlniu/Quality-Estimation1" -> "xlniu/Quality-Estimation2"
"xlniu/Quality-Estimation2" -> "lovecambi/qebrain"
"xlniu/Quality-Estimation2" -> "xlniu/Quality-Estimation1"
"sayakpaul/Adventures-in-TensorFlow-Lite" -> "sayakpaul/E2E-Object-Detection-in-TFLite"
"nyu-dl/dl4mt-c2c" -> "nyu-dl/dl4mt-cdec"
"nyu-dl/dl4mt-c2c" -> "paarthneekhara/byteNet-tensorflow"
"nyu-dl/dl4mt-c2c" -> "rsennrich/nematus"
"nyu-dl/dl4mt-c2c" -> "nyu-dl/dl4mt-multi"
"nyu-dl/dl4mt-c2c" -> "lium-lst/nmtpy"
"facebookresearch/MLQA" -> "deepmind/xquad"
"facebookresearch/MLQA" -> "google-research-datasets/tydiqa"
"facebookresearch/MLQA" -> "thunlp/XQA"
"facebookresearch/MLQA" -> "google-research/xtreme"
"facebookresearch/MLQA" -> "AkariAsai/XORQA"
"dsgiitr/ML-InterviewQs" -> "dsgiitr/BOSCH-MODEL-EXTRACTION-ATTACK-FOR-VIDEO-CLASSIFICATION"
"dsgiitr/reading-group" -> "dsgiitr/adversarial_lab"
"dsgiitr/reading-group" -> "dsgiitr/VisualML"
"dsgiitr/reading-group" -> "dsgiitr/ML-InterviewQs"
"dsgiitr/reading-group" -> "sahilg06/Global-Wheat-Detection-2021"
"dsgiitr/reading-group" -> "dsgiitr/BOSCH-MODEL-EXTRACTION-ATTACK-FOR-VIDEO-CLASSIFICATION"
"chschock/textsplit" -> "sedflix/awesome-topic-segmentation"
"AkariAsai/XORQA" -> "AkariAsai/CORA"
"AkariAsai/XORQA" -> "castorini/mr.tydi"
"moses-smt/giza-pp" -> "moses-smt/mgiza"
"moses-smt/giza-pp" -> "clab/fast_align"
"moses-smt/giza-pp" -> "kenkov/smt"
"moses-smt/giza-pp" -> "robertostling/eflomal"
"moses-smt/giza-pp" -> "jhclark/multeval"
"moses-smt/giza-pp" -> "cisnlp/simalign"
"moses-smt/giza-pp" -> "thumt/THUMT"
"rsennrich/Bleualign" -> "danielvarga/hunalign"
"rsennrich/Bleualign" -> "thompsonb/vecalign"
"rsennrich/Bleualign" -> "mjpost/sacreBLEU"
"rsennrich/Bleualign" -> "jonsafari/nmt-list"
"rsennrich/Bleualign" -> "clab/fast_align"
"rsennrich/Bleualign" -> "machinalis/yalign"
"rsennrich/Bleualign" -> "rsennrich/nematus"
"rsennrich/Bleualign" -> "neulab/awesome-align"
"rsennrich/Bleualign" -> "robertostling/eflomal"
"rsennrich/Bleualign" -> "clab/wikipedia-parallel-titles"
"rsennrich/Bleualign" -> "bitextor/bicleaner"
"rsennrich/Bleualign" -> "bitextor/bitextor"
"rsennrich/Bleualign" -> "thammegowda/mtdata"
"rsennrich/Bleualign" -> "alvations/sacremoses"
"rsennrich/Bleualign" -> "odashi/mteval"
"ofnote/tsalib" -> "harvardnlp/namedtensor"
"ofnote/tsalib" -> "deepmind/tensor_annotations"
"TropComplique/lda2vec-pytorch" -> "nateraw/Lda2vec-Tensorflow"
"facebookresearch/vizseq" -> "alvations/sacremoses"
"facebookresearch/vizseq" -> "pytorch/translate"
"facebookresearch/vizseq" -> "facebookresearch/covost" ["e"=1]
"facebookresearch/vizseq" -> "kahne/SpeechTransProgress" ["e"=1]
"facebookresearch/vizseq" -> "neulab/compare-mt"
"facebookresearch/vizseq" -> "thammegowda/mtdata"
"facebookresearch/vizseq" -> "facebookresearch/cc_net"
"google-research-datasets/gap-coreference" -> "kentonl/e2e-coref"
"google-research-datasets/gap-coreference" -> "shayneobrien/coreference-resolution"
"google-research-datasets/gap-coreference" -> "clarkkev/deep-coref"
"google-research-datasets/gap-coreference" -> "mandarjoshi90/coref"
"google-research-datasets/gap-coreference" -> "sattree/gap"
"google-research-datasets/gap-coreference" -> "ShannonAI/CorefQA"
"google-research-datasets/gap-coreference" -> "kkjawz/coref-ee"
"dbamman/book-nlp" -> "dbamman/litbank"
"dbamman/book-nlp" -> "miyyer/rmn"
"dbamman/book-nlp" -> "dbamman/anlp19"
"dbamman/book-nlp" -> "sgsinclair/alta" ["e"=1]
"dbamman/book-nlp" -> "booknlp/booknlp"
"dbamman/book-nlp" -> "walshbr/humanists-nlp-cookbook"
"dbamman/book-nlp" -> "cmu-lib/dhlg" ["e"=1]
"MIND-Lab/OCTIS" -> "MilaNLProc/contextualized-topic-models"
"MIND-Lab/OCTIS" -> "bab2min/tomotopy"
"MIND-Lab/OCTIS" -> "adjidieng/ETM" ["e"=1]
"MIND-Lab/OCTIS" -> "zll17/Neural_Topic_Models" ["e"=1]
"MIND-Lab/OCTIS" -> "MaartenGr/BERTopic"
"MIND-Lab/OCTIS" -> "ddangelov/Top2Vec"
"MIND-Lab/OCTIS" -> "YongfeiYan/Neural-Document-Modeling" ["e"=1]
"MIND-Lab/OCTIS" -> "jhlau/topic_interpretability" ["e"=1]
"MIND-Lab/OCTIS" -> "silviatti/topic-model-diversity"
"MIND-Lab/OCTIS" -> "estebandito22/PyTorchAVITM"
"MIND-Lab/OCTIS" -> "MaartenGr/BERTopic_evaluation"
"MIND-Lab/OCTIS" -> "gregversteeg/corex_topic"
"MIND-Lab/OCTIS" -> "maria-antoniak/little-mallet-wrapper" ["e"=1]
"MIND-Lab/OCTIS" -> "ahoho/topics"
"MIND-Lab/OCTIS" -> "qiang2100/STTM" ["e"=1]
"gdamaskinos/unsupervised_topic_segmentation" -> "maxent-ai/converse"
"ml-gde/e2e-tflite-tutorials" -> "margaretmz/segmentation-style-transfer"
"ml-gde/e2e-tflite-tutorials" -> "sayakpaul/E2E-Object-Detection-in-TFLite"
"omarsar/nlp_highlights" -> "omarsar/nlp_overview"
"ravidziv/IDNNs" -> "artemyk/ibsgd"
"ravidziv/IDNNs" -> "cynxchen/deep-learning-mutual-info"
"ravidziv/IDNNs" -> "stevenliuyi/information-bottleneck"
"ravidziv/IDNNs" -> "ravidziv/Information-bottleneck"
"ravidziv/IDNNs" -> "mrtnoshad/EDGE"
"ravidziv/IDNNs" -> "djstrouse/information-bottleneck"
"ravidziv/IDNNs" -> "artemyk/nonlinearIB"
"ravidziv/IDNNs" -> "ZIYU-DEEP/Awesome-Information-Bottleneck"
"ravidziv/IDNNs" -> "gtegner/mine-pytorch"
"YuanTingHsieh/TF_TCN" -> "Songweiping/TCN-TF"
"YuanTingHsieh/TF_TCN" -> "Baichenjia/Tensorflow-TCN"
"pingpong-ai/xlnet-pytorch" -> "graykode/xlnet-Pytorch"
"pingpong-ai/xlnet-pytorch" -> "ankit-ai/BertQA-Attention-on-Steroids" ["e"=1]
"agaralabs/transformer-drg-style-transfer" -> "Nrgeup/controllable-text-attribute-transfer"
"agaralabs/transformer-drg-style-transfer" -> "cookielee77/DAST"
"agaralabs/transformer-drg-style-transfer" -> "lijuncen/Sentiment-and-Style-Transfer"
"agaralabs/transformer-drg-style-transfer" -> "VAShibaev/text_style_transfer"
"agaralabs/transformer-drg-style-transfer" -> "rpryzant/delete_retrieve_generate"
"agaralabs/transformer-drg-style-transfer" -> "ChenWu98/Point-Then-Operate"
"agaralabs/transformer-drg-style-transfer" -> "fastnlp/style-transformer"
"TharinduDR/TransQuest" -> "facebookresearch/mlqe"
"TharinduDR/TransQuest" -> "sheffieldnlp/mlqe-pe"
"TharinduDR/TransQuest" -> "sheffieldnlp/deepQuest"
"TharinduDR/TransQuest" -> "Unbabel/OpenKiwi"
"ines/spacy-js" -> "kengz/spacy-nlp"
"hannw/nlstm" -> "titu1994/Nested-LSTM"
"hannw/nlstm" -> "batzner/indrnn"
"Open-Speech-EkStep/vakyansh-wav2vec2-experimentation" -> "Open-Speech-EkStep/vakyansh-models"
"gradsflow/gradsflow" -> "aniketmaurya/chitra"
"gradsflow/gradsflow" -> "jaswinder9051998/zoofs"
"chen0040/keras-english-resume-parser-and-analyzer" -> "bjherger/ResumeParser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "OmkarPathak/ResumeParser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy"
"chen0040/keras-english-resume-parser-and-analyzer" -> "Satrat/Resume-Parser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "OmkarPathak/pyresparser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "likerRr/code4goal-resume-parser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "0dust/ResumeFilter"
"chen0040/keras-english-resume-parser-and-analyzer" -> "binoydutt/Resume-Job-Description-Matching"
"chen0040/keras-english-resume-parser-and-analyzer" -> "perminder-klair/resume-parser"
"chen0040/keras-english-resume-parser-and-analyzer" -> "JAIJANYANI/Automated-Resume-Screening-System"
"chen0040/keras-english-resume-parser-and-analyzer" -> "jineshdhruv8/ResumeParser"
"phbraga/phmb4-risethesis-template" -> "bebetocf/ssl-dataset"
"phbraga/phmb4-risethesis-template" -> "hfbassani/RLBookExercises"
"akanyaani/ranknet-tensorflow2.0" -> "akanyaani/Illustrated_GPT2_With_Code"
"akanyaani/ranknet-tensorflow2.0" -> "akanyaani/Phrase_Extraction_Bi-LSTM"
"magic282/MXNMT" -> "Soonhwan-Kwon/capsnet.mxnet"
"shanybar/event_entity_coref_ecb_plus" -> "kiankd/events"
"shanybar/event_entity_coref_ecb_plus" -> "ariecattan/coref"
"leehanchung/cs224n" -> "jon-tow/cs224n"
"geyingli/unif" -> "huanghuidmml/tfbert"
"geyingli/unif" -> "DeligientSloth/AdversialNLP"
"autonlab/weasel" -> "JieyuZ2/Awesome-Weak-Supervision"
"autonlab/weasel" -> "benbo/interactive-weak-supervision"
"dphi-official/Deep_Learning_Bootcamp" -> "dphi-official/Machine_Learning_Bootcamp"
"dphi-official/Deep_Learning_Bootcamp" -> "dphi-official/Data_Science_Bootcamp"
"dphi-official/Deep_Learning_Bootcamp" -> "dphi-official/nlp_essentials"
"swiseman/nn_coref" -> "clarkkev/deep-coref"
"commonsense/conceptnet" -> "commonsense/conceptnet5"
"Marsrocky/Emotiw-Engagement-Prediction" -> "kaiwang960112/EmotiW_2019_engagement_regression"
"dphi-official/Machine_Learning_Bootcamp" -> "dphi-official/Data_Science_Bootcamp"
"dphi-official/Machine_Learning_Bootcamp" -> "pycaret/pycaret-demo-dphi"
"dphi-official/Machine_Learning_Bootcamp" -> "dphi-official/Deep_Learning_Bootcamp"
"RockyLzy/TextDefender" -> "dugu9sword/dne"
"h3lio5/episodic-lifelong-learning" -> "h3lio5/gan-pytorch"
"klb3713/sentence2vec" -> "JonathanRaiman/PVDM"
"klb3713/sentence2vec" -> "ryankiros/skip-thoughts"
"klb3713/sentence2vec" -> "piskvorky/gensim" ["e"=1]
"klb3713/sentence2vec" -> "zseymour/phrase2vec"
"klb3713/sentence2vec" -> "yoonkim/CNN_sentence"
"klb3713/sentence2vec" -> "largelymfs/paragraph2vec"
"klb3713/sentence2vec" -> "mesnilgr/iclr15" ["e"=1]
"klb3713/sentence2vec" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"klb3713/sentence2vec" -> "IndicoDataSolutions/Passage" ["e"=1]
"klb3713/sentence2vec" -> "licstar/compare" ["e"=1]
"klb3713/sentence2vec" -> "peter3125/sentence2vec"
"klb3713/sentence2vec" -> "codekansas/keras-language-modeling" ["e"=1]
"klb3713/sentence2vec" -> "largelymfs/topical_word_embeddings" ["e"=1]
"klb3713/sentence2vec" -> "hassyGo/paragraph-vector"
"klb3713/sentence2vec" -> "wojzaremba/lstm" ["e"=1]
"openeventdata/petrarch2" -> "openeventdata/petrarch"
"openeventdata/petrarch2" -> "openeventdata/phoenix_pipeline"
"code-kern-ai/automl-docker" -> "code-kern-ai/kern-python"
"SapienzaNLP/spring" -> "bjascob/amrlib"
"SapienzaNLP/spring" -> "IBM/graph_ensemble_learning"
"SapienzaNLP/spring" -> "IBM/transition-amr-parser"
"SapienzaNLP/spring" -> "SapienzaNLP/gsrl"
"UKPLab/plms-graph2text" -> "wenhuchen/KGPT"
"UKPLab/plms-graph2text" -> "UKPLab/kg2text"
"UKPLab/plms-graph2text" -> "thu-coai/JointGT"
"wenhuchen/KGPT" -> "UKPLab/plms-graph2text"
"wenhuchen/KGPT" -> "LiyingCheng95/EntityDescriptionGeneration"
"lxucs/coref-hoi" -> "emorynlp/coref-hoi"
"M4t1ss/SoftAlignments" -> "lilt/alignment-scripts"
"mfaruqui/crosslingual-cca" -> "shyamupa/biling-survey"
"wimmuskee/readability-score" -> "mmautner/readability"
"sheng-z/stog" -> "jcyk/AMR-gs"
"sheng-z/stog" -> "goodmami/penman"
"sheng-z/stog" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"sheng-z/stog" -> "Oneplus/tamr"
"sheng-z/stog" -> "amrisi/amr-guidelines"
"sheng-z/stog" -> "jflanigan/jamr"
"sheng-z/stog" -> "c-amr/camr"
"sheng-z/stog" -> "cfmrp/mtool"
"sheng-z/stog" -> "snowblink14/smatch"
"sheng-z/stog" -> "freesunshine0316/neural-graph-to-seq-mp"
"sheng-z/stog" -> "RikVN/AMR"
"sheng-z/stog" -> "mdtux89/amr-evaluation"
"sheng-z/stog" -> "sinantie/NeuralAmr"
"sheng-z/stog" -> "mdtux89/amr-eager"
"tangxingwang/yousan.ai" -> "jinfagang/yolov3_tf2"
"gregversteeg/bio_corex" -> "gregversteeg/CorEx"
"gregversteeg/bio_corex" -> "gregversteeg/LinearCorex"
"vene/sparse-structured-attention" -> "vene/sparsemap"
"vene/sparse-structured-attention" -> "KrisKorrel/sparsemax-pytorch"
"doccano/doccano-transformer" -> "doccano/doccano-client"
"AI4Bharat/indicTrans" -> "libindic/indic-trans"
"arvind385801/paraphraseGen" -> "ale3otik/paraphrases-generator"
"fuzhenxin/text_style_transfer" -> "fuzhenxin/textstyletransferdata"
"fuzhenxin/text_style_transfer" -> "vineetjohn/linguistic-style-transfer"
"dipanjanS/nlp_crash_course_plugin20" -> "equester/mlops-plugin_2020"
"google/wmt-mqm-human-evaluation" -> "google-research/mt-metrics-eval"
"sinantie/NeuralAmr" -> "mdtux89/OpenNMT-py-AMR-to-text"
"sinantie/NeuralAmr" -> "freesunshine0316/neural-graph-to-seq-mp"
"sinantie/NeuralAmr" -> "ChunchuanLv/AMR_AS_GRAPH_PREDICTION"
"lishaofeng/NLP_Backdoor" -> "ShannonAI/backdoor_nlg"
"martiansideofthemoon/style-transfer-paraphrase" -> "cindyxinyiwang/deep-latent-sequence-model"
"martiansideofthemoon/style-transfer-paraphrase" -> "zhijing-jin/Text_Style_Transfer_Survey"
"martiansideofthemoon/style-transfer-paraphrase" -> "fastnlp/style-transformer"
"martiansideofthemoon/style-transfer-paraphrase" -> "lvyiwei1/StylePTB"
"thunlp/StyleAttack" -> "thunlp/ONION"
"raharrasy/RL2019-BaseCodes" -> "raharrasy/HFO"
"jcyk/AMR-gs" -> "sheng-z/stog"
"jcyk/AMR-gs" -> "RikVN/AMR"
"jcyk/AMR-gs" -> "muyeby/AMR-Dialogue"
"isi-nlp/Zoph_RNN" -> "neubig/lamtram"
"isi-nlp/Zoph_RNN" -> "rsennrich/wmt16-scripts"
"isi-nlp/Zoph_RNN" -> "jiajunzhangnlp/EUREKA-MangoNMT" ["e"=1]
"isi-nlp/Zoph_RNN" -> "nyu-dl/dl4mt-multi"
"isi-nlp/Zoph_RNN" -> "rsennrich/nematus"
"isi-nlp/Zoph_RNN" -> "marian-nmt/marian-examples"
"isi-nlp/Zoph_RNN" -> "emjotde/amunmt"
"isi-nlp/Zoph_RNN" -> "redpony/cdec" ["e"=1]
"isi-nlp/Zoph_RNN" -> "neubig/nmt-tips"
"msg-systems/coreferee" -> "explosion/coreferee"
"msg-systems/coreferee" -> "microsoft/spacy-ann-linker" ["e"=1]
"msg-systems/coreferee" -> "Pandora-Intelligence/crosslingual-coreference"
"msg-systems/coreferee" -> "KennethEnevoldsen/augmenty"
"sebastianarnold/SECTOR" -> "sebastianarnold/WikiSection"
"paulx3/keras_generative_pg" -> "iamaaditya/neural-paraphrase-generation"
"paulx3/keras_generative_pg" -> "ale3otik/paraphrases-generator"
"paulx3/keras_generative_pg" -> "HarshTrivedi/paraphrase-generation"
"weilinie/RelGAN" -> "elvisyjlin/RelGAN-PyTorch"
"ChunchuanLv/AMR_AS_GRAPH_PREDICTION" -> "sheng-z/stog"
"ChunchuanLv/AMR_AS_GRAPH_PREDICTION" -> "Oneplus/tamr"
"ChunchuanLv/AMR_AS_GRAPH_PREDICTION" -> "mdtux89/amr-eager"
"moses-smt/mgiza" -> "moses-smt/giza-pp"
"moses-smt/mgiza" -> "lilt/alignment-scripts"
"moses-smt/mgiza" -> "clab/fast_align"
"alvinchangw/COCON_ICLR2021" -> "FreddeFrallan/Non-Residual-Prompting"
"facebookresearch/colorlessgreenRNNs" -> "BeckyMarvin/LM_syneval"
"facebookresearch/colorlessgreenRNNs" -> "TalLinzen/rnn_agreement"
"h3lio5/linguistic-style-transfer-pytorch" -> "h3lio5/gan-pytorch"
"sheffieldnlp/deepQuest" -> "lovecambi/qebrain"
"sheffieldnlp/deepQuest" -> "qe-team/marmot"
"sheffieldnlp/deepQuest" -> "JunjieHu/CEQE"
"naver/gdc" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"shizhouxing/Robustness-Verification-for-Transformers" -> "robinjia/certified-word-sub"
"sphinxteam/dnner" -> "marylou-gabrie/learning-synthetic-data"
"ghpaetzold/questplusplus" -> "qe-team/marmot"
"salesforce/GeDi" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"salesforce/GeDi" -> "alisawuffles/DExperts"
"salesforce/GeDi" -> "alvinchangw/COCON_ICLR2021"
"FranxYao/Gumbel-CRF" -> "FilippoC/diffdp" ["e"=1]
"lietou1986/xparser" -> "lietou1986/lietou1986.github.io"
"lietou1986/xparser" -> "lietou1986/dorado"
"lietou1986/xparser" -> "lietou1986/len-vscode-theme"
"ines/spacymoji" -> "ines/spacy-graphql"
"kyunghyuncho/dl4mt-material" -> "chrishokamp/dl4mt_exercises"
"kyunghyuncho/dl4mt-material" -> "rsennrich/nematus"
"kyunghyuncho/dl4mt-material" -> "mila-udem/blocks-examples" ["e"=1]
"kyunghyuncho/dl4mt-material" -> "nyu-dl/dl4mt-multi"
"tokestermw/tensorflow-shakespeare" -> "paarthneekhara/byteNet-tensorflow"
"tokestermw/tensorflow-shakespeare" -> "neubig/nmt-tips"
"tokestermw/tensorflow-shakespeare" -> "cocoxu/Shakespeare"
"tokestermw/tensorflow-shakespeare" -> "rsennrich/nematus"
"tokestermw/tensorflow-shakespeare" -> "nyu-dl/dl4mt-multi"
"tokestermw/tensorflow-shakespeare" -> "nyu-dl/dl4mt-c2c"
"tokestermw/tensorflow-shakespeare" -> "SwordYork/DCNMT"
"facebookresearch/mlqe" -> "TharinduDR/TransQuest"
"facebookresearch/mlqe" -> "sheffieldnlp/mlqe-pe"
"facebookresearch/mlqe" -> "sheffieldnlp/deepQuest"
"thammegowda/mtdata" -> "bzhangGo/zero"
"thammegowda/mtdata" -> "Helsinki-NLP/OpusFilter"
"thammegowda/mtdata" -> "facebookresearch/stopes"
"thammegowda/mtdata" -> "neulab/compare-mt"
"miyyer/dan" -> "Pinafore/qb"
"QAQ-v/HetGT" -> "sodawater/GraphTransformer"
"NiuTrans/MTVenues" -> "NiuTrans/LanguageCodes"
"lmthang/nmt.matlab" -> "lmthang/nmt.hybrid"
"KennethEnevoldsen/augmenty" -> "KennethEnevoldsen/spacy-wrap"
"KennethEnevoldsen/augmenty" -> "Pandora-Intelligence/crosslingual-coreference"
"dugu9sword/dne" -> "RockyLzy/TextDefender"
"robinjia/certified-word-sub" -> "shizhouxing/Robustness-Verification-for-Transformers"
"robinjia/certified-word-sub" -> "lushleaf/Structure-free-certified-NLP"
"robinjia/certified-word-sub" -> "dongxinshuai/ASCC"
"robinjia/certified-word-sub" -> "dugu9sword/dne"
"PerseusDL/canonical-greekLit" -> "OpenGreekAndLatin/First1KGreek"
"PerseusDL/canonical-greekLit" -> "PerseusDL/canonical-latinLit"
"PerseusDL/canonical-greekLit" -> "PerseusDL/treebank_data"
"kkjawz/coref-ee" -> "HKUST-KnowComp/Pronoun-Coref"
"affjljoo3581/canrevan" -> "affjljoo3581/Expanda"
"openeventdata/petrarch" -> "openeventdata/petrarch2"
"RikVN/AMR" -> "xdqkid/S2S-AMR-Parser"
"emjotde/amunmt" -> "rsennrich/nematus"
"elvisyjlin/RelGAN-PyTorch" -> "willylulu/RelGAN"
"elvisyjlin/RelGAN-PyTorch" -> "BCV-Uniandes/SMIT"
"mmautner/readability" -> "andreasvc/readability"
"mmautner/readability" -> "wimmuskee/readability-score"
"openeventdata/phoenix_pipeline" -> "openeventdata/petrarch2"
"thunlp/ONION" -> "thunlp/HiddenKiller"
"lemin0922/EmotiW-2018" -> "lemin0922/TAGM_pytorch"
"lushleaf/Structure-free-certified-NLP" -> "robinjia/certified-word-sub"
"Sunnydreamrain/IndRNN_Theano_Lasagne" -> "titu1994/Keras-IndRNN"
"jhclark/tercom" -> "qe-team/marmot"
"lietou1986/dorado" -> "lietou1986/lietou1986.github.io"
"lietou1986/dorado" -> "lietou1986/len-vscode-theme"
"GreySec-Security-Forums/PENTESTING-BIBLE" -> "thompsonb/DL4MT"
"nltk/nltk" ["l"="29.92,32.821"]
"explosion/spaCy" ["l"="29.888,32.736"]
"RaRe-Technologies/gensim" ["l"="29.945,32.756"]
"stanfordnlp/CoreNLP" ["l"="29.913,32.775"]
"sloria/TextBlob" ["l"="29.822,32.79"]
"facebookresearch/fastText" ["l"="30.048,32.705"]
"clips/pattern" ["l"="27.254,33.866"]
"scikit-learn/scikit-learn" ["l"="33.568,35.426"]
"allenai/allennlp" ["l"="29.939,32.599"]
"Theano/Theano" ["l"="27.133,33.93"]
"stanfordnlp/GloVe" ["l"="30.015,32.718"]
"fchollet/keras" ["l"="23.498,31.087"]
"sebastianruder/NLP-progress" ["l"="29.924,32.632"]
"google-research/bert" ["l"="30.054,32.634"]
"fxsjy/jieba" ["l"="31.785,30.143"]
"dmlc/xgboost" ["l"="25.345,33.814"]
"huggingface/datasets" ["l"="29.99,32.42"]
"PyTorchLightning/pytorch-lightning" ["l"="34.221,35.789"]
"huggingface/transformers" ["l"="27.114,30.584"]
"huggingface/tokenizers" ["l"="29.808,32.488"]
"eugeneyan/applied-ml" ["l"="23.66,30.557"]
"huggingface/diffusers" ["l"="27.252,30.798"]
"huggingface/accelerate" ["l"="27.589,31.035"]
"pytorch/fairseq" ["l"="29.978,32.515"]
"gradio-app/gradio" ["l"="27.271,30.741"]
"UKPLab/sentence-transformers" ["l"="29.808,32.535"]
"openai/CLIP" ["l"="34.392,35.886"]
"google/jax" ["l"="30.277,32.484"]
"deepset-ai/haystack" ["l"="29.634,32.485"]
"jina-ai/jina" ["l"="34.114,28.783"]
"THUNLP-MT/MT-Reading-List" ["l"="29.903,32.43"]
"rsennrich/subword-nmt" ["l"="29.949,32.431"]
"facebookresearch/XLM" ["l"="29.881,32.471"]
"OpenNMT/OpenNMT-py" ["l"="30.01,32.499"]
"moses-smt/mosesdecoder" ["l"="29.944,32.386"]
"clab/fast_align" ["l"="29.904,32.347"]
"THUNLP-MT/THUMT" ["l"="29.923,32.371"]
"facebookresearch/UnsupervisedMT" ["l"="29.935,32.412"]
"thunlp/PLMpapers" ["l"="29.809,32.562"]
"facebookresearch/LASER" ["l"="29.879,32.496"]
"facebookresearch/MUSE" ["l"="29.936,32.499"]
"microsoft/MASS" ["l"="29.925,32.432"]
"marian-nmt/marian" ["l"="29.929,32.343"]
"tensorflow/nmt" ["l"="30.085,32.546"]
"google/sentencepiece" ["l"="29.919,32.523"]
"facebookresearch/fairseq" ["l"="30.151,32.542"]
"tensorflow/tensor2tensor" ["l"="30.047,32.545"]
"microsoft/unilm" ["l"="34.387,35.927"]
"facebookresearch/ParlAI" ["l"="30.032,32.573"]
"google/seq2seq" ["l"="30.114,32.543"]
"facebookresearch/faiss" ["l"="30.106,32.606"]
"deepmind/sonnet" ["l"="24.865,35.774"]
"espnet/espnet" ["l"="0.517,39.96"]
"OpenNMT/OpenNMT" ["l"="30.086,32.465"]
"jadore801120/attention-is-all-you-need-pytorch" ["l"="30.059,32.495"]
"huggingface/pytorch-pretrained-BERT" ["l"="29.956,32.549"]
"zihangdai/xlnet" ["l"="29.925,32.544"]
"hanxiao/bert-as-service" ["l"="29.94,32.577"]
"google-research/google-research" ["l"="30.263,32.554"]
"google-research/text-to-text-transfer-transformer" ["l"="29.891,32.455"]
"ZiJianZhao/SeqGAN-PyTorch" ["l"="30.016,32.206"]
"suragnair/seqGAN" ["l"="30.019,32.261"]
"X-czh/SeqGAN-PyTorch" ["l"="30.047,32.204"]
"LantaoYu/SeqGAN" ["l"="30.043,32.267"]
"wiseodd/controlled-text-generation" ["l"="29.935,32.193"]
"bhushan23/Transformer-SeqGAN-PyTorch" ["l"="30.06,32.158"]
"natnij/seqGAN_pytorch" ["l"="30.04,32.149"]
"williamSYSU/TextGAN-PyTorch" ["l"="29.966,32.201"]
"geek-ai/Texygen" ["l"="29.972,32.227"]
"ruotianluo/NeuralDialog-CVAE-pytorch" ["l"="28.166,29.102"]
"facebookresearch/fairseq-py" ["l"="30.093,32.49"]
"taolei87/sru" ["l"="30.094,32.518"]
"MaximumEntropy/Seq2Seq-PyTorch" ["l"="30.069,32.432"]
"eladhoffer/seq2seq.pytorch" ["l"="30.083,32.417"]
"salesforce/pytorch-qrnn" ["l"="30.115,32.482"]
"mila-udem/welcome_tutorials" ["l"="30.137,32.518"]
"facebookresearch/Starspace" ["l"="30.118,32.569"]
"facebookresearch/InferSent" ["l"="29.982,32.617"]
"salesforce/matchbox" ["l"="30.09,32.43"]
"jiweil/Neural-Dialogue-Generation" ["l"="28.215,29.04"]
"lanpa/tensorboard-pytorch" ["l"="34.262,35.363"]
"harvardnlp/seq2seq-attn" ["l"="27.07,34.332"]
"IBM/pytorch-seq2seq" ["l"="30.065,32.466"]
"ikostrikov/pytorch-a2c-ppo-acktr" ["l"="25.045,35.899"]
"apachecn/stanford-cs224n-notes-zh" ["l"="30.056,32.933"]
"zhanlaoban/CS224N-Stanford-Winter-2019" ["l"="30.047,32.878"]
"LooperXX/CS224n-Reading-Notes" ["l"="30.039,32.926"]
"apachecn/stanford-cs234-notes-zh" ["l"="25.174,36.293"]
"ZacBi/CS224n-2019-solutions" ["l"="30.038,32.864"]
"LooperXX/CS224n-2019-Reading-Notes" ["l"="30.077,32.99"]
"graykode/nlp-tutorial" ["l"="29.871,32.692"]
"FudanNLP/nlp-beginner" ["l"="32.038,30.177"]
"NLP-LOVE/ML-NLP" ["l"="24.216,31.1"]
"ymcui/Chinese-BERT-wwm" ["l"="32.087,30.221"]
"Embedding/Chinese-Word-Vectors" ["l"="32.012,30.196"]
"DA-southampton/NLP_ability" ["l"="32.11,30.203"]
"yandexdataschool/nlp_course" ["l"="29.871,32.784"]
"brightmart/nlp_chinese_corpus" ["l"="32.018,30.231"]
"crownpku/Awesome-Chinese-NLP" ["l"="31.98,30.18"]
"brightmart/text_classification" ["l"="30.018,32.673"]
"yunjey/pytorch-tutorial" ["l"="23.801,30.989"]
"bharathgs/Awesome-pytorch-list" ["l"="23.839,30.973"]
"sannykim/deep-learning-guide" ["l"="29.497,32.696"]
"sannykim/transformers" ["l"="29.61,32.634"]
"zeusees/HyperDL-Tutorial" ["l"="24.044,31.241"]
"mihail911/nlp-library" ["l"="29.764,32.626"]
"yassouali/ML_paper_notes" ["l"="29.298,32.733"]
"xixiaoyao/CS224n-winter-together" ["l"="30.062,32.912"]
"Luvata/CS224N-2019" ["l"="30.082,32.935"]
"LooperXX/CS224n-Resource" ["l"="30.039,32.905"]
"songyingxin/NLPer-Interview" ["l"="32.125,30.184"]
"apachecn/nlp-pytorch-zh" ["l"="32.087,30.162"]
"hankcs/CS224n" ["l"="30.101,32.857"]
"learning511/cs224n-learning-camp" ["l"="30.073,32.857"]
"stanfordnlp/cs224n-winter17-notes" ["l"="30.031,32.758"]
"cgpotts/cs224u" ["l"="29.943,32.728"]
"zhpmatrix/nlp-competitions-list-review" ["l"="32.142,30.184"]
"zibuyu/research_tao" ["l"="32.051,30.145"]
"msgi/nlp-journey" ["l"="32.097,30.143"]
"Kyubyong/transformer" ["l"="30.067,32.52"]
"kimiyoung/transformer-xl" ["l"="29.94,32.481"]
"bojone/attention" ["l"="31.386,31.557"]
"brightmart/albert_zh" ["l"="32.122,30.219"]
"macanv/BERT-BiLSTM-CRF-NER" ["l"="32.174,30.151"]
"allenai/bilm-tf" ["l"="29.994,32.599"]
"codertimo/BERT-pytorch" ["l"="30.004,32.522"]
"abisee/pointer-generator" ["l"="28.347,33.62"]
"rwightman/pytorch-image-models" ["l"="34.304,35.711"]
"deepmind/deepmind-research" ["l"="34.272,35.889"]
"facebookresearch/detectron2" ["l"="34.249,35.548"]
"pytorch/pytorch" ["l"="33.791,35.479"]
"lucidrains/vit-pytorch" ["l"="34.403,35.805"]
"tensorflow/models" ["l"="33.821,35.342"]
"rusty1s/pytorch_geometric" ["l"="21.704,38.639"]
"openai/gpt-3" ["l"="30.241,32.422"]
"openai/gpt-2" ["l"="30.15,32.456"]
"karpathy/minGPT" ["l"="27.394,30.872"]
"elyase/awesome-gpt3" ["l"="30.153,32.369"]
"microsoft/DeepSpeed" ["l"="27.225,30.897"]
"facebookresearch/llama" ["l"="27.227,30.945"]
"EleutherAI/gpt-neo" ["l"="27.534,30.885"]
"openai/gym" ["l"="24.91,36.054"]
"tatsu-lab/stanford_alpaca" ["l"="27.192,30.96"]
"minimaxir/gpt-2-simple" ["l"="30.114,32.321"]
"nshepperd/gpt-2" ["l"="30.074,32.298"]
"minimaxir/aitextgen" ["l"="30.101,32.274"]
"minimaxir/textgenrnn" ["l"="30.082,32.38"]
"minimaxir/gpt-2-cloud-run" ["l"="30.127,32.231"]
"salesforce/ctrl" ["l"="29.919,32.354"]
"graykode/gpt-2-Pytorch" ["l"="30.044,32.297"]
"openai/gpt-2-output-dataset" ["l"="30.023,32.359"]
"ConnorJL/GPT2" ["l"="25.729,37.023"]
"imcaspar/gpt2-ml" ["l"="32.107,30.363"]
"ak9250/gpt-2-colab" ["l"="30.13,32.25"]
"huggingface/transfer-learning-conv-ai" ["l"="29.927,32.393"]
"rish-16/gpt2client" ["l"="30.181,32.228"]
"microsoft/DialoGPT" ["l"="28.282,28.926"]
"RasaHQ/rasa" ["l"="29.948,32.523"]
"deepmipt/DeepPavlov" ["l"="29.988,32.58"]
"crownpku/Rasa_NLU_Chi" ["l"="30.332,28.109"]
"gunthercox/ChatterBot" ["l"="30.354,28.205"]
"GaoQ1/rasa_chatbot_cn" ["l"="30.291,28.111"]
"deepset-ai/FARM" ["l"="29.674,32.546"]
"neuml/txtai" ["l"="29.584,32.482"]
"MaartenGr/BERTopic" ["l"="29.595,32.542"]
"flairNLP/flair" ["l"="29.703,32.533"]
"hwchase17/langchain" ["l"="27.129,30.97"]
"ddangelov/Top2Vec" ["l"="29.58,32.566"]
"makcedward/nlpaug" ["l"="29.681,32.5"]
"jerryjliu/gpt_index" ["l"="27.14,31.134"]
"qdrant/qdrant" ["l"="29.559,32.436"]
"milvus-io/milvus" ["l"="8.249,17.395"]
"ThilinaRajapakse/simpletransformers" ["l"="29.73,32.515"]
"semi-technologies/weaviate" ["l"="29.557,32.496"]
"microsoft/nlp" ["l"="29.812,32.591"]
"firmai/data-science-career" ["l"="23.955,30.485"]
"huggingface/pytorch-transformers" ["l"="29.873,32.549"]
"fastai/course-nlp" ["l"="29.776,32.688"]
"kaushaltrivedi/fast-bert" ["l"="29.766,32.529"]
"ines/spacy-course" ["l"="29.741,32.656"]
"stanfordnlp/stanfordnlp" ["l"="29.864,32.62"]
"zalandoresearch/flair" ["l"="29.856,32.595"]
"NervanaSystems/nlp-architect" ["l"="29.899,32.597"]
"tomohideshibata/BERT-related-papers" ["l"="29.789,32.515"]
"facebookresearch/pytext" ["l"="29.887,32.573"]
"huggingface/awesome-papers" ["l"="29.734,32.493"]
"salesforce/decaNLP" ["l"="29.901,32.554"]
"neubig/nn4nlp-code" ["l"="29.853,32.57"]
"omarsar/nlp_overview" ["l"="29.738,32.621"]
"fighting41love/funNLP" ["l"="31.715,30.146"]
"shreyashankar/gpt3-sandbox" ["l"="30.209,32.336"]
"humanloop/awesome-chatgpt" ["l"="26.883,31.012"]
"jbesomi/texthero" ["l"="29.67,32.523"]
"minimaxir/gpt-3-experiments" ["l"="30.268,32.252"]
"visenger/awesome-mlops" ["l"="23.713,30.51"]
"mikhail-bot/awesome-gpt3" ["l"="30.277,32.274"]
"Morizeyao/GPT2-Chinese" ["l"="32.04,30.352"]
"graykode/nlp-roadmap" ["l"="29.774,32.657"]
"graykode/distribution-is-all-you-need" ["l"="24.062,31.126"]
"mhagiwara/100-nlp-papers" ["l"="29.747,32.584"]
"microsoft/nlp-recipes" ["l"="29.713,32.593"]
"keon/awesome-nlp" ["l"="23.52,31.015"]
"OmkarPathak/pyresparser" ["l"="28.656,32.584"]
"OmkarPathak/ResumeParser" ["l"="28.684,32.571"]
"bjherger/ResumeParser" ["l"="28.657,32.562"]
"DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy" ["l"="28.72,32.57"]
"chen0040/keras-english-resume-parser-and-analyzer" ["l"="28.672,32.559"]
"JAIJANYANI/Automated-Resume-Screening-System" ["l"="28.689,32.552"]
"perminder-klair/resume-parser" ["l"="28.672,32.58"]
"divapriya/Language_Processing" ["l"="28.684,32.594"]
"kbrajwani/resume_parser" ["l"="28.637,32.615"]
"0dust/ResumeFilter" ["l"="28.699,32.568"]
"wanghaisheng/resume-parse-evaluation" ["l"="28.546,32.59"]
"jineshdhruv8/ResumeParser" ["l"="28.637,32.557"]
"ongteckwu/Resume-Rater" ["l"="28.7,32.585"]
"itsjafer/resume-parser" ["l"="28.605,32.607"]
"likerRr/code4goal-resume-parser" ["l"="28.638,32.569"]
"philipperemy/keras-tcn" ["l"="30.384,32.473"]
"locuslab/TCN" ["l"="30.177,32.496"]
"philipperemy/keras-attention-mechanism" ["l"="31.325,31.567"]
"Baichenjia/Tensorflow-TCN" ["l"="30.469,32.455"]
"JEddy92/TimeSeries_Seq2Seq" ["l"="22.316,35.88"]
"gantheory/TPA-LSTM" ["l"="22.291,35.898"]
"hfawaz/dl-4-tsc" ["l"="22.344,36.066"]
"philipperemy/n-beats" ["l"="22.407,35.924"]
"YuanTingHsieh/TF_TCN" ["l"="30.467,32.47"]
"timeseriesAI/tsai" ["l"="22.412,36.002"]
"awslabs/gluon-ts" ["l"="22.439,35.973"]
"EvilPsyCHo/Deep-Time-Series-Prediction" ["l"="22.306,35.903"]
"CyberZHG/keras-self-attention" ["l"="31.331,31.528"]
"jdb78/pytorch-forecasting" ["l"="22.403,35.973"]
"LongxingTan/Time-series-prediction" ["l"="22.349,35.911"]
"philipperemy/keract" ["l"="25.742,33.796"]
"google/trax" ["l"="30.039,32.448"]
"chartbeat-labs/textacy" ["l"="29.718,32.699"]
"huggingface/neuralcoref" ["l"="29.806,32.653"]
"explosion/thinc" ["l"="29.734,32.679"]
"explosion/sense2vec" ["l"="29.674,32.675"]
"DerwenAI/pytextrank" ["l"="28.492,33.58"]
"JasonKessler/scattertext" ["l"="29.699,32.66"]
"aboSamoor/polyglot" ["l"="29.802,32.631"]
"allenai/scispacy" ["l"="28.94,30.609"]
"explosion/projects" ["l"="29.632,32.677"]
"boudinfl/pke" ["l"="28.572,33.536"]
"explosion/spacy-transformers" ["l"="29.66,32.69"]
"LIAAD/yake" ["l"="28.573,33.557"]
"cemoody/lda2vec" ["l"="29.856,32.757"]
"openeventdata/mordecai" ["l"="29.59,32.751"]
"ivan-bilan/The-NLP-Pandect" ["l"="29.656,32.567"]
"dair-ai/nlp_paper_summaries" ["l"="29.655,32.548"]
"PAIR-code/lit" ["l"="29.643,32.514"]
"recognai/rubrix" ["l"="29.535,32.529"]
"jalammar/ecco" ["l"="29.59,32.507"]
"practical-nlp/practical-nlp" ["l"="29.632,32.608"]
"QData/TextAttack" ["l"="29.644,32.434"]
"NiuTrans/ABigSurvey" ["l"="29.693,32.466"]
"NorskRegnesentral/skweak" ["l"="29.491,32.529"]
"autonlab/weasel" ["l"="29.322,32.481"]
"erre-quadro/spikex" ["l"="29.456,32.568"]
"cdpierse/transformers-interpret" ["l"="29.536,32.488"]
"huggingface/setfit" ["l"="29.513,32.509"]
"snorkel-team/snorkel" ["l"="29.651,32.46"]
"webis-de/small-text" ["l"="29.462,32.508"]
"MilaNLProc/contextualized-topic-models" ["l"="29.525,32.563"]
"Pandora-Intelligence/concise-concepts" ["l"="29.4,32.533"]
"KennethEnevoldsen/augmenty" ["l"="29.396,32.568"]
"HazyResearch/flyingsquid" ["l"="29.346,32.495"]
"yueyu1030/COSINE" ["l"="29.301,32.497"]
"koaning/doubtlab" ["l"="25.75,34.132"]
"explosion/floret" ["l"="29.326,32.619"]
"explosion/spacy-experimental" ["l"="29.259,32.634"]
"explosion/coreferee" ["l"="29.412,32.678"]
"pmbaumgartner/spacy-html-tokenizer" ["l"="29.281,32.637"]
"fastai/fastai" ["l"="23.664,30.845"]
"streamlit/streamlit" ["l"="23.305,4.234"]
"oxford-cs-deepnlp-2017/lectures" ["l"="23.5,30.985"]
"argilla-io/argilla" ["l"="29.425,32.495"]
"huggingface/optimum" ["l"="27.66,31.09"]
"huggingface/evaluate" ["l"="27.597,31.133"]
"HKUNLP/instructor-embedding" ["l"="25.887,29.224"]
"MaartenGr/KeyBERT" ["l"="29.568,32.523"]
"huggingface/text-generation-inference" ["l"="27.541,31.166"]
"huggingface/peft" ["l"="27.406,31.119"]
"TimDettmers/bitsandbytes" ["l"="27.542,31.094"]
"ELS-RD/transformer-deploy" ["l"="27.679,31.075"]
"MaartenGr/PolyFuzz" ["l"="29.497,32.56"]
"PrithivirajDamodaran/Gramformer" ["l"="29.525,32.463"]
"code-kern-ai/refinery" ["l"="29.448,32.484"]
"code-kern-ai/bricks" ["l"="34.763,-28.248"]
"impira/docquery" ["l"="29.798,34.217"]
"code-kern-ai/automl-docker" ["l"="29.39,32.454"]
"CrowdDotDev/crowd.dev" ["l"="34.568,-28.504"]
"qdrant/quaterion" ["l"="-9.473,20.14"]
"HLasse/TextDescriptives" ["l"="29.398,32.517"]
"cleanlab/cleanlab" ["l"="25.524,34.193"]
"agermanidis/pigeon" ["l"="25.789,34.16"]
"3Top/word2vec-api" ["l"="30.054,32.741"]
"Kyubyong/wordvectors" ["l"="30.054,32.674"]
"idio/wiki2vec" ["l"="25.549,30.888"]
"danielfrg/word2vec" ["l"="30.123,32.742"]
"yoonkim/CNN_sentence" ["l"="30.091,32.749"]
"ryankiros/skip-thoughts" ["l"="30.01,32.741"]
"farizrahman4u/seq2seq" ["l"="31.273,31.598"]
"dennybritz/cnn-text-classification-tf" ["l"="30.101,32.695"]
"facebook/MemNN" ["l"="27.113,34.332"]
"Hironsan/awesome-embedding-models" ["l"="29.96,32.667"]
"andrewt3000/DL4NLP" ["l"="30.042,32.784"]
"dennybritz/deeplearning-papernotes" ["l"="23.38,31.006"]
"niderhoff/nlp-datasets" ["l"="29.923,32.669"]
"Kyubyong/nlp_tasks" ["l"="29.995,32.685"]
"pytorch/text" ["l"="30.002,32.562"]
"jacobeisenstein/gt-nlp-class" ["l"="29.869,32.651"]
"salestock/fastText.py" ["l"="30.141,32.697"]
"vrasneur/pyfasttext" ["l"="30.257,32.749"]
"apcode/tensorflow_fasttext" ["l"="30.288,32.736"]
"Hironsan/anago" ["l"="32.287,29.969"]
"dennybritz/chatbot-retrieval" ["l"="30.487,28.166"]
"glample/tagger" ["l"="32.242,29.991"]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["l"="31.392,31.595"]
"vinhkhuc/JFastText" ["l"="31.715,30.316"]
"richliao/textClassifier" ["l"="31.467,31.54"]
"google/cld3" ["l"="29.695,32.551"]
"bsolomon1124/pycld3" ["l"="29.618,32.59"]
"CLD2Owners/cld2" ["l"="29.722,32.55"]
"aboSamoor/pycld2" ["l"="29.635,32.585"]
"Elizafox/cld3" ["l"="29.635,32.549"]
"saffsd/langid.py" ["l"="29.754,32.561"]
"Mimino666/langdetect" ["l"="29.652,32.593"]
"mikemccand/chromium-compact-language-detector" ["l"="29.681,32.573"]
"google-research/multilingual-t5" ["l"="29.766,32.395"]
"mjpost/sacrebleu" ["l"="29.869,32.341"]
"akihikodaki/cld3-ruby" ["l"="32.869,-22.808"]
"shuyo/language-detection" ["l"="29.674,32.588"]
"mchen24/iclr2017" ["l"="30.067,32.877"]
"IBM/WordMoversEmbeddings" ["l"="30.114,32.941"]
"microsoft/forecasting" ["l"="22.465,35.959"]
"microsoft/computervision-recipes" ["l"="34.252,35.749"]
"microsoft/recommenders" ["l"="22.837,37.109"]
"chiphuyen/machine-learning-systems-design" ["l"="23.769,30.552"]
"wasiahmad/paraphrase_identification" ["l"="29.685,32.185"]
"iamaaditya/neural-paraphrase-generation" ["l"="29.665,32.159"]
"scoutbee/pytorch-nlp-notebooks" ["l"="29.97,32.976"]
"joosthub/PyTorchNLPBook" ["l"="29.901,32.687"]
"sotte/pytorch_tutorial" ["l"="29.982,33.031"]
"ddelange/pipgrip" ["l"="29.995,33.065"]
"spotify/annoy" ["l"="30.151,32.66"]
"erikbern/ann-benchmarks" ["l"="28.529,31.373"]
"nmslib/nmslib" ["l"="28.539,31.35"]
"nmslib/hnswlib" ["l"="28.567,31.363"]
"spotify/luigi" ["l"="22.964,4.425"]
"lyst/lightfm" ["l"="22.91,37.179"]
"hyperopt/hyperopt" ["l"="25.513,33.793"]
"marcotcr/lime" ["l"="25.523,33.887"]
"BiuBiuBiLL/NPEET_LNC" ["l"="29.042,32.982"]
"gregversteeg/NPEET" ["l"="29.06,32.968"]
"ematvey/tensorflow-seq2seq-tutorials" ["l"="30.209,32.524"]
"google/flax" ["l"="23.509,33.746"]
"lucidrains/reformer-pytorch" ["l"="29.844,32.396"]
"deepmind/dm-haiku" ["l"="23.513,33.768"]
"arogozhnikov/einops" ["l"="34.25,35.847"]
"tensorflow/lingvo" ["l"="29.947,32.455"]
"mravanelli/pytorch-kaldi" ["l"="0.561,39.869"]
"NVIDIA/OpenSeq2Seq" ["l"="0.578,39.921"]
"syhw/wer_are_we" ["l"="0.589,39.874"]
"PaddlePaddle/LARK" ["l"="32.089,30.118"]
"facebookresearch/wav2letter" ["l"="0.644,39.912"]
"HawkAaron/warp-transducer" ["l"="0.586,39.799"]
"kentonl/e2e-coref" ["l"="29.679,32.7"]
"mandarjoshi90/coref" ["l"="29.642,32.692"]
"clarkkev/deep-coref" ["l"="29.673,32.714"]
"shayneobrien/coreference-resolution" ["l"="29.648,32.712"]
"attardi/wikiextractor" ["l"="29.978,32.554"]
"huggingface/hmtl" ["l"="29.86,32.513"]
"zhengwsh/text-classification" ["l"="15.186,5.372"]
"fuzhenxin/Style-Transfer-in-Text" ["l"="29.873,32.224"]
"shentianxiao/language-style-transfer" ["l"="29.896,32.169"]
"zhijing-jin/Text_Style_Transfer_Survey" ["l"="29.77,32.183"]
"lijuncen/Sentiment-and-Style-Transfer" ["l"="29.833,32.169"]
"asyml/texar" ["l"="29.966,32.339"]
"luofuli/DualRL" ["l"="29.841,32.155"]
"THUNLP-MT/TG-Reading-List" ["l"="29.903,32.203"]
"vineetjohn/linguistic-style-transfer" ["l"="29.834,32.146"]
"fastnlp/style-transformer" ["l"="29.798,32.162"]
"Maluuba/nlg-eval" ["l"="28.316,33.591"]
"shrimai/Style-Transfer-Through-Back-Translation" ["l"="29.867,32.144"]
"Nrgeup/controllable-text-attribute-transfer" ["l"="29.821,32.152"]
"uber-research/PPLM" ["l"="29.933,32.264"]
"thunlp/TAADpapers" ["l"="29.638,32.336"]
"fuzhenxin/text_style_transfer" ["l"="29.852,32.128"]
"h3lio5/linguistic-style-transfer-pytorch" ["l"="29.812,32.092"]
"rpryzant/delete_retrieve_generate" ["l"="29.798,32.178"]
"agaralabs/transformer-drg-style-transfer" ["l"="29.782,32.168"]
"VAShibaev/text_style_transfer" ["l"="29.801,32.143"]
"amueller/word_cloud" ["l"="29.944,32.905"]
"isnowfy/snownlp" ["l"="31.911,30.154"]
"bokeh/bokeh" ["l"="23.15,4.588"]
"mwaskom/seaborn" ["l"="23.082,4.604"]
"pyecharts/pyecharts" ["l"="15.645,5.839"]
"tqdm/tqdm" ["l"="23.138,4.217"]
"littlecodersh/ItChat" ["l"="15.762,5.473"]
"python-visualization/folium" ["l"="20.322,27.532"]
"plotly/plotly.py" ["l"="23.176,4.62"]
"salesforce/awd-lstm-lm" ["l"="30.028,32.509"]
"allenai/bi-att-flow" ["l"="25.898,30.169"]
"spro/practical-pytorch" ["l"="30.067,32.568"]
"rguthrie3/DeepLearningForNLPInPytorch" ["l"="30.022,32.642"]
"facebookresearch/DrQA" ["l"="30.048,32.596"]
"fastai/course-v3" ["l"="23.724,30.79"]
"fastai/numerical-linear-algebra" ["l"="23.587,30.791"]
"fastai/fastbook" ["l"="23.712,30.694"]
"susanli2016/NLP-with-Python" ["l"="29.773,32.75"]
"llSourcell/Learn-Natural-Language-Processing-Curriculum" ["l"="24.528,29.036"]
"cjhutto/vaderSentiment" ["l"="29.837,32.735"]
"xiamx/awesome-sentiment-analysis" ["l"="29.216,31.331"]
"openai/generating-reviews-discovering-sentiment" ["l"="30.074,32.59"]
"bmabey/pyLDAvis" ["l"="29.714,32.757"]
"seatgeek/fuzzywuzzy" ["l"="29.592,32.784"]
"seatgeek/thefuzz" ["l"="29.527,32.626"]
"crsmithdev/arrow" ["l"="22.661,4.029"]
"joke2k/faker" ["l"="23.026,4.174"]
"pandas-profiling/pandas-profiling" ["l"="25.461,33.929"]
"ztane/python-Levenshtein" ["l"="29.483,32.717"]
"modin-project/modin" ["l"="25.404,33.956"]
"vi3k6i5/flashtext" ["l"="22.885,4.225"]
"dedupeio/dedupe" ["l"="25.338,29.897"]
"dbader/schedule" ["l"="22.909,4.112"]
"codelucas/newspaper" ["l"="20.232,2.453"]
"thunlp/OpenAttack" ["l"="29.537,32.299"]
"marcotcr/checklist" ["l"="29.687,32.443"]
"jind11/TextFooler" ["l"="29.561,32.284"]
"jasonwei20/eda_nlp" ["l"="32.075,30.315"]
"GEM-benchmark/NL-Augmenter" ["l"="29.619,32.452"]
"styfeng/DataAug4NLP" ["l"="29.606,32.429"]
"jessevig/bertviz" ["l"="29.828,32.509"]
"princeton-nlp/SimCSE" ["l"="32.165,30.335"]
"huggingface/nlp" ["l"="29.727,32.469"]
"timoschick/pet" ["l"="27.643,31.305"]
"HIPS/autograd" ["l"="25.428,33.663"]
"ray-project/ray" ["l"="25.254,33.964"]
"slundberg/shap" ["l"="25.452,33.889"]
"google-research/uda" ["l"="32.05,30.38"]
"Lingkai-Kong/Calibrated-BERT-Fine-Tuning" ["l"="29.251,32.502"]
"microsoft/ASTRA" ["l"="29.25,32.483"]
"makcedward/nlp" ["l"="29.733,32.715"]
"adsieg/text_similarity" ["l"="29.699,32.794"]
"kavgan/nlp-in-practice" ["l"="29.706,32.737"]
"nlptown/nlp-notebooks" ["l"="29.746,32.73"]
"gaoisbest/NLP-Projects" ["l"="29.697,32.811"]
"kk7nc/Text_Classification" ["l"="32.024,30.064"]
"huseinzol05/NLP-Models-Tensorflow" ["l"="32.094,30.101"]
"lihanghang/Knowledge-Graph" ["l"="32.386,30.225"]
"icoxfog417/awesome-text-summarization" ["l"="28.391,33.598"]
"juand-r/entity-recognition-datasets" ["l"="32.347,29.974"]
"dmlc/gluon-nlp" ["l"="29.895,32.533"]
"craffel/dl3d-seminar" ["l"="29.39,32.314"]
"stanleyn/Comp790-166-Comp-Bio" ["l"="29.345,32.297"]
"jtibshirani/text-embeddings" ["l"="29.619,32.651"]
"Hironsan/bertsearch" ["l"="29.665,32.629"]
"NiuTrans/MTBook" ["l"="29.723,32.347"]
"NiuTrans/NiuTensor" ["l"="29.667,32.288"]
"NiuTrans/MT-paper-lists" ["l"="29.673,32.304"]
"NiuTrans/NiuTrans.SMT" ["l"="29.656,32.302"]
"km1994/nlp_paper_study" ["l"="32.154,30.226"]
"NiuTrans/CNSurvey" ["l"="29.663,32.332"]
"bytedance/lightseq" ["l"="32.085,30.367"]
"CLUEbenchmark/CLUEDatasetSearch" ["l"="32.099,30.275"]
"namisan/mt-dnn" ["l"="29.853,32.482"]
"nlpyang/PreSumm" ["l"="28.352,33.667"]
"nlpyang/BertSum" ["l"="28.37,33.657"]
"thunlp/ERNIE" ["l"="32.134,30.202"]
"arpan74/ctci-python-solutions" ["l"="29.263,32.596"]
"hfbassani/RLBookExercises" ["l"="29.19,32.605"]
"google-research/electra" ["l"="29.813,32.437"]
"NVIDIA/Megatron-LM" ["l"="27.533,31.04"]
"google-research/t5x" ["l"="27.576,31.154"]
"huggingface/knockknock" ["l"="29.768,32.465"]
"williamFalcon/pytorch-lightning" ["l"="34.242,35.678"]
"pytorch/ignite" ["l"="34.197,35.641"]
"jettify/pytorch-optimizer" ["l"="34.329,35.803"]
"huggingface/pytorch-openai-transformer-lm" ["l"="29.96,32.482"]
"openai/finetune-transformer-lm" ["l"="29.916,32.492"]
"PetrochukM/PyTorch-NLP" ["l"="29.967,32.598"]
"thunlp/BERT-KPE" ["l"="28.621,33.515"]
"swisscom/ai-research-keyphrase-extraction" ["l"="28.612,33.53"]
"stanfordnlp/stanza" ["l"="29.78,32.598"]
"doccano/doccano" ["l"="32.158,30.113"]
"OpenNMT/OpenNMT-tf" ["l"="29.991,32.447"]
"HIT-SCIR/ltp" ["l"="31.947,30.174"]
"hankcs/HanLP" ["l"="31.824,30.18"]
"NLPchina/ansj_seg" ["l"="31.814,30.218"]
"huggingface/naacl_transfer_learning_tutorial" ["l"="29.836,32.472"]
"DSKSD/DeepNLP-models-Pytorch" ["l"="29.994,32.656"]
"ctgk/PRML" ["l"="23.911,31.059"]
"zhouhaoyi/Informer2020" ["l"="22.34,35.96"]
"locuslab/trellisnet" ["l"="23.138,33.758"]
"yysijie/st-gcn" ["l"="32.685,34.9"]
"tkipf/pygcn" ["l"="21.781,38.624"]
"linkedin/detext" ["l"="29.622,32.539"]
"harvardnlp/annotated-transformer" ["l"="29.991,32.481"]
"pytorch/examples" ["l"="34.032,35.559"]
"danqi/acl2020-openqa-tutorial" ["l"="25.772,29.244"]
"google-research/language" ["l"="25.752,29.223"]
"facebookresearch/SentEval" ["l"="29.916,32.584"]
"allenai/longformer" ["l"="29.772,32.437"]
"robustness-gym/robustness-gym" ["l"="29.607,32.409"]
"maciejkula/glove-python" ["l"="30.114,32.777"]
"marqo-ai/marqo" ["l"="29.5,32.437"]
"promptslab/Promptify" ["l"="27.204,31.257"]
"bigscience-workshop/petals" ["l"="27.355,31.078"]
"BlinkDL/RWKV-LM" ["l"="27.328,31.022"]
"replicate/cog" ["l"="25.449,34.264"]
"lucidrains/PaLM-rlhf-pytorch" ["l"="27.306,31.051"]
"chroma-core/chroma" ["l"="27.114,31.184"]
"adashofdata/nlp-in-python-tutorial" ["l"="29.761,32.78"]
"adashofdata/intro-to-text-analytics" ["l"="29.751,32.873"]
"adashofdata/muffin-cupcake" ["l"="29.742,32.889"]
"dipanjanS/text-analytics-with-python" ["l"="29.731,32.814"]
"hse-aml/natural-language-processing" ["l"="22.749,37.604"]
"dipanjanS/practical-machine-learning-with-python" ["l"="29.749,32.844"]
"susanli2016/Machine-Learning-with-Python" ["l"="23.526,30.714"]
"hundredblocks/concrete_NLP_tutorial" ["l"="29.792,32.728"]
"lyeoni/nlp-tutorial" ["l"="29.82,32.686"]
"weaviate/weaviate" ["l"="27.146,31.157"]
"meilisearch/meilisearch" ["l"="32.265,-26.574"]
"pola-rs/polars" ["l"="23.386,4.09"]
"quickwit-oss/tantivy" ["l"="-10.868,5.578"]
"vectordotdev/vector" ["l"="-10.86,5.516"]
"datafuselabs/databend" ["l"="-10.908,5.356"]
"apache/arrow-datafusion" ["l"="-10.821,5.388"]
"DioxusLabs/dioxus" ["l"="-9.007,4.687"]
"EdinburghNLP/nematus" ["l"="29.96,32.371"]
"OpenNMT/CTranslate2" ["l"="29.876,32.313"]
"clab/dynet" ["l"="30.165,32.577"]
"clab/dynet_tutorial_examples" ["l"="30.135,32.586"]
"tensorflow/fold" ["l"="24.795,35.73"]
"dmlc/mxnet" ["l"="27.064,33.96"]
"blei-lab/edward" ["l"="25.451,33.61"]
"tiny-dnn/tiny-dnn" ["l"="27.633,35.343"]
"kjw0612/awesome-rnn" ["l"="23.334,30.949"]
"zsdonghao/tensorlayer" ["l"="23.52,31.264"]
"facebookresearch/pythia" ["l"="29.848,32.531"]
"pytorch/translate" ["l"="30.003,32.377"]
"facebookresearch/vizseq" ["l"="29.919,32.319"]
"glample/fastBPE" ["l"="29.901,32.388"]
"elbayadm/attn2d" ["l"="29.992,32.322"]
"artetxem/undreamt" ["l"="29.995,32.36"]
"lium-lst/nmtpytorch" ["l"="30.073,32.351"]
"mjpost/sacreBLEU" ["l"="29.945,32.33"]
"awslabs/sockeye" ["l"="29.983,32.375"]
"MultiPath/Squirrel" ["l"="30.102,32.349"]
"alvations/sacremoses" ["l"="29.896,32.328"]
"Andras7/word2vec-pytorch" ["l"="30.368,33.003"]
"theeluwin/pytorch-sgns" ["l"="30.347,32.956"]
"OlgaChernytska/word2vec-pytorch" ["l"="30.392,33.043"]
"RasaHQ/rasa_nlu" ["l"="30.277,28.096"]
"dbamman/anlp19" ["l"="29.346,32.693"]
"dbamman/book-nlp" ["l"="29.376,32.665"]
"dbamman/litbank" ["l"="29.434,32.669"]
"keon/seq2seq" ["l"="30.062,32.401"]
"AuCson/PyTorch-Batch-Attention-Seq2seq" ["l"="30.137,32.401"]
"ymfa/seq2seq-summarizer" ["l"="28.299,33.644"]
"atulkum/pointer_summarizer" ["l"="28.327,33.642"]
"timbmg/Sentence-VAE" ["l"="29.94,32.173"]
"bentrevett/pytorch-seq2seq" ["l"="30.012,32.542"]
"EdGENetworks/attention-networks-for-classification" ["l"="31.568,31.493"]
"jsvine/markovify" ["l"="-4.752,-44.43"]
"karpathy/char-rnn" ["l"="23.324,31.101"]
"minimaxir/tweet-generator" ["l"="30.246,32.339"]
"jcjohnson/torch-rnn" ["l"="27.038,34.304"]
"gaussic/text-classification-cnn-rnn" ["l"="32.065,30.098"]
"guillaumegenthial/sequence_tagging" ["l"="32.226,30.014"]
"sherjilozair/char-rnn-tensorflow" ["l"="27.116,34.364"]
"shuyo/ldig" ["l"="29.677,32.604"]
"observerss/textfilter" ["l"="52.054,-5.161"]
"piskvorky/gensim" ["l"="27.115,34.08"]
"grangier/python-goose" ["l"="20.208,2.506"]
"kpu/kenlm" ["l"="0.625,39.852"]
"cs230-stanford/cs230-code-examples" ["l"="29.968,32.837"]
"jcjohnson/pytorch-examples" ["l"="33.961,35.55"]
"niudd/kaggle-cloud" ["l"="29.992,32.926"]
"victoresque/pytorch-template" ["l"="34.143,35.775"]
"afshinea/stanford-cs-230-deep-learning" ["l"="23.761,30.803"]
"dsgiitr/d2l-pytorch" ["l"="23.949,30.972"]
"MorvanZhou/PyTorch-Tutorial" ["l"="23.923,31.03"]
"moemen95/Pytorch-Project-Template" ["l"="34.102,35.791"]
"chiphuyen/stanford-tensorflow-tutorials" ["l"="23.642,31.063"]
"ritchieng/the-incredible-pytorch" ["l"="23.763,30.707"]
"dipanjanS/data_science_for_all" ["l"="29.714,32.902"]
"dipanjanS/art_of_data_visualization" ["l"="29.707,32.89"]
"dipanjanS/nlp_essentials" ["l"="29.691,32.939"]
"maxbachmann/RapidFuzz" ["l"="29.479,32.631"]
"pandera-dev/pandera" ["l"="25.487,34.077"]
"fbdesignpro/sweetviz" ["l"="25.542,34.027"]
"feature-engine/feature_engine" ["l"="25.678,34.037"]
"fabiocaccamo/python-benedict" ["l"="26.015,1.493"]
"evidentlyai/evidently" ["l"="25.475,34.139"]
"PracticalDL/Practical-Deep-Learning-Book" ["l"="28.909,32.832"]
"hundredblocks/ml-powered-applications" ["l"="23.777,30.291"]
"moelgendy/deep_learning_for_vision_systems" ["l"="30.09,36.497"]
"PacktPublishing/Hands-On-Computer-Vision-with-TensorFlow-2" ["l"="29.025,32.82"]
"margaretmz/awesome-tflite" ["l"="28.863,32.864"]
"sayakpaul/TF-2.0-Hacks" ["l"="28.945,32.845"]
"emadboctorx/yolov3-keras-tf2" ["l"="34.479,35.298"]
"swordest/mec_drl" ["l"="-11.447,-1.183"]
"Robofied/Awesome-NLP-Resources" ["l"="28.858,32.82"]
"OvidijusParsiunas/myvision" ["l"="30.379,32.186"]
"vuejs/docs-next" ["l"="14.885,-12.138"]
"lidangzzz/hedgehog-lab" ["l"="30.415,32.161"]
"cltk/cltk" ["l"="29.354,31.891"]
"cltk/tutorials" ["l"="29.317,31.902"]
"OpenGreekAndLatin/First1KGreek" ["l"="29.346,31.84"]
"PerseusDL/canonical-greekLit" ["l"="29.329,31.843"]
"scaife-viewer/scaife-viewer" ["l"="29.353,31.856"]
"dbamman/latin-bert" ["l"="29.31,31.86"]
"jtauber/greek-accentuation" ["l"="29.329,31.873"]
"biblissima/collatinus" ["l"="29.368,31.868"]
"anoopkunchukuttan/indic_nlp_library" ["l"="29.551,32.144"]
"cltk/cltk_frontend" ["l"="29.338,31.908"]
"PerseusDL/canonical-latinLit" ["l"="29.335,31.862"]
"computationalstylistics/stylo" ["l"="29.378,31.848"]
"OpenGreekAndLatin/csel-dev" ["l"="29.381,31.882"]
"PerseusDL/lexica" ["l"="29.326,31.888"]
"papyri/idp.data" ["l"="29.307,31.883"]
"sommerschield/ancient-text-restoration" ["l"="29.287,31.837"]
"facebookresearch/StarSpace" ["l"="29.959,32.647"]
"epfml/sent2vec" ["l"="29.961,32.685"]
"facebookresearch/poincare-embeddings" ["l"="22.614,33.94"]
"facebookresearch/PyTorch-BigGraph" ["l"="21.734,38.689"]
"chihming/awesome-network-embedding" ["l"="21.816,38.736"]
"maciejkula/spotlight" ["l"="22.898,37.123"]
"EvilPsyCHo/Attention-PyTorch" ["l"="30.418,32.338"]
"thomlake/pytorch-attention" ["l"="30.32,32.36"]
"hellohaptik/multi-task-NLP" ["l"="29.329,32.068"]
"hellohaptik/chatbot_ner" ["l"="29.366,32.091"]
"huggingface/torchMoji" ["l"="29.987,32.537"]
"nyu-mll/jiant" ["l"="29.786,32.422"]
"Separius/BERT-keras" ["l"="31.359,31.536"]
"zhezhaoa/cluster-driven" ["l"="30.196,32.853"]
"zhezhaoa/Weighted-Paragraph-Vector" ["l"="30.186,32.845"]
"zhezhaoa/neural_BOW_toolkit" ["l"="30.166,32.828"]
"zhezhaoa/ngram2vec" ["l"="30.09,32.773"]
"Leonard-Xu/CWE" ["l"="30.687,33.722"]
"dbiir/UER-py" ["l"="32.146,30.28"]
"huyingxi/Synonyms" ["l"="32.008,30.152"]
"HIT-SCIR/ELMoForManyLangs" ["l"="29.987,32.634"]
"HIT-SCIR/pyltp" ["l"="32.019,30.13"]
"PrincetonML/SIF" ["l"="29.929,32.708"]
"yaleimeng/Final_word_Similarity" ["l"="32.214,30.244"]
"faneshion/MatchZoo" ["l"="31.986,30.034"]
"rockingdingo/deepnlp" ["l"="32.091,30.044"]
"zjy-ucas/ChineseNER" ["l"="32.228,30.072"]
"svn2github/word2vec" ["l"="30.158,32.803"]
"explosion/prodigy-recipes" ["l"="29.635,32.755"]
"explosion/jupyterlab-prodigy" ["l"="29.545,32.78"]
"ahalterman/multiuser_prodigy" ["l"="29.603,32.82"]
"explosion/spacy-notebooks" ["l"="29.634,32.922"]
"explosion/spacy-pytorch-transformers" ["l"="29.608,32.671"]
"explosion/spacy-lookups-data" ["l"="29.582,32.829"]
"explosion/spacy-streamlit" ["l"="22.994,32.085"]
"RedditSota/state-of-the-art-result-for-machine-learning-problems" ["l"="23.542,31.075"]
"rowanz/grover" ["l"="29.943,32.354"]
"asyml/texar-pytorch" ["l"="29.917,32.295"]
"Tiiiger/bert_score" ["l"="29.84,32.289"]
"google-research/bleurt" ["l"="29.857,32.315"]
"ZhuiyiTechnology/pretrained-models" ["l"="32.22,30.276"]
"changwookjun/nlp-paper" ["l"="32.147,30.171"]
"DataTerminatorX/Keyword-BERT" ["l"="32.236,30.223"]
"basketballandlearn/MRC_Competition_Dureader" ["l"="32.474,30.39"]
"leerumor/nlp_tutorial" ["l"="32.194,30.196"]
"loujie0822/DeepIE" ["l"="32.271,30.217"]
"pengshuang/Text-Similarity" ["l"="32.221,30.105"]
"DA-southampton/Tech_Aarticle" ["l"="32.169,30.217"]
"yuanxiaosc/Google-Machine-learning-crash-course" ["l"="29.247,32.755"]
"yuanxiaosc/yuanxiaosc.github.io" ["l"="29.216,32.765"]
"tweepy/tweepy" ["l"="-4.904,-45.289"]
"eugeneyan/ml-surveys" ["l"="23.795,30.527"]
"thunlp/PromptPapers" ["l"="27.603,31.288"]
"xcfcode/Summarization-Papers" ["l"="28.318,33.713"]
"NiuTrans/NiuTrans.NMT" ["l"="29.647,32.316"]
"omarsar/nlp_highlights" ["l"="29.697,32.68"]
"brianspiering/awesome-dl4nlp" ["l"="29.838,32.712"]
"CogComp/cogcomp-nlp" ["l"="29.885,33.083"]
"CogComp/cogcomp-nlpy" ["l"="29.893,33.132"]
"allenai/semanticilp" ["l"="29.887,33.112"]
"mttk/rnn-classifier" ["l"="31.45,31.388"]
"Seanny123/da-rnn" ["l"="22.279,35.862"]
"bentrevett/pytorch-sentiment-analysis" ["l"="29.96,32.625"]
"JayParks/tf-seq2seq" ["l"="30.221,32.496"]
"suriyadeepan/practical_seq2seq" ["l"="30.566,28.159"]
"j-min/tf_tutorial_plus" ["l"="30.213,32.581"]
"applenob/RNN-for-Joint-NLU" ["l"="28.066,28.964"]
"ilivans/tf-rnn-attention" ["l"="31.457,31.553"]
"eske/seq2seq" ["l"="30.222,32.457"]
"chiphuyen/tf-stanford-tutorials" ["l"="23.364,31.06"]
"carpedm20/MemN2N-tensorflow" ["l"="27.156,34.371"]
"domluna/memn2n" ["l"="27.181,34.385"]
"Marsan-Ma/tf_chatbot_seq2seq_antilm" ["l"="30.57,28.136"]
"mmihaltz/word2vec-GoogleNews-vectors" ["l"="30.383,32.878"]
"chrisjmccormick/inspect_word2vec" ["l"="30.292,32.844"]
"hunkim/PyTorchZeroToAll" ["l"="23.912,30.925"]
"pytorch/tutorials" ["l"="33.892,35.575"]
"vlgiitr/papers_we_read" ["l"="29.199,32.836"]
"vlgiitr/DL_Topics" ["l"="29.208,32.8"]
"mrgloom/Network-Speed-and-Compression" ["l"="30.798,35.555"]
"kweonwooj/papers" ["l"="29.841,32.371"]
"yassouali/deeplearning.ai_notes" ["l"="29.224,32.739"]
"fregu856/papers" ["l"="23.998,34.528"]
"harvardnlp/sent-conv-torch" ["l"="27.032,34.377"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="31.626,31.509"]
"yoonkim/lstm-char-cnn" ["l"="27.06,34.351"]
"zhangxiangxiao/Crepe" ["l"="27.061,34.304"]
"klb3713/sentence2vec" ["l"="30.071,32.829"]
"aws-samples/aws-machine-learning-university-accelerated-cv" ["l"="29.329,32.542"]
"aws-samples/aws-machine-learning-university-accelerated-tab" ["l"="29.309,32.56"]
"aws-samples/aws-machine-learning-university-accelerated-nlp" ["l"="29.385,32.549"]
"aws-samples/aws-machine-learning-university-dte" ["l"="29.294,32.544"]
"Palashio/libra" ["l"="29.44,32.539"]
"lidian007/EmotiW2016" ["l"="29.088,33.041"]
"xujinchang/EmotiW-2017-Audio-video-Emotion-Recognition" ["l"="29.095,33.061"]
"ebadawy/EmotiW2017" ["l"="29.107,33.048"]
"erinhp/SSE" ["l"="29.068,33.06"]
"bknyaz/emotiw" ["l"="29.101,33.029"]
"zeroQiaoba/EmotiW2018" ["l"="29.112,33.002"]
"saebrahimi/Emotion-Recognition-RNN" ["l"="-0.659,40.26"]
"jalammar/jalammar.github.io" ["l"="29.639,32.626"]
"kaushaltrivedi/bert-toxic-comments-multilabel" ["l"="32.054,29.934"]
"google-research/bigbird" ["l"="29.745,32.375"]
"facebookresearch/DPR" ["l"="25.787,29.223"]
"facebookresearch/SpanBERT" ["l"="29.738,32.534"]
"allenai/dont-stop-pretraining" ["l"="32.192,30.41"]
"microsoft/DeBERTa" ["l"="29.741,32.404"]
"lucidrains/performer-pytorch" ["l"="29.588,30.744"]
"idiap/fast-transformers" ["l"="29.608,30.76"]
"lucidrains/linear-attention-transformer" ["l"="29.568,30.749"]
"facebookresearch/adaptive-span" ["l"="29.812,32.395"]
"tatp22/linformer-pytorch" ["l"="29.553,30.74"]
"lucidrains/x-transformers" ["l"="27.599,30.992"]
"Smerity/sha-rnn" ["l"="29.836,32.436"]
"lucidrains/routing-transformer" ["l"="29.528,30.729"]
"openai/sparse_attention" ["l"="29.853,32.415"]
"mit-han-lab/lite-transformer" ["l"="29.572,30.799"]
"tecoholic/ner-annotator" ["l"="29.353,32.584"]
"ManivannanMurugavel/spacy-ner-annotator" ["l"="29.141,32.58"]
"amrrs/custom-ner-with-spacy3" ["l"="29.303,32.593"]
"ieriii/spacy-annotator" ["l"="29.219,32.585"]
"kevinlu1248/pyate" ["l"="29.821,29.24"]
"doccano/doccano-transformer" ["l"="29.244,32.573"]
"Liquid-Legal-Institute/Legal-Text-Analytics" ["l"="29.665,29.214"]
"hb20007/hands-on-nltk-tutorial" ["l"="29.731,32.741"]
"NirantK/nlp-python-deep-learning" ["l"="29.675,32.745"]
"NirantK/NLP_Quickbook" ["l"="33.398,28.761"]
"costezki/awesome-nlprojects" ["l"="29.667,32.783"]
"jmugan/modern_practical_nlp" ["l"="23.815,30.33"]
"guillaumekln/faster-whisper" ["l"="26.993,31.438"]
"OpenNMT/Tokenizer" ["l"="29.832,32.248"]
"linzehui/mRASP" ["l"="27.914,33.998"]
"Helsinki-NLP/OpusFilter" ["l"="29.858,32.265"]
"Tencent/TurboTransformers" ["l"="32.129,30.357"]
"bytedance/effective_transformer" ["l"="32.101,30.415"]
"Helsinki-NLP/Opus-MT" ["l"="29.785,32.324"]
"thammegowda/mtdata" ["l"="29.875,32.29"]
"Helsinki-NLP/OPUS-MT-train" ["l"="29.804,32.28"]
"facebookresearch/flores" ["l"="29.852,32.331"]
"brightmart/roberta_zh" ["l"="32.153,30.243"]
"commonsense/conceptnet5" ["l"="30.079,32.668"]
"commonsense/conceptnet-numberbatch" ["l"="30.097,32.652"]
"atcbosselut/comet-commonsense" ["l"="29.953,31.443"]
"thunlp/OpenKE" ["l"="23.042,38.437"]
"commonsense/conceptnet" ["l"="30.19,32.705"]
"facebookresearch/LAMA" ["l"="25.718,29.252"]
"INK-USC/KagNet" ["l"="30.011,31.498"]
"thunlp/KB2E" ["l"="23.065,38.415"]
"h1st-ai/h1st" ["l"="25.646,36.904"]
"KartikChugh/Otto" ["l"="-9.335,-18.67"]
"unsplash/datasets" ["l"="26.316,-25.826"]
"arkadiyt/bounty-targets-data" ["l"="-8.871,-46.304"]
"maiot-io/zenml" ["l"="25.452,34.149"]
"rocketseat-education/bootcamp-gostack-desafios" ["l"="13.229,-43.621"]
"naiveHobo/InvoiceNet" ["l"="29.832,34.242"]
"Separius/awesome-sentence-embedding" ["l"="29.891,32.614"]
"yandexdataschool/Practical_RL" ["l"="25.014,36.035"]
"yandexdataschool/Practical_DL" ["l"="-9.271,20.171"]
"dair-ai/nlp_fundamentals" ["l"="29.56,32.61"]
"dair-ai/nlp_newsletter" ["l"="29.603,32.593"]
"dair-ai/pytorch_notebooks" ["l"="29.564,32.626"]
"dair-ai/d2l-study-group" ["l"="29.582,32.617"]
"dair-ai/ml-nlp-paper-discussions" ["l"="29.578,32.598"]
"t-makaro/animatplot" ["l"="29.717,32.637"]
"IndicoDataSolutions/finetune" ["l"="29.777,32.571"]
"Jiakui/awesome-bert" ["l"="32.129,30.114"]
"airaria/TextBrewer" ["l"="32.177,30.287"]
"huawei-noah/Pretrained-Language-Model" ["l"="32.138,30.302"]
"bamtercelboo/pytorch_word2vec" ["l"="30.398,32.995"]
"Adoni/word2vec_pytorch" ["l"="30.374,32.98"]
"lonePatient/chinese-word2vec-pytorch" ["l"="30.438,33.015"]
"cookielee77/DAST" ["l"="29.814,32.138"]
"martiansideofthemoon/style-transfer-paraphrase" ["l"="29.718,32.204"]
"zhijing-jin/IMaT" ["l"="29.784,32.135"]
"dixonzhao/Java_Study_Zhao" ["l"="8.781,17.099"]
"VideoOS/VideoOS-iOS-SDK" ["l"="8.794,17.052"]
"ljphilp/vue-element-super" ["l"="29.824,32.061"]
"xksoft/xky" ["l"="8.767,17.107"]
"airuikun/crawler" ["l"="8.809,17.052"]
"geduo83/FlyRefreshLayout" ["l"="8.774,17.089"]
"cindyxinyiwang/deep-latent-sequence-model" ["l"="29.77,32.152"]
"luofuli/Fine-grained-Sentiment-Transfer" ["l"="29.837,32.094"]
"entanmo/etm" ["l"="8.789,17.1"]
"baidu/AnyQ" ["l"="32.03,30.155"]
"baidu/DuReader" ["l"="25.966,30.173"]
"Conchylicultor/DeepQA" ["l"="30.465,28.154"]
"antonydeepak/ResumeParser" ["l"="28.638,32.541"]
"Satrat/Resume-Parser" ["l"="28.672,32.543"]
"ashaywalke/resume-parser" ["l"="28.614,32.572"]
"binoydutt/Resume-Job-Description-Matching" ["l"="28.614,32.551"]
"explosion/spacy-models" ["l"="29.697,32.715"]
"plasticityai/magnitude" ["l"="29.801,32.611"]
"chakki-works/doccano" ["l"="29.837,32.621"]
"ThoughtRiver/lmdb-embeddings" ["l"="28.596,30.637"]
"bheinzerling/bpemb" ["l"="29.917,32.47"]
"NingMiao/CGMH" ["l"="29.968,32.078"]
"dreasysnail/POINTER" ["l"="29.919,32.072"]
"Toni-Antonova/VAE-Text-Generation" ["l"="30.014,32"]
"NicGian/text_VAE" ["l"="29.991,32.056"]
"songyouwei/ABSA-PyTorch" ["l"="29.089,31.17"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="31.597,31.498"]
"bfelbo/DeepMoji" ["l"="30.018,32.593"]
"NVIDIA/sentiment-discovery" ["l"="30.043,32.522"]
"graykode/ALBERT-Pytorch" ["l"="44.536,-15.009"]
"huggingface/100-times-faster-nlp" ["l"="30.2,32.602"]
"kelvinguu/neural-editor" ["l"="29.972,32.164"]
"jiacheng-xu/vmf_vae_nlp" ["l"="25.154,32.586"]
"snakeztc/NeuralDialog-CVAE" ["l"="28.169,29.062"]
"harvardnlp/neural-template-gen" ["l"="28.496,29.095"]
"Chung-I/Variational-Recurrent-Autoencoder-Tensorflow" ["l"="29.933,32.116"]
"hans/glove.py" ["l"="30.224,32.856"]
"IndicoDataSolutions/Passage" ["l"="27.056,34.185"]
"GradySimon/tensorflow-glove" ["l"="30.209,32.836"]
"codekansas/keras-language-modeling" ["l"="31.25,31.575"]
"stanfordnlp/treelstm" ["l"="27.078,34.366"]
"kefirski/pytorch_RVAE" ["l"="29.887,32.154"]
"jxhe/vae-lagging-encoder" ["l"="25.139,32.6"]
"ChunyuanLI/Optimus" ["l"="29.868,32.166"]
"rohithreddy024/VAE-Text-Generation" ["l"="29.994,32.093"]
"sodawater/T-CVAE" ["l"="28.061,29.053"]
"snakeztc/NeuralDialog-LAED" ["l"="28.187,29.059"]
"kengz/aiva" ["l"="29.753,33.064"]
"kengz/CGKB" ["l"="29.734,33.111"]
"kengz/spacy-nlp" ["l"="29.715,33.134"]
"explosion/spacy-services" ["l"="29.656,33.051"]
"spacy-io/spaCy" ["l"="29.846,32.909"]
"patrickjquinn/P-Brain.ai" ["l"="29.761,33.151"]
"macournoyer/neuralconvo" ["l"="27.042,34.336"]
"golastmile/rasa_nlu" ["l"="31.233,27.598"]
"explosion/displacy" ["l"="29.683,33.08"]
"ritwik12/Virtual-Assistant" ["l"="29.766,33.111"]
"ofirnachum/sequence_gan" ["l"="30.015,32.176"]
"CR-Gjx/LeakGAN" ["l"="30.003,32.198"]
"igul222/improved_wgan_training" ["l"="33.69,32.656"]
"wiseodd/generative-models" ["l"="33.742,32.685"]
"martinarjovsky/WassersteinGAN" ["l"="33.712,32.647"]
"geek-ai/irgan" ["l"="22.851,37.13"]
"openai/improved-gan" ["l"="33.713,32.627"]
"brmson/dataset-sts" ["l"="29.983,32.715"]
"google-research/ALBERT" ["l"="29.821,32.46"]
"ymcui/Chinese-PreTrained-XLNet" ["l"="32.158,30.183"]
"CLUEbenchmark/CLUE" ["l"="32.122,30.268"]
"ymcui/Chinese-ELECTRA" ["l"="32.176,30.299"]
"lonePatient/albert_pytorch" ["l"="32.186,30.217"]
"kpe/bert-for-tf2" ["l"="32.185,30.136"]
"HazyResearch/snorkel" ["l"="29.899,32.65"]
"HazyResearch/deepdive" ["l"="29.956,32.803"]
"HazyResearch/metal" ["l"="29.97,32.455"]
"microsoft/interpret" ["l"="25.623,33.969"]
"Featuretools/featuretools" ["l"="25.564,33.851"]
"TeamHG-Memex/eli5" ["l"="25.599,33.883"]
"airalcorn2/Deep-Semantic-Similarity-Model" ["l"="22.777,37.258"]
"dhwajraj/deep-siamese-text-similarity" ["l"="25.652,30.228"]
"zhiguowang/BiMPM" ["l"="25.787,30.213"]
"shuzi/insuranceQA" ["l"="30.595,28.102"]
"alvations/stasis" ["l"="30.027,32.807"]
"aditya1503/Siamese-LSTM" ["l"="25.659,30.207"]
"mfaruqui/retrofitting" ["l"="30.638,33.677"]
"taolei87/rcnn" ["l"="27.12,34.513"]
"aseveryn/deep-qa" ["l"="26.325,29.676"]
"GauravBh1010tt/DeepLearn" ["l"="30.03,32.614"]
"jerryli27/TwinGAN" ["l"="34.141,30.233"]
"Prodicode/ann-visualizer" ["l"="25.713,33.811"]
"Ahmkel/Keras-Project-Template" ["l"="33.923,35.829"]
"eBay/Sequence-Semantic-Embedding" ["l"="30.123,32.678"]
"ilkarman/DeepLearningFrameworks" ["l"="34.162,35.256"]
"Mrgemy95/Tensorflow-Project-Template" ["l"="30.238,32.611"]
"ChenChengKuan/awesome-text-generation" ["l"="29.947,32.222"]
"benkrause/dynamic-evaluation" ["l"="30.176,32.412"]
"zihangdai/mos" ["l"="30.109,32.441"]
"lukalabs/cakechat" ["l"="28.287,28.972"]
"uclmr/emoji2vec" ["l"="30.189,32.635"]
"atpaino/deep-text-corrector" ["l"="31.47,28.471"]
"astorfi/Deep-Learning-NLP" ["l"="29.73,32.784"]
"stepthom/text_mining_resources" ["l"="29.694,32.768"]
"endymecy/awesome-deeplearning-resources" ["l"="23.417,30.95"]
"shashankg7/Deep-Learning-for-NLP-Resources" ["l"="30.075,32.805"]
"ElizaLo/NLP-Natural-Language-Processing" ["l"="33.399,28.741"]
"lgalke/vec4ir" ["l"="30.257,32.711"]
"eladhoffer/captionGen" ["l"="31.297,34.42"]
"kimhc6028/relational-networks" ["l"="31.732,34.429"]
"LiyuanLucasLiu/LM-LSTM-CRF" ["l"="32.309,29.985"]
"jakezhaojb/ARAE" ["l"="29.964,32.185"]
"facebookresearch/end-to-end-negotiator" ["l"="30.154,32.603"]
"facebookresearch/CommAI-env" ["l"="27.161,34.416"]
"facebook/bAbI-tasks" ["l"="27.153,34.348"]
"snakeztc/NeuralDialogPapers" ["l"="28.207,29.01"]
"stanfordnlp/cocoa" ["l"="28.278,29.005"]
"MiuLab/TC-Bot" ["l"="28.192,28.988"]
"facebookresearch/clevr-iep" ["l"="31.613,34.404"]
"amirbar/rnn.wgan" ["l"="30.007,32.155"]
"GBLin5566/toward-controlled-generation-of-text-pytorch" ["l"="29.935,32.146"]
"zhengliz/natural-adversary" ["l"="21.578,14.087"]
"guxd/DialogWAE" ["l"="28.162,29.089"]
"harvardnlp/sa-vae" ["l"="25.166,32.57"]
"harvardnlp/var-attn" ["l"="28.121,33.81"]
"ryankiros/neural-storyteller" ["l"="33.522,32.377"]
"deepmind/rc-data" ["l"="27.103,34.315"]
"paarthneekhara/text-to-image" ["l"="33.639,32.536"]
"yikangshen/Ordered-Neurons" ["l"="27.613,32.842"]
"keonkim/awesome-nlp" ["l"="30.04,32.835"]
"LeavesBreathe/tensorflow_with_latest_papers" ["l"="27.084,34.3"]
"joanbruna/stat212b" ["l"="27.139,34.224"]
"zer0n/deepframeworks" ["l"="27.115,34.137"]
"Newmu/Theano-Tutorials" ["l"="27.093,34.125"]
"karthikncode/nlp-datasets" ["l"="28.166,29.027"]
"saiprashanths/dl-setup" ["l"="27.155,34.135"]
"koursaros-ai/nboost" ["l"="29.658,32.611"]
"gnes-ai/gnes" ["l"="29.747,32.605"]
"md-experiments/elastic_transformers" ["l"="29.6,32.655"]
"lior-k/fast-elasticsearch-vector-scoring" ["l"="-7.101,3.664"]
"alexklibisz/elastiknn" ["l"="-7.078,3.636"]
"o19s/elasticsearch-learning-to-rank" ["l"="-7.032,3.648"]
"castorini/anserini" ["l"="25.816,29.155"]
"oborchers/Fast_Sentence_Embeddings" ["l"="29.697,32.606"]
"kamalkraj/BERT-NER" ["l"="32.336,30.047"]
"thunlp/OpenMatch" ["l"="25.861,29.145"]
"opendistro-for-elasticsearch/k-NN" ["l"="-7.165,3.645"]
"sebastianarnold/WikiSection" ["l"="28.917,32.323"]
"sebastianarnold/SECTOR" ["l"="28.933,32.336"]
"lovit/soynlp" ["l"="44.481,-15.008"]
"SKTBrain/KoBERT" ["l"="44.503,-15.041"]
"monologg/KoELECTRA" ["l"="44.459,-15.067"]
"dav/word2vec" ["l"="30.151,32.767"]
"tmikolov/word2vec" ["l"="30.161,32.731"]
"jdeng/word2vec" ["l"="26.78,34.029"]
"chrisjmccormick/word2vec_commented" ["l"="30.197,32.795"]
"guestwalk/libffm" ["l"="22.791,37.311"]
"guestwalk/kaggle-2014-criteo" ["l"="22.754,37.307"]
"phanein/deepwalk" ["l"="21.769,38.732"]
"srendle/libfm" ["l"="22.829,37.265"]
"jiesutd/NCRFpp" ["l"="32.281,30.019"]
"Morizeyao/Decoders-Chinese-TF2.0" ["l"="32.079,30.423"]
"akanyaani/gpt-2-tensorflow2.0" ["l"="30.159,32.206"]
"prakhar21/TextAugmentation-GPT2" ["l"="30.216,32.179"]
"shawwn/gpt-2" ["l"="30.15,32.228"]
"rish-16/sight" ["l"="30.252,32.156"]
"dsgiitr/VisualML" ["l"="29.113,32.848"]
"dsgiitr/reading-group" ["l"="29.136,32.841"]
"dsgiitr/adversarial_lab" ["l"="29.132,32.859"]
"sahilg06/Global-Wheat-Detection-2021" ["l"="29.116,32.834"]
"dsgiitr/ML-InterviewQs" ["l"="29.105,32.862"]
"dsgiitr/BOSCH-MODEL-EXTRACTION-ATTACK-FOR-VIDEO-CLASSIFICATION" ["l"="29.12,32.86"]
"nyu-dl/dl4marco-bert" ["l"="25.857,29.12"]
"jina-ai/examples" ["l"="34.027,28.806"]
"ULTR-Community/ULTRA" ["l"="26.186,29.746"]
"PolyAI-LDN/polyai-models" ["l"="28.154,28.869"]
"castorini/pyserini" ["l"="25.815,29.189"]
"facebookresearch/BLINK" ["l"="25.666,29.238"]
"peter3125/sentence2vec" ["l"="30.01,32.792"]
"jx00109/sentence2vec" ["l"="29.988,32.793"]
"UKPLab/arxiv2018-xling-sentence-embeddings" ["l"="29.99,32.811"]
"NTMC-Community/MatchZoo" ["l"="32.113,30.149"]
"llhthinker/NLP-Papers" ["l"="29.809,32.712"]
"llhthinker/BDCI2017-MingLue" ["l"="21.538,36.996"]
"madrugado/deep-learning-nlp-rl-papers" ["l"="31.452,-20.553"]
"pemistahl/lingua-py" ["l"="29.473,32.541"]
"scrapinghub/dateparser" ["l"="16.369,5.741"]
"miso-belica/jusText" ["l"="20.119,2.512"]
"life4/textdistance" ["l"="29.533,32.602"]
"summanlp/textrank" ["l"="28.455,33.581"]
"jfilter/clean-text" ["l"="29.556,32.554"]
"nipunsadvilkar/pySBD" ["l"="29.825,29.211"]
"PrithivirajDamodaran/Styleformer" ["l"="29.607,32.334"]
"ICLRandD/Blackstone" ["l"="29.722,29.207"]
"Unbabel/COMET" ["l"="29.852,32.274"]
"neulab/BARTScore" ["l"="28.34,33.795"]
"AIPHES/emnlp19-moverscore" ["l"="29.826,32.366"]
"Yale-LILY/SummEval" ["l"="28.335,33.758"]
"google-research/lasertagger" ["l"="31.573,28.637"]
"facebookresearch/unlikelihood_training" ["l"="29.729,32.288"]
"salesforce/simpletod" ["l"="28.187,28.894"]
"neulab/compare-mt" ["l"="29.879,32.33"]
"cisnlp/simalign" ["l"="29.841,32.312"]
"optimaize/language-detector" ["l"="29.615,32.613"]
"facebookresearch/cc_net" ["l"="29.814,32.348"]
"scrapinghub/python-cld2" ["l"="29.706,32.568"]
"GregBowyer/cld2-cffi" ["l"="29.695,32.571"]
"nyu-dl/dl4mt-tutorial" ["l"="30.027,32.338"]
"rsennrich/wmt16-scripts" ["l"="30.011,32.316"]
"jonsafari/nmt-list" ["l"="30.007,32.335"]
"ufal/neuralmonkey" ["l"="30.042,32.352"]
"neubig/nmt-tips" ["l"="30.02,32.324"]
"lvapeab/nmt-keras" ["l"="31.293,31.56"]
"lmthang/nmt.hybrid" ["l"="30.083,32.316"]
"moses-smt/giza-pp" ["l"="29.944,32.293"]
"ChenWu98/Point-Then-Operate" ["l"="29.788,32.126"]
"UKPLab/deeplearning4nlp-tutorial" ["l"="30.176,32.755"]
"neubig/nn4nlp2017-code" ["l"="30.208,32.678"]
"attardi/deepnl" ["l"="25.536,30.834"]
"UKPLab/emnlp2017-relation-extraction" ["l"="30.762,30.92"]
"UKPLab/elmo-bilstm-cnn-crf" ["l"="32.299,29.898"]
"davidsbatista/Annotated-Semantic-Relationships-Datasets" ["l"="30.744,30.946"]
"hadyelsahar/CNN-RelationExtraction" ["l"="30.78,30.896"]
"lipiji/App-DL" ["l"="28.426,33.604"]
"thunlp/NRE" ["l"="30.774,30.937"]
"roomylee/cnn-relation-extraction" ["l"="30.751,30.905"]
"snipsco/snips-nlu" ["l"="30.275,28.005"]
"artetxem/vecmap" ["l"="29.901,32.374"]
"Unstructured-IO/unstructured" ["l"="27.216,31.309"]
"explosion/spacy-course" ["l"="23.734,30.1"]
"infinitylogesh/mutate" ["l"="29.401,32.357"]
"koaning/embetter" ["l"="25.761,34.167"]
"explosion/prodigy-openai-recipes" ["l"="29.314,32.445"]
"koaning/bulk" ["l"="25.817,34.189"]
"embeddings-benchmark/mteb" ["l"="25.906,29.216"]
"edobashira/speech-language-processing" ["l"="30.004,32.844"]
"zzw922cn/awesome-speech-recognition-speech-synthesis-papers" ["l"="0.558,39.908"]
"theimpossibleastronaut/awesome-linguistics" ["l"="27.196,-19.433"]
"srvk/eesen" ["l"="0.624,39.83"]
"pkmital/tensorflow_tutorials" ["l"="23.413,31.127"]
"pykaldi/pykaldi" ["l"="0.566,39.849"]
"rushter/data-science-blogs" ["l"="23.38,30.705"]
"hangtwenty/dive-into-machine-learning" ["l"="23.377,30.853"]
"explosion/displacy-ent" ["l"="29.655,33.085"]
"explosion/spacy-dev-resources" ["l"="29.648,33.026"]
"JieyuZ2/Awesome-Weak-Supervision" ["l"="29.238,32.466"]
"JieyuZ2/wrench" ["l"="29.187,32.466"]
"indicnlpweb/indicnlp_catalog" ["l"="29.533,32.132"]
"ai4bharat-indicnlp/indicnlp_corpus" ["l"="29.524,32.079"]
"Lynten/stanford-corenlp" ["l"="29.809,32.755"]
"stanfordnlp/python-stanford-corenlp" ["l"="29.774,32.804"]
"hankcs/pyhanlp" ["l"="31.992,30.205"]
"smilli/py-corenlp" ["l"="29.828,32.882"]
"thunlp/THULAC-Python" ["l"="31.943,30.132"]
"pltrdy/rouge" ["l"="28.379,33.646"]
"FudanNLP/fnlp" ["l"="31.951,30.151"]
"fastnlp/fastNLP" ["l"="32.06,30.223"]
"buriburisuri/speech-to-text-wavenet" ["l"="0.681,40.05"]
"junyanz/iGAN" ["l"="33.656,32.568"]
"MrNothing/AI-Blocks" ["l"="0.755,40.138"]
"lisa-groundhog/GroundHog" ["l"="27.056,34.251"]
"UKPLab/emnlp2017-bilstm-cnn-crf" ["l"="32.265,29.967"]
"NLPLearn/QANet" ["l"="25.928,30.173"]
"google/sling" ["l"="30.007,32.622"]
"percyliang/sempre" ["l"="30.183,31.6"]
"Franck-Dernoncourt/NeuroNER" ["l"="32.267,29.985"]
"baidu/Familia" ["l"="31.975,30.129"]
"ShannonAI/CorefQA" ["l"="29.624,32.704"]
"ontonotes/conll-formatted-ontonotes-5.0" ["l"="29.655,32.649"]
"lxucs/coref-hoi" ["l"="29.619,32.718"]
"kkjawz/coref-ee" ["l"="29.63,32.723"]
"conll/reference-coreference-scorers" ["l"="29.614,32.745"]
"google-research-datasets/gap-coreference" ["l"="29.642,32.73"]
"YangXuanyue/pytorch-e2e-coref" ["l"="29.624,32.738"]
"swiseman/nn_coref" ["l"="29.654,32.739"]
"cheniison/e2e-coref-pytorch" ["l"="29.616,32.758"]
"dasmith/stanford-corenlp-python" ["l"="29.908,32.954"]
"hhsecond/corenlp_pywrap" ["l"="29.813,32.931"]
"brendano/stanford_corenlp_pywrapper" ["l"="29.845,32.963"]
"smartschat/cort" ["l"="25.38,30.941"]
"interrogator/corpkit" ["l"="32.61,29.453"]
"artetxem/monoses" ["l"="29.964,32.357"]
"marian-nmt/marian-dev" ["l"="29.966,32.287"]
"bitextor/bitextor" ["l"="29.903,32.284"]
"marian-nmt/marian-examples" ["l"="29.96,32.321"]
"yistLin/pytorch-dual-learning" ["l"="30.252,32.295"]
"pcyin/pytorch_nmt" ["l"="30.325,32.279"]
"thompsonb/DL4MT" ["l"="30.303,32.286"]
"0uO/Dual-learning" ["l"="30.285,32.292"]
"guillitte/pytorch-sentiment-neuron" ["l"="30.184,32.558"]
"openai/evolution-strategies-starter" ["l"="24.657,38.361"]
"Tixierae/deep_learning_NLP" ["l"="31.454,31.492"]
"eric-mitchell/detect-gpt" ["l"="30.146,32.12"]
"BurhanUlTayyab/DetectGPT" ["l"="30.225,32.049"]
"miohtama/python-Levenshtein" ["l"="29.424,32.754"]
"jamesturk/jellyfish" ["l"="29.531,32.711"]
"aflc/editdistance" ["l"="29.378,32.793"]
"WojciechMula/pyahocorasick" ["l"="10.92,27.101"]
"roy-ht/editdistance" ["l"="-24.866,23.117"]
"mammothb/symspellpy" ["l"="31.554,28.465"]
"aneesha/RAKE" ["l"="28.536,33.54"]
"doukremt/distance" ["l"="29.4,32.758"]
"seperman/deepdiff" ["l"="22.96,3.773"]
"neuml/paperai" ["l"="29.445,32.419"]
"adsieg/Multi_Text_Classification" ["l"="29.662,32.867"]
"TharinduDR/Simple-Sentence-Similarity" ["l"="29.658,32.913"]
"AndriyMulyar/semantic-text-similarity" ["l"="31.735,31.583"]
"amansrivastava17/lstm-siamese-text-similarity" ["l"="25.62,30.24"]
"mankadronit/Automated-Essay--Scoring" ["l"="25.565,-0.723"]
"VKCOM/YouTokenToMe" ["l"="29.884,32.413"]
"salesforce/cove" ["l"="25.909,30.213"]
"jiesutd/YEDDA" ["l"="32.284,30.066"]
"nlplab/brat" ["l"="32.295,30.034"]
"deepwel/Chinese-Annotator" ["l"="32.264,30.113"]
"ncbi-nlp/BioSentVec" ["l"="29.008,30.598"]
"jhlau/doc2vec" ["l"="30.069,32.785"]
"allenai/scibert" ["l"="28.858,30.596"]
"google-research/xtreme" ["l"="29.785,32.351"]
"facebookresearch/SentAugment" ["l"="29.635,32.392"]
"google-research-datasets/paws" ["l"="29.737,32.263"]
"facebookresearch/Mask-Predict" ["l"="28.037,33.897"]
"allenai/natural-instructions" ["l"="27.575,31.265"]
"facebookresearch/MLQA" ["l"="29.776,32.278"]
"hal3/ciml" ["l"="29.936,32.688"]
"rasbt/deep-learning-book" ["l"="23.42,30.892"]
"dmlc/mxnet-notebooks" ["l"="33.104,35.748"]
"mavam/stat-cookbook" ["l"="23.377,30.68"]
"jxieeducation/DIY-Data-Science" ["l"="27.2,34.256"]
"ben519/MLPB" ["l"="20.12,43.613"]
"neulab/nn4nlp-concepts" ["l"="29.782,32.542"]
"markdregan/Bayesian-Modelling-in-Python" ["l"="23.811,33.894"]
"data-8/textbook" ["l"="26.856,-24.92"]
"hal3/vwnlp" ["l"="28.522,33.595"]
"fonnesbeck/Bios8366" ["l"="23.123,30.735"]
"imgarylai/bert-embedding" ["l"="29.974,32.738"]
"Kyubyong/bert-token-embeddings" ["l"="30.012,32.818"]
"szha/KDD18-Gluon" ["l"="33.195,35.744"]
"howardhsu/BERT-for-RRC-ABSA" ["l"="29.077,31.156"]
"brightmart/bert_language_understanding" ["l"="32.11,30.035"]
"J535D165/recordlinkage" ["l"="25.358,29.87"]
"datamade/parserator" ["l"="25.311,29.846"]
"datamade/probablepeople" ["l"="25.322,29.863"]
"datamade/usaddress" ["l"="25.296,29.871"]
"luozhouyang/python-string-similarity" ["l"="29.517,32.66"]
"gfairchild/pyxDamerauLevenshtein" ["l"="29.458,32.783"]
"psolin/cleanco" ["l"="29.425,32.785"]
"orsinium/textdistance" ["l"="28.634,-18.744"]
"microsoft/BlingFire" ["l"="29.739,32.218"]
"yanqiangmiffy/sentence-similarity" ["l"="32.244,30.065"]
"songyingxin/Bert-TextClassification" ["l"="32.133,30.076"]
"lopuhin/transformer-lm" ["l"="30.157,32.244"]
"jcpeterson/openwebtext" ["l"="29.964,32.308"]
"HendrikStrobelt/detecting-fake-text" ["l"="30.039,32.245"]
"XiangLi1999/Diffusion-LM" ["l"="27.674,31.358"]
"XiangLi1999/PrefixTuning" ["l"="27.663,31.297"]
"yxuansu/SimCTG" ["l"="27.658,31.34"]
"salesforce/GeDi" ["l"="30.067,32.062"]
"rikdz/GraphWriter" ["l"="29.897,32.049"]
"minimaxir/gpt-2-keyword-generation" ["l"="30.079,32.203"]
"nickwalton/AIDungeon" ["l"="30.21,32.002"]
"minimaxir/ctrl-gce" ["l"="30.162,32.078"]
"minimaxir/twitter-cloud-run" ["l"="30.205,32.204"]
"kylemcdonald/gpt-2-poetry" ["l"="30.168,32.167"]
"jingw222/gpt2-app" ["l"="30.141,32.19"]
"t04glovern/gpt-2-flask-api" ["l"="30.159,32.185"]
"bhattbhavesh91/gpt-3-simple-tutorial" ["l"="30.299,32.314"]
"mrdbourke/machine-learning-roadmap" ["l"="23.589,30.592"]
"surya-veer/movement-tracking" ["l"="20.388,27.105"]
"bkane1/gpt3-instruct-sandbox" ["l"="30.337,32.313"]
"kingoflolz/mesh-transformer-jax" ["l"="27.476,30.956"]
"apache/opennlp" ["l"="29.873,32.951"]
"apache/tika" ["l"="11.098,23.588"]
"mimno/Mallet" ["l"="29.867,32.865"]
"dkpro/dkpro-core" ["l"="30.328,31.646"]
"dbpedia/extraction-framework" ["l"="25.529,30.94"]
"apache/jena" ["l"="26.865,29.293"]
"apache/mahout" ["l"="11.185,23.74"]
"apache/giraph" ["l"="10.429,26.569"]
"apache/lucene-solr" ["l"="11.122,23.653"]
"deeplearning4j/dl4j-examples" ["l"="8.582,21.514"]
"apache/nutch" ["l"="9.856,21.646"]
"NLPchina/Word2VEC_java" ["l"="31.772,30.236"]
"apache/drill" ["l"="11.365,23.798"]
"BurhanUlTayyab/GPTZero" ["l"="30.26,32.019"]
"eukaryote31/openwebtext" ["l"="29.999,32.257"]
"affjljoo3581/GPT2" ["l"="30.141,32.162"]
"graykode/xlnet-Pytorch" ["l"="29.883,32.393"]
"brandomr/document_cluster" ["l"="29.536,33.02"]
"utkuozbulak/unsupervised-learning-document-clustering" ["l"="29.524,33.06"]
"arnab64/textclusteringDBSCAN" ["l"="29.454,33.161"]
"olafmaas/hackdelft" ["l"="29.499,33.055"]
"jseabold/depy" ["l"="21.69,28.5"]
"jayantj/w2vec-similarity" ["l"="29.512,33.039"]
"KaiDMML/FakeNewsNet" ["l"="30.79,33.311"]
"entitize/Fakeddit" ["l"="30.768,33.321"]
"nelson-liu/contextual-repr-analysis" ["l"="29.789,32.309"]
"sumeetkr/AwesomeFakeNews" ["l"="30.807,33.305"]
"maraoz/gpt-scrolls" ["l"="30.344,32.23"]
"sevazhidkov/prompts-ai" ["l"="30.305,32.236"]
"sw-yx/gpt3-list" ["l"="30.317,32.256"]
"minimaxir/gpt-3-client" ["l"="30.301,32.205"]
"semiosis/prompts" ["l"="30.329,32.215"]
"minimaxir/download-tweets-ai-text-gen" ["l"="30.233,32.215"]
"belay-labs/gpt-explorer" ["l"="30.327,32.185"]
"vdaas/vald" ["l"="28.594,31.387"]
"vespa-engine/vespa" ["l"="28.444,31.422"]
"axa-group/Parsr" ["l"="29.497,32.484"]
"frutik/awesome-search" ["l"="-6.99,3.665"]
"semiosis/pen.el" ["l"="-8.135,-22.116"]
"socketteer/loom" ["l"="27.409,31.472"]
"krrishdholakia/betterprompt" ["l"="27.318,31.348"]
"giosilvi/GPT-Prompter" ["l"="26.924,31.18"]
"oughtinc/ice" ["l"="27.344,31.38"]
"OpenBioLink/ThoughtSource" ["l"="27.413,31.312"]
"LinyangLee/BERT-Attack" ["l"="29.515,32.273"]
"nesl/nlp_adversarial_examples" ["l"="29.564,32.253"]
"JHL-HUST/PWWS" ["l"="29.543,32.258"]
"zhuchen03/FreeLB" ["l"="29.483,32.256"]
"thunlp/SememePSO-Attack" ["l"="29.529,32.249"]
"Eric-Wallace/universal-triggers" ["l"="29.543,32.274"]
"robinjia/certified-word-sub" ["l"="29.515,32.249"]
"miyyer/scpn" ["l"="29.658,32.196"]
"marcotcr/sears" ["l"="29.58,32.226"]
"nmrksic/counter-fitting" ["l"="30.63,33.657"]
"deepmind/interval-bound-propagation" ["l"="28.032,33.051"]
"lushleaf/Structure-free-certified-NLP" ["l"="29.531,32.264"]
"upmasked/number-verifier" ["l"="30.458,32.149"]
"Nick-Gottschlich/Social-Amnesia" ["l"="-31.863,-20.945"]
"luspr/awesome-ml-courses" ["l"="23.804,30.621"]
"transitive-bullshit/sms-number-verifier" ["l"="-6.739,-46.732"]
"LetsUpgrade/AI-ML-July-2020" ["l"="23.879,-26.218"]
"NerdyPepper/dijo" ["l"="-12.096,-18.198"]
"covidgreen/covid-green-app" ["l"="44.729,-27.828"]
"vector-im/riotX-android" ["l"="-25.437,-22.247"]
"TheFrenchGhosty/TheFrenchGhostys-YouTube-DL-Archivist-Scripts" ["l"="-31.748,-20.769"]
"pedrolemoz/MagicMagnet-Python" ["l"="23.9,-26.285"]
"japerk/nltk-trainer" ["l"="20.051,2.677"]
"Wordseer/stanford-corenlp-python" ["l"="29.917,33.008"]
"brendano/ark-tweet-nlp" ["l"="25.696,30.857"]
"erickrf/nlpnet" ["l"="10.125,-44.669"]
"machinalis/iepy" ["l"="27.236,34.057"]
"relwell/stanford-corenlp-python" ["l"="29.9,33"]
"knowitall/reverb" ["l"="25.56,30.976"]
"turian/neural-language-model" ["l"="26.855,34.176"]
"knowitall/openie" ["l"="25.573,30.963"]
"biplab-iitb/practNLPTools" ["l"="10.102,-44.692"]
"Xirider/finetune-gpt2xl" ["l"="29.161,37.701"]
"EleutherAI/gpt-neox" ["l"="27.429,31.007"]
"adbar/trafilatura" ["l"="20.145,2.469"]
"R1j1t/contextualSpellCheck" ["l"="31.579,28.476"]
"adbar/simplemma" ["l"="31.708,28.271"]
"cpsievert/LDAvis" ["l"="19.76,42.402"]
"lda-project/lda" ["l"="29.66,32.803"]
"vi3k6i5/GuidedLDA" ["l"="29.595,32.733"]
"DistrictDataLabs/yellowbrick" ["l"="25.542,33.865"]
"bigartm/bigartm" ["l"="-9.366,20.349"]
"ines/course-starter-python" ["l"="19.904,43.41"]
"ines/course-starter-r" ["l"="20.011,43.426"]
"EricFillion/happy-transformer" ["l"="29.422,32.43"]
"asahi417/tner" ["l"="29.378,32.501"]
"neuspell/neuspell" ["l"="31.564,28.504"]
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" ["l"="31.536,28.594"]
"dipanjanS/hands-on-transfer-learning-with-python" ["l"="29.715,32.845"]
"tirthajyoti/Machine-Learning-with-Python" ["l"="23.443,30.577"]
"rasbt/python-machine-learning-book-2nd-edition" ["l"="23.543,30.81"]
"alicezheng/feature-engineering-book" ["l"="25.769,33.814"]
"rasbt/mlxtend" ["l"="25.552,33.832"]
"WillKoehrsen/Data-Analysis" ["l"="23.347,30.726"]
"TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials" ["l"="23.615,30.795"]
"justmarkham/scikit-learn-videos" ["l"="23.317,30.705"]
"SivilTaram/Persona-Dialogue-Generation" ["l"="28.24,29.093"]
"atselousov/transformer_chatbot" ["l"="28.245,29.072"]
"PolyAI-LDN/conversational-datasets" ["l"="28.225,28.937"]
"thu-coai/CDial-GPT" ["l"="32.154,30.389"]
"budzianowski/multiwoz" ["l"="28.177,28.935"]
"yangjianxin1/GPT2-chitchat" ["l"="32.093,30.387"]
"DeepPavlov/convai" ["l"="28.192,29.002"]
"sdelgadoc/download-tweets-ai-text-gen-plus" ["l"="30.267,32.187"]
"odashi/latexify_py" ["l"="29.681,32.411"]
"connorferster/handcalcs" ["l"="23.368,30.379"]
"vahidk/EffectivePyTorch" ["l"="34.17,35.752"]
"facebookresearch/hiplot" ["l"="25.512,33.989"]
"google/objax" ["l"="23.487,33.745"]
"google-research/arxiv-latex-cleaner" ["l"="27.669,30.103"]
"penrose/penrose" ["l"="-9.406,13.413"]
"digantamisra98/Mish" ["l"="34.474,35.703"]
"microsoft/hummingbird" ["l"="25.455,34.031"]
"emeryberger/scalene" ["l"="23.189,3.866"]
"garrettj403/SciencePlots" ["l"="23.284,30.448"]
"Layout-Parser/layout-parser" ["l"="29.757,34.212"]
"online-ml/river" ["l"="25.488,34.107"]
"deepchecks/deepchecks" ["l"="25.509,34.143"]
"NielsRogge/Transformers-Tutorials" ["l"="23.726,30.283"]
"Nixtla/statsforecast" ["l"="22.493,36.026"]
"orchest/orchest" ["l"="25.487,34.162"]
"holoviz/panel" ["l"="20.099,27.623"]
"ploomber/ploomber" ["l"="25.441,34.185"]
"nyu-dl/bert-gen" ["l"="29.96,32.262"]
"uwnlp/piqa" ["l"="26.017,30.318"]
"harvardnlp/data2text" ["l"="28.521,29.109"]
"momohuang/FlowQA" ["l"="26.063,30.247"]
"dmlc/ps-lite" ["l"="26.832,33.933"]
"wzhe06/Reco-papers" ["l"="22.754,37.13"]
"wzhe06/Ad-papers" ["l"="22.718,37.135"]
"aditya-grover/node2vec" ["l"="21.788,38.745"]
"ChenglongChen/tensorflow-DeepFM" ["l"="22.745,37.194"]
"zhougr1993/DeepInterestNetwork" ["l"="22.741,37.154"]
"alibaba/euler" ["l"="22.585,37.136"]
"MIND-Lab/OCTIS" ["l"="29.499,32.619"]
"NiuTrans/LanguageCodes" ["l"="29.644,32.29"]
"NiuTrans/NASPapers" ["l"="29.623,32.293"]
"SimmerChan/corpus" ["l"="32.268,30.29"]
"sunyilgdx/SIFRank_zh" ["l"="32.275,30.263"]
"thunlp/SOS4NLP" ["l"="44.464,-15.115"]
"KaiyuanGao/AI-Surveys" ["l"="24.069,30.72"]
"NiuTrans/MTVenues" ["l"="29.639,32.299"]
"xiaoqian19940510/text-classification-surveys" ["l"="21.802,27.348"]
"neuml/tldrstory" ["l"="29.39,32.392"]
"neuml/codequestion" ["l"="29.425,32.399"]
"neuml/paperetl" ["l"="29.357,32.386"]
"harvardnlp/namedtensor" ["l"="29.726,32.091"]
"ofnote/tsalib" ["l"="29.699,32.027"]
"harvardnlp/pytorch-struct" ["l"="29.82,32.33"]
"cocoxu/Shakespeare" ["l"="29.983,32.152"]
"harsh19/Shakespearizing-Modern-English" ["l"="29.951,32.125"]
"CSTR-Edinburgh/mlpractical" ["l"="29.414,32.578"]
"michael-camilleri/IAML2018" ["l"="29.331,32.596"]
"raharrasy/RL2019-BaseCodes" ["l"="29.377,32.591"]
"MirunaClinciu/DME" ["l"="29.389,32.595"]
"vsee/uoe_programmingclub" ["l"="29.347,32.606"]
"agamemnonc/iaml" ["l"="29.369,32.598"]
"JamesOwers/iaml2017" ["l"="29.361,32.615"]
"conormdurkan/mlpr-tutorials" ["l"="29.381,32.604"]
"raharrasy/HFO" ["l"="29.388,32.586"]
"JZ95/RLPractical" ["l"="29.376,32.581"]
"bfranke1973/IRR-Template" ["l"="29.29,32.611"]
"earthspecies/from_zero_to_DSP" ["l"="29.413,32.718"]
"earthspecies/birdcall" ["l"="29.361,32.742"]
"earthspecies/freesound" ["l"="29.382,32.732"]
"RaRe-Technologies/gensim-data" ["l"="29.953,32.706"]
"alexandres/lexvec" ["l"="-24.759,23.101"]
"strongio/keras-elmo" ["l"="31.341,31.487"]
"HazyResearch/epoxy" ["l"="29.279,32.48"]
"Microsoft/BlingFire" ["l"="29.833,32.653"]
"Microsoft/pyright" ["l"="23.034,3.924"]
"rhasspy/rapidfuzz" ["l"="22.806,2.804"]
"boyerjohn/rapidstring" ["l"="-12.065,25.827"]
"microsoft/SPTAG" ["l"="28.519,31.4"]
"Microsoft/BuildXL" ["l"="29.802,32.839"]
"allenai/beaker" ["l"="28.583,30.751"]
"TheBerkin/rant" ["l"="-13.182,40.153"]
"JohnSnowLabs/spark-nlp" ["l"="29.627,32.567"]
"JohnSnowLabs/spark-nlp-workshop" ["l"="29.555,32.584"]
"databricks/spark-deep-learning" ["l"="11.126,23.979"]
"Azure/mmlspark" ["l"="11.097,23.932"]
"yahoo/TensorFlowOnSpark" ["l"="11.133,23.94"]
"databricks/koalas" ["l"="25.405,33.998"]
"JohnSnowLabs/nlu" ["l"="29.511,32.527"]
"vlarine/transformers-ru" ["l"="-9.288,20.335"]
"DanAnastasyev/DeepNLP-Course" ["l"="-9.294,20.205"]
"natasha/corus" ["l"="-9.268,20.362"]
"snakers4/open_stt" ["l"="-9.247,20.291"]
"MyLtYkRiTiK/dl_in_nlp_2019" ["l"="-9.326,20.229"]
"vlgiitr/GenZoo" ["l"="29.187,32.819"]
"hardik2396/Dynamic-Memory-network-plus" ["l"="27.473,34.337"]
"vlgiitr/Group-Level-Emotion-Recognition" ["l"="29.137,32.962"]
"vlgiitr/ntm-pytorch" ["l"="27.426,34.342"]
"meereeum/lda2vec-tf" ["l"="29.652,32.829"]
"neulab/RIPPLe" ["l"="29.429,32.252"]
"thunlp/HiddenKiller" ["l"="29.441,32.269"]
"ShannonAI/backdoor_nlg" ["l"="29.374,32.23"]
"skcript/cvscan" ["l"="28.61,32.518"]
"danijar/handout" ["l"="29.765,32.492"]
"microsoft/tensorwatch" ["l"="34.19,35.667"]
"jwkvam/celluloid" ["l"="23.4,33.837"]
"keras-team/keras-tuner" ["l"="25.588,33.958"]
"IDSIA/sacred" ["l"="25.315,33.896"]
"QuantStack/voila" ["l"="21.264,28.871"]
"mwouts/jupytext" ["l"="21.279,28.842"]
"deepmind/bsuite" ["l"="25.188,35.838"]
"codekansas/seqgan-text-tensorflow" ["l"="30.046,32.167"]
"olofmogren/c-rnn-gan" ["l"="22.775,35.372"]
"AustinStoneProjects/TextGAN" ["l"="30.039,32.112"]
"tokestermw/text-gan-tensorflow" ["l"="30.058,32.107"]
"openeventdata/es-geonames" ["l"="29.553,32.812"]
"openeventdata/petrarch2" ["l"="29.52,32.829"]
"mpuig/spacy-lookup" ["l"="29.793,29.183"]
"openeventdata/phoenix_pipeline" ["l"="29.535,32.814"]
"stuartemiddleton/geoparsepy" ["l"="29.545,32.798"]
"msg-systems/holmes-extractor" ["l"="29.788,29.242"]
"openvenues/libpostal" ["l"="25.299,29.937"]
"msg-systems/coreferee" ["l"="29.424,32.648"]
"kororo/excelcy" ["l"="29.516,32.805"]
"yannvgn/laserembeddings" ["l"="29.94,32.062"]
"EdinburghNLP/opus-100-corpus" ["l"="29.912,32.158"]
"thunlp/KRLPapers" ["l"="22.967,38.419"]
"thunlp/RCPapers" ["l"="25.98,30.147"]
"nyu-mll/GLUE-baselines" ["l"="29.821,32.417"]
"john-hewitt/structural-probes" ["l"="29.745,32.296"]
"Adapter-Hub/adapter-transformers" ["l"="29.726,32.37"]
"facebookresearch/KILT" ["l"="25.749,29.246"]
"Hsuan-Tung/universal_attack_natural_trigger" ["l"="29.503,32.256"]
"ucinlp/autoprompt" ["l"="27.716,31.326"]
"Eric-Wallace/interpretability-tutorial-emnlp2020" ["l"="29.462,32.226"]
"Mini-Conf/Mini-Conf" ["l"="29.737,32.166"]
"acl-org/acl-2020-virtual-conference" ["l"="29.711,32.116"]
"Currie32/Text-Summarization-with-Amazon-Reviews" ["l"="30.212,32.634"]
"gsi-upm/sematch" ["l"="25.382,30.896"]
"princeton-nlp/PURE" ["l"="32.466,30.209"]
"markus-eberts/spert" ["l"="30.736,31.013"]
"mrqa/MRQA-Shared-Task-2019" ["l"="25.984,30.168"]
"juntaoy/biaffine-ner" ["l"="32.458,30.155"]
"ShannonAI/mrc-for-flat-nested-ner" ["l"="32.362,30.188"]
"cooelf/AwesomeMRC" ["l"="26.047,30.11"]
"dwadden/dygiepp" ["l"="32.553,30.149"]
"hengyuan-hu/bottom-up-attention-vqa" ["l"="31.614,34.51"]
"peteanderson80/bottom-up-attention" ["l"="31.583,34.573"]
"Cadene/vqa.pytorch" ["l"="31.655,34.492"]
"jnhwkim/ban-vqa" ["l"="31.638,34.504"]
"MILVLG/mcan-vqa" ["l"="31.631,34.554"]
"airsplay/lxmert" ["l"="31.645,34.628"]
"roytseng-tw/Detectron.pytorch" ["l"="34.447,35.349"]
"neubig/lowresource-nlp-bootcamp-2020" ["l"="29.764,32.413"]
"malllabiisc/SGCP" ["l"="29.665,32.176"]
"tagoyal/sow-reap-paraphrasing" ["l"="29.643,32.155"]
"tomhosking/separator" ["l"="29.635,32.13"]
"neuml/txtchat" ["l"="29.373,32.371"]
"EdCo95/scientific-paper-summarisation" ["l"="28.79,30.383"]
"allenai/science-parse" ["l"="28.747,30.582"]
"allenai/specter" ["l"="28.77,30.636"]
"ferru97/PyPaperBot" ["l"="6.309,8.331"]
"allenai/s2orc" ["l"="28.799,30.611"]
"kermitt2/grobid" ["l"="28.699,30.56"]
"neubig/nlptutorial" ["l"="30.091,32.632"]
"RandyPen/TextCluster" ["l"="29.38,33.317"]
"Edward1Chou/textClustering" ["l"="29.385,33.285"]
"murray-z/text_clustering" ["l"="32.301,30.452"]
"FesonX/cn-text-classifier" ["l"="29.363,33.354"]
"dsfsi/textaugment" ["l"="29.564,32.403"]
"pfnet-research/contextual_augmentation" ["l"="31.983,30.378"]
"clovaai/ssmix" ["l"="29.499,32.38"]
"diegma/graph-2-text" ["l"="29.873,31.952"]
"jcyk/gtos" ["l"="29.861,31.941"]
"lancopku/Graph-to-seq-comment-generation" ["l"="29.892,32.073"]
"freesunshine0316/neural-graph-to-seq-mp" ["l"="29.841,31.883"]
"UKPLab/kg2text" ["l"="29.908,31.975"]
"wenhuchen/KGPT" ["l"="29.935,31.956"]
"AmitMY/chimera" ["l"="29.879,31.977"]
"nlpyang/hiersumm" ["l"="28.295,33.706"]
"yicheng-w/CommonSenseMultiHopQA" ["l"="26.049,30.265"]
"ratishsp/data2text-plan-py" ["l"="28.518,29.124"]
"lipiji/TranSummar" ["l"="28.319,33.668"]
"lancopku/DPGAN" ["l"="28.137,33.603"]
"liuyuemaicha/Adversarial-Learning-for-Neural-Dialogue-Generation-in-Tensorflow" ["l"="28.286,29.067"]
"ChenChengKuan/SeqGAN_tensorflow" ["l"="30.063,32.128"]
"weilinie/RelGAN" ["l"="30.002,32.136"]
"crownpku/Information-Extraction-Chinese" ["l"="32.24,30.117"]
"mit-nlp/MITIE" ["l"="30.291,28.043"]
"memect/kg-beijing" ["l"="32.291,30.192"]
"thunlp/OpenNRE" ["l"="32.24,30.168"]
"qq547276542/Agriculture_KnowledgeGraph" ["l"="32.351,30.208"]
"Pelhans/Z_knowledge_graph" ["l"="32.415,30.233"]
"crownpku/Chinese-Annotator" ["l"="32.173,30.039"]
"jgontrum/spacy-api-docker" ["l"="29.648,33.139"]
"rsennrich/nematus" ["l"="30.046,32.322"]
"jhclark/multeval" ["l"="29.995,32.283"]
"rsennrich/Bleualign" ["l"="29.933,32.28"]
"isi-nlp/Zoph_RNN" ["l"="30.032,32.31"]
"neulab/xnmt" ["l"="30.006,32.299"]
"nyu-dl/dl4mt-cdec" ["l"="30.099,32.302"]
"dongwookim-ml/python-topic-model" ["l"="30.696,33.86"]
"shuyo/iir" ["l"="30.625,33.863"]
"a55509432/python-LDA" ["l"="30.582,33.906"]
"yangliuy/LDAGibbsSampling" ["l"="30.601,33.815"]
"blei-lab/onlineldavb" ["l"="30.685,33.946"]
"xiaohuiyan/BTM" ["l"="30.709,33.839"]
"Microsoft/LightLDA" ["l"="26.72,33.939"]
"galesour/BTM" ["l"="30.716,33.806"]
"vladsandulescu/topics" ["l"="29.611,32.872"]
"joewandy/hlda" ["l"="29.519,32.776"]
"nltk/nltk_data" ["l"="32.122,30.242"]
"textflint/textflint" ["l"="29.572,32.334"]
"txsun1997/LMaaS-Papers" ["l"="27.611,31.342"]
"neulab/ExplainaBoard" ["l"="27.849,31.343"]
"fastnlp/fastHan" ["l"="32.216,30.258"]
"fastnlp/CPT" ["l"="32.24,30.392"]
"intro-nlp/intro-nlp.github.io" ["l"="29.515,32.314"]
"txsun1997/MOSS" ["l"="27.553,31.336"]
"princeton-nlp/LM-BFF" ["l"="27.679,31.305"]
"rouseguy/DeepLearning-NLP" ["l"="-4.883,-45.517"]
"moses-smt/mgiza" ["l"="29.929,32.312"]
"UKPLab/EasyNMT" ["l"="29.6,32.45"]
"nlp-uoregon/trankit" ["l"="29.574,32.461"]
"joeynmt/joeynmt" ["l"="29.856,32.351"]
"UKPLab/gpl" ["l"="25.868,29.193"]
"ZIYU-DEEP/Awesome-Information-Bottleneck" ["l"="28.943,33.101"]
"snap-stanford/GIB" ["l"="28.93,33.139"]
"RyanWangZf/PAC-Bayes-IB" ["l"="28.95,33.124"]
"djstrouse/information-bottleneck" ["l"="28.943,33.065"]
"ShizheHu/Awesome-Information-Bottleneck" ["l"="28.925,33.119"]
"lancopku/Unpaired-Sentiment-Translation" ["l"="28.144,33.591"]
"raosudha89/GYAFC-corpus" ["l"="29.822,32.126"]
"passeul/style-transfer-model-evaluation" ["l"="29.825,32.11"]
"mkusner/wmd" ["l"="29.974,32.776"]
"src-d/wmd-relax" ["l"="29.842,32.822"]
"gaohuang/S-WMD" ["l"="22.911,33.742"]
"wmayner/pyemd" ["l"="22.865,33.722"]
"largelymfs/topical_word_embeddings" ["l"="30.689,33.809"]
"jwieting/iclr2016" ["l"="25.55,30.752"]
"stephenhky/PyWMD" ["l"="29.893,32.836"]
"licstar/compare" ["l"="30.701,33.751"]
"soskek/bookcorpus" ["l"="29.883,32.356"]
"EleutherAI/the-pile" ["l"="27.608,31.172"]
"sgraaf/Replicate-Toronto-BookCorpus" ["l"="29.888,32.282"]
"ciprian-chelba/1-billion-word-language-modeling-benchmark" ["l"="27.088,34.392"]
"HaowenHOU/single-pass-clustering-for-chinese-text" ["l"="29.351,33.374"]
"sayakpaul/Adventures-in-TensorFlow-Lite" ["l"="28.815,32.86"]
"ml-gde/e2e-tflite-tutorials" ["l"="28.787,32.88"]
"margaretmz/selfie2anime-with-tflite" ["l"="28.842,32.881"]
"margaretmz/segmentation-style-transfer" ["l"="28.8,32.89"]
"tensorflow/tflite-support" ["l"="25.628,34.32"]
"sayakpaul/ML-Bootcamp-Launchpad" ["l"="28.899,32.862"]
"huggingface/tflite-android-transformers" ["l"="-48.808,5.246"]
"prajdabre/yanmtt" ["l"="29.467,32.12"]
"AI4Bharat/indic-bart" ["l"="29.449,32.126"]
"aonotas/adversarial_text" ["l"="29.385,32.149"]
"enry12/adversarial_training_methods" ["l"="29.349,32.132"]
"aonotas/interpretable-adv" ["l"="29.462,32.19"]
"sommerschield/iphi" ["l"="29.264,31.816"]
"SamLynnEvans/Transformer" ["l"="30.016,32.466"]
"jayparks/transformer" ["l"="30.153,32.421"]
"hyunwoongko/transformer" ["l"="44.424,-15.175"]
"vene/sparsemap" ["l"="29.948,32.276"]
"andre-martins/AD3" ["l"="10.07,-44.737"]
"jiesutd/LatticeLSTM" ["l"="32.293,30.101"]
"yaserkl/RLSeq2Seq" ["l"="28.29,33.667"]
"bojone/t5_in_bert4keras" ["l"="32.248,30.413"]
"ZhuiyiTechnology/t5-pegasus" ["l"="32.253,30.384"]
"google-research/byt5" ["l"="27.744,31.203"]
"alexa/bort" ["l"="29.694,32.371"]
"atnlp/torchtext-summary" ["l"="29.591,32.35"]
"keitakurita/practical-torchtext" ["l"="29.64,32.369"]
"songyingxin/TextClassification-Pytorch" ["l"="32.069,30.059"]
"bigboNed3/chinese_text_cnn" ["l"="15.307,5.41"]
"Edward1Chou/Textclassification" ["l"="29.347,33.304"]
"x-hacker/CNN_ChineseTextBinaryClassify" ["l"="29.321,33.312"]
"yongfengxuemei/NLP" ["l"="29.33,33.33"]
"margaretmz/awesome-tensorflow-lite" ["l"="28.741,32.9"]
"margaretmz/Cartoonizer-with-TFLite" ["l"="28.703,32.893"]
"dailystudio/tensorflow-lite-examples-android" ["l"="28.709,32.912"]
"tulasiram58827/ocr_tflite" ["l"="29.644,34.216"]
"am15h/tflite_flutter_plugin" ["l"="-33.238,22.552"]
"iwatake2222/play_with_tflite" ["l"="34.221,35.659"]
"margaretmz/Selfie2Anime-with-TFLite" ["l"="28.725,32.923"]
"susanli2016/PySpark-and-MLlib" ["l"="10.837,24.025"]
"artix41/awesome-transfer-learning" ["l"="30.071,35.003"]
"PacktPublishing/Hands-On-Transfer-Learning-with-Python" ["l"="29.687,32.908"]
"easezyc/deep-transfer-learning" ["l"="30.06,34.985"]
"hfawaz/bigdata18" ["l"="22.275,36.084"]
"jindongwang/transferlearning-tutorial" ["l"="30.097,35.043"]
"yaoyao-liu/meta-transfer-learning" ["l"="23.761,35.37"]
"keras-team/keras-applications" ["l"="34.298,35.258"]
"dipanjanS/feature_engineering_session_dhs18" ["l"="29.691,32.882"]
"thuml/Transfer-Learning-Library" ["l"="30.099,34.994"]
"thuml/Xlearn" ["l"="30.027,34.983"]
"graphbrain/graphbrain" ["l"="29.809,29.259"]
"thompsonb/vecalign" ["l"="29.904,32.257"]
"danielvarga/hunalign" ["l"="29.92,32.246"]
"bitextor/bicleaner" ["l"="29.889,32.261"]
"bfsujason/bertalign" ["l"="29.919,32.21"]
"explosion/spacy-stanza" ["l"="29.556,32.72"]
"kormilitzin/med7" ["l"="29.005,30.638"]
"ronxin/wevi" ["l"="30.214,32.768"]
"miyyer/dan" ["l"="30.351,32.812"]
"seomoz/word2gauss" ["l"="30.562,33.544"]
"mesnilgr/nbsvm" ["l"="29.271,31.515"]
"wlin12/wang2vec" ["l"="30.667,33.738"]
"dewarim/reddit-data-tools" ["l"="30.312,32.798"]
"kojisekig/word2vec-lucene" ["l"="30.281,32.801"]
"THUNLP-MT/Document-Transformer" ["l"="29.978,32.273"]
"lena-voita/good-translation-wrong-in-context" ["l"="28.323,32.839"]
"JohnSnowLabs/spark-nlp-models" ["l"="29.479,32.569"]
"allenai/pawls" ["l"="29.345,32.469"]
"Novetta/adaptnlp" ["l"="22.793,28.984"]
"UB-Mannheim/spacyopentapioca" ["l"="25.567,29.314"]
"jenojp/negspacy" ["l"="29.016,30.655"]
"DerwenAI/kglab" ["l"="26.83,29.359"]
"DFKI-NLP/thermostat" ["l"="29.418,32.522"]
"Bergvca/string_grouper" ["l"="29.408,32.615"]
"ing-bank/sparse_dot_topn" ["l"="29.355,32.644"]
"jcyk/AMR-gs" ["l"="29.8,31.858"]
"QAQ-v/HetGT" ["l"="29.888,31.901"]
"hugochan/RL-based-Graph2Seq-for-NQG" ["l"="25.977,29.939"]
"beckdaniel/acl2018_graph2seq" ["l"="29.861,31.896"]
"WHUIR/PPVAE" ["l"="29.867,32.064"]
"guangyliu/LatentOps" ["l"="27.75,31.421"]
"fangleai/TransformerCVAE" ["l"="27.999,29.071"]
"roomylee/EMNLP-2019-Papers" ["l"="29.755,32.318"]
"mingdachen/disentangle-semantics-syntax" ["l"="27.639,32.833"]
"monyhar/monyhar" ["l"="-32.662,-15.181"]
"monyhar/monyhar-lite" ["l"="-32.685,-15.2"]
"BeautyYuYanli/full-mark-composition-generator" ["l"="-32.733,-15.272"]
"Himself65/did-zhihu-close-down-today" ["l"="30.442,32.123"]
"elvinmahmudov/jget" ["l"="25.683,36.9"]
"boism-org/northpole" ["l"="2.209,17.009"]
"MrRameshRajendran/Hybrid_MultiCloud_Overlay" ["l"="25.691,36.898"]
"Chi-Task-Force/Chi-Corpus" ["l"="2.023,16.828"]
"fabien-h/acta" ["l"="25.689,36.93"]
"fast-ide/fast-ide" ["l"="25.659,36.94"]
"celer-network/goCeler-oss" ["l"="25.646,36.944"]
"sharedeeply/cs231n-camp" ["l"="23.935,32.75"]
"MLjian/TextClassificationImplement" ["l"="31.933,29.87"]
"learning511/Stanford-Machine-Learning-camp" ["l"="23.889,32.767"]
"Y1ran/NLP-BERT--ChineseVersion" ["l"="32.145,30.063"]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["l"="31.931,29.895"]
"jiangxinyang227/textClassifier" ["l"="32.142,30.094"]
"moneyDboat/data_grand" ["l"="31.915,29.864"]
"RedstoneWill/MachineLearningInAction-Camp" ["l"="23.89,32.706"]
"dnouri/skorch" ["l"="25.512,33.671"]
"deborausujono/word2vecpy" ["l"="30.321,32.931"]
"tscheepers/word2vec" ["l"="30.348,32.936"]
"klb3713/word2vec" ["l"="30.317,32.966"]
"fanglanting/skip-gram-pytorch" ["l"="30.371,32.958"]
"bamtercelboo/Word_Similarity_and_Word_Analogy" ["l"="30.7,33.686"]
"tankle/word2vec" ["l"="30.333,32.982"]
"enewe101/word2vec" ["l"="30.366,32.929"]
"iconix/pytorch-text-vae" ["l"="30.016,32.057"]
"liuhuanyong/ChineseNLPCorpus" ["l"="32.379,30.121"]
"snorkel-team/snorkel-tutorials" ["l"="29.789,32.404"]
"cgnorthcutt/cleanlab" ["l"="33.981,36.726"]
"mlflow/mlflow" ["l"="25.373,34.026"]
"iterative/cml" ["l"="25.398,34.122"]
"bentoml/BentoML" ["l"="25.372,34.138"]
"heartexlabs/label-studio" ["l"="34.418,35.533"]
"LooperXX/LooperXX.github.io" ["l"="30.05,32.987"]
"datawhalechina/learn-nlp-with-transformers" ["l"="24.43,31.185"]
"bert-nmt/bert-nmt" ["l"="29.904,32.305"]
"kanekomasahiro/bert-gec" ["l"="31.523,28.583"]
"bzhangGo/zero" ["l"="29.881,32.25"]
"yokusama/NMT_Papers" ["l"="29.923,32.226"]
"butsugiri/gec-pseudodata" ["l"="31.548,28.579"]
"chrisjbryant/errant" ["l"="31.53,28.563"]
"lemmonation/abnet" ["l"="29.935,32.244"]
"nusnlp/m2scorer" ["l"="31.516,28.573"]
"thu-coai/DA-Transformer" ["l"="27.998,33.918"]
"TharinduDR/TransQuest" ["l"="29.862,32.239"]
"nateraw/Lda2vec-Tensorflow" ["l"="29.594,32.891"]
"mansweet/Gaussian-LDA-word2vec" ["l"="30.856,33.846"]
"datquocnguyen/LFTM" ["l"="30.746,33.853"]
"askerlee/topicvec" ["l"="30.718,33.86"]
"rajarshd/Gaussian_LDA" ["l"="30.812,33.844"]
"akashgit/autoencoding_vi_for_topic_models" ["l"="30.734,33.908"]
"AYLIEN/docnade" ["l"="29.63,32.883"]
"yitu-opensource/ConvBert" ["l"="29.626,32.317"]
"kakaobrain/KorNLUDatasets" ["l"="44.431,-15.055"]
"monologg/DistilKoBERT" ["l"="44.406,-15.029"]
"microsoft/fastformers" ["l"="29.654,32.413"]
"bohanli/BERT-flow" ["l"="32.24,30.344"]
"clovaai/AdamP" ["l"="44.357,-15.12"]
"studio-ousia/luke" ["l"="25.668,29.265"]
"bigscience-workshop/promptsource" ["l"="27.529,31.231"]
"google-research/FLAN" ["l"="27.563,31.22"]
"thunlp/OpenPrompt" ["l"="27.575,31.283"]
"AI-secure/InfoBERT" ["l"="29.429,32.22"]
"geyingli/unif" ["l"="29.386,32.203"]
"roomylee/ACL-2020-Papers" ["l"="29.75,32.347"]
"pingpong-ai/dialogue-generation-models" ["l"="44.356,-15.018"]
"leuchine/S-LSTM" ["l"="29.875,31.83"]
"l11x0m7/Question_Answering_Models" ["l"="25.859,30.057"]
"THUDM/NLP4Rec-Papers" ["l"="22.934,36.851"]
"seriousran/awesome-qa" ["l"="25.97,30.081"]
"quincyliang/nlp-data-augmentation" ["l"="32.018,30.33"]
"lx865712528/EMNLP2018-JMEE" ["l"="32.617,30.128"]
"wmathor/nlp-tutorial" ["l"="32.214,30.182"]
"leviswind/pytorch-transformer" ["l"="30.287,32.378"]
"maxjcohen/transformer" ["l"="22.329,35.932"]
"salesforce/nonauto-nmt" ["l"="28.061,33.879"]
"lium-lst/nmtpy" ["l"="30.065,32.322"]
"jsalt18-sentence-repl/jiant" ["l"="29.802,32.327"]
"ofirpress/YouMayNotNeedAttention" ["l"="23.078,33.734"]
"nyu-dl/dl4mt-nonauto" ["l"="28.054,33.895"]
"Jingjing-NLP/VOLT" ["l"="27.956,33.966"]
"zackchase/mxnet-the-straight-dope" ["l"="34.123,35.207"]
"magic282/MXNMT" ["l"="30.149,32.312"]
"alicank/Translation-Augmented-LibriSpeech-Corpus" ["l"="30.056,32.24"]
"neubig/lamtram" ["l"="30.06,32.334"]
"neulab/dynet-benchmark" ["l"="30.07,32.229"]
"rishabh-16/cs231n-2019-assignments" ["l"="30.109,32.98"]
"lrs1353281004/CS224n_winter2019_notes_and_assignments" ["l"="30.09,32.918"]
"chrischute/squad" ["l"="25.909,30.109"]
"alongstar518/CS224NHomeworks" ["l"="30.107,32.964"]
"dasguptar/treelstm.pytorch" ["l"="27.054,34.49"]
"ywk991112/pytorch-chatbot" ["l"="30.575,28.043"]
"lilt/alignment-scripts" ["l"="29.884,32.3"]
"twairball/fairseq-zh-en" ["l"="27.943,34.082"]
"THUNLP-MT/Mask-Align" ["l"="29.895,32.312"]
"PANXiao1994/mRASP2" ["l"="27.883,34.02"]
"THUNLP-AIPoet/PaperList" ["l"="29.166,28.79"]
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" ["l"="29.788,32.206"]
"hit-computer/MTA-LSTM" ["l"="29.956,32.143"]
"iwangjian/Paper-Reading" ["l"="32.058,30.073"]
"wyu97/KENLG-Reading" ["l"="21.876,27.371"]
"neulab/awesome-align" ["l"="29.854,32.299"]
"google-research-datasets/tydiqa" ["l"="29.778,32.258"]
"facebookresearch/XNLI" ["l"="29.833,32.353"]
"shijie-wu/crosslingual-nlp" ["l"="29.796,32.292"]
"deepmind/xquad" ["l"="29.757,32.256"]
"facebookresearch/anli" ["l"="25.733,29.296"]
"Unbabel/OpenKiwi" ["l"="29.872,32.264"]
"tirthajyoti/Data-science-best-resources" ["l"="23.494,30.572"]
"justmarkham/scikit-learn-tips" ["l"="23.432,30.534"]
"moj-analytical-services/splink" ["l"="25.387,29.877"]
"pymupdf/PyMuPDF" ["l"="24.464,3.773"]
"nalepae/pandarallel" ["l"="25.424,33.909"]
"mito-ds/monorepo" ["l"="34.651,-28.473"]
"spacy-io/sense2vec" ["l"="29.832,32.997"]
"facebook/NAMAS" ["l"="27.089,34.344"]
"tensorflow/skflow" ["l"="27.157,34.187"]
"317070/kaggle-heart" ["l"="27.333,34.092"]
"dbpedia/fact-extractor" ["l"="25.526,30.897"]
"avisingh599/visual-qa" ["l"="31.689,34.407"]
"cfmrp/tutorial" ["l"="29.844,31.791"]
"ChunchuanLv/AMR_AS_GRAPH_PREDICTION" ["l"="29.821,31.838"]
"omarsar/pytorch_notebooks" ["l"="29.471,32.679"]
"dair-ai/nlp_overview" ["l"="29.539,32.643"]
"rasbt/stat453-deep-learning-ss20" ["l"="28.112,32.566"]
"keitakurita/Practical_NLP_in_PyTorch" ["l"="29.734,32.421"]
"openai/blocksparse" ["l"="27.736,35.425"]
"epfml/attention-cnn" ["l"="31.709,37.163"]
"deep-spin/entmax" ["l"="29.83,32.265"]
"P2333/Papers-of-Robust-ML" ["l"="21.444,14.055"]
"THUYimingLi/backdoor-learning-resources" ["l"="20.929,27.351"]
"zhaochaocs/DualEnc" ["l"="29.899,31.95"]
"cedrickchee/awesome-bert-nlp" ["l"="29.691,32.632"]
"chineseGLUE/chineseGLUE" ["l"="32.134,30.251"]
"brightmart/sentiment_analysis_fine_grain" ["l"="32.074,30.001"]
"hscspring/All4NLP" ["l"="24.165,31.479"]
"yuquanle/Attention-Mechanisms-paper" ["l"="29.588,32.69"]
"SunYanCN/BERT-chinese-text-classification-and-deployment" ["l"="32.18,30.027"]
"mdtux89/OpenNMT-py-AMR-to-text" ["l"="29.844,31.902"]
"bastings/neuralmonkey" ["l"="29.881,31.927"]
"inejc/paragraph-vectors" ["l"="30.18,32.868"]
"jhlau/gensim" ["l"="30.109,32.828"]
"fbkarsdorp/doc2vec" ["l"="29.174,31.396"]
"ibrahimsharaf/doc2vec" ["l"="30.149,32.839"]
"MaxwellRebo/awesome-2vec" ["l"="21.74,38.754"]
"iamxiaomu/doc2vec" ["l"="30.117,32.816"]
"sachinruk/doc2vec_tf" ["l"="30.127,32.828"]
"JonathanRaiman/PVDM" ["l"="30.134,32.857"]
"Robofied/Awesome-Computer-Vision-Guide" ["l"="28.83,32.813"]
"IndicoDataSolutions/Enso" ["l"="29.713,32.62"]
"feedly/transfer-nlp" ["l"="29.758,32.509"]
"textpipe/textpipe" ["l"="29.845,29.256"]
"robertostling/eflomal" ["l"="29.869,32.276"]
"nttcslab-nlp/word_align" ["l"="29.809,32.264"]
"thompsonb/prism" ["l"="29.816,32.24"]
"Amin-Tgz/awesome-tensorflow-2" ["l"="29.049,32.835"]
"adhiraiyan/DeepLearningWithTF2.0" ["l"="29.008,32.844"]
"zhedongzheng/tensorflow-nlp" ["l"="28.996,32.871"]
"ageron/tf2_course" ["l"="23.86,30.906"]
"YunYang1994/TensorFlow2.0-Examples" ["l"="34.456,35.253"]
"dragen1860/TensorFlow-2.x-Tutorials" ["l"="24.085,30.964"]
"yusugomori/deeplearning-tf2" ["l"="29.045,32.865"]
"taki0112/Tensorflow2-Cookbook" ["l"="44.337,-14.85"]
"TrickyGo/Dive-into-DL-TensorFlow2.0" ["l"="24.053,30.989"]
"jinfagang/yolov3_tf2" ["l"="29.024,32.877"]
"koomri/text-segmentation" ["l"="28.961,32.369"]
"sedflix/awesome-topic-segmentation" ["l"="28.923,32.367"]
"pinkeshbadjatiya/neuralTextSegmentation" ["l"="28.938,32.354"]
"lxing532/improve_topic_seg" ["l"="28.939,32.374"]
"dennlinger/TopicalChange" ["l"="29.137,32.415"]
"EducationalTestingService/CATS" ["l"="28.95,32.388"]
"ReemHal/Semantic-Text-Segmentation-with-Embeddings" ["l"="28.959,32.348"]
"gdamaskinos/unsupervised_topic_segmentation" ["l"="28.909,32.352"]
"chschock/textsplit" ["l"="28.917,32.383"]
"gregversteeg/CorEx" ["l"="29.246,32.84"]
"artemyk/ibsgd" ["l"="28.996,33.04"]
"paulbrodersen/entropy_estimators" ["l"="29.018,32.981"]
"simomarsili/ndd" ["l"="29.033,32.96"]
"ravidziv/IDNNs" ["l"="28.969,33.047"]
"gregversteeg/gaussianize" ["l"="29.148,32.91"]
"sungyubkim/MINE-Mutual-Information-Neural-Estimation-" ["l"="28.885,33.06"]
"sudiptodip15/CCMI" ["l"="29.057,32.992"]
"artemyk/nonlinearIB" ["l"="28.992,33.022"]
"ale3otik/paraphrases-generator" ["l"="29.695,32.15"]
"mingdachen/syntactic-template-generation" ["l"="29.656,32.138"]
"jwieting/para-nmt-50m" ["l"="29.673,32.211"]
"vsuthichai/paraphraser" ["l"="29.632,32.205"]
"HarshTrivedi/paraphrase-generation" ["l"="29.652,32.172"]
"pmichel31415/teapot-nlp" ["l"="29.587,32.194"]
"danishpruthi/Adversarial-Misspellings" ["l"="29.616,32.142"]
"tdebatty/java-string-similarity" ["l"="9.059,21.375"]
"panchunguang/ccks_baidu_entity_link" ["l"="32.321,30.195"]
"zhanzecheng/Time_NLP" ["l"="32.214,30.165"]
"stephenhky/PyShortTextCategorization" ["l"="29.632,32.78"]
"liuhuanyong/SiameseSentenceSimilarity" ["l"="32.277,30.098"]
"HazyResearch/babble" ["l"="30.106,32.406"]
"HazyResearch/tanda" ["l"="30.113,32.391"]
"HazyResearch/reef" ["l"="30.082,32.402"]
"emorynlp/coref-hoi" ["l"="29.607,32.722"]
"thunlp/ONION" ["l"="29.417,32.265"]
"thunlp/BkdAtk-LWS" ["l"="29.404,32.256"]
"thunlp/OpenBackdoor" ["l"="29.454,32.275"]
"sfzhou5678/TextualAdversarialAttack-Tianchi" ["l"="29.454,32.254"]
"elastic/elasticsearch-java" ["l"="29.117,32.221"]
"elastic/elasticsearch-specification" ["l"="29.168,32.246"]
"elastic/eland" ["l"="29.24,32.281"]
"walterra/jupyter2kibana" ["l"="29.206,32.265"]
"VITA-Group/BERT-Tickets" ["l"="29.537,32.338"]
"laiguokun/Funnel-Transformer" ["l"="29.616,30.839"]
"lmthang/nmt.matlab" ["l"="30.147,32.291"]
"google-research/long-range-arena" ["l"="29.627,30.739"]
"armancohan/long-summarization" ["l"="28.344,33.722"]
"LowinLi/chinese-bigbird" ["l"="29.698,32.318"]
"vasudevgupta7/bigbird" ["l"="29.695,32.336"]
"KLUE-benchmark/KLUE" ["l"="44.471,-15.08"]
"HHousen/TransformerSum" ["l"="28.315,33.745"]
"stas-semeniuta/textvae" ["l"="29.959,32.037"]
"cheng6076/Variational-LSTM-Autoencoder" ["l"="29.915,32.098"]
"carpedm20/variational-text-tensorflow" ["l"="30.7,33.914"]
"kefirski/contiguous-succotash" ["l"="25.178,32.583"]
"yiyang92/vae_for_text" ["l"="29.944,32.082"]
"iwyoo/LSTM-autoencoder" ["l"="22.76,35.28"]
"phreeza/tensorflow-vrnn" ["l"="25.17,32.745"]
"snowkylin/rnn-vae" ["l"="22.761,35.301"]
"twairball/keras_lstm_vae" ["l"="22.768,35.251"]
"shaohua0116/VAE-Tensorflow" ["l"="25,32.766"]
"ZhenYangIACAS/unsupervised-NMT" ["l"="30.059,32.281"]
"tuzhaopeng/NMT-Coverage" ["l"="30.113,32.289"]
"tuzhaopeng/NMT" ["l"="30.17,32.267"]
"propbank/propbank-frames" ["l"="29.711,32.05"]
"propbank/propbank-release" ["l"="29.674,32.237"]
"IBM/graph_ensemble_learning" ["l"="29.745,31.893"]
"maxim5/cs224n-winter-2017" ["l"="30.142,32.903"]
"yasiemir/cs224n" ["l"="30.119,32.91"]
"Observerspy/CS224n" ["l"="30.154,32.926"]
"chenghuige/wenzheng" ["l"="32.05,29.969"]
"nishithbsk/tensorflow_tutorials" ["l"="30.133,32.922"]
"zyxue/stanford-cs229" ["l"="23.68,32.677"]
"iphysresearch/DataSciComp" ["l"="23.983,31.321"]
"bogatyy/cs224d" ["l"="27.024,34.616"]
"Songweiping/TCN-TF" ["l"="30.495,32.461"]
"StefOe/indrnn-pytorch" ["l"="30.495,32.563"]
"Sunnydreamrain/IndRNN_pytorch" ["l"="30.478,32.57"]
"theSage21/IndRNN" ["l"="30.47,32.558"]
"tokenmill/awesome-nlg" ["l"="32.713,-25.956"]
"CLUEbenchmark/CLGE" ["l"="32.214,30.37"]
"NLPScott/bert-Chinese-classification-task" ["l"="32.139,30.046"]
"TobiasLee/MTA-LSTM-TensorFlow" ["l"="29.978,32.11"]
"libing125/CTEG" ["l"="29.97,32.099"]
"pingpong-ai/xlnet-pytorch" ["l"="29.806,32.367"]
"dhlee347/pytorchic-bert" ["l"="44.464,-15.013"]
"affjljoo3581/Expanda" ["l"="30.172,32.132"]
"affjljoo3581/canrevan" ["l"="30.184,32.117"]
"allenai/writing-code-for-nlp-research-emnlp2018" ["l"="29.77,32.298"]
"allenai/acl2018-semantic-parsing-tutorial" ["l"="-10.894,-4.63"]
"jasonwu0731/GLMP" ["l"="28.188,29.016"]
"AtmaHou/Task-Oriented-Dialogue-Dataset-Survey" ["l"="28.154,28.967"]
"VICO-UoE/mlpractical" ["l"="29.196,32.634"]
"uoe-iaml/iaml-labs" ["l"="29.153,32.644"]
"uoe-agents/Building-a-Complete-RL-System_Demonstration" ["l"="29.171,32.642"]
"ccsasuke/umwe" ["l"="29.944,32.309"]
"lmthang/bivec" ["l"="30.012,32.237"]
"sfu-db/dataprep" ["l"="25.529,34.071"]
"alfiopuglisi/guietta" ["l"="20.044,2.302"]
"gregversteeg/corex_topic" ["l"="29.448,32.693"]
"adjidieng/ETM" ["l"="30.776,33.919"]
"gregversteeg/bio_corex" ["l"="29.298,32.802"]
"jhlau/topic_interpretability" ["l"="30.748,33.886"]
"bab2min/tomotopy" ["l"="29.499,32.641"]
"martingerlach/hSBM_Topicmodel" ["l"="19.82,42.548"]
"rwalk/gsdmm" ["l"="30.766,33.825"]
"derekgreene/dynamic-nmf" ["l"="30.833,34.027"]
"zll17/Neural_Topic_Models" ["l"="30.772,33.899"]
"zhangfazhan/text_clustering" ["l"="29.381,33.34"]
"jojonki/word2vec-pytorch" ["l"="30.423,32.991"]
"kefirski/pytorch_NEG_loss" ["l"="30.412,33.015"]
"ray1007/pytorch-word2vec" ["l"="30.384,32.969"]
"clarkkev/attention-analysis" ["l"="28.236,32.706"]
"strubell/LISA" ["l"="31.533,31.34"]
"yoavg/bert-syntax" ["l"="29.751,32.276"]
"harvardnlp/urnng" ["l"="27.588,32.827"]
"facebookresearch/colorlessgreenRNNs" ["l"="29.699,32.24"]
"BeckyMarvin/LM_syneval" ["l"="29.709,32.253"]
"nikitakit/self-attentive-parser" ["l"="27.545,32.848"]
"tommccoy1/hans" ["l"="25.7,29.35"]
"yikangshen/PRPN" ["l"="27.588,32.842"]
"jihunchoi/unsupervised-treelstm" ["l"="27.576,32.838"]
"chakki-works/chakin" ["l"="25.493,31.767"]
"thunlp/NRLPapers" ["l"="21.76,38.706"]
"ari-holtzman/degen" ["l"="29.689,32.258"]
"sortiz/tmxt" ["l"="29.897,32.219"]
"hainan-xv/zipporah" ["l"="29.903,32.24"]
"M4t1ss/SoftAlignments" ["l"="29.862,32.287"]
"facebookresearch/MLDoc" ["l"="29.794,32.248"]
"allenai/tpu_pretrain" ["l"="29.727,32.317"]
"neccam/slt" ["l"="31.278,32.357"]
"kayoyin/transformer-slt" ["l"="31.281,32.342"]
"neccam/nslt" ["l"="31.263,32.359"]
"shivam5992/textstat" ["l"="29.561,32.683"]
"cdimascio/py-readability-metrics" ["l"="29.509,32.738"]
"wimmuskee/readability-score" ["l"="29.484,32.76"]
"mmautner/readability" ["l"="29.467,32.75"]
"andreasvc/readability" ["l"="29.487,32.74"]
"kootenpv/contractions" ["l"="29.446,32.809"]
"booknlp/booknlp" ["l"="29.467,32.598"]
"artitw/text2text" ["l"="25.993,29.91"]
"sina-al/pynlp" ["l"="29.769,32.899"]
"allenai/document-qa" ["l"="25.941,30.184"]
"PrithivirajDamodaran/Parrot_Paraphraser" ["l"="29.57,32.371"]
"Vamsi995/Paraphrase-Generator" ["l"="29.626,32.258"]
"RasaHQ/paraphraser" ["l"="29.508,32.339"]
"ramsrigouthamg/Questgen.ai" ["l"="26.009,29.927"]
"google-research/pegasus" ["l"="28.3,33.686"]
"linkedin/gdmix" ["l"="29.509,32.579"]
"facebookresearch/TransCoder" ["l"="-17.647,-33.14"]
"AI4Bharat/indicnlp_catalog" ["l"="29.513,32.146"]
"libindic/indic-trans" ["l"="29.504,32.124"]
"anoopkunchukuttan/indic_nlp_resources" ["l"="29.539,32.109"]
"AI4Bharat/indic-bert" ["l"="29.496,32.145"]
"goru001/inltk" ["l"="29.537,32.223"]
"AI4Bharat/indicnlp_corpus" ["l"="29.524,32.167"]
"taranjeet/hindi-tokenizer" ["l"="29.552,32.089"]
"sanskrit-coders/indic_transliteration" ["l"="29.507,32.1"]
"libindic/Transliteration" ["l"="29.525,32.099"]
"AI4Bharat/indicTrans" ["l"="29.52,32.117"]
"google-research-datasets/dakshina" ["l"="29.505,32.163"]
"Open-Speech-EkStep/vakyansh-models" ["l"="29.475,32.075"]
"artetxem/phrase2vec" ["l"="29.987,32.298"]
"sufe-nlp/transformer-alignment" ["l"="29.867,32.25"]
"chrishokamp/constrained_decoding" ["l"="30.032,32.223"]
"kahne/NonAutoregGenProgress" ["l"="28.015,33.9"]
"zseymour/phrase2vec" ["l"="30.135,32.878"]
"mesnilgr/iclr15" ["l"="29.249,31.537"]
"tunib-ai/parallelformers" ["l"="44.437,-15.132"]
"lalitpagaria/obsei" ["l"="29.503,32.295"]
"arassadin/emotiw2017" ["l"="29.125,33.009"]
"srvk/how2-dataset" ["l"="30.178,32.302"]
"jayleicn/TVCaption" ["l"="31.734,33.867"]
"stepthom/data_mining_resources" ["l"="29.67,32.838"]
"stepthom/869_course" ["l"="29.655,32.844"]
"stepthom/sandbox" ["l"="29.681,32.83"]
"stepthom/NLP_course" ["l"="29.673,32.82"]
"stepthom/awesome-nlp" ["l"="29.679,32.795"]
"outcastofmusic/quick-nlp" ["l"="30.118,32.639"]
"chiphuyen/lazynlp" ["l"="29.837,32.553"]
"chiphuyen/python-is-cool" ["l"="23.813,30.589"]
"chiphuyen/sotawhat" ["l"="29.899,32.507"]
"chiphuyen/coding-exercises" ["l"="23.938,30.501"]
"renatoviolin/next_word_prediction" ["l"="29.531,32.37"]
"renatoviolin/Question-Answering-Albert-Electra" ["l"="29.441,32.33"]
"renatoviolin/Semantic-Search" ["l"="29.467,32.338"]
"renatoviolin/Bart_T5-summarization" ["l"="29.458,32.316"]
"renatoviolin/Multiple-Choice-Question-Generation-T5-and-Text2Text" ["l"="29.446,32.352"]
"renatoviolin/T5-paraphrase-generation" ["l"="29.586,32.278"]
"Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning" ["l"="29.426,32.314"]
"snorkel-team/snorkel-extraction" ["l"="29.761,32.364"]
"HazyResearch/snorkel-superglue" ["l"="29.77,32.373"]
"huggingface/nn_pruning" ["l"="27.773,31.051"]
"microsoft/fastseq" ["l"="28.221,33.79"]
"studio-ousia/bpr" ["l"="25.832,29.246"]
"asappresearch/sru" ["l"="2.442,39.288"]
"uber-research/plato-research-dialogue-system" ["l"="28.239,28.911"]
"vearch/vearch" ["l"="28.612,31.34"]
"thumt/THUMT" ["l"="30.026,32.287"]
"nyu-dl/dl4mt-multi" ["l"="30.081,32.335"]
"wcmac/sippycup" ["l"="30.183,31.632"]
"facebookresearch/Horizon" ["l"="25.101,35.879"]
"facebookresearch/DME" ["l"="30.139,32.49"]
"tensorflow/adanet" ["l"="25.583,33.899"]
"Tencent/tencent-ml-images" ["l"="34.337,35.356"]
"facebookresearch/nevergrad" ["l"="25.543,33.689"]
"ikostrikov/pytorch-flows" ["l"="23.233,33.93"]
"abdulfatir/twitter-sentiment-analysis" ["l"="29.232,31.305"]
"Roshanson/TextInfoExp" ["l"="32.122,30.095"]
"RubensZimbres/Repo-2017" ["l"="23.184,35.875"]
"mhagiwara/realworldnlp" ["l"="29.662,32.358"]
"gutfeeling/beginner_nlp" ["l"="30.173,32.9"]
"google/BIG-bench" ["l"="27.557,31.185"]
"UKPLab/beir" ["l"="25.827,29.17"]
"google-research/adapter-bert" ["l"="29.602,32.247"]
"AsaCooperStickland/Bert-n-Pals" ["l"="29.561,32.2"]
"gtegner/mine-pytorch" ["l"="28.902,33.064"]
"ermongroup/smile-mi-estimator" ["l"="28.891,33.082"]
"MasanoriYamada/Mine_pytorch" ["l"="28.874,33.043"]
"Linear95/CLUB" ["l"="28.867,33.079"]
"intersun/PKD-for-BERT-Model-Compression" ["l"="32.258,30.312"]
"allenai/vampire" ["l"="29.768,32.335"]
"acl-org/aclpubcheck" ["l"="27.66,31.398"]
"lmthang/thesis" ["l"="30.04,32.388"]
"kimiyoung/review_net" ["l"="31.405,34.585"]
"c-amr/camr" ["l"="29.793,31.823"]
"jflanigan/jamr" ["l"="29.792,31.839"]
"mdtux89/amr-eager" ["l"="29.81,31.815"]
"sheng-z/stog" ["l"="29.804,31.843"]
"yanqiangmiffy/text-cluster" ["l"="29.389,33.368"]
"FranxYao/dgm_latent_bow" ["l"="29.685,32.166"]
"FranxYao/Gumbel-CRF" ["l"="29.764,32.137"]
"rt219/Unpaired-Sketch-to-Photo-Translation" ["l"="29.112,32.458"]
"cfmrp/mtool" ["l"="29.813,31.777"]
"danielhers/tupa" ["l"="29.816,31.751"]
"ryanjgallagher/shifterator" ["l"="19.845,42.562"]
"Pandora-Intelligence/crosslingual-coreference" ["l"="29.408,32.56"]
"DSKSD/Controlled_Text_Generation" ["l"="29.949,32.106"]
"paarthneekhara/byteNet-tensorflow" ["l"="30.134,32.272"]
"buriburisuri/ByteNet" ["l"="23.338,31.184"]
"nyu-dl/dl4mt-c2c" ["l"="30.09,32.295"]
"tokestermw/tensorflow-shakespeare" ["l"="30.081,32.262"]
"Kyubyong/quasi-rnn" ["l"="30.216,32.237"]
"rdspring1/PyTorch_GBW_LM" ["l"="30.521,33.11"]
"leimao/Sampled_Softmax_PyTorch" ["l"="30.539,33.126"]
"titu1994/Keras-IndRNN" ["l"="30.493,32.542"]
"Sunnydreamrain/IndRNN_Theano_Lasagne" ["l"="30.475,32.54"]
"dmlc/gluon-cv" ["l"="34.367,35.411"]
"chinakook/Awesome-MXNet" ["l"="33.059,35.732"]
"mli/gluon-tutorials-zh" ["l"="34.209,35.232"]
"akanazawa/vgan" ["l"="28.788,33.154"]
"akanimax/Variational_Discriminator_Bottleneck" ["l"="28.811,33.139"]
"DuaneNielsen/DeepInfomaxPytorch" ["l"="34.578,36.22"]
"rdevon/DIM" ["l"="34.554,36.173"]
"1Konny/VIB-pytorch" ["l"="28.866,33.098"]
"ccha23/MI-NEE" ["l"="28.856,33.058"]
"bojone/infomax" ["l"="34.598,36.225"]
"alexalemi/vib_demo" ["l"="28.848,33.086"]
"rmaestre/Mutual-Information" ["l"="28.836,33.056"]
"PacktPublishing/Mastering-Computer-Vision-with-TensorFlow-2.0" ["l"="28.982,32.811"]
"PacktPublishing/Tensorflow-2.0-Computer-Vision-Cookbook" ["l"="29.004,32.801"]
"PacktPublishing/Hands-On-Neural-Networks-with-TensorFlow-2.0" ["l"="27.811,-29.275"]
"PacktPublishing/Deep-Learning-with-TensorFlow-2-and-Keras" ["l"="22.563,29.512"]
"PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0" ["l"="29.331,32.796"]
"prateekguptaiiitk/Resume_Filtering" ["l"="28.665,32.518"]
"meghnalohani/Resume-Scoring-using-NLP" ["l"="28.707,32.528"]
"srbhr/Naive-Resume-Matching" ["l"="28.689,32.516"]
"Stonesjtu/Pytorch-NCE" ["l"="30.483,33.076"]
"demelin/Noise-Contrastive-Estimation-NCE-for-pyTorch" ["l"="30.506,33.091"]
"rafaljozefowicz/lm" ["l"="27.139,34.476"]
"hit-computer/SC-LSTM" ["l"="28.871,28.922"]
"paulx3/keras_generative_pg" ["l"="29.705,32.159"]
"leechihahchiu/DRLParaphrase" ["l"="29.674,32.12"]
"arvind385801/paraphraseGen" ["l"="29.678,32.138"]
"malllabiisc/DiPS" ["l"="29.655,32.12"]
"lancopku/WEAN" ["l"="28.169,33.615"]
"clab/rnng" ["l"="27.552,32.819"]
"XMUNLP/Tagger" ["l"="31.538,31.374"]
"yet-another-account/openwebtext" ["l"="29.982,32.247"]
"bigscience-workshop/bigscience" ["l"="27.619,31.192"]
"gregversteeg/LinearCorex" ["l"="29.267,32.827"]
"JasonKessler/Scattertext-PyData" ["l"="29.604,32.703"]
"fuzhenxin/textstyletransferdata" ["l"="29.858,32.111"]
"RishabhMaheshwary/hard-label-attack" ["l"="29.501,32.218"]
"badripatro/PQG" ["l"="29.596,32.161"]
"websymphony/paraphrasing-tool" ["l"="29.604,32.207"]
"ramsrigouthamg/Paraphrase-any-question-with-T5-Text-To-Text-Transfer-Transformer-" ["l"="29.635,32.236"]
"dev-chauhan/PQG-pytorch" ["l"="29.635,32.171"]
"wyu-du/Reinforce-Paraphrase-Generation" ["l"="29.627,32.159"]
"laubonghaudoi/paraphraser" ["l"="29.606,32.177"]
"tcxdgit/e2e-coref-old" ["l"="29.655,32.755"]
"luheng/deep_srl" ["l"="31.552,31.332"]
"lukewhyte/textpack" ["l"="29.274,32.669"]
"ing-bank/popmon" ["l"="25.662,34.139"]
"mzgubic/MINE" ["l"="28.843,33.031"]
"helmadik/LSJLogeion" ["l"="29.346,31.814"]
"harvardnlp/compound-pcfg" ["l"="27.606,32.814"]
"facebookresearch/higher" ["l"="23.721,35.458"]
"allenai/allentune" ["l"="28.559,30.751"]
"wangqiangneu/MT-PaperReading" ["l"="27.963,34.051"]
"xsocket/job" ["l"="28.518,32.589"]
"altraman00/hrweb" ["l"="28.523,32.577"]
"whcjimmy/lda2vec" ["l"="29.564,32.913"]
"thunlp/OpenDelta" ["l"="27.659,31.313"]
"jon-tow/cs224n" ["l"="30.079,32.967"]
"amaiya/ktrain" ["l"="29.619,32.514"]
"YingyuLiang/SIF" ["l"="30.01,32.873"]
"lajanugen/S2V" ["l"="25.542,30.667"]
"akanyaani/Illustrated_GPT2_With_Code" ["l"="30.193,32.177"]
"akanyaani/ranknet-tensorflow2.0" ["l"="30.193,32.163"]
"akanyaani/Phrase_Extraction_Bi-LSTM" ["l"="30.181,32.177"]
"Walleclipse/AGPC" ["l"="29.881,32.03"]
"RaRe-Technologies/movie-plots-by-genre" ["l"="29.302,31.402"]
"zhijing-jin/nlp-phd-global-equality" ["l"="23.655,33.003"]
"GT-SALT/MixText" ["l"="33.751,36.862"]
"yym6472/ConSERT" ["l"="32.253,30.355"]
"EdinburghNLP/XSum" ["l"="28.338,33.697"]
"squareRoot3/Target-Guided-Conversation" ["l"="28.263,29.101"]
"nschneid/amr-tutorial" ["l"="29.738,31.858"]
"amrisi/amr-guidelines" ["l"="29.766,31.868"]
"nschneid/amr-hackathon" ["l"="29.709,31.842"]
"snowblink14/smatch" ["l"="29.773,31.837"]
"goodmami/penman" ["l"="29.777,31.852"]
"eaclark07/sms" ["l"="29.824,32.606"]
"yg211/acl20-ref-free-eval" ["l"="28.312,33.814"]
"salesforce/factCC" ["l"="28.348,33.76"]
"google-research-datasets/sentence-compression" ["l"="29.81,32.905"]
"grammarly/gector" ["l"="31.523,28.606"]
"patil-suraj/question_generation" ["l"="26.007,29.955"]
"awasthiabhijeet/PIE" ["l"="31.536,28.579"]
"eske/multivec" ["l"="30.085,32.167"]
"JoeZJH/Labeled-LDA-Python" ["l"="30.588,33.858"]
"kk7nc/HDLTex" ["l"="30.29,30.48"]
"Marsrocky/Emotiw-Engagement-Prediction" ["l"="29.129,32.986"]
"NSchrading/intro-spacy-nlp" ["l"="29.612,32.957"]
"xdqkid/S2S-AMR-Parser" ["l"="29.762,31.801"]
"RikVN/AMR" ["l"="29.773,31.825"]
"amarasovic/interpretability-literature" ["l"="29.541,32.675"]
"LeoLaugier/conditional-auto-encoder-text-to-text-transfer-transformer" ["l"="29.746,32.14"]
"jind11/TitleStylist" ["l"="29.745,32.118"]
"thumt/THUCC" ["l"="30.06,32.253"]
"Glaceon31/Document-Transformer" ["l"="30.074,32.241"]
"Kyubyong/pytorch_exercises" ["l"="23.165,30.925"]
"timomernick/pytorch-capsule" ["l"="31.051,32.939"]
"probtorch/probtorch" ["l"="25.405,33.587"]
"adambielski/CapsNet-pytorch" ["l"="31.06,32.925"]
"QuantScientist/Deep-Learning-Boot-Camp" ["l"="23.312,30.962"]
"CalculatedContent/WeightWatcher" ["l"="29.471,32.463"]
"f-dangel/cockpit" ["l"="23.942,34.361"]
"clementchadebec/benchmark_VAE" ["l"="23.638,30.231"]
"NannyML/nannyml" ["l"="25.559,34.156"]
"mosaicml/composer" ["l"="34.285,35.974"]
"archinetai/surgeon-pytorch" ["l"="34.147,36.114"]
"patrick-kidger/equinox" ["l"="23.462,33.775"]
"aimhubio/aim" ["l"="25.402,34.165"]
"patrick-kidger/torchtyping" ["l"="34.237,35.935"]
"obsei/obsei" ["l"="29.365,32.428"]
"gradsflow/gradsflow" ["l"="29.211,32.376"]
"minimaxir/autotweet-from-googlesheet" ["l"="30.288,32.332"]
"surmenok/TextSum" ["l"="28.316,33.508"]
"theamrzaki/text_summurization_abstractive_methods" ["l"="28.327,33.613"]
"chen0040/keras-text-summarization" ["l"="28.343,33.576"]
"Sarasra/models" ["l"="31.013,32.984"]
"openai/gradient-checkpointing" ["l"="27.562,35.345"]
"hannw/nlstm" ["l"="30.407,32.591"]
"arogozhnikov/python3_with_pleasure" ["l"="22.851,4.23"]
"sjchoi86/advanced-tensorflow" ["l"="44.683,-14.863"]
"Mrgemy95/visual-interaction-networks-pytorch" ["l"="24.173,34.619"]
"astorfi/TensorFlow-World-Resources" ["l"="23.385,31.205"]
"sjchoi86/bayes-nn" ["l"="24.051,34.614"]
"khanrc/tf.gans-comparison" ["l"="33.746,32.655"]
"mind/wheels" ["l"="34.113,35.17"]
"naturomics/CapsNet-Tensorflow" ["l"="30.98,32.964"]
"taehoonlee/tensornets" ["l"="27.52,35.299"]
"hunkim/deep_architecture_genealogy" ["l"="44.733,-14.878"]
"JohnSnowLabs/nlptest" ["l"="29.437,32.605"]
"JohnSnowLabs/spark-ocr-workshop" ["l"="29.483,32.588"]
"alexander-n-thomas/spark-nlp-book" ["l"="29.496,32.596"]
"dmis-lab/biobert" ["l"="28.965,30.59"]
"facebookresearch/randsent" ["l"="28.163,32.644"]
"alexandra-chron/siatl" ["l"="29.745,32.437"]
"dair-ai/awesome-research-proposals-guide" ["l"="29.477,32.655"]
"dair-ai/awesome-ML-projects-guide" ["l"="29.457,32.66"]
"dair-ai/notebooks" ["l"="29.523,32.642"]
"kabirkhan/recon" ["l"="29.438,32.579"]
"pemistahl/lingua" ["l"="29.576,32.65"]
"carrotsearch/langid-java" ["l"="29.583,32.638"]
"rmtheis/language-detection" ["l"="29.555,32.657"]
"bjascob/amrlib" ["l"="29.761,31.851"]
"SapienzaNLP/spring" ["l"="29.739,31.847"]
"IBM/transition-amr-parser" ["l"="29.757,31.838"]
"bjascob/amrlib-models" ["l"="29.739,31.825"]
"naver/nlp-challenge" ["l"="44.424,-14.992"]
"maxoodf/word2vec" ["l"="26.709,34.015"]
"ycjuan/libffm" ["l"="22.768,37.229"]
"lambdaji/tf_repos" ["l"="22.729,37.197"]
"lemin0922/EmotiW-2018" ["l"="29.121,33.026"]
"EvelynFan/DSN" ["l"="29.089,33.01"]
"kiankd/events" ["l"="29.537,32.846"]
"AkariAsai/CORA" ["l"="29.725,32.151"]
"AkariAsai/XORQA" ["l"="29.741,32.188"]
"Unbabel/MT-Telescope" ["l"="29.82,32.224"]
"google-research/mt-metrics-eval" ["l"="29.845,32.181"]
"zhengxxn/adaptive-knn-mt" ["l"="25.884,29.393"]
"wmt-conference/wmt22-news-systems" ["l"="29.832,32.232"]
"vncorenlp/VnCoreNLP" ["l"="-11.503,-4.052"]
"VinAIResearch/PhoBERT" ["l"="-11.518,-4.036"]
"VinAIResearch/PhoNLP" ["l"="-11.494,-4.073"]
"binhvq/news-corpus" ["l"="-11.542,-4.074"]
"trungtv/pyvi" ["l"="-11.514,-4.07"]
"MLSysOps/Active-Learning-as-a-Service" ["l"="29.386,32.478"]
"TimSchopf/KeyphraseVectorizers" ["l"="29.369,32.463"]
"neulab/InterpretEval" ["l"="29.501,32.36"]
"timoschick/dino" ["l"="27.825,31.375"]
"sinantie/NeuralAmr" ["l"="29.826,31.863"]
"freesunshine0316/semantic-nmt" ["l"="29.853,31.86"]
"freesunshine0316/nary-grn" ["l"="30.679,30.97"]
"Amazing-J/structural-transformer" ["l"="29.872,31.854"]
"pemywei/attention-nmt" ["l"="30.317,32.435"]
"pemywei/basic-encoder-decoder" ["l"="30.349,32.427"]
"LaxmiChaudhary/Amzon-Product-Recommendation" ["l"="29.374,32.288"]
"michaelbull/kotlin-retry" ["l"="47.95,-3.425"]
"ajalt/mordant" ["l"="47.951,-3.509"]
"JetBrains/KotlinDL" ["l"="47.889,-3.552"]
"sksamuel/hoplite" ["l"="47.936,-3.481"]
"Helsinki-NLP/Tatoeba-Challenge" ["l"="29.83,32.305"]
"jimth001/formality_emnlp19" ["l"="29.802,32.081"]
"batzner/indrnn" ["l"="30.43,32.554"]
"summarization/semantic_summ" ["l"="29.777,31.779"]
"sheffieldnlp/AMR2Text-summ" ["l"="29.77,31.751"]
"ian-beaver/pycontractions" ["l"="29.405,32.849"]
"ines/spacy-js" ["l"="29.689,33.157"]
"neelkamath/spacy-server" ["l"="29.638,33.172"]
"ines/spacy-graphql" ["l"="29.632,33.229"]
"hellohaptik/spello" ["l"="29.306,32.044"]
"viraja1/mitm_postman" ["l"="29.355,32.064"]
"explosion/talks" ["l"="29.592,32.973"]
"troublemaker-r/Chinese_Coreference_Resolution" ["l"="29.574,32.73"]
"vdobrovolskii/wl-coref" ["l"="29.58,32.713"]
"thunlp/CorefBERT" ["l"="29.595,32.715"]
"zhangzx-uiuc/AMR-IE" ["l"="29.735,31.806"]
"alexeyev/Keras-Generating-Sentences-from-a-Continuous-Space" ["l"="30.004,32.023"]
"mdtux89/amr-evaluation" ["l"="29.782,31.814"]
"kawine/usif" ["l"="29.639,32.65"]
"neubig/kytea" ["l"="25.501,31.617"]
"ymym3412/acl-papers" ["l"="25.709,31.801"]
"KrisKorrel/sparsemax-pytorch" ["l"="29.814,32.183"]
"vene/sparse-structured-attention" ["l"="29.833,32.206"]
"gokceneraslan/SparseMax.torch" ["l"="29.794,32.112"]
"factorie/factorie" ["l"="9.566,24.76"]
"aritter/twitter_nlp" ["l"="25.641,30.892"]
"lintool/Mr.LDA" ["l"="26.744,33.981"]
"datumbox/datumbox-framework" ["l"="10.512,26.237"]
"kristjankorjus/applied-deep-learning-resources" ["l"="23.538,31.302"]
"leriomaggio/deep-learning-keras-euroscipy2016" ["l"="30.916,31.525"]
"deepmind/ithaca" ["l"="29.248,31.798"]
"facebookresearch/StyleNeRF" ["l"="33.21,33.051"]
"dphi-official/Data_Science_Bootcamp" ["l"="29.547,33.18"]
"dphi-official/Machine_Learning_Bootcamp" ["l"="29.563,33.175"]
"pycaret/pycaret-demo-dphi" ["l"="29.555,33.196"]
"dphi-official/Deep_Learning_Bootcamp" ["l"="29.568,33.15"]
"dphi-official/Datasets" ["l"="29.528,33.208"]
"explosion/srsly" ["l"="29.54,32.74"]
"explosion/spacy-stanfordnlp" ["l"="29.132,30.742"]
"patrickjquinn/P-Brain.ai-RasPi" ["l"="29.761,33.18"]
"SwordYork/DCNMT" ["l"="30.145,32.258"]
"riedlma/topictiling" ["l"="28.889,32.368"]
"emjotde/amunmt" ["l"="30.056,32.309"]
"kyunghyuncho/dl4mt-material" ["l"="30.114,32.375"]
"mila-udem/blocks-examples" ["l"="27.097,34.194"]
"TobiasLee/SeqGAN_Poem" ["l"="30.091,32.092"]
"raymondhs/constrained-levt" ["l"="30.07,32.181"]
"chilynn/sequence-labeling" ["l"="32.18,29.981"]
"vrenkens/nabu" ["l"="0.7,39.763"]
"TalLinzen/rnn_agreement" ["l"="29.71,32.228"]
"pitrack/incremental-coref" ["l"="29.535,32.695"]
"cohure/CoHuRe" ["l"="29.382,32.685"]
"rtmdrr/testSignificanceNLP" ["l"="27.794,31.527"]
"gregdurrett/berkeley-entity" ["l"="25.411,30.924"]
"zibeu/Independently-Recurrent-Neural-Network---IndRNN" ["l"="30.509,32.579"]
"siegfang/word2vec" ["l"="31.718,30.265"]
"XiaoYee/emotion_classification" ["l"="29.1,33.077"]
"NickShahML/tensorflow_with_latest_papers" ["l"="27.088,34.429"]
"jacoxu/encoder_decoder" ["l"="31.241,31.591"]
"neulab/Text-Summarization-Papers" ["l"="28.328,33.693"]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["l"="32.435,30.015"]
"clab/cnn" ["l"="30.13,32.425"]
"clab/lstm-parser" ["l"="27.507,32.773"]
"elikip/bist-parser" ["l"="27.469,32.786"]
"carrotflakes/seqgan-text-tensorflow" ["l"="30.065,32.142"]
"lium-lst/wmt17-mmt" ["l"="30.097,32.334"]
"chrishokamp/dl4mt_exercises" ["l"="30.127,32.344"]
"cmu-mtlab/meteor" ["l"="30.052,32.219"]
"redpony/cdec" ["l"="25.743,30.803"]
"JonathanRaiman/glove" ["l"="30.261,32.894"]
"Babylonpartners/fastText_multilingual" ["l"="29.966,32.578"]
"mfaruqui/crosslingual-cca" ["l"="29.983,32.7"]
"google/vae-seq" ["l"="22.775,35.269"]
"kefirski/hybrid_rvae" ["l"="29.889,32.111"]
"artpar/languagecrunch" ["l"="29.616,33.281"]
"DeNeutoy/spacy-vis" ["l"="29.803,29.159"]
"ines/spacymoji" ["l"="29.632,33.264"]
"MultiPath/NA-NMT" ["l"="28.09,33.888"]
"TakeLab/spacy-udpipe" ["l"="27.379,32.533"]
"searchivarius/nmslib" ["l"="28.497,31.375"]
"szagoruyko/diracnets" ["l"="34.143,35.233"]
"twitter/torch-autograd" ["l"="26.939,34.298"]
"tangxingwang/yousan.ai" ["l"="29.013,32.894"]
"KenHBS/LDA_thesis" ["l"="29.48,32.82"]
"blei-lab/hlda" ["l"="30.613,34.001"]
"guillaume-chevalier/GloVe-as-a-TensorFlow-Embedding-Layer" ["l"="30.26,32.873"]
"carpedm20/neural-summary-tensorflow" ["l"="27.131,34.409"]
"sayef/fsner" ["l"="29.354,32.517"]
"pbloem/former" ["l"="29.858,32.439"]
"kheyer/Genomic-ULMFiT" ["l"="28.98,35.075"]
"dpressel/dliss-tutorial" ["l"="28.046,32.533"]
"gordicaleksa/pytorch-original-transformer" ["l"="33.78,28.865"]
"Pandora-Intelligence/fast-sentence-transformers" ["l"="29.362,32.537"]
"SapienzaNLP/extend" ["l"="32.68,30.288"]
"fuzhenxin/Personal-Emotional-Stylized-Dialog" ["l"="28.241,29.112"]
"IBM/zshot" ["l"="29.322,32.515"]
"IBM/hspo-ontology" ["l"="29.275,32.514"]
"XiaoyuanYi/StyIns" ["l"="29.759,32.1"]
"lovecambi/qebrain" ["l"="29.864,32.196"]
"sheffieldnlp/deepQuest" ["l"="29.876,32.197"]
"facebookresearch/mlqe" ["l"="29.853,32.213"]
"ghpaetzold/questplusplus" ["l"="29.879,32.184"]
"xlniu/Quality-Estimation1" ["l"="29.856,32.203"]
"Unbabel/KiwiCutter" ["l"="29.891,32.23"]
"xlniu/Quality-Estimation2" ["l"="29.856,32.181"]
"llyx97/TAMT" ["l"="29.499,32.323"]
"goru001/nlp-for-hindi" ["l"="29.449,32.154"]
"theainerd/MLInterview" ["l"="23.882,30.484"]
"goru001/nlp-for-sanskrit" ["l"="29.496,32.19"]
"ccccsy99/resume-parse-python" ["l"="28.537,32.608"]
"orgatAI/resume-parse-python" ["l"="28.538,32.575"]
"lietou1986/xparser" ["l"="28.494,32.588"]
"Agwave/PDF-Resume-Information-Extraction" ["l"="28.515,32.61"]
"dair-ai/keep-learning-ml" ["l"="29.557,32.639"]
"dair-ai/dair-ai.github.io" ["l"="29.489,32.673"]
"machinalis/yalign" ["l"="30.039,32.18"]
"FrancisGregoire/parSentExtract" ["l"="30.081,32.142"]
"dipanjanS/transformers_nlp_essentials" ["l"="29.683,32.972"]
"dipanjanS/nlp_crash_course_plugin20" ["l"="29.683,32.995"]
"dphi-official/nlp_essentials" ["l"="29.622,33.054"]
"ofirnachum/tree_rnn" ["l"="27.266,34.425"]
"facebook/SCRNNs" ["l"="26.999,34.268"]
"joshua-decoder/joshua" ["l"="25.743,30.824"]
"amansrivastava17/embedding-as-service" ["l"="29.267,32.015"]
"nearai/pytorch-tools" ["l"="30.205,32.379"]
"kevinduh/san_mrc" ["l"="25.961,30.207"]
"blackredscarf/pytorch-SkipGram" ["l"="30.398,32.965"]
"yassouali/fast.ai_notes" ["l"="29.196,32.742"]
"indic-transliteration/indic_transliteration_py" ["l"="29.472,32.094"]
"anoopkunchukuttan/crowd-indic-transliteration-data" ["l"="29.445,32.1"]
"AI4Bharat/IndianNLP-Transliteration" ["l"="29.487,32.112"]
"sanskrit/sanskrit" ["l"="29.496,32.075"]
"linzhk/Tianchi-Text-Classification-Counter-Attack-Project" ["l"="29.413,32.233"]
"thunlp/XQA" ["l"="29.762,32.233"]
"facebookresearch/reconsider" ["l"="25.787,29.33"]
"sdispater/mixology" ["l"="30.007,33.106"]
"Pandora-Intelligence/classy-classification" ["l"="29.358,32.559"]
"swabhs/scaffolding" ["l"="29.743,32.245"]
"vered1986/lexcomp" ["l"="29.762,32.267"]
"Wendison/VQMIVC" ["l"="0.297,40.106"]
"mfederici/Multi-View-Information-Bottleneck" ["l"="28.847,33.11"]
"MehdiZouitine/Learning-Disentangled-Representations-via-Mutual-Information-Estimation" ["l"="28.826,33.082"]
"modernmt/modernmt" ["l"="9.416,-36.112"]
"M4t1ss/parallel-corpora-tools" ["l"="29.909,32.229"]
"DNE-Digital/dolores" ["l"="30.388,32.22"]
"neomatrix369/nlp_profiler" ["l"="24.041,30.591"]
"Open-Speech-EkStep/vakyansh-wav2vec2-experimentation" ["l"="29.462,32.047"]
"Open-Speech-EkStep/audio-to-speech-pipeline" ["l"="29.444,32.05"]
"google/language-resources" ["l"="0.624,40.274"]
"Savvysherpa/slda" ["l"="29.413,32.662"]
"WZBSocialScienceCenter/tmtoolkit" ["l"="29.394,32.699"]
"williamleif/histwords" ["l"="30.915,34.103"]
"allenai/allennlp-as-a-library-example" ["l"="28.651,30.763"]
"epwalsh/nlp-models" ["l"="29.598,32.306"]
"g8a9/ferret" ["l"="29.43,32.453"]
"pytorch/captum" ["l"="34.22,35.754"]
"PyTorchLightning/lightning-transformers" ["l"="34.218,36.01"]
"hila-chefer/Transformer-Explainability" ["l"="34.612,35.95"]
"ChanBong/s4-jax" ["l"="29.179,32.802"]
"ilopezfr/gpt-2" ["l"="30.186,32.196"]
"Huffon/sentence-similarity" ["l"="29.631,32.984"]
"ArushiSinghal/Neural-Machine-Translation-English-Hindi-for-domain-data" ["l"="29.477,32.134"]
"Machine-Learning-Tokyo/Math_resources" ["l"="23.951,30.577"]
"robertostling/efmaral" ["l"="29.846,32.232"]
"abhimishra91/insight" ["l"="23.022,31.96"]
"PacktPublishing/Transformers-for-Natural-Language-Processing" ["l"="33.496,28.804"]
"abhishekkrthakur/approaching_almost_nlp" ["l"="23.82,30.265"]
"graviraja/100-Days-of-NLP" ["l"="23.14,35.825"]
"lyoshiwo/resume_job_matching" ["l"="28.582,32.542"]
"Juicechuan/AMRParsing" ["l"="29.793,31.805"]
"Oneplus/tamr" ["l"="29.816,31.825"]
"allenai/mmda" ["l"="29.274,32.438"]
"pmichel31415/translate" ["l"="29.57,32.172"]
"facebookresearch/stopes" ["l"="29.849,32.246"]
"shanybar/event_entity_coref_ecb_plus" ["l"="29.508,32.878"]
"prafulla77/ACL-2018-Event-Coreference" ["l"="29.521,32.869"]
"yuchenlin/OntoNotes-5.0-NER-BIO" ["l"="32.443,29.991"]
"yhcc/OntoNotes-5.0-NER" ["l"="32.45,30.071"]
"SeojinBang/VIBI" ["l"="28.848,33.13"]
"zhuchen03/VIBNet" ["l"="28.83,33.102"]
"makezur/VIB_pytorch" ["l"="28.869,33.123"]
"yuanqidu/GraphGT" ["l"="29.056,32.454"]
"yuanqidu/awesome-graph-generation" ["l"="29.029,32.452"]
"NirantK/hindi2vec" ["l"="29.412,32.104"]
"dthiagarajan/word2vec-pytorch" ["l"="30.391,32.949"]
"vladsandulescu/phrases" ["l"="29.583,32.919"]
"ryokamoi/hybrid_textvae" ["l"="29.966,32.007"]
"robinsloan/sentence-space" ["l"="29.976,31.984"]
"ZhihongShao/Planning-based-Hierarchical-Variational-Model" ["l"="29.883,32.001"]
"Amin-Tgz/Awesome-TensorFlow-2" ["l"="28.977,32.849"]
"mukeshmithrakumar/Book_List" ["l"="-11.594,-3.841"]
"NLPCode/CBART" ["l"="29.924,32.028"]
"sphinxteam/dnner" ["l"="29,33.075"]
"stevenliuyi/information-bottleneck" ["l"="28.985,33.06"]
"adityashrm21/information-theory-deep-learning" ["l"="29.01,33.061"]
"artemyk/ibcurve" ["l"="29.014,33.046"]
"yuvalkirstain/s2e-coref" ["l"="29.564,32.747"]
"eladsegal/tag-based-multi-span-extraction" ["l"="26.135,30.177"]
"explosion/holmes-extractor" ["l"="29.298,32.52"]
"AudayBerro/automatedParaphrase" ["l"="29.602,32.224"]
"pcyin/pytorch_basic_nmt" ["l"="30.384,32.266"]
"sayakpaul/E2E-Object-Detection-in-TFLite" ["l"="28.787,32.862"]
"castorini/mr.tydi" ["l"="29.718,32.133"]
"kenkov/smt" ["l"="29.995,32.235"]
"clab/wikipedia-parallel-titles" ["l"="29.982,32.21"]
"odashi/mteval" ["l"="29.996,32.219"]
"deepmind/tensor_annotations" ["l"="29.677,31.976"]
"TropComplique/lda2vec-pytorch" ["l"="29.549,32.942"]
"facebookresearch/covost" ["l"="27.912,33.929"]
"kahne/SpeechTransProgress" ["l"="27.934,33.922"]
"sattree/gap" ["l"="29.622,32.798"]
"miyyer/rmn" ["l"="29.305,32.691"]
"sgsinclair/alta" ["l"="15.328,-30.813"]
"walshbr/humanists-nlp-cookbook" ["l"="29.325,32.674"]
"cmu-lib/dhlg" ["l"="22.775,-32.578"]
"YongfeiYan/Neural-Document-Modeling" ["l"="30.749,33.903"]
"silviatti/topic-model-diversity" ["l"="29.448,32.626"]
"estebandito22/PyTorchAVITM" ["l"="29.434,32.623"]
"MaartenGr/BERTopic_evaluation" ["l"="29.445,32.64"]
"maria-antoniak/little-mallet-wrapper" ["l"="25.134,-19.997"]
"ahoho/topics" ["l"="29.432,32.633"]
"qiang2100/STTM" ["l"="30.761,33.845"]
"maxent-ai/converse" ["l"="28.881,32.341"]
"cynxchen/deep-learning-mutual-info" ["l"="28.946,33.037"]
"ravidziv/Information-bottleneck" ["l"="28.97,33.077"]
"mrtnoshad/EDGE" ["l"="28.961,33.067"]
"ankit-ai/BertQA-Attention-on-Steroids" ["l"="26.021,30.197"]
"sheffieldnlp/mlqe-pe" ["l"="29.845,32.195"]
"titu1994/Nested-LSTM" ["l"="30.463,32.61"]
"aniketmaurya/chitra" ["l"="29.155,32.371"]
"jaswinder9051998/zoofs" ["l"="29.157,32.347"]
"phbraga/phmb4-risethesis-template" ["l"="29.14,32.612"]
"bebetocf/ssl-dataset" ["l"="29.113,32.614"]
"Soonhwan-Kwon/capsnet.mxnet" ["l"="30.202,32.284"]
"ariecattan/coref" ["l"="29.481,32.908"]
"leehanchung/cs224n" ["l"="30.109,33.023"]
"huanghuidmml/tfbert" ["l"="29.346,32.181"]
"DeligientSloth/AdversialNLP" ["l"="29.362,32.189"]
"benbo/interactive-weak-supervision" ["l"="29.281,32.463"]
"kaiwang960112/EmotiW_2019_engagement_regression" ["l"="29.143,33.001"]
"RockyLzy/TextDefender" ["l"="29.441,32.196"]
"dugu9sword/dne" ["l"="29.464,32.21"]
"h3lio5/episodic-lifelong-learning" ["l"="29.786,32.002"]
"h3lio5/gan-pytorch" ["l"="29.796,32.039"]
"largelymfs/paragraph2vec" ["l"="30.113,32.893"]
"hassyGo/paragraph-vector" ["l"="30.105,32.88"]
"wojzaremba/lstm" ["l"="27.004,34.299"]
"openeventdata/petrarch" ["l"="29.496,32.853"]
"code-kern-ai/kern-python" ["l"="29.363,32.446"]
"SapienzaNLP/gsrl" ["l"="29.718,31.826"]
"UKPLab/plms-graph2text" ["l"="29.935,31.931"]
"thu-coai/JointGT" ["l"="29.949,31.897"]
"LiyingCheng95/EntityDescriptionGeneration" ["l"="29.959,31.924"]
"shyamupa/biling-survey" ["l"="29.99,32.754"]
"doccano/doccano-client" ["l"="29.194,32.569"]
"equester/mlops-plugin_2020" ["l"="29.681,33.02"]
"google/wmt-mqm-human-evaluation" ["l"="29.867,32.124"]
"lishaofeng/NLP_Backdoor" ["l"="29.337,32.214"]
"lvyiwei1/StylePTB" ["l"="29.703,32.172"]
"thunlp/StyleAttack" ["l"="29.381,32.252"]
"muyeby/AMR-Dialogue" ["l"="29.834,31.826"]
"jiajunzhangnlp/EUREKA-MangoNMT" ["l"="33.498,37.579"]
"microsoft/spacy-ann-linker" ["l"="25.54,29.315"]
"elvisyjlin/RelGAN-PyTorch" ["l"="30.046,32.037"]
"alvinchangw/COCON_ICLR2021" ["l"="30.114,32.007"]
"FreddeFrallan/Non-Residual-Prompting" ["l"="30.135,31.979"]
"qe-team/marmot" ["l"="29.88,32.138"]
"JunjieHu/CEQE" ["l"="29.879,32.175"]
"naver/gdc" ["l"="30.122,31.943"]
"yangkevin2/naacl-2021-fudge-controlled-generation" ["l"="30.101,31.985"]
"shizhouxing/Robustness-Verification-for-Transformers" ["l"="29.493,32.235"]
"marylou-gabrie/learning-synthetic-data" ["l"="29,33.094"]
"alisawuffles/DExperts" ["l"="30.095,32.026"]
"FilippoC/diffdp" ["l"="27.632,32.793"]
"lietou1986/lietou1986.github.io" ["l"="28.477,32.578"]
"lietou1986/dorado" ["l"="28.468,32.588"]
"lietou1986/len-vscode-theme" ["l"="28.478,32.597"]
"Pinafore/qb" ["l"="30.41,32.83"]
"sodawater/GraphTransformer" ["l"="29.903,31.88"]
"KennethEnevoldsen/spacy-wrap" ["l"="29.331,32.579"]
"dongxinshuai/ASCC" ["l"="29.484,32.221"]
"PerseusDL/treebank_data" ["l"="29.315,31.812"]
"HKUST-KnowComp/Pronoun-Coref" ["l"="29.574,32.758"]
"willylulu/RelGAN" ["l"="30.052,32"]
"BCV-Uniandes/SMIT" ["l"="30.07,32.005"]
"lemin0922/TAGM_pytorch" ["l"="29.129,33.042"]
"jhclark/tercom" ["l"="29.871,32.087"]
"GreySec-Security-Forums/PENTESTING-BIBLE" ["l"="30.321,32.29"]
}