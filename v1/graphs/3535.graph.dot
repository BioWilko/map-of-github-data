digraph G {
"jiangnanboy/learning_to_rank" -> "liyinxiao/LambdaRankNN"
"jiangnanboy/learning_to_rank" -> "jma127/pyltr"
"jiangnanboy/learning_to_rank" -> "lezzago/LambdaMart"
"jiangnanboy/learning_to_rank" -> "myeclipse/wsdm_cup_2020_solution"
"jiangnanboy/learning_to_rank" -> "ChenglongChen/tensorflow-LTR"
"Isminoula/DL-to-Rank" -> "aseveryn/deep-qa"
"allegro/allRank" -> "wildltr/ptranking"
"allegro/allRank" -> "ULTR-Community/ULTRA"
"allegro/allRank" -> "tensorflow/ranking" ["e"=1]
"allegro/allRank" -> "haowei01/pytorch-examples"
"allegro/allRank" -> "houchenyu/L2R"
"allegro/allRank" -> "shiba24/learning2rank"
"allegro/allRank" -> "nyu-dl/dl4marco-bert" ["e"=1]
"allegro/allRank" -> "texttron/tevatron" ["e"=1]
"allegro/allRank" -> "jma127/pyltr"
"allegro/allRank" -> "castorini/pygaggle" ["e"=1]
"allegro/allRank" -> "rjagerman/pytorchltr"
"allegro/allRank" -> "acbull/Unbiased_LambdaMart"
"allegro/allRank" -> "luyug/Reranker" ["e"=1]
"allegro/allRank" -> "microsoft/ANCE" ["e"=1]
"allegro/allRank" -> "thunlp/OpenMatch" ["e"=1]
"rank2rec/rerank" -> "rec-agent/drr"
"discobot/LambdaMart" -> "discobot/kafka"
"discobot/LambdaMart" -> "discobot/wiki_crawl"
"discobot/LambdaMart" -> "discobot/fire-mr"
"discobot/LambdaMart" -> "discobot/ml-handbook"
"discobot/LambdaMart" -> "discobot/hse2015_nets"
"discobot/LambdaMart" -> "discobot/kazoo"
"discobot/LambdaMart" -> "discobot/dotfiles"
"discobot/LambdaMart" -> "discobot/hashcode-practice"
"discobot/LambdaMart" -> "discobot/NER-MEHMM"
"discobot/LambdaMart" -> "discobot/docsify-katex"
"pl8787/MatchPyramid-TensorFlow" -> "pl8787/textnet-release"
"pl8787/MatchPyramid-TensorFlow" -> "ChenglongChen/tensorflow-DSMM"
"pl8787/MatchPyramid-TensorFlow" -> "NTSC-Community/awaresome-neural-models-for-semantic-match" ["e"=1]
"pl8787/MatchPyramid-TensorFlow" -> "faneshion/DRMM"
"pl8787/MatchPyramid-TensorFlow" -> "galsang/ABCNN"
"nlpaueb/deep-relevance-ranking" -> "faneshion/HiNT"
"acbull/Unbiased_LambdaMart" -> "QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation"
"acbull/Unbiased_LambdaMart" -> "ULTR-Community/ULTRA"
"acbull/Unbiased_LambdaMart" -> "lezzago/LambdaMart"
"shiba24/learning2rank" -> "jma127/pyltr"
"shiba24/learning2rank" -> "airalcorn2/RankNet"
"shiba24/learning2rank" -> "ChenglongChen/tensorflow-LTR"
"shiba24/learning2rank" -> "andreweskeclarke/learning-rank-public"
"shiba24/learning2rank" -> "lezzago/LambdaMart"
"shiba24/learning2rank" -> "houchenyu/L2R"
"shiba24/learning2rank" -> "tensorflow/ranking" ["e"=1]
"shiba24/learning2rank" -> "fullflu/learning-to-rank"
"shiba24/learning2rank" -> "zhangzibin/PairCNN-Ranking"
"shiba24/learning2rank" -> "QingyaoAi/Deep-Listwise-Context-Model-for-Ranking-Refinement"
"shiba24/learning2rank" -> "jattenberg/RankLib"
"shiba24/learning2rank" -> "mottalrd/learning-to-rank"
"shiba24/learning2rank" -> "wildltr/ptranking"
"shiba24/learning2rank" -> "acbull/Unbiased_LambdaMart"
"shiba24/learning2rank" -> "Isminoula/DL-to-Rank"
"HsiaoYetGun/ESIM" -> "EternalFeather/ESIM"
"yinwenpeng/Attentive_Convolution" -> "yinwenpeng/Answer_Selection"
"yinwenpeng/Attentive_Convolution" -> "hanxiao/tf-attentive-conv"
"yinwenpeng/Answer_Selection" -> "yinwenpeng/Attentive_Convolution"
"yinwenpeng/Answer_Selection" -> "hanxiao/tf-attentive-conv"
"yinwenpeng/Answer_Selection" -> "galsang/ABCNN"
"markovi/PyClick" -> "varepsilon/clickmodels"
"markovi/PyClick" -> "ULTR-Community/ULTRA"
"markovi/PyClick" -> "cvangysel/pytrec_eval" ["e"=1]
"markovi/PyClick" -> "THUIR/PSCMModel"
"markovi/PyClick" -> "HarrieO/OnlineLearningToRank"
"markovi/PyClick" -> "sebastian-hofstaetter/transformer-kernel-ranking" ["e"=1]
"markovi/PyClick" -> "o19s/hello-ltr" ["e"=1]
"markovi/PyClick" -> "castorini/Anserini" ["e"=1]
"lezzago/LambdaMart" -> "houchenyu/L2R"
"lezzago/LambdaMart" -> "jma127/pyltr"
"lezzago/LambdaMart" -> "discobot/LambdaMart"
"lezzago/LambdaMart" -> "sophwats/XGBoost-lambdaMART"
"lezzago/LambdaMart" -> "shiba24/learning2rank"
"lezzago/LambdaMart" -> "acbull/Unbiased_LambdaMart"
"lezzago/LambdaMart" -> "ChenglongChen/tensorflow-LTR"
"lezzago/LambdaMart" -> "airalcorn2/RankNet"
"lezzago/LambdaMart" -> "QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation"
"varepsilon/clickmodels" -> "markovi/PyClick"
"varepsilon/clickmodels" -> "THUIR/PSCMModel"
"varepsilon/clickmodels" -> "wikimedia/search-MjoLniR"
"airalcorn2/RankNet" -> "shiba24/learning2rank"
"airalcorn2/RankNet" -> "ChenglongChen/tensorflow-LTR"
"airalcorn2/RankNet" -> "houchenyu/L2R"
"airalcorn2/RankNet" -> "haowei01/pytorch-examples"
"airalcorn2/RankNet" -> "jma127/pyltr"
"airalcorn2/RankNet" -> "ptl2r/ptl2r.github.io"
"airalcorn2/RankNet" -> "airalcorn2/Solr-LTR" ["e"=1]
"airalcorn2/RankNet" -> "liyinxiao/LambdaRankNN"
"airalcorn2/RankNet" -> "lezzago/LambdaMart"
"airalcorn2/RankNet" -> "yanshanjing/RankNet-Pytorch"
"airalcorn2/RankNet" -> "andreweskeclarke/learning-rank-public"
"airalcorn2/RankNet" -> "bigdong89/xgboostExtension"
"airalcorn2/RankNet" -> "ShaoQiBNU/RankNet"
"airalcorn2/RankNet" -> "eggie5/RankNet"
"airalcorn2/RankNet" -> "justicevita/RankNet-Keras"
"wildltr/ptranking" -> "allegro/allRank"
"wildltr/ptranking" -> "ULTR-Community/ULTRA"
"wildltr/ptranking" -> "shiba24/learning2rank"
"wildltr/ptranking" -> "liyinxiao/LambdaRankNN"
"wildltr/ptranking" -> "haowei01/pytorch-examples"
"wildltr/ptranking" -> "ermongroup/pirank"
"ChenglongChen/tensorflow-LTR" -> "andreweskeclarke/learning-rank-public"
"ChenglongChen/tensorflow-LTR" -> "airalcorn2/RankNet"
"ChenglongChen/tensorflow-LTR" -> "shiba24/learning2rank"
"ChenglongChen/tensorflow-LTR" -> "jma127/pyltr"
"ChenglongChen/tensorflow-LTR" -> "liyinxiao/LambdaRankNN"
"ChenglongChen/tensorflow-LTR" -> "lezzago/LambdaMart"
"ChenglongChen/tensorflow-LTR" -> "ChenglongChen/tensorflow-DSMM"
"ChenglongChen/tensorflow-LTR" -> "akanyaani/ranknet-tensorflow2.0" ["e"=1]
"ChenglongChen/tensorflow-LTR" -> "QingyaoAi/Deep-Listwise-Context-Model-for-Ranking-Refinement"
"ChenglongChen/tensorflow-LTR" -> "zhangzibin/PairCNN-Ranking"
"ChenglongChen/tensorflow-LTR" -> "houchenyu/L2R"
"andreweskeclarke/learning-rank-public" -> "ChenglongChen/tensorflow-LTR"
"andreweskeclarke/learning-rank-public" -> "mzhang001/tfranknet"
"jma127/pyltr" -> "shiba24/learning2rank"
"jma127/pyltr" -> "lezzago/LambdaMart"
"jma127/pyltr" -> "airalcorn2/RankNet"
"jma127/pyltr" -> "ChenglongChen/tensorflow-LTR"
"jma127/pyltr" -> "tensorflow/ranking" ["e"=1]
"jma127/pyltr" -> "jiangnanboy/learning_to_rank"
"jma127/pyltr" -> "andreweskeclarke/learning-rank-public"
"jma127/pyltr" -> "mottalrd/learning-to-rank"
"jma127/pyltr" -> "fullflu/learning-to-rank"
"jma127/pyltr" -> "discobot/LambdaMart"
"jma127/pyltr" -> "Isminoula/DL-to-Rank"
"jma127/pyltr" -> "markovi/PyClick"
"jma127/pyltr" -> "acbull/Unbiased_LambdaMart"
"jma127/pyltr" -> "houchenyu/L2R"
"jma127/pyltr" -> "zhangzibin/PairCNN-Ranking"
"galsang/ABCNN" -> "yinwenpeng/Answer_Selection"
"galsang/ABCNN" -> "ChenglongChen/tensorflow-DSMM"
"galsang/ABCNN" -> "pl8787/MatchPyramid-TensorFlow"
"galsang/ABCNN" -> "yinwenpeng/Attentive_Convolution"
"galsang/ABCNN" -> "zhiguowang/BiMPM" ["e"=1]
"galsang/ABCNN" -> "phdowling/abcnn-keras"
"galsang/ABCNN" -> "flrngel/Self-Attentive-tensorflow" ["e"=1]
"zhaosm/dssm-lstm" -> "xubaochuan/dssm"
"NTMC-Community/awaresome-neural-models-for-semantic-match" -> "ChenglongChen/tensorflow-DSMM"
"houchenyu/L2R" -> "lezzago/LambdaMart"
"houchenyu/L2R" -> "airalcorn2/RankNet"
"houchenyu/L2R" -> "haowei01/pytorch-examples"
"liyinxiao/LambdaRankNN" -> "liyinxiao/Ranking_Papers"
"QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation" -> "acbull/Unbiased_LambdaMart"
"QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation" -> "ULTR-Community/ULTRA"
"zhangzibin/PairCNN-Ranking" -> "shashankg7/Keras-CNN-QA"
"zhangzibin/PairCNN-Ranking" -> "aseveryn/deep-qa"
"zhangzibin/PairCNN-Ranking" -> "pl8787/MatchPyramid-TensorFlow"
"zhangzibin/PairCNN-Ranking" -> "andreweskeclarke/learning-rank-public"
"zhangzibin/PairCNN-Ranking" -> "shiba24/learning2rank"
"zhangzibin/PairCNN-Ranking" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"laming-chen/fast-map-dpp" -> "rec-agent/drr"
"ChenglongChen/tensorflow-DSMM" -> "pl8787/MatchPyramid-TensorFlow"
"ChenglongChen/tensorflow-DSMM" -> "galsang/ABCNN"
"ChenglongChen/tensorflow-DSMM" -> "HsiaoYetGun/ESIM"
"ChenglongChen/tensorflow-DSMM" -> "InsaneLife/dssm" ["e"=1]
"ChenglongChen/tensorflow-DSMM" -> "NTMC-Community/awaresome-neural-models-for-semantic-match"
"ChenglongChen/tensorflow-DSMM" -> "pengming617/text_matching" ["e"=1]
"ChenglongChen/tensorflow-DSMM" -> "zhaosm/dssm-lstm"
"ChenglongChen/tensorflow-DSMM" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"ChenglongChen/tensorflow-DSMM" -> "ChenglongChen/tensorflow-LTR"
"rec-agent/drr" -> "rank2rec/rerank"
"haowei01/pytorch-examples" -> "airalcorn2/RankNet"
"haowei01/pytorch-examples" -> "houchenyu/L2R"
"haowei01/pytorch-examples" -> "liyinxiao/LambdaRankNN"
"ULTR-Community/ULTRA" -> "QingyaoAi/Deep-Listwise-Context-Model-for-Ranking-Refinement"
"ULTR-Community/ULTRA" -> "ULTR-Community/ULTRA_pytorch"
"ULTR-Community/ULTRA" -> "acbull/Unbiased_LambdaMart"
"ULTR-Community/ULTRA" -> "QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation"
"ULTR-Community/ULTRA" -> "allegro/allRank"
"ULTR-Community/ULTRA" -> "sebastian-hofstaetter/transformer-kernel-ranking" ["e"=1]
"ULTR-Community/ULTRA" -> "pl8787/SetRank"
"ULTR-Community/ULTRA" -> "markovi/PyClick"
"ULTR-Community/ULTRA" -> "HarrieO/OnlineLearningToRank"
"ULTR-Community/ULTRA" -> "texttron/tevatron" ["e"=1]
"ULTR-Community/ULTRA" -> "rank2rec/rerank"
"ULTR-Community/ULTRA" -> "varepsilon/clickmodels"
"ULTR-Community/ULTRA" -> "wildltr/ptranking"
"myeclipse/wsdm_cup_2020_solution" -> "Wangld5/BERT_pairwise_ranking"
"aseveryn/deep-qa" -> "shashankg7/Keras-CNN-QA"
"aseveryn/deep-qa" -> "brmson/Sentence-selection"
"aseveryn/deep-qa" -> "zhangzibin/PairCNN-Ranking"
"aseveryn/deep-qa" -> "betterenvi/QA-rankit"
"aseveryn/deep-qa" -> "castorini/NCE-CNN-Torch"
"aseveryn/deep-qa" -> "white127/insuranceQA-cnn-lstm" ["e"=1]
"aseveryn/deep-qa" -> "Isminoula/DL-to-Rank"
"aseveryn/deep-qa" -> "carpedm20/attentive-reader-tensorflow" ["e"=1]
"pl8787/textnet-release" -> "pl8787/textnet-model"
"pl8787/textnet-release" -> "faneshion/HiNT"
"pl8787/textnet-release" -> "pl8787/MatchPyramid-TensorFlow"
"QingyaoAi/Deep-Listwise-Context-Model-for-Ranking-Refinement" -> "ULTR-Community/ULTRA"
"sophwats/XGBoost-lambdaMART" -> "sophwats/learning-to-rank"
"guilgautier/DPPy" -> "ChengtaoLi/dpp"
"guilgautier/DPPy" -> "laming-chen/fast-map-dpp"
"guilgautier/DPPy" -> "mehdidc/dpp"
"Wangld5/BERT_pairwise_ranking" -> "SongPengcheng/PairwiseBert"
"HarrieO/OnlineLearningToRank" -> "sak2km/OnlineLearningToRank"
"jattenberg/RankLib" -> "jobandtalent/RankLib"
"jattenberg/RankLib" -> "discobot/LambdaMart"
"sophwats/learning-to-rank" -> "sophwats/XGBoost-lambdaMART"
"shashankg7/Keras-CNN-QA" -> "aseveryn/deep-qa"
"shashankg7/Keras-CNN-QA" -> "zhangzibin/PairCNN-Ranking"
"eggie5/RankNet" -> "ShaoQiBNU/RankNet"
"homebox2/Food_diviner_backend" -> "faneshion/HiNT"
"jiangnanboy/learning_to_rank" ["l"="26.236,29.703"]
"liyinxiao/LambdaRankNN" ["l"="26.251,29.753"]
"jma127/pyltr" ["l"="26.257,29.713"]
"lezzago/LambdaMart" ["l"="26.249,29.732"]
"myeclipse/wsdm_cup_2020_solution" ["l"="26.193,29.675"]
"ChenglongChen/tensorflow-LTR" ["l"="26.287,29.728"]
"Isminoula/DL-to-Rank" ["l"="26.293,29.686"]
"aseveryn/deep-qa" ["l"="26.325,29.676"]
"allegro/allRank" ["l"="26.217,29.754"]
"wildltr/ptranking" ["l"="26.23,29.766"]
"ULTR-Community/ULTRA" ["l"="26.186,29.746"]
"tensorflow/ranking" ["l"="22.795,37.149"]
"haowei01/pytorch-examples" ["l"="26.26,29.768"]
"houchenyu/L2R" ["l"="26.263,29.746"]
"shiba24/learning2rank" ["l"="26.268,29.726"]
"nyu-dl/dl4marco-bert" ["l"="25.857,29.12"]
"texttron/tevatron" ["l"="25.852,29.169"]
"castorini/pygaggle" ["l"="25.84,29.148"]
"rjagerman/pytorchltr" ["l"="26.196,29.784"]
"acbull/Unbiased_LambdaMart" ["l"="26.222,29.734"]
"luyug/Reranker" ["l"="25.872,29.162"]
"microsoft/ANCE" ["l"="25.841,29.163"]
"thunlp/OpenMatch" ["l"="25.861,29.145"]
"rank2rec/rerank" ["l"="26.123,29.773"]
"rec-agent/drr" ["l"="26.094,29.785"]
"discobot/LambdaMart" ["l"="26.235,29.668"]
"discobot/kafka" ["l"="26.235,29.643"]
"discobot/wiki_crawl" ["l"="26.214,29.65"]
"discobot/fire-mr" ["l"="26.245,29.644"]
"discobot/ml-handbook" ["l"="26.222,29.639"]
"discobot/hse2015_nets" ["l"="26.247,29.654"]
"discobot/kazoo" ["l"="26.235,29.653"]
"discobot/dotfiles" ["l"="26.222,29.657"]
"discobot/hashcode-practice" ["l"="26.212,29.658"]
"discobot/NER-MEHMM" ["l"="26.216,29.668"]
"discobot/docsify-katex" ["l"="26.225,29.649"]
"pl8787/MatchPyramid-TensorFlow" ["l"="26.384,29.749"]
"pl8787/textnet-release" ["l"="26.407,29.779"]
"ChenglongChen/tensorflow-DSMM" ["l"="26.371,29.725"]
"NTSC-Community/awaresome-neural-models-for-semantic-match" ["l"="31.909,29.975"]
"faneshion/DRMM" ["l"="26.38,29.771"]
"galsang/ABCNN" ["l"="26.415,29.741"]
"nlpaueb/deep-relevance-ranking" ["l"="26.455,29.825"]
"faneshion/HiNT" ["l"="26.435,29.804"]
"QingyaoAi/Unbiased-Learning-to-Rank-with-Unbiased-Propensity-Estimation" ["l"="26.201,29.73"]
"airalcorn2/RankNet" ["l"="26.281,29.749"]
"andreweskeclarke/learning-rank-public" ["l"="26.292,29.714"]
"fullflu/learning-to-rank" ["l"="26.24,29.717"]
"zhangzibin/PairCNN-Ranking" ["l"="26.315,29.712"]
"QingyaoAi/Deep-Listwise-Context-Model-for-Ranking-Refinement" ["l"="26.221,29.72"]
"jattenberg/RankLib" ["l"="26.264,29.665"]
"mottalrd/learning-to-rank" ["l"="26.267,29.692"]
"HsiaoYetGun/ESIM" ["l"="26.416,29.7"]
"EternalFeather/ESIM" ["l"="26.438,29.686"]
"yinwenpeng/Attentive_Convolution" ["l"="26.458,29.732"]
"yinwenpeng/Answer_Selection" ["l"="26.446,29.744"]
"hanxiao/tf-attentive-conv" ["l"="26.474,29.744"]
"markovi/PyClick" ["l"="26.172,29.721"]
"varepsilon/clickmodels" ["l"="26.146,29.712"]
"cvangysel/pytrec_eval" ["l"="25.845,29.108"]
"THUIR/PSCMModel" ["l"="26.136,29.725"]
"HarrieO/OnlineLearningToRank" ["l"="26.15,29.74"]
"sebastian-hofstaetter/transformer-kernel-ranking" ["l"="25.911,29.062"]
"o19s/hello-ltr" ["l"="-6.981,3.618"]
"castorini/Anserini" ["l"="25.934,29.016"]
"sophwats/XGBoost-lambdaMART" ["l"="26.259,29.79"]
"wikimedia/search-MjoLniR" ["l"="26.115,29.698"]
"ptl2r/ptl2r.github.io" ["l"="26.288,29.787"]
"airalcorn2/Solr-LTR" ["l"="-6.94,3.576"]
"yanshanjing/RankNet-Pytorch" ["l"="26.295,29.771"]
"bigdong89/xgboostExtension" ["l"="26.312,29.79"]
"ShaoQiBNU/RankNet" ["l"="26.317,29.753"]
"eggie5/RankNet" ["l"="26.317,29.766"]
"justicevita/RankNet-Keras" ["l"="26.3,29.76"]
"ermongroup/pirank" ["l"="26.217,29.801"]
"akanyaani/ranknet-tensorflow2.0" ["l"="30.193,32.163"]
"mzhang001/tfranknet" ["l"="26.311,29.696"]
"zhiguowang/BiMPM" ["l"="25.787,30.213"]
"phdowling/abcnn-keras" ["l"="26.433,29.76"]
"flrngel/Self-Attentive-tensorflow" ["l"="31.502,31.432"]
"zhaosm/dssm-lstm" ["l"="26.39,29.689"]
"xubaochuan/dssm" ["l"="26.404,29.668"]
"NTMC-Community/awaresome-neural-models-for-semantic-match" ["l"="26.395,29.714"]
"liyinxiao/Ranking_Papers" ["l"="26.241,29.785"]
"shashankg7/Keras-CNN-QA" ["l"="26.334,29.694"]
"airalcorn2/Deep-Semantic-Similarity-Model" ["l"="22.777,37.258"]
"laming-chen/fast-map-dpp" ["l"="26.057,29.8"]
"InsaneLife/dssm" ["l"="22.765,37.168"]
"pengming617/text_matching" ["l"="32.238,30.101"]
"ULTR-Community/ULTRA_pytorch" ["l"="26.165,29.776"]
"pl8787/SetRank" ["l"="26.157,29.76"]
"Wangld5/BERT_pairwise_ranking" ["l"="26.174,29.658"]
"brmson/Sentence-selection" ["l"="26.327,29.641"]
"betterenvi/QA-rankit" ["l"="26.354,29.664"]
"castorini/NCE-CNN-Torch" ["l"="26.344,29.65"]
"white127/insuranceQA-cnn-lstm" ["l"="30.574,28.087"]
"carpedm20/attentive-reader-tensorflow" ["l"="27.153,34.393"]
"pl8787/textnet-model" ["l"="26.411,29.801"]
"sophwats/learning-to-rank" ["l"="26.26,29.811"]
"guilgautier/DPPy" ["l"="26.023,29.813"]
"ChengtaoLi/dpp" ["l"="26.002,29.807"]
"mehdidc/dpp" ["l"="26.007,29.828"]
"SongPengcheng/PairwiseBert" ["l"="26.161,29.646"]
"sak2km/OnlineLearningToRank" ["l"="26.126,29.743"]
"jobandtalent/RankLib" ["l"="26.271,29.633"]
"homebox2/Food_diviner_backend" ["l"="26.451,29.804"]
}