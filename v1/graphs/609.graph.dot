digraph G {
"leriomaggio/deep-learning-keras-euroscipy2016" -> "rouseguy/europython2016_dl-nlp"
"leriomaggio/deep-learning-keras-euroscipy2016" -> "jakebian/quiver"
"leriomaggio/deep-learning-keras-euroscipy2016" -> "joanbruna/stat212b" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "saiprashanths/dl-setup" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "mila-udem/summerschool2015" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "sjchoi86/dl_tutorials" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "coreylynch/async-rl" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "jakebian/hera"
"leriomaggio/deep-learning-keras-euroscipy2016" -> "TomAugspurger/modern-pandas" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "jxieeducation/DIY-Data-Science" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "rouseguy/scipyUS2016_dl-image"
"leriomaggio/deep-learning-keras-euroscipy2016" -> "matthiasplappert/keras-rl" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "shashankg7/Deep-Learning-for-NLP-Resources" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "LeavesBreathe/tensorflow_with_latest_papers" ["e"=1]
"leriomaggio/deep-learning-keras-euroscipy2016" -> "karandesai-96/digit-classifier" ["e"=1]
"jakebian/quiver" -> "jakebian/hera"
"jakebian/quiver" -> "Tetrachrome/subpixel" ["e"=1]
"jakebian/quiver" -> "matthiasplappert/keras-rl" ["e"=1]
"jakebian/quiver" -> "heuritech/convnets-keras"
"jakebian/quiver" -> "leriomaggio/deep-learning-keras-euroscipy2016"
"jakebian/quiver" -> "alrojo/tensorflow-tutorial" ["e"=1]
"jakebian/quiver" -> "transcranial/keras-js" ["e"=1]
"jakebian/quiver" -> "keplr-io/quiver" ["e"=1]
"jakebian/quiver" -> "farizrahman4u/keras-contrib"
"jakebian/quiver" -> "fchollet/hualos"
"jakebian/quiver" -> "merantix/picasso" ["e"=1]
"jakebian/quiver" -> "openai/cleverhans" ["e"=1]
"jakebian/quiver" -> "inejc/painters"
"jakebian/quiver" -> "jocicmarko/ultrasound-nerve-segmentation" ["e"=1]
"jakebian/quiver" -> "MarcBS/keras"
"philipperemy/keras-attention-mechanism" -> "datalogue/keras-attention"
"philipperemy/keras-attention-mechanism" -> "farizrahman4u/seq2seq"
"philipperemy/keras-attention-mechanism" -> "CyberZHG/keras-self-attention"
"philipperemy/keras-attention-mechanism" -> "bojone/attention"
"philipperemy/keras-attention-mechanism" -> "Lsdefine/attention-is-all-you-need-keras"
"philipperemy/keras-attention-mechanism" -> "richliao/textClassifier"
"philipperemy/keras-attention-mechanism" -> "thushv89/attention_keras"
"philipperemy/keras-attention-mechanism" -> "philipperemy/keras-tcn" ["e"=1]
"philipperemy/keras-attention-mechanism" -> "codekansas/keras-language-modeling"
"philipperemy/keras-attention-mechanism" -> "Separius/BERT-keras"
"philipperemy/keras-attention-mechanism" -> "ningshixian/LSTM_Attention"
"philipperemy/keras-attention-mechanism" -> "CyberZHG/keras-bert" ["e"=1]
"philipperemy/keras-attention-mechanism" -> "fchollet/keras-resources" ["e"=1]
"philipperemy/keras-attention-mechanism" -> "keras-team/keras-contrib"
"philipperemy/keras-attention-mechanism" -> "XifengGuo/CapsNet-Keras" ["e"=1]
"MachineLP/train_arch" -> "MachineLP/models"
"MachineLP/train_arch" -> "MachineLP/train_cnn-rnn-attention"
"MachineLP/train_arch" -> "taki0112/SENet-Tensorflow" ["e"=1]
"MachineLP/train_arch" -> "yangxue0827/FPN_Tensorflow" ["e"=1]
"MachineLP/train_arch" -> "MachineLP/Tensorflow-" ["e"=1]
"MachineLP/train_arch" -> "MachineLP/train_cnn_multilabel"
"stratospark/keras-multiprocess-image-data-generator" -> "rcmalli/keras-mobilenet"
"stratospark/keras-multiprocess-image-data-generator" -> "kuza55/keras-extras"
"stratospark/keras-multiprocess-image-data-generator" -> "oarriaga/spatial_transformer_networks"
"stratospark/keras-multiprocess-image-data-generator" -> "rcmalli/keras-squeezenet"
"stratospark/keras-multiprocess-image-data-generator" -> "bckenstler/CLR"
"guoyinwang/LEAM" -> "dinghanshen/SWEM"
"guoyinwang/LEAM" -> "kaushalshetty/Structured-Self-Attention"
"guoyinwang/LEAM" -> "idiap/gile"
"guoyinwang/LEAM" -> "NonvolatileMemory/AAAI_2019_EXAM"
"guoyinwang/LEAM" -> "lancopku/label-embedding-network" ["e"=1]
"guoyinwang/LEAM" -> "jamesmullenbach/caml-mimic" ["e"=1]
"guoyinwang/LEAM" -> "lancopku/SU4MLC" ["e"=1]
"luheng/deep_srl" -> "XMUNLP/Tagger"
"luheng/deep_srl" -> "strubell/LISA"
"luheng/deep_srl" -> "luheng/lsgn"
"luheng/deep_srl" -> "microth/PathLSTM"
"luheng/deep_srl" -> "diegma/neural-dep-srl"
"luheng/deep_srl" -> "bcmi220/unisrl"
"luheng/deep_srl" -> "kentonl/e2e-coref" ["e"=1]
"luheng/deep_srl" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"uhauha2929/examples" -> "nn116003/self-attention-classification"
"mttk/rnn-classifier" -> "nn116003/self-attention-classification"
"thushv89/attention_keras" -> "philipperemy/keras-attention-mechanism"
"thushv89/attention_keras" -> "datalogue/keras-attention"
"thushv89/attention_keras" -> "CyberZHG/keras-self-attention"
"thushv89/attention_keras" -> "aravindpai/How-to-build-own-text-summarizer-using-deep-learning"
"thushv89/attention_keras" -> "ningshixian/LSTM_Attention"
"thushv89/attention_keras" -> "Lsdefine/attention-is-all-you-need-keras"
"thushv89/attention_keras" -> "CyberZHG/keras-multi-head"
"thushv89/attention_keras" -> "uzaymacar/attention-mechanisms"
"thushv89/attention_keras" -> "CyberZHG/keras-transformer"
"thushv89/attention_keras" -> "kpot/keras-transformer"
"thushv89/attention_keras" -> "lvapeab/nmt-keras"
"thushv89/attention_keras" -> "philipperemy/keras-tcn" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "LambdaWx/CNN_sentence_tensorflow"
"clayandgithub/zh_cnn_text_classify" -> "lc222/text_classification_AI100"
"clayandgithub/zh_cnn_text_classify" -> "fendouai/Chinese-Text-Classification"
"clayandgithub/zh_cnn_text_classify" -> "indiejoseph/cnn-text-classification-tf-chinese"
"clayandgithub/zh_cnn_text_classify" -> "cjymz886/text-cnn" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "sfailsthy/chinese-text-classification-with-cnn-tf"
"clayandgithub/zh_cnn_text_classify" -> "Roshanson/TextInfoExp" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "gaussic/text-classification-cnn-rnn" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "luchi007/RNN_Text_Classify"
"clayandgithub/zh_cnn_text_classify" -> "liu-nlper/DocumentClassification"
"clayandgithub/zh_cnn_text_classify" -> "c1nty/Chinese_Spam_Filter"
"clayandgithub/zh_cnn_text_classify" -> "pakrchen/text-antispam"
"clayandgithub/zh_cnn_text_classify" -> "shijing888/BayesSpam"
"clayandgithub/zh_cnn_text_classify" -> "yongyehuang/zhihu-text-classification" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "bigboNed3/chinese_text_cnn" ["e"=1]
"taoshen58/DiSAN" -> "taoshen58/BiBloSA"
"taoshen58/DiSAN" -> "YichenGong/Densely-Interactive-Inference-Network" ["e"=1]
"taoshen58/DiSAN" -> "taoshen58/ReSAN"
"taoshen58/DiSAN" -> "flrngel/Self-Attentive-tensorflow"
"taoshen58/DiSAN" -> "zhiguowang/BiMPM" ["e"=1]
"taoshen58/DiSAN" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"taoshen58/DiSAN" -> "dinghanshen/SWEM"
"taoshen58/DiSAN" -> "XMUNLP/Tagger"
"taoshen58/DiSAN" -> "baaesh/DiSAN-pytorch"
"taoshen58/DiSAN" -> "NLPLearn/QANet" ["e"=1]
"taoshen58/DiSAN" -> "lukecq1231/nli" ["e"=1]
"ilivans/tf-rnn-attention" -> "ematvey/hierarchical-attention-networks"
"ilivans/tf-rnn-attention" -> "richliao/textClassifier"
"ilivans/tf-rnn-attention" -> "bojone/attention"
"ilivans/tf-rnn-attention" -> "TobiasLee/Text-Classification"
"ilivans/tf-rnn-attention" -> "datalogue/keras-attention"
"ilivans/tf-rnn-attention" -> "Kyubyong/transformer" ["e"=1]
"ilivans/tf-rnn-attention" -> "HadoopIt/rnn-nlu" ["e"=1]
"ilivans/tf-rnn-attention" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"ilivans/tf-rnn-attention" -> "galsang/ABCNN" ["e"=1]
"ilivans/tf-rnn-attention" -> "allenai/bilm-tf" ["e"=1]
"ilivans/tf-rnn-attention" -> "indiejoseph/cnn-text-classification-tf-chinese"
"ilivans/tf-rnn-attention" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"ilivans/tf-rnn-attention" -> "rockingdingo/deepnlp" ["e"=1]
"ilivans/tf-rnn-attention" -> "ilivans/attention-sentiment"
"ilivans/tf-rnn-attention" -> "allenai/bi-att-flow" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "yoonkim/CNN_sentence" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "galsang/CNN-sentence-classification-pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "pytorch/text" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "harvardnlp/sent-conv-torch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "bigboNed3/chinese_text_cnn" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "wabyking/TextClassificationBenchmark"
"Shawn1993/cnn-text-classification-pytorch" -> "bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "EdGENetworks/attention-networks-for-classification"
"Shawn1993/cnn-text-classification-pytorch" -> "chenyuntc/PyTorchText" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "IBM/pytorch-seq2seq" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "spro/practical-pytorch" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "wabyking/TextClassificationBenchmark"
"prakashpandey9/Text-Classification-Pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "bentrevett/pytorch-sentiment-analysis" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"prakashpandey9/Text-Classification-Pytorch" -> "keishinkickback/Pytorch-RNN-text-classification"
"prakashpandey9/Text-Classification-Pytorch" -> "TobiasLee/Text-Classification"
"prakashpandey9/Text-Classification-Pytorch" -> "bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "kk7nc/Text_Classification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "kaushalshetty/Structured-Self-Attention"
"prakashpandey9/Text-Classification-Pytorch" -> "pytorch/text" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "chenyuntc/PyTorchText" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "brightmart/text_classification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "EdGENetworks/attention-networks-for-classification"
"prakashpandey9/Text-Classification-Pytorch" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"leonsim/simhash" -> "seomoz/simhash-py"
"leonsim/simhash" -> "yanyiwu/simhash"
"leonsim/simhash" -> "scrapinghub/python-simhash"
"leonsim/simhash" -> "pakrchen/text-antispam"
"leonsim/simhash" -> "zyymax/text-similarity"
"leonsim/simhash" -> "ekzhu/datasketch" ["e"=1]
"leonsim/simhash" -> "seomoz/simhash-cpp"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "kaushalshetty/Structured-Self-Attention"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "yufengm/SelfAttentive"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "taoshen58/DiSAN"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "flrngel/Self-Attentive-tensorflow"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "hantek/SelfAttentiveSentEmbed"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "dasguptar/treelstm.pytorch" ["e"=1]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "jx00109/structured-self-attentive-sentence-embedding"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "YichenGong/Densely-Interactive-Inference-Network" ["e"=1]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "lukecq1231/nli" ["e"=1]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "EdGENetworks/attention-networks-for-classification"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "XMUNLP/Tagger"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "taoshen58/BiBloSA"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "deepmind/narrativeqa" ["e"=1]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "allenai/bi-att-flow" ["e"=1]
"AlexGidiotis/Document-Classifier-LSTM" -> "gentaiscool/lstm-attention"
"lc222/text_classification_AI100" -> "liu-nlper/DocumentClassification"
"lc222/text_classification_AI100" -> "clayandgithub/zh_cnn_text_classify"
"lc222/text_classification_AI100" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "zenRRan/Sentiment-Analysis"
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "wabyking/TextClassificationBenchmark"
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "chenyuntc/PyTorchText" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "galsang/CNN-sentence-classification-pytorch"
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "ndrplz/ConvLSTM_pytorch" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "jiesutd/LatticeLSTM" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "DSKSD/DeepNLP-models-Pytorch" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "IBM/pytorch-seq2seq" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "smilelight/lightNLP" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "jiesutd/NCRFpp" ["e"=1]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "bojone/attention"
"gosha20777/keras2cpp" -> "pplonski/keras2cpp"
"gosha20777/keras2cpp" -> "Dobiasd/frugally-deep"
"CyberZHG/keras-radam" -> "CyberZHG/keras-lookahead"
"CyberZHG/keras-radam" -> "bojone/keras_lookahead"
"CyberZHG/keras-radam" -> "titu1994/keras_rectified_adam"
"CyberZHG/keras-radam" -> "OverLordGoldDragon/keras-adamw"
"CyberZHG/keras-radam" -> "LiyuanLucasLiu/RAdam" ["e"=1]
"CyberZHG/keras-radam" -> "CyberZHG/keras-xlnet"
"CyberZHG/keras-radam" -> "CyberZHG/keras-gradient-accumulation"
"CyberZHG/keras-radam" -> "GLambard/AdamW_Keras"
"CyberZHG/keras-radam" -> "qubvel/tta_wrapper"
"CyberZHG/keras-radam" -> "mgrankin/over9000" ["e"=1]
"CyberZHG/keras-radam" -> "4uiiurz1/keras-cosine-annealing"
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "PrashantRanjan09/Elmo-Tutorial"
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "strongio/keras-elmo"
"XMUNLP/Tagger" -> "luheng/deep_srl"
"XMUNLP/Tagger" -> "strubell/LISA"
"XMUNLP/Tagger" -> "taoshen58/DiSAN"
"XMUNLP/Tagger" -> "flrngel/Self-Attentive-tensorflow"
"XMUNLP/Tagger" -> "LopezGG/NN_NER_tensorFlow" ["e"=1]
"XMUNLP/Tagger" -> "diegma/neural-dep-srl"
"XMUNLP/Tagger" -> "luheng/lsgn"
"XMUNLP/Tagger" -> "LiyuanLucasLiu/LM-LSTM-CRF" ["e"=1]
"XMUNLP/Tagger" -> "zihangdai/mos" ["e"=1]
"forresti/SqueezeNet" -> "DT42/squeezenet_demo"
"forresti/SqueezeNet" -> "david-drew/OpenVINO-Custom-Layers" ["e"=1]
"cjweeks/tensorflow-cmake" -> "FloopCZ/tensorflow_cc"
"cjweeks/tensorflow-cmake" -> "PatWie/tensorflow-cmake"
"cjweeks/tensorflow-cmake" -> "kecsap/tensorflow_cpp_packaging"
"cjweeks/tensorflow-cmake" -> "jhjin/tensorflow-cpp"
"cjweeks/tensorflow-cmake" -> "lysukhin/tensorflow-object-detection-cpp"
"cjweeks/tensorflow-cmake" -> "Neargye/hello_tf_c_api"
"cjweeks/tensorflow-cmake" -> "moorage/OpenCVTensorflowExample"
"GLambard/AdamW_Keras" -> "sajadn/AdamW"
"GLambard/AdamW_Keras" -> "OverLordGoldDragon/keras-adamw"
"OverLordGoldDragon/keras-adamw" -> "GLambard/AdamW_Keras"
"OverLordGoldDragon/keras-adamw" -> "CyberZHG/keras-radam"
"richliao/textClassifier" -> "EdGENetworks/attention-networks-for-classification"
"richliao/textClassifier" -> "ematvey/hierarchical-attention-networks"
"richliao/textClassifier" -> "ilivans/tf-rnn-attention"
"richliao/textClassifier" -> "TobiasLee/Text-Classification"
"richliao/textClassifier" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras"
"richliao/textClassifier" -> "philipperemy/keras-attention-mechanism"
"richliao/textClassifier" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"richliao/textClassifier" -> "brightmart/text_classification" ["e"=1]
"richliao/textClassifier" -> "chenyuntc/PyTorchText" ["e"=1]
"richliao/textClassifier" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"richliao/textClassifier" -> "yoonkim/CNN_sentence" ["e"=1]
"richliao/textClassifier" -> "airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["e"=1]
"richliao/textClassifier" -> "datalogue/keras-attention"
"richliao/textClassifier" -> "faneshion/MatchZoo" ["e"=1]
"richliao/textClassifier" -> "uvipen/Hierarchical-attention-networks-pytorch"
"pplonski/keras2cpp" -> "Dobiasd/frugally-deep"
"pplonski/keras2cpp" -> "moof2k/kerasify"
"pplonski/keras2cpp" -> "gosha20777/keras2cpp"
"pplonski/keras2cpp" -> "aljabr0/from-keras-to-c"
"pplonski/keras2cpp" -> "amir-abdi/keras_to_tensorflow" ["e"=1]
"pplonski/keras2cpp" -> "serizba/cppflow"
"pplonski/keras2cpp" -> "bitbionic/keras-to-tensorflow"
"pplonski/keras2cpp" -> "harmanpreet93/keras-model-to-cpp"
"pplonski/keras2cpp" -> "FloopCZ/tensorflow_cc"
"pplonski/keras2cpp" -> "titu1994/Keras-Classification-Models" ["e"=1]
"pplonski/keras2cpp" -> "kuza55/keras-extras"
"pplonski/keras2cpp" -> "Neargye/hello_tf_c_api"
"pplonski/keras2cpp" -> "HamedMP/tensorflow_export_cpp_example"
"pplonski/keras2cpp" -> "nok/sklearn-porter" ["e"=1]
"pplonski/keras2cpp" -> "rcmalli/keras-squeezenet"
"zepingyu0512/srnn" -> "dinghanshen/SWEM"
"zepingyu0512/srnn" -> "bojone/seq2seq"
"zepingyu0512/srnn" -> "locuslab/trellisnet" ["e"=1]
"edubey/text-summarizer" -> "aravindpai/How-to-build-own-text-summarizer-using-deep-learning"
"Dobiasd/frugally-deep" -> "pplonski/keras2cpp"
"Dobiasd/frugally-deep" -> "gosha20777/keras2cpp"
"Dobiasd/frugally-deep" -> "serizba/cppflow"
"Dobiasd/frugally-deep" -> "moof2k/kerasify"
"Dobiasd/frugally-deep" -> "yixuan/MiniDNN" ["e"=1]
"Dobiasd/frugally-deep" -> "Dobiasd/FunctionalPlus" ["e"=1]
"Dobiasd/frugally-deep" -> "FloopCZ/tensorflow_cc"
"Dobiasd/frugally-deep" -> "amir-abdi/keras_to_tensorflow" ["e"=1]
"Dobiasd/frugally-deep" -> "wichtounet/dll"
"Dobiasd/frugally-deep" -> "aljabr0/from-keras-to-c"
"Dobiasd/frugally-deep" -> "tiny-dnn/tiny-dnn" ["e"=1]
"Dobiasd/frugally-deep" -> "Neargye/hello_tf_c_api"
"Dobiasd/frugally-deep" -> "QuantStack/xtensor" ["e"=1]
"Dobiasd/frugally-deep" -> "kmhofmann/selene" ["e"=1]
"Dobiasd/frugally-deep" -> "dpilger26/NumCpp" ["e"=1]
"sujitpal/eeap-examples" -> "stevewyl/keras_text_classification"
"serizba/cppflow" -> "FloopCZ/tensorflow_cc"
"serizba/cppflow" -> "Neargye/hello_tf_c_api"
"serizba/cppflow" -> "Dobiasd/frugally-deep"
"serizba/cppflow" -> "AmirulOm/tensorflow_capi_sample"
"serizba/cppflow" -> "pplonski/keras2cpp"
"serizba/cppflow" -> "leggedrobotics/tensorflow-cpp"
"serizba/cppflow" -> "PatWie/tensorflow-cmake"
"serizba/cppflow" -> "prabhuomkar/pytorch-cpp" ["e"=1]
"serizba/cppflow" -> "skylook/tensorflow_cpp"
"serizba/cppflow" -> "lysukhin/tensorflow-object-detection-cpp"
"serizba/cppflow" -> "iwatake2222/play_with_tflite" ["e"=1]
"serizba/cppflow" -> "gosha20777/keras2cpp"
"serizba/cppflow" -> "ValYouW/tflite-dist"
"serizba/cppflow" -> "onnx/tensorflow-onnx" ["e"=1]
"serizba/cppflow" -> "borarak/tensorflow2_cpp"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "yoonkim/CNN_sentence" ["e"=1]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "richliao/textClassifier"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "bhaveshoswal/CNN-text-classification-keras"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "shagunsodhani/CNN-Sentence-Classifier"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "codekansas/keras-language-modeling"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "bradleypallen/keras-quora-question-pairs" ["e"=1]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "cahya-wirawan/cnn-text-classification-tf"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["e"=1]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "raghakot/keras-text"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "harvardnlp/sent-conv-torch" ["e"=1]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "farizrahman4u/seq2seq"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "shyamupa/snli-entailment"
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" -> "salestock/fastText.py" ["e"=1]
"codekansas/keras-language-modeling" -> "shyamupa/snli-entailment"
"codekansas/keras-language-modeling" -> "shuzi/insuranceQA" ["e"=1]
"codekansas/keras-language-modeling" -> "farizrahman4u/seq2seq"
"codekansas/keras-language-modeling" -> "datalogai/recurrentshop"
"codekansas/keras-language-modeling" -> "EderSantana/seya"
"codekansas/keras-language-modeling" -> "ryankiros/skip-thoughts" ["e"=1]
"codekansas/keras-language-modeling" -> "philipperemy/keras-attention-mechanism"
"codekansas/keras-language-modeling" -> "white127/insuranceQA-cnn-lstm" ["e"=1]
"codekansas/keras-language-modeling" -> "lvapeab/nmt-keras"
"codekansas/keras-language-modeling" -> "harvardnlp/seq2seq-attn" ["e"=1]
"codekansas/keras-language-modeling" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras"
"codekansas/keras-language-modeling" -> "jacoxu/encoder_decoder"
"codekansas/keras-language-modeling" -> "codekansas/insurance_qa_python" ["e"=1]
"codekansas/keras-language-modeling" -> "jarfo/kchar"
"codekansas/keras-language-modeling" -> "klb3713/sentence2vec" ["e"=1]
"datalogai/recurrentshop" -> "farizrahman4u/keras-contrib"
"datalogai/recurrentshop" -> "farizrahman4u/seq2seq"
"datalogai/recurrentshop" -> "codekansas/keras-language-modeling"
"datalogai/recurrentshop" -> "osh/kerlym" ["e"=1]
"datalogai/recurrentshop" -> "EderSantana/seya"
"datalogai/recurrentshop" -> "shyamupa/snli-entailment"
"datalogai/recurrentshop" -> "osh/KerasGAN" ["e"=1]
"datalogai/recurrentshop" -> "mokemokechicken/keras_npi" ["e"=1]
"farizrahman4u/seq2seq" -> "google/seq2seq" ["e"=1]
"farizrahman4u/seq2seq" -> "farizrahman4u/recurrentshop"
"farizrahman4u/seq2seq" -> "philipperemy/keras-attention-mechanism"
"farizrahman4u/seq2seq" -> "harvardnlp/seq2seq-attn" ["e"=1]
"farizrahman4u/seq2seq" -> "codekansas/keras-language-modeling"
"farizrahman4u/seq2seq" -> "nicolas-ivanov/debug_seq2seq"
"farizrahman4u/seq2seq" -> "datalogai/recurrentshop"
"farizrahman4u/seq2seq" -> "tensorflow/nmt" ["e"=1]
"farizrahman4u/seq2seq" -> "matthiasplappert/keras-rl" ["e"=1]
"farizrahman4u/seq2seq" -> "fchollet/keras-resources" ["e"=1]
"farizrahman4u/seq2seq" -> "ryankiros/skip-thoughts" ["e"=1]
"farizrahman4u/seq2seq" -> "jacoxu/encoder_decoder"
"farizrahman4u/seq2seq" -> "fchollet/keras" ["e"=1]
"farizrahman4u/seq2seq" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"farizrahman4u/seq2seq" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "prakashpandey9/Text-Classification-Pytorch"
"wabyking/TextClassificationBenchmark" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"wabyking/TextClassificationBenchmark" -> "Shawn1993/cnn-text-classification-pytorch"
"wabyking/TextClassificationBenchmark" -> "bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"wabyking/TextClassificationBenchmark" -> "chenyuntc/PyTorchText" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "TobiasLee/Text-Classification"
"wabyking/TextClassificationBenchmark" -> "EdGENetworks/attention-networks-for-classification"
"wabyking/TextClassificationBenchmark" -> "guoyinwang/LEAM"
"wabyking/TextClassificationBenchmark" -> "jiangqy/LSTM-Classification-Pytorch"
"wabyking/TextClassificationBenchmark" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "Tencent/NeuralNLP-NeuralClassifier" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "atnlp/torchtext-summary" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "andyweizhao/capsule_text_classification" ["e"=1]
"wabyking/TextClassificationBenchmark" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"bojone/attention" -> "Kyubyong/transformer" ["e"=1]
"bojone/attention" -> "philipperemy/keras-attention-mechanism"
"bojone/attention" -> "CyberZHG/keras-bert" ["e"=1]
"bojone/attention" -> "Lsdefine/attention-is-all-you-need-keras"
"bojone/attention" -> "bojone/bert4keras" ["e"=1]
"bojone/attention" -> "ilivans/tf-rnn-attention"
"bojone/attention" -> "bojone/kg-2019" ["e"=1]
"bojone/attention" -> "bojone/bert_in_keras" ["e"=1]
"bojone/attention" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"bojone/attention" -> "allenai/bilm-tf" ["e"=1]
"bojone/attention" -> "bojone/seq2seq"
"bojone/attention" -> "zjy-ucas/ChineseNER" ["e"=1]
"bojone/attention" -> "brightmart/albert_zh" ["e"=1]
"bojone/attention" -> "Determined22/zh-NER-TF" ["e"=1]
"bojone/attention" -> "brightmart/roberta_zh" ["e"=1]
"lvapeab/nmt-keras" -> "jonsafari/nmt-list" ["e"=1]
"lvapeab/nmt-keras" -> "Lsdefine/attention-is-all-you-need-keras"
"lvapeab/nmt-keras" -> "codekansas/keras-language-modeling"
"lvapeab/nmt-keras" -> "EdinburghNLP/nematus" ["e"=1]
"lvapeab/nmt-keras" -> "OpenNMT/OpenNMT-tf" ["e"=1]
"lvapeab/nmt-keras" -> "rsennrich/subword-nmt" ["e"=1]
"lvapeab/nmt-keras" -> "neubig/nmt-tips" ["e"=1]
"lvapeab/nmt-keras" -> "datalogue/keras-attention"
"lvapeab/nmt-keras" -> "farizrahman4u/seq2seq"
"lvapeab/nmt-keras" -> "joeynmt/joeynmt" ["e"=1]
"lvapeab/nmt-keras" -> "awslabs/sockeye" ["e"=1]
"lvapeab/nmt-keras" -> "mjpost/sacreBLEU" ["e"=1]
"lvapeab/nmt-keras" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"lvapeab/nmt-keras" -> "rsennrich/nematus" ["e"=1]
"lvapeab/nmt-keras" -> "farizrahman4u/recurrentshop"
"ematvey/hierarchical-attention-networks" -> "richliao/textClassifier"
"ematvey/hierarchical-attention-networks" -> "EdGENetworks/attention-networks-for-classification"
"ematvey/hierarchical-attention-networks" -> "ilivans/tf-rnn-attention"
"ematvey/hierarchical-attention-networks" -> "indiejoseph/doc-han-att"
"ematvey/hierarchical-attention-networks" -> "synthesio/hierarchical-attention-networks"
"ematvey/hierarchical-attention-networks" -> "tqtg/hierarchical-attention-networks"
"ematvey/hierarchical-attention-networks" -> "lc222/HAN-text-classification-tf"
"ematvey/hierarchical-attention-networks" -> "taoshen58/DiSAN"
"ematvey/hierarchical-attention-networks" -> "flrngel/Self-Attentive-tensorflow"
"ematvey/hierarchical-attention-networks" -> "triplemeng/hierarchical-attention-model"
"ematvey/hierarchical-attention-networks" -> "cedias/Hierarchical-Sentiment"
"ematvey/hierarchical-attention-networks" -> "pandeykartikey/Hierarchical-Attention-Network"
"ematvey/hierarchical-attention-networks" -> "minqi/hnatt" ["e"=1]
"ematvey/hierarchical-attention-networks" -> "guoyinwang/LEAM"
"stephen-v/zh-NER-keras" -> "liushaoweihua/keras-bert-ner"
"stephen-v/zh-NER-keras" -> "stephen-v/zh-segmentation-keras"
"stephen-v/zh-NER-keras" -> "bojone/bert_in_keras" ["e"=1]
"stephen-v/zh-NER-keras" -> "keras-team/keras-contrib"
"stephen-v/zh-NER-keras" -> "GlassyWing/bi-lstm-crf" ["e"=1]
"stephen-v/zh-NER-keras" -> "littledeepthink/NER-in-Chinese-Text"
"stephen-v/zh-NER-keras" -> "ProHiryu/bert-chinese-ner" ["e"=1]
"stephen-v/zh-NER-keras" -> "Determined22/zh-NER-TF" ["e"=1]
"stephen-v/zh-NER-keras" -> "kifish/NER-demo"
"stephen-v/zh-NER-keras" -> "bojone/seq2seq"
"keras-team/keras-contrib" -> "stephen-v/zh-NER-keras"
"keras-team/keras-contrib" -> "keras-team/keras-applications" ["e"=1]
"keras-team/keras-contrib" -> "CyberZHG/keras-bert" ["e"=1]
"keras-team/keras-contrib" -> "philipperemy/keras-attention-mechanism"
"keras-team/keras-contrib" -> "Lsdefine/attention-is-all-you-need-keras"
"keras-team/keras-contrib" -> "Separius/BERT-keras"
"keras-team/keras-contrib" -> "bojone/attention"
"keras-team/keras-contrib" -> "eriklindernoren/Keras-GAN" ["e"=1]
"keras-team/keras-contrib" -> "farizrahman4u/seq2seq"
"keras-team/keras-contrib" -> "tensorflow/addons" ["e"=1]
"keras-team/keras-contrib" -> "Hironsan/anago" ["e"=1]
"keras-team/keras-contrib" -> "bojone/bert_in_keras" ["e"=1]
"keras-team/keras-contrib" -> "bojone/crf"
"keras-team/keras-contrib" -> "keras-team/keras-preprocessing" ["e"=1]
"keras-team/keras-contrib" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"EdGENetworks/attention-networks-for-classification" -> "richliao/textClassifier"
"EdGENetworks/attention-networks-for-classification" -> "ematvey/hierarchical-attention-networks"
"EdGENetworks/attention-networks-for-classification" -> "uvipen/Hierarchical-attention-networks-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "pandeykartikey/Hierarchical-Attention-Network"
"EdGENetworks/attention-networks-for-classification" -> "cedias/Hierarchical-Sentiment"
"EdGENetworks/attention-networks-for-classification" -> "EdGENetworks/anuvada"
"EdGENetworks/attention-networks-for-classification" -> "cedias/HAN-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "raviqqe/tensorflow-font2char2word2sent2doc"
"EdGENetworks/attention-networks-for-classification" -> "Shawn1993/cnn-text-classification-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "kaushalshetty/Structured-Self-Attention"
"EdGENetworks/attention-networks-for-classification" -> "chenyuntc/PyTorchText" ["e"=1]
"EdGENetworks/attention-networks-for-classification" -> "wabyking/TextClassificationBenchmark"
"EdGENetworks/attention-networks-for-classification" -> "MaximumEntropy/Seq2Seq-PyTorch" ["e"=1]
"EdGENetworks/attention-networks-for-classification" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"EdGENetworks/attention-networks-for-classification" -> "rguthrie3/DeepLearningForNLPInPytorch" ["e"=1]
"TobiasLee/Text-Classification" -> "richliao/textClassifier"
"TobiasLee/Text-Classification" -> "ilivans/tf-rnn-attention"
"TobiasLee/Text-Classification" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"TobiasLee/Text-Classification" -> "zackhy/TextClassification"
"TobiasLee/Text-Classification" -> "brightmart/text_classification" ["e"=1]
"TobiasLee/Text-Classification" -> "wabyking/TextClassificationBenchmark"
"TobiasLee/Text-Classification" -> "kaushalshetty/Structured-Self-Attention"
"TobiasLee/Text-Classification" -> "prakashpandey9/Text-Classification-Pytorch"
"TobiasLee/Text-Classification" -> "yao8839836/text_gcn" ["e"=1]
"TobiasLee/Text-Classification" -> "brightmart/bert_language_understanding" ["e"=1]
"TobiasLee/Text-Classification" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"TobiasLee/Text-Classification" -> "dongjun-Lee/text-classification-models-tf" ["e"=1]
"TobiasLee/Text-Classification" -> "allenai/bilm-tf" ["e"=1]
"TobiasLee/Text-Classification" -> "kk7nc/Text_Classification" ["e"=1]
"TobiasLee/Text-Classification" -> "AlexGidiotis/Document-Classifier-LSTM"
"liu-nlper/DocumentClassification" -> "lc222/text_classification_AI100"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "wabyking/TextClassificationBenchmark"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Renovamen/Text-Classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "songyingxin/Bert-TextClassification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "songyingxin/TextClassification-Pytorch" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "EdGENetworks/attention-networks-for-classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "bentrevett/pytorch-sentiment-analysis" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "miracleyoo/DPCNN-TextCNN-Pytorch-Inception"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "kk7nc/Text_Classification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "ThilinaRajapakse/pytorch-transformers-classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Tencent/NeuralNLP-NeuralClassifier" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "yao8839836/text_gcn" ["e"=1]
"slaysd/pytorch-sentiment-analysis-classification" -> "xiaobaicxy/text-classification-BiLSTM-Attention-pytorch"
"slaysd/pytorch-sentiment-analysis-classification" -> "clairett/pytorch-sentiment-classification"
"slaysd/pytorch-sentiment-analysis-classification" -> "u784799i/biLSTM_attn"
"slaysd/pytorch-sentiment-analysis-classification" -> "pranoyr/cnn-lstm" ["e"=1]
"dinghanshen/SWEM" -> "guoyinwang/LEAM"
"dinghanshen/SWEM" -> "taoshen58/DiSAN"
"dinghanshen/SWEM" -> "wangshy31/Densely-Connected-CNN-with-Multiscale-Feature-Attention" ["e"=1]
"dinghanshen/SWEM" -> "hustlingchen/A3NCF" ["e"=1]
"zenRRan/Sentiment-Analysis" -> "bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"rcmalli/keras-mobilenet" -> "stratospark/keras-multiprocess-image-data-generator"
"rcmalli/keras-mobilenet" -> "rcmalli/keras-squeezenet"
"rcmalli/keras-mobilenet" -> "Zehaos/MobileNet" ["e"=1]
"rcmalli/keras-mobilenet" -> "xiaochus/MobileNetV2" ["e"=1]
"Choco31415/Attention_Network_With_Keras" -> "ningshixian/LSTM_Attention"
"Choco31415/Attention_Network_With_Keras" -> "foamliu/Self-Attention-Keras"
"Choco31415/Attention_Network_With_Keras" -> "uhauha2929/examples"
"Choco31415/Attention_Network_With_Keras" -> "datalogue/keras-attention"
"Choco31415/Attention_Network_With_Keras" -> "philipperemy/keras-attention-mechanism"
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-multi-head"
"CyberZHG/keras-self-attention" -> "philipperemy/keras-attention-mechanism"
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-self-attention" -> "foamliu/Self-Attention-Keras"
"CyberZHG/keras-self-attention" -> "kpot/keras-transformer"
"CyberZHG/keras-self-attention" -> "thushv89/attention_keras"
"CyberZHG/keras-self-attention" -> "Lsdefine/attention-is-all-you-need-keras"
"CyberZHG/keras-self-attention" -> "ningshixian/LSTM_Attention"
"CyberZHG/keras-self-attention" -> "datalogue/keras-attention"
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-bert" ["e"=1]
"CyberZHG/keras-self-attention" -> "Separius/BERT-keras"
"CyberZHG/keras-self-attention" -> "bojone/attention"
"CyberZHG/keras-self-attention" -> "Choco31415/Attention_Network_With_Keras"
"CyberZHG/keras-self-attention" -> "ShawnyXiao/TextClassification-Keras" ["e"=1]
"CyberZHG/keras-self-attention" -> "bojone/seq2seq"
"Lsdefine/attention-is-all-you-need-keras" -> "kpot/keras-transformer"
"Lsdefine/attention-is-all-you-need-keras" -> "Separius/BERT-keras"
"Lsdefine/attention-is-all-you-need-keras" -> "philipperemy/keras-attention-mechanism"
"Lsdefine/attention-is-all-you-need-keras" -> "bojone/attention"
"Lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-transformer"
"Lsdefine/attention-is-all-you-need-keras" -> "datalogue/keras-attention"
"Lsdefine/attention-is-all-you-need-keras" -> "lvapeab/nmt-keras"
"Lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-self-attention"
"Lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-bert" ["e"=1]
"Lsdefine/attention-is-all-you-need-keras" -> "strongio/keras-elmo"
"Lsdefine/attention-is-all-you-need-keras" -> "keras-team/keras-contrib"
"Lsdefine/attention-is-all-you-need-keras" -> "farizrahman4u/seq2seq"
"Lsdefine/attention-is-all-you-need-keras" -> "tkipf/keras-gcn" ["e"=1]
"Lsdefine/attention-is-all-you-need-keras" -> "iliaschalkidis/ELMo-keras"
"Lsdefine/attention-is-all-you-need-keras" -> "Kyubyong/transformer" ["e"=1]
"kaushalshetty/Structured-Self-Attention" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"kaushalshetty/Structured-Self-Attention" -> "flrngel/Self-Attentive-tensorflow"
"kaushalshetty/Structured-Self-Attention" -> "guoyinwang/LEAM"
"kaushalshetty/Structured-Self-Attention" -> "roomylee/self-attentive-emb-tf"
"kaushalshetty/Structured-Self-Attention" -> "nn116003/self-attention-classification"
"kaushalshetty/Structured-Self-Attention" -> "EdGENetworks/attention-networks-for-classification"
"kaushalshetty/Structured-Self-Attention" -> "richliao/textClassifier"
"kaushalshetty/Structured-Self-Attention" -> "XMUNLP/Tagger"
"kaushalshetty/Structured-Self-Attention" -> "timbmg/Structured-Self-Attentive-Sentence-Embedding"
"kaushalshetty/Structured-Self-Attention" -> "taoshen58/DiSAN"
"kaushalshetty/Structured-Self-Attention" -> "TobiasLee/Text-Classification"
"kaushalshetty/Structured-Self-Attention" -> "foamliu/Self-Attention-Keras"
"kaushalshetty/Structured-Self-Attention" -> "lancopku/SU4MLC" ["e"=1]
"kaushalshetty/Structured-Self-Attention" -> "ilivans/tf-rnn-attention"
"kaushalshetty/Structured-Self-Attention" -> "yufengm/SelfAttentive"
"iamxiatian/xsimilarity" -> "HuangFJ/text-similarity"
"LambdaWx/CNN_sentence_tensorflow" -> "LambdaWx/con_sentence"
"LambdaWx/CNN_sentence_tensorflow" -> "clayandgithub/zh_cnn_text_classify"
"LambdaWx/CNN_sentence_tensorflow" -> "luchi007/RNN_Text_Classify"
"LambdaWx/CNN_sentence_tensorflow" -> "fendouai/Chinese-Text-Classification"
"pandeykartikey/Hierarchical-Attention-Network" -> "rishabhdhakarwal/Stock_Archives"
"pandeykartikey/Hierarchical-Attention-Network" -> "fristonio/gvm"
"pandeykartikey/Hierarchical-Attention-Network" -> "Cheneng/HiararchicalAttentionGRU"
"pandeykartikey/Hierarchical-Attention-Network" -> "agrim123/yapa"
"pandeykartikey/Hierarchical-Attention-Network" -> "swap-nil7/GSoC-Proposal"
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-transformer-xl"
"CyberZHG/keras-xlnet" -> "zedom1/XLNet_embbeding"
"CyberZHG/keras-xlnet" -> "ymcui/Chinese-PreTrained-XLNet" ["e"=1]
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-xlnet" -> "bojone/bert_in_keras" ["e"=1]
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-gradient-accumulation"
"nn116003/self-attention-classification" -> "mttk/rnn-classifier"
"DongjunLee/transformer-tensorflow" -> "lilianweng/transformer-tensorflow"
"DongjunLee/transformer-tensorflow" -> "flrngel/Self-Attentive-tensorflow"
"DongjunLee/transformer-tensorflow" -> "Kyubyong/transformer" ["e"=1]
"DongjunLee/transformer-tensorflow" -> "tobyyouup/conv_seq2seq" ["e"=1]
"DongjunLee/transformer-tensorflow" -> "Lsdefine/attention-is-all-you-need-keras"
"DongjunLee/transformer-tensorflow" -> "allenai/bilm-tf" ["e"=1]
"clairett/pytorch-sentiment-classification" -> "jinh574/pytorch-sentiment-analysis-classification"
"MachineLP/train_cnn-rnn-attention" -> "fwang91/residual-attention-network" ["e"=1]
"MachineLP/train_cnn-rnn-attention" -> "MachineLP/train_arch"
"MachineLP/train_cnn-rnn-attention" -> "ningshixian/LSTM_Attention"
"MachineLP/train_cnn-rnn-attention" -> "SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["e"=1]
"MachineLP/train_cnn-rnn-attention" -> "ilivans/tf-rnn-attention"
"MachineLP/train_cnn-rnn-attention" -> "bojone/attention"
"MachineLP/train_cnn-rnn-attention" -> "wushilian/CRNN_Attention_OCR_Chinese" ["e"=1]
"MachineLP/train_cnn-rnn-attention" -> "AlexGidiotis/Document-Classifier-LSTM"
"MachineLP/train_cnn-rnn-attention" -> "THTBSE/rnn_text_classification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "jiegzhan/multi-class-text-classification-cnn"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "luchi007/RNN_Text_Classify"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "richliao/textClassifier"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "indiejoseph/cnn-text-classification-tf-chinese"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "zackhy/TextClassification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "LunaBlack/RNN-Classification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "carpedm20/lstm-char-cnn-tensorflow" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "TobiasLee/Text-Classification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "chenyuntc/PyTorchText" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "ilivans/tf-rnn-attention"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "cahya-wirawan/cnn-text-classification-tf"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "yoonkim/CNN_sentence" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "chenzhi1992/Multi-Label-Text-Classification" ["e"=1]
"triplemeng/hierarchical-attention-model" -> "magical2world/tf-hierarchical-rnn"
"wichtounet/dll" -> "wichtounet/etl"
"wichtounet/dll" -> "Dobiasd/frugally-deep"
"wichtounet/dll" -> "Tencent/FeatherCNN" ["e"=1]
"wichtounet/dll" -> "clab/dynet" ["e"=1]
"fchollet/hualos" -> "fchollet/keras-blog"
"fchollet/hualos" -> "EderSantana/seya"
"fchollet/hualos" -> "jakebian/hera"
"fchollet/hualos" -> "hadim/keras-toolbox"
"fchollet/hualos" -> "jakebian/quiver"
"fchollet/hualos" -> "heuritech/convnets-keras"
"c1nty/Chinese_Spam_Filter" -> "AaronFang123/Naive-Bayes-classifier"
"c1nty/Chinese_Spam_Filter" -> "silverzhaojr/spam-filter"
"c1nty/Chinese_Spam_Filter" -> "shijing888/BayesSpam"
"zyymax/text-similarity" -> "xiaoran-2/TextSimilarity"
"zyymax/text-similarity" -> "HuangFJ/text-similarity"
"hycis/bidirectional_RNN" -> "hycis/Mozi"
"ningshixian/LSTM_Attention" -> "gentaiscool/lstm-attention"
"ningshixian/LSTM_Attention" -> "negar-rostamzadeh/LSTM-Attention"
"ningshixian/LSTM_Attention" -> "Choco31415/Attention_Network_With_Keras"
"ningshixian/LSTM_Attention" -> "philipperemy/keras-attention-mechanism"
"ningshixian/LSTM_Attention" -> "CyberZHG/keras-self-attention"
"ningshixian/LSTM_Attention" -> "PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["e"=1]
"ningshixian/LSTM_Attention" -> "foamliu/Self-Attention-Keras"
"ningshixian/LSTM_Attention" -> "bubbliiiing/Keras-Attention" ["e"=1]
"ningshixian/LSTM_Attention" -> "PatientEz/keras-attention-mechanism" ["e"=1]
"ningshixian/LSTM_Attention" -> "u784799i/biLSTM_attn"
"ningshixian/LSTM_Attention" -> "datalogue/keras-attention"
"ningshixian/LSTM_Attention" -> "gantheory/TPA-LSTM" ["e"=1]
"ningshixian/LSTM_Attention" -> "thushv89/attention_keras"
"ningshixian/LSTM_Attention" -> "jsyoon0823/Time-series-prediction" ["e"=1]
"ningshixian/LSTM_Attention" -> "MachineLP/train_cnn-rnn-attention"
"TropComplique/knowledge-distillation-keras" -> "tejasgodambe/knowledge-distillation"
"TropComplique/knowledge-distillation-keras" -> "Irtza/Keras_model_compression"
"TropComplique/knowledge-distillation-keras" -> "johnkorn/distillation"
"TropComplique/knowledge-distillation-keras" -> "patrickphat/Knowledge-Distillation-Keras"
"TropComplique/knowledge-distillation-keras" -> "tripdancer0916/keras-knowledge-distillation"
"TropComplique/knowledge-distillation-keras" -> "DushyantaDhyani/kdtf" ["e"=1]
"shijing888/BayesSpam" -> "c1nty/Chinese_Spam_Filter"
"shijing888/BayesSpam" -> "silverzhaojr/spam-filter"
"jacoxu/encoder_decoder" -> "nicolas-ivanov/debug_seq2seq"
"jacoxu/encoder_decoder" -> "farizrahman4u/seq2seq"
"jacoxu/encoder_decoder" -> "philipperemy/keras-seq2seq-example"
"jacoxu/encoder_decoder" -> "farizrahman4u/recurrentshop"
"jacoxu/encoder_decoder" -> "codekansas/keras-language-modeling"
"jacoxu/encoder_decoder" -> "eske/seq2seq" ["e"=1]
"jacoxu/encoder_decoder" -> "datalogai/recurrentshop"
"jacoxu/encoder_decoder" -> "shyamupa/snli-entailment"
"Neargye/hello_tf_c_api" -> "AmirulOm/tensorflow_capi_sample"
"Neargye/hello_tf_c_api" -> "PatWie/tensorflow-cmake"
"Neargye/hello_tf_c_api" -> "serizba/cppflow"
"Neargye/hello_tf_c_api" -> "skylook/tensorflow_cpp"
"Neargye/hello_tf_c_api" -> "Neargye/tensorflow"
"Neargye/hello_tf_c_api" -> "gdyshi/model_deployment"
"Neargye/hello_tf_c_api" -> "FloopCZ/tensorflow_cc"
"Neargye/hello_tf_c_api" -> "guikarist/tensorflow-windows-build-script"
"Neargye/hello_tf_c_api" -> "cjweeks/tensorflow-cmake"
"Neargye/hello_tf_c_api" -> "CasonTsai/MaskRcnn_tensorflow_cpp_inference"
"Neargye/hello_tf_c_api" -> "rky0930/tf_c_api"
"Neargye/hello_tf_c_api" -> "tensorflow/tensorrt" ["e"=1]
"Neargye/hello_tf_c_api" -> "Neargye/scope_guard"
"Neargye/hello_tf_c_api" -> "zhangcliff/tensorflow-c-mnist"
"Cheneng/DPCNN" -> "miracleyoo/DPCNN-TextCNN-Pytorch-Inception"
"Cheneng/DPCNN" -> "HaishuoFang/DPCNN"
"castorini/hedwig" -> "AndriyMulyar/bert_document_classification"
"castorini/hedwig" -> "uvipen/Hierarchical-attention-networks-pytorch"
"castorini/hedwig" -> "malteos/pytorch-bert-document-classification"
"castorini/hedwig" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"castorini/hedwig" -> "EdGENetworks/attention-networks-for-classification"
"castorini/hedwig" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"castorini/hedwig" -> "andyweizhao/capsule_text_classification" ["e"=1]
"castorini/hedwig" -> "namisan/mt-dnn" ["e"=1]
"castorini/hedwig" -> "jasonwei20/eda_nlp" ["e"=1]
"castorini/hedwig" -> "kk7nc/Text_Classification" ["e"=1]
"castorini/hedwig" -> "xuyige/BERT4doc-Classification" ["e"=1]
"castorini/hedwig" -> "kaushaltrivedi/fast-bert" ["e"=1]
"castorini/hedwig" -> "allenai/longformer" ["e"=1]
"castorini/hedwig" -> "nyu-dl/dl4marco-bert" ["e"=1]
"castorini/hedwig" -> "howardhsu/BERT-for-RRC-ABSA" ["e"=1]
"taoshen58/BiBloSA" -> "taoshen58/DiSAN"
"ValYouW/tflite-dist" -> "ValYouW/crossplatform-tflite-object-detecion"
"ValYouW/tflite-dist" -> "ValYouW/tflite-win-c"
"Tixierae/deep_learning_NLP" -> "strongio/keras-elmo"
"Tixierae/deep_learning_NLP" -> "richliao/textClassifier"
"Tixierae/deep_learning_NLP" -> "TobiasLee/Text-Classification"
"Tixierae/deep_learning_NLP" -> "BrambleXu/nlp-beginner-guide-keras"
"Tixierae/deep_learning_NLP" -> "astorfi/Deep-Learning-NLP" ["e"=1]
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-self-attention"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-multi-head" -> "kpot/keras-transformer"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-transformer-xl"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-layer-normalization"
"lining0806/TextMining" -> "lining0806/TextClassify2"
"lining0806/TextMining" -> "Roshanson/TextInfoExp" ["e"=1]
"lining0806/TextMining" -> "lc222/text_classification_AI100"
"rcmalli/keras-squeezenet" -> "DT42/squeezenet_demo"
"rcmalli/keras-squeezenet" -> "rcmalli/keras-mobilenet"
"rcmalli/keras-squeezenet" -> "imlab-uiip/keras-segnet" ["e"=1]
"rcmalli/keras-squeezenet" -> "titu1994/Keras-ResNeXt" ["e"=1]
"rcmalli/keras-squeezenet" -> "yhenon/keras-frcnn" ["e"=1]
"rcmalli/keras-squeezenet" -> "chasingbob/squeezenet-keras"
"rcmalli/keras-squeezenet" -> "vonclites/squeezenet"
"rcmalli/keras-squeezenet" -> "titu1994/DenseNet" ["e"=1]
"rcmalli/keras-squeezenet" -> "stratospark/keras-multiprocess-image-data-generator"
"rcmalli/keras-squeezenet" -> "DeepScale/SqueezeNet" ["e"=1]
"rcmalli/keras-squeezenet" -> "Irtza/Keras_model_compression"
"rcmalli/keras-squeezenet" -> "rykov8/ssd_keras" ["e"=1]
"rcmalli/keras-squeezenet" -> "DwangoMediaVillage/keras_compressor"
"rcmalli/keras-squeezenet" -> "avoroshilov/tf-squeezenet"
"rcmalli/keras-squeezenet" -> "kentsommer/keras-inceptionV4" ["e"=1]
"anayebi/keras-extra" -> "jamesmf/mnistCRNN"
"roomylee/self-attentive-emb-tf" -> "flrngel/Self-Attentive-tensorflow"
"fchollet/keras-blog" -> "fchollet/tensorflow"
"fchollet/tensorflow" -> "fchollet/community"
"fchollet/tensorflow" -> "fchollet/keras-blog"
"fchollet/tensorflow" -> "fchollet/tensorboard"
"yanyiwu/simhash" -> "yanyiwu/cppjieba" ["e"=1]
"yanyiwu/simhash" -> "leonsim/simhash"
"yanyiwu/simhash" -> "yanyiwu/simhash_server"
"yanyiwu/simhash" -> "sing1ee/simhash-java"
"yanyiwu/simhash" -> "yanyiwu/gosimhash"
"yanyiwu/simhash" -> "seomoz/simhash-py"
"yanyiwu/simhash" -> "1e0ng/simhash"
"yanyiwu/simhash" -> "zyymax/text-similarity"
"yanyiwu/simhash" -> "seomoz/simhash-cpp"
"yanyiwu/simhash" -> "yanyiwu/limonp" ["e"=1]
"yanyiwu/simhash" -> "baidu/Familia" ["e"=1]
"yanyiwu/simhash" -> "xlturing/Simhash4J"
"yanyiwu/simhash" -> "guestwalk/kaggle-2014-criteo" ["e"=1]
"yanyiwu/simhash" -> "pakrchen/text-antispam"
"yanyiwu/simhash" -> "chen3feng/typhoon-blade" ["e"=1]
"peterjc123/pytorch-scripts" -> "peterjc123/pytorch"
"peterjc123/pytorch-scripts" -> "philferriere/dlwin"
"peterjc123/pytorch-scripts" -> "lanpa/tensorboard-pytorch" ["e"=1]
"indiejoseph/doc-han-att" -> "indiejoseph/chinese-char-rnn"
"indiejoseph/doc-han-att" -> "ematvey/hierarchical-attention-networks"
"indiejoseph/doc-han-att" -> "kinni/char-cnn-text-classification-tensorflow"
"prateekjoshi565/textrank_text_summarization" -> "aravindpai/How-to-build-own-text-summarizer-using-deep-learning"
"titu1994/Snapshot-Ensembles" -> "gaohuang/SnapshotEnsemble"
"titu1994/Snapshot-Ensembles" -> "arthurdouillard/keras-snapshot_ensembles"
"titu1994/Snapshot-Ensembles" -> "moskomule/pytorch.snapshot.ensembles"
"titu1994/Snapshot-Ensembles" -> "kristpapadopoulos/keras-stochastic-weight-averaging"
"titu1994/Snapshot-Ensembles" -> "farizrahman4u/keras-contrib"
"titu1994/Snapshot-Ensembles" -> "emrul/Learning-Rate"
"titu1994/Snapshot-Ensembles" -> "bckenstler/CLR"
"titu1994/Snapshot-Ensembles" -> "titu1994/Keras-Classification-Models" ["e"=1]
"titu1994/Snapshot-Ensembles" -> "surmenok/keras_lr_finder"
"zackhy/TextClassification" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"zackhy/TextClassification" -> "TobiasLee/Text-Classification"
"zackhy/TextClassification" -> "luchi007/RNN_Text_Classify"
"FloopCZ/tensorflow_cc" -> "cjweeks/tensorflow-cmake"
"FloopCZ/tensorflow_cc" -> "PatWie/tensorflow-cmake"
"FloopCZ/tensorflow_cc" -> "serizba/cppflow"
"FloopCZ/tensorflow_cc" -> "kecsap/tensorflow_cpp_packaging"
"FloopCZ/tensorflow_cc" -> "Neargye/hello_tf_c_api"
"FloopCZ/tensorflow_cc" -> "lysukhin/tensorflow-object-detection-cpp"
"FloopCZ/tensorflow_cc" -> "Dobiasd/frugally-deep"
"FloopCZ/tensorflow_cc" -> "bennyfri/TFMacCpp"
"FloopCZ/tensorflow_cc" -> "tensorflow/runtime" ["e"=1]
"FloopCZ/tensorflow_cc" -> "pplonski/keras2cpp"
"FloopCZ/tensorflow_cc" -> "AmirulOm/tensorflow_capi_sample"
"FloopCZ/tensorflow_cc" -> "jhjin/tensorflow-cpp"
"FloopCZ/tensorflow_cc" -> "guikarist/tensorflow-windows-build-script"
"FloopCZ/tensorflow_cc" -> "amir-abdi/keras_to_tensorflow" ["e"=1]
"FloopCZ/tensorflow_cc" -> "da03/Attention-OCR" ["e"=1]
"harveyaot/DianJing" -> "QuantumLiu/Neural-Headline-Generator-CN"
"uvipen/Hierarchical-attention-networks-pytorch" -> "EdGENetworks/attention-networks-for-classification"
"uvipen/Hierarchical-attention-networks-pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"uvipen/Hierarchical-attention-networks-pytorch" -> "tqtg/hierarchical-attention-networks"
"uvipen/Hierarchical-attention-networks-pytorch" -> "sharkmir1/Hierarchical-Attention-Network"
"uvipen/Hierarchical-attention-networks-pytorch" -> "castorini/hedwig"
"uvipen/Hierarchical-attention-networks-pytorch" -> "richliao/textClassifier"
"uvipen/Hierarchical-attention-networks-pytorch" -> "pandeykartikey/Hierarchical-Attention-Network"
"uvipen/Hierarchical-attention-networks-pytorch" -> "iworldtong/text_gcn.pytorch" ["e"=1]
"uvipen/Hierarchical-attention-networks-pytorch" -> "Hazoom/bert-han"
"bojone/crf" -> "bojone/seq2seq"
"bojone/crf" -> "bojone/bert_in_keras" ["e"=1]
"bojone/crf" -> "bojone/on-lstm" ["e"=1]
"farizrahman4u/recurrentshop" -> "farizrahman4u/seq2seq"
"farizrahman4u/recurrentshop" -> "nicolas-ivanov/debug_seq2seq"
"farizrahman4u/recurrentshop" -> "jacoxu/encoder_decoder"
"farizrahman4u/recurrentshop" -> "datalogue/keras-attention"
"farizrahman4u/recurrentshop" -> "lvapeab/nmt-keras"
"farizrahman4u/recurrentshop" -> "philipperemy/keras-attention-mechanism"
"farizrahman4u/recurrentshop" -> "Lsdefine/attention-is-all-you-need-keras"
"farizrahman4u/recurrentshop" -> "bstriner/keras-adversarial" ["e"=1]
"farizrahman4u/recurrentshop" -> "lmthang/thesis" ["e"=1]
"shyamupa/snli-entailment" -> "junfenglx/reasoning_attention"
"shyamupa/snli-entailment" -> "codekansas/keras-language-modeling"
"shyamupa/snli-entailment" -> "vsitzmann/snli-attention-tensorflow"
"shyamupa/snli-entailment" -> "cheng6076/SNLI-attention" ["e"=1]
"shyamupa/snli-entailment" -> "shuohangwang/SeqMatchSeq" ["e"=1]
"pakrchen/text-antispam" -> "clayandgithub/zh_cnn_text_classify"
"pakrchen/text-antispam" -> "JansonKong/spam_filtering"
"philferriere/dlwin" -> "peterjc123/pytorch-scripts"
"philferriere/dlwin" -> "jakebian/quiver"
"philferriere/dlwin" -> "matthiasplappert/keras-rl" ["e"=1]
"philferriere/dlwin" -> "leriomaggio/deep-learning-keras-euroscipy2016"
"DwangoMediaVillage/keras_compressor" -> "Irtza/Keras_model_compression"
"DwangoMediaVillage/keras_compressor" -> "guoxiaolu/model_compression"
"DwangoMediaVillage/keras_compressor" -> "TianzhongSong/Model-Compression-Keras"
"kpot/keras-transformer" -> "Lsdefine/attention-is-all-you-need-keras"
"kpot/keras-transformer" -> "CyberZHG/keras-transformer"
"kpot/keras-transformer" -> "Separius/BERT-keras"
"kpot/keras-transformer" -> "CyberZHG/keras-self-attention"
"kpot/keras-transformer" -> "CyberZHG/keras-multi-head"
"kpot/keras-transformer" -> "datalogue/keras-attention"
"kpot/keras-transformer" -> "CyberZHG/keras-bert" ["e"=1]
"kpot/keras-transformer" -> "kpe/bert-for-tf2" ["e"=1]
"kpot/keras-transformer" -> "keras-team/keras-contrib"
"kpot/keras-transformer" -> "philipperemy/keras-attention-mechanism"
"kpot/keras-transformer" -> "strongio/keras-elmo"
"kpot/keras-transformer" -> "bojone/attention"
"kpot/keras-transformer" -> "iliaschalkidis/ELMo-keras"
"kpot/keras-transformer" -> "CyberZHG/keras-transformer-xl"
"kpot/keras-transformer" -> "lvapeab/nmt-keras"
"jiegzhan/multi-class-text-classification-cnn" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"jiegzhan/multi-class-text-classification-cnn" -> "indiejoseph/cnn-text-classification-tf-chinese"
"jiegzhan/multi-class-text-classification-cnn" -> "richliao/textClassifier"
"jiegzhan/multi-class-text-classification-cnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn" -> "luchi007/RNN_Text_Classify"
"jiegzhan/multi-class-text-classification-cnn" -> "zackhy/TextClassification"
"jiegzhan/multi-class-text-classification-cnn" -> "liu-nlper/DocumentClassification"
"jiegzhan/multi-class-text-classification-cnn" -> "cahya-wirawan/cnn-text-classification-tf"
"jiegzhan/multi-class-text-classification-cnn" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn" -> "LambdaWx/CNN_sentence_tensorflow"
"jiegzhan/multi-class-text-classification-cnn" -> "clayandgithub/zh_cnn_text_classify"
"jiegzhan/multi-class-text-classification-cnn" -> "jiegzhan/machine-learning-stanford"
"jiegzhan/multi-class-text-classification-cnn" -> "bhaveshoswal/CNN-text-classification-keras"
"jiegzhan/multi-class-text-classification-cnn" -> "ilivans/tf-rnn-attention"
"jiegzhan/multi-class-text-classification-cnn" -> "ematvey/hierarchical-attention-networks"
"datalogue/keras-attention" -> "philipperemy/keras-attention-mechanism"
"datalogue/keras-attention" -> "Lsdefine/attention-is-all-you-need-keras"
"datalogue/keras-attention" -> "thushv89/attention_keras"
"datalogue/keras-attention" -> "ilivans/tf-rnn-attention"
"datalogue/keras-attention" -> "farizrahman4u/seq2seq"
"datalogue/keras-attention" -> "richliao/textClassifier"
"datalogue/keras-attention" -> "CyberZHG/keras-self-attention"
"datalogue/keras-attention" -> "Choco31415/Attention_Network_With_Keras"
"datalogue/keras-attention" -> "kpot/keras-transformer"
"datalogue/keras-attention" -> "ningshixian/LSTM_Attention"
"datalogue/keras-attention" -> "lvapeab/nmt-keras"
"datalogue/keras-attention" -> "codekansas/keras-language-modeling"
"datalogue/keras-attention" -> "farizrahman4u/recurrentshop"
"datalogue/keras-attention" -> "Separius/BERT-keras"
"datalogue/keras-attention" -> "jacoxu/encoder_decoder"
"bojone/seq2seq" -> "bojone/bert_in_keras" ["e"=1]
"bojone/seq2seq" -> "bojone/attention"
"bojone/seq2seq" -> "bojone/crf"
"bojone/seq2seq" -> "CyberZHG/keras-xlnet"
"bojone/seq2seq" -> "stephen-v/zh-NER-keras"
"bojone/seq2seq" -> "ymcui/Chinese-PreTrained-XLNet" ["e"=1]
"bojone/seq2seq" -> "bojone/Capsule" ["e"=1]
"bojone/seq2seq" -> "bojone/kg-2019-baseline" ["e"=1]
"bojone/seq2seq" -> "CyberZHG/keras-transformer"
"bojone/seq2seq" -> "harveyaot/DianJing"
"bojone/seq2seq" -> "CyberZHG/keras-bert" ["e"=1]
"bojone/seq2seq" -> "shawroad/Keras-Learning-Summary"
"bojone/seq2seq" -> "ztz818/Automatic-generation-of-text-summaries" ["e"=1]
"cahya-wirawan/cnn-text-classification-tf" -> "cahya-wirawan/ML-Collection"
"bstriner/keras-tqdm" -> "fchollet/hualos"
"bstriner/keras-tqdm" -> "netrack/keras-metrics" ["e"=1]
"heuritech/convnets-keras" -> "dandxy89/ImageModels"
"heuritech/convnets-keras" -> "jacobgil/keras-cam" ["e"=1]
"heuritech/convnets-keras" -> "jakebian/quiver"
"heuritech/convnets-keras" -> "tdeboissiere/VGG16CAM-keras" ["e"=1]
"heuritech/convnets-keras" -> "jocicmarko/ultrasound-nerve-segmentation" ["e"=1]
"heuritech/convnets-keras" -> "osh/KerasGAN" ["e"=1]
"heuritech/convnets-keras" -> "jacobgil/keras-dcgan" ["e"=1]
"heuritech/convnets-keras" -> "MarcBS/keras"
"heuritech/convnets-keras" -> "FHainzl/Visualizing_Understanding_CNN_Implementation" ["e"=1]
"heuritech/convnets-keras" -> "EderSantana/seya"
"heuritech/convnets-keras" -> "fchollet/hualos"
"heuritech/convnets-keras" -> "DT42/squeezenet_demo"
"heuritech/convnets-keras" -> "duggalrahul/AlexNet-Experiments-Keras"
"heuritech/convnets-keras" -> "jakebian/hera"
"heuritech/convnets-keras" -> "jazzsaxmafia/Weakly_detector" ["e"=1]
"bckenstler/CLR" -> "titu1994/keras-one-cycle"
"bckenstler/CLR" -> "surmenok/keras_lr_finder"
"bckenstler/CLR" -> "titu1994/Snapshot-Ensembles"
"bckenstler/CLR" -> "albu/albumentations" ["e"=1]
"bckenstler/CLR" -> "stratospark/keras-multiprocess-image-data-generator"
"bckenstler/CLR" -> "raghakot/keras-vis" ["e"=1]
"bckenstler/CLR" -> "maxpumperla/hyperas" ["e"=1]
"bckenstler/CLR" -> "titu1994/keras-squeeze-excite-network" ["e"=1]
"bckenstler/CLR" -> "philipperemy/keras-attention-mechanism"
"bckenstler/CLR" -> "keras-team/keras-contrib"
"bckenstler/CLR" -> "qubvel/segmentation_models" ["e"=1]
"bckenstler/CLR" -> "flyyufelix/cnn_finetune" ["e"=1]
"bckenstler/CLR" -> "rcmalli/keras-mobilenet"
"bckenstler/CLR" -> "qubvel/efficientnet" ["e"=1]
"bckenstler/CLR" -> "timgaripov/swa" ["e"=1]
"titu1994/keras-one-cycle" -> "psklight/keras_one_cycle_clr"
"titu1994/keras-one-cycle" -> "surmenok/keras_lr_finder"
"titu1994/keras-one-cycle" -> "bckenstler/CLR"
"titu1994/keras-one-cycle" -> "shaoanlu/AdamW-and-SGDW"
"titu1994/keras-one-cycle" -> "WittmannF/LRFinder"
"titu1994/keras-one-cycle" -> "yu4u/mixup-generator" ["e"=1]
"fendouai/Chinese-Text-Classification" -> "indiejoseph/cnn-text-classification-tf-chinese"
"fendouai/Chinese-Text-Classification" -> "clayandgithub/zh_cnn_text_classify"
"fendouai/Chinese-Text-Classification" -> "LambdaWx/CNN_sentence_tensorflow"
"indiejoseph/cnn-text-classification-tf-chinese" -> "indiejoseph/chinese-char-rnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "luchi007/RNN_Text_Classify"
"indiejoseph/cnn-text-classification-tf-chinese" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "fendouai/Chinese-Text-Classification"
"indiejoseph/cnn-text-classification-tf-chinese" -> "kinni/char-cnn-text-classification-tensorflow"
"indiejoseph/cnn-text-classification-tf-chinese" -> "jiegzhan/multi-class-text-classification-cnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "clayandgithub/zh_cnn_text_classify"
"u784799i/biLSTM_attn" -> "slaysd/pytorch-sentiment-analysis-classification"
"AndriyMulyar/semantic-text-similarity" -> "AndriyMulyar/bert_document_classification"
"AndriyMulyar/semantic-text-similarity" -> "tlatkowski/multihead-siamese-nets" ["e"=1]
"strongio/keras-bert" -> "strongio/keras-elmo"
"strongio/keras-bert" -> "Separius/BERT-keras"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "uvipen/Hierarchical-attention-networks-pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "prakashpandey9/Text-Classification-Pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "pandeykartikey/Hierarchical-Attention-Network"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "castorini/hedwig"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "EdGENetworks/attention-networks-for-classification"
"sing1ee/simhash-java" -> "xlturing/Simhash4J"
"sing1ee/simhash-java" -> "CreekLou/simhash"
"galsang/CNN-sentence-classification-pytorch" -> "Cheneng/TextCNN" ["e"=1]
"galsang/CNN-sentence-classification-pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"DT42/squeezenet_demo" -> "rcmalli/keras-squeezenet"
"DT42/squeezenet_demo" -> "vonclites/squeezenet"
"DT42/squeezenet_demo" -> "chasingbob/squeezenet-keras"
"DT42/squeezenet_demo" -> "DeepScale/SqueezeNet" ["e"=1]
"luchi007/RNN_Text_Classify" -> "LunaBlack/RNN-Classification"
"luchi007/RNN_Text_Classify" -> "LambdaWx/CNN_sentence_tensorflow"
"luchi007/RNN_Text_Classify" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"luchi007/RNN_Text_Classify" -> "indiejoseph/cnn-text-classification-tf-chinese"
"EderSantana/seya" -> "fchollet/hualos"
"EderSantana/seya" -> "skaae/transformer_network" ["e"=1]
"EderSantana/seya" -> "jbornschein/draw" ["e"=1]
"EderSantana/seya" -> "phreeza/keras-GAN" ["e"=1]
"EderSantana/seya" -> "codekansas/keras-language-modeling"
"EderSantana/seya" -> "datalogai/recurrentshop"
"EderSantana/seya" -> "osh/kerlym" ["e"=1]
"EderSantana/seya" -> "farizrahman4u/keras-contrib"
"EderSantana/seya" -> "AgnezIO/agnez"
"EderSantana/seya" -> "IndicoDataSolutions/Passage" ["e"=1]
"EderSantana/seya" -> "anayebi/keras-extra"
"EderSantana/seya" -> "shawntan/neural-turing-machines" ["e"=1]
"EderSantana/seya" -> "joschu/cgt" ["e"=1]
"EderSantana/seya" -> "hycis/bidirectional_RNN"
"EderSantana/seya" -> "mila-udem/platoon" ["e"=1]
"seomoz/simhash-py" -> "seomoz/simhash-cpp"
"seomoz/simhash-py" -> "leonsim/simhash"
"seomoz/simhash-py" -> "seomoz/simhash-db-py"
"seomoz/simhash-py" -> "liangsun/simhash"
"seomoz/simhash-py" -> "scrapinghub/python-simhash"
"seomoz/simhash-py" -> "seomoz/simhash-cluster"
"seomoz/simhash-py" -> "parkr/near-dup-detection"
"strongio/keras-elmo" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"strongio/keras-elmo" -> "strongio/keras-bert"
"strongio/keras-elmo" -> "iliaschalkidis/ELMo-keras"
"strongio/keras-elmo" -> "JHart96/keras_elmo_embedding_layer"
"strongio/keras-elmo" -> "searobbersduck/ELMo_Chin" ["e"=1]
"strongio/keras-elmo" -> "PrashantRanjan09/Elmo-Tutorial"
"strongio/keras-elmo" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec"
"strongio/keras-elmo" -> "allenai/bilm-tf" ["e"=1]
"strongio/keras-elmo" -> "Separius/BERT-keras"
"strongio/keras-elmo" -> "nlpjoe/2018-CCL-UIIMCS" ["e"=1]
"bhaveshoswal/CNN-text-classification-keras" -> "raghakot/keras-text"
"bhaveshoswal/CNN-text-classification-keras" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras"
"bhaveshoswal/CNN-text-classification-keras" -> "mhjabreel/CharCnn_Keras" ["e"=1]
"CyberZHG/keras-transformer" -> "kpot/keras-transformer"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-multi-head"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-self-attention"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-xlnet"
"CyberZHG/keras-transformer" -> "Lsdefine/attention-is-all-you-need-keras"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-transformer-xl"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-bert" ["e"=1]
"CyberZHG/keras-transformer" -> "bojone/seq2seq"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-layer-normalization"
"CyberZHG/keras-transformer" -> "kpe/bert-for-tf2" ["e"=1]
"CyberZHG/keras-transformer" -> "CyberZHG/keras-pos-embd"
"CyberZHG/keras-transformer" -> "Separius/BERT-keras"
"CyberZHG/keras-transformer" -> "xiaosongshine/transfromer_keras"
"CyberZHG/keras-transformer" -> "suyash/transformer"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-gpt-2"
"xlturing/Simhash4J" -> "sing1ee/simhash-java"
"guikarist/tensorflow-windows-build-script" -> "sitting-duck/stuff"
"farizrahman4u/keras-contrib" -> "datalogai/recurrentshop"
"farizrahman4u/keras-contrib" -> "philipperemy/keras-visualize-activations"
"farizrahman4u/keras-contrib" -> "aurora95/Keras-FCN" ["e"=1]
"farizrahman4u/keras-contrib" -> "yhenon/keras-frcnn" ["e"=1]
"farizrahman4u/keras-contrib" -> "EderSantana/seya"
"farizrahman4u/keras-contrib" -> "kentsommer/keras-inceptionV4" ["e"=1]
"farizrahman4u/keras-contrib" -> "titu1994/Snapshot-Ensembles"
"farizrahman4u/keras-contrib" -> "phreeza/keras-GAN" ["e"=1]
"farizrahman4u/keras-contrib" -> "titu1994/DenseNet" ["e"=1]
"farizrahman4u/keras-contrib" -> "bstriner/keras-adversarial" ["e"=1]
"farizrahman4u/keras-contrib" -> "osh/KerasGAN" ["e"=1]
"farizrahman4u/keras-contrib" -> "kuza55/keras-extras"
"farizrahman4u/keras-contrib" -> "codekansas/gandlf"
"farizrahman4u/keras-contrib" -> "jakebian/quiver"
"farizrahman4u/keras-contrib" -> "the-moliver/kfs"
"miracleyoo/DPCNN-TextCNN-Pytorch-Inception" -> "Cheneng/DPCNN"
"ThilinaRajapakse/pytorch-transformers-classification" -> "ThilinaRajapakse/BERT_binary_text_classification"
"ThilinaRajapakse/pytorch-transformers-classification" -> "Shivampanwar/Bert-text-classification"
"ThilinaRajapakse/pytorch-transformers-classification" -> "ThilinaRajapakse/simpletransformers" ["e"=1]
"liushaoweihua/keras-bert-ner" -> "liushaoweihua/Keras-Bert-Kbqa"
"wichtounet/etl" -> "wichtounet/dll"
"AmirulOm/tensorflow_capi_sample" -> "Neargye/hello_tf_c_api"
"raghakot/keras-text" -> "bhaveshoswal/CNN-text-classification-keras"
"raghakot/keras-text" -> "Separius/BERT-keras"
"raghakot/keras-text" -> "stevewyl/keras_text_classification"
"raghakot/keras-text" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras"
"raghakot/keras-text" -> "hamelsmu/ktext" ["e"=1]
"ThilinaRajapakse/BERT_binary_text_classification" -> "ThilinaRajapakse/pytorch-transformers-classification"
"liangsun/simhash" -> "aszxqw/simhash"
"peterjc123/pytorch" -> "tylergenter/pytorch"
"peterjc123/pytorch" -> "peterjc123/pytorch-scripts"
"peterjc123/pytorch" -> "peterjc123/LiveIDE" ["e"=1]
"MarcBS/keras" -> "pierluigiferrari/caffe_weight_converter"
"MarcBS/keras" -> "jacobgil/keras-cam" ["e"=1]
"Separius/BERT-keras" -> "Lsdefine/attention-is-all-you-need-keras"
"Separius/BERT-keras" -> "CyberZHG/keras-bert" ["e"=1]
"Separius/BERT-keras" -> "brightmart/bert_language_understanding" ["e"=1]
"Separius/BERT-keras" -> "kpot/keras-transformer"
"Separius/BERT-keras" -> "bojone/bert_in_keras" ["e"=1]
"Separius/BERT-keras" -> "strongio/keras-elmo"
"Separius/BERT-keras" -> "allenai/bilm-tf" ["e"=1]
"Separius/BERT-keras" -> "philipperemy/keras-attention-mechanism"
"Separius/BERT-keras" -> "bojone/attention"
"Separius/BERT-keras" -> "strongio/keras-bert"
"Separius/BERT-keras" -> "Jiakui/awesome-bert" ["e"=1]
"Separius/BERT-keras" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"Separius/BERT-keras" -> "huggingface/pytorch-pretrained-BERT" ["e"=1]
"Separius/BERT-keras" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"Separius/BERT-keras" -> "richliao/textClassifier"
"lilianweng/transformer-tensorflow" -> "DongjunLee/transformer-tensorflow"
"lysukhin/tensorflow-object-detection-cpp" -> "moorage/OpenCVTensorflowExample"
"lysukhin/tensorflow-object-detection-cpp" -> "hluu11/SimpleTF-CPP"
"strubell/LISA" -> "XMUNLP/Tagger"
"strubell/LISA" -> "luheng/deep_srl"
"strubell/LISA" -> "strubell/LISA-v1"
"strubell/LISA" -> "luheng/lsgn"
"strubell/LISA" -> "microth/PathLSTM"
"cedias/Hierarchical-Sentiment" -> "cedias/HAN-pytorch"
"diegma/neural-dep-srl" -> "microth/PathLSTM"
"diegma/neural-dep-srl" -> "malllabiisc/NeuralDater"
"diegma/neural-dep-srl" -> "luheng/deep_srl"
"kuza55/keras-extras" -> "avolkov1/keras_experiments"
"kuza55/keras-extras" -> "stratospark/keras-multiprocess-image-data-generator"
"kuza55/keras-extras" -> "hadim/keras-toolbox"
"kuza55/keras-extras" -> "farizrahman4u/keras-contrib"
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" -> "prateekjoshi565/textrank_text_summarization"
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" -> "theamrzaki/text_summurization_abstractive_methods" ["e"=1]
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" -> "edubey/text-summarizer"
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" -> "thushv89/attention_keras"
"bojone/keras_lookahead" -> "CyberZHG/keras-radam"
"bojone/keras_lookahead" -> "CyberZHG/keras-lookahead"
"bojone/keras_lookahead" -> "bojone/keras_lazyoptimizer"
"bojone/keras_lookahead" -> "titu1994/keras_rectified_adam"
"qubvel/tta_wrapper" -> "tsterbak/keras_tta"
"PatWie/tensorflow-cmake" -> "FloopCZ/tensorflow_cc"
"PatWie/tensorflow-cmake" -> "Neargye/hello_tf_c_api"
"PatWie/tensorflow-cmake" -> "cjweeks/tensorflow-cmake"
"PatWie/tensorflow-cmake" -> "guikarist/tensorflow-windows-build-script"
"PatWie/tensorflow-cmake" -> "formath/tensorflow-predictor-cpp"
"PatWie/tensorflow-cmake" -> "lysukhin/tensorflow-object-detection-cpp"
"PatWie/tensorflow-cmake" -> "kecsap/tensorflow_cpp_packaging"
"PatWie/tensorflow-cmake" -> "tensorflow/custom-op" ["e"=1]
"PatWie/tensorflow-cmake" -> "serizba/cppflow"
"iliaschalkidis/ELMo-keras" -> "strongio/keras-elmo"
"surmenok/keras_lr_finder" -> "titu1994/keras-one-cycle"
"surmenok/keras_lr_finder" -> "bckenstler/CLR"
"surmenok/keras_lr_finder" -> "WittmannF/LRFinder"
"surmenok/keras_lr_finder" -> "psklight/keras_one_cycle_clr"
"surmenok/keras_lr_finder" -> "titu1994/Snapshot-Ensembles"
"luheng/lsgn" -> "hiroki13/span-based-srl"
"luheng/lsgn" -> "bcmi220/unisrl"
"1e0ng/simhash" -> "scrapinghub/python-simhash"
"1e0ng/simhash" -> "seomoz/simhash-py"
"1e0ng/simhash" -> "hybridtheory/floc-simhash"
"1e0ng/simhash" -> "yanyiwu/simhash"
"1e0ng/simhash" -> "zyymax/text-similarity"
"philipperemy/keras-visualize-activations" -> "jacobgil/keras-filter-visualization"
"philipperemy/keras-visualize-activations" -> "farizrahman4u/keras-contrib"
"malllabiisc/NeuralDater" -> "malllabiisc/AD3"
"moof2k/kerasify" -> "pplonski/keras2cpp"
"moof2k/kerasify" -> "harmanpreet93/keras-model-to-cpp"
"gaohuang/SnapshotEnsemble" -> "titu1994/Snapshot-Ensembles"
"gaohuang/SnapshotEnsemble" -> "moskomule/pytorch.snapshot.ensembles"
"inejc/painters" -> "small-yellow-duck/kaggle_art"
"flrngel/Self-Attentive-tensorflow" -> "roomylee/self-attentive-emb-tf"
"flrngel/Self-Attentive-tensorflow" -> "kaushalshetty/Structured-Self-Attention"
"flrngel/Self-Attentive-tensorflow" -> "taoshen58/DiSAN"
"flrngel/Self-Attentive-tensorflow" -> "roomylee/self-attention-tf"
"aszxqw/cppjieba" -> "aszxqw/simhash"
"aszxqw/cppjieba" -> "aszxqw/limonp"
"aszxqw/cppjieba" -> "aszxqw/libcppjieba"
"aszxqw/cppjieba" -> "aszxqw/nodejieba"
"aszxqw/cppjieba" -> "aszxqw/keyword_server"
"aszxqw/cppjieba" -> "guochy2012/EchoLib"
"CyberZHG/keras-transformer-xl" -> "CyberZHG/keras-adaptive-softmax"
"PrashantRanjan09/Elmo-Tutorial" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec"
"PrashantRanjan09/Elmo-Tutorial" -> "strongio/keras-elmo"
"PrashantRanjan09/Elmo-Tutorial" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"PrashantRanjan09/Elmo-Tutorial" -> "JHart96/keras_elmo_embedding_layer"
"gentaiscool/lstm-attention" -> "ningshixian/LSTM_Attention"
"AndriyMulyar/bert_document_classification" -> "malteos/pytorch-bert-document-classification"
"AndriyMulyar/bert_document_classification" -> "castorini/hedwig"
"AndriyMulyar/bert_document_classification" -> "ArmandDS/bert_for_long_text"
"vonclites/squeezenet" -> "DT42/squeezenet_demo"
"raviqqe/tensorflow-font2char2word2sent2doc" -> "ematvey/deep-text-classifier"
"nicolas-ivanov/debug_seq2seq" -> "nicolas-ivanov/seq2seq_chatbot_links" ["e"=1]
"nicolas-ivanov/debug_seq2seq" -> "farizrahman4u/seq2seq"
"nicolas-ivanov/debug_seq2seq" -> "nicolas-ivanov/tf_seq2seq_chatbot" ["e"=1]
"nicolas-ivanov/debug_seq2seq" -> "jacoxu/encoder_decoder"
"nicolas-ivanov/debug_seq2seq" -> "farizrahman4u/recurrentshop"
"nicolas-ivanov/debug_seq2seq" -> "Linusp/soph"
"jakebian/hera" -> "jakebian/quiver"
"jakebian/hera" -> "fchollet/hualos"
"rouseguy/europython2016_dl-nlp" -> "leriomaggio/deep-learning-keras-euroscipy2016"
"fristonio/docker.rs" -> "fristonio/gvm"
"Irtza/Keras_model_compression" -> "DwangoMediaVillage/keras_compressor"
"aszxqw/simhash" -> "aszxqw/keyword_server"
"guochy2012/FtpServer" -> "guochy2012/EchoLib"
"leriomaggio/deep-learning-keras-euroscipy2016" ["l"="30.916,31.525"]
"rouseguy/europython2016_dl-nlp" ["l"="30.891,31.503"]
"jakebian/quiver" ["l"="30.96,31.56"]
"joanbruna/stat212b" ["l"="27.139,34.224"]
"saiprashanths/dl-setup" ["l"="27.155,34.135"]
"mila-udem/summerschool2015" ["l"="27.073,34.183"]
"sjchoi86/dl_tutorials" ["l"="23.447,31.132"]
"coreylynch/async-rl" ["l"="24.867,35.873"]
"jakebian/hera" ["l"="30.975,31.541"]
"TomAugspurger/modern-pandas" ["l"="21.565,28.968"]
"jxieeducation/DIY-Data-Science" ["l"="27.2,34.256"]
"rouseguy/scipyUS2016_dl-image" ["l"="30.904,31.484"]
"matthiasplappert/keras-rl" ["l"="24.894,35.902"]
"shashankg7/Deep-Learning-for-NLP-Resources" ["l"="30.075,32.805"]
"LeavesBreathe/tensorflow_with_latest_papers" ["l"="27.084,34.3"]
"karandesai-96/digit-classifier" ["l"="31.243,-20.774"]
"Tetrachrome/subpixel" ["l"="33.779,32.43"]
"heuritech/convnets-keras" ["l"="30.99,31.574"]
"alrojo/tensorflow-tutorial" ["l"="23.393,31.05"]
"transcranial/keras-js" ["l"="28.21,27.62"]
"keplr-io/quiver" ["l"="25.77,33.733"]
"farizrahman4u/keras-contrib" ["l"="31.059,31.606"]
"fchollet/hualos" ["l"="31.014,31.552"]
"merantix/picasso" ["l"="34.169,35.106"]
"openai/cleverhans" ["l"="27.204,34.491"]
"inejc/painters" ["l"="30.903,31.574"]
"jocicmarko/ultrasound-nerve-segmentation" ["l"="29.115,36.577"]
"MarcBS/keras" ["l"="30.954,31.526"]
"philipperemy/keras-attention-mechanism" ["l"="31.325,31.567"]
"datalogue/keras-attention" ["l"="31.345,31.551"]
"farizrahman4u/seq2seq" ["l"="31.273,31.598"]
"CyberZHG/keras-self-attention" ["l"="31.331,31.528"]
"bojone/attention" ["l"="31.386,31.557"]
"Lsdefine/attention-is-all-you-need-keras" ["l"="31.325,31.545"]
"richliao/textClassifier" ["l"="31.467,31.54"]
"thushv89/attention_keras" ["l"="31.304,31.513"]
"philipperemy/keras-tcn" ["l"="30.384,32.473"]
"codekansas/keras-language-modeling" ["l"="31.25,31.575"]
"Separius/BERT-keras" ["l"="31.359,31.536"]
"ningshixian/LSTM_Attention" ["l"="31.351,31.52"]
"CyberZHG/keras-bert" ["l"="32.127,30.164"]
"fchollet/keras-resources" ["l"="23.44,31.02"]
"keras-team/keras-contrib" ["l"="31.317,31.6"]
"XifengGuo/CapsNet-Keras" ["l"="30.999,32.939"]
"MachineLP/train_arch" ["l"="31.359,31.417"]
"MachineLP/models" ["l"="31.329,31.383"]
"MachineLP/train_cnn-rnn-attention" ["l"="31.384,31.482"]
"taki0112/SENet-Tensorflow" ["l"="34.376,35.036"]
"yangxue0827/FPN_Tensorflow" ["l"="35.035,36.781"]
"MachineLP/Tensorflow-" ["l"="23.86,31.336"]
"MachineLP/train_cnn_multilabel" ["l"="31.354,31.383"]
"stratospark/keras-multiprocess-image-data-generator" ["l"="31.024,31.689"]
"rcmalli/keras-mobilenet" ["l"="31.011,31.706"]
"kuza55/keras-extras" ["l"="30.984,31.66"]
"oarriaga/spatial_transformer_networks" ["l"="31.027,31.73"]
"rcmalli/keras-squeezenet" ["l"="30.954,31.717"]
"bckenstler/CLR" ["l"="31.13,31.665"]
"guoyinwang/LEAM" ["l"="31.541,31.464"]
"dinghanshen/SWEM" ["l"="31.499,31.453"]
"kaushalshetty/Structured-Self-Attention" ["l"="31.513,31.468"]
"idiap/gile" ["l"="31.558,31.448"]
"NonvolatileMemory/AAAI_2019_EXAM" ["l"="31.576,31.432"]
"lancopku/label-embedding-network" ["l"="28.146,33.615"]
"jamesmullenbach/caml-mimic" ["l"="29.142,30.606"]
"lancopku/SU4MLC" ["l"="9.028,17.209"]
"luheng/deep_srl" ["l"="31.552,31.332"]
"XMUNLP/Tagger" ["l"="31.538,31.374"]
"strubell/LISA" ["l"="31.533,31.34"]
"luheng/lsgn" ["l"="31.573,31.339"]
"microth/PathLSTM" ["l"="31.537,31.308"]
"diegma/neural-dep-srl" ["l"="31.558,31.31"]
"bcmi220/unisrl" ["l"="31.58,31.319"]
"kentonl/e2e-coref" ["l"="29.679,32.7"]
"allenai/acl2018-semantic-parsing-tutorial" ["l"="-10.894,-4.63"]
"uhauha2929/examples" ["l"="31.41,31.452"]
"nn116003/self-attention-classification" ["l"="31.454,31.419"]
"mttk/rnn-classifier" ["l"="31.45,31.388"]
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" ["l"="31.26,31.453"]
"CyberZHG/keras-multi-head" ["l"="31.283,31.524"]
"uzaymacar/attention-mechanisms" ["l"="31.246,31.476"]
"CyberZHG/keras-transformer" ["l"="31.288,31.544"]
"kpot/keras-transformer" ["l"="31.311,31.534"]
"lvapeab/nmt-keras" ["l"="31.293,31.56"]
"clayandgithub/zh_cnn_text_classify" ["l"="31.592,31.672"]
"LambdaWx/CNN_sentence_tensorflow" ["l"="31.553,31.652"]
"lc222/text_classification_AI100" ["l"="31.585,31.705"]
"fendouai/Chinese-Text-Classification" ["l"="31.577,31.647"]
"indiejoseph/cnn-text-classification-tf-chinese" ["l"="31.543,31.619"]
"cjymz886/text-cnn" ["l"="32.043,30.011"]
"sfailsthy/chinese-text-classification-with-cnn-tf" ["l"="31.624,31.671"]
"Roshanson/TextInfoExp" ["l"="32.122,30.095"]
"gaussic/text-classification-cnn-rnn" ["l"="32.065,30.098"]
"luchi007/RNN_Text_Classify" ["l"="31.527,31.63"]
"liu-nlper/DocumentClassification" ["l"="31.564,31.68"]
"c1nty/Chinese_Spam_Filter" ["l"="31.637,31.689"]
"pakrchen/text-antispam" ["l"="31.696,31.74"]
"shijing888/BayesSpam" ["l"="31.624,31.7"]
"yongyehuang/zhihu-text-classification" ["l"="32.035,29.94"]
"bigboNed3/chinese_text_cnn" ["l"="15.307,5.41"]
"taoshen58/DiSAN" ["l"="31.525,31.42"]
"taoshen58/BiBloSA" ["l"="31.545,31.403"]
"YichenGong/Densely-Interactive-Inference-Network" ["l"="25.782,30.188"]
"taoshen58/ReSAN" ["l"="31.523,31.391"]
"flrngel/Self-Attentive-tensorflow" ["l"="31.502,31.432"]
"zhiguowang/BiMPM" ["l"="25.787,30.213"]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" ["l"="31.546,31.43"]
"baaesh/DiSAN-pytorch" ["l"="31.509,31.39"]
"NLPLearn/QANet" ["l"="25.928,30.173"]
"lukecq1231/nli" ["l"="25.763,30.174"]
"ilivans/tf-rnn-attention" ["l"="31.457,31.553"]
"ematvey/hierarchical-attention-networks" ["l"="31.525,31.509"]
"TobiasLee/Text-Classification" ["l"="31.51,31.532"]
"Kyubyong/transformer" ["l"="30.067,32.52"]
"HadoopIt/rnn-nlu" ["l"="28.101,28.961"]
"ematvey/tensorflow-seq2seq-tutorials" ["l"="30.209,32.524"]
"galsang/ABCNN" ["l"="26.415,29.741"]
"allenai/bilm-tf" ["l"="29.994,32.599"]
"dennybritz/cnn-text-classification-tf" ["l"="30.101,32.695"]
"rockingdingo/deepnlp" ["l"="32.091,30.044"]
"ilivans/attention-sentiment" ["l"="31.461,31.579"]
"allenai/bi-att-flow" ["l"="25.898,30.169"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="31.626,31.509"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="31.597,31.498"]
"yoonkim/CNN_sentence" ["l"="30.091,32.749"]
"galsang/CNN-sentence-classification-pytorch" ["l"="31.649,31.53"]
"pytorch/text" ["l"="30.002,32.562"]
"harvardnlp/sent-conv-torch" ["l"="27.032,34.377"]
"wabyking/TextClassificationBenchmark" ["l"="31.588,31.513"]
"bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["l"="31.592,31.542"]
"EdGENetworks/attention-networks-for-classification" ["l"="31.568,31.493"]
"chenyuntc/PyTorchText" ["l"="32.024,30.001"]
"MaximumEntropy/Seq2Seq-PyTorch" ["l"="30.069,32.432"]
"IBM/pytorch-seq2seq" ["l"="30.065,32.466"]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" ["l"="31.648,31.493"]
"songyouwei/ABSA-PyTorch" ["l"="29.089,31.17"]
"spro/practical-pytorch" ["l"="30.067,32.568"]
"bentrevett/pytorch-sentiment-analysis" ["l"="29.96,32.625"]
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" ["l"="31.612,31.52"]
"keishinkickback/Pytorch-RNN-text-classification" ["l"="31.663,31.467"]
"kk7nc/Text_Classification" ["l"="32.024,30.064"]
"brightmart/text_classification" ["l"="30.018,32.673"]
"lonePatient/Bert-Multi-Label-Text-Classification" ["l"="32.094,30.015"]
"leonsim/simhash" ["l"="31.78,31.81"]
"seomoz/simhash-py" ["l"="31.838,31.826"]
"yanyiwu/simhash" ["l"="31.8,31.796"]
"scrapinghub/python-simhash" ["l"="31.807,31.841"]
"zyymax/text-similarity" ["l"="31.776,31.843"]
"ekzhu/datasketch" ["l"="28.488,31.302"]
"seomoz/simhash-cpp" ["l"="31.824,31.806"]
"yufengm/SelfAttentive" ["l"="31.507,31.414"]
"hantek/SelfAttentiveSentEmbed" ["l"="31.577,31.395"]
"dasguptar/treelstm.pytorch" ["l"="27.054,34.49"]
"jx00109/structured-self-attentive-sentence-embedding" ["l"="31.573,31.408"]
"deepmind/narrativeqa" ["l"="25.938,30.153"]
"AlexGidiotis/Document-Classifier-LSTM" ["l"="31.431,31.497"]
"gentaiscool/lstm-attention" ["l"="31.387,31.504"]
"Socialbird-AILab/BERT-Classification-Tutorial" ["l"="32.127,30.028"]
"zenRRan/Sentiment-Analysis" ["l"="31.614,31.571"]
"bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF" ["l"="32.368,30"]
"ndrplz/ConvLSTM_pytorch" ["l"="18.545,28.267"]
"jiesutd/LatticeLSTM" ["l"="32.293,30.101"]
"DSKSD/DeepNLP-models-Pytorch" ["l"="29.994,32.656"]
"smilelight/lightNLP" ["l"="32.208,30.118"]
"jiesutd/NCRFpp" ["l"="32.281,30.019"]
"gosha20777/keras2cpp" ["l"="30.777,31.771"]
"pplonski/keras2cpp" ["l"="30.804,31.76"]
"Dobiasd/frugally-deep" ["l"="30.756,31.762"]
"CyberZHG/keras-radam" ["l"="31.257,31.746"]
"CyberZHG/keras-lookahead" ["l"="31.248,31.767"]
"bojone/keras_lookahead" ["l"="31.255,31.782"]
"titu1994/keras_rectified_adam" ["l"="31.275,31.773"]
"OverLordGoldDragon/keras-adamw" ["l"="31.228,31.756"]
"LiyuanLucasLiu/RAdam" ["l"="34.372,35.686"]
"CyberZHG/keras-xlnet" ["l"="31.283,31.63"]
"CyberZHG/keras-gradient-accumulation" ["l"="31.268,31.693"]
"GLambard/AdamW_Keras" ["l"="31.22,31.774"]
"qubvel/tta_wrapper" ["l"="31.277,31.797"]
"mgrankin/over9000" ["l"="34.369,35.797"]
"4uiiurz1/keras-cosine-annealing" ["l"="31.283,31.755"]
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" ["l"="31.312,31.457"]
"PrashantRanjan09/Elmo-Tutorial" ["l"="31.328,31.449"]
"UKPLab/elmo-bilstm-cnn-crf" ["l"="32.299,29.898"]
"strongio/keras-elmo" ["l"="31.341,31.487"]
"LopezGG/NN_NER_tensorFlow" ["l"="32.248,29.923"]
"LiyuanLucasLiu/LM-LSTM-CRF" ["l"="32.309,29.985"]
"zihangdai/mos" ["l"="30.109,32.441"]
"forresti/SqueezeNet" ["l"="30.891,31.668"]
"DT42/squeezenet_demo" ["l"="30.939,31.673"]
"david-drew/OpenVINO-Custom-Layers" ["l"="32.184,35.559"]
"cjweeks/tensorflow-cmake" ["l"="30.747,31.832"]
"FloopCZ/tensorflow_cc" ["l"="30.75,31.807"]
"PatWie/tensorflow-cmake" ["l"="30.727,31.824"]
"kecsap/tensorflow_cpp_packaging" ["l"="30.731,31.846"]
"jhjin/tensorflow-cpp" ["l"="30.768,31.849"]
"lysukhin/tensorflow-object-detection-cpp" ["l"="30.768,31.822"]
"Neargye/hello_tf_c_api" ["l"="30.711,31.806"]
"moorage/OpenCVTensorflowExample" ["l"="30.781,31.839"]
"sajadn/AdamW" ["l"="31.208,31.79"]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["l"="31.392,31.595"]
"jiegzhan/multi-class-text-classification-cnn-rnn" ["l"="31.489,31.59"]
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["l"="30.782,33.715"]
"faneshion/MatchZoo" ["l"="31.986,30.034"]
"uvipen/Hierarchical-attention-networks-pytorch" ["l"="31.569,31.529"]
"moof2k/kerasify" ["l"="30.801,31.782"]
"aljabr0/from-keras-to-c" ["l"="30.778,31.738"]
"amir-abdi/keras_to_tensorflow" ["l"="34.296,35.212"]
"serizba/cppflow" ["l"="30.737,31.783"]
"bitbionic/keras-to-tensorflow" ["l"="30.84,31.759"]
"harmanpreet93/keras-model-to-cpp" ["l"="30.822,31.779"]
"titu1994/Keras-Classification-Models" ["l"="34.294,34.883"]
"HamedMP/tensorflow_export_cpp_example" ["l"="30.814,31.731"]
"nok/sklearn-porter" ["l"="25.687,33.746"]
"zepingyu0512/srnn" ["l"="31.438,31.519"]
"bojone/seq2seq" ["l"="31.352,31.595"]
"locuslab/trellisnet" ["l"="23.138,33.758"]
"edubey/text-summarizer" ["l"="31.228,31.43"]
"yixuan/MiniDNN" ["l"="-12.393,25.537"]
"Dobiasd/FunctionalPlus" ["l"="-11.553,21.851"]
"wichtounet/dll" ["l"="30.725,31.719"]
"tiny-dnn/tiny-dnn" ["l"="27.633,35.343"]
"QuantStack/xtensor" ["l"="-11.455,21.643"]
"kmhofmann/selene" ["l"="-11.326,21.67"]
"dpilger26/NumCpp" ["l"="-11.679,21.726"]
"sujitpal/eeap-examples" ["l"="31.423,31.476"]
"stevewyl/keras_text_classification" ["l"="31.418,31.532"]
"AmirulOm/tensorflow_capi_sample" ["l"="30.714,31.789"]
"leggedrobotics/tensorflow-cpp" ["l"="30.698,31.755"]
"prabhuomkar/pytorch-cpp" ["l"="32.02,35.822"]
"skylook/tensorflow_cpp" ["l"="30.691,31.783"]
"iwatake2222/play_with_tflite" ["l"="34.221,35.659"]
"ValYouW/tflite-dist" ["l"="30.669,31.76"]
"onnx/tensorflow-onnx" ["l"="34.442,35.545"]
"borarak/tensorflow2_cpp" ["l"="30.718,31.759"]
"bhaveshoswal/CNN-text-classification-keras" ["l"="31.434,31.603"]
"shagunsodhani/CNN-Sentence-Classifier" ["l"="31.414,31.639"]
"bradleypallen/keras-quora-question-pairs" ["l"="25.759,30.248"]
"cahya-wirawan/cnn-text-classification-tf" ["l"="31.463,31.619"]
"raghakot/keras-text" ["l"="31.415,31.579"]
"shyamupa/snli-entailment" ["l"="31.255,31.618"]
"salestock/fastText.py" ["l"="30.141,32.697"]
"shuzi/insuranceQA" ["l"="30.595,28.102"]
"datalogai/recurrentshop" ["l"="31.181,31.592"]
"EderSantana/seya" ["l"="31.11,31.571"]
"ryankiros/skip-thoughts" ["l"="30.01,32.741"]
"white127/insuranceQA-cnn-lstm" ["l"="30.574,28.087"]
"harvardnlp/seq2seq-attn" ["l"="27.07,34.332"]
"jacoxu/encoder_decoder" ["l"="31.241,31.591"]
"codekansas/insurance_qa_python" ["l"="30.638,28.096"]
"jarfo/kchar" ["l"="31.2,31.56"]
"klb3713/sentence2vec" ["l"="30.071,32.829"]
"osh/kerlym" ["l"="24.803,35.837"]
"osh/KerasGAN" ["l"="33.91,32.628"]
"mokemokechicken/keras_npi" ["l"="27.247,34.336"]
"google/seq2seq" ["l"="30.114,32.543"]
"farizrahman4u/recurrentshop" ["l"="31.281,31.576"]
"nicolas-ivanov/debug_seq2seq" ["l"="31.237,31.609"]
"tensorflow/nmt" ["l"="30.085,32.546"]
"fchollet/keras" ["l"="23.498,31.087"]
"dennybritz/deeplearning-papernotes" ["l"="23.38,31.006"]
"jiangqy/LSTM-Classification-Pytorch" ["l"="31.665,31.514"]
"Tencent/NeuralNLP-NeuralClassifier" ["l"="32.074,30.131"]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["l"="31.931,29.895"]
"atnlp/torchtext-summary" ["l"="29.591,32.35"]
"andyweizhao/capsule_text_classification" ["l"="30.947,32.894"]
"bojone/bert4keras" ["l"="32.105,30.251"]
"bojone/kg-2019" ["l"="32.362,30.172"]
"bojone/bert_in_keras" ["l"="32.214,30.131"]
"macanv/BERT-BiLSTM-CRF-NER" ["l"="32.174,30.151"]
"zjy-ucas/ChineseNER" ["l"="32.228,30.072"]
"brightmart/albert_zh" ["l"="32.122,30.219"]
"Determined22/zh-NER-TF" ["l"="32.19,30.072"]
"brightmart/roberta_zh" ["l"="32.153,30.243"]
"jonsafari/nmt-list" ["l"="30.007,32.335"]
"EdinburghNLP/nematus" ["l"="29.96,32.371"]
"OpenNMT/OpenNMT-tf" ["l"="29.991,32.447"]
"rsennrich/subword-nmt" ["l"="29.949,32.431"]
"neubig/nmt-tips" ["l"="30.02,32.324"]
"joeynmt/joeynmt" ["l"="29.856,32.351"]
"awslabs/sockeye" ["l"="29.983,32.375"]
"mjpost/sacreBLEU" ["l"="29.945,32.33"]
"facebookresearch/UnsupervisedMT" ["l"="29.935,32.412"]
"rsennrich/nematus" ["l"="30.046,32.322"]
"indiejoseph/doc-han-att" ["l"="31.545,31.559"]
"synthesio/hierarchical-attention-networks" ["l"="31.498,31.498"]
"tqtg/hierarchical-attention-networks" ["l"="31.545,31.529"]
"lc222/HAN-text-classification-tf" ["l"="31.518,31.489"]
"triplemeng/hierarchical-attention-model" ["l"="31.576,31.454"]
"cedias/Hierarchical-Sentiment" ["l"="31.546,31.487"]
"pandeykartikey/Hierarchical-Attention-Network" ["l"="31.605,31.48"]
"minqi/hnatt" ["l"="29.515,31.246"]
"stephen-v/zh-NER-keras" ["l"="31.363,31.643"]
"liushaoweihua/keras-bert-ner" ["l"="31.392,31.701"]
"stephen-v/zh-segmentation-keras" ["l"="31.379,31.664"]
"GlassyWing/bi-lstm-crf" ["l"="32.308,30.005"]
"littledeepthink/NER-in-Chinese-Text" ["l"="31.395,31.668"]
"ProHiryu/bert-chinese-ner" ["l"="32.257,30.081"]
"kifish/NER-demo" ["l"="31.372,31.679"]
"keras-team/keras-applications" ["l"="34.298,35.258"]
"eriklindernoren/Keras-GAN" ["l"="33.795,32.766"]
"tensorflow/addons" ["l"="25.59,34.156"]
"Hironsan/anago" ["l"="32.287,29.969"]
"bojone/crf" ["l"="31.343,31.624"]
"keras-team/keras-preprocessing" ["l"="25.717,34.21"]
"EdGENetworks/anuvada" ["l"="31.598,31.459"]
"cedias/HAN-pytorch" ["l"="31.568,31.471"]
"raviqqe/tensorflow-font2char2word2sent2doc" ["l"="31.622,31.433"]
"rguthrie3/DeepLearningForNLPInPytorch" ["l"="30.022,32.642"]
"zackhy/TextClassification" ["l"="31.515,31.578"]
"yao8839836/text_gcn" ["l"="21.746,38.58"]
"brightmart/bert_language_understanding" ["l"="32.11,30.035"]
"dongjun-Lee/text-classification-models-tf" ["l"="33.713,32.874"]
"Renovamen/Text-Classification" ["l"="31.697,31.485"]
"songyingxin/Bert-TextClassification" ["l"="32.133,30.076"]
"songyingxin/TextClassification-Pytorch" ["l"="32.069,30.059"]
"miracleyoo/DPCNN-TextCNN-Pytorch-Inception" ["l"="31.736,31.495"]
"ThilinaRajapakse/pytorch-transformers-classification" ["l"="31.736,31.446"]
"slaysd/pytorch-sentiment-analysis-classification" ["l"="31.329,31.705"]
"xiaobaicxy/text-classification-BiLSTM-Attention-pytorch" ["l"="31.327,31.733"]
"clairett/pytorch-sentiment-classification" ["l"="31.347,31.756"]
"u784799i/biLSTM_attn" ["l"="31.329,31.652"]
"pranoyr/cnn-lstm" ["l"="32.657,34.816"]
"wangshy31/Densely-Connected-CNN-with-Multiscale-Feature-Attention" ["l"="32.618,35.941"]
"hustlingchen/A3NCF" ["l"="23.066,37.016"]
"Zehaos/MobileNet" ["l"="34.439,35.128"]
"xiaochus/MobileNetV2" ["l"="34.688,35.125"]
"Choco31415/Attention_Network_With_Keras" ["l"="31.371,31.517"]
"foamliu/Self-Attention-Keras" ["l"="31.403,31.502"]
"ShawnyXiao/TextClassification-Keras" ["l"="-35.139,-17.401"]
"tkipf/keras-gcn" ["l"="21.771,38.649"]
"iliaschalkidis/ELMo-keras" ["l"="31.315,31.496"]
"roomylee/self-attentive-emb-tf" ["l"="31.483,31.437"]
"timbmg/Structured-Self-Attentive-Sentence-Embedding" ["l"="31.525,31.447"]
"iamxiatian/xsimilarity" ["l"="31.782,31.916"]
"HuangFJ/text-similarity" ["l"="31.779,31.884"]
"LambdaWx/con_sentence" ["l"="31.538,31.679"]
"rishabhdhakarwal/Stock_Archives" ["l"="31.624,31.47"]
"fristonio/gvm" ["l"="31.649,31.446"]
"Cheneng/HiararchicalAttentionGRU" ["l"="31.632,31.454"]
"agrim123/yapa" ["l"="31.634,31.468"]
"swap-nil7/GSoC-Proposal" ["l"="31.618,31.46"]
"CyberZHG/keras-transformer-xl" ["l"="31.264,31.554"]
"zedom1/XLNet_embbeding" ["l"="31.275,31.659"]
"ymcui/Chinese-PreTrained-XLNet" ["l"="32.158,30.183"]
"DongjunLee/transformer-tensorflow" ["l"="31.404,31.425"]
"lilianweng/transformer-tensorflow" ["l"="31.399,31.384"]
"tobyyouup/conv_seq2seq" ["l"="27.179,34.581"]
"jinh574/pytorch-sentiment-analysis-classification" ["l"="31.356,31.782"]
"fwang91/residual-attention-network" ["l"="31.712,37.272"]
"SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["l"="30.744,30.918"]
"wushilian/CRNN_Attention_OCR_Chinese" ["l"="29.442,34.096"]
"THTBSE/rnn_text_classification" ["l"="31.376,31.446"]
"jiegzhan/multi-class-text-classification-cnn" ["l"="31.513,31.608"]
"LunaBlack/RNN-Classification" ["l"="31.497,31.631"]
"carpedm20/lstm-char-cnn-tensorflow" ["l"="27.113,34.387"]
"chenzhi1992/Multi-Label-Text-Classification" ["l"="31.988,29.948"]
"magical2world/tf-hierarchical-rnn" ["l"="31.602,31.422"]
"wichtounet/etl" ["l"="30.701,31.698"]
"Tencent/FeatherCNN" ["l"="27.605,35.394"]
"clab/dynet" ["l"="30.165,32.577"]
"fchollet/keras-blog" ["l"="30.991,31.489"]
"hadim/keras-toolbox" ["l"="30.992,31.61"]
"AaronFang123/Naive-Bayes-classifier" ["l"="31.664,31.693"]
"silverzhaojr/spam-filter" ["l"="31.645,31.707"]
"xiaoran-2/TextSimilarity" ["l"="31.759,31.865"]
"hycis/bidirectional_RNN" ["l"="31.098,31.521"]
"hycis/Mozi" ["l"="31.09,31.489"]
"negar-rostamzadeh/LSTM-Attention" ["l"="31.321,31.477"]
"PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["l"="22.191,35.922"]
"bubbliiiing/Keras-Attention" ["l"="29.623,35.298"]
"PatientEz/keras-attention-mechanism" ["l"="22.132,35.902"]
"gantheory/TPA-LSTM" ["l"="22.291,35.898"]
"jsyoon0823/Time-series-prediction" ["l"="22.111,35.908"]
"TropComplique/knowledge-distillation-keras" ["l"="30.937,31.821"]
"tejasgodambe/knowledge-distillation" ["l"="30.959,31.837"]
"Irtza/Keras_model_compression" ["l"="30.94,31.772"]
"johnkorn/distillation" ["l"="30.924,31.845"]
"patrickphat/Knowledge-Distillation-Keras" ["l"="30.919,31.828"]
"tripdancer0916/keras-knowledge-distillation" ["l"="30.943,31.842"]
"DushyantaDhyani/kdtf" ["l"="30.748,35.465"]
"philipperemy/keras-seq2seq-example" ["l"="31.202,31.607"]
"eske/seq2seq" ["l"="30.222,32.457"]
"Neargye/tensorflow" ["l"="30.675,31.799"]
"gdyshi/model_deployment" ["l"="30.651,31.829"]
"guikarist/tensorflow-windows-build-script" ["l"="30.706,31.838"]
"CasonTsai/MaskRcnn_tensorflow_cpp_inference" ["l"="30.675,31.817"]
"rky0930/tf_c_api" ["l"="30.691,31.818"]
"tensorflow/tensorrt" ["l"="29.943,38.191"]
"Neargye/scope_guard" ["l"="30.652,31.801"]
"zhangcliff/tensorflow-c-mnist" ["l"="30.678,31.838"]
"Cheneng/DPCNN" ["l"="31.772,31.495"]
"HaishuoFang/DPCNN" ["l"="31.799,31.495"]
"castorini/hedwig" ["l"="31.634,31.548"]
"AndriyMulyar/bert_document_classification" ["l"="31.684,31.571"]
"malteos/pytorch-bert-document-classification" ["l"="31.688,31.553"]
"namisan/mt-dnn" ["l"="29.853,32.482"]
"jasonwei20/eda_nlp" ["l"="32.075,30.315"]
"xuyige/BERT4doc-Classification" ["l"="32.141,30.337"]
"kaushaltrivedi/fast-bert" ["l"="29.766,32.529"]
"allenai/longformer" ["l"="29.772,32.437"]
"nyu-dl/dl4marco-bert" ["l"="25.857,29.12"]
"howardhsu/BERT-for-RRC-ABSA" ["l"="29.077,31.156"]
"ValYouW/crossplatform-tflite-object-detecion" ["l"="30.642,31.762"]
"ValYouW/tflite-win-c" ["l"="30.644,31.746"]
"Tixierae/deep_learning_NLP" ["l"="31.454,31.492"]
"BrambleXu/nlp-beginner-guide-keras" ["l"="31.453,31.454"]
"astorfi/Deep-Learning-NLP" ["l"="29.73,32.784"]
"CyberZHG/keras-layer-normalization" ["l"="31.264,31.509"]
"lining0806/TextMining" ["l"="31.598,31.752"]
"lining0806/TextClassify2" ["l"="31.605,31.776"]
"imlab-uiip/keras-segnet" ["l"="31.499,36.753"]
"titu1994/Keras-ResNeXt" ["l"="34.333,35.058"]
"yhenon/keras-frcnn" ["l"="34.348,35.069"]
"chasingbob/squeezenet-keras" ["l"="30.924,31.702"]
"vonclites/squeezenet" ["l"="30.94,31.693"]
"titu1994/DenseNet" ["l"="34.313,35.001"]
"DeepScale/SqueezeNet" ["l"="34.356,35.084"]
"rykov8/ssd_keras" ["l"="34.377,35.082"]
"DwangoMediaVillage/keras_compressor" ["l"="30.956,31.759"]
"avoroshilov/tf-squeezenet" ["l"="30.932,31.733"]
"kentsommer/keras-inceptionV4" ["l"="34.308,34.984"]
"anayebi/keras-extra" ["l"="31.102,31.594"]
"jamesmf/mnistCRNN" ["l"="31.111,31.612"]
"fchollet/tensorflow" ["l"="30.983,31.463"]
"fchollet/community" ["l"="30.984,31.444"]
"fchollet/tensorboard" ["l"="30.97,31.447"]
"yanyiwu/cppjieba" ["l"="31.848,30.139"]
"yanyiwu/simhash_server" ["l"="31.792,31.768"]
"sing1ee/simhash-java" ["l"="31.849,31.774"]
"yanyiwu/gosimhash" ["l"="31.828,31.848"]
"1e0ng/simhash" ["l"="31.804,31.825"]
"yanyiwu/limonp" ["l"="31.754,30.08"]
"baidu/Familia" ["l"="31.975,30.129"]
"xlturing/Simhash4J" ["l"="31.828,31.771"]
"guestwalk/kaggle-2014-criteo" ["l"="22.754,37.307"]
"chen3feng/typhoon-blade" ["l"="-11.332,4.738"]
"peterjc123/pytorch-scripts" ["l"="30.822,31.508"]
"peterjc123/pytorch" ["l"="30.792,31.493"]
"philferriere/dlwin" ["l"="30.867,31.526"]
"lanpa/tensorboard-pytorch" ["l"="34.262,35.363"]
"indiejoseph/chinese-char-rnn" ["l"="31.569,31.598"]
"kinni/char-cnn-text-classification-tensorflow" ["l"="31.552,31.592"]
"prateekjoshi565/textrank_text_summarization" ["l"="31.253,31.421"]
"titu1994/Snapshot-Ensembles" ["l"="31.085,31.656"]
"gaohuang/SnapshotEnsemble" ["l"="31.055,31.657"]
"arthurdouillard/keras-snapshot_ensembles" ["l"="31.065,31.672"]
"moskomule/pytorch.snapshot.ensembles" ["l"="31.066,31.642"]
"kristpapadopoulos/keras-stochastic-weight-averaging" ["l"="31.069,31.688"]
"emrul/Learning-Rate" ["l"="31.083,31.677"]
"surmenok/keras_lr_finder" ["l"="31.107,31.686"]
"bennyfri/TFMacCpp" ["l"="30.75,31.86"]
"tensorflow/runtime" ["l"="27.708,35.531"]
"da03/Attention-OCR" ["l"="29.43,34.117"]
"harveyaot/DianJing" ["l"="31.347,31.673"]
"QuantumLiu/Neural-Headline-Generator-CN" ["l"="31.356,31.704"]
"sharkmir1/Hierarchical-Attention-Network" ["l"="31.584,31.563"]
"iworldtong/text_gcn.pytorch" ["l"="21.694,38.559"]
"Hazoom/bert-han" ["l"="31.569,31.557"]
"bojone/on-lstm" ["l"="27.653,32.856"]
"bstriner/keras-adversarial" ["l"="33.895,32.642"]
"lmthang/thesis" ["l"="30.04,32.388"]
"junfenglx/reasoning_attention" ["l"="31.228,31.645"]
"vsitzmann/snli-attention-tensorflow" ["l"="31.245,31.645"]
"cheng6076/SNLI-attention" ["l"="26.99,34.333"]
"shuohangwang/SeqMatchSeq" ["l"="25.855,30.194"]
"JansonKong/spam_filtering" ["l"="31.712,31.757"]
"guoxiaolu/model_compression" ["l"="30.958,31.785"]
"TianzhongSong/Model-Compression-Keras" ["l"="30.974,31.775"]
"kpe/bert-for-tf2" ["l"="32.185,30.136"]
"jiegzhan/machine-learning-stanford" ["l"="31.511,31.644"]
"bojone/Capsule" ["l"="30.944,32.918"]
"bojone/kg-2019-baseline" ["l"="32.454,30.124"]
"shawroad/Keras-Learning-Summary" ["l"="31.368,31.617"]
"ztz818/Automatic-generation-of-text-summaries" ["l"="32.225,30.437"]
"cahya-wirawan/ML-Collection" ["l"="31.466,31.645"]
"bstriner/keras-tqdm" ["l"="31.024,31.505"]
"netrack/keras-metrics" ["l"="25.789,34.302"]
"dandxy89/ImageModels" ["l"="30.959,31.594"]
"jacobgil/keras-cam" ["l"="28.647,34.963"]
"tdeboissiere/VGG16CAM-keras" ["l"="23.495,29.457"]
"jacobgil/keras-dcgan" ["l"="33.797,32.619"]
"FHainzl/Visualizing_Understanding_CNN_Implementation" ["l"="28.549,34.985"]
"duggalrahul/AlexNet-Experiments-Keras" ["l"="30.999,31.532"]
"jazzsaxmafia/Weakly_detector" ["l"="28.576,34.949"]
"titu1994/keras-one-cycle" ["l"="31.126,31.702"]
"albu/albumentations" ["l"="34.315,35.522"]
"raghakot/keras-vis" ["l"="25.702,33.779"]
"maxpumperla/hyperas" ["l"="25.623,33.787"]
"titu1994/keras-squeeze-excite-network" ["l"="31.752,37.383"]
"qubvel/segmentation_models" ["l"="34.349,35.487"]
"flyyufelix/cnn_finetune" ["l"="34.294,35.076"]
"qubvel/efficientnet" ["l"="34.418,35.442"]
"timgaripov/swa" ["l"="33.921,36.657"]
"psklight/keras_one_cycle_clr" ["l"="31.114,31.718"]
"shaoanlu/AdamW-and-SGDW" ["l"="31.131,31.735"]
"WittmannF/LRFinder" ["l"="31.099,31.712"]
"yu4u/mixup-generator" ["l"="33.769,36.745"]
"AndriyMulyar/semantic-text-similarity" ["l"="31.735,31.583"]
"tlatkowski/multihead-siamese-nets" ["l"="25.6,30.243"]
"strongio/keras-bert" ["l"="31.358,31.494"]
"CreekLou/simhash" ["l"="31.879,31.766"]
"Cheneng/TextCNN" ["l"="15.24,5.401"]
"skaae/transformer_network" ["l"="26.733,34.377"]
"jbornschein/draw" ["l"="27.036,34.234"]
"phreeza/keras-GAN" ["l"="33.979,32.637"]
"AgnezIO/agnez" ["l"="31.107,31.549"]
"IndicoDataSolutions/Passage" ["l"="27.056,34.185"]
"shawntan/neural-turing-machines" ["l"="27.077,34.27"]
"joschu/cgt" ["l"="27.002,34.183"]
"mila-udem/platoon" ["l"="27.02,34.22"]
"seomoz/simhash-db-py" ["l"="31.862,31.853"]
"liangsun/simhash" ["l"="31.903,31.859"]
"seomoz/simhash-cluster" ["l"="31.87,31.818"]
"parkr/near-dup-detection" ["l"="31.866,31.834"]
"JHart96/keras_elmo_embedding_layer" ["l"="31.345,31.454"]
"searobbersduck/ELMo_Chin" ["l"="32.321,29.787"]
"nlpjoe/2018-CCL-UIIMCS" ["l"="31.955,29.884"]
"mhjabreel/CharCnn_Keras" ["l"="27.065,34.517"]
"CyberZHG/keras-pos-embd" ["l"="31.245,31.514"]
"xiaosongshine/transfromer_keras" ["l"="31.255,31.529"]
"suyash/transformer" ["l"="31.237,31.535"]
"CyberZHG/keras-gpt-2" ["l"="31.221,31.514"]
"sitting-duck/stuff" ["l"="30.681,31.864"]
"philipperemy/keras-visualize-activations" ["l"="31.054,31.578"]
"aurora95/Keras-FCN" ["l"="31.533,36.807"]
"codekansas/gandlf" ["l"="31.031,31.603"]
"the-moliver/kfs" ["l"="31.035,31.623"]
"ThilinaRajapakse/BERT_binary_text_classification" ["l"="31.756,31.424"]
"Shivampanwar/Bert-text-classification" ["l"="31.774,31.443"]
"ThilinaRajapakse/simpletransformers" ["l"="29.73,32.515"]
"liushaoweihua/Keras-Bert-Kbqa" ["l"="31.407,31.731"]
"hamelsmu/ktext" ["l"="-17.678,-33.388"]
"aszxqw/simhash" ["l"="31.952,31.883"]
"tylergenter/pytorch" ["l"="30.768,31.481"]
"peterjc123/LiveIDE" ["l"="23.278,16.22"]
"pierluigiferrari/caffe_weight_converter" ["l"="30.944,31.494"]
"Jiakui/awesome-bert" ["l"="32.129,30.114"]
"huggingface/pytorch-pretrained-BERT" ["l"="29.956,32.549"]
"HIT-SCIR/ELMoForManyLangs" ["l"="29.987,32.634"]
"hluu11/SimpleTF-CPP" ["l"="30.796,31.83"]
"strubell/LISA-v1" ["l"="31.513,31.319"]
"malllabiisc/NeuralDater" ["l"="31.569,31.275"]
"avolkov1/keras_experiments" ["l"="30.958,31.648"]
"theamrzaki/text_summurization_abstractive_methods" ["l"="28.327,33.613"]
"bojone/keras_lazyoptimizer" ["l"="31.246,31.806"]
"tsterbak/keras_tta" ["l"="31.281,31.821"]
"formath/tensorflow-predictor-cpp" ["l"="30.711,31.871"]
"tensorflow/custom-op" ["l"="25.582,34.282"]
"hiroki13/span-based-srl" ["l"="31.602,31.32"]
"hybridtheory/floc-simhash" ["l"="31.802,31.856"]
"jacobgil/keras-filter-visualization" ["l"="31.057,31.549"]
"malllabiisc/AD3" ["l"="31.576,31.255"]
"small-yellow-duck/kaggle_art" ["l"="30.876,31.579"]
"roomylee/self-attention-tf" ["l"="31.487,31.401"]
"aszxqw/cppjieba" ["l"="31.99,31.905"]
"aszxqw/limonp" ["l"="31.98,31.921"]
"aszxqw/libcppjieba" ["l"="31.997,31.924"]
"aszxqw/nodejieba" ["l"="32.021,31.897"]
"aszxqw/keyword_server" ["l"="31.972,31.893"]
"guochy2012/EchoLib" ["l"="32.014,31.921"]
"CyberZHG/keras-adaptive-softmax" ["l"="31.229,31.55"]
"ArmandDS/bert_for_long_text" ["l"="31.705,31.591"]
"ematvey/deep-text-classifier" ["l"="31.648,31.405"]
"nicolas-ivanov/seq2seq_chatbot_links" ["l"="30.594,28.186"]
"nicolas-ivanov/tf_seq2seq_chatbot" ["l"="30.542,28.144"]
"Linusp/soph" ["l"="31.209,31.631"]
"fristonio/docker.rs" ["l"="31.677,31.425"]
"guochy2012/FtpServer" ["l"="32.032,31.932"]
}